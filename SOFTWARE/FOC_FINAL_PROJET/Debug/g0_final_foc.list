
g0_final_foc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003488  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003544  08003544  00004544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003664  08003664  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003664  08003664  00004664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800366c  0800366c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800366c  0800366c  0000466c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003670  08003670  00004670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003674  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000010  08003680  00005010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08003680  00005348  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f554  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c80  00000000  00000000  00024588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00011517  00000000  00000000  00028208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  00039720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c35  00000000  00000000  0003a800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017797  00000000  00000000  0003c435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025249  00000000  00000000  00053bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c454  00000000  00000000  00078e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00115269  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e78  00000000  00000000  001152ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  00118124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800352c 	.word	0x0800352c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	0800352c 	.word	0x0800352c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8d8 	bl	8000604 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8d3 	bl	8000604 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzsi2>:
 80005c8:	211c      	movs	r1, #28
 80005ca:	2301      	movs	r3, #1
 80005cc:	041b      	lsls	r3, r3, #16
 80005ce:	4298      	cmp	r0, r3
 80005d0:	d301      	bcc.n	80005d6 <__clzsi2+0xe>
 80005d2:	0c00      	lsrs	r0, r0, #16
 80005d4:	3910      	subs	r1, #16
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	4298      	cmp	r0, r3
 80005da:	d301      	bcc.n	80005e0 <__clzsi2+0x18>
 80005dc:	0a00      	lsrs	r0, r0, #8
 80005de:	3908      	subs	r1, #8
 80005e0:	091b      	lsrs	r3, r3, #4
 80005e2:	4298      	cmp	r0, r3
 80005e4:	d301      	bcc.n	80005ea <__clzsi2+0x22>
 80005e6:	0900      	lsrs	r0, r0, #4
 80005e8:	3904      	subs	r1, #4
 80005ea:	a202      	add	r2, pc, #8	@ (adr r2, 80005f4 <__clzsi2+0x2c>)
 80005ec:	5c10      	ldrb	r0, [r2, r0]
 80005ee:	1840      	adds	r0, r0, r1
 80005f0:	4770      	bx	lr
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	02020304 	.word	0x02020304
 80005f8:	01010101 	.word	0x01010101
	...

08000604 <__clzdi2>:
 8000604:	b510      	push	{r4, lr}
 8000606:	2900      	cmp	r1, #0
 8000608:	d103      	bne.n	8000612 <__clzdi2+0xe>
 800060a:	f7ff ffdd 	bl	80005c8 <__clzsi2>
 800060e:	3020      	adds	r0, #32
 8000610:	e002      	b.n	8000618 <__clzdi2+0x14>
 8000612:	0008      	movs	r0, r1
 8000614:	f7ff ffd8 	bl	80005c8 <__clzsi2>
 8000618:	bd10      	pop	{r4, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800061c:	b510      	push	{r4, lr}
 800061e:	b084      	sub	sp, #16

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000620:	220c      	movs	r2, #12
 8000622:	2100      	movs	r1, #0
 8000624:	a801      	add	r0, sp, #4
 8000626:	f002 ff55 	bl	80034d4 <memset>
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800062a:	2280      	movs	r2, #128	@ 0x80
  hadc1.Instance = ADC1;
 800062c:	4c2c      	ldr	r4, [pc, #176]	@ (80006e0 <MX_ADC1_Init+0xc4>)
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800062e:	0612      	lsls	r2, r2, #24
 8000630:	6122      	str	r2, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000632:	2208      	movs	r2, #8
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000634:	2120      	movs	r1, #32
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000636:	6162      	str	r2, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	2200      	movs	r2, #0
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800063a:	60e1      	str	r1, [r4, #12]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063c:	5462      	strb	r2, [r4, r1]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC4;
 800063e:	2188      	movs	r1, #136	@ 0x88
 8000640:	00c9      	lsls	r1, r1, #3
 8000642:	6261      	str	r1, [r4, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000644:	3940      	subs	r1, #64	@ 0x40
 8000646:	62a1      	str	r1, [r4, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000648:	212c      	movs	r1, #44	@ 0x2c
 800064a:	5462      	strb	r2, [r4, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800064c:	2180      	movs	r1, #128	@ 0x80
  hadc1.Instance = ADC1;
 800064e:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <MX_ADC1_Init+0xc8>)
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000650:	0149      	lsls	r1, r1, #5
  hadc1.Init.NbrOfConversion = 1;
 8000652:	2001      	movs	r0, #1
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000654:	6321      	str	r1, [r4, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 8000656:	2102      	movs	r1, #2
  hadc1.Instance = ADC1;
 8000658:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800065a:	2300      	movs	r3, #0
  hadc1.Init.NbrOfConversion = 1;
 800065c:	61e0      	str	r0, [r4, #28]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 800065e:	6361      	str	r1, [r4, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000660:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 8000662:	313a      	adds	r1, #58	@ 0x3a
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000664:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000666:	60a3      	str	r3, [r4, #8]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000668:	8323      	strh	r3, [r4, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800066a:	76a2      	strb	r2, [r4, #26]
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	5462      	strb	r2, [r4, r1]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800066e:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000670:	f000 fcfe 	bl	8001070 <HAL_ADC_Init>
 8000674:	2800      	cmp	r0, #0
 8000676:	d123      	bne.n	80006c0 <MX_ADC1_Init+0xa4>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000678:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <MX_ADC1_Init+0xcc>)
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067a:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 800067c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800067e:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000680:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000682:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	f000 fe10 	bl	80012a8 <HAL_ADC_ConfigChannel>
 8000688:	2800      	cmp	r0, #0
 800068a:	d125      	bne.n	80006d8 <MX_ADC1_Init+0xbc>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800068c:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <MX_ADC1_Init+0xd0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068e:	0020      	movs	r0, r4
 8000690:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_6;
 8000692:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000694:	f000 fe08 	bl	80012a8 <HAL_ADC_ConfigChannel>
 8000698:	2800      	cmp	r0, #0
 800069a:	d11a      	bne.n	80006d2 <MX_ADC1_Init+0xb6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800069c:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_ADC1_Init+0xd4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069e:	0020      	movs	r0, r4
 80006a0:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_7;
 80006a2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a4:	f000 fe00 	bl	80012a8 <HAL_ADC_ConfigChannel>
 80006a8:	2800      	cmp	r0, #0
 80006aa:	d10f      	bne.n	80006cc <MX_ADC1_Init+0xb0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_ADC1_Init+0xd8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	0020      	movs	r0, r4
 80006b0:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_9;
 80006b2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	f000 fdf8 	bl	80012a8 <HAL_ADC_ConfigChannel>
 80006b8:	2800      	cmp	r0, #0
 80006ba:	d104      	bne.n	80006c6 <MX_ADC1_Init+0xaa>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006bc:	b004      	add	sp, #16
 80006be:	bd10      	pop	{r4, pc}
    Error_Handler();
 80006c0:	f000 f98a 	bl	80009d8 <Error_Handler>
 80006c4:	e7d8      	b.n	8000678 <MX_ADC1_Init+0x5c>
    Error_Handler();
 80006c6:	f000 f987 	bl	80009d8 <Error_Handler>
}
 80006ca:	e7f7      	b.n	80006bc <MX_ADC1_Init+0xa0>
    Error_Handler();
 80006cc:	f000 f984 	bl	80009d8 <Error_Handler>
 80006d0:	e7ec      	b.n	80006ac <MX_ADC1_Init+0x90>
    Error_Handler();
 80006d2:	f000 f981 	bl	80009d8 <Error_Handler>
 80006d6:	e7e1      	b.n	800069c <MX_ADC1_Init+0x80>
    Error_Handler();
 80006d8:	f000 f97e 	bl	80009d8 <Error_Handler>
 80006dc:	e7d6      	b.n	800068c <MX_ADC1_Init+0x70>
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	20000088 	.word	0x20000088
 80006e4:	40012400 	.word	0x40012400
 80006e8:	14000020 	.word	0x14000020
 80006ec:	18000040 	.word	0x18000040
 80006f0:	1c000080 	.word	0x1c000080
 80006f4:	24000200 	.word	0x24000200

080006f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	0004      	movs	r4, r0
 80006fc:	b094      	sub	sp, #80	@ 0x50

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	2214      	movs	r2, #20
 8000700:	2100      	movs	r1, #0
 8000702:	a804      	add	r0, sp, #16
 8000704:	f002 fee6 	bl	80034d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000708:	2228      	movs	r2, #40	@ 0x28
 800070a:	2100      	movs	r1, #0
 800070c:	a80a      	add	r0, sp, #40	@ 0x28
 800070e:	f002 fee1 	bl	80034d4 <memset>
  if(adcHandle->Instance==ADC1)
 8000712:	4b30      	ldr	r3, [pc, #192]	@ (80007d4 <HAL_ADC_MspInit+0xdc>)
 8000714:	6822      	ldr	r2, [r4, #0]
 8000716:	429a      	cmp	r2, r3
 8000718:	d001      	beq.n	800071e <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800071a:	b014      	add	sp, #80	@ 0x50
 800071c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800071e:	2380      	movs	r3, #128	@ 0x80
 8000720:	01db      	lsls	r3, r3, #7
 8000722:	930a      	str	r3, [sp, #40]	@ 0x28
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 8000724:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000726:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 8000728:	05db      	lsls	r3, r3, #23
 800072a:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072c:	f001 fd44 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 8000730:	2800      	cmp	r0, #0
 8000732:	d148      	bne.n	80007c6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC_CLK_ENABLE();
 8000734:	2180      	movs	r1, #128	@ 0x80
 8000736:	4b28      	ldr	r3, [pc, #160]	@ (80007d8 <HAL_ADC_MspInit+0xe0>)
 8000738:	0349      	lsls	r1, r1, #13
 800073a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 800073e:	430a      	orrs	r2, r1
 8000740:	641a      	str	r2, [r3, #64]	@ 0x40
 8000742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2600      	movs	r6, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 8000746:	400a      	ands	r2, r1
 8000748:	9201      	str	r2, [sp, #4]
 800074a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	2201      	movs	r2, #1
 800074e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4311      	orrs	r1, r2
 8000754:	6359      	str	r1, [r3, #52]	@ 0x34
 8000756:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000758:	400a      	ands	r2, r1
 800075a:	9202      	str	r2, [sp, #8]
 800075c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2202      	movs	r2, #2
 8000760:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000762:	4311      	orrs	r1, r2
 8000764:	6359      	str	r1, [r3, #52]	@ 0x34
 8000766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	401a      	ands	r2, r3
 800076c:	9203      	str	r2, [sp, #12]
 800076e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = VBAT_TEMP_Pin|ISNSV_Pin|ISNSU_Pin;
 8000770:	22e0      	movs	r2, #224	@ 0xe0
 8000772:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = VBAT_TEMP_Pin|ISNSV_Pin|ISNSU_Pin;
 8000776:	9204      	str	r2, [sp, #16]
 8000778:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f000 ff9d 	bl	80016b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ISNSW_Pin;
 800077e:	2303      	movs	r3, #3
 8000780:	2202      	movs	r2, #2
    HAL_GPIO_Init(ISNSW_GPIO_Port, &GPIO_InitStruct);
 8000782:	4816      	ldr	r0, [pc, #88]	@ (80007dc <HAL_ADC_MspInit+0xe4>)
 8000784:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = ISNSW_Pin;
 8000786:	9204      	str	r2, [sp, #16]
 8000788:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(ISNSW_GPIO_Port, &GPIO_InitStruct);
 800078c:	f000 ff94 	bl	80016b8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000790:	4d13      	ldr	r5, [pc, #76]	@ (80007e0 <HAL_ADC_MspInit+0xe8>)
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <HAL_ADC_MspInit+0xec>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000794:	0028      	movs	r0, r5
    hdma_adc1.Instance = DMA1_Channel1;
 8000796:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000798:	2305      	movs	r3, #5
 800079a:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800079c:	337b      	adds	r3, #123	@ 0x7b
 800079e:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007a0:	3380      	adds	r3, #128	@ 0x80
 80007a2:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007a4:	2380      	movs	r3, #128	@ 0x80
 80007a6:	00db      	lsls	r3, r3, #3
 80007a8:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007aa:	2320      	movs	r3, #32
 80007ac:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80007ae:	2380      	movs	r3, #128	@ 0x80
 80007b0:	019b      	lsls	r3, r3, #6
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007b2:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b4:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80007b6:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007b8:	f000 ff08 	bl	80015cc <HAL_DMA_Init>
 80007bc:	2800      	cmp	r0, #0
 80007be:	d105      	bne.n	80007cc <HAL_ADC_MspInit+0xd4>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007c0:	6525      	str	r5, [r4, #80]	@ 0x50
 80007c2:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80007c4:	e7a9      	b.n	800071a <HAL_ADC_MspInit+0x22>
      Error_Handler();
 80007c6:	f000 f907 	bl	80009d8 <Error_Handler>
 80007ca:	e7b3      	b.n	8000734 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 80007cc:	f000 f904 	bl	80009d8 <Error_Handler>
 80007d0:	e7f6      	b.n	80007c0 <HAL_ADC_MspInit+0xc8>
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	40012400 	.word	0x40012400
 80007d8:	40021000 	.word	0x40021000
 80007dc:	50000400 	.word	0x50000400
 80007e0:	2000002c 	.word	0x2000002c
 80007e4:	40020008 	.word	0x40020008

080007e8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e8:	2301      	movs	r3, #1
 80007ea:	4a05      	ldr	r2, [pc, #20]	@ (8000800 <MX_DMA_Init+0x18>)
{
 80007ec:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80007f0:	4319      	orrs	r1, r3
 80007f2:	6391      	str	r1, [r2, #56]	@ 0x38
 80007f4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80007f6:	4013      	ands	r3, r2
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	9b01      	ldr	r3, [sp, #4]

}
 80007fc:	b002      	add	sp, #8
 80007fe:	4770      	bx	lr
 8000800:	40021000 	.word	0x40021000

08000804 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000806:	46d6      	mov	lr, sl
 8000808:	464f      	mov	r7, r9
 800080a:	4646      	mov	r6, r8
 800080c:	b5c0      	push	{r6, r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	2214      	movs	r2, #20
 8000812:	2100      	movs	r1, #0
 8000814:	a804      	add	r0, sp, #16
 8000816:	f002 fe5d 	bl	80034d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800081a:	2220      	movs	r2, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2702      	movs	r7, #2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000820:	4b31      	ldr	r3, [pc, #196]	@ (80008e8 <MX_GPIO_Init+0xe4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000822:	25a0      	movs	r5, #160	@ 0xa0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000824:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000826:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000828:	4311      	orrs	r1, r2
 800082a:	6359      	str	r1, [r3, #52]	@ 0x34
 800082c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(HALL_CS_GPIO_Port, HALL_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000830:	400a      	ands	r2, r1
 8000832:	9201      	str	r2, [sp, #4]
 8000834:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000838:	2101      	movs	r1, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4332      	orrs	r2, r6
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
 800083e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000840:	4032      	ands	r2, r6
 8000842:	9202      	str	r2, [sp, #8]
 8000844:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000848:	433a      	orrs	r2, r7
 800084a:	635a      	str	r2, [r3, #52]	@ 0x34
 800084c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000850:	403b      	ands	r3, r7
 8000852:	9303      	str	r3, [sp, #12]
 8000854:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000856:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <MX_GPIO_Init+0xe8>)
 8000858:	0018      	movs	r0, r3
 800085a:	469a      	mov	sl, r3
 800085c:	f001 f8dc 	bl	8001a18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000860:	2380      	movs	r3, #128	@ 0x80
 8000862:	011b      	lsls	r3, r3, #4
 8000864:	0019      	movs	r1, r3
 8000866:	0028      	movs	r0, r5
 8000868:	2201      	movs	r2, #1
 800086a:	4699      	mov	r9, r3
 800086c:	f001 f8d4 	bl	8001a18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HALL_CS_GPIO_Port, HALL_CS_Pin, GPIO_PIN_RESET);
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	0019      	movs	r1, r3
 8000876:	2200      	movs	r2, #0
 8000878:	0028      	movs	r0, r5
 800087a:	4698      	mov	r8, r3
 800087c:	f001 f8cc 	bl	8001a18 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000880:	4650      	mov	r0, sl
 8000882:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LED_Pin;
 8000884:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800088c:	f000 ff14 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MGH_Pin MGL_Pin */
  GPIO_InitStruct.Pin = MGH_Pin|MGL_Pin;
 8000890:	2212      	movs	r2, #18
 8000892:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	0028      	movs	r0, r5
 8000896:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = MGH_Pin|MGL_Pin;
 8000898:	9204      	str	r2, [sp, #16]
 800089a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f000 ff0b 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OC_SEL_Pin */
  GPIO_InitStruct.Pin = OC_SEL_Pin;
 80008a2:	464b      	mov	r3, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 80008a4:	0028      	movs	r0, r5
 80008a6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = OC_SEL_Pin;
 80008a8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ac:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f000 ff02 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	2388      	movs	r3, #136	@ 0x88
 80008b8:	0152      	lsls	r2, r2, #5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80008ba:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = BTN_Pin;
 80008bc:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80008be:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BTN_Pin;
 80008c0:	9204      	str	r2, [sp, #16]
 80008c2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f000 fef7 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_CS_Pin */
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 80008ca:	4643      	mov	r3, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 80008cc:	0028      	movs	r0, r5
 80008ce:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 80008d0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f000 feee 	bl	80016b8 <HAL_GPIO_Init>

}
 80008dc:	b00a      	add	sp, #40	@ 0x28
 80008de:	bce0      	pop	{r5, r6, r7}
 80008e0:	46ba      	mov	sl, r7
 80008e2:	46b1      	mov	r9, r6
 80008e4:	46a8      	mov	r8, r5
 80008e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e8:	40021000 	.word	0x40021000
 80008ec:	50001400 	.word	0x50001400

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b500      	push	{lr}
 80008f2:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f4:	2238      	movs	r2, #56	@ 0x38
 80008f6:	2100      	movs	r1, #0
 80008f8:	a804      	add	r0, sp, #16
 80008fa:	f002 fdeb 	bl	80034d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fe:	2210      	movs	r2, #16
 8000900:	2100      	movs	r1, #0
 8000902:	4668      	mov	r0, sp
 8000904:	f002 fde6 	bl	80034d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000908:	2080      	movs	r0, #128	@ 0x80
 800090a:	0080      	lsls	r0, r0, #2
 800090c:	f001 f892 	bl	8001a34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000910:	2302      	movs	r3, #2
 8000912:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000914:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000916:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000918:	330e      	adds	r3, #14
 800091a:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 32;
 800091c:	3310      	adds	r3, #16
 800091e:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000920:	23e0      	movs	r3, #224	@ 0xe0
 8000922:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000924:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000926:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000928:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092a:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800092c:	049b      	lsls	r3, r3, #18
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092e:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000930:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000932:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000934:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000936:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000938:	05db      	lsls	r3, r3, #23
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093a:	3240      	adds	r2, #64	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093e:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000940:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	f001 f8a7 	bl	8001a94 <HAL_RCC_OscConfig>
 8000946:	2800      	cmp	r0, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	2207      	movs	r2, #7
 8000950:	2302      	movs	r3, #2
 8000952:	9200      	str	r2, [sp, #0]
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800095a:	2102      	movs	r1, #2
 800095c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	9202      	str	r2, [sp, #8]
 8000960:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000962:	f001 fb4d 	bl	8002000 <HAL_RCC_ClockConfig>
 8000966:	2800      	cmp	r0, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x7e>
 800096a:	b672      	cpsid	i
  while (1)
 800096c:	e7fe      	b.n	800096c <SystemClock_Config+0x7c>
}
 800096e:	b013      	add	sp, #76	@ 0x4c
 8000970:	bd00      	pop	{pc}
 8000972:	46c0      	nop			@ (mov r8, r8)

08000974 <main>:
{
 8000974:	b510      	push	{r4, lr}
  HAL_Init();
 8000976:	f000 fb4f 	bl	8001018 <HAL_Init>
  SystemClock_Config();
 800097a:	f7ff ffb9 	bl	80008f0 <SystemClock_Config>
  MX_GPIO_Init();
 800097e:	f7ff ff41 	bl	8000804 <MX_GPIO_Init>
  MX_DMA_Init();
 8000982:	f7ff ff31 	bl	80007e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000986:	f7ff fe49 	bl	800061c <MX_ADC1_Init>
  MX_TIM1_Init();
 800098a:	f000 f977 	bl	8000c7c <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 800098e:	f000 fa2b 	bl	8000de8 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8000992:	f000 f823 	bl	80009dc <MX_SPI2_Init>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2101      	movs	r1, #1
 800099a:	2009      	movs	r0, #9
 800099c:	f000 fdc6 	bl	800152c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009a0:	2009      	movs	r0, #9
 80009a2:	f000 fded 	bl	8001580 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80009a6:	2100      	movs	r1, #0
 80009a8:	2200      	movs	r2, #0
 80009aa:	200d      	movs	r0, #13
 80009ac:	f000 fdbe 	bl	800152c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80009b0:	200d      	movs	r0, #13
 80009b2:	f000 fde5 	bl	8001580 <HAL_NVIC_EnableIRQ>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80009b6:	2100      	movs	r1, #0
 80009b8:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <main+0x5c>)
 80009ba:	f001 fe21 	bl	8002600 <HAL_TIM_PWM_Start>
	  HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_0);
 80009be:	2101      	movs	r1, #1
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <main+0x60>)
 80009c2:	f001 f82f 	bl	8001a24 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80009c6:	2064      	movs	r0, #100	@ 0x64
 80009c8:	f000 fb40 	bl	800104c <HAL_Delay>
  while (1)
 80009cc:	e7f7      	b.n	80009be <main+0x4a>
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	200001ac 	.word	0x200001ac
 80009d4:	50001400 	.word	0x50001400

080009d8 <Error_Handler>:
 80009d8:	b672      	cpsid	i
  while (1)
 80009da:	e7fe      	b.n	80009da <Error_Handler+0x2>

080009dc <MX_SPI2_Init>:

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009dc:	22e0      	movs	r2, #224	@ 0xe0
  hspi2.Instance = SPI2;
 80009de:	4811      	ldr	r0, [pc, #68]	@ (8000a24 <MX_SPI2_Init+0x48>)
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_SPI2_Init+0x4c>)
{
 80009e2:	b510      	push	{r4, lr}
  hspi2.Instance = SPI2;
 80009e4:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009e6:	2382      	movs	r3, #130	@ 0x82
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e8:	00d2      	lsls	r2, r2, #3
 80009ea:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009ec:	2280      	movs	r2, #128	@ 0x80
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009ee:	005b      	lsls	r3, r3, #1
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 80009f0:	2107      	movs	r1, #7
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009f2:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009f4:	2300      	movs	r3, #0
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009f6:	0092      	lsls	r2, r2, #2
 80009f8:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009fa:	3af9      	subs	r2, #249	@ 0xf9
 80009fc:	3aff      	subs	r2, #255	@ 0xff
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009fe:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a00:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a02:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a04:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a06:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a08:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a0c:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a0e:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a10:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a12:	f001 fcc7 	bl	80023a4 <HAL_SPI_Init>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	d100      	bne.n	8000a1c <MX_SPI2_Init+0x40>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a1a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000a1c:	f7ff ffdc 	bl	80009d8 <Error_Handler>
}
 8000a20:	e7fb      	b.n	8000a1a <MX_SPI2_Init+0x3e>
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	20000148 	.word	0x20000148
 8000a28:	40003800 	.word	0x40003800

08000a2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2e:	46c6      	mov	lr, r8
 8000a30:	0004      	movs	r4, r0
 8000a32:	b500      	push	{lr}
 8000a34:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	2214      	movs	r2, #20
 8000a38:	2100      	movs	r1, #0
 8000a3a:	a804      	add	r0, sp, #16
 8000a3c:	f002 fd4a 	bl	80034d4 <memset>
  if(spiHandle->Instance==SPI2)
 8000a40:	4b2c      	ldr	r3, [pc, #176]	@ (8000af4 <HAL_SPI_MspInit+0xc8>)
 8000a42:	6822      	ldr	r2, [r4, #0]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d003      	beq.n	8000a50 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a48:	b00a      	add	sp, #40	@ 0x28
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	46b8      	mov	r8, r7
 8000a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a50:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2701      	movs	r7, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	2502      	movs	r5, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a56:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <HAL_SPI_MspInit+0xcc>)
 8000a58:	01c9      	lsls	r1, r1, #7
 8000a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a66:	400a      	ands	r2, r1
 8000a68:	9201      	str	r2, [sp, #4]
 8000a6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	433a      	orrs	r2, r7
 8000a72:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	403a      	ands	r2, r7
 8000a7a:	9202      	str	r2, [sp, #8]
 8000a7c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a80:	432a      	orrs	r2, r5
 8000a82:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a86:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	402b      	ands	r3, r5
 8000a8a:	9303      	str	r3, [sp, #12]
 8000a8c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	9204      	str	r2, [sp, #16]
 8000a92:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f000 fe10 	bl	80016b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a98:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	4818      	ldr	r0, [pc, #96]	@ (8000afc <HAL_SPI_MspInit+0xd0>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a9c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8000aa0:	3b3c      	subs	r3, #60	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8000aa4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f000 fe05 	bl	80016b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000aae:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	4812      	ldr	r0, [pc, #72]	@ (8000afc <HAL_SPI_MspInit+0xd0>)
 8000ab2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ab4:	4698      	mov	r8, r3
 8000ab6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000abe:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f000 fdfa 	bl	80016b8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000ac4:	4d0e      	ldr	r5, [pc, #56]	@ (8000b00 <HAL_SPI_MspInit+0xd4>)
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <HAL_SPI_MspInit+0xd8>)
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000ac8:	0028      	movs	r0, r5
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000aca:	602b      	str	r3, [r5, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8000acc:	2312      	movs	r3, #18
 8000ace:	606b      	str	r3, [r5, #4]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad0:	4643      	mov	r3, r8
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ad2:	60ae      	str	r6, [r5, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad4:	60ee      	str	r6, [r5, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad6:	612b      	str	r3, [r5, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ad8:	616e      	str	r6, [r5, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ada:	61ae      	str	r6, [r5, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000adc:	61ee      	str	r6, [r5, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ade:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000ae0:	f000 fd74 	bl	80015cc <HAL_DMA_Init>
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d102      	bne.n	8000aee <HAL_SPI_MspInit+0xc2>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000ae8:	65a5      	str	r5, [r4, #88]	@ 0x58
 8000aea:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8000aec:	e7ac      	b.n	8000a48 <HAL_SPI_MspInit+0x1c>
      Error_Handler();
 8000aee:	f7ff ff73 	bl	80009d8 <Error_Handler>
 8000af2:	e7f9      	b.n	8000ae8 <HAL_SPI_MspInit+0xbc>
 8000af4:	40003800 	.word	0x40003800
 8000af8:	40021000 	.word	0x40021000
 8000afc:	50000400 	.word	0x50000400
 8000b00:	200000ec 	.word	0x200000ec
 8000b04:	40020044 	.word	0x40020044

08000b08 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_MspInit+0x2c>)
{
 8000b0c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000b10:	4311      	orrs	r1, r2
 8000b12:	6419      	str	r1, [r3, #64]	@ 0x40
 8000b14:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000b16:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b18:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	9200      	str	r2, [sp, #0]
 8000b1c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b20:	0549      	lsls	r1, r1, #21
 8000b22:	430a      	orrs	r2, r1
 8000b24:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b28:	400b      	ands	r3, r1
 8000b2a:	9301      	str	r3, [sp, #4]
 8000b2c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	b002      	add	sp, #8
 8000b30:	4770      	bx	lr
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	40021000 	.word	0x40021000

08000b38 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler>
 8000b3a:	46c0      	nop			@ (mov r8, r8)

08000b3c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b3c:	4770      	bx	lr
 8000b3e:	46c0      	nop			@ (mov r8, r8)

08000b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000b40:	4770      	bx	lr
 8000b42:	46c0      	nop			@ (mov r8, r8)

08000b44 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b46:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <TIM1_CC_IRQHandler+0xc>)
 8000b48:	f001 ff74 	bl	8002a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b4c:	bd10      	pop	{r4, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	200001ac 	.word	0x200001ac

08000b54 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	4770      	bx	lr
 8000b56:	46c0      	nop			@ (mov r8, r8)

08000b58 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim1);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b58:	b510      	push	{r4, lr}
 8000b5a:	0004      	movs	r4, r0
 8000b5c:	b092      	sub	sp, #72	@ 0x48

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	2214      	movs	r2, #20
 8000b60:	2100      	movs	r1, #0
 8000b62:	a802      	add	r0, sp, #8
 8000b64:	f002 fcb6 	bl	80034d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b68:	2228      	movs	r2, #40	@ 0x28
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	a808      	add	r0, sp, #32
 8000b6e:	f002 fcb1 	bl	80034d4 <memset>
  if(tim_pwmHandle->Instance==TIM1)
 8000b72:	4b1e      	ldr	r3, [pc, #120]	@ (8000bec <HAL_TIM_PWM_MspInit+0x94>)
 8000b74:	6822      	ldr	r2, [r4, #0]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d001      	beq.n	8000b7e <HAL_TIM_PWM_MspInit+0x26>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b7a:	b012      	add	sp, #72	@ 0x48
 8000b7c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000b7e:	2380      	movs	r3, #128	@ 0x80
 8000b80:	039b      	lsls	r3, r3, #14
 8000b82:	9308      	str	r3, [sp, #32]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 8000b84:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b86:	a808      	add	r0, sp, #32
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 8000b88:	03db      	lsls	r3, r3, #15
 8000b8a:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8c:	f001 fb14 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d128      	bne.n	8000be6 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b94:	2180      	movs	r1, #128	@ 0x80
 8000b96:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <HAL_TIM_PWM_MspInit+0x98>)
 8000b98:	0109      	lsls	r1, r1, #4
 8000b9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = OVERCURRENT_Pin;
 8000b9c:	2080      	movs	r0, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ba2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = OVERCURRENT_Pin;
 8000ba4:	0140      	lsls	r0, r0, #5
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ba6:	400a      	ands	r2, r1
 8000ba8:	9200      	str	r2, [sp, #0]
 8000baa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bac:	2202      	movs	r2, #2
 8000bae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bb0:	4311      	orrs	r1, r2
 8000bb2:	6359      	str	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = OVERCURRENT_Pin;
 8000bb4:	2112      	movs	r1, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = OVERCURRENT_Pin;
 8000bb8:	9002      	str	r0, [sp, #8]
 8000bba:	9103      	str	r1, [sp, #12]
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	2100      	movs	r1, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4013      	ands	r3, r2
    GPIO_InitStruct.Pin = OVERCURRENT_Pin;
 8000bc2:	9004      	str	r0, [sp, #16]
 8000bc4:	9105      	str	r1, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(OVERCURRENT_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	a902      	add	r1, sp, #8
 8000bca:	480a      	ldr	r0, [pc, #40]	@ (8000bf4 <HAL_TIM_PWM_MspInit+0x9c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bcc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000bce:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(OVERCURRENT_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f000 fd72 	bl	80016b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	200e      	movs	r0, #14
 8000bda:	f000 fca7 	bl	800152c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000bde:	200e      	movs	r0, #14
 8000be0:	f000 fcce 	bl	8001580 <HAL_NVIC_EnableIRQ>
}
 8000be4:	e7c9      	b.n	8000b7a <HAL_TIM_PWM_MspInit+0x22>
      Error_Handler();
 8000be6:	f7ff fef7 	bl	80009d8 <Error_Handler>
 8000bea:	e7d3      	b.n	8000b94 <HAL_TIM_PWM_MspInit+0x3c>
 8000bec:	40012c00 	.word	0x40012c00
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	50000400 	.word	0x50000400

08000bf8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bf8:	b5d0      	push	{r4, r6, r7, lr}
 8000bfa:	0004      	movs	r4, r0
 8000bfc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	2214      	movs	r2, #20
 8000c00:	2100      	movs	r1, #0
 8000c02:	a802      	add	r0, sp, #8
 8000c04:	f002 fc66 	bl	80034d4 <memset>
  if(timHandle->Instance==TIM1)
 8000c08:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <HAL_TIM_MspPostInit+0x78>)
 8000c0a:	6822      	ldr	r2, [r4, #0]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d001      	beq.n	8000c14 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c10:	b008      	add	sp, #32
 8000c12:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	2402      	movs	r4, #2
 8000c16:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <HAL_TIM_MspPostInit+0x7c>)
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|LSW_Pin;
 8000c18:	2602      	movs	r6, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|LSW_Pin;
 8000c1c:	2702      	movs	r7, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4322      	orrs	r2, r4
 8000c20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	4814      	ldr	r0, [pc, #80]	@ (8000c78 <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4022      	ands	r2, r4
 8000c28:	9200      	str	r2, [sp, #0]
 8000c2a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c30:	4311      	orrs	r1, r2
 8000c32:	6359      	str	r1, [r3, #52]	@ 0x34
 8000c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	401a      	ands	r2, r3
 8000c3a:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|LSW_Pin;
 8000c3c:	22e0      	movs	r2, #224	@ 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|LSW_Pin;
 8000c40:	2302      	movs	r3, #2
 8000c42:	0212      	lsls	r2, r2, #8
 8000c44:	9202      	str	r2, [sp, #8]
 8000c46:	9303      	str	r3, [sp, #12]
 8000c48:	9604      	str	r6, [sp, #16]
 8000c4a:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c4c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f000 fd33 	bl	80016b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|HSW_Pin;
 8000c52:	22e0      	movs	r2, #224	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|HSW_Pin;
 8000c56:	2302      	movs	r3, #2
 8000c58:	00d2      	lsls	r2, r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	a902      	add	r1, sp, #8
 8000c5c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|HSW_Pin;
 8000c5e:	9202      	str	r2, [sp, #8]
 8000c60:	9303      	str	r3, [sp, #12]
 8000c62:	9604      	str	r6, [sp, #16]
 8000c64:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c66:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f000 fd26 	bl	80016b8 <HAL_GPIO_Init>
}
 8000c6c:	e7d0      	b.n	8000c10 <HAL_TIM_MspPostInit+0x18>
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	40012c00 	.word	0x40012c00
 8000c74:	40021000 	.word	0x40021000
 8000c78:	50000400 	.word	0x50000400

08000c7c <MX_TIM1_Init>:
{
 8000c7c:	b510      	push	{r4, lr}
 8000c7e:	b09c      	sub	sp, #112	@ 0x70
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c80:	220c      	movs	r2, #12
 8000c82:	2100      	movs	r1, #0
 8000c84:	4668      	mov	r0, sp
 8000c86:	f002 fc25 	bl	80034d4 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	a804      	add	r0, sp, #16
 8000c90:	f002 fc20 	bl	80034d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c94:	221c      	movs	r2, #28
 8000c96:	2100      	movs	r1, #0
 8000c98:	a808      	add	r0, sp, #32
 8000c9a:	f002 fc1b 	bl	80034d4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c9e:	2234      	movs	r2, #52	@ 0x34
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	a80f      	add	r0, sp, #60	@ 0x3c
 8000ca4:	f002 fc16 	bl	80034d4 <memset>
  htim1.Instance = TIM1;
 8000ca8:	4c4a      	ldr	r4, [pc, #296]	@ (8000dd4 <MX_TIM1_Init+0x158>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000caa:	2220      	movs	r2, #32
  htim1.Instance = TIM1;
 8000cac:	4b4a      	ldr	r3, [pc, #296]	@ (8000dd8 <MX_TIM1_Init+0x15c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000cae:	60a2      	str	r2, [r4, #8]
  htim1.Instance = TIM1;
 8000cb0:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000cb2:	2300      	movs	r3, #0
  htim1.Init.Period = ((PWM_PERIOD_TICKS)-1);
 8000cb4:	4a49      	ldr	r2, [pc, #292]	@ (8000ddc <MX_TIM1_Init+0x160>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cb6:	0020      	movs	r0, r4
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000cb8:	6063      	str	r3, [r4, #4]
  htim1.Init.Period = ((PWM_PERIOD_TICKS)-1);
 8000cba:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = ((FOC_UPDATE_EVENT_DIV)-1);
 8000cbe:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc0:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cc2:	f001 fc15 	bl	80024f0 <HAL_TIM_PWM_Init>
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	d000      	beq.n	8000ccc <MX_TIM1_Init+0x50>
 8000cca:	e06b      	b.n	8000da4 <MX_TIM1_Init+0x128>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	2270      	movs	r2, #112	@ 0x70
 8000cd0:	9200      	str	r2, [sp, #0]
 8000cd2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cd6:	4669      	mov	r1, sp
 8000cd8:	0020      	movs	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cdc:	f001 ff60 	bl	8002ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d000      	beq.n	8000ce6 <MX_TIM1_Init+0x6a>
 8000ce4:	e073      	b.n	8000dce <MX_TIM1_Init+0x152>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2301      	movs	r3, #1
 8000cea:	9204      	str	r2, [sp, #16]
 8000cec:	9305      	str	r3, [sp, #20]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000cee:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	0020      	movs	r0, r4
 8000cf4:	aa04      	add	r2, sp, #16
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000cf6:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000cf8:	f001 ffea 	bl	8002cd0 <HAL_TIMEx_ConfigBreakInput>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d163      	bne.n	8000dc8 <MX_TIM1_Init+0x14c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d00:	2360      	movs	r3, #96	@ 0x60
 8000d02:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = ((PWM_PERIOD_TICKS) / 4);
 8000d04:	23c8      	movs	r3, #200	@ 0xc8
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d06:	2000      	movs	r0, #0
 8000d08:	2100      	movs	r1, #0
  sConfigOC.Pulse = ((PWM_PERIOD_TICKS) / 4);
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d0e:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d10:	900c      	str	r0, [sp, #48]	@ 0x30
 8000d12:	910d      	str	r1, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d14:	2200      	movs	r2, #0
 8000d16:	0020      	movs	r0, r4
 8000d18:	a908      	add	r1, sp, #32
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1a:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d1c:	930b      	str	r3, [sp, #44]	@ 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d1e:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d20:	f001 fcd6 	bl	80026d0 <HAL_TIM_PWM_ConfigChannel>
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d14c      	bne.n	8000dc2 <MX_TIM1_Init+0x146>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d28:	2204      	movs	r2, #4
 8000d2a:	0020      	movs	r0, r4
 8000d2c:	a908      	add	r1, sp, #32
 8000d2e:	f001 fccf 	bl	80026d0 <HAL_TIM_PWM_ConfigChannel>
 8000d32:	2800      	cmp	r0, #0
 8000d34:	d142      	bne.n	8000dbc <MX_TIM1_Init+0x140>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d36:	2208      	movs	r2, #8
 8000d38:	0020      	movs	r0, r4
 8000d3a:	a908      	add	r1, sp, #32
 8000d3c:	f001 fcc8 	bl	80026d0 <HAL_TIM_PWM_ConfigChannel>
 8000d40:	2800      	cmp	r0, #0
 8000d42:	d138      	bne.n	8000db6 <MX_TIM1_Init+0x13a>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000d44:	2270      	movs	r2, #112	@ 0x70
 8000d46:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <MX_TIM1_Init+0x164>)
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d48:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000d4a:	9208      	str	r2, [sp, #32]
 8000d4c:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d4e:	a908      	add	r1, sp, #32
 8000d50:	3a64      	subs	r2, #100	@ 0x64
 8000d52:	f001 fcbd 	bl	80026d0 <HAL_TIM_PWM_ConfigChannel>
 8000d56:	2800      	cmp	r0, #0
 8000d58:	d12a      	bne.n	8000db0 <MX_TIM1_Init+0x134>
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000d5a:	4a22      	ldr	r2, [pc, #136]	@ (8000de4 <MX_TIM1_Init+0x168>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000d5c:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000d5e:	9212      	str	r2, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000d60:	2280      	movs	r2, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000d62:	011b      	lsls	r3, r3, #4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000d64:	0152      	lsls	r2, r2, #5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000d66:	930f      	str	r3, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000d68:	9213      	str	r2, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000d6a:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d6c:	2280      	movs	r2, #128	@ 0x80
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d6e:	2180      	movs	r1, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000d70:	00db      	lsls	r3, r3, #3
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d72:	0192      	lsls	r2, r2, #6
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000d74:	9310      	str	r3, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d76:	9214      	str	r2, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d78:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakFilter = 3;
 8000d7a:	2203      	movs	r2, #3
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d7c:	0489      	lsls	r1, r1, #18
 8000d7e:	9118      	str	r1, [sp, #96]	@ 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d80:	0020      	movs	r0, r4
 8000d82:	a90f      	add	r1, sp, #60	@ 0x3c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d84:	9311      	str	r3, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.BreakFilter = 3;
 8000d86:	9215      	str	r2, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d88:	9316      	str	r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d8a:	9317      	str	r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000d8c:	9219      	str	r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d8e:	931a      	str	r3, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d90:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d92:	f001 ff3d 	bl	8002c10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d96:	2800      	cmp	r0, #0
 8000d98:	d107      	bne.n	8000daa <MX_TIM1_Init+0x12e>
  HAL_TIM_MspPostInit(&htim1);
 8000d9a:	0020      	movs	r0, r4
 8000d9c:	f7ff ff2c 	bl	8000bf8 <HAL_TIM_MspPostInit>
}
 8000da0:	b01c      	add	sp, #112	@ 0x70
 8000da2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000da4:	f7ff fe18 	bl	80009d8 <Error_Handler>
 8000da8:	e790      	b.n	8000ccc <MX_TIM1_Init+0x50>
    Error_Handler();
 8000daa:	f7ff fe15 	bl	80009d8 <Error_Handler>
 8000dae:	e7f4      	b.n	8000d9a <MX_TIM1_Init+0x11e>
    Error_Handler();
 8000db0:	f7ff fe12 	bl	80009d8 <Error_Handler>
 8000db4:	e7d1      	b.n	8000d5a <MX_TIM1_Init+0xde>
    Error_Handler();
 8000db6:	f7ff fe0f 	bl	80009d8 <Error_Handler>
 8000dba:	e7c3      	b.n	8000d44 <MX_TIM1_Init+0xc8>
    Error_Handler();
 8000dbc:	f7ff fe0c 	bl	80009d8 <Error_Handler>
 8000dc0:	e7b9      	b.n	8000d36 <MX_TIM1_Init+0xba>
    Error_Handler();
 8000dc2:	f7ff fe09 	bl	80009d8 <Error_Handler>
 8000dc6:	e7af      	b.n	8000d28 <MX_TIM1_Init+0xac>
    Error_Handler();
 8000dc8:	f7ff fe06 	bl	80009d8 <Error_Handler>
 8000dcc:	e798      	b.n	8000d00 <MX_TIM1_Init+0x84>
    Error_Handler();
 8000dce:	f7ff fe03 	bl	80009d8 <Error_Handler>
 8000dd2:	e788      	b.n	8000ce6 <MX_TIM1_Init+0x6a>
 8000dd4:	200001ac 	.word	0x200001ac
 8000dd8:	40012c00 	.word	0x40012c00
 8000ddc:	00000c7f 	.word	0x00000c7f
 8000de0:	0000063f 	.word	0x0000063f
 8000de4:	00002710 	.word	0x00002710

08000de8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000de8:	b510      	push	{r4, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000dea:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <MX_LPUART1_UART_Init+0x8c>)
 8000dec:	4c22      	ldr	r4, [pc, #136]	@ (8000e78 <MX_LPUART1_UART_Init+0x90>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dee:	2000      	movs	r0, #0
  hlpuart1.Instance = LPUART1;
 8000df0:	6023      	str	r3, [r4, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000df2:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <MX_LPUART1_UART_Init+0x94>)
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df4:	2100      	movs	r1, #0
  hlpuart1.Init.BaudRate = 209700;
 8000df6:	6063      	str	r3, [r4, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000df8:	2380      	movs	r3, #128	@ 0x80
 8000dfa:	055b      	lsls	r3, r3, #21
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	220c      	movs	r2, #12
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000dfe:	60a3      	str	r3, [r4, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e00:	2300      	movs	r3, #0
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e02:	6220      	str	r0, [r4, #32]
 8000e04:	6261      	str	r1, [r4, #36]	@ 0x24
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e06:	0020      	movs	r0, r4
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e08:	60e3      	str	r3, [r4, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e0a:	6123      	str	r3, [r4, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e0c:	6162      	str	r2, [r4, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	61a3      	str	r3, [r4, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e10:	62a3      	str	r3, [r4, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000e12:	6663      	str	r3, [r4, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e14:	f002 f958 	bl	80030c8 <HAL_UART_Init>
 8000e18:	2800      	cmp	r0, #0
 8000e1a:	d111      	bne.n	8000e40 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f002 fab6 	bl	8003390 <HAL_UARTEx_SetTxFifoThreshold>
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d113      	bne.n	8000e50 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	0020      	movs	r0, r4
 8000e2c:	f002 fb00 	bl	8003430 <HAL_UARTEx_SetRxFifoThreshold>
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d115      	bne.n	8000e60 <MX_LPUART1_UART_Init+0x78>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e34:	0020      	movs	r0, r4
 8000e36:	f002 fa8f 	bl	8003358 <HAL_UARTEx_DisableFifoMode>
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	d117      	bne.n	8000e6e <MX_LPUART1_UART_Init+0x86>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e3e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e40:	f7ff fdca 	bl	80009d8 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	0020      	movs	r0, r4
 8000e48:	f002 faa2 	bl	8003390 <HAL_UARTEx_SetTxFifoThreshold>
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	d0eb      	beq.n	8000e28 <MX_LPUART1_UART_Init+0x40>
    Error_Handler();
 8000e50:	f7ff fdc2 	bl	80009d8 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e54:	2100      	movs	r1, #0
 8000e56:	0020      	movs	r0, r4
 8000e58:	f002 faea 	bl	8003430 <HAL_UARTEx_SetRxFifoThreshold>
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	d0e9      	beq.n	8000e34 <MX_LPUART1_UART_Init+0x4c>
    Error_Handler();
 8000e60:	f7ff fdba 	bl	80009d8 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e64:	0020      	movs	r0, r4
 8000e66:	f002 fa77 	bl	8003358 <HAL_UARTEx_DisableFifoMode>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d0e7      	beq.n	8000e3e <MX_LPUART1_UART_Init+0x56>
    Error_Handler();
 8000e6e:	f7ff fdb3 	bl	80009d8 <Error_Handler>
}
 8000e72:	e7e4      	b.n	8000e3e <MX_LPUART1_UART_Init+0x56>
 8000e74:	40008000 	.word	0x40008000
 8000e78:	200002b0 	.word	0x200002b0
 8000e7c:	00033324 	.word	0x00033324

08000e80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e80:	b530      	push	{r4, r5, lr}
 8000e82:	0004      	movs	r4, r0
 8000e84:	b093      	sub	sp, #76	@ 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	2214      	movs	r2, #20
 8000e88:	2100      	movs	r1, #0
 8000e8a:	a802      	add	r0, sp, #8
 8000e8c:	f002 fb22 	bl	80034d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	2228      	movs	r2, #40	@ 0x28
 8000e92:	2100      	movs	r1, #0
 8000e94:	a808      	add	r0, sp, #32
 8000e96:	f002 fb1d 	bl	80034d4 <memset>
  if(uartHandle->Instance==LPUART1)
 8000e9a:	4b31      	ldr	r3, [pc, #196]	@ (8000f60 <HAL_UART_MspInit+0xe0>)
 8000e9c:	6822      	ldr	r2, [r4, #0]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d001      	beq.n	8000ea6 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000ea2:	b013      	add	sp, #76	@ 0x4c
 8000ea4:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ea6:	2310      	movs	r3, #16
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea8:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000eaa:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eac:	f001 f984 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	d14c      	bne.n	8000f4e <HAL_UART_MspInit+0xce>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000eb4:	2180      	movs	r1, #128	@ 0x80
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f64 <HAL_UART_MspInit+0xe4>)
 8000eb8:	0349      	lsls	r1, r1, #13
 8000eba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ec6:	400a      	ands	r2, r1
 8000ec8:	9200      	str	r2, [sp, #0]
 8000eca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	2201      	movs	r2, #1
 8000ece:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000ed0:	4311      	orrs	r1, r2
 8000ed2:	6359      	str	r1, [r3, #52]	@ 0x34
 8000ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	401a      	ands	r2, r3
 8000eda:	9201      	str	r2, [sp, #4]
 8000edc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ede:	220c      	movs	r2, #12
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	9202      	str	r2, [sp, #8]
 8000ee4:	9303      	str	r3, [sp, #12]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2300      	movs	r3, #0
 8000eea:	9204      	str	r2, [sp, #16]
 8000eec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000eee:	2306      	movs	r3, #6
 8000ef0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f000 fbe1 	bl	80016b8 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8000ef6:	4d1c      	ldr	r5, [pc, #112]	@ (8000f68 <HAL_UART_MspInit+0xe8>)
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <HAL_UART_MspInit+0xec>)
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000efa:	2280      	movs	r2, #128	@ 0x80
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8000efc:	602b      	str	r3, [r5, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000efe:	230e      	movs	r3, #14
 8000f00:	606b      	str	r3, [r5, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f02:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000f04:	0028      	movs	r0, r5
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f06:	60ab      	str	r3, [r5, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f08:	60eb      	str	r3, [r5, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	612a      	str	r2, [r5, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f0c:	616b      	str	r3, [r5, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f0e:	61ab      	str	r3, [r5, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000f10:	61eb      	str	r3, [r5, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f12:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000f14:	f000 fb5a 	bl	80015cc <HAL_DMA_Init>
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d11e      	bne.n	8000f5a <HAL_UART_MspInit+0xda>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000f1c:	2280      	movs	r2, #128	@ 0x80
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <HAL_UART_MspInit+0xf0>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000f20:	50a5      	str	r5, [r4, r2]
 8000f22:	62ac      	str	r4, [r5, #40]	@ 0x28
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 8000f24:	4d13      	ldr	r5, [pc, #76]	@ (8000f74 <HAL_UART_MspInit+0xf4>)
 8000f26:	602b      	str	r3, [r5, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000f28:	230f      	movs	r3, #15
 8000f2a:	606b      	str	r3, [r5, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	60ab      	str	r3, [r5, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f30:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000f32:	0028      	movs	r0, r5
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f34:	60eb      	str	r3, [r5, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f36:	612a      	str	r2, [r5, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f38:	616b      	str	r3, [r5, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f3a:	61ab      	str	r3, [r5, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000f3c:	61eb      	str	r3, [r5, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f3e:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000f40:	f000 fb44 	bl	80015cc <HAL_DMA_Init>
 8000f44:	2800      	cmp	r0, #0
 8000f46:	d105      	bne.n	8000f54 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000f48:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8000f4a:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8000f4c:	e7a9      	b.n	8000ea2 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000f4e:	f7ff fd43 	bl	80009d8 <Error_Handler>
 8000f52:	e7af      	b.n	8000eb4 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8000f54:	f7ff fd40 	bl	80009d8 <Error_Handler>
 8000f58:	e7f6      	b.n	8000f48 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000f5a:	f7ff fd3d 	bl	80009d8 <Error_Handler>
 8000f5e:	e7dd      	b.n	8000f1c <HAL_UART_MspInit+0x9c>
 8000f60:	40008000 	.word	0x40008000
 8000f64:	40021000 	.word	0x40021000
 8000f68:	20000254 	.word	0x20000254
 8000f6c:	4002001c 	.word	0x4002001c
 8000f70:	40020030 	.word	0x40020030
 8000f74:	200001f8 	.word	0x200001f8

08000f78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f78:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f7c:	f7ff fdea 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f82:	490d      	ldr	r1, [pc, #52]	@ (8000fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <LoopForever+0xe>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f98:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc4 <LoopForever+0x16>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fa6:	f002 fa9d 	bl	80034e4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000faa:	f7ff fce3 	bl	8000974 <main>

08000fae <LoopForever>:

LoopForever:
  b LoopForever
 8000fae:	e7fe      	b.n	8000fae <LoopForever>
  ldr   r0, =_estack
 8000fb0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fbc:	08003674 	.word	0x08003674
  ldr r2, =_sbss
 8000fc0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fc4:	20000348 	.word	0x20000348

08000fc8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC1_IRQHandler>
	...

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000fce:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <HAL_InitTick+0x40>)
{
 8000fd0:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000fd2:	7819      	ldrb	r1, [r3, #0]
 8000fd4:	2900      	cmp	r1, #0
 8000fd6:	d101      	bne.n	8000fdc <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fd8:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8000fda:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000fdc:	20fa      	movs	r0, #250	@ 0xfa
 8000fde:	0080      	lsls	r0, r0, #2
 8000fe0:	f7ff f890 	bl	8000104 <__udivsi3>
 8000fe4:	4d0a      	ldr	r5, [pc, #40]	@ (8001010 <HAL_InitTick+0x44>)
 8000fe6:	0001      	movs	r1, r0
 8000fe8:	6828      	ldr	r0, [r5, #0]
 8000fea:	f7ff f88b 	bl	8000104 <__udivsi3>
 8000fee:	f000 fad3 	bl	8001598 <HAL_SYSTICK_Config>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	2c03      	cmp	r4, #3
 8000ff8:	d8ee      	bhi.n	8000fd8 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffa:	3801      	subs	r0, #1
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	0021      	movs	r1, r4
 8001000:	f000 fa94 	bl	800152c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <HAL_InitTick+0x48>)
 8001006:	2000      	movs	r0, #0
 8001008:	601c      	str	r4, [r3, #0]
  return status;
 800100a:	e7e6      	b.n	8000fda <HAL_InitTick+0xe>
 800100c:	20000004 	.word	0x20000004
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008

08001018 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001018:	2380      	movs	r3, #128	@ 0x80
 800101a:	4a08      	ldr	r2, [pc, #32]	@ (800103c <HAL_Init+0x24>)
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	6811      	ldr	r1, [r2, #0]
{
 8001020:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001022:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001024:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001026:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001028:	f7ff ffd0 	bl	8000fcc <HAL_InitTick>
 800102c:	1e04      	subs	r4, r0, #0
 800102e:	d002      	beq.n	8001036 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001030:	2401      	movs	r4, #1
}
 8001032:	0020      	movs	r0, r4
 8001034:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8001036:	f7ff fd67 	bl	8000b08 <HAL_MspInit>
 800103a:	e7fa      	b.n	8001032 <HAL_Init+0x1a>
 800103c:	40022000 	.word	0x40022000

08001040 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001040:	4b01      	ldr	r3, [pc, #4]	@ (8001048 <HAL_GetTick+0x8>)
 8001042:	6818      	ldr	r0, [r3, #0]
}
 8001044:	4770      	bx	lr
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	20000344 	.word	0x20000344

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b570      	push	{r4, r5, r6, lr}
 800104e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff fff6 	bl	8001040 <HAL_GetTick>
 8001054:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001056:	1c63      	adds	r3, r4, #1
 8001058:	d002      	beq.n	8001060 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b04      	ldr	r3, [pc, #16]	@ (800106c <HAL_Delay+0x20>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001060:	f7ff ffee 	bl	8001040 <HAL_GetTick>
 8001064:	1b40      	subs	r0, r0, r5
 8001066:	42a0      	cmp	r0, r4
 8001068:	d3fa      	bcc.n	8001060 <HAL_Delay+0x14>
  {
  }
}
 800106a:	bd70      	pop	{r4, r5, r6, pc}
 800106c:	20000004 	.word	0x20000004

08001070 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001072:	46d6      	mov	lr, sl
 8001074:	464f      	mov	r7, r9
 8001076:	4646      	mov	r6, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001078:	2300      	movs	r3, #0
{
 800107a:	b5c0      	push	{r6, r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8001080:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001082:	d02c      	beq.n	80010de <HAL_ADC_Init+0x6e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001084:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8001086:	2d00      	cmp	r5, #0
 8001088:	d100      	bne.n	800108c <HAL_ADC_Init+0x1c>
 800108a:	e0cc      	b.n	8001226 <HAL_ADC_Init+0x1b6>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800108c:	2380      	movs	r3, #128	@ 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800108e:	6825      	ldr	r5, [r4, #0]
 8001090:	055b      	lsls	r3, r3, #21
 8001092:	68aa      	ldr	r2, [r5, #8]
 8001094:	421a      	tst	r2, r3
 8001096:	d115      	bne.n	80010c4 <HAL_ADC_Init+0x54>
  MODIFY_REG(ADCx->CR,
 8001098:	68aa      	ldr	r2, [r5, #8]
 800109a:	497b      	ldr	r1, [pc, #492]	@ (8001288 <HAL_ADC_Init+0x218>)
 800109c:	400a      	ands	r2, r1
 800109e:	4313      	orrs	r3, r2
 80010a0:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010a2:	4b7a      	ldr	r3, [pc, #488]	@ (800128c <HAL_ADC_Init+0x21c>)
 80010a4:	497a      	ldr	r1, [pc, #488]	@ (8001290 <HAL_ADC_Init+0x220>)
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	f7ff f82c 	bl	8000104 <__udivsi3>
 80010ac:	3001      	adds	r0, #1
 80010ae:	0040      	lsls	r0, r0, #1
 80010b0:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 80010b2:	9b01      	ldr	r3, [sp, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <HAL_ADC_Init+0x54>
    {
      wait_loop_index--;
 80010b8:	9b01      	ldr	r3, [sp, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80010be:	9b01      	ldr	r3, [sp, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1f9      	bne.n	80010b8 <HAL_ADC_Init+0x48>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010c4:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c6:	2000      	movs	r0, #0
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	d400      	bmi.n	80010ce <HAL_ADC_Init+0x5e>
 80010cc:	e09d      	b.n	800120a <HAL_ADC_Init+0x19a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010ce:	68ab      	ldr	r3, [r5, #8]
 80010d0:	075b      	lsls	r3, r3, #29
 80010d2:	d50b      	bpl.n	80010ec <HAL_ADC_Init+0x7c>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d6:	2210      	movs	r2, #16
 80010d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80010da:	4313      	orrs	r3, r2
 80010dc:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 80010de:	2001      	movs	r0, #1

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 80010e0:	b002      	add	sp, #8
 80010e2:	bce0      	pop	{r5, r6, r7}
 80010e4:	46ba      	mov	sl, r7
 80010e6:	46b1      	mov	r9, r6
 80010e8:	46a8      	mov	r8, r5
 80010ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80010ee:	06db      	lsls	r3, r3, #27
 80010f0:	d4f1      	bmi.n	80010d6 <HAL_ADC_Init+0x66>
    ADC_STATE_CLR_SET(hadc->State,
 80010f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80010f4:	4a67      	ldr	r2, [pc, #412]	@ (8001294 <HAL_ADC_Init+0x224>)
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010f6:	6921      	ldr	r1, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 80010f8:	4013      	ands	r3, r2
 80010fa:	3206      	adds	r2, #6
 80010fc:	32ff      	adds	r2, #255	@ 0xff
 80010fe:	4313      	orrs	r3, r2
 8001100:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001102:	68ab      	ldr	r3, [r5, #8]
 8001104:	07db      	lsls	r3, r3, #31
 8001106:	d45c      	bmi.n	80011c2 <HAL_ADC_Init+0x152>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001108:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 800110a:	68a2      	ldr	r2, [r4, #8]
 800110c:	1e7b      	subs	r3, r7, #1
 800110e:	419f      	sbcs	r7, r3
 8001110:	68e3      	ldr	r3, [r4, #12]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001112:	7ea6      	ldrb	r6, [r4, #26]
 8001114:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001116:	7e23      	ldrb	r3, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001118:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800111a:	039b      	lsls	r3, r3, #14
 800111c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800111e:	7e63      	ldrb	r3, [r4, #25]
 8001120:	03db      	lsls	r3, r3, #15
 8001122:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001124:	0373      	lsls	r3, r6, #13
 8001126:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001128:	2900      	cmp	r1, #0
 800112a:	da00      	bge.n	800112e <HAL_ADC_Init+0xbe>
 800112c:	e09b      	b.n	8001266 <HAL_ADC_Init+0x1f6>
 800112e:	2380      	movs	r3, #128	@ 0x80
 8001130:	039b      	lsls	r3, r3, #14
 8001132:	469c      	mov	ip, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001134:	232c      	movs	r3, #44	@ 0x2c
 8001136:	5ce3      	ldrb	r3, [r4, r3]
 8001138:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800113a:	4313      	orrs	r3, r2
 800113c:	433b      	orrs	r3, r7
 800113e:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001140:	2720      	movs	r7, #32
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001142:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001144:	5de2      	ldrb	r2, [r4, r7]
 8001146:	2a01      	cmp	r2, #1
 8001148:	d100      	bne.n	800114c <HAL_ADC_Init+0xdc>
 800114a:	e090      	b.n	800126e <HAL_ADC_Init+0x1fe>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800114c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800114e:	2a00      	cmp	r2, #0
 8001150:	d005      	beq.n	800115e <HAL_ADC_Init+0xee>
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001152:	26e0      	movs	r6, #224	@ 0xe0
 8001154:	0076      	lsls	r6, r6, #1
 8001156:	4032      	ands	r2, r6
 8001158:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800115a:	4332      	orrs	r2, r6
 800115c:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 800115e:	273c      	movs	r7, #60	@ 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 8001160:	68ea      	ldr	r2, [r5, #12]
 8001162:	4e4d      	ldr	r6, [pc, #308]	@ (8001298 <HAL_ADC_Init+0x228>)
 8001164:	4032      	ands	r2, r6
 8001166:	4313      	orrs	r3, r2
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001168:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 800116a:	60eb      	str	r3, [r5, #12]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800116c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 800116e:	5de7      	ldrb	r7, [r4, r7]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001170:	0fb3      	lsrs	r3, r6, #30
 8001172:	079b      	lsls	r3, r3, #30
 8001174:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8001176:	46bc      	mov	ip, r7
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001178:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 800117a:	2f01      	cmp	r7, #1
 800117c:	d109      	bne.n	8001192 <HAL_ADC_Init+0x122>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800117e:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 8001180:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001182:	433b      	orrs	r3, r7
 8001184:	431a      	orrs	r2, r3
 8001186:	4653      	mov	r3, sl
 8001188:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
 800118a:	433a      	orrs	r2, r7
 800118c:	431a      	orrs	r2, r3
 800118e:	4663      	mov	r3, ip
 8001190:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 8001192:	692b      	ldr	r3, [r5, #16]
 8001194:	4f41      	ldr	r7, [pc, #260]	@ (800129c <HAL_ADC_Init+0x22c>)
 8001196:	403b      	ands	r3, r7
 8001198:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800119a:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 800119c:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800119e:	0073      	lsls	r3, r6, #1
 80011a0:	085b      	lsrs	r3, r3, #1
 80011a2:	05d2      	lsls	r2, r2, #23
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d00c      	beq.n	80011c2 <HAL_ADC_Init+0x152>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	061b      	lsls	r3, r3, #24
 80011ac:	429e      	cmp	r6, r3
 80011ae:	d008      	beq.n	80011c2 <HAL_ADC_Init+0x152>
        MODIFY_REG(ADC1_COMMON->CCR,
 80011b0:	4a3b      	ldr	r2, [pc, #236]	@ (80012a0 <HAL_ADC_Init+0x230>)
 80011b2:	4f3c      	ldr	r7, [pc, #240]	@ (80012a4 <HAL_ADC_Init+0x234>)
 80011b4:	6813      	ldr	r3, [r2, #0]
 80011b6:	403b      	ands	r3, r7
 80011b8:	27f0      	movs	r7, #240	@ 0xf0
 80011ba:	03bf      	lsls	r7, r7, #14
 80011bc:	403e      	ands	r6, r7
 80011be:	4333      	orrs	r3, r6
 80011c0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->SMPR,
 80011c2:	2607      	movs	r6, #7
 80011c4:	2770      	movs	r7, #112	@ 0x70
 80011c6:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80011c8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80011ca:	43b3      	bics	r3, r6
 80011cc:	4313      	orrs	r3, r2
 80011ce:	616b      	str	r3, [r5, #20]
 80011d0:	696e      	ldr	r6, [r5, #20]
 80011d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80011d4:	43be      	bics	r6, r7
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	4333      	orrs	r3, r6
 80011da:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80011dc:	2900      	cmp	r1, #0
 80011de:	d128      	bne.n	8001232 <HAL_ADC_Init+0x1c2>
      SET_BIT(hadc->Instance->CHSELR,
 80011e0:	2310      	movs	r3, #16
 80011e2:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80011e4:	425b      	negs	r3, r3
 80011e6:	430b      	orrs	r3, r1
 80011e8:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80011ea:	2307      	movs	r3, #7
 80011ec:	6969      	ldr	r1, [r5, #20]
 80011ee:	400b      	ands	r3, r1
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d02f      	beq.n	8001254 <HAL_ADC_Init+0x1e4>
      ADC_STATE_CLR_SET(hadc->State,
 80011f4:	2212      	movs	r2, #18
 80011f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80011f8:	4393      	bics	r3, r2
 80011fa:	3a02      	subs	r2, #2
 80011fc:	4313      	orrs	r3, r2
 80011fe:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001200:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001202:	3a0f      	subs	r2, #15
 8001204:	4313      	orrs	r3, r2
 8001206:	65e3      	str	r3, [r4, #92]	@ 0x5c
      tmp_hal_status = HAL_ERROR;
 8001208:	e769      	b.n	80010de <HAL_ADC_Init+0x6e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120a:	2210      	movs	r2, #16
 800120c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800120e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001210:	4313      	orrs	r3, r2
 8001212:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001214:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001216:	3a0f      	subs	r2, #15
 8001218:	4313      	orrs	r3, r2
 800121a:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800121c:	68ab      	ldr	r3, [r5, #8]
 800121e:	075b      	lsls	r3, r3, #29
 8001220:	d400      	bmi.n	8001224 <HAL_ADC_Init+0x1b4>
 8001222:	e763      	b.n	80010ec <HAL_ADC_Init+0x7c>
 8001224:	e756      	b.n	80010d4 <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 8001226:	f7ff fa67 	bl	80006f8 <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 800122a:	2354      	movs	r3, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 800122c:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800122e:	54e5      	strb	r5, [r4, r3]
 8001230:	e72c      	b.n	800108c <HAL_ADC_Init+0x1c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001232:	2380      	movs	r3, #128	@ 0x80
 8001234:	039b      	lsls	r3, r3, #14
 8001236:	4299      	cmp	r1, r3
 8001238:	d1d7      	bne.n	80011ea <HAL_ADC_Init+0x17a>
      MODIFY_REG(hadc->Instance->CHSELR,
 800123a:	211c      	movs	r1, #28
 800123c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800123e:	69e3      	ldr	r3, [r4, #28]
 8001240:	3b01      	subs	r3, #1
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4019      	ands	r1, r3
 8001246:	2310      	movs	r3, #16
 8001248:	425b      	negs	r3, r3
 800124a:	408b      	lsls	r3, r1
 800124c:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800124e:	430b      	orrs	r3, r1
 8001250:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001252:	e7ca      	b.n	80011ea <HAL_ADC_Init+0x17a>
      ADC_CLEAR_ERRORCODE(hadc);
 8001254:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001256:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001258:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800125a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800125c:	4393      	bics	r3, r2
 800125e:	3a02      	subs	r2, #2
 8001260:	4313      	orrs	r3, r2
 8001262:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001264:	e73c      	b.n	80010e0 <HAL_ADC_Init+0x70>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001266:	004b      	lsls	r3, r1, #1
 8001268:	085b      	lsrs	r3, r3, #1
 800126a:	469c      	mov	ip, r3
 800126c:	e762      	b.n	8001134 <HAL_ADC_Init+0xc4>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800126e:	2e00      	cmp	r6, #0
 8001270:	d103      	bne.n	800127a <HAL_ADC_Init+0x20a>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	0252      	lsls	r2, r2, #9
 8001276:	4313      	orrs	r3, r2
 8001278:	e768      	b.n	800114c <HAL_ADC_Init+0xdc>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800127a:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 800127c:	433e      	orrs	r6, r7
 800127e:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001280:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
 8001282:	4332      	orrs	r2, r6
 8001284:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8001286:	e761      	b.n	800114c <HAL_ADC_Init+0xdc>
 8001288:	6fffffe8 	.word	0x6fffffe8
 800128c:	20000000 	.word	0x20000000
 8001290:	00030d40 	.word	0x00030d40
 8001294:	fffffefd 	.word	0xfffffefd
 8001298:	ffde0201 	.word	0xffde0201
 800129c:	1ffffc02 	.word	0x1ffffc02
 80012a0:	40012708 	.word	0x40012708
 80012a4:	ffc3ffff 	.word	0xffc3ffff

080012a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	46de      	mov	lr, fp
 80012ac:	4657      	mov	r7, sl
 80012ae:	464e      	mov	r6, r9
 80012b0:	4645      	mov	r5, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012b2:	2300      	movs	r3, #0
{
 80012b4:	0004      	movs	r4, r0
 80012b6:	b5e0      	push	{r5, r6, r7, lr}
 80012b8:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 80012ba:	9303      	str	r3, [sp, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80012bc:	3354      	adds	r3, #84	@ 0x54
 80012be:	5ce2      	ldrb	r2, [r4, r3]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012c0:	6900      	ldr	r0, [r0, #16]
  __HAL_LOCK(hadc);
 80012c2:	2a01      	cmp	r2, #1
 80012c4:	d100      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x20>
 80012c6:	e09a      	b.n	80013fe <HAL_ADC_ConfigChannel+0x156>
 80012c8:	2201      	movs	r2, #1
 80012ca:	54e2      	strb	r2, [r4, r3]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	3203      	adds	r2, #3
 80012d0:	689e      	ldr	r6, [r3, #8]
 80012d2:	4232      	tst	r2, r6
 80012d4:	d00e      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0x4c>
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
 80012d6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80012da:	321c      	adds	r2, #28
 80012dc:	4313      	orrs	r3, r2
 80012de:	65a3      	str	r3, [r4, #88]	@ 0x58
  }

  __HAL_UNLOCK(hadc);
 80012e0:	2354      	movs	r3, #84	@ 0x54
 80012e2:	2200      	movs	r2, #0
 80012e4:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 80012e6:	b005      	add	sp, #20
 80012e8:	bcf0      	pop	{r4, r5, r6, r7}
 80012ea:	46bb      	mov	fp, r7
 80012ec:	46b2      	mov	sl, r6
 80012ee:	46a9      	mov	r9, r5
 80012f0:	46a0      	mov	r8, r4
 80012f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 80012f4:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012f6:	4390      	bics	r0, r2
 80012f8:	4684      	mov	ip, r0
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80012fa:	6808      	ldr	r0, [r1, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 80012fc:	2e02      	cmp	r6, #2
 80012fe:	d05e      	beq.n	80013be <HAL_ADC_ConfigChannel+0x116>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001300:	0347      	lsls	r7, r0, #13
 8001302:	0b7d      	lsrs	r5, r7, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001304:	2780      	movs	r7, #128	@ 0x80
 8001306:	9500      	str	r5, [sp, #0]
 8001308:	063f      	lsls	r7, r7, #24
 800130a:	45bc      	cmp	ip, r7
 800130c:	d053      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x10e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800130e:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 8001310:	46bb      	mov	fp, r7
 8001312:	271f      	movs	r7, #31
 8001314:	46b8      	mov	r8, r7
 8001316:	4037      	ands	r7, r6
 8001318:	46ba      	mov	sl, r7
 800131a:	270f      	movs	r7, #15
 800131c:	4655      	mov	r5, sl
 800131e:	40af      	lsls	r7, r5
 8001320:	43fd      	mvns	r5, r7
 8001322:	46bc      	mov	ip, r7
 8001324:	9501      	str	r5, [sp, #4]
 8001326:	465f      	mov	r7, fp
 8001328:	4665      	mov	r5, ip
 800132a:	43af      	bics	r7, r5
 800132c:	9d00      	ldr	r5, [sp, #0]
 800132e:	46b9      	mov	r9, r7
 8001330:	2d00      	cmp	r5, #0
 8001332:	d166      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x15a>
 8001334:	4645      	mov	r5, r8
 8001336:	0e82      	lsrs	r2, r0, #26
 8001338:	4015      	ands	r5, r2
 800133a:	002a      	movs	r2, r5
 800133c:	4655      	mov	r5, sl
 800133e:	40aa      	lsls	r2, r5
 8001340:	464d      	mov	r5, r9
 8001342:	4315      	orrs	r5, r2
 8001344:	46a9      	mov	r9, r5
 8001346:	464a      	mov	r2, r9
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001348:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800134a:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800134c:	69e2      	ldr	r2, [r4, #28]
 800134e:	3601      	adds	r6, #1
 8001350:	4296      	cmp	r6, r2
 8001352:	d808      	bhi.n	8001366 <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCx->CHSELR,
 8001354:	4656      	mov	r6, sl
 8001356:	0082      	lsls	r2, r0, #2
 8001358:	0f12      	lsrs	r2, r2, #28
 800135a:	40b2      	lsls	r2, r6
 800135c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800135e:	9e01      	ldr	r6, [sp, #4]
 8001360:	4035      	ands	r5, r6
 8001362:	432a      	orrs	r2, r5
 8001364:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 8001366:	0205      	lsls	r5, r0, #8
 8001368:	688a      	ldr	r2, [r1, #8]
 800136a:	0029      	movs	r1, r5
 800136c:	695e      	ldr	r6, [r3, #20]
 800136e:	402a      	ands	r2, r5
 8001370:	4d66      	ldr	r5, [pc, #408]	@ (800150c <HAL_ADC_ConfigChannel+0x264>)
 8001372:	438e      	bics	r6, r1
 8001374:	402a      	ands	r2, r5
 8001376:	4332      	orrs	r2, r6
 8001378:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800137a:	2800      	cmp	r0, #0
 800137c:	db01      	blt.n	8001382 <HAL_ADC_ConfigChannel+0xda>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800137e:	2000      	movs	r0, #0
 8001380:	e7ae      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x38>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001382:	21e0      	movs	r1, #224	@ 0xe0
 8001384:	4d62      	ldr	r5, [pc, #392]	@ (8001510 <HAL_ADC_ConfigChannel+0x268>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001386:	4a63      	ldr	r2, [pc, #396]	@ (8001514 <HAL_ADC_ConfigChannel+0x26c>)
 8001388:	682b      	ldr	r3, [r5, #0]
 800138a:	0449      	lsls	r1, r1, #17
 800138c:	4019      	ands	r1, r3
 800138e:	4290      	cmp	r0, r2
 8001390:	d04c      	beq.n	800142c <HAL_ADC_ConfigChannel+0x184>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001392:	4a61      	ldr	r2, [pc, #388]	@ (8001518 <HAL_ADC_ConfigChannel+0x270>)
 8001394:	4290      	cmp	r0, r2
 8001396:	d040      	beq.n	800141a <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001398:	4a60      	ldr	r2, [pc, #384]	@ (800151c <HAL_ADC_ConfigChannel+0x274>)
 800139a:	4290      	cmp	r0, r2
 800139c:	d1ef      	bne.n	800137e <HAL_ADC_ConfigChannel+0xd6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800139e:	2280      	movs	r2, #128	@ 0x80
 80013a0:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80013a2:	4213      	tst	r3, r2
 80013a4:	d1eb      	bne.n	800137e <HAL_ADC_ConfigChannel+0xd6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013a6:	682b      	ldr	r3, [r5, #0]
 80013a8:	485d      	ldr	r0, [pc, #372]	@ (8001520 <HAL_ADC_ConfigChannel+0x278>)
 80013aa:	4003      	ands	r3, r0
 80013ac:	430b      	orrs	r3, r1
 80013ae:	431a      	orrs	r2, r3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b0:	2000      	movs	r0, #0
 80013b2:	602a      	str	r2, [r5, #0]
 80013b4:	e794      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x38>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013b8:	432a      	orrs	r2, r5
 80013ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013bc:	e7d3      	b.n	8001366 <HAL_ADC_ConfigChannel+0xbe>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013be:	2280      	movs	r2, #128	@ 0x80
 80013c0:	0612      	lsls	r2, r2, #24
 80013c2:	4594      	cmp	ip, r2
 80013c4:	d104      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x128>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013c8:	0341      	lsls	r1, r0, #13
 80013ca:	0b49      	lsrs	r1, r1, #13
 80013cc:	438a      	bics	r2, r1
 80013ce:	629a      	str	r2, [r3, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80013d0:	2800      	cmp	r0, #0
 80013d2:	dad4      	bge.n	800137e <HAL_ADC_ConfigChannel+0xd6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001510 <HAL_ADC_ConfigChannel+0x268>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d6:	494f      	ldr	r1, [pc, #316]	@ (8001514 <HAL_ADC_ConfigChannel+0x26c>)
 80013d8:	6813      	ldr	r3, [r2, #0]
 80013da:	4288      	cmp	r0, r1
 80013dc:	d023      	beq.n	8001426 <HAL_ADC_ConfigChannel+0x17e>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80013de:	494e      	ldr	r1, [pc, #312]	@ (8001518 <HAL_ADC_ConfigChannel+0x270>)
 80013e0:	4288      	cmp	r0, r1
 80013e2:	d04a      	beq.n	800147a <HAL_ADC_ConfigChannel+0x1d2>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80013e4:	494d      	ldr	r1, [pc, #308]	@ (800151c <HAL_ADC_ConfigChannel+0x274>)
 80013e6:	4288      	cmp	r0, r1
 80013e8:	d1c9      	bne.n	800137e <HAL_ADC_ConfigChannel+0xd6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013ea:	20c0      	movs	r0, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013ec:	6811      	ldr	r1, [r2, #0]
 80013ee:	0440      	lsls	r0, r0, #17
 80013f0:	4003      	ands	r3, r0
 80013f2:	484b      	ldr	r0, [pc, #300]	@ (8001520 <HAL_ADC_ConfigChannel+0x278>)
 80013f4:	4001      	ands	r1, r0
 80013f6:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f8:	2000      	movs	r0, #0
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e770      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x38>
  __HAL_LOCK(hadc);
 80013fe:	2002      	movs	r0, #2
 8001400:	e771      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x3e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001402:	2501      	movs	r5, #1
 8001404:	4205      	tst	r5, r0
 8001406:	d19e      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x9e>
 8001408:	2702      	movs	r7, #2
 800140a:	4207      	tst	r7, r0
 800140c:	d02d      	beq.n	800146a <HAL_ADC_ConfigChannel+0x1c2>
 800140e:	4652      	mov	r2, sl
 8001410:	4095      	lsls	r5, r2
 8001412:	464a      	mov	r2, r9
 8001414:	432a      	orrs	r2, r5
 8001416:	4691      	mov	r9, r2
 8001418:	e795      	b.n	8001346 <HAL_ADC_ConfigChannel+0x9e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800141a:	2280      	movs	r2, #128	@ 0x80
 800141c:	0452      	lsls	r2, r2, #17
 800141e:	4213      	tst	r3, r2
 8001420:	d0c1      	beq.n	80013a6 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001422:	2000      	movs	r0, #0
 8001424:	e75c      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x38>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001426:	20a0      	movs	r0, #160	@ 0xa0
 8001428:	6811      	ldr	r1, [r2, #0]
 800142a:	e7e0      	b.n	80013ee <HAL_ADC_ConfigChannel+0x146>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800142c:	2280      	movs	r2, #128	@ 0x80
 800142e:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001430:	4213      	tst	r3, r2
 8001432:	d1a4      	bne.n	800137e <HAL_ADC_ConfigChannel+0xd6>
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	483a      	ldr	r0, [pc, #232]	@ (8001520 <HAL_ADC_ConfigChannel+0x278>)
 8001438:	4003      	ands	r3, r0
 800143a:	430b      	orrs	r3, r1
 800143c:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800143e:	4b39      	ldr	r3, [pc, #228]	@ (8001524 <HAL_ADC_ConfigChannel+0x27c>)
 8001440:	602a      	str	r2, [r5, #0]
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	4938      	ldr	r1, [pc, #224]	@ (8001528 <HAL_ADC_ConfigChannel+0x280>)
 8001446:	f7fe fe5d 	bl	8000104 <__udivsi3>
 800144a:	3001      	adds	r0, #1
 800144c:	0043      	lsls	r3, r0, #1
 800144e:	181b      	adds	r3, r3, r0
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8001454:	9b03      	ldr	r3, [sp, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d091      	beq.n	800137e <HAL_ADC_ConfigChannel+0xd6>
            wait_loop_index--;
 800145a:	9b03      	ldr	r3, [sp, #12]
 800145c:	3b01      	subs	r3, #1
 800145e:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8001460:	9b03      	ldr	r3, [sp, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f9      	bne.n	800145a <HAL_ADC_ConfigChannel+0x1b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001466:	2000      	movs	r0, #0
 8001468:	e73a      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x38>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800146a:	4202      	tst	r2, r0
 800146c:	d009      	beq.n	8001482 <HAL_ADC_ConfigChannel+0x1da>
 800146e:	4652      	mov	r2, sl
 8001470:	4097      	lsls	r7, r2
 8001472:	464a      	mov	r2, r9
 8001474:	433a      	orrs	r2, r7
 8001476:	4691      	mov	r9, r2
 8001478:	e765      	b.n	8001346 <HAL_ADC_ConfigChannel+0x9e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800147a:	20c0      	movs	r0, #192	@ 0xc0
 800147c:	6811      	ldr	r1, [r2, #0]
 800147e:	0400      	lsls	r0, r0, #16
 8001480:	e7b6      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x148>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001482:	0702      	lsls	r2, r0, #28
 8001484:	d501      	bpl.n	800148a <HAL_ADC_ConfigChannel+0x1e2>
 8001486:	2203      	movs	r2, #3
 8001488:	e758      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 800148a:	06c2      	lsls	r2, r0, #27
 800148c:	d501      	bpl.n	8001492 <HAL_ADC_ConfigChannel+0x1ea>
 800148e:	2204      	movs	r2, #4
 8001490:	e754      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 8001492:	0682      	lsls	r2, r0, #26
 8001494:	d501      	bpl.n	800149a <HAL_ADC_ConfigChannel+0x1f2>
 8001496:	2205      	movs	r2, #5
 8001498:	e750      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 800149a:	0642      	lsls	r2, r0, #25
 800149c:	d501      	bpl.n	80014a2 <HAL_ADC_ConfigChannel+0x1fa>
 800149e:	2206      	movs	r2, #6
 80014a0:	e74c      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 80014a2:	0602      	lsls	r2, r0, #24
 80014a4:	d501      	bpl.n	80014aa <HAL_ADC_ConfigChannel+0x202>
 80014a6:	2207      	movs	r2, #7
 80014a8:	e748      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 80014aa:	05c2      	lsls	r2, r0, #23
 80014ac:	d501      	bpl.n	80014b2 <HAL_ADC_ConfigChannel+0x20a>
 80014ae:	2208      	movs	r2, #8
 80014b0:	e744      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 80014b2:	0582      	lsls	r2, r0, #22
 80014b4:	d501      	bpl.n	80014ba <HAL_ADC_ConfigChannel+0x212>
 80014b6:	2209      	movs	r2, #9
 80014b8:	e740      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 80014ba:	0542      	lsls	r2, r0, #21
 80014bc:	d501      	bpl.n	80014c2 <HAL_ADC_ConfigChannel+0x21a>
 80014be:	220a      	movs	r2, #10
 80014c0:	e73c      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 80014c2:	0502      	lsls	r2, r0, #20
 80014c4:	d501      	bpl.n	80014ca <HAL_ADC_ConfigChannel+0x222>
 80014c6:	220b      	movs	r2, #11
 80014c8:	e738      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 80014ca:	04c2      	lsls	r2, r0, #19
 80014cc:	d501      	bpl.n	80014d2 <HAL_ADC_ConfigChannel+0x22a>
 80014ce:	220c      	movs	r2, #12
 80014d0:	e734      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 80014d2:	0482      	lsls	r2, r0, #18
 80014d4:	d501      	bpl.n	80014da <HAL_ADC_ConfigChannel+0x232>
 80014d6:	220d      	movs	r2, #13
 80014d8:	e730      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 80014da:	0442      	lsls	r2, r0, #17
 80014dc:	d501      	bpl.n	80014e2 <HAL_ADC_ConfigChannel+0x23a>
 80014de:	220e      	movs	r2, #14
 80014e0:	e72c      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 80014e2:	0402      	lsls	r2, r0, #16
 80014e4:	d504      	bpl.n	80014f0 <HAL_ADC_ConfigChannel+0x248>
 80014e6:	465a      	mov	r2, fp
 80014e8:	4665      	mov	r5, ip
 80014ea:	432a      	orrs	r2, r5
 80014ec:	4691      	mov	r9, r2
 80014ee:	e72a      	b.n	8001346 <HAL_ADC_ConfigChannel+0x9e>
 80014f0:	03c2      	lsls	r2, r0, #15
 80014f2:	d501      	bpl.n	80014f8 <HAL_ADC_ConfigChannel+0x250>
 80014f4:	2210      	movs	r2, #16
 80014f6:	e721      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 80014f8:	0382      	lsls	r2, r0, #14
 80014fa:	d501      	bpl.n	8001500 <HAL_ADC_ConfigChannel+0x258>
 80014fc:	2211      	movs	r2, #17
 80014fe:	e71d      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 8001500:	0342      	lsls	r2, r0, #13
 8001502:	d400      	bmi.n	8001506 <HAL_ADC_ConfigChannel+0x25e>
 8001504:	e71f      	b.n	8001346 <HAL_ADC_ConfigChannel+0x9e>
 8001506:	2212      	movs	r2, #18
 8001508:	e718      	b.n	800133c <HAL_ADC_ConfigChannel+0x94>
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	07ffff00 	.word	0x07ffff00
 8001510:	40012708 	.word	0x40012708
 8001514:	b0001000 	.word	0xb0001000
 8001518:	b8004000 	.word	0xb8004000
 800151c:	b4002000 	.word	0xb4002000
 8001520:	fe3fffff 	.word	0xfe3fffff
 8001524:	20000000 	.word	0x20000000
 8001528:	00030d40 	.word	0x00030d40

0800152c <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800152c:	22ff      	movs	r2, #255	@ 0xff
 800152e:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b510      	push	{r4, lr}
 8001532:	0014      	movs	r4, r2
 8001534:	4003      	ands	r3, r0
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800153a:	0189      	lsls	r1, r1, #6
 800153c:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800153e:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001540:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8001542:	2800      	cmp	r0, #0
 8001544:	db0b      	blt.n	800155e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <HAL_NVIC_SetPriority+0x4c>)
 8001548:	21c0      	movs	r1, #192	@ 0xc0
 800154a:	469c      	mov	ip, r3
 800154c:	0880      	lsrs	r0, r0, #2
 800154e:	0080      	lsls	r0, r0, #2
 8001550:	4460      	add	r0, ip
 8001552:	0089      	lsls	r1, r1, #2
 8001554:	5843      	ldr	r3, [r0, r1]
 8001556:	4023      	ands	r3, r4
 8001558:	4313      	orrs	r3, r2
 800155a:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800155c:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800155e:	230f      	movs	r3, #15
 8001560:	4906      	ldr	r1, [pc, #24]	@ (800157c <HAL_NVIC_SetPriority+0x50>)
 8001562:	4003      	ands	r3, r0
 8001564:	468c      	mov	ip, r1
 8001566:	3b08      	subs	r3, #8
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4463      	add	r3, ip
 800156e:	69d9      	ldr	r1, [r3, #28]
 8001570:	400c      	ands	r4, r1
 8001572:	4314      	orrs	r4, r2
 8001574:	61dc      	str	r4, [r3, #28]
 8001576:	e7f1      	b.n	800155c <HAL_NVIC_SetPriority+0x30>
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001580:	2800      	cmp	r0, #0
 8001582:	db05      	blt.n	8001590 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001584:	221f      	movs	r2, #31
 8001586:	2301      	movs	r3, #1
 8001588:	4002      	ands	r2, r0
 800158a:	4093      	lsls	r3, r2
 800158c:	4a01      	ldr	r2, [pc, #4]	@ (8001594 <HAL_NVIC_EnableIRQ+0x14>)
 800158e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001590:	4770      	bx	lr
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	e000e100 	.word	0xe000e100

08001598 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001598:	2280      	movs	r2, #128	@ 0x80
 800159a:	1e43      	subs	r3, r0, #1
 800159c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800159e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d20e      	bcs.n	80015c2 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a4:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a6:	4a07      	ldr	r2, [pc, #28]	@ (80015c4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a8:	4807      	ldr	r0, [pc, #28]	@ (80015c8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ac:	6a03      	ldr	r3, [r0, #32]
 80015ae:	0609      	lsls	r1, r1, #24
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	0a1b      	lsrs	r3, r3, #8
 80015b4:	430b      	orrs	r3, r1
 80015b6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b8:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ba:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015be:	3307      	adds	r3, #7
 80015c0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80015c2:	4770      	bx	lr
 80015c4:	e000e010 	.word	0xe000e010
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ce:	46c6      	mov	lr, r8
 80015d0:	0004      	movs	r4, r0
 80015d2:	b500      	push	{lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d060      	beq.n	800169a <HAL_DMA_Init+0xce>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015d8:	6805      	ldr	r5, [r0, #0]
 80015da:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <HAL_DMA_Init+0xd4>)
 80015dc:	2114      	movs	r1, #20
 80015de:	18e8      	adds	r0, r5, r3
 80015e0:	f7fe fd90 	bl	8000104 <__udivsi3>
 80015e4:	0083      	lsls	r3, r0, #2
 80015e6:	6423      	str	r3, [r4, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015e8:	2202      	movs	r2, #2
 80015ea:	2325      	movs	r3, #37	@ 0x25
 80015ec:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015ee:	682b      	ldr	r3, [r5, #0]
 80015f0:	4a2c      	ldr	r2, [pc, #176]	@ (80016a4 <HAL_DMA_Init+0xd8>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80015f2:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015f4:	4013      	ands	r3, r2
 80015f6:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80015f8:	68e3      	ldr	r3, [r4, #12]
 80015fa:	6921      	ldr	r1, [r4, #16]
 80015fc:	4333      	orrs	r3, r6
 80015fe:	430b      	orrs	r3, r1
 8001600:	6961      	ldr	r1, [r4, #20]
 8001602:	682a      	ldr	r2, [r5, #0]
 8001604:	430b      	orrs	r3, r1
 8001606:	69a1      	ldr	r1, [r4, #24]
 8001608:	430b      	orrs	r3, r1
 800160a:	69e1      	ldr	r1, [r4, #28]
 800160c:	430b      	orrs	r3, r1
 800160e:	6a21      	ldr	r1, [r4, #32]
 8001610:	430b      	orrs	r3, r1
 8001612:	4313      	orrs	r3, r2
 8001614:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001616:	4b24      	ldr	r3, [pc, #144]	@ (80016a8 <HAL_DMA_Init+0xdc>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001618:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800161a:	469c      	mov	ip, r3
 800161c:	4460      	add	r0, ip
 800161e:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001620:	20ff      	movs	r0, #255	@ 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001622:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <HAL_DMA_Init+0xe0>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001624:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001626:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001628:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800162a:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800162c:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800162e:	f7fe fd69 	bl	8000104 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001632:	231f      	movs	r3, #31
 8001634:	2201      	movs	r2, #1
 8001636:	4003      	ands	r3, r0
 8001638:	0010      	movs	r0, r2
 800163a:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800163c:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800163e:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001640:	01db      	lsls	r3, r3, #7
 8001642:	429e      	cmp	r6, r3
 8001644:	d01f      	beq.n	8001686 <HAL_DMA_Init+0xba>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001646:	233f      	movs	r3, #63	@ 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001648:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800164a:	6861      	ldr	r1, [r4, #4]
 800164c:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800164e:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001650:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001652:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001654:	2903      	cmp	r1, #3
 8001656:	d81b      	bhi.n	8001690 <HAL_DMA_Init+0xc4>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001658:	4915      	ldr	r1, [pc, #84]	@ (80016b0 <HAL_DMA_Init+0xe4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800165a:	4816      	ldr	r0, [pc, #88]	@ (80016b4 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800165c:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800165e:	3b01      	subs	r3, #1
 8001660:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001662:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001664:	0089      	lsls	r1, r1, #2
 8001666:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001668:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800166a:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800166c:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800166e:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001670:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001672:	2225      	movs	r2, #37	@ 0x25
 8001674:	2101      	movs	r1, #1
  return HAL_OK;
 8001676:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001678:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800167a:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 800167c:	3a01      	subs	r2, #1
 800167e:	54a3      	strb	r3, [r4, r2]
}
 8001680:	bc80      	pop	{r7}
 8001682:	46b8      	mov	r8, r7
 8001684:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001686:	2300      	movs	r3, #0
 8001688:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800168a:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800168c:	4643      	mov	r3, r8
 800168e:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001694:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001696:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001698:	e7ea      	b.n	8001670 <HAL_DMA_Init+0xa4>
    return HAL_ERROR;
 800169a:	2001      	movs	r0, #1
 800169c:	e7f0      	b.n	8001680 <HAL_DMA_Init+0xb4>
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	bffdfff8 	.word	0xbffdfff8
 80016a4:	ffff800f 	.word	0xffff800f
 80016a8:	10008200 	.word	0x10008200
 80016ac:	40020880 	.word	0x40020880
 80016b0:	1000823f 	.word	0x1000823f
 80016b4:	40020940 	.word	0x40020940

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ba:	46de      	mov	lr, fp
 80016bc:	4657      	mov	r7, sl
 80016be:	464e      	mov	r6, r9
 80016c0:	4645      	mov	r5, r8
 80016c2:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c4:	680a      	ldr	r2, [r1, #0]
{
 80016c6:	468b      	mov	fp, r1
 80016c8:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d06a      	beq.n	80017a4 <HAL_GPIO_Init+0xec>
 80016ce:	21a0      	movs	r1, #160	@ 0xa0
  uint32_t position = 0x00u;
 80016d0:	2300      	movs	r3, #0
 80016d2:	05c9      	lsls	r1, r1, #23
 80016d4:	4288      	cmp	r0, r1
 80016d6:	d100      	bne.n	80016da <HAL_GPIO_Init+0x22>
 80016d8:	e0c5      	b.n	8001866 <HAL_GPIO_Init+0x1ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016da:	2101      	movs	r1, #1
 80016dc:	4099      	lsls	r1, r3
 80016de:	468c      	mov	ip, r1
 80016e0:	4011      	ands	r1, r2
 80016e2:	468a      	mov	sl, r1

    if (iocurrent != 0x00u)
 80016e4:	4661      	mov	r1, ip
 80016e6:	420a      	tst	r2, r1
 80016e8:	d058      	beq.n	800179c <HAL_GPIO_Init+0xe4>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016ea:	2503      	movs	r5, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016ec:	4659      	mov	r1, fp
 80016ee:	005e      	lsls	r6, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016f0:	40b5      	lsls	r5, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f2:	684c      	ldr	r4, [r1, #4]
 80016f4:	2103      	movs	r1, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016f6:	43ed      	mvns	r5, r5
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f8:	4021      	ands	r1, r4
 80016fa:	1e4f      	subs	r7, r1, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016fc:	9501      	str	r5, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016fe:	2f01      	cmp	r7, #1
 8001700:	d957      	bls.n	80017b2 <HAL_GPIO_Init+0xfa>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001702:	2903      	cmp	r1, #3
 8001704:	d000      	beq.n	8001708 <HAL_GPIO_Init+0x50>
 8001706:	e15f      	b.n	80019c8 <HAL_GPIO_Init+0x310>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001708:	40b1      	lsls	r1, r6
      temp = GPIOx->MODER;
 800170a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800170c:	9d01      	ldr	r5, [sp, #4]
 800170e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001710:	4329      	orrs	r1, r5
      GPIOx->MODER = temp;
 8001712:	6001      	str	r1, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001714:	21c0      	movs	r1, #192	@ 0xc0
 8001716:	0289      	lsls	r1, r1, #10
 8001718:	420c      	tst	r4, r1
 800171a:	d03f      	beq.n	800179c <HAL_GPIO_Init+0xe4>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800171c:	2603      	movs	r6, #3
 800171e:	270f      	movs	r7, #15
 8001720:	4db9      	ldr	r5, [pc, #740]	@ (8001a08 <HAL_GPIO_Init+0x350>)
 8001722:	401e      	ands	r6, r3
 8001724:	46ac      	mov	ip, r5
 8001726:	00f6      	lsls	r6, r6, #3
 8001728:	40b7      	lsls	r7, r6
        temp = EXTI->EXTICR[position >> 2u];
 800172a:	0899      	lsrs	r1, r3, #2
 800172c:	0089      	lsls	r1, r1, #2
 800172e:	4461      	add	r1, ip
 8001730:	6e0d      	ldr	r5, [r1, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001732:	43bd      	bics	r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001734:	4fb5      	ldr	r7, [pc, #724]	@ (8001a0c <HAL_GPIO_Init+0x354>)
 8001736:	42b8      	cmp	r0, r7
 8001738:	d100      	bne.n	800173c <HAL_GPIO_Init+0x84>
 800173a:	e090      	b.n	800185e <HAL_GPIO_Init+0x1a6>
 800173c:	4fb4      	ldr	r7, [pc, #720]	@ (8001a10 <HAL_GPIO_Init+0x358>)
 800173e:	42b8      	cmp	r0, r7
 8001740:	d100      	bne.n	8001744 <HAL_GPIO_Init+0x8c>
 8001742:	e07b      	b.n	800183c <HAL_GPIO_Init+0x184>
 8001744:	4fb3      	ldr	r7, [pc, #716]	@ (8001a14 <HAL_GPIO_Init+0x35c>)
 8001746:	42b8      	cmp	r0, r7
 8001748:	d100      	bne.n	800174c <HAL_GPIO_Init+0x94>
 800174a:	e139      	b.n	80019c0 <HAL_GPIO_Init+0x308>
 800174c:	2705      	movs	r7, #5
 800174e:	40b7      	lsls	r7, r6
 8001750:	433d      	orrs	r5, r7
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001752:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8001754:	660d      	str	r5, [r1, #96]	@ 0x60
        temp &= ~(iocurrent);
 8001756:	4655      	mov	r5, sl
        temp = EXTI->RTSR1;
 8001758:	49ab      	ldr	r1, [pc, #684]	@ (8001a08 <HAL_GPIO_Init+0x350>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800175a:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 800175c:	43ed      	mvns	r5, r5
        temp = EXTI->RTSR1;
 800175e:	6809      	ldr	r1, [r1, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001760:	4234      	tst	r4, r6
 8001762:	d000      	beq.n	8001766 <HAL_GPIO_Init+0xae>
 8001764:	e078      	b.n	8001858 <HAL_GPIO_Init+0x1a0>
        temp &= ~(iocurrent);
 8001766:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8001768:	4ea7      	ldr	r6, [pc, #668]	@ (8001a08 <HAL_GPIO_Init+0x350>)
 800176a:	6031      	str	r1, [r6, #0]

        temp = EXTI->FTSR1;
 800176c:	6871      	ldr	r1, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800176e:	2680      	movs	r6, #128	@ 0x80
 8001770:	03b6      	lsls	r6, r6, #14
 8001772:	4234      	tst	r4, r6
 8001774:	d16d      	bne.n	8001852 <HAL_GPIO_Init+0x19a>
        temp &= ~(iocurrent);
 8001776:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8001778:	4ea3      	ldr	r6, [pc, #652]	@ (8001a08 <HAL_GPIO_Init+0x350>)
 800177a:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800177c:	2184      	movs	r1, #132	@ 0x84
 800177e:	5871      	ldr	r1, [r6, r1]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001780:	03a6      	lsls	r6, r4, #14
 8001782:	d463      	bmi.n	800184c <HAL_GPIO_Init+0x194>
        temp &= ~(iocurrent);
 8001784:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8001786:	2684      	movs	r6, #132	@ 0x84
 8001788:	4f9f      	ldr	r7, [pc, #636]	@ (8001a08 <HAL_GPIO_Init+0x350>)
 800178a:	51b9      	str	r1, [r7, r6]

        temp = EXTI->IMR1;
 800178c:	2180      	movs	r1, #128	@ 0x80
 800178e:	5879      	ldr	r1, [r7, r1]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001790:	03e4      	lsls	r4, r4, #15
 8001792:	d457      	bmi.n	8001844 <HAL_GPIO_Init+0x18c>
        temp &= ~(iocurrent);
 8001794:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8001796:	2480      	movs	r4, #128	@ 0x80
 8001798:	4d9b      	ldr	r5, [pc, #620]	@ (8001a08 <HAL_GPIO_Init+0x350>)
 800179a:	5129      	str	r1, [r5, r4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179c:	0011      	movs	r1, r2
      }
    }

    position++;
 800179e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a0:	40d9      	lsrs	r1, r3
 80017a2:	d19a      	bne.n	80016da <HAL_GPIO_Init+0x22>
  }
}
 80017a4:	b005      	add	sp, #20
 80017a6:	bcf0      	pop	{r4, r5, r6, r7}
 80017a8:	46bb      	mov	fp, r7
 80017aa:	46b2      	mov	sl, r6
 80017ac:	46a9      	mov	r9, r5
 80017ae:	46a0      	mov	r8, r4
 80017b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80017b2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017b4:	402f      	ands	r7, r5
 80017b6:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017b8:	465f      	mov	r7, fp
 80017ba:	68ff      	ldr	r7, [r7, #12]
 80017bc:	40b7      	lsls	r7, r6
 80017be:	46b8      	mov	r8, r7
 80017c0:	464f      	mov	r7, r9
 80017c2:	4645      	mov	r5, r8
 80017c4:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80017c6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80017c8:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ca:	002f      	movs	r7, r5
 80017cc:	4665      	mov	r5, ip
 80017ce:	43af      	bics	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d0:	0925      	lsrs	r5, r4, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017d2:	46b8      	mov	r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d4:	002f      	movs	r7, r5
 80017d6:	2501      	movs	r5, #1
 80017d8:	402f      	ands	r7, r5
 80017da:	409f      	lsls	r7, r3
 80017dc:	46bc      	mov	ip, r7
 80017de:	4647      	mov	r7, r8
 80017e0:	4665      	mov	r5, ip
 80017e2:	432f      	orrs	r7, r5
        GPIOx->OTYPER = temp;
 80017e4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80017e6:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017e8:	002f      	movs	r7, r5
 80017ea:	9d01      	ldr	r5, [sp, #4]
 80017ec:	402f      	ands	r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ee:	465d      	mov	r5, fp
 80017f0:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017f2:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017f4:	002f      	movs	r7, r5
 80017f6:	40b7      	lsls	r7, r6
 80017f8:	46bc      	mov	ip, r7
 80017fa:	4647      	mov	r7, r8
 80017fc:	4665      	mov	r5, ip
 80017fe:	432f      	orrs	r7, r5
        GPIOx->PUPDR = temp;
 8001800:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001802:	2902      	cmp	r1, #2
 8001804:	d000      	beq.n	8001808 <HAL_GPIO_Init+0x150>
 8001806:	e77f      	b.n	8001708 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 8001808:	08dd      	lsrs	r5, r3, #3
 800180a:	00ad      	lsls	r5, r5, #2
 800180c:	46ac      	mov	ip, r5
 800180e:	4484      	add	ip, r0
 8001810:	4665      	mov	r5, ip
 8001812:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001814:	2507      	movs	r5, #7
 8001816:	401d      	ands	r5, r3
 8001818:	00ad      	lsls	r5, r5, #2
 800181a:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 800181c:	9702      	str	r7, [sp, #8]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800181e:	250f      	movs	r5, #15
 8001820:	4647      	mov	r7, r8
 8001822:	40bd      	lsls	r5, r7
 8001824:	9f02      	ldr	r7, [sp, #8]
 8001826:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001828:	465d      	mov	r5, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800182a:	9702      	str	r7, [sp, #8]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800182c:	4647      	mov	r7, r8
 800182e:	692d      	ldr	r5, [r5, #16]
 8001830:	40bd      	lsls	r5, r7
 8001832:	9f02      	ldr	r7, [sp, #8]
 8001834:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8001836:	4665      	mov	r5, ip
 8001838:	622f      	str	r7, [r5, #32]
 800183a:	e765      	b.n	8001708 <HAL_GPIO_Init+0x50>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800183c:	2702      	movs	r7, #2
 800183e:	40b7      	lsls	r7, r6
 8001840:	433d      	orrs	r5, r7
 8001842:	e786      	b.n	8001752 <HAL_GPIO_Init+0x9a>
          temp |= iocurrent;
 8001844:	4654      	mov	r4, sl
 8001846:	430c      	orrs	r4, r1
 8001848:	0021      	movs	r1, r4
 800184a:	e7a4      	b.n	8001796 <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 800184c:	4656      	mov	r6, sl
 800184e:	4331      	orrs	r1, r6
 8001850:	e799      	b.n	8001786 <HAL_GPIO_Init+0xce>
          temp |= iocurrent;
 8001852:	4656      	mov	r6, sl
 8001854:	4331      	orrs	r1, r6
 8001856:	e78f      	b.n	8001778 <HAL_GPIO_Init+0xc0>
          temp |= iocurrent;
 8001858:	4656      	mov	r6, sl
 800185a:	4331      	orrs	r1, r6
 800185c:	e784      	b.n	8001768 <HAL_GPIO_Init+0xb0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800185e:	2701      	movs	r7, #1
 8001860:	40b7      	lsls	r7, r6
 8001862:	433d      	orrs	r5, r7
 8001864:	e775      	b.n	8001752 <HAL_GPIO_Init+0x9a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001866:	2101      	movs	r1, #1
 8001868:	468a      	mov	sl, r1
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800186a:	4659      	mov	r1, fp
 800186c:	9102      	str	r1, [sp, #8]
 800186e:	e040      	b.n	80018f2 <HAL_GPIO_Init+0x23a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001870:	2903      	cmp	r1, #3
 8001872:	d000      	beq.n	8001876 <HAL_GPIO_Init+0x1be>
 8001874:	e0b5      	b.n	80019e2 <HAL_GPIO_Init+0x32a>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001876:	40b1      	lsls	r1, r6
      temp = GPIOx->MODER;
 8001878:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800187a:	9d01      	ldr	r5, [sp, #4]
 800187c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800187e:	4329      	orrs	r1, r5
      GPIOx->MODER = temp;
 8001880:	6001      	str	r1, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001882:	21c0      	movs	r1, #192	@ 0xc0
 8001884:	0289      	lsls	r1, r1, #10
 8001886:	420c      	tst	r4, r1
 8001888:	d02e      	beq.n	80018e8 <HAL_GPIO_Init+0x230>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800188a:	2603      	movs	r6, #3
 800188c:	270f      	movs	r7, #15
 800188e:	4d5e      	ldr	r5, [pc, #376]	@ (8001a08 <HAL_GPIO_Init+0x350>)
 8001890:	401e      	ands	r6, r3
 8001892:	46ac      	mov	ip, r5
 8001894:	00f6      	lsls	r6, r6, #3
 8001896:	40b7      	lsls	r7, r6
        temp = EXTI->EXTICR[position >> 2u];
 8001898:	0899      	lsrs	r1, r3, #2
 800189a:	0089      	lsls	r1, r1, #2
 800189c:	4461      	add	r1, ip
 800189e:	6e0d      	ldr	r5, [r1, #96]	@ 0x60
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018a0:	2680      	movs	r6, #128	@ 0x80
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80018a2:	43bd      	bics	r5, r7
        EXTI->EXTICR[position >> 2u] = temp;
 80018a4:	660d      	str	r5, [r1, #96]	@ 0x60
        temp = EXTI->RTSR1;
 80018a6:	4661      	mov	r1, ip
        temp &= ~(iocurrent);
 80018a8:	465d      	mov	r5, fp
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018aa:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 80018ac:	43ed      	mvns	r5, r5
        temp = EXTI->RTSR1;
 80018ae:	6809      	ldr	r1, [r1, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018b0:	4234      	tst	r4, r6
 80018b2:	d000      	beq.n	80018b6 <HAL_GPIO_Init+0x1fe>
 80018b4:	e081      	b.n	80019ba <HAL_GPIO_Init+0x302>
        temp &= ~(iocurrent);
 80018b6:	4029      	ands	r1, r5
        EXTI->RTSR1 = temp;
 80018b8:	4e53      	ldr	r6, [pc, #332]	@ (8001a08 <HAL_GPIO_Init+0x350>)
 80018ba:	6031      	str	r1, [r6, #0]
        temp = EXTI->FTSR1;
 80018bc:	6871      	ldr	r1, [r6, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018be:	02a6      	lsls	r6, r4, #10
 80018c0:	d478      	bmi.n	80019b4 <HAL_GPIO_Init+0x2fc>
        temp &= ~(iocurrent);
 80018c2:	4029      	ands	r1, r5
        EXTI->FTSR1 = temp;
 80018c4:	4e50      	ldr	r6, [pc, #320]	@ (8001a08 <HAL_GPIO_Init+0x350>)
 80018c6:	6071      	str	r1, [r6, #4]
        temp = EXTI->EMR1;
 80018c8:	2184      	movs	r1, #132	@ 0x84
 80018ca:	5871      	ldr	r1, [r6, r1]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018cc:	03a6      	lsls	r6, r4, #14
 80018ce:	d46e      	bmi.n	80019ae <HAL_GPIO_Init+0x2f6>
        temp &= ~(iocurrent);
 80018d0:	4029      	ands	r1, r5
        EXTI->EMR1 = temp;
 80018d2:	2684      	movs	r6, #132	@ 0x84
 80018d4:	4f4c      	ldr	r7, [pc, #304]	@ (8001a08 <HAL_GPIO_Init+0x350>)
 80018d6:	51b9      	str	r1, [r7, r6]
        temp = EXTI->IMR1;
 80018d8:	2180      	movs	r1, #128	@ 0x80
 80018da:	5879      	ldr	r1, [r7, r1]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018dc:	03e4      	lsls	r4, r4, #15
 80018de:	d463      	bmi.n	80019a8 <HAL_GPIO_Init+0x2f0>
        temp &= ~(iocurrent);
 80018e0:	4029      	ands	r1, r5
        EXTI->IMR1 = temp;
 80018e2:	2480      	movs	r4, #128	@ 0x80
 80018e4:	4d48      	ldr	r5, [pc, #288]	@ (8001a08 <HAL_GPIO_Init+0x350>)
 80018e6:	5129      	str	r1, [r5, r4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e8:	0011      	movs	r1, r2
    position++;
 80018ea:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ec:	40d9      	lsrs	r1, r3
 80018ee:	d100      	bne.n	80018f2 <HAL_GPIO_Init+0x23a>
 80018f0:	e758      	b.n	80017a4 <HAL_GPIO_Init+0xec>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f2:	4651      	mov	r1, sl
 80018f4:	4099      	lsls	r1, r3
 80018f6:	468c      	mov	ip, r1
 80018f8:	4011      	ands	r1, r2
 80018fa:	468b      	mov	fp, r1
    if (iocurrent != 0x00u)
 80018fc:	4661      	mov	r1, ip
 80018fe:	4211      	tst	r1, r2
 8001900:	d0f2      	beq.n	80018e8 <HAL_GPIO_Init+0x230>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001902:	2503      	movs	r5, #3
 8001904:	005e      	lsls	r6, r3, #1
 8001906:	40b5      	lsls	r5, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001908:	9902      	ldr	r1, [sp, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800190a:	43ed      	mvns	r5, r5
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800190c:	684c      	ldr	r4, [r1, #4]
 800190e:	2103      	movs	r1, #3
 8001910:	4021      	ands	r1, r4
 8001912:	1e4f      	subs	r7, r1, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001914:	9501      	str	r5, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001916:	2f01      	cmp	r7, #1
 8001918:	d8aa      	bhi.n	8001870 <HAL_GPIO_Init+0x1b8>
        temp = GPIOx->OSPEEDR;
 800191a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800191c:	402f      	ands	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800191e:	9d02      	ldr	r5, [sp, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001920:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001922:	68ef      	ldr	r7, [r5, #12]
 8001924:	40b7      	lsls	r7, r6
 8001926:	46b8      	mov	r8, r7
 8001928:	464f      	mov	r7, r9
 800192a:	4645      	mov	r5, r8
 800192c:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 800192e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001930:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001932:	002f      	movs	r7, r5
 8001934:	4665      	mov	r5, ip
 8001936:	43af      	bics	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001938:	0925      	lsrs	r5, r4, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800193a:	46b8      	mov	r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193c:	002f      	movs	r7, r5
 800193e:	4655      	mov	r5, sl
 8001940:	402f      	ands	r7, r5
 8001942:	409f      	lsls	r7, r3
 8001944:	46bc      	mov	ip, r7
 8001946:	4647      	mov	r7, r8
 8001948:	4665      	mov	r5, ip
 800194a:	432f      	orrs	r7, r5
        GPIOx->OTYPER = temp;
 800194c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800194e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001950:	002f      	movs	r7, r5
 8001952:	9d01      	ldr	r5, [sp, #4]
 8001954:	402f      	ands	r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001956:	9d02      	ldr	r5, [sp, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001958:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800195a:	68ad      	ldr	r5, [r5, #8]
 800195c:	002f      	movs	r7, r5
 800195e:	40b7      	lsls	r7, r6
 8001960:	46bc      	mov	ip, r7
 8001962:	4647      	mov	r7, r8
 8001964:	4665      	mov	r5, ip
 8001966:	432f      	orrs	r7, r5
        GPIOx->PUPDR = temp;
 8001968:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196a:	2902      	cmp	r1, #2
 800196c:	d183      	bne.n	8001876 <HAL_GPIO_Init+0x1be>
        temp = GPIOx->AFR[position >> 3u];
 800196e:	08dd      	lsrs	r5, r3, #3
 8001970:	00ad      	lsls	r5, r5, #2
 8001972:	46ac      	mov	ip, r5
 8001974:	25a0      	movs	r5, #160	@ 0xa0
 8001976:	05ed      	lsls	r5, r5, #23
 8001978:	46a8      	mov	r8, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800197a:	44c4      	add	ip, r8
        temp = GPIOx->AFR[position >> 3u];
 800197c:	4665      	mov	r5, ip
 800197e:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001980:	2507      	movs	r5, #7
 8001982:	401d      	ands	r5, r3
 8001984:	00ad      	lsls	r5, r5, #2
 8001986:	46a9      	mov	r9, r5
        temp = GPIOx->AFR[position >> 3u];
 8001988:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800198a:	250f      	movs	r5, #15
 800198c:	464f      	mov	r7, r9
 800198e:	40bd      	lsls	r5, r7
 8001990:	9f03      	ldr	r7, [sp, #12]
 8001992:	43af      	bics	r7, r5
 8001994:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001996:	464f      	mov	r7, r9
 8001998:	9d02      	ldr	r5, [sp, #8]
 800199a:	692d      	ldr	r5, [r5, #16]
 800199c:	40bd      	lsls	r5, r7
 800199e:	9f03      	ldr	r7, [sp, #12]
 80019a0:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 80019a2:	4665      	mov	r5, ip
 80019a4:	622f      	str	r7, [r5, #32]
 80019a6:	e766      	b.n	8001876 <HAL_GPIO_Init+0x1be>
          temp |= iocurrent;
 80019a8:	465c      	mov	r4, fp
 80019aa:	4321      	orrs	r1, r4
 80019ac:	e799      	b.n	80018e2 <HAL_GPIO_Init+0x22a>
          temp |= iocurrent;
 80019ae:	465e      	mov	r6, fp
 80019b0:	4331      	orrs	r1, r6
 80019b2:	e78e      	b.n	80018d2 <HAL_GPIO_Init+0x21a>
          temp |= iocurrent;
 80019b4:	465e      	mov	r6, fp
 80019b6:	4331      	orrs	r1, r6
 80019b8:	e784      	b.n	80018c4 <HAL_GPIO_Init+0x20c>
          temp |= iocurrent;
 80019ba:	465e      	mov	r6, fp
 80019bc:	4331      	orrs	r1, r6
 80019be:	e77b      	b.n	80018b8 <HAL_GPIO_Init+0x200>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80019c0:	2703      	movs	r7, #3
 80019c2:	40b7      	lsls	r7, r6
 80019c4:	433d      	orrs	r5, r7
 80019c6:	e6c4      	b.n	8001752 <HAL_GPIO_Init+0x9a>
 80019c8:	002f      	movs	r7, r5
        temp = GPIOx->PUPDR;
 80019ca:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019cc:	403d      	ands	r5, r7
 80019ce:	46a8      	mov	r8, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019d0:	465d      	mov	r5, fp
 80019d2:	68ad      	ldr	r5, [r5, #8]
 80019d4:	40b5      	lsls	r5, r6
 80019d6:	46ac      	mov	ip, r5
 80019d8:	4645      	mov	r5, r8
 80019da:	4667      	mov	r7, ip
 80019dc:	433d      	orrs	r5, r7
        GPIOx->PUPDR = temp;
 80019de:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e0:	e692      	b.n	8001708 <HAL_GPIO_Init+0x50>
 80019e2:	002f      	movs	r7, r5
        temp = GPIOx->PUPDR;
 80019e4:	25a0      	movs	r5, #160	@ 0xa0
 80019e6:	05ed      	lsls	r5, r5, #23
 80019e8:	46a8      	mov	r8, r5
 80019ea:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019ec:	403d      	ands	r5, r7
 80019ee:	46a9      	mov	r9, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019f0:	9d02      	ldr	r5, [sp, #8]
 80019f2:	68ad      	ldr	r5, [r5, #8]
 80019f4:	40b5      	lsls	r5, r6
 80019f6:	46ac      	mov	ip, r5
 80019f8:	464d      	mov	r5, r9
 80019fa:	4667      	mov	r7, ip
 80019fc:	433d      	orrs	r5, r7
 80019fe:	46ac      	mov	ip, r5
        GPIOx->PUPDR = temp;
 8001a00:	4645      	mov	r5, r8
 8001a02:	4667      	mov	r7, ip
 8001a04:	60ef      	str	r7, [r5, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a06:	e736      	b.n	8001876 <HAL_GPIO_Init+0x1be>
 8001a08:	40021800 	.word	0x40021800
 8001a0c:	50000400 	.word	0x50000400
 8001a10:	50000800 	.word	0x50000800
 8001a14:	50000c00 	.word	0x50000c00

08001a18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a18:	2a00      	cmp	r2, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a1c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a1e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a20:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8001a22:	e7fc      	b.n	8001a1e <HAL_GPIO_WritePin+0x6>

08001a24 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a24:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a26:	0013      	movs	r3, r2
 8001a28:	400b      	ands	r3, r1
 8001a2a:	041b      	lsls	r3, r3, #16
 8001a2c:	4391      	bics	r1, r2
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	6183      	str	r3, [r0, #24]
}
 8001a32:	4770      	bx	lr

08001a34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a34:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001a36:	4c13      	ldr	r4, [pc, #76]	@ (8001a84 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8001a38:	4a13      	ldr	r2, [pc, #76]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8001a3a:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001a3c:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001a3e:	4013      	ands	r3, r2
 8001a40:	4303      	orrs	r3, r0
 8001a42:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a44:	2380      	movs	r3, #128	@ 0x80
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4298      	cmp	r0, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8001a4c:	0028      	movs	r0, r5
 8001a4e:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001a50:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <HAL_PWREx_ControlVoltageScaling+0x58>)
 8001a52:	490f      	ldr	r1, [pc, #60]	@ (8001a90 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0058      	lsls	r0, r3, #1
 8001a58:	18c0      	adds	r0, r0, r3
 8001a5a:	0040      	lsls	r0, r0, #1
 8001a5c:	f7fe fb52 	bl	8000104 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a60:	2280      	movs	r2, #128	@ 0x80
 8001a62:	6963      	ldr	r3, [r4, #20]
 8001a64:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001a66:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a68:	4213      	tst	r3, r2
 8001a6a:	d102      	bne.n	8001a72 <HAL_PWREx_ControlVoltageScaling+0x3e>
 8001a6c:	e7ee      	b.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a72:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8001a74:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a76:	4213      	tst	r3, r2
 8001a78:	d1f9      	bne.n	8001a6e <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	e7e6      	b.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8001a7e:	2503      	movs	r5, #3
 8001a80:	e7e4      	b.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x18>
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	40007000 	.word	0x40007000
 8001a88:	fffff9ff 	.word	0xfffff9ff
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	000f4240 	.word	0x000f4240

08001a94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a96:	46ce      	mov	lr, r9
 8001a98:	4647      	mov	r7, r8
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	0004      	movs	r4, r0
 8001a9e:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	d027      	beq.n	8001af4 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa4:	6803      	ldr	r3, [r0, #0]
 8001aa6:	07da      	lsls	r2, r3, #31
 8001aa8:	d511      	bpl.n	8001ace <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aaa:	2238      	movs	r2, #56	@ 0x38
 8001aac:	49c0      	ldr	r1, [pc, #768]	@ (8001db0 <HAL_RCC_OscConfig+0x31c>)
 8001aae:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab0:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ab2:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001ab4:	2a10      	cmp	r2, #16
 8001ab6:	d100      	bne.n	8001aba <HAL_RCC_OscConfig+0x26>
 8001ab8:	e0cc      	b.n	8001c54 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001aba:	2a08      	cmp	r2, #8
 8001abc:	d000      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x2c>
 8001abe:	e0cd      	b.n	8001c5c <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	4abb      	ldr	r2, [pc, #748]	@ (8001db0 <HAL_RCC_OscConfig+0x31c>)
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	0392      	lsls	r2, r2, #14
 8001ac6:	d502      	bpl.n	8001ace <HAL_RCC_OscConfig+0x3a>
 8001ac8:	6862      	ldr	r2, [r4, #4]
 8001aca:	2a00      	cmp	r2, #0
 8001acc:	d012      	beq.n	8001af4 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ace:	079a      	lsls	r2, r3, #30
 8001ad0:	d532      	bpl.n	8001b38 <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad2:	2338      	movs	r3, #56	@ 0x38
 8001ad4:	4ab6      	ldr	r2, [pc, #728]	@ (8001db0 <HAL_RCC_OscConfig+0x31c>)
 8001ad6:	6891      	ldr	r1, [r2, #8]
 8001ad8:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ada:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d100      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x4e>
 8001ae0:	e10b      	b.n	8001cfa <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d000      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x54>
 8001ae6:	e10d      	b.n	8001d04 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae8:	6813      	ldr	r3, [r2, #0]
 8001aea:	055b      	lsls	r3, r3, #21
 8001aec:	d508      	bpl.n	8001b00 <HAL_RCC_OscConfig+0x6c>
 8001aee:	68e3      	ldr	r3, [r4, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d105      	bne.n	8001b00 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8001af4:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8001af6:	b003      	add	sp, #12
 8001af8:	bcc0      	pop	{r6, r7}
 8001afa:	46b9      	mov	r9, r7
 8001afc:	46b0      	mov	r8, r6
 8001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	6851      	ldr	r1, [r2, #4]
 8001b02:	6963      	ldr	r3, [r4, #20]
 8001b04:	48ab      	ldr	r0, [pc, #684]	@ (8001db4 <HAL_RCC_OscConfig+0x320>)
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	4001      	ands	r1, r0
 8001b0a:	430b      	orrs	r3, r1
 8001b0c:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b0e:	4aa8      	ldr	r2, [pc, #672]	@ (8001db0 <HAL_RCC_OscConfig+0x31c>)
 8001b10:	49a9      	ldr	r1, [pc, #676]	@ (8001db8 <HAL_RCC_OscConfig+0x324>)
 8001b12:	6813      	ldr	r3, [r2, #0]
 8001b14:	400b      	ands	r3, r1
 8001b16:	6921      	ldr	r1, [r4, #16]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b1c:	6813      	ldr	r3, [r2, #0]
 8001b1e:	4aa7      	ldr	r2, [pc, #668]	@ (8001dbc <HAL_RCC_OscConfig+0x328>)
 8001b20:	049b      	lsls	r3, r3, #18
 8001b22:	0f5b      	lsrs	r3, r3, #29
 8001b24:	40da      	lsrs	r2, r3
 8001b26:	49a6      	ldr	r1, [pc, #664]	@ (8001dc0 <HAL_RCC_OscConfig+0x32c>)
 8001b28:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b2a:	4ba6      	ldr	r3, [pc, #664]	@ (8001dc4 <HAL_RCC_OscConfig+0x330>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	f7ff fa4d 	bl	8000fcc <HAL_InitTick>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d1de      	bne.n	8001af4 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	071a      	lsls	r2, r3, #28
 8001b3a:	d46d      	bmi.n	8001c18 <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3c:	075b      	lsls	r3, r3, #29
 8001b3e:	d545      	bpl.n	8001bcc <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b40:	2338      	movs	r3, #56	@ 0x38
 8001b42:	4a9b      	ldr	r2, [pc, #620]	@ (8001db0 <HAL_RCC_OscConfig+0x31c>)
 8001b44:	6891      	ldr	r1, [r2, #8]
 8001b46:	400b      	ands	r3, r1
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d100      	bne.n	8001b4e <HAL_RCC_OscConfig+0xba>
 8001b4c:	e0cc      	b.n	8001ce8 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b4e:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001b50:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b52:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001b54:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001b56:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b58:	4219      	tst	r1, r3
 8001b5a:	d108      	bne.n	8001b6e <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b5c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001b5e:	4319      	orrs	r1, r3
 8001b60:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001b62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b64:	4013      	ands	r3, r2
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6e:	2780      	movs	r7, #128	@ 0x80
 8001b70:	4e95      	ldr	r6, [pc, #596]	@ (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b72:	007f      	lsls	r7, r7, #1
 8001b74:	6833      	ldr	r3, [r6, #0]
 8001b76:	423b      	tst	r3, r7
 8001b78:	d100      	bne.n	8001b7c <HAL_RCC_OscConfig+0xe8>
 8001b7a:	e0ff      	b.n	8001d7c <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7c:	68a3      	ldr	r3, [r4, #8]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d100      	bne.n	8001b84 <HAL_RCC_OscConfig+0xf0>
 8001b82:	e0e5      	b.n	8001d50 <HAL_RCC_OscConfig+0x2bc>
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d100      	bne.n	8001b8a <HAL_RCC_OscConfig+0xf6>
 8001b88:	e1d1      	b.n	8001f2e <HAL_RCC_OscConfig+0x49a>
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	4e88      	ldr	r6, [pc, #544]	@ (8001db0 <HAL_RCC_OscConfig+0x31c>)
 8001b8e:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8001b90:	438a      	bics	r2, r1
 8001b92:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8001b94:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8001b96:	3103      	adds	r1, #3
 8001b98:	438a      	bics	r2, r1
 8001b9a:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d000      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x10e>
 8001ba0:	e0da      	b.n	8001d58 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fa4d 	bl	8001040 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba6:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8001ba8:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001baa:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	4d87      	ldr	r5, [pc, #540]	@ (8001dcc <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bae:	e005      	b.n	8001bbc <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fa46 	bl	8001040 <HAL_GetTick>
 8001bb4:	1bc0      	subs	r0, r0, r7
 8001bb6:	42a8      	cmp	r0, r5
 8001bb8:	d900      	bls.n	8001bbc <HAL_RCC_OscConfig+0x128>
 8001bba:	e0ee      	b.n	8001d9a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bbc:	4642      	mov	r2, r8
 8001bbe:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8001bc0:	421a      	tst	r2, r3
 8001bc2:	d1f5      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 8001bc4:	464b      	mov	r3, r9
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d100      	bne.n	8001bcc <HAL_RCC_OscConfig+0x138>
 8001bca:	e16a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x40e>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bcc:	69e3      	ldr	r3, [r4, #28]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d020      	beq.n	8001c14 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd2:	2238      	movs	r2, #56	@ 0x38
 8001bd4:	4d76      	ldr	r5, [pc, #472]	@ (8001db0 <HAL_RCC_OscConfig+0x31c>)
 8001bd6:	68a9      	ldr	r1, [r5, #8]
 8001bd8:	400a      	ands	r2, r1
 8001bda:	2a10      	cmp	r2, #16
 8001bdc:	d100      	bne.n	8001be0 <HAL_RCC_OscConfig+0x14c>
 8001bde:	e11d      	b.n	8001e1c <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d100      	bne.n	8001be6 <HAL_RCC_OscConfig+0x152>
 8001be4:	e163      	b.n	8001eae <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_PLL_DISABLE();
 8001be6:	682b      	ldr	r3, [r5, #0]
 8001be8:	4a79      	ldr	r2, [pc, #484]	@ (8001dd0 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bea:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001bec:	4013      	ands	r3, r2
 8001bee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fa26 	bl	8001040 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf4:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8001bf6:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf8:	e005      	b.n	8001c06 <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff fa21 	bl	8001040 <HAL_GetTick>
 8001bfe:	1b00      	subs	r0, r0, r4
 8001c00:	2802      	cmp	r0, #2
 8001c02:	d900      	bls.n	8001c06 <HAL_RCC_OscConfig+0x172>
 8001c04:	e0c9      	b.n	8001d9a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c06:	682b      	ldr	r3, [r5, #0]
 8001c08:	4233      	tst	r3, r6
 8001c0a:	d1f6      	bne.n	8001bfa <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c0c:	68eb      	ldr	r3, [r5, #12]
 8001c0e:	4a71      	ldr	r2, [pc, #452]	@ (8001dd4 <HAL_RCC_OscConfig+0x340>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8001c14:	2000      	movs	r0, #0
 8001c16:	e76e      	b.n	8001af6 <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c18:	2238      	movs	r2, #56	@ 0x38
 8001c1a:	4d65      	ldr	r5, [pc, #404]	@ (8001db0 <HAL_RCC_OscConfig+0x31c>)
 8001c1c:	68a9      	ldr	r1, [r5, #8]
 8001c1e:	400a      	ands	r2, r1
 8001c20:	2a18      	cmp	r2, #24
 8001c22:	d043      	beq.n	8001cac <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c24:	69a3      	ldr	r3, [r4, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d100      	bne.n	8001c2c <HAL_RCC_OscConfig+0x198>
 8001c2a:	e0b8      	b.n	8001d9e <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c30:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8001c32:	4313      	orrs	r3, r2
 8001c34:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001c36:	f7ff fa03 	bl	8001040 <HAL_GetTick>
 8001c3a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c3c:	e005      	b.n	8001c4a <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7ff f9ff 	bl	8001040 <HAL_GetTick>
 8001c42:	1b80      	subs	r0, r0, r6
 8001c44:	2802      	cmp	r0, #2
 8001c46:	d900      	bls.n	8001c4a <HAL_RCC_OscConfig+0x1b6>
 8001c48:	e0a7      	b.n	8001d9a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c4a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001c4c:	421f      	tst	r7, r3
 8001c4e:	d0f6      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	e773      	b.n	8001b3c <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c54:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001c56:	0789      	lsls	r1, r1, #30
 8001c58:	d100      	bne.n	8001c5c <HAL_RCC_OscConfig+0x1c8>
 8001c5a:	e731      	b.n	8001ac0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5c:	2280      	movs	r2, #128	@ 0x80
 8001c5e:	6863      	ldr	r3, [r4, #4]
 8001c60:	0252      	lsls	r2, r2, #9
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d02b      	beq.n	8001cbe <HAL_RCC_OscConfig+0x22a>
 8001c66:	21a0      	movs	r1, #160	@ 0xa0
 8001c68:	02c9      	lsls	r1, r1, #11
 8001c6a:	428b      	cmp	r3, r1
 8001c6c:	d100      	bne.n	8001c70 <HAL_RCC_OscConfig+0x1dc>
 8001c6e:	e103      	b.n	8001e78 <HAL_RCC_OscConfig+0x3e4>
 8001c70:	4d4f      	ldr	r5, [pc, #316]	@ (8001db0 <HAL_RCC_OscConfig+0x31c>)
 8001c72:	4959      	ldr	r1, [pc, #356]	@ (8001dd8 <HAL_RCC_OscConfig+0x344>)
 8001c74:	682a      	ldr	r2, [r5, #0]
 8001c76:	400a      	ands	r2, r1
 8001c78:	602a      	str	r2, [r5, #0]
 8001c7a:	682a      	ldr	r2, [r5, #0]
 8001c7c:	4957      	ldr	r1, [pc, #348]	@ (8001ddc <HAL_RCC_OscConfig+0x348>)
 8001c7e:	400a      	ands	r2, r1
 8001c80:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d11f      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 8001c86:	f7ff f9db 	bl	8001040 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8a:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001c8c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8e:	02bf      	lsls	r7, r7, #10
 8001c90:	e004      	b.n	8001c9c <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c92:	f7ff f9d5 	bl	8001040 <HAL_GetTick>
 8001c96:	1b80      	subs	r0, r0, r6
 8001c98:	2864      	cmp	r0, #100	@ 0x64
 8001c9a:	d87e      	bhi.n	8001d9a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c9c:	682b      	ldr	r3, [r5, #0]
 8001c9e:	423b      	tst	r3, r7
 8001ca0:	d1f7      	bne.n	8001c92 <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	079a      	lsls	r2, r3, #30
 8001ca6:	d400      	bmi.n	8001caa <HAL_RCC_OscConfig+0x216>
 8001ca8:	e746      	b.n	8001b38 <HAL_RCC_OscConfig+0xa4>
 8001caa:	e712      	b.n	8001ad2 <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001cac:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8001cae:	0792      	lsls	r2, r2, #30
 8001cb0:	d400      	bmi.n	8001cb4 <HAL_RCC_OscConfig+0x220>
 8001cb2:	e743      	b.n	8001b3c <HAL_RCC_OscConfig+0xa8>
 8001cb4:	69a2      	ldr	r2, [r4, #24]
 8001cb6:	2a00      	cmp	r2, #0
 8001cb8:	d000      	beq.n	8001cbc <HAL_RCC_OscConfig+0x228>
 8001cba:	e73f      	b.n	8001b3c <HAL_RCC_OscConfig+0xa8>
 8001cbc:	e71a      	b.n	8001af4 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbe:	4a3c      	ldr	r2, [pc, #240]	@ (8001db0 <HAL_RCC_OscConfig+0x31c>)
 8001cc0:	6811      	ldr	r1, [r2, #0]
 8001cc2:	430b      	orrs	r3, r1
 8001cc4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001cc6:	f7ff f9bb 	bl	8001040 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cca:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001ccc:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cce:	4f38      	ldr	r7, [pc, #224]	@ (8001db0 <HAL_RCC_OscConfig+0x31c>)
 8001cd0:	02b6      	lsls	r6, r6, #10
 8001cd2:	e004      	b.n	8001cde <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b4 	bl	8001040 <HAL_GetTick>
 8001cd8:	1b40      	subs	r0, r0, r5
 8001cda:	2864      	cmp	r0, #100	@ 0x64
 8001cdc:	d85d      	bhi.n	8001d9a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	4233      	tst	r3, r6
 8001ce2:	d0f7      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	e7dd      	b.n	8001ca4 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ce8:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8001cea:	079b      	lsls	r3, r3, #30
 8001cec:	d400      	bmi.n	8001cf0 <HAL_RCC_OscConfig+0x25c>
 8001cee:	e76d      	b.n	8001bcc <HAL_RCC_OscConfig+0x138>
 8001cf0:	68a3      	ldr	r3, [r4, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d000      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x264>
 8001cf6:	e769      	b.n	8001bcc <HAL_RCC_OscConfig+0x138>
 8001cf8:	e6fc      	b.n	8001af4 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cfa:	3b0d      	subs	r3, #13
 8001cfc:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d100      	bne.n	8001d04 <HAL_RCC_OscConfig+0x270>
 8001d02:	e0c3      	b.n	8001e8c <HAL_RCC_OscConfig+0x3f8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d04:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d06:	4d2a      	ldr	r5, [pc, #168]	@ (8001db0 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d073      	beq.n	8001df4 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d0c:	682b      	ldr	r3, [r5, #0]
 8001d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001db8 <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d10:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d12:	4013      	ands	r3, r2
 8001d14:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d16:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	682a      	ldr	r2, [r5, #0]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4313      	orrs	r3, r2
 8001d24:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d26:	f7ff f98b 	bl	8001040 <HAL_GetTick>
 8001d2a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d2c:	e004      	b.n	8001d38 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7ff f987 	bl	8001040 <HAL_GetTick>
 8001d32:	1b80      	subs	r0, r0, r6
 8001d34:	2802      	cmp	r0, #2
 8001d36:	d830      	bhi.n	8001d9a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d38:	682b      	ldr	r3, [r5, #0]
 8001d3a:	423b      	tst	r3, r7
 8001d3c:	d0f7      	beq.n	8001d2e <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3e:	686a      	ldr	r2, [r5, #4]
 8001d40:	6963      	ldr	r3, [r4, #20]
 8001d42:	491c      	ldr	r1, [pc, #112]	@ (8001db4 <HAL_RCC_OscConfig+0x320>)
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	400a      	ands	r2, r1
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	e6f3      	b.n	8001b38 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d50:	4917      	ldr	r1, [pc, #92]	@ (8001db0 <HAL_RCC_OscConfig+0x31c>)
 8001d52:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8001d54:	4313      	orrs	r3, r2
 8001d56:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8001d58:	f7ff f972 	bl	8001040 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5c:	4b14      	ldr	r3, [pc, #80]	@ (8001db0 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8001d5e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d60:	4698      	mov	r8, r3
 8001d62:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	4d19      	ldr	r5, [pc, #100]	@ (8001dcc <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d66:	e004      	b.n	8001d72 <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7ff f96a 	bl	8001040 <HAL_GetTick>
 8001d6c:	1b80      	subs	r0, r0, r6
 8001d6e:	42a8      	cmp	r0, r5
 8001d70:	d813      	bhi.n	8001d9a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d72:	4643      	mov	r3, r8
 8001d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d76:	421f      	tst	r7, r3
 8001d78:	d0f6      	beq.n	8001d68 <HAL_RCC_OscConfig+0x2d4>
 8001d7a:	e723      	b.n	8001bc4 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d7c:	6833      	ldr	r3, [r6, #0]
 8001d7e:	433b      	orrs	r3, r7
 8001d80:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001d82:	f7ff f95d 	bl	8001040 <HAL_GetTick>
 8001d86:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d88:	6833      	ldr	r3, [r6, #0]
 8001d8a:	423b      	tst	r3, r7
 8001d8c:	d000      	beq.n	8001d90 <HAL_RCC_OscConfig+0x2fc>
 8001d8e:	e6f5      	b.n	8001b7c <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d90:	f7ff f956 	bl	8001040 <HAL_GetTick>
 8001d94:	1b40      	subs	r0, r0, r5
 8001d96:	2802      	cmp	r0, #2
 8001d98:	d9f6      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 8001d9a:	2003      	movs	r0, #3
 8001d9c:	e6ab      	b.n	8001af6 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 8001d9e:	2201      	movs	r2, #1
 8001da0:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da2:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8001da4:	4393      	bics	r3, r2
 8001da6:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001da8:	f7ff f94a 	bl	8001040 <HAL_GetTick>
 8001dac:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dae:	e01c      	b.n	8001dea <HAL_RCC_OscConfig+0x356>
 8001db0:	40021000 	.word	0x40021000
 8001db4:	ffff80ff 	.word	0xffff80ff
 8001db8:	ffffc7ff 	.word	0xffffc7ff
 8001dbc:	00f42400 	.word	0x00f42400
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	00001388 	.word	0x00001388
 8001dd0:	feffffff 	.word	0xfeffffff
 8001dd4:	eefefffc 	.word	0xeefefffc
 8001dd8:	fffeffff 	.word	0xfffeffff
 8001ddc:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff f92e 	bl	8001040 <HAL_GetTick>
 8001de4:	1b80      	subs	r0, r0, r6
 8001de6:	2802      	cmp	r0, #2
 8001de8:	d8d7      	bhi.n	8001d9a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dea:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001dec:	421f      	tst	r7, r3
 8001dee:	d1f7      	bne.n	8001de0 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	e6a3      	b.n	8001b3c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 8001df4:	682b      	ldr	r3, [r5, #0]
 8001df6:	4a55      	ldr	r2, [pc, #340]	@ (8001f4c <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001df8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001dfe:	f7ff f91f 	bl	8001040 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e02:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8001e04:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e06:	e004      	b.n	8001e12 <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff f91a 	bl	8001040 <HAL_GetTick>
 8001e0c:	1b80      	subs	r0, r0, r6
 8001e0e:	2802      	cmp	r0, #2
 8001e10:	d8c3      	bhi.n	8001d9a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e12:	682b      	ldr	r3, [r5, #0]
 8001e14:	423b      	tst	r3, r7
 8001e16:	d1f7      	bne.n	8001e08 <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	e68d      	b.n	8001b38 <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d100      	bne.n	8001e22 <HAL_RCC_OscConfig+0x38e>
 8001e20:	e668      	b.n	8001af4 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8001e24:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	6a21      	ldr	r1, [r4, #32]
 8001e28:	4002      	ands	r2, r0
 8001e2a:	428a      	cmp	r2, r1
 8001e2c:	d000      	beq.n	8001e30 <HAL_RCC_OscConfig+0x39c>
 8001e2e:	e661      	b.n	8001af4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e30:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e34:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e36:	428a      	cmp	r2, r1
 8001e38:	d000      	beq.n	8001e3c <HAL_RCC_OscConfig+0x3a8>
 8001e3a:	e65b      	b.n	8001af4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e3c:	21fe      	movs	r1, #254	@ 0xfe
 8001e3e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001e40:	01c9      	lsls	r1, r1, #7
 8001e42:	4001      	ands	r1, r0
 8001e44:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e46:	4291      	cmp	r1, r2
 8001e48:	d000      	beq.n	8001e4c <HAL_RCC_OscConfig+0x3b8>
 8001e4a:	e653      	b.n	8001af4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e4c:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e50:	0392      	lsls	r2, r2, #14
 8001e52:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e54:	428a      	cmp	r2, r1
 8001e56:	d000      	beq.n	8001e5a <HAL_RCC_OscConfig+0x3c6>
 8001e58:	e64c      	b.n	8001af4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e5a:	22e0      	movs	r2, #224	@ 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e5e:	0512      	lsls	r2, r2, #20
 8001e60:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e62:	428a      	cmp	r2, r1
 8001e64:	d000      	beq.n	8001e68 <HAL_RCC_OscConfig+0x3d4>
 8001e66:	e645      	b.n	8001af4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e6a:	0f40      	lsrs	r0, r0, #29
 8001e6c:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e6e:	1ac0      	subs	r0, r0, r3
 8001e70:	1e43      	subs	r3, r0, #1
 8001e72:	4198      	sbcs	r0, r3
 8001e74:	b2c0      	uxtb	r0, r0
 8001e76:	e63e      	b.n	8001af6 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e78:	2180      	movs	r1, #128	@ 0x80
 8001e7a:	4b35      	ldr	r3, [pc, #212]	@ (8001f50 <HAL_RCC_OscConfig+0x4bc>)
 8001e7c:	02c9      	lsls	r1, r1, #11
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	4301      	orrs	r1, r0
 8001e82:	6019      	str	r1, [r3, #0]
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e8a:	e71c      	b.n	8001cc6 <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e8c:	6813      	ldr	r3, [r2, #0]
 8001e8e:	055b      	lsls	r3, r3, #21
 8001e90:	d457      	bmi.n	8001f42 <HAL_RCC_OscConfig+0x4ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	6851      	ldr	r1, [r2, #4]
 8001e94:	6963      	ldr	r3, [r4, #20]
 8001e96:	482f      	ldr	r0, [pc, #188]	@ (8001f54 <HAL_RCC_OscConfig+0x4c0>)
 8001e98:	021b      	lsls	r3, r3, #8
 8001e9a:	4001      	ands	r1, r0
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ea0:	e643      	b.n	8001b2a <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8001f50 <HAL_RCC_OscConfig+0x4bc>)
 8001ea4:	492c      	ldr	r1, [pc, #176]	@ (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8001ea8:	400b      	ands	r3, r1
 8001eaa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001eac:	e68e      	b.n	8001bcc <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 8001eae:	682b      	ldr	r3, [r5, #0]
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f5c <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb2:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f8c2 	bl	8001040 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ebc:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8001ebe:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec0:	e005      	b.n	8001ece <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff f8bd 	bl	8001040 <HAL_GetTick>
 8001ec6:	1b80      	subs	r0, r0, r6
 8001ec8:	2802      	cmp	r0, #2
 8001eca:	d900      	bls.n	8001ece <HAL_RCC_OscConfig+0x43a>
 8001ecc:	e765      	b.n	8001d9a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ece:	682b      	ldr	r3, [r5, #0]
 8001ed0:	423b      	tst	r3, r7
 8001ed2:	d1f6      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001ed6:	6a23      	ldr	r3, [r4, #32]
 8001ed8:	68ea      	ldr	r2, [r5, #12]
 8001eda:	430b      	orrs	r3, r1
 8001edc:	4920      	ldr	r1, [pc, #128]	@ (8001f60 <HAL_RCC_OscConfig+0x4cc>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ede:	4e1c      	ldr	r6, [pc, #112]	@ (8001f50 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001eea:	4313      	orrs	r3, r2
 8001eec:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001ef2:	0212      	lsls	r2, r2, #8
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001ef8:	2380      	movs	r3, #128	@ 0x80
 8001efa:	682a      	ldr	r2, [r5, #0]
 8001efc:	045b      	lsls	r3, r3, #17
 8001efe:	4313      	orrs	r3, r2
 8001f00:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f02:	2380      	movs	r3, #128	@ 0x80
 8001f04:	68ea      	ldr	r2, [r5, #12]
 8001f06:	055b      	lsls	r3, r3, #21
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001f0c:	f7ff f898 	bl	8001040 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f10:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001f12:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f14:	04ad      	lsls	r5, r5, #18
 8001f16:	e005      	b.n	8001f24 <HAL_RCC_OscConfig+0x490>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff f892 	bl	8001040 <HAL_GetTick>
 8001f1c:	1b00      	subs	r0, r0, r4
 8001f1e:	2802      	cmp	r0, #2
 8001f20:	d900      	bls.n	8001f24 <HAL_RCC_OscConfig+0x490>
 8001f22:	e73a      	b.n	8001d9a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f24:	6833      	ldr	r3, [r6, #0]
 8001f26:	422b      	tst	r3, r5
 8001f28:	d0f6      	beq.n	8001f18 <HAL_RCC_OscConfig+0x484>
  return HAL_OK;
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	e5e3      	b.n	8001af6 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2e:	2104      	movs	r1, #4
 8001f30:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <HAL_RCC_OscConfig+0x4bc>)
 8001f32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f34:	430a      	orrs	r2, r1
 8001f36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f3a:	3903      	subs	r1, #3
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f40:	e70a      	b.n	8001d58 <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f42:	68e3      	ldr	r3, [r4, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1a4      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3fe>
 8001f48:	e5d4      	b.n	8001af4 <HAL_RCC_OscConfig+0x60>
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	fffffeff 	.word	0xfffffeff
 8001f50:	40021000 	.word	0x40021000
 8001f54:	ffff80ff 	.word	0xffff80ff
 8001f58:	efffffff 	.word	0xefffffff
 8001f5c:	feffffff 	.word	0xfeffffff
 8001f60:	11c1808c 	.word	0x11c1808c

08001f64 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f64:	2338      	movs	r3, #56	@ 0x38
 8001f66:	4a22      	ldr	r2, [pc, #136]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 8001f68:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f6a:	6891      	ldr	r1, [r2, #8]
 8001f6c:	420b      	tst	r3, r1
 8001f6e:	d105      	bne.n	8001f7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f70:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f72:	4820      	ldr	r0, [pc, #128]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f74:	049b      	lsls	r3, r3, #18
 8001f76:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f78:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001f7a:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f7c:	6891      	ldr	r1, [r2, #8]
 8001f7e:	4019      	ands	r1, r3
 8001f80:	2908      	cmp	r1, #8
 8001f82:	d014      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f84:	6891      	ldr	r1, [r2, #8]
 8001f86:	4019      	ands	r1, r3
 8001f88:	2910      	cmp	r1, #16
 8001f8a:	d012      	beq.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f8c:	6891      	ldr	r1, [r2, #8]
 8001f8e:	4019      	ands	r1, r3
 8001f90:	2920      	cmp	r1, #32
 8001f92:	d024      	beq.n	8001fde <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f94:	6890      	ldr	r0, [r2, #8]
 8001f96:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8001f98:	3818      	subs	r0, #24
 8001f9a:	1e43      	subs	r3, r0, #1
 8001f9c:	4198      	sbcs	r0, r3
 8001f9e:	4b16      	ldr	r3, [pc, #88]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa0:	4240      	negs	r0, r0
 8001fa2:	4018      	ands	r0, r3
 8001fa4:	23fa      	movs	r3, #250	@ 0xfa
 8001fa6:	01db      	lsls	r3, r3, #7
 8001fa8:	469c      	mov	ip, r3
 8001faa:	4460      	add	r0, ip
 8001fac:	e7e5      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8001fae:	4813      	ldr	r0, [pc, #76]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb0:	e7e3      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001fb2:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fb4:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001fb6:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fb8:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fba:	0649      	lsls	r1, r1, #25
 8001fbc:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fbe:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fc0:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fc2:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8001fc4:	079b      	lsls	r3, r3, #30
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fc8:	480a      	ldr	r0, [pc, #40]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x90>)
 8001fca:	f7fe f89b 	bl	8000104 <__udivsi3>
 8001fce:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001fd0:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001fd2:	68d9      	ldr	r1, [r3, #12]
 8001fd4:	0f49      	lsrs	r1, r1, #29
 8001fd6:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8001fd8:	f7fe f894 	bl	8000104 <__udivsi3>
  return sysclockfreq;
 8001fdc:	e7cd      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8001fde:	2080      	movs	r0, #128	@ 0x80
 8001fe0:	0200      	lsls	r0, r0, #8
 8001fe2:	e7ca      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fe4:	4805      	ldr	r0, [pc, #20]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x98>)
 8001fe6:	f7fe f88d 	bl	8000104 <__udivsi3>
 8001fea:	4360      	muls	r0, r4
        break;
 8001fec:	e7f0      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x6c>
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	00f42400 	.word	0x00f42400
 8001ff8:	ffff8300 	.word	0xffff8300
 8001ffc:	007a1200 	.word	0x007a1200

08002000 <HAL_RCC_ClockConfig>:
{
 8002000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002002:	46ce      	mov	lr, r9
 8002004:	4647      	mov	r7, r8
 8002006:	0005      	movs	r5, r0
 8002008:	000c      	movs	r4, r1
 800200a:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 800200c:	2800      	cmp	r0, #0
 800200e:	d026      	beq.n	800205e <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002010:	2207      	movs	r2, #7
 8002012:	4e57      	ldr	r6, [pc, #348]	@ (8002170 <HAL_RCC_ClockConfig+0x170>)
 8002014:	6833      	ldr	r3, [r6, #0]
 8002016:	4013      	ands	r3, r2
 8002018:	428b      	cmp	r3, r1
 800201a:	d35e      	bcc.n	80020da <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	682b      	ldr	r3, [r5, #0]
 800201e:	079a      	lsls	r2, r3, #30
 8002020:	d50e      	bpl.n	8002040 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002022:	075a      	lsls	r2, r3, #29
 8002024:	d505      	bpl.n	8002032 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002026:	22e0      	movs	r2, #224	@ 0xe0
 8002028:	4952      	ldr	r1, [pc, #328]	@ (8002174 <HAL_RCC_ClockConfig+0x174>)
 800202a:	01d2      	lsls	r2, r2, #7
 800202c:	6888      	ldr	r0, [r1, #8]
 800202e:	4302      	orrs	r2, r0
 8002030:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002032:	4950      	ldr	r1, [pc, #320]	@ (8002174 <HAL_RCC_ClockConfig+0x174>)
 8002034:	4850      	ldr	r0, [pc, #320]	@ (8002178 <HAL_RCC_ClockConfig+0x178>)
 8002036:	688a      	ldr	r2, [r1, #8]
 8002038:	4002      	ands	r2, r0
 800203a:	68a8      	ldr	r0, [r5, #8]
 800203c:	4302      	orrs	r2, r0
 800203e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002040:	07db      	lsls	r3, r3, #31
 8002042:	d52b      	bpl.n	800209c <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002044:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002046:	4a4b      	ldr	r2, [pc, #300]	@ (8002174 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002048:	2b01      	cmp	r3, #1
 800204a:	d100      	bne.n	800204e <HAL_RCC_ClockConfig+0x4e>
 800204c:	e07c      	b.n	8002148 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204e:	2b02      	cmp	r3, #2
 8002050:	d007      	beq.n	8002062 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002052:	2b00      	cmp	r3, #0
 8002054:	d000      	beq.n	8002058 <HAL_RCC_ClockConfig+0x58>
 8002056:	e07d      	b.n	8002154 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	0552      	lsls	r2, r2, #21
 800205c:	d404      	bmi.n	8002068 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800205e:	2001      	movs	r0, #1
 8002060:	e037      	b.n	80020d2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	0192      	lsls	r2, r2, #6
 8002066:	d5fa      	bpl.n	800205e <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002068:	2107      	movs	r1, #7
 800206a:	4e42      	ldr	r6, [pc, #264]	@ (8002174 <HAL_RCC_ClockConfig+0x174>)
 800206c:	68b2      	ldr	r2, [r6, #8]
 800206e:	438a      	bics	r2, r1
 8002070:	4313      	orrs	r3, r2
 8002072:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002074:	f7fe ffe4 	bl	8001040 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002078:	2338      	movs	r3, #56	@ 0x38
 800207a:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207c:	4b3f      	ldr	r3, [pc, #252]	@ (800217c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800207e:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002080:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	e004      	b.n	800208e <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002084:	f7fe ffdc 	bl	8001040 <HAL_GetTick>
 8002088:	1bc0      	subs	r0, r0, r7
 800208a:	4548      	cmp	r0, r9
 800208c:	d83b      	bhi.n	8002106 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	4643      	mov	r3, r8
 8002090:	68b2      	ldr	r2, [r6, #8]
 8002092:	401a      	ands	r2, r3
 8002094:	686b      	ldr	r3, [r5, #4]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	429a      	cmp	r2, r3
 800209a:	d1f3      	bne.n	8002084 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800209c:	2207      	movs	r2, #7
 800209e:	4e34      	ldr	r6, [pc, #208]	@ (8002170 <HAL_RCC_ClockConfig+0x170>)
 80020a0:	6833      	ldr	r3, [r6, #0]
 80020a2:	4013      	ands	r3, r2
 80020a4:	42a3      	cmp	r3, r4
 80020a6:	d838      	bhi.n	800211a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	682b      	ldr	r3, [r5, #0]
 80020aa:	075b      	lsls	r3, r3, #29
 80020ac:	d42d      	bmi.n	800210a <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020ae:	f7ff ff59 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 80020b2:	4b30      	ldr	r3, [pc, #192]	@ (8002174 <HAL_RCC_ClockConfig+0x174>)
 80020b4:	4a32      	ldr	r2, [pc, #200]	@ (8002180 <HAL_RCC_ClockConfig+0x180>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4932      	ldr	r1, [pc, #200]	@ (8002184 <HAL_RCC_ClockConfig+0x184>)
 80020ba:	051b      	lsls	r3, r3, #20
 80020bc:	0f1b      	lsrs	r3, r3, #28
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	589b      	ldr	r3, [r3, r2]
 80020c2:	221f      	movs	r2, #31
 80020c4:	4013      	ands	r3, r2
 80020c6:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 80020c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002188 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020ca:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	f7fe ff7d 	bl	8000fcc <HAL_InitTick>
}
 80020d2:	bcc0      	pop	{r6, r7}
 80020d4:	46b9      	mov	r9, r7
 80020d6:	46b0      	mov	r8, r6
 80020d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	6833      	ldr	r3, [r6, #0]
 80020dc:	4393      	bics	r3, r2
 80020de:	430b      	orrs	r3, r1
 80020e0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80020e2:	f7fe ffad 	bl	8001040 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020e6:	2307      	movs	r3, #7
 80020e8:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ea:	4b24      	ldr	r3, [pc, #144]	@ (800217c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80020ec:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ee:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020f0:	4642      	mov	r2, r8
 80020f2:	6833      	ldr	r3, [r6, #0]
 80020f4:	4013      	ands	r3, r2
 80020f6:	42a3      	cmp	r3, r4
 80020f8:	d100      	bne.n	80020fc <HAL_RCC_ClockConfig+0xfc>
 80020fa:	e78f      	b.n	800201c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7fe ffa0 	bl	8001040 <HAL_GetTick>
 8002100:	1bc0      	subs	r0, r0, r7
 8002102:	4548      	cmp	r0, r9
 8002104:	d9f4      	bls.n	80020f0 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8002106:	2003      	movs	r0, #3
 8002108:	e7e3      	b.n	80020d2 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800210a:	4a1a      	ldr	r2, [pc, #104]	@ (8002174 <HAL_RCC_ClockConfig+0x174>)
 800210c:	491f      	ldr	r1, [pc, #124]	@ (800218c <HAL_RCC_ClockConfig+0x18c>)
 800210e:	6893      	ldr	r3, [r2, #8]
 8002110:	400b      	ands	r3, r1
 8002112:	68e9      	ldr	r1, [r5, #12]
 8002114:	430b      	orrs	r3, r1
 8002116:	6093      	str	r3, [r2, #8]
 8002118:	e7c9      	b.n	80020ae <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	6833      	ldr	r3, [r6, #0]
 800211c:	4393      	bics	r3, r2
 800211e:	4323      	orrs	r3, r4
 8002120:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002122:	f7fe ff8d 	bl	8001040 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002126:	2307      	movs	r3, #7
 8002128:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212a:	4b14      	ldr	r3, [pc, #80]	@ (800217c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800212c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002130:	4642      	mov	r2, r8
 8002132:	6833      	ldr	r3, [r6, #0]
 8002134:	4013      	ands	r3, r2
 8002136:	42a3      	cmp	r3, r4
 8002138:	d0b6      	beq.n	80020a8 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213a:	f7fe ff81 	bl	8001040 <HAL_GetTick>
 800213e:	1bc0      	subs	r0, r0, r7
 8002140:	4548      	cmp	r0, r9
 8002142:	d9f5      	bls.n	8002130 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8002144:	2003      	movs	r0, #3
 8002146:	e7c4      	b.n	80020d2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	0392      	lsls	r2, r2, #14
 800214c:	d500      	bpl.n	8002150 <HAL_RCC_ClockConfig+0x150>
 800214e:	e78b      	b.n	8002068 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8002150:	2001      	movs	r0, #1
 8002152:	e7be      	b.n	80020d2 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002154:	2b03      	cmp	r3, #3
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002158:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800215a:	0792      	lsls	r2, r2, #30
 800215c:	d500      	bpl.n	8002160 <HAL_RCC_ClockConfig+0x160>
 800215e:	e783      	b.n	8002068 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8002160:	2001      	movs	r0, #1
 8002162:	e7b6      	b.n	80020d2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002164:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002166:	0792      	lsls	r2, r2, #30
 8002168:	d500      	bpl.n	800216c <HAL_RCC_ClockConfig+0x16c>
 800216a:	e77d      	b.n	8002068 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800216c:	2001      	movs	r0, #1
 800216e:	e7b0      	b.n	80020d2 <HAL_RCC_ClockConfig+0xd2>
 8002170:	40022000 	.word	0x40022000
 8002174:	40021000 	.word	0x40021000
 8002178:	fffff0ff 	.word	0xfffff0ff
 800217c:	00001388 	.word	0x00001388
 8002180:	08003564 	.word	0x08003564
 8002184:	20000000 	.word	0x20000000
 8002188:	20000008 	.word	0x20000008
 800218c:	ffff8fff 	.word	0xffff8fff

08002190 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002192:	4907      	ldr	r1, [pc, #28]	@ (80021b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002194:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002196:	4a07      	ldr	r2, [pc, #28]	@ (80021b4 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002198:	045b      	lsls	r3, r3, #17
 800219a:	0f5b      	lsrs	r3, r3, #29
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	585b      	ldr	r3, [r3, r1]
 80021a0:	211f      	movs	r1, #31
 80021a2:	6810      	ldr	r0, [r2, #0]
 80021a4:	400b      	ands	r3, r1
 80021a6:	40d8      	lsrs	r0, r3
}
 80021a8:	4770      	bx	lr
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08003544 	.word	0x08003544
 80021b4:	20000000 	.word	0x20000000

080021b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ba:	46d6      	mov	lr, sl
 80021bc:	464f      	mov	r7, r9
 80021be:	4646      	mov	r6, r8
 80021c0:	b5c0      	push	{r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021c2:	6803      	ldr	r3, [r0, #0]
{
 80021c4:	0004      	movs	r4, r0
 80021c6:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021c8:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021ca:	039a      	lsls	r2, r3, #14
 80021cc:	d543      	bpl.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x9e>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ce:	2280      	movs	r2, #128	@ 0x80
 80021d0:	4b68      	ldr	r3, [pc, #416]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021d2:	0552      	lsls	r2, r2, #21
 80021d4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80021d6:	4682      	mov	sl, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d8:	4211      	tst	r1, r2
 80021da:	d100      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x26>
 80021dc:	e095      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x152>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021de:	2780      	movs	r7, #128	@ 0x80
 80021e0:	4d65      	ldr	r5, [pc, #404]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021e2:	007f      	lsls	r7, r7, #1
 80021e4:	682b      	ldr	r3, [r5, #0]
 80021e6:	433b      	orrs	r3, r7
 80021e8:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021ea:	f7fe ff29 	bl	8001040 <HAL_GetTick>
 80021ee:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021f0:	e004      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f2:	f7fe ff25 	bl	8001040 <HAL_GetTick>
 80021f6:	1b80      	subs	r0, r0, r6
 80021f8:	2802      	cmp	r0, #2
 80021fa:	d827      	bhi.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x94>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021fc:	682b      	ldr	r3, [r5, #0]
 80021fe:	423b      	tst	r3, r7
 8002200:	d0f7      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002202:	4d5c      	ldr	r5, [pc, #368]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002204:	23c0      	movs	r3, #192	@ 0xc0
 8002206:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	0010      	movs	r0, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800220c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800220e:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002210:	421a      	tst	r2, r3
 8002212:	d100      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8002214:	e0a6      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8002216:	4288      	cmp	r0, r1
 8002218:	d100      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800221a:	e0a3      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800221c:	2080      	movs	r0, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800221e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8002220:	6dee      	ldr	r6, [r5, #92]	@ 0x5c
 8002222:	0240      	lsls	r0, r0, #9
 8002224:	4330      	orrs	r0, r6
 8002226:	65e8      	str	r0, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002228:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800222a:	4a54      	ldr	r2, [pc, #336]	@ (800237c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 800222c:	4e54      	ldr	r6, [pc, #336]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800222e:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002230:	4030      	ands	r0, r6
 8002232:	65e8      	str	r0, [r5, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002234:	65ea      	str	r2, [r5, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002236:	07db      	lsls	r3, r3, #31
 8002238:	d400      	bmi.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x84>
 800223a:	e093      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe ff00 	bl	8001040 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002240:	2302      	movs	r3, #2
 8002242:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	4b4f      	ldr	r3, [pc, #316]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
        tickstart = HAL_GetTick();
 8002246:	0006      	movs	r6, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002248:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224a:	e086      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 800224c:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800224e:	4652      	mov	r2, sl
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002250:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 8002252:	2a01      	cmp	r2, #1
 8002254:	d063      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x166>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002256:	07da      	lsls	r2, r3, #31
 8002258:	d506      	bpl.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800225a:	2503      	movs	r5, #3
 800225c:	4945      	ldr	r1, [pc, #276]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800225e:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8002260:	43aa      	bics	r2, r5
 8002262:	6865      	ldr	r5, [r4, #4]
 8002264:	432a      	orrs	r2, r5
 8002266:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002268:	06da      	lsls	r2, r3, #27
 800226a:	d506      	bpl.n	800227a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800226c:	4941      	ldr	r1, [pc, #260]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800226e:	4d46      	ldr	r5, [pc, #280]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002270:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8002272:	402a      	ands	r2, r5
 8002274:	68a5      	ldr	r5, [r4, #8]
 8002276:	432a      	orrs	r2, r5
 8002278:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800227a:	059a      	lsls	r2, r3, #22
 800227c:	d506      	bpl.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800227e:	493d      	ldr	r1, [pc, #244]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002280:	4d42      	ldr	r5, [pc, #264]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002282:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8002284:	402a      	ands	r2, r5
 8002286:	6965      	ldr	r5, [r4, #20]
 8002288:	432a      	orrs	r2, r5
 800228a:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800228c:	055a      	lsls	r2, r3, #21
 800228e:	d506      	bpl.n	800229e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002290:	4938      	ldr	r1, [pc, #224]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002292:	4d3f      	ldr	r5, [pc, #252]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002294:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8002296:	402a      	ands	r2, r5
 8002298:	69a5      	ldr	r5, [r4, #24]
 800229a:	432a      	orrs	r2, r5
 800229c:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800229e:	069a      	lsls	r2, r3, #26
 80022a0:	d506      	bpl.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022a2:	4934      	ldr	r1, [pc, #208]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022a4:	4d3b      	ldr	r5, [pc, #236]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80022a6:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80022a8:	402a      	ands	r2, r5
 80022aa:	68e5      	ldr	r5, [r4, #12]
 80022ac:	432a      	orrs	r2, r5
 80022ae:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022b0:	045a      	lsls	r2, r3, #17
 80022b2:	d50a      	bpl.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022b4:	492f      	ldr	r1, [pc, #188]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022b6:	69e5      	ldr	r5, [r4, #28]
 80022b8:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	0892      	lsrs	r2, r2, #2
 80022be:	432a      	orrs	r2, r5
 80022c0:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80022c2:	2280      	movs	r2, #128	@ 0x80
 80022c4:	05d2      	lsls	r2, r2, #23
 80022c6:	4295      	cmp	r5, r2
 80022c8:	d02f      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x172>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022ca:	029a      	lsls	r2, r3, #10
 80022cc:	d50a      	bpl.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022ce:	4929      	ldr	r1, [pc, #164]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022d0:	4e31      	ldr	r6, [pc, #196]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022d2:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80022d4:	6a25      	ldr	r5, [r4, #32]
 80022d6:	4032      	ands	r2, r6
 80022d8:	432a      	orrs	r2, r5
 80022da:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022dc:	2280      	movs	r2, #128	@ 0x80
 80022de:	03d2      	lsls	r2, r2, #15
 80022e0:	4295      	cmp	r5, r2
 80022e2:	d028      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80022e4:	051b      	lsls	r3, r3, #20
 80022e6:	d50a      	bpl.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80022e8:	4a22      	ldr	r2, [pc, #136]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022ea:	6921      	ldr	r1, [r4, #16]
 80022ec:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80022ee:	4c2b      	ldr	r4, [pc, #172]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022f0:	4023      	ands	r3, r4
 80022f2:	430b      	orrs	r3, r1
 80022f4:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80022f6:	2380      	movs	r3, #128	@ 0x80
 80022f8:	01db      	lsls	r3, r3, #7
 80022fa:	4299      	cmp	r1, r3
 80022fc:	d021      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 80022fe:	b002      	add	sp, #8
 8002300:	bce0      	pop	{r5, r6, r7}
 8002302:	46ba      	mov	sl, r7
 8002304:	46b1      	mov	r9, r6
 8002306:	46a8      	mov	r8, r5
 8002308:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800230c:	4311      	orrs	r1, r2
 800230e:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8002310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002312:	4013      	ands	r3, r2
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002318:	2301      	movs	r3, #1
 800231a:	469a      	mov	sl, r3
 800231c:	e75f      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 800231e:	4915      	ldr	r1, [pc, #84]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002320:	4d1f      	ldr	r5, [pc, #124]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002322:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8002324:	402a      	ands	r2, r5
 8002326:	63ca      	str	r2, [r1, #60]	@ 0x3c
 8002328:	e795      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800232a:	2280      	movs	r2, #128	@ 0x80
 800232c:	68cd      	ldr	r5, [r1, #12]
 800232e:	0252      	lsls	r2, r2, #9
 8002330:	432a      	orrs	r2, r5
 8002332:	60ca      	str	r2, [r1, #12]
 8002334:	e7c9      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002336:	2280      	movs	r2, #128	@ 0x80
 8002338:	68cd      	ldr	r5, [r1, #12]
 800233a:	0452      	lsls	r2, r2, #17
 800233c:	432a      	orrs	r2, r5
 800233e:	60ca      	str	r2, [r1, #12]
 8002340:	e7d0      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002342:	2380      	movs	r3, #128	@ 0x80
 8002344:	68d1      	ldr	r1, [r2, #12]
 8002346:	025b      	lsls	r3, r3, #9
 8002348:	430b      	orrs	r3, r1
 800234a:	60d3      	str	r3, [r2, #12]
  return status;
 800234c:	e7d7      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x146>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7fe fe77 	bl	8001040 <HAL_GetTick>
 8002352:	1b80      	subs	r0, r0, r6
 8002354:	4548      	cmp	r0, r9
 8002356:	d900      	bls.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002358:	e778      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800235a:	4642      	mov	r2, r8
 800235c:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800235e:	421a      	tst	r2, r3
 8002360:	d0f5      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x196>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002362:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002364:	4a03      	ldr	r2, [pc, #12]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002366:	4805      	ldr	r0, [pc, #20]	@ (800237c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002368:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 800236a:	4003      	ands	r3, r0
 800236c:	430b      	orrs	r3, r1
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800236e:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002370:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002372:	e76c      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x96>
 8002374:	40021000 	.word	0x40021000
 8002378:	40007000 	.word	0x40007000
 800237c:	fffffcff 	.word	0xfffffcff
 8002380:	fffeffff 	.word	0xfffeffff
 8002384:	00001388 	.word	0x00001388
 8002388:	fffff3ff 	.word	0xfffff3ff
 800238c:	fff3ffff 	.word	0xfff3ffff
 8002390:	ffcfffff 	.word	0xffcfffff
 8002394:	ffffcfff 	.word	0xffffcfff
 8002398:	ffbfffff 	.word	0xffbfffff
 800239c:	ffff3fff 	.word	0xffff3fff
 80023a0:	efffffff 	.word	0xefffffff

080023a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a6:	46de      	mov	lr, fp
 80023a8:	4657      	mov	r7, sl
 80023aa:	464e      	mov	r6, r9
 80023ac:	4645      	mov	r5, r8
 80023ae:	0004      	movs	r4, r0
 80023b0:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d100      	bne.n	80023b8 <HAL_SPI_Init+0x14>
 80023b6:	e093      	b.n	80024e0 <HAL_SPI_Init+0x13c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023b8:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 80023ba:	2d00      	cmp	r5, #0
 80023bc:	d069      	beq.n	8002492 <HAL_SPI_Init+0xee>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023be:	2300      	movs	r3, #0
 80023c0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023c2:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023c8:	335d      	adds	r3, #93	@ 0x5d
 80023ca:	5ce3      	ldrb	r3, [r4, r3]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d06c      	beq.n	80024ac <HAL_SPI_Init+0x108>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023d2:	235d      	movs	r3, #93	@ 0x5d
 80023d4:	2202      	movs	r2, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023d6:	2140      	movs	r1, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80023d8:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 80023da:	6822      	ldr	r2, [r4, #0]
 80023dc:	6813      	ldr	r3, [r2, #0]
 80023de:	438b      	bics	r3, r1
 80023e0:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023e2:	23e0      	movs	r3, #224	@ 0xe0
 80023e4:	68e1      	ldr	r1, [r4, #12]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4299      	cmp	r1, r3
 80023ea:	d866      	bhi.n	80024ba <HAL_SPI_Init+0x116>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023ec:	d000      	beq.n	80023f0 <HAL_SPI_Init+0x4c>
 80023ee:	e070      	b.n	80024d2 <HAL_SPI_Init+0x12e>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023f0:	2380      	movs	r3, #128	@ 0x80
 80023f2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80023f4:	019b      	lsls	r3, r3, #6
 80023f6:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023fc:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023fe:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002400:	2682      	movs	r6, #130	@ 0x82
 8002402:	2784      	movs	r7, #132	@ 0x84
 8002404:	6863      	ldr	r3, [r4, #4]
 8002406:	0076      	lsls	r6, r6, #1
 8002408:	4033      	ands	r3, r6
 800240a:	68a6      	ldr	r6, [r4, #8]
 800240c:	023f      	lsls	r7, r7, #8
 800240e:	403e      	ands	r6, r7
 8002410:	2702      	movs	r7, #2
 8002412:	4333      	orrs	r3, r6
 8002414:	6926      	ldr	r6, [r4, #16]
 8002416:	69a0      	ldr	r0, [r4, #24]
 8002418:	403e      	ands	r6, r7
 800241a:	4333      	orrs	r3, r6
 800241c:	2601      	movs	r6, #1
 800241e:	6967      	ldr	r7, [r4, #20]
 8002420:	46b2      	mov	sl, r6
 8002422:	4037      	ands	r7, r6
 8002424:	433b      	orrs	r3, r7
 8002426:	2780      	movs	r7, #128	@ 0x80
 8002428:	00bf      	lsls	r7, r7, #2
 800242a:	4007      	ands	r7, r0
 800242c:	433b      	orrs	r3, r7
 800242e:	69e7      	ldr	r7, [r4, #28]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002430:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002432:	46b8      	mov	r8, r7
 8002434:	2738      	movs	r7, #56	@ 0x38
 8002436:	46b9      	mov	r9, r7
 8002438:	4647      	mov	r7, r8
 800243a:	464e      	mov	r6, r9
 800243c:	4037      	ands	r7, r6
 800243e:	6a26      	ldr	r6, [r4, #32]
 8002440:	433b      	orrs	r3, r7
 8002442:	46b0      	mov	r8, r6
 8002444:	2680      	movs	r6, #128	@ 0x80
 8002446:	4647      	mov	r7, r8
 8002448:	4037      	ands	r7, r6
 800244a:	4666      	mov	r6, ip
 800244c:	433b      	orrs	r3, r7
 800244e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002450:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002452:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002454:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002456:	4033      	ands	r3, r6
 8002458:	26f0      	movs	r6, #240	@ 0xf0
 800245a:	0136      	lsls	r6, r6, #4
 800245c:	4031      	ands	r1, r6
 800245e:	4319      	orrs	r1, r3
 8002460:	2304      	movs	r3, #4
 8002462:	4003      	ands	r3, r0
 8002464:	4319      	orrs	r1, r3
 8002466:	2310      	movs	r3, #16
 8002468:	402b      	ands	r3, r5
 800246a:	4319      	orrs	r1, r3
 800246c:	465b      	mov	r3, fp
 800246e:	4319      	orrs	r1, r3
 8002470:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002472:	69d3      	ldr	r3, [r2, #28]
 8002474:	491d      	ldr	r1, [pc, #116]	@ (80024ec <HAL_SPI_Init+0x148>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 8002476:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002478:	400b      	ands	r3, r1
 800247a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800247c:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800247e:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002480:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002482:	335d      	adds	r3, #93	@ 0x5d
 8002484:	54e2      	strb	r2, [r4, r3]
}
 8002486:	bcf0      	pop	{r4, r5, r6, r7}
 8002488:	46bb      	mov	fp, r7
 800248a:	46b2      	mov	sl, r6
 800248c:	46a9      	mov	r9, r5
 800248e:	46a0      	mov	r8, r4
 8002490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002492:	2382      	movs	r3, #130	@ 0x82
 8002494:	6842      	ldr	r2, [r0, #4]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	429a      	cmp	r2, r3
 800249a:	d093      	beq.n	80023c4 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800249c:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800249e:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a0:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80024a2:	335d      	adds	r3, #93	@ 0x5d
 80024a4:	5ce3      	ldrb	r3, [r4, r3]
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d192      	bne.n	80023d2 <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 80024ac:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80024ae:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80024b0:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 80024b2:	f7fe fabb 	bl	8000a2c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80024b6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80024b8:	e78b      	b.n	80023d2 <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024ba:	23f0      	movs	r3, #240	@ 0xf0
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	4299      	cmp	r1, r3
 80024c0:	d110      	bne.n	80024e4 <HAL_SPI_Init+0x140>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80024c6:	019b      	lsls	r3, r3, #6
 80024c8:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024ca:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024cc:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024ce:	469b      	mov	fp, r3
 80024d0:	e796      	b.n	8002400 <HAL_SPI_Init+0x5c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80024d2:	2380      	movs	r3, #128	@ 0x80
 80024d4:	015b      	lsls	r3, r3, #5
 80024d6:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	469c      	mov	ip, r3
 80024dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80024de:	e78f      	b.n	8002400 <HAL_SPI_Init+0x5c>
    return HAL_ERROR;
 80024e0:	2001      	movs	r0, #1
 80024e2:	e7d0      	b.n	8002486 <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024e4:	2300      	movs	r3, #0
 80024e6:	469b      	mov	fp, r3
 80024e8:	e7f6      	b.n	80024d8 <HAL_SPI_Init+0x134>
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	fffff7ff 	.word	0xfffff7ff

080024f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f4:	d06a      	beq.n	80025cc <HAL_TIM_PWM_Init+0xdc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f6:	233d      	movs	r3, #61	@ 0x3d
 80024f8:	5cc3      	ldrb	r3, [r0, r3]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d057      	beq.n	80025b0 <HAL_TIM_PWM_Init+0xc0>
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	233d      	movs	r3, #61	@ 0x3d
 8002502:	2202      	movs	r2, #2
 8002504:	54e2      	strb	r2, [r4, r3]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002506:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002508:	4e37      	ldr	r6, [pc, #220]	@ (80025e8 <HAL_TIM_PWM_Init+0xf8>)
  tmpcr1 = TIMx->CR1;
 800250a:	681a      	ldr	r2, [r3, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800250c:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800250e:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002510:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002512:	42b3      	cmp	r3, r6
 8002514:	d016      	beq.n	8002544 <HAL_TIM_PWM_Init+0x54>
 8002516:	2680      	movs	r6, #128	@ 0x80
 8002518:	05f6      	lsls	r6, r6, #23
 800251a:	42b3      	cmp	r3, r6
 800251c:	d012      	beq.n	8002544 <HAL_TIM_PWM_Init+0x54>
 800251e:	4e33      	ldr	r6, [pc, #204]	@ (80025ec <HAL_TIM_PWM_Init+0xfc>)
 8002520:	42b3      	cmp	r3, r6
 8002522:	d04a      	beq.n	80025ba <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002524:	4e32      	ldr	r6, [pc, #200]	@ (80025f0 <HAL_TIM_PWM_Init+0x100>)
 8002526:	42b3      	cmp	r3, r6
 8002528:	d04b      	beq.n	80025c2 <HAL_TIM_PWM_Init+0xd2>
 800252a:	4e32      	ldr	r6, [pc, #200]	@ (80025f4 <HAL_TIM_PWM_Init+0x104>)
 800252c:	42b3      	cmp	r3, r6
 800252e:	d04f      	beq.n	80025d0 <HAL_TIM_PWM_Init+0xe0>
 8002530:	4e31      	ldr	r6, [pc, #196]	@ (80025f8 <HAL_TIM_PWM_Init+0x108>)
 8002532:	42b3      	cmp	r3, r6
 8002534:	d04c      	beq.n	80025d0 <HAL_TIM_PWM_Init+0xe0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002536:	2680      	movs	r6, #128	@ 0x80
 8002538:	43b2      	bics	r2, r6
 800253a:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800253c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800253e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002540:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002542:	e012      	b.n	800256a <HAL_TIM_PWM_Init+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002544:	2670      	movs	r6, #112	@ 0x70
 8002546:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8002548:	68a6      	ldr	r6, [r4, #8]
 800254a:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800254c:	4e2b      	ldr	r6, [pc, #172]	@ (80025fc <HAL_TIM_PWM_Init+0x10c>)
 800254e:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002550:	6926      	ldr	r6, [r4, #16]
 8002552:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002554:	2680      	movs	r6, #128	@ 0x80
 8002556:	43b2      	bics	r2, r6
 8002558:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800255a:	601a      	str	r2, [r3, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800255c:	4a22      	ldr	r2, [pc, #136]	@ (80025e8 <HAL_TIM_PWM_Init+0xf8>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 800255e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002560:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002562:	4293      	cmp	r3, r2
 8002564:	d101      	bne.n	800256a <HAL_TIM_PWM_Init+0x7a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002566:	6962      	ldr	r2, [r4, #20]
 8002568:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800256a:	2201      	movs	r2, #1
 800256c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800256e:	6919      	ldr	r1, [r3, #16]
 8002570:	420a      	tst	r2, r1
 8002572:	d002      	beq.n	800257a <HAL_TIM_PWM_Init+0x8a>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002574:	6919      	ldr	r1, [r3, #16]
 8002576:	4391      	bics	r1, r2
 8002578:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257a:	2301      	movs	r3, #1
 800257c:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 800257e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002580:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002582:	3a0a      	subs	r2, #10
 8002584:	54a3      	strb	r3, [r4, r2]
 8002586:	3201      	adds	r2, #1
 8002588:	54a3      	strb	r3, [r4, r2]
 800258a:	3201      	adds	r2, #1
 800258c:	54a3      	strb	r3, [r4, r2]
 800258e:	3201      	adds	r2, #1
 8002590:	54a3      	strb	r3, [r4, r2]
 8002592:	3201      	adds	r2, #1
 8002594:	54a3      	strb	r3, [r4, r2]
 8002596:	3201      	adds	r2, #1
 8002598:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800259a:	3201      	adds	r2, #1
 800259c:	54a3      	strb	r3, [r4, r2]
 800259e:	3201      	adds	r2, #1
 80025a0:	54a3      	strb	r3, [r4, r2]
 80025a2:	3201      	adds	r2, #1
 80025a4:	54a3      	strb	r3, [r4, r2]
 80025a6:	3201      	adds	r2, #1
 80025a8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80025aa:	3a0a      	subs	r2, #10
 80025ac:	54a3      	strb	r3, [r4, r2]
}
 80025ae:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80025b0:	333c      	adds	r3, #60	@ 0x3c
 80025b2:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80025b4:	f7fe fad0 	bl	8000b58 <HAL_TIM_PWM_MspInit>
 80025b8:	e7a2      	b.n	8002500 <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ba:	2670      	movs	r6, #112	@ 0x70
 80025bc:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80025be:	68a6      	ldr	r6, [r4, #8]
 80025c0:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80025c2:	4e0e      	ldr	r6, [pc, #56]	@ (80025fc <HAL_TIM_PWM_Init+0x10c>)
 80025c4:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025c6:	6926      	ldr	r6, [r4, #16]
 80025c8:	4332      	orrs	r2, r6
 80025ca:	e7b4      	b.n	8002536 <HAL_TIM_PWM_Init+0x46>
    return HAL_ERROR;
 80025cc:	2001      	movs	r0, #1
 80025ce:	e7ee      	b.n	80025ae <HAL_TIM_PWM_Init+0xbe>
    tmpcr1 &= ~TIM_CR1_CKD;
 80025d0:	4e0a      	ldr	r6, [pc, #40]	@ (80025fc <HAL_TIM_PWM_Init+0x10c>)
 80025d2:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025d4:	6926      	ldr	r6, [r4, #16]
 80025d6:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025d8:	2680      	movs	r6, #128	@ 0x80
 80025da:	43b2      	bics	r2, r6
 80025dc:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80025de:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025e0:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80025e2:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025e4:	e7bf      	b.n	8002566 <HAL_TIM_PWM_Init+0x76>
 80025e6:	46c0      	nop			@ (mov r8, r8)
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40002000 	.word	0x40002000
 80025f4:	40014400 	.word	0x40014400
 80025f8:	40014800 	.word	0x40014800
 80025fc:	fffffcff 	.word	0xfffffcff

08002600 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8002600:	2910      	cmp	r1, #16
 8002602:	d803      	bhi.n	800260c <HAL_TIM_PWM_Start+0xc>
 8002604:	4a2c      	ldr	r2, [pc, #176]	@ (80026b8 <HAL_TIM_PWM_Start+0xb8>)
 8002606:	008b      	lsls	r3, r1, #2
 8002608:	58d3      	ldr	r3, [r2, r3]
 800260a:	469f      	mov	pc, r3
 800260c:	2343      	movs	r3, #67	@ 0x43
 800260e:	5cc2      	ldrb	r2, [r0, r3]
 8002610:	2a01      	cmp	r2, #1
 8002612:	d12e      	bne.n	8002672 <HAL_TIM_PWM_Start+0x72>
 8002614:	2202      	movs	r2, #2
 8002616:	54c2      	strb	r2, [r0, r3]
 8002618:	221f      	movs	r2, #31
 800261a:	4011      	ands	r1, r2
 800261c:	3a1e      	subs	r2, #30
 800261e:	408a      	lsls	r2, r1
 8002620:	6803      	ldr	r3, [r0, #0]
 8002622:	6a19      	ldr	r1, [r3, #32]
 8002624:	4391      	bics	r1, r2
 8002626:	6219      	str	r1, [r3, #32]
 8002628:	6a19      	ldr	r1, [r3, #32]
 800262a:	430a      	orrs	r2, r1
 800262c:	621a      	str	r2, [r3, #32]
 800262e:	4a23      	ldr	r2, [pc, #140]	@ (80026bc <HAL_TIM_PWM_Start+0xbc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d03a      	beq.n	80026aa <HAL_TIM_PWM_Start+0xaa>
 8002634:	4a22      	ldr	r2, [pc, #136]	@ (80026c0 <HAL_TIM_PWM_Start+0xc0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d031      	beq.n	800269e <HAL_TIM_PWM_Start+0x9e>
 800263a:	4a22      	ldr	r2, [pc, #136]	@ (80026c4 <HAL_TIM_PWM_Start+0xc4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d02e      	beq.n	800269e <HAL_TIM_PWM_Start+0x9e>
 8002640:	2280      	movs	r2, #128	@ 0x80
 8002642:	05d2      	lsls	r2, r2, #23
 8002644:	4293      	cmp	r3, r2
 8002646:	d002      	beq.n	800264e <HAL_TIM_PWM_Start+0x4e>
 8002648:	4a1f      	ldr	r2, [pc, #124]	@ (80026c8 <HAL_TIM_PWM_Start+0xc8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d107      	bne.n	800265e <HAL_TIM_PWM_Start+0x5e>
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	491e      	ldr	r1, [pc, #120]	@ (80026cc <HAL_TIM_PWM_Start+0xcc>)
 8002652:	400a      	ands	r2, r1
 8002654:	2a06      	cmp	r2, #6
 8002656:	d006      	beq.n	8002666 <HAL_TIM_PWM_Start+0x66>
 8002658:	3907      	subs	r1, #7
 800265a:	428a      	cmp	r2, r1
 800265c:	d003      	beq.n	8002666 <HAL_TIM_PWM_Start+0x66>
 800265e:	2101      	movs	r1, #1
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	2000      	movs	r0, #0
 8002668:	4770      	bx	lr
 800266a:	233e      	movs	r3, #62	@ 0x3e
 800266c:	5cc2      	ldrb	r2, [r0, r3]
 800266e:	2a01      	cmp	r2, #1
 8002670:	d0d0      	beq.n	8002614 <HAL_TIM_PWM_Start+0x14>
 8002672:	2001      	movs	r0, #1
 8002674:	e7f8      	b.n	8002668 <HAL_TIM_PWM_Start+0x68>
 8002676:	233f      	movs	r3, #63	@ 0x3f
 8002678:	5cc2      	ldrb	r2, [r0, r3]
 800267a:	2a01      	cmp	r2, #1
 800267c:	d0ca      	beq.n	8002614 <HAL_TIM_PWM_Start+0x14>
 800267e:	e7f8      	b.n	8002672 <HAL_TIM_PWM_Start+0x72>
 8002680:	2340      	movs	r3, #64	@ 0x40
 8002682:	5cc2      	ldrb	r2, [r0, r3]
 8002684:	2a01      	cmp	r2, #1
 8002686:	d0c5      	beq.n	8002614 <HAL_TIM_PWM_Start+0x14>
 8002688:	e7f3      	b.n	8002672 <HAL_TIM_PWM_Start+0x72>
 800268a:	2341      	movs	r3, #65	@ 0x41
 800268c:	5cc2      	ldrb	r2, [r0, r3]
 800268e:	2a01      	cmp	r2, #1
 8002690:	d0c0      	beq.n	8002614 <HAL_TIM_PWM_Start+0x14>
 8002692:	e7ee      	b.n	8002672 <HAL_TIM_PWM_Start+0x72>
 8002694:	2342      	movs	r3, #66	@ 0x42
 8002696:	5cc2      	ldrb	r2, [r0, r3]
 8002698:	2a01      	cmp	r2, #1
 800269a:	d0bb      	beq.n	8002614 <HAL_TIM_PWM_Start+0x14>
 800269c:	e7e9      	b.n	8002672 <HAL_TIM_PWM_Start+0x72>
 800269e:	2280      	movs	r2, #128	@ 0x80
 80026a0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80026a2:	0212      	lsls	r2, r2, #8
 80026a4:	430a      	orrs	r2, r1
 80026a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80026a8:	e7d9      	b.n	800265e <HAL_TIM_PWM_Start+0x5e>
 80026aa:	2280      	movs	r2, #128	@ 0x80
 80026ac:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80026ae:	0212      	lsls	r2, r2, #8
 80026b0:	430a      	orrs	r2, r1
 80026b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80026b4:	e7cb      	b.n	800264e <HAL_TIM_PWM_Start+0x4e>
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	080035a4 	.word	0x080035a4
 80026bc:	40012c00 	.word	0x40012c00
 80026c0:	40014400 	.word	0x40014400
 80026c4:	40014800 	.word	0x40014800
 80026c8:	40000400 	.word	0x40000400
 80026cc:	00010007 	.word	0x00010007

080026d0 <HAL_TIM_PWM_ConfigChannel>:
{
 80026d0:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80026d2:	203c      	movs	r0, #60	@ 0x3c
{
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80026d6:	5c1c      	ldrb	r4, [r3, r0]
 80026d8:	2c01      	cmp	r4, #1
 80026da:	d100      	bne.n	80026de <HAL_TIM_PWM_ConfigChannel+0xe>
 80026dc:	e170      	b.n	80029c0 <HAL_TIM_PWM_ConfigChannel+0x2f0>
 80026de:	2401      	movs	r4, #1
 80026e0:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 80026e2:	2a14      	cmp	r2, #20
 80026e4:	d803      	bhi.n	80026ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026e6:	48b7      	ldr	r0, [pc, #732]	@ (80029c4 <HAL_TIM_PWM_ConfigChannel+0x2f4>)
 80026e8:	0092      	lsls	r2, r2, #2
 80026ea:	5882      	ldr	r2, [r0, r2]
 80026ec:	4697      	mov	pc, r2
 80026ee:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80026f0:	223c      	movs	r2, #60	@ 0x3c
 80026f2:	2100      	movs	r1, #0
 80026f4:	5499      	strb	r1, [r3, r2]
}
 80026f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80026f8:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80026fa:	4db3      	ldr	r5, [pc, #716]	@ (80029c8 <HAL_TIM_PWM_ConfigChannel+0x2f8>)
  tmpccer = TIMx->CCER;
 80026fc:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80026fe:	6a10      	ldr	r0, [r2, #32]
 8002700:	4028      	ands	r0, r5
 8002702:	6210      	str	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002704:	4db1      	ldr	r5, [pc, #708]	@ (80029cc <HAL_TIM_PWM_ConfigChannel+0x2fc>)
  tmpcr2 =  TIMx->CR2;
 8002706:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8002708:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800270a:	4028      	ands	r0, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800270c:	680d      	ldr	r5, [r1, #0]
 800270e:	022d      	lsls	r5, r5, #8
 8002710:	4305      	orrs	r5, r0

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002712:	48af      	ldr	r0, [pc, #700]	@ (80029d0 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8002714:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002716:	6888      	ldr	r0, [r1, #8]
 8002718:	0500      	lsls	r0, r0, #20
 800271a:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800271c:	4cad      	ldr	r4, [pc, #692]	@ (80029d4 <HAL_TIM_PWM_ConfigChannel+0x304>)
 800271e:	42a2      	cmp	r2, r4
 8002720:	d100      	bne.n	8002724 <HAL_TIM_PWM_ConfigChannel+0x54>
 8002722:	e113      	b.n	800294c <HAL_TIM_PWM_ConfigChannel+0x27c>
 8002724:	4cac      	ldr	r4, [pc, #688]	@ (80029d8 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8002726:	42a2      	cmp	r2, r4
 8002728:	d100      	bne.n	800272c <HAL_TIM_PWM_ConfigChannel+0x5c>
 800272a:	e10f      	b.n	800294c <HAL_TIM_PWM_ConfigChannel+0x27c>
 800272c:	4cab      	ldr	r4, [pc, #684]	@ (80029dc <HAL_TIM_PWM_ConfigChannel+0x30c>)
 800272e:	42a2      	cmp	r2, r4
 8002730:	d100      	bne.n	8002734 <HAL_TIM_PWM_ConfigChannel+0x64>
 8002732:	e10b      	b.n	800294c <HAL_TIM_PWM_ConfigChannel+0x27c>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002734:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002736:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8002738:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800273a:	65d4      	str	r4, [r2, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800273c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800273e:	2080      	movs	r0, #128	@ 0x80
 8002740:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 8002742:	0100      	lsls	r0, r0, #4
 8002744:	4320      	orrs	r0, r4
 8002746:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002748:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 800274a:	4ca5      	ldr	r4, [pc, #660]	@ (80029e0 <HAL_TIM_PWM_ConfigChannel+0x310>)
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800274c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800274e:	4020      	ands	r0, r4
 8002750:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002752:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8002754:	0209      	lsls	r1, r1, #8
 8002756:	4301      	orrs	r1, r0
 8002758:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800275a:	2000      	movs	r0, #0
 800275c:	e7c8      	b.n	80026f0 <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800275e:	2501      	movs	r5, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002760:	681a      	ldr	r2, [r3, #0]
  tmpccer = TIMx->CCER;
 8002762:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002764:	6a14      	ldr	r4, [r2, #32]
 8002766:	43ac      	bics	r4, r5
 8002768:	6214      	str	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800276a:	4d9e      	ldr	r5, [pc, #632]	@ (80029e4 <HAL_TIM_PWM_ConfigChannel+0x314>)
  tmpcr2 =  TIMx->CR2;
 800276c:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800276e:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002770:	402c      	ands	r4, r5
  tmpccmrx |= OC_Config->OCMode;
 8002772:	680d      	ldr	r5, [r1, #0]
 8002774:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC1P;
 8002776:	2502      	movs	r5, #2
 8002778:	43a8      	bics	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 800277a:	688d      	ldr	r5, [r1, #8]
 800277c:	4328      	orrs	r0, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800277e:	4d95      	ldr	r5, [pc, #596]	@ (80029d4 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8002780:	42aa      	cmp	r2, r5
 8002782:	d100      	bne.n	8002786 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8002784:	e10f      	b.n	80029a6 <HAL_TIM_PWM_ConfigChannel+0x2d6>
 8002786:	4d94      	ldr	r5, [pc, #592]	@ (80029d8 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8002788:	42aa      	cmp	r2, r5
 800278a:	d100      	bne.n	800278e <HAL_TIM_PWM_ConfigChannel+0xbe>
 800278c:	e10b      	b.n	80029a6 <HAL_TIM_PWM_ConfigChannel+0x2d6>
 800278e:	4d93      	ldr	r5, [pc, #588]	@ (80029dc <HAL_TIM_PWM_ConfigChannel+0x30c>)
 8002790:	42aa      	cmp	r2, r5
 8002792:	d100      	bne.n	8002796 <HAL_TIM_PWM_ConfigChannel+0xc6>
 8002794:	e107      	b.n	80029a6 <HAL_TIM_PWM_ConfigChannel+0x2d6>
  TIMx->CR2 = tmpcr2;
 8002796:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002798:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800279a:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800279c:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 800279e:	6354      	str	r4, [r2, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027a0:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 80027a2:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027a4:	6990      	ldr	r0, [r2, #24]
 80027a6:	4320      	orrs	r0, r4
 80027a8:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027aa:	6990      	ldr	r0, [r2, #24]
 80027ac:	3c04      	subs	r4, #4
 80027ae:	43a0      	bics	r0, r4
 80027b0:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027b2:	6990      	ldr	r0, [r2, #24]
 80027b4:	4301      	orrs	r1, r0
 80027b6:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80027b8:	2000      	movs	r0, #0
 80027ba:	e799      	b.n	80026f0 <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027bc:	2510      	movs	r5, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027be:	681a      	ldr	r2, [r3, #0]
  tmpccer = TIMx->CCER;
 80027c0:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027c2:	6a14      	ldr	r4, [r2, #32]
 80027c4:	43ac      	bics	r4, r5
 80027c6:	6214      	str	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027c8:	4d87      	ldr	r5, [pc, #540]	@ (80029e8 <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpcr2 =  TIMx->CR2;
 80027ca:	6857      	ldr	r7, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80027cc:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027ce:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027d0:	680d      	ldr	r5, [r1, #0]
 80027d2:	022d      	lsls	r5, r5, #8
 80027d4:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 80027d6:	2420      	movs	r4, #32
 80027d8:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027da:	688c      	ldr	r4, [r1, #8]
 80027dc:	0124      	lsls	r4, r4, #4
 80027de:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027e0:	487c      	ldr	r0, [pc, #496]	@ (80029d4 <HAL_TIM_PWM_ConfigChannel+0x304>)
 80027e2:	4282      	cmp	r2, r0
 80027e4:	d100      	bne.n	80027e8 <HAL_TIM_PWM_ConfigChannel+0x118>
 80027e6:	e0cf      	b.n	8002988 <HAL_TIM_PWM_ConfigChannel+0x2b8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e8:	487b      	ldr	r0, [pc, #492]	@ (80029d8 <HAL_TIM_PWM_ConfigChannel+0x308>)
 80027ea:	4282      	cmp	r2, r0
 80027ec:	d100      	bne.n	80027f0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80027ee:	e0d2      	b.n	8002996 <HAL_TIM_PWM_ConfigChannel+0x2c6>
 80027f0:	487a      	ldr	r0, [pc, #488]	@ (80029dc <HAL_TIM_PWM_ConfigChannel+0x30c>)
 80027f2:	4282      	cmp	r2, r0
 80027f4:	d100      	bne.n	80027f8 <HAL_TIM_PWM_ConfigChannel+0x128>
 80027f6:	e0ce      	b.n	8002996 <HAL_TIM_PWM_ConfigChannel+0x2c6>
  TIMx->CCR2 = OC_Config->Pulse;
 80027f8:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80027fa:	6057      	str	r7, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80027fc:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80027fe:	6390      	str	r0, [r2, #56]	@ 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002800:	2080      	movs	r0, #128	@ 0x80
  TIMx->CCER = tmpccer;
 8002802:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002804:	6994      	ldr	r4, [r2, #24]
 8002806:	0100      	lsls	r0, r0, #4
 8002808:	4320      	orrs	r0, r4
 800280a:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800280c:	6990      	ldr	r0, [r2, #24]
 800280e:	4c74      	ldr	r4, [pc, #464]	@ (80029e0 <HAL_TIM_PWM_ConfigChannel+0x310>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002810:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002812:	4020      	ands	r0, r4
 8002814:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002816:	6990      	ldr	r0, [r2, #24]
 8002818:	0209      	lsls	r1, r1, #8
 800281a:	4301      	orrs	r1, r0
 800281c:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800281e:	2000      	movs	r0, #0
 8002820:	e766      	b.n	80026f0 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002822:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002824:	4d71      	ldr	r5, [pc, #452]	@ (80029ec <HAL_TIM_PWM_ConfigChannel+0x31c>)
  tmpccer = TIMx->CCER;
 8002826:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002828:	6a14      	ldr	r4, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 800282a:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800282c:	402c      	ands	r4, r5
 800282e:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8002830:	6854      	ldr	r4, [r2, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002832:	4d6c      	ldr	r5, [pc, #432]	@ (80029e4 <HAL_TIM_PWM_ConfigChannel+0x314>)
  tmpcr2 =  TIMx->CR2;
 8002834:	46a4      	mov	ip, r4
  tmpccmrx = TIMx->CCMR2;
 8002836:	69d4      	ldr	r4, [r2, #28]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002838:	688e      	ldr	r6, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800283a:	402c      	ands	r4, r5
  tmpccmrx |= OC_Config->OCMode;
 800283c:	4327      	orrs	r7, r4
  tmpccer &= ~TIM_CCER_CC3P;
 800283e:	4c6c      	ldr	r4, [pc, #432]	@ (80029f0 <HAL_TIM_PWM_ConfigChannel+0x320>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002840:	0236      	lsls	r6, r6, #8
  tmpccer &= ~TIM_CCER_CC3P;
 8002842:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002844:	4306      	orrs	r6, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002846:	4863      	ldr	r0, [pc, #396]	@ (80029d4 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8002848:	4282      	cmp	r2, r0
 800284a:	d100      	bne.n	800284e <HAL_TIM_PWM_ConfigChannel+0x17e>
 800284c:	e08a      	b.n	8002964 <HAL_TIM_PWM_ConfigChannel+0x294>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800284e:	4862      	ldr	r0, [pc, #392]	@ (80029d8 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8002850:	4282      	cmp	r2, r0
 8002852:	d100      	bne.n	8002856 <HAL_TIM_PWM_ConfigChannel+0x186>
 8002854:	e08d      	b.n	8002972 <HAL_TIM_PWM_ConfigChannel+0x2a2>
 8002856:	4861      	ldr	r0, [pc, #388]	@ (80029dc <HAL_TIM_PWM_ConfigChannel+0x30c>)
 8002858:	4282      	cmp	r2, r0
 800285a:	d100      	bne.n	800285e <HAL_TIM_PWM_ConfigChannel+0x18e>
 800285c:	e089      	b.n	8002972 <HAL_TIM_PWM_ConfigChannel+0x2a2>
  TIMx->CR2 = tmpcr2;
 800285e:	4660      	mov	r0, ip
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002860:	2408      	movs	r4, #8
  TIMx->CR2 = tmpcr2;
 8002862:	6050      	str	r0, [r2, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8002864:	6848      	ldr	r0, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002866:	61d7      	str	r7, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002868:	63d0      	str	r0, [r2, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800286a:	6216      	str	r6, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800286c:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800286e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002870:	4320      	orrs	r0, r4
 8002872:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002874:	69d0      	ldr	r0, [r2, #28]
 8002876:	3c04      	subs	r4, #4
 8002878:	43a0      	bics	r0, r4
 800287a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800287c:	69d0      	ldr	r0, [r2, #28]
 800287e:	4301      	orrs	r1, r0
 8002880:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002882:	2000      	movs	r0, #0
 8002884:	e734      	b.n	80026f0 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002886:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002888:	4d5a      	ldr	r5, [pc, #360]	@ (80029f4 <HAL_TIM_PWM_ConfigChannel+0x324>)
  tmpccer = TIMx->CCER;
 800288a:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800288c:	6a10      	ldr	r0, [r2, #32]
 800288e:	4028      	ands	r0, r5
 8002890:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002892:	4d55      	ldr	r5, [pc, #340]	@ (80029e8 <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpcr2 =  TIMx->CR2;
 8002894:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8002896:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002898:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800289a:	680d      	ldr	r5, [r1, #0]
 800289c:	022d      	lsls	r5, r5, #8
 800289e:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC4P;
 80028a0:	4855      	ldr	r0, [pc, #340]	@ (80029f8 <HAL_TIM_PWM_ConfigChannel+0x328>)
 80028a2:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028a4:	6888      	ldr	r0, [r1, #8]
 80028a6:	0300      	lsls	r0, r0, #12
 80028a8:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028aa:	4c4a      	ldr	r4, [pc, #296]	@ (80029d4 <HAL_TIM_PWM_ConfigChannel+0x304>)
 80028ac:	42a2      	cmp	r2, r4
 80028ae:	d053      	beq.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x288>
 80028b0:	4c49      	ldr	r4, [pc, #292]	@ (80029d8 <HAL_TIM_PWM_ConfigChannel+0x308>)
 80028b2:	42a2      	cmp	r2, r4
 80028b4:	d050      	beq.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x288>
 80028b6:	4c49      	ldr	r4, [pc, #292]	@ (80029dc <HAL_TIM_PWM_ConfigChannel+0x30c>)
 80028b8:	42a2      	cmp	r2, r4
 80028ba:	d04d      	beq.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x288>
  TIMx->CCR4 = OC_Config->Pulse;
 80028bc:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80028be:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80028c0:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80028c2:	6414      	str	r4, [r2, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 80028c4:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028c6:	2080      	movs	r0, #128	@ 0x80
 80028c8:	69d4      	ldr	r4, [r2, #28]
 80028ca:	0100      	lsls	r0, r0, #4
 80028cc:	4320      	orrs	r0, r4
 80028ce:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028d0:	69d0      	ldr	r0, [r2, #28]
 80028d2:	4c43      	ldr	r4, [pc, #268]	@ (80029e0 <HAL_TIM_PWM_ConfigChannel+0x310>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028d4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028d6:	4020      	ands	r0, r4
 80028d8:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028da:	69d0      	ldr	r0, [r2, #28]
 80028dc:	0209      	lsls	r1, r1, #8
 80028de:	4301      	orrs	r1, r0
 80028e0:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80028e2:	2000      	movs	r0, #0
 80028e4:	e704      	b.n	80026f0 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80028e6:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80028e8:	4d44      	ldr	r5, [pc, #272]	@ (80029fc <HAL_TIM_PWM_ConfigChannel+0x32c>)
  tmpccer = TIMx->CCER;
 80028ea:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80028ec:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80028ee:	4e44      	ldr	r6, [pc, #272]	@ (8002a00 <HAL_TIM_PWM_ConfigChannel+0x330>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80028f0:	4028      	ands	r0, r5
 80028f2:	6210      	str	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80028f4:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 80028f6:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80028f8:	4030      	ands	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 80028fa:	680e      	ldr	r6, [r1, #0]
 80028fc:	4306      	orrs	r6, r0
  tmpccer &= ~TIM_CCER_CC5P;
 80028fe:	4841      	ldr	r0, [pc, #260]	@ (8002a04 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8002900:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002902:	6888      	ldr	r0, [r1, #8]
 8002904:	0400      	lsls	r0, r0, #16
 8002906:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002908:	4c32      	ldr	r4, [pc, #200]	@ (80029d4 <HAL_TIM_PWM_ConfigChannel+0x304>)
 800290a:	42a2      	cmp	r2, r4
 800290c:	d018      	beq.n	8002940 <HAL_TIM_PWM_ConfigChannel+0x270>
 800290e:	4c32      	ldr	r4, [pc, #200]	@ (80029d8 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8002910:	42a2      	cmp	r2, r4
 8002912:	d015      	beq.n	8002940 <HAL_TIM_PWM_ConfigChannel+0x270>
 8002914:	4c31      	ldr	r4, [pc, #196]	@ (80029dc <HAL_TIM_PWM_ConfigChannel+0x30c>)
 8002916:	42a2      	cmp	r2, r4
 8002918:	d012      	beq.n	8002940 <HAL_TIM_PWM_ConfigChannel+0x270>
  TIMx->CCR5 = OC_Config->Pulse;
 800291a:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800291c:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 800291e:	6556      	str	r6, [r2, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8002920:	6594      	str	r4, [r2, #88]	@ 0x58
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002922:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8002924:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002926:	6d50      	ldr	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002928:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800292a:	4320      	orrs	r0, r4
 800292c:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800292e:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8002930:	3c04      	subs	r4, #4
 8002932:	43a0      	bics	r0, r4
 8002934:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002936:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8002938:	4301      	orrs	r1, r0
 800293a:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800293c:	2000      	movs	r0, #0
 800293e:	e6d7      	b.n	80026f0 <HAL_TIM_PWM_ConfigChannel+0x20>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002940:	4c2e      	ldr	r4, [pc, #184]	@ (80029fc <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8002942:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002944:	694d      	ldr	r5, [r1, #20]
 8002946:	022d      	lsls	r5, r5, #8
 8002948:	4325      	orrs	r5, r4
 800294a:	e7e6      	b.n	800291a <HAL_TIM_PWM_ConfigChannel+0x24a>
    tmpcr2 &= ~TIM_CR2_OIS6;
 800294c:	4c2e      	ldr	r4, [pc, #184]	@ (8002a08 <HAL_TIM_PWM_ConfigChannel+0x338>)
 800294e:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002950:	694e      	ldr	r6, [r1, #20]
 8002952:	02b6      	lsls	r6, r6, #10
 8002954:	4326      	orrs	r6, r4
 8002956:	e6ed      	b.n	8002734 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002958:	4c2c      	ldr	r4, [pc, #176]	@ (8002a0c <HAL_TIM_PWM_ConfigChannel+0x33c>)
 800295a:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800295c:	694e      	ldr	r6, [r1, #20]
 800295e:	01b6      	lsls	r6, r6, #6
 8002960:	4326      	orrs	r6, r4
 8002962:	e7ab      	b.n	80028bc <HAL_TIM_PWM_ConfigChannel+0x1ec>
    tmpccer &= ~TIM_CCER_CC3NP;
 8002964:	482a      	ldr	r0, [pc, #168]	@ (8002a10 <HAL_TIM_PWM_ConfigChannel+0x340>)
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002966:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002968:	4030      	ands	r0, r6
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800296a:	0224      	lsls	r4, r4, #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800296c:	4e1c      	ldr	r6, [pc, #112]	@ (80029e0 <HAL_TIM_PWM_ConfigChannel+0x310>)
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800296e:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8002970:	4026      	ands	r6, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002972:	4660      	mov	r0, ip
 8002974:	4d27      	ldr	r5, [pc, #156]	@ (8002a14 <HAL_TIM_PWM_ConfigChannel+0x344>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002976:	698c      	ldr	r4, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002978:	4028      	ands	r0, r5
 800297a:	0005      	movs	r5, r0
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800297c:	6948      	ldr	r0, [r1, #20]
 800297e:	4320      	orrs	r0, r4
 8002980:	0100      	lsls	r0, r0, #4
 8002982:	4328      	orrs	r0, r5
 8002984:	4684      	mov	ip, r0
 8002986:	e76a      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x18e>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002988:	2080      	movs	r0, #128	@ 0x80
 800298a:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800298c:	68c8      	ldr	r0, [r1, #12]
 800298e:	0100      	lsls	r0, r0, #4
 8002990:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8002992:	2040      	movs	r0, #64	@ 0x40
 8002994:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002996:	4e20      	ldr	r6, [pc, #128]	@ (8002a18 <HAL_TIM_PWM_ConfigChannel+0x348>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002998:	6948      	ldr	r0, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800299a:	403e      	ands	r6, r7
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800299c:	698f      	ldr	r7, [r1, #24]
 800299e:	4307      	orrs	r7, r0
 80029a0:	00bf      	lsls	r7, r7, #2
 80029a2:	4337      	orrs	r7, r6
 80029a4:	e728      	b.n	80027f8 <HAL_TIM_PWM_ConfigChannel+0x128>
    tmpccer &= ~TIM_CCER_CC1NP;
 80029a6:	2508      	movs	r5, #8
 80029a8:	43a8      	bics	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 80029aa:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80029ac:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80029ae:	4328      	orrs	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80029b0:	2504      	movs	r5, #4
 80029b2:	43a8      	bics	r0, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029b4:	4d19      	ldr	r5, [pc, #100]	@ (8002a1c <HAL_TIM_PWM_ConfigChannel+0x34c>)
 80029b6:	4035      	ands	r5, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80029b8:	694e      	ldr	r6, [r1, #20]
 80029ba:	433e      	orrs	r6, r7
 80029bc:	432e      	orrs	r6, r5
 80029be:	e6ea      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0xc6>
  __HAL_LOCK(htim);
 80029c0:	2002      	movs	r0, #2
 80029c2:	e698      	b.n	80026f6 <HAL_TIM_PWM_ConfigChannel+0x26>
 80029c4:	080035e8 	.word	0x080035e8
 80029c8:	ffefffff 	.word	0xffefffff
 80029cc:	feff8fff 	.word	0xfeff8fff
 80029d0:	ffdfffff 	.word	0xffdfffff
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800
 80029e0:	fffffbff 	.word	0xfffffbff
 80029e4:	fffeff8c 	.word	0xfffeff8c
 80029e8:	feff8cff 	.word	0xfeff8cff
 80029ec:	fffffeff 	.word	0xfffffeff
 80029f0:	fffffdff 	.word	0xfffffdff
 80029f4:	ffffefff 	.word	0xffffefff
 80029f8:	ffffdfff 	.word	0xffffdfff
 80029fc:	fffeffff 	.word	0xfffeffff
 8002a00:	fffeff8f 	.word	0xfffeff8f
 8002a04:	fffdffff 	.word	0xfffdffff
 8002a08:	fffbffff 	.word	0xfffbffff
 8002a0c:	ffffbfff 	.word	0xffffbfff
 8002a10:	fffff7ff 	.word	0xfffff7ff
 8002a14:	ffffcfff 	.word	0xffffcfff
 8002a18:	fffff3ff 	.word	0xfffff3ff
 8002a1c:	fffffcff 	.word	0xfffffcff

08002a20 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8002a20:	4770      	bx	lr
 8002a22:	46c0      	nop			@ (mov r8, r8)

08002a24 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8002a24:	4770      	bx	lr
 8002a26:	46c0      	nop			@ (mov r8, r8)

08002a28 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8002a28:	4770      	bx	lr
 8002a2a:	46c0      	nop			@ (mov r8, r8)

08002a2c <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8002a2c:	4770      	bx	lr
 8002a2e:	46c0      	nop			@ (mov r8, r8)

08002a30 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8002a30:	4770      	bx	lr
 8002a32:	46c0      	nop			@ (mov r8, r8)

08002a34 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a34:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 8002a36:	6803      	ldr	r3, [r0, #0]
{
 8002a38:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8002a3a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a3c:	691d      	ldr	r5, [r3, #16]
{
 8002a3e:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a40:	422a      	tst	r2, r5
 8002a42:	d001      	beq.n	8002a48 <HAL_TIM_IRQHandler+0x14>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a44:	4232      	tst	r2, r6
 8002a46:	d15c      	bne.n	8002b02 <HAL_TIM_IRQHandler+0xce>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a48:	2304      	movs	r3, #4
 8002a4a:	422b      	tst	r3, r5
 8002a4c:	d001      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x1e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a4e:	4233      	tst	r3, r6
 8002a50:	d143      	bne.n	8002ada <HAL_TIM_IRQHandler+0xa6>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a52:	2308      	movs	r3, #8
 8002a54:	422b      	tst	r3, r5
 8002a56:	d001      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x28>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a58:	4233      	tst	r3, r6
 8002a5a:	d12c      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x82>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a5c:	2310      	movs	r3, #16
 8002a5e:	422b      	tst	r3, r5
 8002a60:	d001      	beq.n	8002a66 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a62:	4233      	tst	r3, r6
 8002a64:	d116      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x60>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a66:	2301      	movs	r3, #1
 8002a68:	422b      	tst	r3, r5
 8002a6a:	d001      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a6c:	4233      	tst	r3, r6
 8002a6e:	d167      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x10c>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a70:	2382      	movs	r3, #130	@ 0x82
 8002a72:	019b      	lsls	r3, r3, #6
 8002a74:	421d      	tst	r5, r3
 8002a76:	d050      	beq.n	8002b1a <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a78:	0633      	lsls	r3, r6, #24
 8002a7a:	d469      	bmi.n	8002b50 <HAL_TIM_IRQHandler+0x11c>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a7c:	2340      	movs	r3, #64	@ 0x40
 8002a7e:	422b      	tst	r3, r5
 8002a80:	d002      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x54>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a82:	4233      	tst	r3, r6
 8002a84:	d000      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x54>
 8002a86:	e06d      	b.n	8002b64 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a88:	2320      	movs	r3, #32
 8002a8a:	422b      	tst	r3, r5
 8002a8c:	d001      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a8e:	4233      	tst	r3, r6
 8002a90:	d14e      	bne.n	8002b30 <HAL_TIM_IRQHandler+0xfc>
}
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a94:	2211      	movs	r2, #17
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	4252      	negs	r2, r2
 8002a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a9c:	3219      	adds	r2, #25
 8002a9e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	23c0      	movs	r3, #192	@ 0xc0
 8002aa4:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aa8:	421a      	tst	r2, r3
 8002aaa:	d06f      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x158>
        HAL_TIM_IC_CaptureCallback(htim);
 8002aac:	f7ff ffbc 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	7723      	strb	r3, [r4, #28]
 8002ab4:	e7d7      	b.n	8002a66 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ab6:	2209      	movs	r2, #9
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	4252      	negs	r2, r2
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002abe:	320d      	adds	r2, #13
 8002ac0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac4:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac6:	079b      	lsls	r3, r3, #30
 8002ac8:	d15d      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	f7ff ffab 	bl	8002a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ace:	0020      	movs	r0, r4
 8002ad0:	f7ff ffac 	bl	8002a2c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	7723      	strb	r3, [r4, #28]
 8002ad8:	e7c0      	b.n	8002a5c <HAL_TIM_IRQHandler+0x28>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ada:	2205      	movs	r2, #5
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	4252      	negs	r2, r2
 8002ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae2:	3207      	adds	r2, #7
 8002ae4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae6:	699a      	ldr	r2, [r3, #24]
 8002ae8:	23c0      	movs	r3, #192	@ 0xc0
 8002aea:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002aec:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aee:	421a      	tst	r2, r3
 8002af0:	d146      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af2:	f7ff ff97 	bl	8002a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af6:	0020      	movs	r0, r4
 8002af8:	f7ff ff98 	bl	8002a2c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afc:	2300      	movs	r3, #0
 8002afe:	7723      	strb	r3, [r4, #28]
 8002b00:	e7a7      	b.n	8002a52 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b02:	3a05      	subs	r2, #5
 8002b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b06:	3204      	adds	r2, #4
 8002b08:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	079b      	lsls	r3, r3, #30
 8002b0e:	d031      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_IC_CaptureCallback(htim);
 8002b10:	f7ff ff8a 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b14:	2300      	movs	r3, #0
 8002b16:	7723      	strb	r3, [r4, #28]
 8002b18:	e796      	b.n	8002a48 <HAL_TIM_IRQHandler+0x14>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b1a:	05eb      	lsls	r3, r5, #23
 8002b1c:	d5ae      	bpl.n	8002a7c <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b1e:	0633      	lsls	r3, r6, #24
 8002b20:	d5ac      	bpl.n	8002a7c <HAL_TIM_IRQHandler+0x48>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	4a1c      	ldr	r2, [pc, #112]	@ (8002b98 <HAL_TIM_IRQHandler+0x164>)
      HAL_TIMEx_Break2Callback(htim);
 8002b26:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002b2a:	f000 f90d 	bl	8002d48 <HAL_TIMEx_Break2Callback>
 8002b2e:	e7a5      	b.n	8002a7c <HAL_TIM_IRQHandler+0x48>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b30:	2221      	movs	r2, #33	@ 0x21
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8002b36:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b38:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002b3a:	f000 f901 	bl	8002d40 <HAL_TIMEx_CommutCallback>
}
 8002b3e:	e7a8      	b.n	8002a92 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b40:	2202      	movs	r2, #2
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b46:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b48:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b4a:	f7ff ff69 	bl	8002a20 <HAL_TIM_PeriodElapsedCallback>
 8002b4e:	e78f      	b.n	8002a70 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	4a12      	ldr	r2, [pc, #72]	@ (8002b9c <HAL_TIM_IRQHandler+0x168>)
      HAL_TIMEx_BreakCallback(htim);
 8002b54:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002b56:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b58:	f000 f8f4 	bl	8002d44 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b5c:	05eb      	lsls	r3, r5, #23
 8002b5e:	d400      	bmi.n	8002b62 <HAL_TIM_IRQHandler+0x12e>
 8002b60:	e78c      	b.n	8002a7c <HAL_TIM_IRQHandler+0x48>
 8002b62:	e7de      	b.n	8002b22 <HAL_TIM_IRQHandler+0xee>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b64:	2241      	movs	r2, #65	@ 0x41
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 8002b6a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b6c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b6e:	f7ff ff5f 	bl	8002a30 <HAL_TIM_TriggerCallback>
 8002b72:	e789      	b.n	8002a88 <HAL_TIM_IRQHandler+0x54>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b74:	f7ff ff56 	bl	8002a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b78:	0020      	movs	r0, r4
 8002b7a:	f7ff ff57 	bl	8002a2c <HAL_TIM_PWM_PulseFinishedCallback>
 8002b7e:	e7c9      	b.n	8002b14 <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b80:	f7ff ff52 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 8002b84:	e7ba      	b.n	8002afc <HAL_TIM_IRQHandler+0xc8>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	f7ff ff4f 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 8002b8a:	e7a3      	b.n	8002ad4 <HAL_TIM_IRQHandler+0xa0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8c:	f7ff ff4a 	bl	8002a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	0020      	movs	r0, r4
 8002b92:	f7ff ff4b 	bl	8002a2c <HAL_TIM_PWM_PulseFinishedCallback>
 8002b96:	e78b      	b.n	8002ab0 <HAL_TIM_IRQHandler+0x7c>
 8002b98:	fffffeff 	.word	0xfffffeff
 8002b9c:	ffffdf7f 	.word	0xffffdf7f

08002ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ba0:	233c      	movs	r3, #60	@ 0x3c
{
 8002ba2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002ba4:	5cc3      	ldrb	r3, [r0, r3]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d02a      	beq.n	8002c00 <HAL_TIMEx_MasterConfigSynchronization+0x60>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002baa:	233d      	movs	r3, #61	@ 0x3d
 8002bac:	2202      	movs	r2, #2
 8002bae:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bb0:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bb2:	4e14      	ldr	r6, [pc, #80]	@ (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 8002bb4:	685a      	ldr	r2, [r3, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb6:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002bb8:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bba:	42b3      	cmp	r3, r6
 8002bbc:	d017      	beq.n	8002bee <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bbe:	2670      	movs	r6, #112	@ 0x70
 8002bc0:	43b2      	bics	r2, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bc2:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc6:	2280      	movs	r2, #128	@ 0x80
 8002bc8:	05d2      	lsls	r2, r2, #23
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d002      	beq.n	8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8002bce:	4a0e      	ldr	r2, [pc, #56]	@ (8002c08 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d104      	bne.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bd4:	2280      	movs	r2, #128	@ 0x80
 8002bd6:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bd8:	688a      	ldr	r2, [r1, #8]
 8002bda:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bdc:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bde:	233d      	movs	r3, #61	@ 0x3d
 8002be0:	2201      	movs	r2, #1
 8002be2:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8002be4:	2200      	movs	r2, #0
 8002be6:	3b01      	subs	r3, #1
 8002be8:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002bea:	2000      	movs	r0, #0
}
 8002bec:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002bee:	4e07      	ldr	r6, [pc, #28]	@ (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002bf0:	4032      	ands	r2, r6
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002bf2:	684e      	ldr	r6, [r1, #4]
 8002bf4:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bf6:	2670      	movs	r6, #112	@ 0x70
 8002bf8:	43b2      	bics	r2, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bfa:	4315      	orrs	r5, r2
  htim->Instance->CR2 = tmpcr2;
 8002bfc:	605d      	str	r5, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfe:	e7e9      	b.n	8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  __HAL_LOCK(htim);
 8002c00:	2002      	movs	r0, #2
 8002c02:	e7f3      	b.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	ff0fffff 	.word	0xff0fffff

08002c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c10:	233c      	movs	r3, #60	@ 0x3c
{
 8002c12:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002c14:	5cc3      	ldrb	r3, [r0, r3]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d03d      	beq.n	8002c96 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c1a:	4a20      	ldr	r2, [pc, #128]	@ (8002c9c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8002c1c:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002c1e:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c20:	4013      	ands	r3, r2
 8002c22:	688a      	ldr	r2, [r1, #8]
 8002c24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c26:	4a1e      	ldr	r2, [pc, #120]	@ (8002ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	684a      	ldr	r2, [r1, #4]
 8002c2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	680a      	ldr	r2, [r1, #0]
 8002c34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c36:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	690a      	ldr	r2, [r1, #16]
 8002c3c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002cac <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	694a      	ldr	r2, [r1, #20]
 8002c44:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c46:	4a1a      	ldr	r2, [pc, #104]	@ (8002cb0 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8002c4c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002c4e:	4a19      	ldr	r2, [pc, #100]	@ (8002cb4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	698a      	ldr	r2, [r1, #24]
 8002c54:	0412      	lsls	r2, r2, #16
 8002c56:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002c58:	4a17      	ldr	r2, [pc, #92]	@ (8002cb8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	69ca      	ldr	r2, [r1, #28]
 8002c5e:	4313      	orrs	r3, r2
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002c60:	4a16      	ldr	r2, [pc, #88]	@ (8002cbc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002c62:	4294      	cmp	r4, r2
 8002c64:	d005      	beq.n	8002c72 <HAL_TIMEx_ConfigBreakDeadTime+0x62>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c66:	6463      	str	r3, [r4, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	233c      	movs	r3, #60	@ 0x3c
 8002c6c:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002c6e:	2000      	movs	r0, #0
}
 8002c70:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002c72:	4a13      	ldr	r2, [pc, #76]	@ (8002cc0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8002c78:	0512      	lsls	r2, r2, #20
 8002c7a:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002c7e:	401a      	ands	r2, r3
 8002c80:	6a0b      	ldr	r3, [r1, #32]
 8002c82:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002c84:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002c86:	401a      	ands	r2, r3
 8002c88:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8002c8a:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ccc <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8002c8e:	401a      	ands	r2, r3
 8002c90:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8002c92:	4313      	orrs	r3, r2
 8002c94:	e7e7      	b.n	8002c66 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  __HAL_LOCK(htim);
 8002c96:	2002      	movs	r0, #2
 8002c98:	e7ea      	b.n	8002c70 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	fffffcff 	.word	0xfffffcff
 8002ca0:	fffffbff 	.word	0xfffffbff
 8002ca4:	fffff7ff 	.word	0xfffff7ff
 8002ca8:	ffffefff 	.word	0xffffefff
 8002cac:	ffffdfff 	.word	0xffffdfff
 8002cb0:	ffffbfff 	.word	0xffffbfff
 8002cb4:	fff0ffff 	.word	0xfff0ffff
 8002cb8:	efffffff 	.word	0xefffffff
 8002cbc:	40012c00 	.word	0x40012c00
 8002cc0:	ff0fffff 	.word	0xff0fffff
 8002cc4:	feffffff 	.word	0xfeffffff
 8002cc8:	fdffffff 	.word	0xfdffffff
 8002ccc:	dfffffff 	.word	0xdfffffff

08002cd0 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8002cd0:	0003      	movs	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cd2:	203c      	movs	r0, #60	@ 0x3c
 8002cd4:	5c18      	ldrb	r0, [r3, r0]
{
 8002cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002cd8:	2801      	cmp	r0, #1
 8002cda:	d02e      	beq.n	8002d3a <HAL_TIMEx_ConfigBreakInput+0x6a>

  switch (sBreakInputConfig->Source)
 8002cdc:	6810      	ldr	r0, [r2, #0]
 8002cde:	2801      	cmp	r0, #1
 8002ce0:	d019      	beq.n	8002d16 <HAL_TIMEx_ConfigBreakInput+0x46>
    default:
    {
      bkin_enable_mask = 0U;
      bkin_polarity_mask = 0U;
      bkin_enable_bitpos = 0U;
      bkin_polarity_bitpos = 0U;
 8002ce2:	2600      	movs	r6, #0
      bkin_polarity_mask = 0U;
 8002ce4:	2400      	movs	r4, #0
      bkin_enable_mask = 0U;
 8002ce6:	2000      	movs	r0, #0
      break;
    }
  }

  switch (BreakInput)
 8002ce8:	2901      	cmp	r1, #1
 8002cea:	d019      	beq.n	8002d20 <HAL_TIMEx_ConfigBreakInput+0x50>
 8002cec:	2902      	cmp	r1, #2
 8002cee:	d001      	beq.n	8002cf4 <HAL_TIMEx_ConfigBreakInput+0x24>
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	e00c      	b.n	8002d0e <HAL_TIMEx_ConfigBreakInput+0x3e>
      break;
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8002cf4:	6855      	ldr	r5, [r2, #4]
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8002cf6:	6892      	ldr	r2, [r2, #8]
      tmporx = htim->Instance->AF2;
 8002cf8:	6819      	ldr	r1, [r3, #0]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8002cfa:	40b2      	lsls	r2, r6
      tmporx = htim->Instance->AF2;
 8002cfc:	6e4f      	ldr	r7, [r1, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8002cfe:	407d      	eors	r5, r7
 8002d00:	4028      	ands	r0, r5
 8002d02:	4078      	eors	r0, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8002d04:	4042      	eors	r2, r0
 8002d06:	4014      	ands	r4, r2
 8002d08:	4044      	eors	r4, r0

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8002d0a:	664c      	str	r4, [r1, #100]	@ 0x64
  HAL_StatusTypeDef status = HAL_OK;
 8002d0c:	2000      	movs	r0, #0
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8002d0e:	223c      	movs	r2, #60	@ 0x3c
 8002d10:	2100      	movs	r1, #0
 8002d12:	5499      	strb	r1, [r3, r2]

  return status;
}
 8002d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8002d16:	2480      	movs	r4, #128	@ 0x80
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8002d18:	2609      	movs	r6, #9
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8002d1a:	00a4      	lsls	r4, r4, #2
  switch (BreakInput)
 8002d1c:	2901      	cmp	r1, #1
 8002d1e:	d1e5      	bne.n	8002cec <HAL_TIMEx_ConfigBreakInput+0x1c>
      tmporx = htim->Instance->AF1;
 8002d20:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8002d22:	6892      	ldr	r2, [r2, #8]
      tmporx = htim->Instance->AF1;
 8002d24:	681d      	ldr	r5, [r3, #0]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8002d26:	40b2      	lsls	r2, r6
      tmporx = htim->Instance->AF1;
 8002d28:	6e2f      	ldr	r7, [r5, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8002d2a:	4079      	eors	r1, r7
 8002d2c:	4001      	ands	r1, r0
 8002d2e:	4079      	eors	r1, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8002d30:	404a      	eors	r2, r1
 8002d32:	4022      	ands	r2, r4
 8002d34:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 8002d36:	662a      	str	r2, [r5, #96]	@ 0x60
      break;
 8002d38:	e7e8      	b.n	8002d0c <HAL_TIMEx_ConfigBreakInput+0x3c>
  __HAL_LOCK(htim);
 8002d3a:	2002      	movs	r0, #2
 8002d3c:	e7ea      	b.n	8002d14 <HAL_TIMEx_ConfigBreakInput+0x44>
 8002d3e:	46c0      	nop			@ (mov r8, r8)

08002d40 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8002d40:	4770      	bx	lr
 8002d42:	46c0      	nop			@ (mov r8, r8)

08002d44 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8002d44:	4770      	bx	lr
 8002d46:	46c0      	nop			@ (mov r8, r8)

08002d48 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8002d48:	4770      	bx	lr
 8002d4a:	46c0      	nop			@ (mov r8, r8)

08002d4c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d4c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8002d4e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d50:	071a      	lsls	r2, r3, #28
 8002d52:	d506      	bpl.n	8002d62 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d54:	6801      	ldr	r1, [r0, #0]
 8002d56:	4c28      	ldr	r4, [pc, #160]	@ (8002df8 <UART_AdvFeatureConfig+0xac>)
 8002d58:	684a      	ldr	r2, [r1, #4]
 8002d5a:	4022      	ands	r2, r4
 8002d5c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8002d5e:	4322      	orrs	r2, r4
 8002d60:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d62:	07da      	lsls	r2, r3, #31
 8002d64:	d506      	bpl.n	8002d74 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d66:	6801      	ldr	r1, [r0, #0]
 8002d68:	4c24      	ldr	r4, [pc, #144]	@ (8002dfc <UART_AdvFeatureConfig+0xb0>)
 8002d6a:	684a      	ldr	r2, [r1, #4]
 8002d6c:	4022      	ands	r2, r4
 8002d6e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8002d70:	4322      	orrs	r2, r4
 8002d72:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d74:	079a      	lsls	r2, r3, #30
 8002d76:	d506      	bpl.n	8002d86 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d78:	6801      	ldr	r1, [r0, #0]
 8002d7a:	4c21      	ldr	r4, [pc, #132]	@ (8002e00 <UART_AdvFeatureConfig+0xb4>)
 8002d7c:	684a      	ldr	r2, [r1, #4]
 8002d7e:	4022      	ands	r2, r4
 8002d80:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8002d82:	4322      	orrs	r2, r4
 8002d84:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d86:	075a      	lsls	r2, r3, #29
 8002d88:	d506      	bpl.n	8002d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d8a:	6801      	ldr	r1, [r0, #0]
 8002d8c:	4c1d      	ldr	r4, [pc, #116]	@ (8002e04 <UART_AdvFeatureConfig+0xb8>)
 8002d8e:	684a      	ldr	r2, [r1, #4]
 8002d90:	4022      	ands	r2, r4
 8002d92:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002d94:	4322      	orrs	r2, r4
 8002d96:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d98:	06da      	lsls	r2, r3, #27
 8002d9a:	d506      	bpl.n	8002daa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d9c:	6801      	ldr	r1, [r0, #0]
 8002d9e:	4c1a      	ldr	r4, [pc, #104]	@ (8002e08 <UART_AdvFeatureConfig+0xbc>)
 8002da0:	688a      	ldr	r2, [r1, #8]
 8002da2:	4022      	ands	r2, r4
 8002da4:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002da6:	4322      	orrs	r2, r4
 8002da8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002daa:	069a      	lsls	r2, r3, #26
 8002dac:	d506      	bpl.n	8002dbc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dae:	6801      	ldr	r1, [r0, #0]
 8002db0:	4c16      	ldr	r4, [pc, #88]	@ (8002e0c <UART_AdvFeatureConfig+0xc0>)
 8002db2:	688a      	ldr	r2, [r1, #8]
 8002db4:	4022      	ands	r2, r4
 8002db6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002db8:	4322      	orrs	r2, r4
 8002dba:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dbc:	065a      	lsls	r2, r3, #25
 8002dbe:	d50a      	bpl.n	8002dd6 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dc0:	6801      	ldr	r1, [r0, #0]
 8002dc2:	4d13      	ldr	r5, [pc, #76]	@ (8002e10 <UART_AdvFeatureConfig+0xc4>)
 8002dc4:	684a      	ldr	r2, [r1, #4]
 8002dc6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002dc8:	402a      	ands	r2, r5
 8002dca:	4322      	orrs	r2, r4
 8002dcc:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dce:	2280      	movs	r2, #128	@ 0x80
 8002dd0:	0352      	lsls	r2, r2, #13
 8002dd2:	4294      	cmp	r4, r2
 8002dd4:	d009      	beq.n	8002dea <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dd6:	061b      	lsls	r3, r3, #24
 8002dd8:	d506      	bpl.n	8002de8 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dda:	6802      	ldr	r2, [r0, #0]
 8002ddc:	490d      	ldr	r1, [pc, #52]	@ (8002e14 <UART_AdvFeatureConfig+0xc8>)
 8002dde:	6853      	ldr	r3, [r2, #4]
 8002de0:	400b      	ands	r3, r1
 8002de2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6053      	str	r3, [r2, #4]
  }
}
 8002de8:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dea:	684a      	ldr	r2, [r1, #4]
 8002dec:	4c0a      	ldr	r4, [pc, #40]	@ (8002e18 <UART_AdvFeatureConfig+0xcc>)
 8002dee:	4022      	ands	r2, r4
 8002df0:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8002df2:	4322      	orrs	r2, r4
 8002df4:	604a      	str	r2, [r1, #4]
 8002df6:	e7ee      	b.n	8002dd6 <UART_AdvFeatureConfig+0x8a>
 8002df8:	ffff7fff 	.word	0xffff7fff
 8002dfc:	fffdffff 	.word	0xfffdffff
 8002e00:	fffeffff 	.word	0xfffeffff
 8002e04:	fffbffff 	.word	0xfffbffff
 8002e08:	ffffefff 	.word	0xffffefff
 8002e0c:	ffffdfff 	.word	0xffffdfff
 8002e10:	ffefffff 	.word	0xffefffff
 8002e14:	fff7ffff 	.word	0xfff7ffff
 8002e18:	ff9fffff 	.word	0xff9fffff

08002e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1e:	2390      	movs	r3, #144	@ 0x90
 8002e20:	2200      	movs	r2, #0
{
 8002e22:	46c6      	mov	lr, r8
 8002e24:	0004      	movs	r4, r0
 8002e26:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e28:	50c2      	str	r2, [r0, r3]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e2a:	f7fe f909 	bl	8001040 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e2e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002e30:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	0712      	lsls	r2, r2, #28
 8002e36:	d411      	bmi.n	8002e5c <UART_CheckIdleState+0x40>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	0752      	lsls	r2, r2, #29
 8002e3c:	d43e      	bmi.n	8002ebc <UART_CheckIdleState+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e3e:	2320      	movs	r3, #32
 8002e40:	2288      	movs	r2, #136	@ 0x88
 8002e42:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002e44:	3204      	adds	r2, #4
 8002e46:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e48:	2300      	movs	r3, #0
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8002e4a:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e4e:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8002e50:	2384      	movs	r3, #132	@ 0x84
 8002e52:	2200      	movs	r2, #0
 8002e54:	54e2      	strb	r2, [r4, r3]
}
 8002e56:	bc80      	pop	{r7}
 8002e58:	46b8      	mov	r8, r7
 8002e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5c:	69da      	ldr	r2, [r3, #28]
 8002e5e:	0292      	lsls	r2, r2, #10
 8002e60:	d4ea      	bmi.n	8002e38 <UART_CheckIdleState+0x1c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e62:	2680      	movs	r6, #128	@ 0x80
        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e64:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e66:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e68:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6a:	04b6      	lsls	r6, r6, #18
 8002e6c:	e010      	b.n	8002e90 <UART_CheckIdleState+0x74>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4217      	tst	r7, r2
 8002e74:	d009      	beq.n	8002e8a <UART_CheckIdleState+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e76:	4641      	mov	r1, r8
 8002e78:	69da      	ldr	r2, [r3, #28]
 8002e7a:	4211      	tst	r1, r2
 8002e7c:	d159      	bne.n	8002f32 <UART_CheckIdleState+0x116>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e7e:	2280      	movs	r2, #128	@ 0x80
 8002e80:	69d9      	ldr	r1, [r3, #28]
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	4211      	tst	r1, r2
 8002e86:	d000      	beq.n	8002e8a <UART_CheckIdleState+0x6e>
 8002e88:	e085      	b.n	8002f96 <UART_CheckIdleState+0x17a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	0292      	lsls	r2, r2, #10
 8002e8e:	d4d3      	bmi.n	8002e38 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e90:	f7fe f8d6 	bl	8001040 <HAL_GetTick>
 8002e94:	1b40      	subs	r0, r0, r5
 8002e96:	42b0      	cmp	r0, r6
 8002e98:	d3e9      	bcc.n	8002e6e <UART_CheckIdleState+0x52>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e9a:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002ea4:	2080      	movs	r0, #128	@ 0x80
 8002ea6:	6822      	ldr	r2, [r4, #0]
 8002ea8:	6813      	ldr	r3, [r2, #0]
 8002eaa:	4383      	bics	r3, r0
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002eb2:	2388      	movs	r3, #136	@ 0x88
 8002eb4:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8002eb6:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8002eb8:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8002eba:	e7c9      	b.n	8002e50 <UART_CheckIdleState+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	025b      	lsls	r3, r3, #9
 8002ec0:	d4bd      	bmi.n	8002e3e <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec2:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ec4:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ec6:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ec8:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eca:	04b6      	lsls	r6, r6, #18
 8002ecc:	e011      	b.n	8002ef2 <UART_CheckIdleState+0xd6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	4217      	tst	r7, r2
 8002ed4:	d00a      	beq.n	8002eec <UART_CheckIdleState+0xd0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ed6:	4641      	mov	r1, r8
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	4211      	tst	r1, r2
 8002edc:	d000      	beq.n	8002ee0 <UART_CheckIdleState+0xc4>
 8002ede:	e08b      	b.n	8002ff8 <UART_CheckIdleState+0x1dc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ee0:	2280      	movs	r2, #128	@ 0x80
 8002ee2:	69d9      	ldr	r1, [r3, #28]
 8002ee4:	0112      	lsls	r2, r2, #4
 8002ee6:	4211      	tst	r1, r2
 8002ee8:	d000      	beq.n	8002eec <UART_CheckIdleState+0xd0>
 8002eea:	e0b7      	b.n	800305c <UART_CheckIdleState+0x240>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	025b      	lsls	r3, r3, #9
 8002ef0:	d4a5      	bmi.n	8002e3e <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef2:	f7fe f8a5 	bl	8001040 <HAL_GetTick>
 8002ef6:	1b40      	subs	r0, r0, r5
 8002ef8:	42b0      	cmp	r0, r6
 8002efa:	d3e8      	bcc.n	8002ece <UART_CheckIdleState+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002efc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f00:	2201      	movs	r2, #1
 8002f02:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f06:	6821      	ldr	r1, [r4, #0]
 8002f08:	4d6d      	ldr	r5, [pc, #436]	@ (80030c0 <UART_CheckIdleState+0x2a4>)
 8002f0a:	680b      	ldr	r3, [r1, #0]
 8002f0c:	402b      	ands	r3, r5
 8002f0e:	600b      	str	r3, [r1, #0]
 8002f10:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f14:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f18:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1c:	6821      	ldr	r1, [r4, #0]
 8002f1e:	688b      	ldr	r3, [r1, #8]
 8002f20:	4393      	bics	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]
 8002f24:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002f28:	238c      	movs	r3, #140	@ 0x8c
 8002f2a:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8002f2c:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8002f2e:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8002f30:	e78e      	b.n	8002e50 <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f32:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f34:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f3e:	6821      	ldr	r1, [r4, #0]
 8002f40:	4d5f      	ldr	r5, [pc, #380]	@ (80030c0 <UART_CheckIdleState+0x2a4>)
 8002f42:	680b      	ldr	r3, [r1, #0]
 8002f44:	402b      	ands	r3, r5
 8002f46:	600b      	str	r3, [r1, #0]
 8002f48:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f50:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f54:	6822      	ldr	r2, [r4, #0]
 8002f56:	485b      	ldr	r0, [pc, #364]	@ (80030c4 <UART_CheckIdleState+0x2a8>)
 8002f58:	6893      	ldr	r3, [r2, #8]
 8002f5a:	4003      	ands	r3, r0
 8002f5c:	6093      	str	r3, [r2, #8]
 8002f5e:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f62:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10a      	bne.n	8002f7e <UART_CheckIdleState+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f68:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6c:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f70:	2010      	movs	r0, #16
 8002f72:	6822      	ldr	r2, [r4, #0]
 8002f74:	6813      	ldr	r3, [r2, #0]
 8002f76:	4383      	bics	r3, r0
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f7e:	238c      	movs	r3, #140	@ 0x8c
 8002f80:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f82:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8002f84:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f86:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f88:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8a:	66e3      	str	r3, [r4, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f8c:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f8e:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 8002f90:	3a0c      	subs	r2, #12
 8002f92:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8002f94:	e781      	b.n	8002e9a <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f96:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f98:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fa2:	6821      	ldr	r1, [r4, #0]
 8002fa4:	4d46      	ldr	r5, [pc, #280]	@ (80030c0 <UART_CheckIdleState+0x2a4>)
 8002fa6:	680b      	ldr	r3, [r1, #0]
 8002fa8:	402b      	ands	r3, r5
 8002faa:	600b      	str	r3, [r1, #0]
 8002fac:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb4:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fb8:	6822      	ldr	r2, [r4, #0]
 8002fba:	4842      	ldr	r0, [pc, #264]	@ (80030c4 <UART_CheckIdleState+0x2a8>)
 8002fbc:	6893      	ldr	r3, [r2, #8]
 8002fbe:	4003      	ands	r3, r0
 8002fc0:	6093      	str	r3, [r2, #8]
 8002fc2:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10a      	bne.n	8002fe2 <UART_CheckIdleState+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fcc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd4:	2010      	movs	r0, #16
 8002fd6:	6822      	ldr	r2, [r4, #0]
 8002fd8:	6813      	ldr	r3, [r2, #0]
 8002fda:	4383      	bics	r3, r0
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fe6:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 8002fe8:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fea:	2300      	movs	r3, #0
 8002fec:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8002fee:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ff0:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8002ff2:	3264      	adds	r2, #100	@ 0x64
 8002ff4:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8002ff6:	e750      	b.n	8002e9a <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ff8:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffe:	2201      	movs	r2, #1
 8003000:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003004:	6821      	ldr	r1, [r4, #0]
 8003006:	4d2e      	ldr	r5, [pc, #184]	@ (80030c0 <UART_CheckIdleState+0x2a4>)
 8003008:	680b      	ldr	r3, [r1, #0]
 800300a:	402b      	ands	r3, r5
 800300c:	600b      	str	r3, [r1, #0]
 800300e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003012:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003016:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800301a:	6822      	ldr	r2, [r4, #0]
 800301c:	4829      	ldr	r0, [pc, #164]	@ (80030c4 <UART_CheckIdleState+0x2a8>)
 800301e:	6893      	ldr	r3, [r2, #8]
 8003020:	4003      	ands	r3, r0
 8003022:	6093      	str	r3, [r2, #8]
 8003024:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003028:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800302a:	2b01      	cmp	r3, #1
 800302c:	d10a      	bne.n	8003044 <UART_CheckIdleState+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800302e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003032:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003036:	2010      	movs	r0, #16
 8003038:	6822      	ldr	r2, [r4, #0]
 800303a:	6813      	ldr	r3, [r2, #0]
 800303c:	4383      	bics	r3, r0
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8003044:	238c      	movs	r3, #140	@ 0x8c
 8003046:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003048:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800304a:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304c:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800304e:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003050:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8003052:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003054:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 8003056:	3a0c      	subs	r2, #12
 8003058:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 800305a:	e74f      	b.n	8002efc <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800305c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003062:	2201      	movs	r2, #1
 8003064:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003068:	6821      	ldr	r1, [r4, #0]
 800306a:	4d15      	ldr	r5, [pc, #84]	@ (80030c0 <UART_CheckIdleState+0x2a4>)
 800306c:	680b      	ldr	r3, [r1, #0]
 800306e:	402b      	ands	r3, r5
 8003070:	600b      	str	r3, [r1, #0]
 8003072:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003076:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800307e:	6822      	ldr	r2, [r4, #0]
 8003080:	4810      	ldr	r0, [pc, #64]	@ (80030c4 <UART_CheckIdleState+0x2a8>)
 8003082:	6893      	ldr	r3, [r2, #8]
 8003084:	4003      	ands	r3, r0
 8003086:	6093      	str	r3, [r2, #8]
 8003088:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800308c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800308e:	2b01      	cmp	r3, #1
 8003090:	d10a      	bne.n	80030a8 <UART_CheckIdleState+0x28c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003092:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003096:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800309a:	2010      	movs	r0, #16
 800309c:	6822      	ldr	r2, [r4, #0]
 800309e:	6813      	ldr	r3, [r2, #0]
 80030a0:	4383      	bics	r3, r0
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80030a8:	2220      	movs	r2, #32
 80030aa:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030ac:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 80030ae:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b0:	2300      	movs	r3, #0
 80030b2:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 80030b4:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030b6:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 80030b8:	3264      	adds	r2, #100	@ 0x64
 80030ba:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 80030bc:	e71e      	b.n	8002efc <UART_CheckIdleState+0xe0>
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	fffffedf 	.word	0xfffffedf
 80030c4:	effffffe 	.word	0xeffffffe

080030c8 <HAL_UART_Init>:
{
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80030cc:	d03f      	beq.n	800314e <HAL_UART_Init+0x86>
  if (huart->gState == HAL_UART_STATE_RESET)
 80030ce:	2388      	movs	r3, #136	@ 0x88
 80030d0:	58c3      	ldr	r3, [r0, r3]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d100      	bne.n	80030d8 <HAL_UART_Init+0x10>
 80030d6:	e07d      	b.n	80031d4 <HAL_UART_Init+0x10c>
  huart->gState = HAL_UART_STATE_BUSY;
 80030d8:	2388      	movs	r3, #136	@ 0x88
 80030da:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80030dc:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80030de:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80030e0:	682b      	ldr	r3, [r5, #0]
 80030e2:	3a23      	subs	r2, #35	@ 0x23
 80030e4:	4393      	bics	r3, r2
 80030e6:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030e8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d000      	beq.n	80030f0 <HAL_UART_Init+0x28>
 80030ee:	e06d      	b.n	80031cc <HAL_UART_Init+0x104>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030f0:	6921      	ldr	r1, [r4, #16]
 80030f2:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030f4:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030f6:	430b      	orrs	r3, r1
 80030f8:	6961      	ldr	r1, [r4, #20]
 80030fa:	69e0      	ldr	r0, [r4, #28]
 80030fc:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030fe:	4987      	ldr	r1, [pc, #540]	@ (800331c <HAL_UART_Init+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003100:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003102:	400a      	ands	r2, r1
 8003104:	4313      	orrs	r3, r2
 8003106:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003108:	686b      	ldr	r3, [r5, #4]
 800310a:	4a85      	ldr	r2, [pc, #532]	@ (8003320 <HAL_UART_Init+0x258>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800310c:	4985      	ldr	r1, [pc, #532]	@ (8003324 <HAL_UART_Init+0x25c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800310e:	4013      	ands	r3, r2
 8003110:	68e2      	ldr	r2, [r4, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003116:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003118:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800311a:	428d      	cmp	r5, r1
 800311c:	d100      	bne.n	8003120 <HAL_UART_Init+0x58>
 800311e:	e06d      	b.n	80031fc <HAL_UART_Init+0x134>
    tmpreg |= huart->Init.OneBitSampling;
 8003120:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003122:	68a9      	ldr	r1, [r5, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8003124:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003126:	4e80      	ldr	r6, [pc, #512]	@ (8003328 <HAL_UART_Init+0x260>)
 8003128:	4031      	ands	r1, r6
 800312a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800312c:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800312e:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003130:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003132:	438b      	bics	r3, r1
 8003134:	4313      	orrs	r3, r2
 8003136:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003138:	4b7c      	ldr	r3, [pc, #496]	@ (800332c <HAL_UART_Init+0x264>)
 800313a:	429d      	cmp	r5, r3
 800313c:	d009      	beq.n	8003152 <HAL_UART_Init+0x8a>
 800313e:	4b7c      	ldr	r3, [pc, #496]	@ (8003330 <HAL_UART_Init+0x268>)
 8003140:	429d      	cmp	r5, r3
 8003142:	d053      	beq.n	80031ec <HAL_UART_Init+0x124>
  huart->NbRxDataToProcess = 1;
 8003144:	4b7b      	ldr	r3, [pc, #492]	@ (8003334 <HAL_UART_Init+0x26c>)
 8003146:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8003148:	2300      	movs	r3, #0
 800314a:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 800314c:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_ERROR;
 800314e:	2001      	movs	r0, #1
}
 8003150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003152:	4b79      	ldr	r3, [pc, #484]	@ (8003338 <HAL_UART_Init+0x270>)
 8003154:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003156:	2303      	movs	r3, #3
 8003158:	400b      	ands	r3, r1
 800315a:	2b02      	cmp	r3, #2
 800315c:	d03f      	beq.n	80031de <HAL_UART_Init+0x116>
 800315e:	2b03      	cmp	r3, #3
 8003160:	d100      	bne.n	8003164 <HAL_UART_Init+0x9c>
 8003162:	e09f      	b.n	80032a4 <HAL_UART_Init+0x1dc>
 8003164:	2b01      	cmp	r3, #1
 8003166:	d141      	bne.n	80031ec <HAL_UART_Init+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003168:	2380      	movs	r3, #128	@ 0x80
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	4298      	cmp	r0, r3
 800316e:	d100      	bne.n	8003172 <HAL_UART_Init+0xaa>
 8003170:	e09e      	b.n	80032b0 <HAL_UART_Init+0x1e8>
        pclk = HAL_RCC_GetSysClockFreq();
 8003172:	f7fe fef7 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003176:	2800      	cmp	r0, #0
 8003178:	d100      	bne.n	800317c <HAL_UART_Init+0xb4>
 800317a:	e08d      	b.n	8003298 <HAL_UART_Init+0x1d0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800317c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800317e:	4b6f      	ldr	r3, [pc, #444]	@ (800333c <HAL_UART_Init+0x274>)
 8003180:	0052      	lsls	r2, r2, #1
 8003182:	5ad1      	ldrh	r1, [r2, r3]
 8003184:	f7fc ffbe 	bl	8000104 <__udivsi3>
 8003188:	6865      	ldr	r5, [r4, #4]
 800318a:	086b      	lsrs	r3, r5, #1
 800318c:	18c0      	adds	r0, r0, r3
 800318e:	0029      	movs	r1, r5
 8003190:	f7fc ffb8 	bl	8000104 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003194:	0002      	movs	r2, r0
 8003196:	4b6a      	ldr	r3, [pc, #424]	@ (8003340 <HAL_UART_Init+0x278>)
 8003198:	3a10      	subs	r2, #16
 800319a:	429a      	cmp	r2, r3
 800319c:	d8d2      	bhi.n	8003144 <HAL_UART_Init+0x7c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 80031a2:	4a64      	ldr	r2, [pc, #400]	@ (8003334 <HAL_UART_Init+0x26c>)
 80031a4:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80031a6:	2200      	movs	r2, #0
 80031a8:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80031aa:	67a2      	str	r2, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4965      	ldr	r1, [pc, #404]	@ (8003344 <HAL_UART_Init+0x27c>)
  return (UART_CheckIdleState(huart));
 80031b0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b4:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	438a      	bics	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	3929      	subs	r1, #41	@ 0x29
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80031c6:	f7ff fe29 	bl	8002e1c <UART_CheckIdleState>
 80031ca:	e7c1      	b.n	8003150 <HAL_UART_Init+0x88>
    UART_AdvFeatureConfig(huart);
 80031cc:	0020      	movs	r0, r4
 80031ce:	f7ff fdbd 	bl	8002d4c <UART_AdvFeatureConfig>
 80031d2:	e78d      	b.n	80030f0 <HAL_UART_Init+0x28>
    huart->Lock = HAL_UNLOCKED;
 80031d4:	2284      	movs	r2, #132	@ 0x84
 80031d6:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80031d8:	f7fd fe52 	bl	8000e80 <HAL_UART_MspInit>
 80031dc:	e77c      	b.n	80030d8 <HAL_UART_Init+0x10>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	021b      	lsls	r3, r3, #8
 80031e2:	4298      	cmp	r0, r3
 80031e4:	d100      	bne.n	80031e8 <HAL_UART_Init+0x120>
 80031e6:	e086      	b.n	80032f6 <HAL_UART_Init+0x22e>
        pclk = (uint32_t) HSI_VALUE;
 80031e8:	4857      	ldr	r0, [pc, #348]	@ (8003348 <HAL_UART_Init+0x280>)
 80031ea:	e7c8      	b.n	800317e <HAL_UART_Init+0xb6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ec:	2380      	movs	r3, #128	@ 0x80
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	4298      	cmp	r0, r3
 80031f2:	d100      	bne.n	80031f6 <HAL_UART_Init+0x12e>
 80031f4:	e087      	b.n	8003306 <HAL_UART_Init+0x23e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f6:	f7fe ffcb 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
        break;
 80031fa:	e7bc      	b.n	8003176 <HAL_UART_Init+0xae>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031fc:	68a9      	ldr	r1, [r5, #8]
 80031fe:	484a      	ldr	r0, [pc, #296]	@ (8003328 <HAL_UART_Init+0x260>)
 8003200:	4001      	ands	r1, r0
 8003202:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003204:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003206:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003208:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800320a:	20c0      	movs	r0, #192	@ 0xc0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800320c:	438b      	bics	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800320e:	2180      	movs	r1, #128	@ 0x80
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003210:	4313      	orrs	r3, r2
 8003212:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003214:	4b48      	ldr	r3, [pc, #288]	@ (8003338 <HAL_UART_Init+0x270>)
 8003216:	0100      	lsls	r0, r0, #4
 8003218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321a:	0109      	lsls	r1, r1, #4
 800321c:	4003      	ands	r3, r0
 800321e:	428b      	cmp	r3, r1
 8003220:	d07a      	beq.n	8003318 <HAL_UART_Init+0x250>
 8003222:	d873      	bhi.n	800330c <HAL_UART_Init+0x244>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d062      	beq.n	80032ee <HAL_UART_Init+0x226>
        pclk = HAL_RCC_GetSysClockFreq();
 8003228:	f7fe fe9c 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 800322c:	0005      	movs	r5, r0
    if (pclk != 0U)
 800322e:	2d00      	cmp	r5, #0
 8003230:	d063      	beq.n	80032fa <HAL_UART_Init+0x232>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003232:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003234:	4b41      	ldr	r3, [pc, #260]	@ (800333c <HAL_UART_Init+0x274>)
 8003236:	0052      	lsls	r2, r2, #1
 8003238:	5ad6      	ldrh	r6, [r2, r3]
 800323a:	0028      	movs	r0, r5
 800323c:	0031      	movs	r1, r6
 800323e:	f7fc ff61 	bl	8000104 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003242:	6867      	ldr	r7, [r4, #4]
 8003244:	007b      	lsls	r3, r7, #1
 8003246:	19db      	adds	r3, r3, r7
 8003248:	4298      	cmp	r0, r3
 800324a:	d200      	bcs.n	800324e <HAL_UART_Init+0x186>
 800324c:	e77a      	b.n	8003144 <HAL_UART_Init+0x7c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800324e:	033b      	lsls	r3, r7, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003250:	4298      	cmp	r0, r3
 8003252:	d900      	bls.n	8003256 <HAL_UART_Init+0x18e>
 8003254:	e776      	b.n	8003144 <HAL_UART_Init+0x7c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003256:	0032      	movs	r2, r6
 8003258:	2300      	movs	r3, #0
 800325a:	0028      	movs	r0, r5
 800325c:	2100      	movs	r1, #0
 800325e:	f7fd f8c7 	bl	80003f0 <__aeabi_uldivmod>
 8003262:	2600      	movs	r6, #0
 8003264:	0e05      	lsrs	r5, r0, #24
 8003266:	020b      	lsls	r3, r1, #8
 8003268:	432b      	orrs	r3, r5
 800326a:	0202      	lsls	r2, r0, #8
 800326c:	087d      	lsrs	r5, r7, #1
 800326e:	1952      	adds	r2, r2, r5
 8003270:	4173      	adcs	r3, r6
 8003272:	0010      	movs	r0, r2
 8003274:	0019      	movs	r1, r3
 8003276:	003a      	movs	r2, r7
 8003278:	2300      	movs	r3, #0
 800327a:	f7fd f8b9 	bl	80003f0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800327e:	4b33      	ldr	r3, [pc, #204]	@ (800334c <HAL_UART_Init+0x284>)
 8003280:	18c2      	adds	r2, r0, r3
 8003282:	4b33      	ldr	r3, [pc, #204]	@ (8003350 <HAL_UART_Init+0x288>)
 8003284:	429a      	cmp	r2, r3
 8003286:	d900      	bls.n	800328a <HAL_UART_Init+0x1c2>
 8003288:	e75c      	b.n	8003144 <HAL_UART_Init+0x7c>
          huart->Instance->BRR = usartdiv;
 800328a:	6823      	ldr	r3, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800328c:	4a29      	ldr	r2, [pc, #164]	@ (8003334 <HAL_UART_Init+0x26c>)
          huart->Instance->BRR = usartdiv;
 800328e:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 8003290:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8003292:	6766      	str	r6, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8003294:	67a6      	str	r6, [r4, #120]	@ 0x78
  return ret;
 8003296:	e789      	b.n	80031ac <HAL_UART_Init+0xe4>
  huart->NbRxDataToProcess = 1;
 8003298:	4b26      	ldr	r3, [pc, #152]	@ (8003334 <HAL_UART_Init+0x26c>)
  huart->RxISR = NULL;
 800329a:	6760      	str	r0, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800329c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800329e:	67a0      	str	r0, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	e783      	b.n	80031ac <HAL_UART_Init+0xe4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a4:	2380      	movs	r3, #128	@ 0x80
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	4298      	cmp	r0, r3
 80032aa:	d006      	beq.n	80032ba <HAL_UART_Init+0x1f2>
        pclk = (uint32_t) LSE_VALUE;
 80032ac:	0018      	movs	r0, r3
 80032ae:	e766      	b.n	800317e <HAL_UART_Init+0xb6>
        pclk = HAL_RCC_GetSysClockFreq();
 80032b0:	f7fe fe58 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80032b4:	2800      	cmp	r0, #0
 80032b6:	d0ef      	beq.n	8003298 <HAL_UART_Init+0x1d0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80032ba:	4b20      	ldr	r3, [pc, #128]	@ (800333c <HAL_UART_Init+0x274>)
 80032bc:	0052      	lsls	r2, r2, #1
 80032be:	5ad1      	ldrh	r1, [r2, r3]
 80032c0:	f7fc ff20 	bl	8000104 <__udivsi3>
 80032c4:	6865      	ldr	r5, [r4, #4]
 80032c6:	0040      	lsls	r0, r0, #1
 80032c8:	086b      	lsrs	r3, r5, #1
 80032ca:	18c0      	adds	r0, r0, r3
 80032cc:	0029      	movs	r1, r5
 80032ce:	f7fc ff19 	bl	8000104 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032d2:	0002      	movs	r2, r0
 80032d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003340 <HAL_UART_Init+0x278>)
 80032d6:	3a10      	subs	r2, #16
 80032d8:	429a      	cmp	r2, r3
 80032da:	d900      	bls.n	80032de <HAL_UART_Init+0x216>
 80032dc:	e732      	b.n	8003144 <HAL_UART_Init+0x7c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032de:	4a1d      	ldr	r2, [pc, #116]	@ (8003354 <HAL_UART_Init+0x28c>)
        huart->Instance->BRR = brrtemp;
 80032e0:	6823      	ldr	r3, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032e2:	4002      	ands	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032e4:	0700      	lsls	r0, r0, #28
 80032e6:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80032e8:	4302      	orrs	r2, r0
 80032ea:	60da      	str	r2, [r3, #12]
  huart->NbRxDataToProcess = 1;
 80032ec:	e759      	b.n	80031a2 <HAL_UART_Init+0xda>
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ee:	f7fe ff4f 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 80032f2:	0005      	movs	r5, r0
        break;
 80032f4:	e79b      	b.n	800322e <HAL_UART_Init+0x166>
        pclk = (uint32_t) HSI_VALUE;
 80032f6:	4814      	ldr	r0, [pc, #80]	@ (8003348 <HAL_UART_Init+0x280>)
 80032f8:	e7df      	b.n	80032ba <HAL_UART_Init+0x1f2>
  huart->NbRxDataToProcess = 1;
 80032fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <HAL_UART_Init+0x26c>)
  huart->RxISR = NULL;
 80032fc:	6765      	str	r5, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80032fe:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8003300:	67a5      	str	r5, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	e752      	b.n	80031ac <HAL_UART_Init+0xe4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003306:	f7fe ff43 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
        break;
 800330a:	e7d3      	b.n	80032b4 <HAL_UART_Init+0x1ec>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800330c:	4283      	cmp	r3, r0
 800330e:	d000      	beq.n	8003312 <HAL_UART_Init+0x24a>
 8003310:	e718      	b.n	8003144 <HAL_UART_Init+0x7c>
        pclk = (uint32_t) LSE_VALUE;
 8003312:	2580      	movs	r5, #128	@ 0x80
 8003314:	022d      	lsls	r5, r5, #8
 8003316:	e78d      	b.n	8003234 <HAL_UART_Init+0x16c>
        pclk = (uint32_t) HSI_VALUE;
 8003318:	4d0b      	ldr	r5, [pc, #44]	@ (8003348 <HAL_UART_Init+0x280>)
 800331a:	e78b      	b.n	8003234 <HAL_UART_Init+0x16c>
 800331c:	cfff69f3 	.word	0xcfff69f3
 8003320:	ffffcfff 	.word	0xffffcfff
 8003324:	40008000 	.word	0x40008000
 8003328:	11fff4ff 	.word	0x11fff4ff
 800332c:	40013800 	.word	0x40013800
 8003330:	40004400 	.word	0x40004400
 8003334:	00010001 	.word	0x00010001
 8003338:	40021000 	.word	0x40021000
 800333c:	0800363c 	.word	0x0800363c
 8003340:	0000ffef 	.word	0x0000ffef
 8003344:	ffffb7ff 	.word	0xffffb7ff
 8003348:	00f42400 	.word	0x00f42400
 800334c:	fffffd00 	.word	0xfffffd00
 8003350:	000ffcff 	.word	0x000ffcff
 8003354:	0000fff0 	.word	0x0000fff0

08003358 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003358:	b570      	push	{r4, r5, r6, lr}

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800335a:	2484      	movs	r4, #132	@ 0x84
 800335c:	5d03      	ldrb	r3, [r0, r4]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d012      	beq.n	8003388 <HAL_UARTEx_DisableFifoMode+0x30>

  huart->gState = HAL_UART_STATE_BUSY;
 8003362:	2588      	movs	r5, #136	@ 0x88
 8003364:	2324      	movs	r3, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003366:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8003368:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800336a:	6803      	ldr	r3, [r0, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800336e:	6819      	ldr	r1, [r3, #0]
 8003370:	43b1      	bics	r1, r6
 8003372:	6019      	str	r1, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003374:	4905      	ldr	r1, [pc, #20]	@ (800338c <HAL_UARTEx_DisableFifoMode+0x34>)
 8003376:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003378:	2100      	movs	r1, #0
 800337a:	6641      	str	r1, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800337c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800337e:	2320      	movs	r3, #32
 8003380:	5143      	str	r3, [r0, r5]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003382:	5501      	strb	r1, [r0, r4]

  return HAL_OK;
 8003384:	2000      	movs	r0, #0
}
 8003386:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8003388:	2002      	movs	r0, #2
 800338a:	e7fc      	b.n	8003386 <HAL_UARTEx_DisableFifoMode+0x2e>
 800338c:	dfffffff 	.word	0xdfffffff

08003390 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003392:	46d6      	mov	lr, sl
 8003394:	464f      	mov	r7, r9
 8003396:	4646      	mov	r6, r8
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003398:	2384      	movs	r3, #132	@ 0x84
{
 800339a:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 800339c:	5cc3      	ldrb	r3, [r0, r3]
{
 800339e:	0004      	movs	r4, r0
 80033a0:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d03d      	beq.n	8003422 <HAL_UARTEx_SetTxFifoThreshold+0x92>

  huart->gState = HAL_UART_STATE_BUSY;
 80033a6:	2388      	movs	r3, #136	@ 0x88
 80033a8:	2124      	movs	r1, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033aa:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80033ac:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033ae:	682e      	ldr	r6, [r5, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	3923      	subs	r1, #35	@ 0x23
 80033b4:	438b      	bics	r3, r1
 80033b6:	602b      	str	r3, [r5, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80033b8:	68ab      	ldr	r3, [r5, #8]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	08d9      	lsrs	r1, r3, #3
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80033be:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80033c0:	4311      	orrs	r1, r2
 80033c2:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d029      	beq.n	800341c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80033c8:	68ab      	ldr	r3, [r5, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033ca:	4a17      	ldr	r2, [pc, #92]	@ (8003428 <HAL_UARTEx_SetTxFifoThreshold+0x98>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80033cc:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033ce:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80033d0:	68ab      	ldr	r3, [r5, #8]
 80033d2:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033d4:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 80033d6:	4a15      	ldr	r2, [pc, #84]	@ (800342c <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033d8:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80033da:	5cd1      	ldrb	r1, [r2, r3]
 80033dc:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033de:	f7fc ff1b 	bl	8000218 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80033e2:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033e4:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80033e6:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033e8:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033ea:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033ec:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 80033ee:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033f0:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80033f2:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033f4:	f7fc ff10 	bl	8000218 <__divsi3>
 80033f8:	b280      	uxth	r0, r0
 80033fa:	2368      	movs	r3, #104	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 80033fc:	2220      	movs	r2, #32
 80033fe:	52e0      	strh	r0, [r4, r3]
 8003400:	3302      	adds	r3, #2
 8003402:	52e7      	strh	r7, [r4, r3]
 8003404:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003406:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003408:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800340a:	2200      	movs	r2, #0
  return HAL_OK;
 800340c:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800340e:	3b04      	subs	r3, #4
 8003410:	54e2      	strb	r2, [r4, r3]
}
 8003412:	bce0      	pop	{r5, r6, r7}
 8003414:	46ba      	mov	sl, r7
 8003416:	46b1      	mov	r9, r6
 8003418:	46a8      	mov	r8, r5
 800341a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 800341c:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 800341e:	2701      	movs	r7, #1
 8003420:	e7eb      	b.n	80033fa <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 8003422:	2002      	movs	r0, #2
 8003424:	e7f5      	b.n	8003412 <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	0800365c 	.word	0x0800365c
 800342c:	08003654 	.word	0x08003654

08003430 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	46d6      	mov	lr, sl
 8003434:	464f      	mov	r7, r9
 8003436:	4646      	mov	r6, r8
  __HAL_LOCK(huart);
 8003438:	2384      	movs	r3, #132	@ 0x84
{
 800343a:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 800343c:	5cc3      	ldrb	r3, [r0, r3]
{
 800343e:	0004      	movs	r4, r0
 8003440:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003442:	2b01      	cmp	r3, #1
 8003444:	d03d      	beq.n	80034c2 <HAL_UARTEx_SetRxFifoThreshold+0x92>
  huart->gState = HAL_UART_STATE_BUSY;
 8003446:	2388      	movs	r3, #136	@ 0x88
 8003448:	2124      	movs	r1, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800344a:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800344c:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800344e:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	3923      	subs	r1, #35	@ 0x23
 8003454:	438b      	bics	r3, r1
 8003456:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003458:	68a9      	ldr	r1, [r5, #8]
 800345a:	4b1b      	ldr	r3, [pc, #108]	@ (80034c8 <HAL_UARTEx_SetRxFifoThreshold+0x98>)
 800345c:	4019      	ands	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800345e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003460:	4311      	orrs	r1, r2
 8003462:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003464:	2b00      	cmp	r3, #0
 8003466:	d029      	beq.n	80034bc <HAL_UARTEx_SetRxFifoThreshold+0x8c>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003468:	68ab      	ldr	r3, [r5, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800346a:	4a18      	ldr	r2, [pc, #96]	@ (80034cc <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800346c:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800346e:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003470:	68ab      	ldr	r3, [r5, #8]
 8003472:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003474:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003476:	4a16      	ldr	r2, [pc, #88]	@ (80034d0 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003478:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800347a:	5cd1      	ldrb	r1, [r2, r3]
 800347c:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800347e:	f7fc fecb 	bl	8000218 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003482:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003484:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003486:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003488:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800348a:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800348c:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 800348e:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003490:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003492:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003494:	f7fc fec0 	bl	8000218 <__divsi3>
 8003498:	b280      	uxth	r0, r0
 800349a:	2368      	movs	r3, #104	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 800349c:	2220      	movs	r2, #32
 800349e:	52e0      	strh	r0, [r4, r3]
 80034a0:	3302      	adds	r3, #2
 80034a2:	52e7      	strh	r7, [r4, r3]
 80034a4:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034a6:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80034a8:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80034aa:	2200      	movs	r2, #0
  return HAL_OK;
 80034ac:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 80034ae:	3b04      	subs	r3, #4
 80034b0:	54e2      	strb	r2, [r4, r3]
}
 80034b2:	bce0      	pop	{r5, r6, r7}
 80034b4:	46ba      	mov	sl, r7
 80034b6:	46b1      	mov	r9, r6
 80034b8:	46a8      	mov	r8, r5
 80034ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 80034bc:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 80034be:	2701      	movs	r7, #1
 80034c0:	e7eb      	b.n	800349a <HAL_UARTEx_SetRxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 80034c2:	2002      	movs	r0, #2
 80034c4:	e7f5      	b.n	80034b2 <HAL_UARTEx_SetRxFifoThreshold+0x82>
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	f1ffffff 	.word	0xf1ffffff
 80034cc:	0800365c 	.word	0x0800365c
 80034d0:	08003654 	.word	0x08003654

080034d4 <memset>:
 80034d4:	0003      	movs	r3, r0
 80034d6:	1882      	adds	r2, r0, r2
 80034d8:	4293      	cmp	r3, r2
 80034da:	d100      	bne.n	80034de <memset+0xa>
 80034dc:	4770      	bx	lr
 80034de:	7019      	strb	r1, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	e7f9      	b.n	80034d8 <memset+0x4>

080034e4 <__libc_init_array>:
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	2600      	movs	r6, #0
 80034e8:	4c0c      	ldr	r4, [pc, #48]	@ (800351c <__libc_init_array+0x38>)
 80034ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003520 <__libc_init_array+0x3c>)
 80034ec:	1b64      	subs	r4, r4, r5
 80034ee:	10a4      	asrs	r4, r4, #2
 80034f0:	42a6      	cmp	r6, r4
 80034f2:	d109      	bne.n	8003508 <__libc_init_array+0x24>
 80034f4:	2600      	movs	r6, #0
 80034f6:	f000 f819 	bl	800352c <_init>
 80034fa:	4c0a      	ldr	r4, [pc, #40]	@ (8003524 <__libc_init_array+0x40>)
 80034fc:	4d0a      	ldr	r5, [pc, #40]	@ (8003528 <__libc_init_array+0x44>)
 80034fe:	1b64      	subs	r4, r4, r5
 8003500:	10a4      	asrs	r4, r4, #2
 8003502:	42a6      	cmp	r6, r4
 8003504:	d105      	bne.n	8003512 <__libc_init_array+0x2e>
 8003506:	bd70      	pop	{r4, r5, r6, pc}
 8003508:	00b3      	lsls	r3, r6, #2
 800350a:	58eb      	ldr	r3, [r5, r3]
 800350c:	4798      	blx	r3
 800350e:	3601      	adds	r6, #1
 8003510:	e7ee      	b.n	80034f0 <__libc_init_array+0xc>
 8003512:	00b3      	lsls	r3, r6, #2
 8003514:	58eb      	ldr	r3, [r5, r3]
 8003516:	4798      	blx	r3
 8003518:	3601      	adds	r6, #1
 800351a:	e7f2      	b.n	8003502 <__libc_init_array+0x1e>
 800351c:	0800366c 	.word	0x0800366c
 8003520:	0800366c 	.word	0x0800366c
 8003524:	08003670 	.word	0x08003670
 8003528:	0800366c 	.word	0x0800366c

0800352c <_init>:
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352e:	46c0      	nop			@ (mov r8, r8)
 8003530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003532:	bc08      	pop	{r3}
 8003534:	469e      	mov	lr, r3
 8003536:	4770      	bx	lr

08003538 <_fini>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353e:	bc08      	pop	{r3}
 8003540:	469e      	mov	lr, r3
 8003542:	4770      	bx	lr
