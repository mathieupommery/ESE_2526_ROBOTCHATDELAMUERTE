
TEST_MATHIEU_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011018  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  080112b8  080112b8  000122b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011768  08011768  00012768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011770  08011770  00012770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011774  08011774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  24000000  08011778  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000065f8  24000158  080118d0  00013158  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006750  080118d0  00013750  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013158  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027eda  00000000  00000000  00013186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056d6  00000000  00000000  0003b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d30  00000000  00000000  00040738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001670  00000000  00000000  00042468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d337  00000000  00000000  00043ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a0d3  00000000  00000000  00080e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017096a  00000000  00000000  000aaee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021b84c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007f44  00000000  00000000  0021b890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000086  00000000  00000000  002237d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080112a0 	.word	0x080112a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	080112a0 	.word	0x080112a0

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b988 	b.w	8000980 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9d08      	ldr	r5, [sp, #32]
 800068e:	468e      	mov	lr, r1
 8000690:	4604      	mov	r4, r0
 8000692:	4688      	mov	r8, r1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d14a      	bne.n	800072e <__udivmoddi4+0xa6>
 8000698:	428a      	cmp	r2, r1
 800069a:	4617      	mov	r7, r2
 800069c:	d962      	bls.n	8000764 <__udivmoddi4+0xdc>
 800069e:	fab2 f682 	clz	r6, r2
 80006a2:	b14e      	cbz	r6, 80006b8 <__udivmoddi4+0x30>
 80006a4:	f1c6 0320 	rsb	r3, r6, #32
 80006a8:	fa01 f806 	lsl.w	r8, r1, r6
 80006ac:	fa20 f303 	lsr.w	r3, r0, r3
 80006b0:	40b7      	lsls	r7, r6
 80006b2:	ea43 0808 	orr.w	r8, r3, r8
 80006b6:	40b4      	lsls	r4, r6
 80006b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006bc:	fa1f fc87 	uxth.w	ip, r7
 80006c0:	fbb8 f1fe 	udiv	r1, r8, lr
 80006c4:	0c23      	lsrs	r3, r4, #16
 80006c6:	fb0e 8811 	mls	r8, lr, r1, r8
 80006ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006ce:	fb01 f20c 	mul.w	r2, r1, ip
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d909      	bls.n	80006ea <__udivmoddi4+0x62>
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	f101 30ff 	add.w	r0, r1, #4294967295
 80006dc:	f080 80ea 	bcs.w	80008b4 <__udivmoddi4+0x22c>
 80006e0:	429a      	cmp	r2, r3
 80006e2:	f240 80e7 	bls.w	80008b4 <__udivmoddi4+0x22c>
 80006e6:	3902      	subs	r1, #2
 80006e8:	443b      	add	r3, r7
 80006ea:	1a9a      	subs	r2, r3, r2
 80006ec:	b2a3      	uxth	r3, r4
 80006ee:	fbb2 f0fe 	udiv	r0, r2, lr
 80006f2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006fa:	fb00 fc0c 	mul.w	ip, r0, ip
 80006fe:	459c      	cmp	ip, r3
 8000700:	d909      	bls.n	8000716 <__udivmoddi4+0x8e>
 8000702:	18fb      	adds	r3, r7, r3
 8000704:	f100 32ff 	add.w	r2, r0, #4294967295
 8000708:	f080 80d6 	bcs.w	80008b8 <__udivmoddi4+0x230>
 800070c:	459c      	cmp	ip, r3
 800070e:	f240 80d3 	bls.w	80008b8 <__udivmoddi4+0x230>
 8000712:	443b      	add	r3, r7
 8000714:	3802      	subs	r0, #2
 8000716:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800071a:	eba3 030c 	sub.w	r3, r3, ip
 800071e:	2100      	movs	r1, #0
 8000720:	b11d      	cbz	r5, 800072a <__udivmoddi4+0xa2>
 8000722:	40f3      	lsrs	r3, r6
 8000724:	2200      	movs	r2, #0
 8000726:	e9c5 3200 	strd	r3, r2, [r5]
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	428b      	cmp	r3, r1
 8000730:	d905      	bls.n	800073e <__udivmoddi4+0xb6>
 8000732:	b10d      	cbz	r5, 8000738 <__udivmoddi4+0xb0>
 8000734:	e9c5 0100 	strd	r0, r1, [r5]
 8000738:	2100      	movs	r1, #0
 800073a:	4608      	mov	r0, r1
 800073c:	e7f5      	b.n	800072a <__udivmoddi4+0xa2>
 800073e:	fab3 f183 	clz	r1, r3
 8000742:	2900      	cmp	r1, #0
 8000744:	d146      	bne.n	80007d4 <__udivmoddi4+0x14c>
 8000746:	4573      	cmp	r3, lr
 8000748:	d302      	bcc.n	8000750 <__udivmoddi4+0xc8>
 800074a:	4282      	cmp	r2, r0
 800074c:	f200 8105 	bhi.w	800095a <__udivmoddi4+0x2d2>
 8000750:	1a84      	subs	r4, r0, r2
 8000752:	eb6e 0203 	sbc.w	r2, lr, r3
 8000756:	2001      	movs	r0, #1
 8000758:	4690      	mov	r8, r2
 800075a:	2d00      	cmp	r5, #0
 800075c:	d0e5      	beq.n	800072a <__udivmoddi4+0xa2>
 800075e:	e9c5 4800 	strd	r4, r8, [r5]
 8000762:	e7e2      	b.n	800072a <__udivmoddi4+0xa2>
 8000764:	2a00      	cmp	r2, #0
 8000766:	f000 8090 	beq.w	800088a <__udivmoddi4+0x202>
 800076a:	fab2 f682 	clz	r6, r2
 800076e:	2e00      	cmp	r6, #0
 8000770:	f040 80a4 	bne.w	80008bc <__udivmoddi4+0x234>
 8000774:	1a8a      	subs	r2, r1, r2
 8000776:	0c03      	lsrs	r3, r0, #16
 8000778:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800077c:	b280      	uxth	r0, r0
 800077e:	b2bc      	uxth	r4, r7
 8000780:	2101      	movs	r1, #1
 8000782:	fbb2 fcfe 	udiv	ip, r2, lr
 8000786:	fb0e 221c 	mls	r2, lr, ip, r2
 800078a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800078e:	fb04 f20c 	mul.w	r2, r4, ip
 8000792:	429a      	cmp	r2, r3
 8000794:	d907      	bls.n	80007a6 <__udivmoddi4+0x11e>
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	f10c 38ff 	add.w	r8, ip, #4294967295
 800079c:	d202      	bcs.n	80007a4 <__udivmoddi4+0x11c>
 800079e:	429a      	cmp	r2, r3
 80007a0:	f200 80e0 	bhi.w	8000964 <__udivmoddi4+0x2dc>
 80007a4:	46c4      	mov	ip, r8
 80007a6:	1a9b      	subs	r3, r3, r2
 80007a8:	fbb3 f2fe 	udiv	r2, r3, lr
 80007ac:	fb0e 3312 	mls	r3, lr, r2, r3
 80007b0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80007b4:	fb02 f404 	mul.w	r4, r2, r4
 80007b8:	429c      	cmp	r4, r3
 80007ba:	d907      	bls.n	80007cc <__udivmoddi4+0x144>
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	f102 30ff 	add.w	r0, r2, #4294967295
 80007c2:	d202      	bcs.n	80007ca <__udivmoddi4+0x142>
 80007c4:	429c      	cmp	r4, r3
 80007c6:	f200 80ca 	bhi.w	800095e <__udivmoddi4+0x2d6>
 80007ca:	4602      	mov	r2, r0
 80007cc:	1b1b      	subs	r3, r3, r4
 80007ce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80007d2:	e7a5      	b.n	8000720 <__udivmoddi4+0x98>
 80007d4:	f1c1 0620 	rsb	r6, r1, #32
 80007d8:	408b      	lsls	r3, r1
 80007da:	fa22 f706 	lsr.w	r7, r2, r6
 80007de:	431f      	orrs	r7, r3
 80007e0:	fa0e f401 	lsl.w	r4, lr, r1
 80007e4:	fa20 f306 	lsr.w	r3, r0, r6
 80007e8:	fa2e fe06 	lsr.w	lr, lr, r6
 80007ec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007f0:	4323      	orrs	r3, r4
 80007f2:	fa00 f801 	lsl.w	r8, r0, r1
 80007f6:	fa1f fc87 	uxth.w	ip, r7
 80007fa:	fbbe f0f9 	udiv	r0, lr, r9
 80007fe:	0c1c      	lsrs	r4, r3, #16
 8000800:	fb09 ee10 	mls	lr, r9, r0, lr
 8000804:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000808:	fb00 fe0c 	mul.w	lr, r0, ip
 800080c:	45a6      	cmp	lr, r4
 800080e:	fa02 f201 	lsl.w	r2, r2, r1
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x1a0>
 8000814:	193c      	adds	r4, r7, r4
 8000816:	f100 3aff 	add.w	sl, r0, #4294967295
 800081a:	f080 809c 	bcs.w	8000956 <__udivmoddi4+0x2ce>
 800081e:	45a6      	cmp	lr, r4
 8000820:	f240 8099 	bls.w	8000956 <__udivmoddi4+0x2ce>
 8000824:	3802      	subs	r0, #2
 8000826:	443c      	add	r4, r7
 8000828:	eba4 040e 	sub.w	r4, r4, lr
 800082c:	fa1f fe83 	uxth.w	lr, r3
 8000830:	fbb4 f3f9 	udiv	r3, r4, r9
 8000834:	fb09 4413 	mls	r4, r9, r3, r4
 8000838:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800083c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000840:	45a4      	cmp	ip, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x1ce>
 8000844:	193c      	adds	r4, r7, r4
 8000846:	f103 3eff 	add.w	lr, r3, #4294967295
 800084a:	f080 8082 	bcs.w	8000952 <__udivmoddi4+0x2ca>
 800084e:	45a4      	cmp	ip, r4
 8000850:	d97f      	bls.n	8000952 <__udivmoddi4+0x2ca>
 8000852:	3b02      	subs	r3, #2
 8000854:	443c      	add	r4, r7
 8000856:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800085a:	eba4 040c 	sub.w	r4, r4, ip
 800085e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000862:	4564      	cmp	r4, ip
 8000864:	4673      	mov	r3, lr
 8000866:	46e1      	mov	r9, ip
 8000868:	d362      	bcc.n	8000930 <__udivmoddi4+0x2a8>
 800086a:	d05f      	beq.n	800092c <__udivmoddi4+0x2a4>
 800086c:	b15d      	cbz	r5, 8000886 <__udivmoddi4+0x1fe>
 800086e:	ebb8 0203 	subs.w	r2, r8, r3
 8000872:	eb64 0409 	sbc.w	r4, r4, r9
 8000876:	fa04 f606 	lsl.w	r6, r4, r6
 800087a:	fa22 f301 	lsr.w	r3, r2, r1
 800087e:	431e      	orrs	r6, r3
 8000880:	40cc      	lsrs	r4, r1
 8000882:	e9c5 6400 	strd	r6, r4, [r5]
 8000886:	2100      	movs	r1, #0
 8000888:	e74f      	b.n	800072a <__udivmoddi4+0xa2>
 800088a:	fbb1 fcf2 	udiv	ip, r1, r2
 800088e:	0c01      	lsrs	r1, r0, #16
 8000890:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000894:	b280      	uxth	r0, r0
 8000896:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800089a:	463b      	mov	r3, r7
 800089c:	4638      	mov	r0, r7
 800089e:	463c      	mov	r4, r7
 80008a0:	46b8      	mov	r8, r7
 80008a2:	46be      	mov	lr, r7
 80008a4:	2620      	movs	r6, #32
 80008a6:	fbb1 f1f7 	udiv	r1, r1, r7
 80008aa:	eba2 0208 	sub.w	r2, r2, r8
 80008ae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80008b2:	e766      	b.n	8000782 <__udivmoddi4+0xfa>
 80008b4:	4601      	mov	r1, r0
 80008b6:	e718      	b.n	80006ea <__udivmoddi4+0x62>
 80008b8:	4610      	mov	r0, r2
 80008ba:	e72c      	b.n	8000716 <__udivmoddi4+0x8e>
 80008bc:	f1c6 0220 	rsb	r2, r6, #32
 80008c0:	fa2e f302 	lsr.w	r3, lr, r2
 80008c4:	40b7      	lsls	r7, r6
 80008c6:	40b1      	lsls	r1, r6
 80008c8:	fa20 f202 	lsr.w	r2, r0, r2
 80008cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008d0:	430a      	orrs	r2, r1
 80008d2:	fbb3 f8fe 	udiv	r8, r3, lr
 80008d6:	b2bc      	uxth	r4, r7
 80008d8:	fb0e 3318 	mls	r3, lr, r8, r3
 80008dc:	0c11      	lsrs	r1, r2, #16
 80008de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e2:	fb08 f904 	mul.w	r9, r8, r4
 80008e6:	40b0      	lsls	r0, r6
 80008e8:	4589      	cmp	r9, r1
 80008ea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80008ee:	b280      	uxth	r0, r0
 80008f0:	d93e      	bls.n	8000970 <__udivmoddi4+0x2e8>
 80008f2:	1879      	adds	r1, r7, r1
 80008f4:	f108 3cff 	add.w	ip, r8, #4294967295
 80008f8:	d201      	bcs.n	80008fe <__udivmoddi4+0x276>
 80008fa:	4589      	cmp	r9, r1
 80008fc:	d81f      	bhi.n	800093e <__udivmoddi4+0x2b6>
 80008fe:	eba1 0109 	sub.w	r1, r1, r9
 8000902:	fbb1 f9fe 	udiv	r9, r1, lr
 8000906:	fb09 f804 	mul.w	r8, r9, r4
 800090a:	fb0e 1119 	mls	r1, lr, r9, r1
 800090e:	b292      	uxth	r2, r2
 8000910:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000914:	4542      	cmp	r2, r8
 8000916:	d229      	bcs.n	800096c <__udivmoddi4+0x2e4>
 8000918:	18ba      	adds	r2, r7, r2
 800091a:	f109 31ff 	add.w	r1, r9, #4294967295
 800091e:	d2c4      	bcs.n	80008aa <__udivmoddi4+0x222>
 8000920:	4542      	cmp	r2, r8
 8000922:	d2c2      	bcs.n	80008aa <__udivmoddi4+0x222>
 8000924:	f1a9 0102 	sub.w	r1, r9, #2
 8000928:	443a      	add	r2, r7
 800092a:	e7be      	b.n	80008aa <__udivmoddi4+0x222>
 800092c:	45f0      	cmp	r8, lr
 800092e:	d29d      	bcs.n	800086c <__udivmoddi4+0x1e4>
 8000930:	ebbe 0302 	subs.w	r3, lr, r2
 8000934:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000938:	3801      	subs	r0, #1
 800093a:	46e1      	mov	r9, ip
 800093c:	e796      	b.n	800086c <__udivmoddi4+0x1e4>
 800093e:	eba7 0909 	sub.w	r9, r7, r9
 8000942:	4449      	add	r1, r9
 8000944:	f1a8 0c02 	sub.w	ip, r8, #2
 8000948:	fbb1 f9fe 	udiv	r9, r1, lr
 800094c:	fb09 f804 	mul.w	r8, r9, r4
 8000950:	e7db      	b.n	800090a <__udivmoddi4+0x282>
 8000952:	4673      	mov	r3, lr
 8000954:	e77f      	b.n	8000856 <__udivmoddi4+0x1ce>
 8000956:	4650      	mov	r0, sl
 8000958:	e766      	b.n	8000828 <__udivmoddi4+0x1a0>
 800095a:	4608      	mov	r0, r1
 800095c:	e6fd      	b.n	800075a <__udivmoddi4+0xd2>
 800095e:	443b      	add	r3, r7
 8000960:	3a02      	subs	r2, #2
 8000962:	e733      	b.n	80007cc <__udivmoddi4+0x144>
 8000964:	f1ac 0c02 	sub.w	ip, ip, #2
 8000968:	443b      	add	r3, r7
 800096a:	e71c      	b.n	80007a6 <__udivmoddi4+0x11e>
 800096c:	4649      	mov	r1, r9
 800096e:	e79c      	b.n	80008aa <__udivmoddi4+0x222>
 8000970:	eba1 0109 	sub.w	r1, r1, r9
 8000974:	46c4      	mov	ip, r8
 8000976:	fbb1 f9fe 	udiv	r9, r1, lr
 800097a:	fb09 f804 	mul.w	r8, r9, r4
 800097e:	e7c4      	b.n	800090a <__udivmoddi4+0x282>

08000980 <__aeabi_idiv0>:
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800098a:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <MX_DMA_Init+0x3c>)
 800098c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000990:	4a0b      	ldr	r2, [pc, #44]	@ (80009c0 <MX_DMA_Init+0x3c>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_DMA_Init+0x3c>)
 800099c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2105      	movs	r1, #5
 80009ac:	200b      	movs	r0, #11
 80009ae:	f001 fc27 	bl	8002200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009b2:	200b      	movs	r0, #11
 80009b4:	f001 fc3e 	bl	8002234 <HAL_NVIC_EnableIRQ>

}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	58024400 	.word	0x58024400

080009c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4a07      	ldr	r2, [pc, #28]	@ (80009f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80009d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	4a06      	ldr	r2, [pc, #24]	@ (80009f4 <vApplicationGetIdleTaskMemory+0x30>)
 80009da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2280      	movs	r2, #128	@ 0x80
 80009e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	2400017c 	.word	0x2400017c
 80009f4:	2400021c 	.word	0x2400021c

080009f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009f8:	b5b0      	push	{r4, r5, r7, lr}
 80009fa:	b08e      	sub	sp, #56	@ 0x38
 80009fc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of maintask */
  osThreadDef(maintask, Startmaintask, osPriorityNormal, 0, 256);
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_FREERTOS_Init+0x58>)
 8000a00:	f107 041c 	add.w	r4, r7, #28
 8000a04:	461d      	mov	r5, r3
 8000a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  maintaskHandle = osThreadCreate(osThread(maintask), NULL);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f00d fdce 	bl	800e5ba <osThreadCreate>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4a0c      	ldr	r2, [pc, #48]	@ (8000a54 <MX_FREERTOS_Init+0x5c>)
 8000a22:	6013      	str	r3, [r2, #0]

  /* definition and creation of lidarparse */
  osThreadDef(lidarparse, Startlidarparse, osPriorityIdle, 0, 500);
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_FREERTOS_Init+0x60>)
 8000a26:	463c      	mov	r4, r7
 8000a28:	461d      	mov	r5, r3
 8000a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lidarparseHandle = osThreadCreate(osThread(lidarparse), NULL);
 8000a36:	463b      	mov	r3, r7
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f00d fdbd 	bl	800e5ba <osThreadCreate>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4a06      	ldr	r2, [pc, #24]	@ (8000a5c <MX_FREERTOS_Init+0x64>)
 8000a44:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000a46:	bf00      	nop
 8000a48:	3738      	adds	r7, #56	@ 0x38
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	080112c4 	.word	0x080112c4
 8000a54:	24000174 	.word	0x24000174
 8000a58:	080112ec 	.word	0x080112ec
 8000a5c:	24000178 	.word	0x24000178

08000a60 <Startmaintask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startmaintask */
void Startmaintask(void const * argument)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a68:	f00f fa46 	bl	800fef8 <MX_USB_DEVICE_Init>
  {

	 //HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_3);
	 //HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_4);
	//CDC_Transmit_FS((uint8_t*) ylidar_finalbuffer, 721*sizeof(uint8_t));
    osDelay(1000);
 8000a6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a70:	f00d fdef 	bl	800e652 <osDelay>
 8000a74:	e7fa      	b.n	8000a6c <Startmaintask+0xc>
	...

08000a78 <Startlidarparse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startlidarparse */
void Startlidarparse(void const * argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startlidarparse */
  /* Infinite loop */
  for(;;)
  {
	  while (ylidar_read_index!=ylidar_write_index){
 8000a80:	e001      	b.n	8000a86 <Startlidarparse+0xe>
		  ylidar_fsm();
 8000a82:	f000 fdc5 	bl	8001610 <ylidar_fsm>
	  while (ylidar_read_index!=ylidar_write_index){
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <Startlidarparse+0x28>)
 8000a88:	881a      	ldrh	r2, [r3, #0]
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <Startlidarparse+0x2c>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d1f7      	bne.n	8000a82 <Startlidarparse+0xa>
      }
	  trackObject();
 8000a92:	f001 f88d 	bl	8001bb0 <trackObject>

	  osDelay(1);
 8000a96:	2001      	movs	r0, #1
 8000a98:	f00d fddb 	bl	800e652 <osDelay>
	  while (ylidar_read_index!=ylidar_write_index){
 8000a9c:	e7f3      	b.n	8000a86 <Startlidarparse+0xe>
 8000a9e:	bf00      	nop
 8000aa0:	24000574 	.word	0x24000574
 8000aa4:	24000576 	.word	0x24000576

08000aa8 <MX_GPIO_Init>:
     PB11   ------> I2C2_SDA
     PD8   ------> USART3_TX
     PD12   ------> I2C4_SCL
*/
void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	@ 0x30
 8000aac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000abe:	4bbd      	ldr	r3, [pc, #756]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac4:	4abb      	ldr	r2, [pc, #748]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ace:	4bb9      	ldr	r3, [pc, #740]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	f003 0310 	and.w	r3, r3, #16
 8000ad8:	61bb      	str	r3, [r7, #24]
 8000ada:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000adc:	4bb5      	ldr	r3, [pc, #724]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae2:	4ab4      	ldr	r2, [pc, #720]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aec:	4bb1      	ldr	r3, [pc, #708]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4bae      	ldr	r3, [pc, #696]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b00:	4aac      	ldr	r2, [pc, #688]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0a:	4baa      	ldr	r3, [pc, #680]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b18:	4ba6      	ldr	r3, [pc, #664]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1e:	4aa5      	ldr	r2, [pc, #660]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b28:	4ba2      	ldr	r3, [pc, #648]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	4b9f      	ldr	r3, [pc, #636]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3c:	4a9d      	ldr	r2, [pc, #628]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b46:	4b9b      	ldr	r3, [pc, #620]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b54:	4b97      	ldr	r3, [pc, #604]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5a:	4a96      	ldr	r2, [pc, #600]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b64:	4b93      	ldr	r3, [pc, #588]	@ (8000db4 <MX_GPIO_Init+0x30c>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000b78:	488f      	ldr	r0, [pc, #572]	@ (8000db8 <MX_GPIO_Init+0x310>)
 8000b7a:	f004 f993 	bl	8004ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000b7e:	2364      	movs	r3, #100	@ 0x64
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000b8e:	2305      	movs	r3, #5
 8000b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	4888      	ldr	r0, [pc, #544]	@ (8000dbc <MX_GPIO_Init+0x314>)
 8000b9a:	f003 ffd3 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000b9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba4:	2312      	movs	r3, #18
 8000ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4881      	ldr	r0, [pc, #516]	@ (8000dc0 <MX_GPIO_Init+0x318>)
 8000bbc:	f003 ffc2 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bc0:	2380      	movs	r3, #128	@ 0x80
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4879      	ldr	r0, [pc, #484]	@ (8000dc0 <MX_GPIO_Init+0x318>)
 8000bdc:	f003 ffb2 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8000be0:	2318      	movs	r3, #24
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4871      	ldr	r0, [pc, #452]	@ (8000dc0 <MX_GPIO_Init+0x318>)
 8000bfc:	f003 ffa2 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c12:	2305      	movs	r3, #5
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4869      	ldr	r0, [pc, #420]	@ (8000dc4 <MX_GPIO_Init+0x31c>)
 8000c1e:	f003 ff91 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_0|GPIO_PIN_1;
 8000c22:	2313      	movs	r3, #19
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI3;
 8000c32:	2306      	movs	r3, #6
 8000c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	485e      	ldr	r0, [pc, #376]	@ (8000db8 <MX_GPIO_Init+0x310>)
 8000c3e:	f003 ff81 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c48:	2312      	movs	r3, #18
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c54:	2304      	movs	r3, #4
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4859      	ldr	r0, [pc, #356]	@ (8000dc4 <MX_GPIO_Init+0x31c>)
 8000c60:	f003 ff70 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_MOT3_Pin */
  GPIO_InitStruct.Pin = GPIO_MOT3_Pin;
 8000c64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIO_MOT3_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4852      	ldr	r0, [pc, #328]	@ (8000dc4 <MX_GPIO_Init+0x31c>)
 8000c7c:	f003 ff62 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c86:	2312      	movs	r3, #18
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c92:	2304      	movs	r3, #4
 8000c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	484a      	ldr	r0, [pc, #296]	@ (8000dc8 <MX_GPIO_Init+0x320>)
 8000c9e:	f003 ff51 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000ca2:	23c0      	movs	r3, #192	@ 0xc0
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4842      	ldr	r0, [pc, #264]	@ (8000dc8 <MX_GPIO_Init+0x320>)
 8000cbe:	f003 ff41 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000cc2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4837      	ldr	r0, [pc, #220]	@ (8000db8 <MX_GPIO_Init+0x310>)
 8000cdc:	f003 ff32 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8000ce0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4830      	ldr	r0, [pc, #192]	@ (8000dc0 <MX_GPIO_Init+0x318>)
 8000cfe:	f003 ff21 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d02:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000d14:	2307      	movs	r3, #7
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4827      	ldr	r0, [pc, #156]	@ (8000dbc <MX_GPIO_Init+0x314>)
 8000d20:	f003 ff10 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d24:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2a:	2312      	movs	r3, #18
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d36:	2304      	movs	r3, #4
 8000d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481f      	ldr	r0, [pc, #124]	@ (8000dc0 <MX_GPIO_Init+0x318>)
 8000d42:	f003 feff 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000d46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	4815      	ldr	r0, [pc, #84]	@ (8000db8 <MX_GPIO_Init+0x310>)
 8000d64:	f003 feee 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8000d68:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6e:	2312      	movs	r3, #18
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <MX_GPIO_Init+0x310>)
 8000d86:	f003 fedd 	bl	8004b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <MX_GPIO_Init+0x318>)
 8000da6:	f003 fecd 	bl	8004b44 <HAL_GPIO_Init>

}
 8000daa:	bf00      	nop
 8000dac:	3730      	adds	r7, #48	@ 0x30
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	58024400 	.word	0x58024400
 8000db8:	58020c00 	.word	0x58020c00
 8000dbc:	58021000 	.word	0x58021000
 8000dc0:	58020400 	.word	0x58020400
 8000dc4:	58020000 	.word	0x58020000
 8000dc8:	58020800 	.word	0x58020800

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000dd0:	f000 f942 	bl	8001058 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd4:	f001 f8d0 	bl	8001f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f8c2 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f7ff fe64 	bl	8000aa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000de0:	f7ff fdd0 	bl	8000984 <MX_DMA_Init>
  MX_UART8_Init();
 8000de4:	f000 faee 	bl	80013c4 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Abort(&huart8);
 8000de8:	484b      	ldr	r0, [pc, #300]	@ (8000f18 <main+0x14c>)
 8000dea:	f008 fd17 	bl	800981c <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&huart8, (uint8_t *)ylidar_circular_buffer, YLIDAR_CIRC_BUF_SIZE);
 8000dee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000df2:	494a      	ldr	r1, [pc, #296]	@ (8000f1c <main+0x150>)
 8000df4:	4848      	ldr	r0, [pc, #288]	@ (8000f18 <main+0x14c>)
 8000df6:	f008 fcc5 	bl	8009784 <HAL_UART_Receive_DMA>
  __HAL_DMA_ENABLE_IT(huart8.hdmarx,DMA_IT_HT);
 8000dfa:	4b47      	ldr	r3, [pc, #284]	@ (8000f18 <main+0x14c>)
 8000dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a47      	ldr	r2, [pc, #284]	@ (8000f20 <main+0x154>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d068      	beq.n	8000eda <main+0x10e>
 8000e08:	4b43      	ldr	r3, [pc, #268]	@ (8000f18 <main+0x14c>)
 8000e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a44      	ldr	r2, [pc, #272]	@ (8000f24 <main+0x158>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d061      	beq.n	8000eda <main+0x10e>
 8000e16:	4b40      	ldr	r3, [pc, #256]	@ (8000f18 <main+0x14c>)
 8000e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a42      	ldr	r2, [pc, #264]	@ (8000f28 <main+0x15c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d05a      	beq.n	8000eda <main+0x10e>
 8000e24:	4b3c      	ldr	r3, [pc, #240]	@ (8000f18 <main+0x14c>)
 8000e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a3f      	ldr	r2, [pc, #252]	@ (8000f2c <main+0x160>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d053      	beq.n	8000eda <main+0x10e>
 8000e32:	4b39      	ldr	r3, [pc, #228]	@ (8000f18 <main+0x14c>)
 8000e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f30 <main+0x164>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d04c      	beq.n	8000eda <main+0x10e>
 8000e40:	4b35      	ldr	r3, [pc, #212]	@ (8000f18 <main+0x14c>)
 8000e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a3a      	ldr	r2, [pc, #232]	@ (8000f34 <main+0x168>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d045      	beq.n	8000eda <main+0x10e>
 8000e4e:	4b32      	ldr	r3, [pc, #200]	@ (8000f18 <main+0x14c>)
 8000e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a38      	ldr	r2, [pc, #224]	@ (8000f38 <main+0x16c>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d03e      	beq.n	8000eda <main+0x10e>
 8000e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f18 <main+0x14c>)
 8000e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a35      	ldr	r2, [pc, #212]	@ (8000f3c <main+0x170>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d037      	beq.n	8000eda <main+0x10e>
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f18 <main+0x14c>)
 8000e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a33      	ldr	r2, [pc, #204]	@ (8000f40 <main+0x174>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d030      	beq.n	8000eda <main+0x10e>
 8000e78:	4b27      	ldr	r3, [pc, #156]	@ (8000f18 <main+0x14c>)
 8000e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a30      	ldr	r2, [pc, #192]	@ (8000f44 <main+0x178>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d029      	beq.n	8000eda <main+0x10e>
 8000e86:	4b24      	ldr	r3, [pc, #144]	@ (8000f18 <main+0x14c>)
 8000e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a2e      	ldr	r2, [pc, #184]	@ (8000f48 <main+0x17c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d022      	beq.n	8000eda <main+0x10e>
 8000e94:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <main+0x14c>)
 8000e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a2b      	ldr	r2, [pc, #172]	@ (8000f4c <main+0x180>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d01b      	beq.n	8000eda <main+0x10e>
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <main+0x14c>)
 8000ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a29      	ldr	r2, [pc, #164]	@ (8000f50 <main+0x184>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d014      	beq.n	8000eda <main+0x10e>
 8000eb0:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <main+0x14c>)
 8000eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a26      	ldr	r2, [pc, #152]	@ (8000f54 <main+0x188>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <main+0x10e>
 8000ebe:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <main+0x14c>)
 8000ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a24      	ldr	r2, [pc, #144]	@ (8000f58 <main+0x18c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d006      	beq.n	8000eda <main+0x10e>
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <main+0x14c>)
 8000ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a21      	ldr	r2, [pc, #132]	@ (8000f5c <main+0x190>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10c      	bne.n	8000ef4 <main+0x128>
 8000eda:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <main+0x14c>)
 8000edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <main+0x14c>)
 8000ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f042 0208 	orr.w	r2, r2, #8
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e00b      	b.n	8000f0c <main+0x140>
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <main+0x14c>)
 8000ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <main+0x14c>)
 8000f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0204 	orr.w	r2, r2, #4
 8000f0a:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f0c:	f7ff fd74 	bl	80009f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f10:	f00d fb4c 	bl	800e5ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <main+0x148>
 8000f18:	24000468 	.word	0x24000468
 8000f1c:	24000578 	.word	0x24000578
 8000f20:	40020010 	.word	0x40020010
 8000f24:	40020028 	.word	0x40020028
 8000f28:	40020040 	.word	0x40020040
 8000f2c:	40020058 	.word	0x40020058
 8000f30:	40020070 	.word	0x40020070
 8000f34:	40020088 	.word	0x40020088
 8000f38:	400200a0 	.word	0x400200a0
 8000f3c:	400200b8 	.word	0x400200b8
 8000f40:	40020410 	.word	0x40020410
 8000f44:	40020428 	.word	0x40020428
 8000f48:	40020440 	.word	0x40020440
 8000f4c:	40020458 	.word	0x40020458
 8000f50:	40020470 	.word	0x40020470
 8000f54:	40020488 	.word	0x40020488
 8000f58:	400204a0 	.word	0x400204a0
 8000f5c:	400204b8 	.word	0x400204b8

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b09c      	sub	sp, #112	@ 0x70
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f6a:	224c      	movs	r2, #76	@ 0x4c
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f00f fcdc 	bl	801092c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2220      	movs	r2, #32
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f00f fcd6 	bl	801092c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f80:	2002      	movs	r0, #2
 8000f82:	f005 fa49 	bl	8006418 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	4b31      	ldr	r3, [pc, #196]	@ (8001050 <SystemClock_Config+0xf0>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	4a30      	ldr	r2, [pc, #192]	@ (8001050 <SystemClock_Config+0xf0>)
 8000f90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f94:	6193      	str	r3, [r2, #24]
 8000f96:	4b2e      	ldr	r3, [pc, #184]	@ (8001050 <SystemClock_Config+0xf0>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8001054 <SystemClock_Config+0xf4>)
 8000fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8001054 <SystemClock_Config+0xf4>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fac:	4b29      	ldr	r3, [pc, #164]	@ (8001054 <SystemClock_Config+0xf4>)
 8000fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fb8:	bf00      	nop
 8000fba:	4b25      	ldr	r3, [pc, #148]	@ (8001050 <SystemClock_Config+0xf0>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fc6:	d1f8      	bne.n	8000fba <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000fc8:	2321      	movs	r3, #33	@ 0x21
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000fe2:	2378      	movs	r3, #120	@ 0x78
 8000fe4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001002:	4618      	mov	r0, r3
 8001004:	f005 fa52 	bl	80064ac <HAL_RCC_OscConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800100e:	f000 f861 	bl	80010d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001012:	233f      	movs	r3, #63	@ 0x3f
 8001014:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	2303      	movs	r3, #3
 8001018:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800101e:	2308      	movs	r3, #8
 8001020:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001022:	2340      	movs	r3, #64	@ 0x40
 8001024:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001026:	2340      	movs	r3, #64	@ 0x40
 8001028:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800102a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800102e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001030:	2340      	movs	r3, #64	@ 0x40
 8001032:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2104      	movs	r1, #4
 8001038:	4618      	mov	r0, r3
 800103a:	f005 fe91 	bl	8006d60 <HAL_RCC_ClockConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001044:	f000 f846 	bl	80010d4 <Error_Handler>
  }
}
 8001048:	bf00      	nop
 800104a:	3770      	adds	r7, #112	@ 0x70
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	58024800 	.word	0x58024800
 8001054:	58000400 	.word	0x58000400

08001058 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800105e:	463b      	mov	r3, r7
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800106a:	f001 f8f1 	bl	8002250 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800106e:	2301      	movs	r3, #1
 8001070:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001072:	2300      	movs	r3, #0
 8001074:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800107a:	231f      	movs	r3, #31
 800107c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800107e:	2387      	movs	r3, #135	@ 0x87
 8001080:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001082:	2300      	movs	r3, #0
 8001084:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001086:	2300      	movs	r3, #0
 8001088:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800108a:	2301      	movs	r3, #1
 800108c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800108e:	2301      	movs	r3, #1
 8001090:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800109a:	463b      	mov	r3, r7
 800109c:	4618      	mov	r0, r3
 800109e:	f001 f90f 	bl	80022c0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010a2:	2004      	movs	r0, #4
 80010a4:	f001 f8ec 	bl	8002280 <HAL_MPU_Enable>

}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80010c2:	f000 ff95 	bl	8001ff0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40010000 	.word	0x40010000

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <Error_Handler+0x8>

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <HAL_MspInit+0x38>)
 80010e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <HAL_MspInit+0x38>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010f6:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <HAL_MspInit+0x38>)
 80010f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	210f      	movs	r1, #15
 8001108:	f06f 0001 	mvn.w	r0, #1
 800110c:	f001 f878 	bl	8002200 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	58024400 	.word	0x58024400

0800111c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08e      	sub	sp, #56	@ 0x38
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	d844      	bhi.n	80011b4 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800112a:	2200      	movs	r2, #0
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	2019      	movs	r0, #25
 8001130:	f001 f866 	bl	8002200 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001134:	2019      	movs	r0, #25
 8001136:	f001 f87d 	bl	8002234 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800113a:	4a24      	ldr	r2, [pc, #144]	@ (80011cc <HAL_InitTick+0xb0>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001140:	4b23      	ldr	r3, [pc, #140]	@ (80011d0 <HAL_InitTick+0xb4>)
 8001142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001146:	4a22      	ldr	r2, [pc, #136]	@ (80011d0 <HAL_InitTick+0xb4>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001150:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <HAL_InitTick+0xb4>)
 8001152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800115e:	f107 020c 	add.w	r2, r7, #12
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f006 f985 	bl	8007478 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800116e:	f006 f96d 	bl	800744c <HAL_RCC_GetPCLK2Freq>
 8001172:	4603      	mov	r3, r0
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800117a:	4a16      	ldr	r2, [pc, #88]	@ (80011d4 <HAL_InitTick+0xb8>)
 800117c:	fba2 2303 	umull	r2, r3, r2, r3
 8001180:	0c9b      	lsrs	r3, r3, #18
 8001182:	3b01      	subs	r3, #1
 8001184:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <HAL_InitTick+0xbc>)
 8001188:	4a14      	ldr	r2, [pc, #80]	@ (80011dc <HAL_InitTick+0xc0>)
 800118a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <HAL_InitTick+0xbc>)
 800118e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001192:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001194:	4a10      	ldr	r2, [pc, #64]	@ (80011d8 <HAL_InitTick+0xbc>)
 8001196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001198:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <HAL_InitTick+0xbc>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <HAL_InitTick+0xbc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011a6:	480c      	ldr	r0, [pc, #48]	@ (80011d8 <HAL_InitTick+0xbc>)
 80011a8:	f007 ffd4 	bl	8009154 <HAL_TIM_Base_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d107      	bne.n	80011c2 <HAL_InitTick+0xa6>
 80011b2:	e001      	b.n	80011b8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e005      	b.n	80011c4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011b8:	4807      	ldr	r0, [pc, #28]	@ (80011d8 <HAL_InitTick+0xbc>)
 80011ba:	f008 f82d 	bl	8009218 <HAL_TIM_Base_Start_IT>
 80011be:	4603      	mov	r3, r0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3738      	adds	r7, #56	@ 0x38
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	24000008 	.word	0x24000008
 80011d0:	58024400 	.word	0x58024400
 80011d4:	431bde83 	.word	0x431bde83
 80011d8:	2400041c 	.word	0x2400041c
 80011dc:	40010000 	.word	0x40010000

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <NMI_Handler+0x4>

080011e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <MemManage_Handler+0x4>

080011f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <UsageFault_Handler+0x4>

08001208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800121c:	4802      	ldr	r0, [pc, #8]	@ (8001228 <DMA1_Stream0_IRQHandler+0x10>)
 800121e:	f002 f973 	bl	8003508 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	240004fc 	.word	0x240004fc

0800122c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001230:	4802      	ldr	r0, [pc, #8]	@ (800123c <TIM1_UP_IRQHandler+0x10>)
 8001232:	f008 f869 	bl	8009308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2400041c 	.word	0x2400041c

08001240 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001244:	4802      	ldr	r0, [pc, #8]	@ (8001250 <OTG_FS_IRQHandler+0x10>)
 8001246:	f003 ff87 	bl	8005158 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	24005f0c 	.word	0x24005f0c

08001254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001258:	4b43      	ldr	r3, [pc, #268]	@ (8001368 <SystemInit+0x114>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800125e:	4a42      	ldr	r2, [pc, #264]	@ (8001368 <SystemInit+0x114>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001268:	4b40      	ldr	r3, [pc, #256]	@ (800136c <SystemInit+0x118>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	2b06      	cmp	r3, #6
 8001272:	d807      	bhi.n	8001284 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001274:	4b3d      	ldr	r3, [pc, #244]	@ (800136c <SystemInit+0x118>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 030f 	bic.w	r3, r3, #15
 800127c:	4a3b      	ldr	r2, [pc, #236]	@ (800136c <SystemInit+0x118>)
 800127e:	f043 0307 	orr.w	r3, r3, #7
 8001282:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001284:	4b3a      	ldr	r3, [pc, #232]	@ (8001370 <SystemInit+0x11c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a39      	ldr	r2, [pc, #228]	@ (8001370 <SystemInit+0x11c>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001290:	4b37      	ldr	r3, [pc, #220]	@ (8001370 <SystemInit+0x11c>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001296:	4b36      	ldr	r3, [pc, #216]	@ (8001370 <SystemInit+0x11c>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4935      	ldr	r1, [pc, #212]	@ (8001370 <SystemInit+0x11c>)
 800129c:	4b35      	ldr	r3, [pc, #212]	@ (8001374 <SystemInit+0x120>)
 800129e:	4013      	ands	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012a2:	4b32      	ldr	r3, [pc, #200]	@ (800136c <SystemInit+0x118>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012ae:	4b2f      	ldr	r3, [pc, #188]	@ (800136c <SystemInit+0x118>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 030f 	bic.w	r3, r3, #15
 80012b6:	4a2d      	ldr	r2, [pc, #180]	@ (800136c <SystemInit+0x118>)
 80012b8:	f043 0307 	orr.w	r3, r3, #7
 80012bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012be:	4b2c      	ldr	r3, [pc, #176]	@ (8001370 <SystemInit+0x11c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001370 <SystemInit+0x11c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012ca:	4b29      	ldr	r3, [pc, #164]	@ (8001370 <SystemInit+0x11c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012d0:	4b27      	ldr	r3, [pc, #156]	@ (8001370 <SystemInit+0x11c>)
 80012d2:	4a29      	ldr	r2, [pc, #164]	@ (8001378 <SystemInit+0x124>)
 80012d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012d6:	4b26      	ldr	r3, [pc, #152]	@ (8001370 <SystemInit+0x11c>)
 80012d8:	4a28      	ldr	r2, [pc, #160]	@ (800137c <SystemInit+0x128>)
 80012da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012dc:	4b24      	ldr	r3, [pc, #144]	@ (8001370 <SystemInit+0x11c>)
 80012de:	4a28      	ldr	r2, [pc, #160]	@ (8001380 <SystemInit+0x12c>)
 80012e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012e2:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <SystemInit+0x11c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012e8:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <SystemInit+0x11c>)
 80012ea:	4a25      	ldr	r2, [pc, #148]	@ (8001380 <SystemInit+0x12c>)
 80012ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012ee:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <SystemInit+0x11c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <SystemInit+0x11c>)
 80012f6:	4a22      	ldr	r2, [pc, #136]	@ (8001380 <SystemInit+0x12c>)
 80012f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <SystemInit+0x11c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <SystemInit+0x11c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1a      	ldr	r2, [pc, #104]	@ (8001370 <SystemInit+0x11c>)
 8001306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800130a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <SystemInit+0x11c>)
 800130e:	2200      	movs	r2, #0
 8001310:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <SystemInit+0x130>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <SystemInit+0x134>)
 8001318:	4013      	ands	r3, r2
 800131a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800131e:	d202      	bcs.n	8001326 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001320:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <SystemInit+0x138>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <SystemInit+0x11c>)
 8001328:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800132c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d113      	bne.n	800135c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001334:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <SystemInit+0x11c>)
 8001336:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800133a:	4a0d      	ldr	r2, [pc, #52]	@ (8001370 <SystemInit+0x11c>)
 800133c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001340:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <SystemInit+0x13c>)
 8001346:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800134a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <SystemInit+0x11c>)
 800134e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001352:	4a07      	ldr	r2, [pc, #28]	@ (8001370 <SystemInit+0x11c>)
 8001354:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001358:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	52002000 	.word	0x52002000
 8001370:	58024400 	.word	0x58024400
 8001374:	eaf6ed7f 	.word	0xeaf6ed7f
 8001378:	02020200 	.word	0x02020200
 800137c:	01ff0000 	.word	0x01ff0000
 8001380:	01010280 	.word	0x01010280
 8001384:	5c001000 	.word	0x5c001000
 8001388:	ffff0000 	.word	0xffff0000
 800138c:	51008108 	.word	0x51008108
 8001390:	52004000 	.word	0x52004000

08001394 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <ExitRun0Mode+0x2c>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <ExitRun0Mode+0x2c>)
 800139e:	f043 0302 	orr.w	r3, r3, #2
 80013a2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80013a4:	bf00      	nop
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <ExitRun0Mode+0x2c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f9      	beq.n	80013a6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	58024800 	.word	0x58024800

080013c4 <MX_UART8_Init>:
UART_HandleTypeDef huart8;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80013c8:	4b22      	ldr	r3, [pc, #136]	@ (8001454 <MX_UART8_Init+0x90>)
 80013ca:	4a23      	ldr	r2, [pc, #140]	@ (8001458 <MX_UART8_Init+0x94>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80013ce:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <MX_UART8_Init+0x90>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <MX_UART8_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <MX_UART8_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <MX_UART8_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <MX_UART8_Init+0x90>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <MX_UART8_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <MX_UART8_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <MX_UART8_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001400:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_UART8_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001406:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <MX_UART8_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800140c:	4811      	ldr	r0, [pc, #68]	@ (8001454 <MX_UART8_Init+0x90>)
 800140e:	f008 f969 	bl	80096e4 <HAL_UART_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001418:	f7ff fe5c 	bl	80010d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141c:	2100      	movs	r1, #0
 800141e:	480d      	ldr	r0, [pc, #52]	@ (8001454 <MX_UART8_Init+0x90>)
 8001420:	f009 fcbc 	bl	800ad9c <HAL_UARTEx_SetTxFifoThreshold>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800142a:	f7ff fe53 	bl	80010d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142e:	2100      	movs	r1, #0
 8001430:	4808      	ldr	r0, [pc, #32]	@ (8001454 <MX_UART8_Init+0x90>)
 8001432:	f009 fcf1 	bl	800ae18 <HAL_UARTEx_SetRxFifoThreshold>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800143c:	f7ff fe4a 	bl	80010d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	@ (8001454 <MX_UART8_Init+0x90>)
 8001442:	f009 fc72 	bl	800ad2a <HAL_UARTEx_DisableFifoMode>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800144c:	f7ff fe42 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	24000468 	.word	0x24000468
 8001458:	40007c00 	.word	0x40007c00

0800145c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0ba      	sub	sp, #232	@ 0xe8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	22c0      	movs	r2, #192	@ 0xc0
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f00f fa55 	bl	801092c <memset>
  if(uartHandle->Instance==UART8)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a3e      	ldr	r2, [pc, #248]	@ (8001580 <HAL_UART_MspInit+0x124>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d174      	bne.n	8001576 <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800148c:	f04f 0202 	mov.w	r2, #2
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4618      	mov	r0, r3
 80014a4:	f006 f82a 	bl	80074fc <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014ae:	f7ff fe11 	bl	80010d4 <Error_Handler>
    }

    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80014b2:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <HAL_UART_MspInit+0x128>)
 80014b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014b8:	4a32      	ldr	r2, [pc, #200]	@ (8001584 <HAL_UART_MspInit+0x128>)
 80014ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80014be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014c2:	4b30      	ldr	r3, [pc, #192]	@ (8001584 <HAL_UART_MspInit+0x128>)
 80014c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001584 <HAL_UART_MspInit+0x128>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001584 <HAL_UART_MspInit+0x128>)
 80014d8:	f043 0310 	orr.w	r3, r3, #16
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e0:	4b28      	ldr	r3, [pc, #160]	@ (8001584 <HAL_UART_MspInit+0x128>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80014ee:	2303      	movs	r3, #3
 80014f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001506:	2308      	movs	r3, #8
 8001508:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800150c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001510:	4619      	mov	r1, r3
 8001512:	481d      	ldr	r0, [pc, #116]	@ (8001588 <HAL_UART_MspInit+0x12c>)
 8001514:	f003 fb16 	bl	8004b44 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream0;
 8001518:	4b1c      	ldr	r3, [pc, #112]	@ (800158c <HAL_UART_MspInit+0x130>)
 800151a:	4a1d      	ldr	r2, [pc, #116]	@ (8001590 <HAL_UART_MspInit+0x134>)
 800151c:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800151e:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <HAL_UART_MspInit+0x130>)
 8001520:	2251      	movs	r2, #81	@ 0x51
 8001522:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001524:	4b19      	ldr	r3, [pc, #100]	@ (800158c <HAL_UART_MspInit+0x130>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <HAL_UART_MspInit+0x130>)
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001530:	4b16      	ldr	r3, [pc, #88]	@ (800158c <HAL_UART_MspInit+0x130>)
 8001532:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001536:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <HAL_UART_MspInit+0x130>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800153e:	4b13      	ldr	r3, [pc, #76]	@ (800158c <HAL_UART_MspInit+0x130>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <HAL_UART_MspInit+0x130>)
 8001546:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800154a:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <HAL_UART_MspInit+0x130>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <HAL_UART_MspInit+0x130>)
 8001554:	2200      	movs	r2, #0
 8001556:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001558:	480c      	ldr	r0, [pc, #48]	@ (800158c <HAL_UART_MspInit+0x130>)
 800155a:	f000 fef1 	bl	8002340 <HAL_DMA_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001564:	f7ff fdb6 	bl	80010d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a08      	ldr	r2, [pc, #32]	@ (800158c <HAL_UART_MspInit+0x130>)
 800156c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001570:	4a06      	ldr	r2, [pc, #24]	@ (800158c <HAL_UART_MspInit+0x130>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8001576:	bf00      	nop
 8001578:	37e8      	adds	r7, #232	@ 0xe8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40007c00 	.word	0x40007c00
 8001584:	58024400 	.word	0x58024400
 8001588:	58021000 	.word	0x58021000
 800158c:	240004fc 	.word	0x240004fc
 8001590:	40020010 	.word	0x40020010

08001594 <HAL_UART_RxHalfCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    if(huart->Instance==UART8){
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a08      	ldr	r2, [pc, #32]	@ (80015c4 <HAL_UART_RxHalfCpltCallback+0x30>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d109      	bne.n	80015ba <HAL_UART_RxHalfCpltCallback+0x26>
    	ylidar_write_index=512;
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_UART_RxHalfCpltCallback+0x34>)
 80015a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ac:	801a      	strh	r2, [r3, #0]
    	osSignalSet(lidarparseHandle, SIG_LIDAR_HALF);
 80015ae:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <HAL_UART_RxHalfCpltCallback+0x38>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2101      	movs	r1, #1
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00d f861 	bl	800e67c <osSignalSet>

    }
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40007c00 	.word	0x40007c00
 80015c8:	24000576 	.word	0x24000576
 80015cc:	24000178 	.word	0x24000178

080015d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART8){
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a08      	ldr	r2, [pc, #32]	@ (8001600 <HAL_UART_RxCpltCallback+0x30>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d109      	bne.n	80015f6 <HAL_UART_RxCpltCallback+0x26>
    	ylidar_write_index=1023;
 80015e2:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <HAL_UART_RxCpltCallback+0x34>)
 80015e4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80015e8:	801a      	strh	r2, [r3, #0]
    	osSignalSet(lidarparseHandle, SIG_LIDAR_HALF);
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <HAL_UART_RxCpltCallback+0x38>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2101      	movs	r1, #1
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00d f843 	bl	800e67c <osSignalSet>

	    }
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40007c00 	.word	0x40007c00
 8001604:	24000576 	.word	0x24000576
 8001608:	24000178 	.word	0x24000178
 800160c:	00000000 	.word	0x00000000

08001610 <ylidar_fsm>:
} Object;

Object objects[10];

void ylidar_fsm(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
	switch (ydlidarstate)
 8001616:	4b5a      	ldr	r3, [pc, #360]	@ (8001780 <ylidar_fsm+0x170>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b04      	cmp	r3, #4
 800161c:	f200 82b0 	bhi.w	8001b80 <ylidar_fsm+0x570>
 8001620:	a201      	add	r2, pc, #4	@ (adr r2, 8001628 <ylidar_fsm+0x18>)
 8001622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001626:	bf00      	nop
 8001628:	0800163d 	.word	0x0800163d
 800162c:	080016a5 	.word	0x080016a5
 8001630:	08001709 	.word	0x08001709
 8001634:	08001799 	.word	0x08001799
 8001638:	080018d1 	.word	0x080018d1
	{
	case FSM_STATE_0:

		if((ylidar_circular_buffer[ylidar_read_index]==0xAA)&& (ylidar_circular_buffer[(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE]==0x55)){
 800163c:	4b51      	ldr	r3, [pc, #324]	@ (8001784 <ylidar_fsm+0x174>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b51      	ldr	r3, [pc, #324]	@ (8001788 <ylidar_fsm+0x178>)
 8001644:	5c9b      	ldrb	r3, [r3, r2]
 8001646:	2baa      	cmp	r3, #170	@ 0xaa
 8001648:	d11e      	bne.n	8001688 <ylidar_fsm+0x78>
 800164a:	4b4e      	ldr	r3, [pc, #312]	@ (8001784 <ylidar_fsm+0x174>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	3301      	adds	r3, #1
 8001650:	425a      	negs	r2, r3
 8001652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001656:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800165a:	bf58      	it	pl
 800165c:	4253      	negpl	r3, r2
 800165e:	4a4a      	ldr	r2, [pc, #296]	@ (8001788 <ylidar_fsm+0x178>)
 8001660:	5cd3      	ldrb	r3, [r2, r3]
 8001662:	2b55      	cmp	r3, #85	@ 0x55
 8001664:	d110      	bne.n	8001688 <ylidar_fsm+0x78>
			ydlidarstate=FSM_STATE_1;
 8001666:	4b46      	ldr	r3, [pc, #280]	@ (8001780 <ylidar_fsm+0x170>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
			ylidar_read_index=(ylidar_read_index+2)%YLIDAR_CIRC_BUF_SIZE;
 800166c:	4b45      	ldr	r3, [pc, #276]	@ (8001784 <ylidar_fsm+0x174>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	3302      	adds	r3, #2
 8001672:	425a      	negs	r2, r3
 8001674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001678:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800167c:	bf58      	it	pl
 800167e:	4253      	negpl	r3, r2
 8001680:	b29a      	uxth	r2, r3
 8001682:	4b40      	ldr	r3, [pc, #256]	@ (8001784 <ylidar_fsm+0x174>)
 8001684:	801a      	strh	r2, [r3, #0]
		}
		else{
			ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
		}

		break;
 8001686:	e280      	b.n	8001b8a <ylidar_fsm+0x57a>
			ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
 8001688:	4b3e      	ldr	r3, [pc, #248]	@ (8001784 <ylidar_fsm+0x174>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	425a      	negs	r2, r3
 8001690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001694:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001698:	bf58      	it	pl
 800169a:	4253      	negpl	r3, r2
 800169c:	b29a      	uxth	r2, r3
 800169e:	4b39      	ldr	r3, [pc, #228]	@ (8001784 <ylidar_fsm+0x174>)
 80016a0:	801a      	strh	r2, [r3, #0]
		break;
 80016a2:	e272      	b.n	8001b8a <ylidar_fsm+0x57a>

	case FSM_STATE_1:

		if(!(ylidar_circular_buffer[ylidar_read_index]&0x01)){
 80016a4:	4b37      	ldr	r3, [pc, #220]	@ (8001784 <ylidar_fsm+0x174>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b37      	ldr	r3, [pc, #220]	@ (8001788 <ylidar_fsm+0x178>)
 80016ac:	5c9b      	ldrb	r3, [r3, r2]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d117      	bne.n	80016e6 <ylidar_fsm+0xd6>
			ydlidarstate=FSM_STATE_2;
 80016b6:	4b32      	ldr	r3, [pc, #200]	@ (8001780 <ylidar_fsm+0x170>)
 80016b8:	2202      	movs	r2, #2
 80016ba:	701a      	strb	r2, [r3, #0]
			CT = ylidar_circular_buffer[ylidar_read_index];
 80016bc:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <ylidar_fsm+0x174>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b31      	ldr	r3, [pc, #196]	@ (8001788 <ylidar_fsm+0x178>)
 80016c4:	5c9a      	ldrb	r2, [r3, r2]
 80016c6:	4b31      	ldr	r3, [pc, #196]	@ (800178c <ylidar_fsm+0x17c>)
 80016c8:	701a      	strb	r2, [r3, #0]
			ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
 80016ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001784 <ylidar_fsm+0x174>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	425a      	negs	r2, r3
 80016d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80016da:	bf58      	it	pl
 80016dc:	4253      	negpl	r3, r2
 80016de:	b29a      	uxth	r2, r3
 80016e0:	4b28      	ldr	r3, [pc, #160]	@ (8001784 <ylidar_fsm+0x174>)
 80016e2:	801a      	strh	r2, [r3, #0]
		else{
			ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
			ydlidarstate=FSM_STATE_0;
		}

		break;
 80016e4:	e251      	b.n	8001b8a <ylidar_fsm+0x57a>
			ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
 80016e6:	4b27      	ldr	r3, [pc, #156]	@ (8001784 <ylidar_fsm+0x174>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	425a      	negs	r2, r3
 80016ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016f2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80016f6:	bf58      	it	pl
 80016f8:	4253      	negpl	r3, r2
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <ylidar_fsm+0x174>)
 80016fe:	801a      	strh	r2, [r3, #0]
			ydlidarstate=FSM_STATE_0;
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <ylidar_fsm+0x170>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
		break;
 8001706:	e240      	b.n	8001b8a <ylidar_fsm+0x57a>

	case FSM_STATE_2:

		LSN=ylidar_circular_buffer[ylidar_read_index];
 8001708:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <ylidar_fsm+0x174>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <ylidar_fsm+0x178>)
 8001710:	5c9a      	ldrb	r2, [r3, r2]
 8001712:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <ylidar_fsm+0x180>)
 8001714:	701a      	strb	r2, [r3, #0]
		uint16_t available=0;
 8001716:	2300      	movs	r3, #0
 8001718:	83fb      	strh	r3, [r7, #30]

		if (ylidar_write_index >= ylidar_read_index) {
 800171a:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <ylidar_fsm+0x184>)
 800171c:	881a      	ldrh	r2, [r3, #0]
 800171e:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <ylidar_fsm+0x174>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d306      	bcc.n	8001734 <ylidar_fsm+0x124>
			available = ylidar_write_index - ylidar_read_index;
 8001726:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <ylidar_fsm+0x184>)
 8001728:	881a      	ldrh	r2, [r3, #0]
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <ylidar_fsm+0x174>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	83fb      	strh	r3, [r7, #30]
 8001732:	e008      	b.n	8001746 <ylidar_fsm+0x136>
		}
		else {
			available = (YLIDAR_CIRC_BUF_SIZE - ylidar_read_index) + ylidar_write_index;
 8001734:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <ylidar_fsm+0x184>)
 8001736:	881a      	ldrh	r2, [r3, #0]
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <ylidar_fsm+0x174>)
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b29b      	uxth	r3, r3
 8001740:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001744:	83fb      	strh	r3, [r7, #30]
		}

		uint16_t needed=LSN*2+6;
 8001746:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <ylidar_fsm+0x180>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	3303      	adds	r3, #3
 800174c:	b29b      	uxth	r3, r3
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	80bb      	strh	r3, [r7, #4]

		if(needed<=available){
 8001752:	88ba      	ldrh	r2, [r7, #4]
 8001754:	8bfb      	ldrh	r3, [r7, #30]
 8001756:	429a      	cmp	r2, r3
 8001758:	f200 8216 	bhi.w	8001b88 <ylidar_fsm+0x578>
			ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <ylidar_fsm+0x174>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	425a      	negs	r2, r3
 8001764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001768:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800176c:	bf58      	it	pl
 800176e:	4253      	negpl	r3, r2
 8001770:	b29a      	uxth	r2, r3
 8001772:	4b04      	ldr	r3, [pc, #16]	@ (8001784 <ylidar_fsm+0x174>)
 8001774:	801a      	strh	r2, [r3, #0]
			ydlidarstate=FSM_STATE_3;
 8001776:	4b02      	ldr	r3, [pc, #8]	@ (8001780 <ylidar_fsm+0x170>)
 8001778:	2203      	movs	r2, #3
 800177a:	701a      	strb	r2, [r3, #0]
		}

		break;
 800177c:	e204      	b.n	8001b88 <ylidar_fsm+0x578>
 800177e:	bf00      	nop
 8001780:	24000978 	.word	0x24000978
 8001784:	24000574 	.word	0x24000574
 8001788:	24000578 	.word	0x24000578
 800178c:	2400097b 	.word	0x2400097b
 8001790:	2400097a 	.word	0x2400097a
 8001794:	24000576 	.word	0x24000576

	case FSM_STATE_3:

		FSA=(((ylidar_circular_buffer[(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE]<<8) | ylidar_circular_buffer[ylidar_read_index]));
 8001798:	4ba9      	ldr	r3, [pc, #676]	@ (8001a40 <ylidar_fsm+0x430>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	425a      	negs	r2, r3
 80017a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80017a8:	bf58      	it	pl
 80017aa:	4253      	negpl	r3, r2
 80017ac:	4aa5      	ldr	r2, [pc, #660]	@ (8001a44 <ylidar_fsm+0x434>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	4ba2      	ldr	r3, [pc, #648]	@ (8001a40 <ylidar_fsm+0x430>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	4619      	mov	r1, r3
 80017bc:	4ba1      	ldr	r3, [pc, #644]	@ (8001a44 <ylidar_fsm+0x434>)
 80017be:	5c5b      	ldrb	r3, [r3, r1]
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b9f      	ldr	r3, [pc, #636]	@ (8001a48 <ylidar_fsm+0x438>)
 80017ca:	801a      	strh	r2, [r3, #0]
		LSA=(((ylidar_circular_buffer[(ylidar_read_index+3)%YLIDAR_CIRC_BUF_SIZE]<<8) | ylidar_circular_buffer[(ylidar_read_index+2)%YLIDAR_CIRC_BUF_SIZE]));
 80017cc:	4b9c      	ldr	r3, [pc, #624]	@ (8001a40 <ylidar_fsm+0x430>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	3303      	adds	r3, #3
 80017d2:	425a      	negs	r2, r3
 80017d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017d8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80017dc:	bf58      	it	pl
 80017de:	4253      	negpl	r3, r2
 80017e0:	4a98      	ldr	r2, [pc, #608]	@ (8001a44 <ylidar_fsm+0x434>)
 80017e2:	5cd3      	ldrb	r3, [r2, r3]
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	4b95      	ldr	r3, [pc, #596]	@ (8001a40 <ylidar_fsm+0x430>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	3302      	adds	r3, #2
 80017f0:	4259      	negs	r1, r3
 80017f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017f6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80017fa:	bf58      	it	pl
 80017fc:	424b      	negpl	r3, r1
 80017fe:	4991      	ldr	r1, [pc, #580]	@ (8001a44 <ylidar_fsm+0x434>)
 8001800:	5ccb      	ldrb	r3, [r1, r3]
 8001802:	b21b      	sxth	r3, r3
 8001804:	4313      	orrs	r3, r2
 8001806:	b21b      	sxth	r3, r3
 8001808:	b29a      	uxth	r2, r3
 800180a:	4b90      	ldr	r3, [pc, #576]	@ (8001a4c <ylidar_fsm+0x43c>)
 800180c:	801a      	strh	r2, [r3, #0]
		CHECKSUM= (uint16_t) (ylidar_circular_buffer[(ylidar_read_index+4)%YLIDAR_CIRC_BUF_SIZE]<<8) | ylidar_circular_buffer[(ylidar_read_index+5)%YLIDAR_CIRC_BUF_SIZE];
 800180e:	4b8c      	ldr	r3, [pc, #560]	@ (8001a40 <ylidar_fsm+0x430>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	3304      	adds	r3, #4
 8001814:	425a      	negs	r2, r3
 8001816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800181a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800181e:	bf58      	it	pl
 8001820:	4253      	negpl	r3, r2
 8001822:	4a88      	ldr	r2, [pc, #544]	@ (8001a44 <ylidar_fsm+0x434>)
 8001824:	5cd3      	ldrb	r3, [r2, r3]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	b29a      	uxth	r2, r3
 800182a:	4b85      	ldr	r3, [pc, #532]	@ (8001a40 <ylidar_fsm+0x430>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	3305      	adds	r3, #5
 8001830:	4259      	negs	r1, r3
 8001832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001836:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800183a:	bf58      	it	pl
 800183c:	424b      	negpl	r3, r1
 800183e:	4981      	ldr	r1, [pc, #516]	@ (8001a44 <ylidar_fsm+0x434>)
 8001840:	5ccb      	ldrb	r3, [r1, r3]
 8001842:	4313      	orrs	r3, r2
 8001844:	b29a      	uxth	r2, r3
 8001846:	4b82      	ldr	r3, [pc, #520]	@ (8001a50 <ylidar_fsm+0x440>)
 8001848:	801a      	strh	r2, [r3, #0]
		ylidar_read_index=(ylidar_read_index+6)%YLIDAR_CIRC_BUF_SIZE;
 800184a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a40 <ylidar_fsm+0x430>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	3306      	adds	r3, #6
 8001850:	425a      	negs	r2, r3
 8001852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001856:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800185a:	bf58      	it	pl
 800185c:	4253      	negpl	r3, r2
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b77      	ldr	r3, [pc, #476]	@ (8001a40 <ylidar_fsm+0x430>)
 8001862:	801a      	strh	r2, [r3, #0]
		//			  XOR ^= (uint16_t)((ylidar_circular_buffer[(ylidar_read_index + i)] << 8)|
		//					  (ylidar_circular_buffer[(ylidar_read_index + i + 1) % YLIDAR_CIRC_BUF_SIZE]));
		//			}

		//			if (CHECKSUM == XOR){
		FSA_float = (float)((FSA /*& 0xFFFE*/) >> 1) / 64;
 8001864:	4b78      	ldr	r3, [pc, #480]	@ (8001a48 <ylidar_fsm+0x438>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	b29b      	uxth	r3, r3
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001874:	eddf 6a77 	vldr	s13, [pc, #476]	@ 8001a54 <ylidar_fsm+0x444>
 8001878:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800187c:	4b76      	ldr	r3, [pc, #472]	@ (8001a58 <ylidar_fsm+0x448>)
 800187e:	edc3 7a00 	vstr	s15, [r3]
		LSA_float = (float)((LSA /*& 0xFFFE*/) >> 1) / 64;
 8001882:	4b72      	ldr	r3, [pc, #456]	@ (8001a4c <ylidar_fsm+0x43c>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	085b      	lsrs	r3, r3, #1
 8001888:	b29b      	uxth	r3, r3
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001892:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8001a54 <ylidar_fsm+0x444>
 8001896:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189a:	4b70      	ldr	r3, [pc, #448]	@ (8001a5c <ylidar_fsm+0x44c>)
 800189c:	edc3 7a00 	vstr	s15, [r3]
		if (LSA_float < FSA_float) {
 80018a0:	4b6e      	ldr	r3, [pc, #440]	@ (8001a5c <ylidar_fsm+0x44c>)
 80018a2:	ed93 7a00 	vldr	s14, [r3]
 80018a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001a58 <ylidar_fsm+0x448>)
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	d509      	bpl.n	80018ca <ylidar_fsm+0x2ba>
			LSA_float += 360.0;
 80018b6:	4b69      	ldr	r3, [pc, #420]	@ (8001a5c <ylidar_fsm+0x44c>)
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001a60 <ylidar_fsm+0x450>
 80018c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018c4:	4b65      	ldr	r3, [pc, #404]	@ (8001a5c <ylidar_fsm+0x44c>)
 80018c6:	edc3 7a00 	vstr	s15, [r3]
		}
		ydlidarstate = FSM_STATE_4;
 80018ca:	4b66      	ldr	r3, [pc, #408]	@ (8001a64 <ylidar_fsm+0x454>)
 80018cc:	2204      	movs	r2, #4
 80018ce:	701a      	strb	r2, [r3, #0]
		//				ydlidarstate = FSM_STATE_0;
		//			}

	case FSM_STATE_4:

		uint16_t distance=(uint16_t)((ylidar_circular_buffer[(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE]<<8) | ylidar_circular_buffer[(ylidar_read_index)%YLIDAR_CIRC_BUF_SIZE])/4;
 80018d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a40 <ylidar_fsm+0x430>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	3301      	adds	r3, #1
 80018d6:	425a      	negs	r2, r3
 80018d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018dc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80018e0:	bf58      	it	pl
 80018e2:	4253      	negpl	r3, r2
 80018e4:	4a57      	ldr	r2, [pc, #348]	@ (8001a44 <ylidar_fsm+0x434>)
 80018e6:	5cd3      	ldrb	r3, [r2, r3]
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	4b54      	ldr	r3, [pc, #336]	@ (8001a40 <ylidar_fsm+0x430>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018f6:	4953      	ldr	r1, [pc, #332]	@ (8001a44 <ylidar_fsm+0x434>)
 80018f8:	5ccb      	ldrb	r3, [r1, r3]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b21b      	sxth	r3, r3
 8001900:	b29b      	uxth	r3, r3
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	82fb      	strh	r3, [r7, #22]
		float AngleCorrect1 = ((distance) == 0) ? 0 : atanf(21.8 * ((155.3 - distance) / (155.3 * distance)));
 8001906:	8afb      	ldrh	r3, [r7, #22]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d020      	beq.n	800194e <ylidar_fsm+0x33e>
 800190c:	8afb      	ldrh	r3, [r7, #22]
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001916:	ed9f 6b46 	vldr	d6, [pc, #280]	@ 8001a30 <ylidar_fsm+0x420>
 800191a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800191e:	8afb      	ldrh	r3, [r7, #22]
 8001920:	ee07 3a90 	vmov	s15, r3
 8001924:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001928:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8001a30 <ylidar_fsm+0x420>
 800192c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001930:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001934:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 8001a38 <ylidar_fsm+0x428>
 8001938:	ee27 7b06 	vmul.f64	d7, d7, d6
 800193c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001940:	eeb0 0a67 	vmov.f32	s0, s15
 8001944:	f00f f8f8 	bl	8010b38 <atanf>
 8001948:	eef0 7a40 	vmov.f32	s15, s0
 800194c:	e001      	b.n	8001952 <ylidar_fsm+0x342>
 800194e:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8001a70 <ylidar_fsm+0x460>
 8001952:	edc7 7a04 	vstr	s15, [r7, #16]
		uint16_t Angle1 = ((uint16_t)floorf(FSA_float+AngleCorrect1))%360;
 8001956:	4b40      	ldr	r3, [pc, #256]	@ (8001a58 <ylidar_fsm+0x448>)
 8001958:	ed93 7a00 	vldr	s14, [r3]
 800195c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001964:	eeb0 0a67 	vmov.f32	s0, s15
 8001968:	f00f fc56 	bl	8011218 <floorf>
 800196c:	eef0 7a40 	vmov.f32	s15, s0
 8001970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001974:	ee17 3a90 	vmov	r3, s15
 8001978:	b29b      	uxth	r3, r3
 800197a:	08da      	lsrs	r2, r3, #3
 800197c:	493a      	ldr	r1, [pc, #232]	@ (8001a68 <ylidar_fsm+0x458>)
 800197e:	fba1 1202 	umull	r1, r2, r1, r2
 8001982:	0892      	lsrs	r2, r2, #2
 8001984:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001988:	fb01 f202 	mul.w	r2, r1, r2
 800198c:	1a9b      	subs	r3, r3, r2
 800198e:	81fb      	strh	r3, [r7, #14]
		ylidar_finalbuffer[Angle1]= (distance>=1000) ? 0 : distance ;
 8001990:	8afb      	ldrh	r3, [r7, #22]
 8001992:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001996:	d201      	bcs.n	800199c <ylidar_fsm+0x38c>
 8001998:	8afa      	ldrh	r2, [r7, #22]
 800199a:	e000      	b.n	800199e <ylidar_fsm+0x38e>
 800199c:	2200      	movs	r2, #0
 800199e:	89fb      	ldrh	r3, [r7, #14]
 80019a0:	4932      	ldr	r1, [pc, #200]	@ (8001a6c <ylidar_fsm+0x45c>)
 80019a2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		distance=(uint16_t) ((ylidar_circular_buffer[(ylidar_read_index+3)%YLIDAR_CIRC_BUF_SIZE]<<8) | ylidar_circular_buffer[(ylidar_read_index+2)%YLIDAR_CIRC_BUF_SIZE])/4;
 80019a6:	4b26      	ldr	r3, [pc, #152]	@ (8001a40 <ylidar_fsm+0x430>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	3303      	adds	r3, #3
 80019ac:	425a      	negs	r2, r3
 80019ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80019b6:	bf58      	it	pl
 80019b8:	4253      	negpl	r3, r2
 80019ba:	4a22      	ldr	r2, [pc, #136]	@ (8001a44 <ylidar_fsm+0x434>)
 80019bc:	5cd3      	ldrb	r3, [r2, r3]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a40 <ylidar_fsm+0x430>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	3302      	adds	r3, #2
 80019ca:	4259      	negs	r1, r3
 80019cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019d0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80019d4:	bf58      	it	pl
 80019d6:	424b      	negpl	r3, r1
 80019d8:	491a      	ldr	r1, [pc, #104]	@ (8001a44 <ylidar_fsm+0x434>)
 80019da:	5ccb      	ldrb	r3, [r1, r3]
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4313      	orrs	r3, r2
 80019e0:	b21b      	sxth	r3, r3
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	82fb      	strh	r3, [r7, #22]
		float AngleCorrectLSN = ((distance) == 0) ? 0 : atanf(21.8 * ((155.3 - distance) / (155.3 * distance)));
 80019e8:	8afb      	ldrh	r3, [r7, #22]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d042      	beq.n	8001a74 <ylidar_fsm+0x464>
 80019ee:	8afb      	ldrh	r3, [r7, #22]
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019f8:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8001a30 <ylidar_fsm+0x420>
 80019fc:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001a00:	8afb      	ldrh	r3, [r7, #22]
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a0a:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8001a30 <ylidar_fsm+0x420>
 8001a0e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a12:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a16:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8001a38 <ylidar_fsm+0x428>
 8001a1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a22:	eeb0 0a67 	vmov.f32	s0, s15
 8001a26:	f00f f887 	bl	8010b38 <atanf>
 8001a2a:	eef0 7a40 	vmov.f32	s15, s0
 8001a2e:	e023      	b.n	8001a78 <ylidar_fsm+0x468>
 8001a30:	9999999a 	.word	0x9999999a
 8001a34:	40636999 	.word	0x40636999
 8001a38:	cccccccd 	.word	0xcccccccd
 8001a3c:	4035cccc 	.word	0x4035cccc
 8001a40:	24000574 	.word	0x24000574
 8001a44:	24000578 	.word	0x24000578
 8001a48:	24000c54 	.word	0x24000c54
 8001a4c:	24000c56 	.word	0x24000c56
 8001a50:	24000c58 	.word	0x24000c58
 8001a54:	42800000 	.word	0x42800000
 8001a58:	24000c4c 	.word	0x24000c4c
 8001a5c:	24000c50 	.word	0x24000c50
 8001a60:	43b40000 	.word	0x43b40000
 8001a64:	24000978 	.word	0x24000978
 8001a68:	16c16c17 	.word	0x16c16c17
 8001a6c:	2400097c 	.word	0x2400097c
 8001a70:	00000000 	.word	0x00000000
 8001a74:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8001a70 <ylidar_fsm+0x460>
 8001a78:	edc7 7a02 	vstr	s15, [r7, #8]
		uint16_t Angle2 = ((uint16_t)floorf(LSA_float+AngleCorrectLSN))%360;
 8001a7c:	4b45      	ldr	r3, [pc, #276]	@ (8001b94 <ylidar_fsm+0x584>)
 8001a7e:	ed93 7a00 	vldr	s14, [r3]
 8001a82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8e:	f00f fbc3 	bl	8011218 <floorf>
 8001a92:	eef0 7a40 	vmov.f32	s15, s0
 8001a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a9a:	ee17 3a90 	vmov	r3, s15
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	493d      	ldr	r1, [pc, #244]	@ (8001b98 <ylidar_fsm+0x588>)
 8001aa4:	fba1 1202 	umull	r1, r2, r1, r2
 8001aa8:	0892      	lsrs	r2, r2, #2
 8001aaa:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001aae:	fb01 f202 	mul.w	r2, r1, r2
 8001ab2:	1a9b      	subs	r3, r3, r2
 8001ab4:	80fb      	strh	r3, [r7, #6]
		ylidar_read_index=(ylidar_read_index+4)%YLIDAR_CIRC_BUF_SIZE;
 8001ab6:	4b39      	ldr	r3, [pc, #228]	@ (8001b9c <ylidar_fsm+0x58c>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	3304      	adds	r3, #4
 8001abc:	425a      	negs	r2, r3
 8001abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001ac6:	bf58      	it	pl
 8001ac8:	4253      	negpl	r3, r2
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4b33      	ldr	r3, [pc, #204]	@ (8001b9c <ylidar_fsm+0x58c>)
 8001ace:	801a      	strh	r2, [r3, #0]

		for(int i=2;i<Angle2-Angle1;i++) {
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	e04a      	b.n	8001b6c <ylidar_fsm+0x55c>

			distance=(uint16_t) floorf(((ylidar_circular_buffer[(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE]<<8) | ylidar_circular_buffer[(ylidar_read_index)%YLIDAR_CIRC_BUF_SIZE])/4);
 8001ad6:	4b31      	ldr	r3, [pc, #196]	@ (8001b9c <ylidar_fsm+0x58c>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	425a      	negs	r2, r3
 8001ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ae2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001ae6:	bf58      	it	pl
 8001ae8:	4253      	negpl	r3, r2
 8001aea:	4a2d      	ldr	r2, [pc, #180]	@ (8001ba0 <ylidar_fsm+0x590>)
 8001aec:	5cd3      	ldrb	r3, [r2, r3]
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b9c <ylidar_fsm+0x58c>)
 8001af2:	8812      	ldrh	r2, [r2, #0]
 8001af4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001af8:	4929      	ldr	r1, [pc, #164]	@ (8001ba0 <ylidar_fsm+0x590>)
 8001afa:	5c8a      	ldrb	r2, [r1, r2]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	da00      	bge.n	8001b04 <ylidar_fsm+0x4f4>
 8001b02:	3303      	adds	r3, #3
 8001b04:	109b      	asrs	r3, r3, #2
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b12:	ee17 3a90 	vmov	r3, s15
 8001b16:	82fb      	strh	r3, [r7, #22]

			ylidar_finalbuffer[(Angle1+i)%360]= (distance>=LidarMaxDepth) ? 0 : distance;
 8001b18:	8afb      	ldrh	r3, [r7, #22]
 8001b1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b1e:	d201      	bcs.n	8001b24 <ylidar_fsm+0x514>
 8001b20:	8af8      	ldrh	r0, [r7, #22]
 8001b22:	e000      	b.n	8001b26 <ylidar_fsm+0x516>
 8001b24:	2000      	movs	r0, #0
 8001b26:	89fa      	ldrh	r2, [r7, #14]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ba4 <ylidar_fsm+0x594>)
 8001b2e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b32:	441a      	add	r2, r3
 8001b34:	1211      	asrs	r1, r2, #8
 8001b36:	17da      	asrs	r2, r3, #31
 8001b38:	1a8a      	subs	r2, r1, r2
 8001b3a:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001b3e:	fb01 f202 	mul.w	r2, r1, r2
 8001b42:	1a9a      	subs	r2, r3, r2
 8001b44:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <ylidar_fsm+0x598>)
 8001b46:	4601      	mov	r1, r0
 8001b48:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			ylidar_read_index=(ylidar_read_index+2)%YLIDAR_CIRC_BUF_SIZE;
 8001b4c:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <ylidar_fsm+0x58c>)
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	3302      	adds	r3, #2
 8001b52:	425a      	negs	r2, r3
 8001b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b58:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001b5c:	bf58      	it	pl
 8001b5e:	4253      	negpl	r3, r2
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <ylidar_fsm+0x58c>)
 8001b64:	801a      	strh	r2, [r3, #0]
		for(int i=2;i<Angle2-Angle1;i++) {
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	61bb      	str	r3, [r7, #24]
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	89fb      	ldrh	r3, [r7, #14]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbae      	blt.n	8001ad6 <ylidar_fsm+0x4c6>

		}
		ydlidarstate=FSM_STATE_0;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <ylidar_fsm+0x59c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]

		break;
 8001b7e:	e004      	b.n	8001b8a <ylidar_fsm+0x57a>

	default:
		ydlidarstate=FSM_STATE_0;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <ylidar_fsm+0x59c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
		break;
 8001b86:	e000      	b.n	8001b8a <ylidar_fsm+0x57a>
		break;
 8001b88:	bf00      	nop
	}
	//    ylidar_finalbuffer[720]='\n';
	//    ylidar_finalbuffer[721]='\r';
}
 8001b8a:	bf00      	nop
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	24000c50 	.word	0x24000c50
 8001b98:	16c16c17 	.word	0x16c16c17
 8001b9c:	24000574 	.word	0x24000574
 8001ba0:	24000578 	.word	0x24000578
 8001ba4:	b60b60b7 	.word	0xb60b60b7
 8001ba8:	2400097c 	.word	0x2400097c
 8001bac:	24000978 	.word	0x24000978

08001bb0 <trackObject>:

void trackObject(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	ed2d 8b02 	vpush	{d8}
 8001bb6:	b0e2      	sub	sp, #392	@ 0x188
 8001bb8:	af00      	add	r7, sp, #0
	uint16_t start = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
	uint16_t end = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8a7 3184 	strh.w	r3, [r7, #388]	@ 0x184
	uint8_t nb_objects = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 3183 	strb.w	r3, [r7, #387]	@ 0x183
	uint16_t temp_cluster[180];
	uint16_t avg_distance;
	float size;
	uint16_t j = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8a7 317a 	strh.w	r3, [r7, #378]	@ 0x17a
    memset(temp_cluster, 0, sizeof(temp_cluster));
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f00e fea6 	bl	801092c <memset>


	for (int i = 0; i < 358; i++) {
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001be6:	e17c      	b.n	8001ee2 <trackObject+0x332>

		switch (clusterstate){
 8001be8:	4bc7      	ldr	r3, [pc, #796]	@ (8001f08 <trackObject+0x358>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	f000 8111 	beq.w	8001e14 <trackObject+0x264>
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	f300 8169 	bgt.w	8001eca <trackObject+0x31a>
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <trackObject+0x52>
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d03a      	beq.n	8001c76 <trackObject+0xc6>
 8001c00:	e163      	b.n	8001eca <trackObject+0x31a>

		case SEARCHING:
			j = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8a7 317a 	strh.w	r3, [r7, #378]	@ 0x17a
			if ( (ylidar_finalbuffer[i] - ylidar_finalbuffer[(i-1)%359]) >= -ClusterThreshold ) {
 8001c08:	4ac0      	ldr	r2, [pc, #768]	@ (8001f0c <trackObject+0x35c>)
 8001c0a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	4abd      	ldr	r2, [pc, #756]	@ (8001f10 <trackObject+0x360>)
 8001c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c20:	441a      	add	r2, r3
 8001c22:	1211      	asrs	r1, r2, #8
 8001c24:	17da      	asrs	r2, r3, #31
 8001c26:	1a8a      	subs	r2, r1, r2
 8001c28:	f240 1167 	movw	r1, #359	@ 0x167
 8001c2c:	fb01 f202 	mul.w	r2, r1, r2
 8001c30:	1a9a      	subs	r2, r3, r2
 8001c32:	4bb6      	ldr	r3, [pc, #728]	@ (8001f0c <trackObject+0x35c>)
 8001c34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c38:	1ac3      	subs	r3, r0, r3
 8001c3a:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001c3e:	f2c0 8148 	blt.w	8001ed2 <trackObject+0x322>
				start = i;
 8001c42:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001c46:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
				temp_cluster[j] = ylidar_finalbuffer[i];
 8001c4a:	f8b7 217a 	ldrh.w	r2, [r7, #378]	@ 0x17a
 8001c4e:	49af      	ldr	r1, [pc, #700]	@ (8001f0c <trackObject+0x35c>)
 8001c50:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001c54:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8001c58:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001c5c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001c60:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				j+=1;
 8001c64:	f8b7 317a 	ldrh.w	r3, [r7, #378]	@ 0x17a
 8001c68:	3301      	adds	r3, #1
 8001c6a:	f8a7 317a 	strh.w	r3, [r7, #378]	@ 0x17a
				clusterstate=OBJECT;
 8001c6e:	4ba6      	ldr	r3, [pc, #664]	@ (8001f08 <trackObject+0x358>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001c74:	e12d      	b.n	8001ed2 <trackObject+0x322>

		case OBJECT:
			temp_cluster[j] = ylidar_finalbuffer[i];
 8001c76:	f8b7 217a 	ldrh.w	r2, [r7, #378]	@ 0x17a
 8001c7a:	49a4      	ldr	r1, [pc, #656]	@ (8001f0c <trackObject+0x35c>)
 8001c7c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001c80:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8001c84:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001c88:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001c8c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			j+=1;
 8001c90:	f8b7 317a 	ldrh.w	r3, [r7, #378]	@ 0x17a
 8001c94:	3301      	adds	r3, #1
 8001c96:	f8a7 317a 	strh.w	r3, [r7, #378]	@ 0x17a

			if (j >= 180) {
 8001c9a:	f8b7 317a 	ldrh.w	r3, [r7, #378]	@ 0x17a
 8001c9e:	2bb3      	cmp	r3, #179	@ 0xb3
 8001ca0:	d90d      	bls.n	8001cbe <trackObject+0x10e>
			    clusterstate = SEARCHING;
 8001ca2:	4b99      	ldr	r3, [pc, #612]	@ (8001f08 <trackObject+0x358>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
			    j = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8a7 317a 	strh.w	r3, [r7, #378]	@ 0x17a
			    memset(temp_cluster, 0, sizeof(temp_cluster));
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f00e fe38 	bl	801092c <memset>
			    break;
 8001cbc:	e10c      	b.n	8001ed8 <trackObject+0x328>
			}

			if ((ylidar_finalbuffer[i+1] - ylidar_finalbuffer[i]) >= ClusterThreshold) {
 8001cbe:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	4a91      	ldr	r2, [pc, #580]	@ (8001f0c <trackObject+0x35c>)
 8001cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4a8f      	ldr	r2, [pc, #572]	@ (8001f0c <trackObject+0x35c>)
 8001cce:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cd6:	1acb      	subs	r3, r1, r3
 8001cd8:	2b63      	cmp	r3, #99	@ 0x63
 8001cda:	f340 80fc 	ble.w	8001ed6 <trackObject+0x326>
				end = i;
 8001cde:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001ce2:	f8a7 3184 	strh.w	r3, [r7, #388]	@ 0x184
				uint16_t sum=0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8a7 3172 	strh.w	r3, [r7, #370]	@ 0x172
				uint16_t count=0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8a7 3170 	strh.w	r3, [r7, #368]	@ 0x170
				for (int i = 0; i < j; i++) {
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001cf8:	e016      	b.n	8001d28 <trackObject+0x178>
					sum += temp_cluster[i];
 8001cfa:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001cfe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d02:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8001d06:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001d0a:	f8b7 3172 	ldrh.w	r3, [r7, #370]	@ 0x172
 8001d0e:	4413      	add	r3, r2
 8001d10:	f8a7 3172 	strh.w	r3, [r7, #370]	@ 0x172
					count++;
 8001d14:	f8b7 3170 	ldrh.w	r3, [r7, #368]	@ 0x170
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f8a7 3170 	strh.w	r3, [r7, #368]	@ 0x170
				for (int i = 0; i < j; i++) {
 8001d1e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001d22:	3301      	adds	r3, #1
 8001d24:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001d28:	f8b7 317a 	ldrh.w	r3, [r7, #378]	@ 0x17a
 8001d2c:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbe2      	blt.n	8001cfa <trackObject+0x14a>
				}
				avg_distance = (uint16_t) floor(sum/count);
 8001d34:	f8b7 2172 	ldrh.w	r2, [r7, #370]	@ 0x172
 8001d38:	f8b7 3170 	ldrh.w	r3, [r7, #368]	@ 0x170
 8001d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d4e:	ee17 3a90 	vmov	r3, s15
 8001d52:	f8a7 3180 	strh.w	r3, [r7, #384]	@ 0x180
				size = sqrtf(powf(temp_cluster[0], 2) + powf(temp_cluster[j], 2) - 2 * temp_cluster[0] * temp_cluster[j] * cosf((end - start)*(M_PI / 180.0f)));
 8001d56:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001d5a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d68:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d70:	f00e ffd6 	bl	8010d20 <powf>
 8001d74:	eeb0 8a40 	vmov.f32	s16, s0
 8001d78:	f8b7 217a 	ldrh.w	r2, [r7, #378]	@ 0x17a
 8001d7c:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001d80:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d84:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d88:	ee07 3a90 	vmov	s15, r3
 8001d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d90:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001d94:	eeb0 0a67 	vmov.f32	s0, s15
 8001d98:	f00e ffc2 	bl	8010d20 <powf>
 8001d9c:	eef0 7a40 	vmov.f32	s15, s0
 8001da0:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001da4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001da8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	4619      	mov	r1, r3
 8001db0:	f8b7 217a 	ldrh.w	r2, [r7, #378]	@ 0x17a
 8001db4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001db8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001dbc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8001dce:	f8b7 2184 	ldrh.w	r2, [r7, #388]	@ 0x184
 8001dd2:	f8b7 3186 	ldrh.w	r3, [r7, #390]	@ 0x186
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001de0:	ed9f 6b47 	vldr	d6, [pc, #284]	@ 8001f00 <trackObject+0x350>
 8001de4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001de8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001dec:	eeb0 0a67 	vmov.f32	s0, s15
 8001df0:	f00f f922 	bl	8011038 <cosf>
 8001df4:	eef0 7a40 	vmov.f32	s15, s0
 8001df8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001dfc:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001e00:	eeb0 0a67 	vmov.f32	s0, s15
 8001e04:	f00e fe7a 	bl	8010afc <sqrtf>
 8001e08:	ed87 0a5f 	vstr	s0, [r7, #380]	@ 0x17c
				clusterstate=FILTER_OBJECT;
 8001e0c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f08 <trackObject+0x358>)
 8001e0e:	2202      	movs	r2, #2
 8001e10:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001e12:	e060      	b.n	8001ed6 <trackObject+0x326>

		case FILTER_OBJECT:
			if (nb_objects < 10 && size<=250 && size >=150) {
 8001e14:	f897 3183 	ldrb.w	r3, [r7, #387]	@ 0x183
 8001e18:	2b09      	cmp	r3, #9
 8001e1a:	d852      	bhi.n	8001ec2 <trackObject+0x312>
 8001e1c:	edd7 7a5f 	vldr	s15, [r7, #380]	@ 0x17c
 8001e20:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001f14 <trackObject+0x364>
 8001e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	d849      	bhi.n	8001ec2 <trackObject+0x312>
 8001e2e:	edd7 7a5f 	vldr	s15, [r7, #380]	@ 0x17c
 8001e32:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001f18 <trackObject+0x368>
 8001e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	db40      	blt.n	8001ec2 <trackObject+0x312>

				objects[nb_objects].first_angle = start;
 8001e40:	f897 2183 	ldrb.w	r2, [r7, #387]	@ 0x183
 8001e44:	4935      	ldr	r1, [pc, #212]	@ (8001f1c <trackObject+0x36c>)
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f8b7 2186 	ldrh.w	r2, [r7, #390]	@ 0x186
 8001e54:	801a      	strh	r2, [r3, #0]
				objects[nb_objects].last_angle  = end;
 8001e56:	f897 2183 	ldrb.w	r2, [r7, #387]	@ 0x183
 8001e5a:	4930      	ldr	r1, [pc, #192]	@ (8001f1c <trackObject+0x36c>)
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	3302      	adds	r3, #2
 8001e68:	f8b7 2184 	ldrh.w	r2, [r7, #388]	@ 0x184
 8001e6c:	801a      	strh	r2, [r3, #0]
				objects[nb_objects].distance    = avg_distance;
 8001e6e:	f897 2183 	ldrb.w	r2, [r7, #387]	@ 0x183
 8001e72:	492a      	ldr	r1, [pc, #168]	@ (8001f1c <trackObject+0x36c>)
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3304      	adds	r3, #4
 8001e80:	f8b7 2180 	ldrh.w	r2, [r7, #384]	@ 0x180
 8001e84:	801a      	strh	r2, [r3, #0]
				objects[nb_objects].size		= size;
 8001e86:	f897 2183 	ldrb.w	r2, [r7, #387]	@ 0x183
 8001e8a:	4924      	ldr	r1, [pc, #144]	@ (8001f1c <trackObject+0x36c>)
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	3308      	adds	r3, #8
 8001e98:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001e9c:	601a      	str	r2, [r3, #0]
				nb_objects++;
 8001e9e:	f897 3183 	ldrb.w	r3, [r7, #387]	@ 0x183
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f887 3183 	strb.w	r3, [r7, #387]	@ 0x183
				j=0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8a7 317a 	strh.w	r3, [r7, #378]	@ 0x17a
				memset(temp_cluster, 0, sizeof(temp_cluster));
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f00e fd38 	bl	801092c <memset>
				clusterstate=SEARCHING;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <trackObject+0x358>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
			}
			clusterstate=SEARCHING;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <trackObject+0x358>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
			break;
 8001ec8:	e006      	b.n	8001ed8 <trackObject+0x328>

		default:
			clusterstate=SEARCHING;
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <trackObject+0x358>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
			break;
 8001ed0:	e002      	b.n	8001ed8 <trackObject+0x328>
			break;
 8001ed2:	bf00      	nop
 8001ed4:	e000      	b.n	8001ed8 <trackObject+0x328>
			break;
 8001ed6:	bf00      	nop
	for (int i = 0; i < 358; i++) {
 8001ed8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001edc:	3301      	adds	r3, #1
 8001ede:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001ee2:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001ee6:	f5b3 7fb3 	cmp.w	r3, #358	@ 0x166
 8001eea:	f6ff ae7d 	blt.w	8001be8 <trackObject+0x38>
		}
	}
}
 8001eee:	bf00      	nop
 8001ef0:	bf00      	nop
 8001ef2:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	ecbd 8b02 	vpop	{d8}
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	a2529d39 	.word	0xa2529d39
 8001f04:	3f91df46 	.word	0x3f91df46
 8001f08:	24000979 	.word	0x24000979
 8001f0c:	2400097c 	.word	0x2400097c
 8001f10:	b68d3135 	.word	0xb68d3135
 8001f14:	437a0000 	.word	0x437a0000
 8001f18:	43160000 	.word	0x43160000
 8001f1c:	24000c5c 	.word	0x24000c5c

08001f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f20:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001f5c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001f24:	f7ff fa36 	bl	8001394 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f28:	f7ff f994 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f2c:	480c      	ldr	r0, [pc, #48]	@ (8001f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f2e:	490d      	ldr	r1, [pc, #52]	@ (8001f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f30:	4a0d      	ldr	r2, [pc, #52]	@ (8001f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f34:	e002      	b.n	8001f3c <LoopCopyDataInit>

08001f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3a:	3304      	adds	r3, #4

08001f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f40:	d3f9      	bcc.n	8001f36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f44:	4c0a      	ldr	r4, [pc, #40]	@ (8001f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f48:	e001      	b.n	8001f4e <LoopFillZerobss>

08001f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f4c:	3204      	adds	r2, #4

08001f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f52:	f00e fd57 	bl	8010a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f56:	f7fe ff39 	bl	8000dcc <main>
  bx  lr
 8001f5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f5c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f64:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 8001f68:	08011778 	.word	0x08011778
  ldr r2, =_sbss
 8001f6c:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 8001f70:	24006750 	.word	0x24006750

08001f74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f74:	e7fe      	b.n	8001f74 <ADC3_IRQHandler>
	...

08001f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7e:	2003      	movs	r0, #3
 8001f80:	f000 f933 	bl	80021ea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f84:	f005 f8a2 	bl	80070cc <HAL_RCC_GetSysClockFreq>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <HAL_Init+0x68>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	4913      	ldr	r1, [pc, #76]	@ (8001fe4 <HAL_Init+0x6c>)
 8001f96:	5ccb      	ldrb	r3, [r1, r3]
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <HAL_Init+0x68>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe4 <HAL_Init+0x6c>)
 8001fac:	5cd3      	ldrb	r3, [r2, r3]
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe8 <HAL_Init+0x70>)
 8001fba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001fec <HAL_Init+0x74>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f7ff f8aa 	bl	800111c <HAL_InitTick>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e002      	b.n	8001fd8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd2:	f7ff f885 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	58024400 	.word	0x58024400
 8001fe4:	08011358 	.word	0x08011358
 8001fe8:	24000004 	.word	0x24000004
 8001fec:	24000000 	.word	0x24000000

08001ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <HAL_IncTick+0x20>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_IncTick+0x24>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <HAL_IncTick+0x24>)
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	2400000c 	.word	0x2400000c
 8002014:	24000cd4 	.word	0x24000cd4

08002018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTick;
 800201c:	4b03      	ldr	r3, [pc, #12]	@ (800202c <HAL_GetTick+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	24000cd4 	.word	0x24000cd4

08002030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff ffee 	bl	8002018 <HAL_GetTick>
 800203c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d005      	beq.n	8002056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204a:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <HAL_Delay+0x44>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002056:	bf00      	nop
 8002058:	f7ff ffde 	bl	8002018 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	429a      	cmp	r2, r3
 8002066:	d8f7      	bhi.n	8002058 <HAL_Delay+0x28>
  {
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2400000c 	.word	0x2400000c

08002078 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800207c:	4b03      	ldr	r3, [pc, #12]	@ (800208c <HAL_GetREVID+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0c1b      	lsrs	r3, r3, #16
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	5c001000 	.word	0x5c001000

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <__NVIC_SetPriorityGrouping+0x40>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020be:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <__NVIC_SetPriorityGrouping+0x40>)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	60d3      	str	r3, [r2, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00
 80020d4:	05fa0000 	.word	0x05fa0000

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0b      	blt.n	800211e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4907      	ldr	r1, [pc, #28]	@ (800212c <__NVIC_EnableIRQ+0x38>)
 800210e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2001      	movs	r0, #1
 8002116:	fa00 f202 	lsl.w	r2, r0, r2
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	@ (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	@ (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	@ 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ff4c 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800220e:	f7ff ff63 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 8002212:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	6978      	ldr	r0, [r7, #20]
 800221a:	f7ff ffb3 	bl	8002184 <NVIC_EncodePriority>
 800221e:	4602      	mov	r2, r0
 8002220:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff ff82 	bl	8002130 <__NVIC_SetPriority>
}
 800222c:	bf00      	nop
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff56 	bl	80020f4 <__NVIC_EnableIRQ>
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002254:	f3bf 8f5f 	dmb	sy
}
 8002258:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800225a:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <HAL_MPU_Disable+0x28>)
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	4a06      	ldr	r2, [pc, #24]	@ (8002278 <HAL_MPU_Disable+0x28>)
 8002260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002264:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002266:	4b05      	ldr	r3, [pc, #20]	@ (800227c <HAL_MPU_Disable+0x2c>)
 8002268:	2200      	movs	r2, #0
 800226a:	605a      	str	r2, [r3, #4]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00
 800227c:	e000ed90 	.word	0xe000ed90

08002280 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002288:	4a0b      	ldr	r2, [pc, #44]	@ (80022b8 <HAL_MPU_Enable+0x38>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002292:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <HAL_MPU_Enable+0x3c>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	4a09      	ldr	r2, [pc, #36]	@ (80022bc <HAL_MPU_Enable+0x3c>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800229e:	f3bf 8f4f 	dsb	sy
}
 80022a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022a4:	f3bf 8f6f 	isb	sy
}
 80022a8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000ed90 	.word	0xe000ed90
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	785a      	ldrb	r2, [r3, #1]
 80022cc:	4b1b      	ldr	r3, [pc, #108]	@ (800233c <HAL_MPU_ConfigRegion+0x7c>)
 80022ce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80022d0:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <HAL_MPU_ConfigRegion+0x7c>)
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	4a19      	ldr	r2, [pc, #100]	@ (800233c <HAL_MPU_ConfigRegion+0x7c>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80022dc:	4a17      	ldr	r2, [pc, #92]	@ (800233c <HAL_MPU_ConfigRegion+0x7c>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7b1b      	ldrb	r3, [r3, #12]
 80022e8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	7adb      	ldrb	r3, [r3, #11]
 80022ee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7a9b      	ldrb	r3, [r3, #10]
 80022f6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7b5b      	ldrb	r3, [r3, #13]
 80022fe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002300:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7b9b      	ldrb	r3, [r3, #14]
 8002306:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002308:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7bdb      	ldrb	r3, [r3, #15]
 800230e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002310:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7a5b      	ldrb	r3, [r3, #9]
 8002316:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002318:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7a1b      	ldrb	r3, [r3, #8]
 800231e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002320:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	7812      	ldrb	r2, [r2, #0]
 8002326:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002328:	4a04      	ldr	r2, [pc, #16]	@ (800233c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800232a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800232c:	6113      	str	r3, [r2, #16]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000ed90 	.word	0xe000ed90

08002340 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff fe66 	bl	8002018 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e316      	b.n	8002986 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a66      	ldr	r2, [pc, #408]	@ (80024f8 <HAL_DMA_Init+0x1b8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d04a      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a65      	ldr	r2, [pc, #404]	@ (80024fc <HAL_DMA_Init+0x1bc>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d045      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a63      	ldr	r2, [pc, #396]	@ (8002500 <HAL_DMA_Init+0x1c0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d040      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a62      	ldr	r2, [pc, #392]	@ (8002504 <HAL_DMA_Init+0x1c4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d03b      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a60      	ldr	r2, [pc, #384]	@ (8002508 <HAL_DMA_Init+0x1c8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d036      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a5f      	ldr	r2, [pc, #380]	@ (800250c <HAL_DMA_Init+0x1cc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d031      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a5d      	ldr	r2, [pc, #372]	@ (8002510 <HAL_DMA_Init+0x1d0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d02c      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002514 <HAL_DMA_Init+0x1d4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d027      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a5a      	ldr	r2, [pc, #360]	@ (8002518 <HAL_DMA_Init+0x1d8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d022      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a59      	ldr	r2, [pc, #356]	@ (800251c <HAL_DMA_Init+0x1dc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d01d      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a57      	ldr	r2, [pc, #348]	@ (8002520 <HAL_DMA_Init+0x1e0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d018      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a56      	ldr	r2, [pc, #344]	@ (8002524 <HAL_DMA_Init+0x1e4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d013      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a54      	ldr	r2, [pc, #336]	@ (8002528 <HAL_DMA_Init+0x1e8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00e      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a53      	ldr	r2, [pc, #332]	@ (800252c <HAL_DMA_Init+0x1ec>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d009      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a51      	ldr	r2, [pc, #324]	@ (8002530 <HAL_DMA_Init+0x1f0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d004      	beq.n	80023f8 <HAL_DMA_Init+0xb8>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a50      	ldr	r2, [pc, #320]	@ (8002534 <HAL_DMA_Init+0x1f4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d101      	bne.n	80023fc <HAL_DMA_Init+0xbc>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <HAL_DMA_Init+0xbe>
 80023fc:	2300      	movs	r3, #0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 813b 	beq.w	800267a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a37      	ldr	r2, [pc, #220]	@ (80024f8 <HAL_DMA_Init+0x1b8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d04a      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a36      	ldr	r2, [pc, #216]	@ (80024fc <HAL_DMA_Init+0x1bc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d045      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a34      	ldr	r2, [pc, #208]	@ (8002500 <HAL_DMA_Init+0x1c0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d040      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a33      	ldr	r2, [pc, #204]	@ (8002504 <HAL_DMA_Init+0x1c4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d03b      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a31      	ldr	r2, [pc, #196]	@ (8002508 <HAL_DMA_Init+0x1c8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d036      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a30      	ldr	r2, [pc, #192]	@ (800250c <HAL_DMA_Init+0x1cc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d031      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a2e      	ldr	r2, [pc, #184]	@ (8002510 <HAL_DMA_Init+0x1d0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d02c      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a2d      	ldr	r2, [pc, #180]	@ (8002514 <HAL_DMA_Init+0x1d4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d027      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a2b      	ldr	r2, [pc, #172]	@ (8002518 <HAL_DMA_Init+0x1d8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d022      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a2a      	ldr	r2, [pc, #168]	@ (800251c <HAL_DMA_Init+0x1dc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d01d      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a28      	ldr	r2, [pc, #160]	@ (8002520 <HAL_DMA_Init+0x1e0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d018      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a27      	ldr	r2, [pc, #156]	@ (8002524 <HAL_DMA_Init+0x1e4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d013      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a25      	ldr	r2, [pc, #148]	@ (8002528 <HAL_DMA_Init+0x1e8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00e      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a24      	ldr	r2, [pc, #144]	@ (800252c <HAL_DMA_Init+0x1ec>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d009      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a22      	ldr	r2, [pc, #136]	@ (8002530 <HAL_DMA_Init+0x1f0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d004      	beq.n	80024b4 <HAL_DMA_Init+0x174>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a21      	ldr	r2, [pc, #132]	@ (8002534 <HAL_DMA_Init+0x1f4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d108      	bne.n	80024c6 <HAL_DMA_Init+0x186>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e007      	b.n	80024d6 <HAL_DMA_Init+0x196>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024d6:	e02f      	b.n	8002538 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024d8:	f7ff fd9e 	bl	8002018 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b05      	cmp	r3, #5
 80024e4:	d928      	bls.n	8002538 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2220      	movs	r2, #32
 80024ea:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2203      	movs	r2, #3
 80024f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e246      	b.n	8002986 <HAL_DMA_Init+0x646>
 80024f8:	40020010 	.word	0x40020010
 80024fc:	40020028 	.word	0x40020028
 8002500:	40020040 	.word	0x40020040
 8002504:	40020058 	.word	0x40020058
 8002508:	40020070 	.word	0x40020070
 800250c:	40020088 	.word	0x40020088
 8002510:	400200a0 	.word	0x400200a0
 8002514:	400200b8 	.word	0x400200b8
 8002518:	40020410 	.word	0x40020410
 800251c:	40020428 	.word	0x40020428
 8002520:	40020440 	.word	0x40020440
 8002524:	40020458 	.word	0x40020458
 8002528:	40020470 	.word	0x40020470
 800252c:	40020488 	.word	0x40020488
 8002530:	400204a0 	.word	0x400204a0
 8002534:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1c8      	bne.n	80024d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4b83      	ldr	r3, [pc, #524]	@ (8002760 <HAL_DMA_Init+0x420>)
 8002552:	4013      	ands	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800255e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002576:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	2b04      	cmp	r3, #4
 800258a:	d107      	bne.n	800259c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002594:	4313      	orrs	r3, r2
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800259c:	4b71      	ldr	r3, [pc, #452]	@ (8002764 <HAL_DMA_Init+0x424>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b71      	ldr	r3, [pc, #452]	@ (8002768 <HAL_DMA_Init+0x428>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025a8:	d328      	bcc.n	80025fc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b28      	cmp	r3, #40	@ 0x28
 80025b0:	d903      	bls.n	80025ba <HAL_DMA_Init+0x27a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80025b8:	d917      	bls.n	80025ea <HAL_DMA_Init+0x2aa>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b3e      	cmp	r3, #62	@ 0x3e
 80025c0:	d903      	bls.n	80025ca <HAL_DMA_Init+0x28a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b42      	cmp	r3, #66	@ 0x42
 80025c8:	d90f      	bls.n	80025ea <HAL_DMA_Init+0x2aa>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b46      	cmp	r3, #70	@ 0x46
 80025d0:	d903      	bls.n	80025da <HAL_DMA_Init+0x29a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b48      	cmp	r3, #72	@ 0x48
 80025d8:	d907      	bls.n	80025ea <HAL_DMA_Init+0x2aa>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b4e      	cmp	r3, #78	@ 0x4e
 80025e0:	d905      	bls.n	80025ee <HAL_DMA_Init+0x2ae>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b52      	cmp	r3, #82	@ 0x52
 80025e8:	d801      	bhi.n	80025ee <HAL_DMA_Init+0x2ae>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_DMA_Init+0x2b0>
 80025ee:	2300      	movs	r3, #0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025fa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f023 0307 	bic.w	r3, r3, #7
 8002612:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	2b04      	cmp	r3, #4
 8002624:	d117      	bne.n	8002656 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f002 f8f9 	bl	8004830 <DMA_CheckFifoParam>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2240      	movs	r2, #64	@ 0x40
 8002648:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e197      	b.n	8002986 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f002 f834 	bl	80046cc <DMA_CalcBaseAndBitshift>
 8002664:	4603      	mov	r3, r0
 8002666:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	223f      	movs	r2, #63	@ 0x3f
 8002672:	409a      	lsls	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	e0cd      	b.n	8002816 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a3b      	ldr	r2, [pc, #236]	@ (800276c <HAL_DMA_Init+0x42c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d022      	beq.n	80026ca <HAL_DMA_Init+0x38a>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a39      	ldr	r2, [pc, #228]	@ (8002770 <HAL_DMA_Init+0x430>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01d      	beq.n	80026ca <HAL_DMA_Init+0x38a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a38      	ldr	r2, [pc, #224]	@ (8002774 <HAL_DMA_Init+0x434>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d018      	beq.n	80026ca <HAL_DMA_Init+0x38a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a36      	ldr	r2, [pc, #216]	@ (8002778 <HAL_DMA_Init+0x438>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_DMA_Init+0x38a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a35      	ldr	r2, [pc, #212]	@ (800277c <HAL_DMA_Init+0x43c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00e      	beq.n	80026ca <HAL_DMA_Init+0x38a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a33      	ldr	r2, [pc, #204]	@ (8002780 <HAL_DMA_Init+0x440>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d009      	beq.n	80026ca <HAL_DMA_Init+0x38a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a32      	ldr	r2, [pc, #200]	@ (8002784 <HAL_DMA_Init+0x444>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d004      	beq.n	80026ca <HAL_DMA_Init+0x38a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a30      	ldr	r2, [pc, #192]	@ (8002788 <HAL_DMA_Init+0x448>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_DMA_Init+0x38e>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_DMA_Init+0x390>
 80026ce:	2300      	movs	r3, #0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 8097 	beq.w	8002804 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a24      	ldr	r2, [pc, #144]	@ (800276c <HAL_DMA_Init+0x42c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d021      	beq.n	8002724 <HAL_DMA_Init+0x3e4>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a22      	ldr	r2, [pc, #136]	@ (8002770 <HAL_DMA_Init+0x430>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01c      	beq.n	8002724 <HAL_DMA_Init+0x3e4>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a21      	ldr	r2, [pc, #132]	@ (8002774 <HAL_DMA_Init+0x434>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d017      	beq.n	8002724 <HAL_DMA_Init+0x3e4>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002778 <HAL_DMA_Init+0x438>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d012      	beq.n	8002724 <HAL_DMA_Init+0x3e4>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1e      	ldr	r2, [pc, #120]	@ (800277c <HAL_DMA_Init+0x43c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00d      	beq.n	8002724 <HAL_DMA_Init+0x3e4>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1c      	ldr	r2, [pc, #112]	@ (8002780 <HAL_DMA_Init+0x440>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d008      	beq.n	8002724 <HAL_DMA_Init+0x3e4>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a1b      	ldr	r2, [pc, #108]	@ (8002784 <HAL_DMA_Init+0x444>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <HAL_DMA_Init+0x3e4>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a19      	ldr	r2, [pc, #100]	@ (8002788 <HAL_DMA_Init+0x448>)
 8002722:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4b13      	ldr	r3, [pc, #76]	@ (800278c <HAL_DMA_Init+0x44c>)
 8002740:	4013      	ands	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b40      	cmp	r3, #64	@ 0x40
 800274a:	d021      	beq.n	8002790 <HAL_DMA_Init+0x450>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b80      	cmp	r3, #128	@ 0x80
 8002752:	d102      	bne.n	800275a <HAL_DMA_Init+0x41a>
 8002754:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002758:	e01b      	b.n	8002792 <HAL_DMA_Init+0x452>
 800275a:	2300      	movs	r3, #0
 800275c:	e019      	b.n	8002792 <HAL_DMA_Init+0x452>
 800275e:	bf00      	nop
 8002760:	fe10803f 	.word	0xfe10803f
 8002764:	5c001000 	.word	0x5c001000
 8002768:	ffff0000 	.word	0xffff0000
 800276c:	58025408 	.word	0x58025408
 8002770:	5802541c 	.word	0x5802541c
 8002774:	58025430 	.word	0x58025430
 8002778:	58025444 	.word	0x58025444
 800277c:	58025458 	.word	0x58025458
 8002780:	5802546c 	.word	0x5802546c
 8002784:	58025480 	.word	0x58025480
 8002788:	58025494 	.word	0x58025494
 800278c:	fffe000f 	.word	0xfffe000f
 8002790:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68d2      	ldr	r2, [r2, #12]
 8002796:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002990 <HAL_DMA_Init+0x650>)
 80027d8:	4413      	add	r3, r2
 80027da:	4a6e      	ldr	r2, [pc, #440]	@ (8002994 <HAL_DMA_Init+0x654>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	009a      	lsls	r2, r3, #2
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f001 ff6f 	bl	80046cc <DMA_CalcBaseAndBitshift>
 80027ee:	4603      	mov	r3, r0
 80027f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	2201      	movs	r2, #1
 80027fc:	409a      	lsls	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	e008      	b.n	8002816 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2240      	movs	r2, #64	@ 0x40
 8002808:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2203      	movs	r2, #3
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e0b7      	b.n	8002986 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a5f      	ldr	r2, [pc, #380]	@ (8002998 <HAL_DMA_Init+0x658>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d072      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a5d      	ldr	r2, [pc, #372]	@ (800299c <HAL_DMA_Init+0x65c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d06d      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a5c      	ldr	r2, [pc, #368]	@ (80029a0 <HAL_DMA_Init+0x660>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d068      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a5a      	ldr	r2, [pc, #360]	@ (80029a4 <HAL_DMA_Init+0x664>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d063      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a59      	ldr	r2, [pc, #356]	@ (80029a8 <HAL_DMA_Init+0x668>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d05e      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a57      	ldr	r2, [pc, #348]	@ (80029ac <HAL_DMA_Init+0x66c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d059      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a56      	ldr	r2, [pc, #344]	@ (80029b0 <HAL_DMA_Init+0x670>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d054      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a54      	ldr	r2, [pc, #336]	@ (80029b4 <HAL_DMA_Init+0x674>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d04f      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a53      	ldr	r2, [pc, #332]	@ (80029b8 <HAL_DMA_Init+0x678>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d04a      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a51      	ldr	r2, [pc, #324]	@ (80029bc <HAL_DMA_Init+0x67c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d045      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a50      	ldr	r2, [pc, #320]	@ (80029c0 <HAL_DMA_Init+0x680>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d040      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a4e      	ldr	r2, [pc, #312]	@ (80029c4 <HAL_DMA_Init+0x684>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d03b      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a4d      	ldr	r2, [pc, #308]	@ (80029c8 <HAL_DMA_Init+0x688>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d036      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a4b      	ldr	r2, [pc, #300]	@ (80029cc <HAL_DMA_Init+0x68c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d031      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a4a      	ldr	r2, [pc, #296]	@ (80029d0 <HAL_DMA_Init+0x690>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d02c      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a48      	ldr	r2, [pc, #288]	@ (80029d4 <HAL_DMA_Init+0x694>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d027      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a47      	ldr	r2, [pc, #284]	@ (80029d8 <HAL_DMA_Init+0x698>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d022      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a45      	ldr	r2, [pc, #276]	@ (80029dc <HAL_DMA_Init+0x69c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01d      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a44      	ldr	r2, [pc, #272]	@ (80029e0 <HAL_DMA_Init+0x6a0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d018      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a42      	ldr	r2, [pc, #264]	@ (80029e4 <HAL_DMA_Init+0x6a4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a41      	ldr	r2, [pc, #260]	@ (80029e8 <HAL_DMA_Init+0x6a8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00e      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a3f      	ldr	r2, [pc, #252]	@ (80029ec <HAL_DMA_Init+0x6ac>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d009      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a3e      	ldr	r2, [pc, #248]	@ (80029f0 <HAL_DMA_Init+0x6b0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d004      	beq.n	8002906 <HAL_DMA_Init+0x5c6>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a3c      	ldr	r2, [pc, #240]	@ (80029f4 <HAL_DMA_Init+0x6b4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_DMA_Init+0x5ca>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_DMA_Init+0x5cc>
 800290a:	2300      	movs	r3, #0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d032      	beq.n	8002976 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f002 f809 	bl	8004928 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b80      	cmp	r3, #128	@ 0x80
 800291c:	d102      	bne.n	8002924 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002938:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d010      	beq.n	8002964 <HAL_DMA_Init+0x624>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d80c      	bhi.n	8002964 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f002 f886 	bl	8004a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	e008      	b.n	8002976 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	a7fdabf8 	.word	0xa7fdabf8
 8002994:	cccccccd 	.word	0xcccccccd
 8002998:	40020010 	.word	0x40020010
 800299c:	40020028 	.word	0x40020028
 80029a0:	40020040 	.word	0x40020040
 80029a4:	40020058 	.word	0x40020058
 80029a8:	40020070 	.word	0x40020070
 80029ac:	40020088 	.word	0x40020088
 80029b0:	400200a0 	.word	0x400200a0
 80029b4:	400200b8 	.word	0x400200b8
 80029b8:	40020410 	.word	0x40020410
 80029bc:	40020428 	.word	0x40020428
 80029c0:	40020440 	.word	0x40020440
 80029c4:	40020458 	.word	0x40020458
 80029c8:	40020470 	.word	0x40020470
 80029cc:	40020488 	.word	0x40020488
 80029d0:	400204a0 	.word	0x400204a0
 80029d4:	400204b8 	.word	0x400204b8
 80029d8:	58025408 	.word	0x58025408
 80029dc:	5802541c 	.word	0x5802541c
 80029e0:	58025430 	.word	0x58025430
 80029e4:	58025444 	.word	0x58025444
 80029e8:	58025458 	.word	0x58025458
 80029ec:	5802546c 	.word	0x5802546c
 80029f0:	58025480 	.word	0x58025480
 80029f4:	58025494 	.word	0x58025494

080029f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e226      	b.n	8002e62 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_DMA_Start_IT+0x2a>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e21f      	b.n	8002e62 <HAL_DMA_Start_IT+0x46a>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	f040 820a 	bne.w	8002e4c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a68      	ldr	r2, [pc, #416]	@ (8002bec <HAL_DMA_Start_IT+0x1f4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d04a      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a66      	ldr	r2, [pc, #408]	@ (8002bf0 <HAL_DMA_Start_IT+0x1f8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d045      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a65      	ldr	r2, [pc, #404]	@ (8002bf4 <HAL_DMA_Start_IT+0x1fc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d040      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a63      	ldr	r2, [pc, #396]	@ (8002bf8 <HAL_DMA_Start_IT+0x200>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d03b      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a62      	ldr	r2, [pc, #392]	@ (8002bfc <HAL_DMA_Start_IT+0x204>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d036      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a60      	ldr	r2, [pc, #384]	@ (8002c00 <HAL_DMA_Start_IT+0x208>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d031      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a5f      	ldr	r2, [pc, #380]	@ (8002c04 <HAL_DMA_Start_IT+0x20c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d02c      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a5d      	ldr	r2, [pc, #372]	@ (8002c08 <HAL_DMA_Start_IT+0x210>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d027      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a5c      	ldr	r2, [pc, #368]	@ (8002c0c <HAL_DMA_Start_IT+0x214>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d022      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a5a      	ldr	r2, [pc, #360]	@ (8002c10 <HAL_DMA_Start_IT+0x218>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d01d      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a59      	ldr	r2, [pc, #356]	@ (8002c14 <HAL_DMA_Start_IT+0x21c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d018      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a57      	ldr	r2, [pc, #348]	@ (8002c18 <HAL_DMA_Start_IT+0x220>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a56      	ldr	r2, [pc, #344]	@ (8002c1c <HAL_DMA_Start_IT+0x224>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a54      	ldr	r2, [pc, #336]	@ (8002c20 <HAL_DMA_Start_IT+0x228>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d009      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a53      	ldr	r2, [pc, #332]	@ (8002c24 <HAL_DMA_Start_IT+0x22c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d004      	beq.n	8002ae6 <HAL_DMA_Start_IT+0xee>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a51      	ldr	r2, [pc, #324]	@ (8002c28 <HAL_DMA_Start_IT+0x230>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d108      	bne.n	8002af8 <HAL_DMA_Start_IT+0x100>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0201 	bic.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e007      	b.n	8002b08 <HAL_DMA_Start_IT+0x110>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f001 fc30 	bl	8004374 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a34      	ldr	r2, [pc, #208]	@ (8002bec <HAL_DMA_Start_IT+0x1f4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d04a      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a33      	ldr	r2, [pc, #204]	@ (8002bf0 <HAL_DMA_Start_IT+0x1f8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d045      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a31      	ldr	r2, [pc, #196]	@ (8002bf4 <HAL_DMA_Start_IT+0x1fc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d040      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a30      	ldr	r2, [pc, #192]	@ (8002bf8 <HAL_DMA_Start_IT+0x200>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d03b      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2e      	ldr	r2, [pc, #184]	@ (8002bfc <HAL_DMA_Start_IT+0x204>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d036      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c00 <HAL_DMA_Start_IT+0x208>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d031      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a2b      	ldr	r2, [pc, #172]	@ (8002c04 <HAL_DMA_Start_IT+0x20c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d02c      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002c08 <HAL_DMA_Start_IT+0x210>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d027      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a28      	ldr	r2, [pc, #160]	@ (8002c0c <HAL_DMA_Start_IT+0x214>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d022      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a27      	ldr	r2, [pc, #156]	@ (8002c10 <HAL_DMA_Start_IT+0x218>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d01d      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a25      	ldr	r2, [pc, #148]	@ (8002c14 <HAL_DMA_Start_IT+0x21c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d018      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a24      	ldr	r2, [pc, #144]	@ (8002c18 <HAL_DMA_Start_IT+0x220>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d013      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a22      	ldr	r2, [pc, #136]	@ (8002c1c <HAL_DMA_Start_IT+0x224>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00e      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a21      	ldr	r2, [pc, #132]	@ (8002c20 <HAL_DMA_Start_IT+0x228>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d009      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c24 <HAL_DMA_Start_IT+0x22c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d004      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x1bc>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1e      	ldr	r2, [pc, #120]	@ (8002c28 <HAL_DMA_Start_IT+0x230>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <HAL_DMA_Start_IT+0x1c0>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <HAL_DMA_Start_IT+0x1c2>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d036      	beq.n	8002c2c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 021e 	bic.w	r2, r3, #30
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0216 	orr.w	r2, r2, #22
 8002bd0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d03e      	beq.n	8002c58 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0208 	orr.w	r2, r2, #8
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e035      	b.n	8002c58 <HAL_DMA_Start_IT+0x260>
 8002bec:	40020010 	.word	0x40020010
 8002bf0:	40020028 	.word	0x40020028
 8002bf4:	40020040 	.word	0x40020040
 8002bf8:	40020058 	.word	0x40020058
 8002bfc:	40020070 	.word	0x40020070
 8002c00:	40020088 	.word	0x40020088
 8002c04:	400200a0 	.word	0x400200a0
 8002c08:	400200b8 	.word	0x400200b8
 8002c0c:	40020410 	.word	0x40020410
 8002c10:	40020428 	.word	0x40020428
 8002c14:	40020440 	.word	0x40020440
 8002c18:	40020458 	.word	0x40020458
 8002c1c:	40020470 	.word	0x40020470
 8002c20:	40020488 	.word	0x40020488
 8002c24:	400204a0 	.word	0x400204a0
 8002c28:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 020e 	bic.w	r2, r3, #14
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 020a 	orr.w	r2, r2, #10
 8002c3e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0204 	orr.w	r2, r2, #4
 8002c56:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a83      	ldr	r2, [pc, #524]	@ (8002e6c <HAL_DMA_Start_IT+0x474>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d072      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a82      	ldr	r2, [pc, #520]	@ (8002e70 <HAL_DMA_Start_IT+0x478>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d06d      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a80      	ldr	r2, [pc, #512]	@ (8002e74 <HAL_DMA_Start_IT+0x47c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d068      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7f      	ldr	r2, [pc, #508]	@ (8002e78 <HAL_DMA_Start_IT+0x480>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d063      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a7d      	ldr	r2, [pc, #500]	@ (8002e7c <HAL_DMA_Start_IT+0x484>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d05e      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a7c      	ldr	r2, [pc, #496]	@ (8002e80 <HAL_DMA_Start_IT+0x488>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d059      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a7a      	ldr	r2, [pc, #488]	@ (8002e84 <HAL_DMA_Start_IT+0x48c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d054      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a79      	ldr	r2, [pc, #484]	@ (8002e88 <HAL_DMA_Start_IT+0x490>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d04f      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a77      	ldr	r2, [pc, #476]	@ (8002e8c <HAL_DMA_Start_IT+0x494>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d04a      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a76      	ldr	r2, [pc, #472]	@ (8002e90 <HAL_DMA_Start_IT+0x498>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d045      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a74      	ldr	r2, [pc, #464]	@ (8002e94 <HAL_DMA_Start_IT+0x49c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d040      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a73      	ldr	r2, [pc, #460]	@ (8002e98 <HAL_DMA_Start_IT+0x4a0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d03b      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a71      	ldr	r2, [pc, #452]	@ (8002e9c <HAL_DMA_Start_IT+0x4a4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d036      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a70      	ldr	r2, [pc, #448]	@ (8002ea0 <HAL_DMA_Start_IT+0x4a8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d031      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a6e      	ldr	r2, [pc, #440]	@ (8002ea4 <HAL_DMA_Start_IT+0x4ac>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d02c      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a6d      	ldr	r2, [pc, #436]	@ (8002ea8 <HAL_DMA_Start_IT+0x4b0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d027      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a6b      	ldr	r2, [pc, #428]	@ (8002eac <HAL_DMA_Start_IT+0x4b4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d022      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a6a      	ldr	r2, [pc, #424]	@ (8002eb0 <HAL_DMA_Start_IT+0x4b8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d01d      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a68      	ldr	r2, [pc, #416]	@ (8002eb4 <HAL_DMA_Start_IT+0x4bc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d018      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a67      	ldr	r2, [pc, #412]	@ (8002eb8 <HAL_DMA_Start_IT+0x4c0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d013      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a65      	ldr	r2, [pc, #404]	@ (8002ebc <HAL_DMA_Start_IT+0x4c4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00e      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a64      	ldr	r2, [pc, #400]	@ (8002ec0 <HAL_DMA_Start_IT+0x4c8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d009      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a62      	ldr	r2, [pc, #392]	@ (8002ec4 <HAL_DMA_Start_IT+0x4cc>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d004      	beq.n	8002d48 <HAL_DMA_Start_IT+0x350>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a61      	ldr	r2, [pc, #388]	@ (8002ec8 <HAL_DMA_Start_IT+0x4d0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d101      	bne.n	8002d4c <HAL_DMA_Start_IT+0x354>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <HAL_DMA_Start_IT+0x356>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01a      	beq.n	8002d88 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d6e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d007      	beq.n	8002d88 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d86:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a37      	ldr	r2, [pc, #220]	@ (8002e6c <HAL_DMA_Start_IT+0x474>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d04a      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a36      	ldr	r2, [pc, #216]	@ (8002e70 <HAL_DMA_Start_IT+0x478>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d045      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a34      	ldr	r2, [pc, #208]	@ (8002e74 <HAL_DMA_Start_IT+0x47c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d040      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a33      	ldr	r2, [pc, #204]	@ (8002e78 <HAL_DMA_Start_IT+0x480>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d03b      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a31      	ldr	r2, [pc, #196]	@ (8002e7c <HAL_DMA_Start_IT+0x484>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d036      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a30      	ldr	r2, [pc, #192]	@ (8002e80 <HAL_DMA_Start_IT+0x488>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d031      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a2e      	ldr	r2, [pc, #184]	@ (8002e84 <HAL_DMA_Start_IT+0x48c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d02c      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a2d      	ldr	r2, [pc, #180]	@ (8002e88 <HAL_DMA_Start_IT+0x490>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d027      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8002e8c <HAL_DMA_Start_IT+0x494>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d022      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2a      	ldr	r2, [pc, #168]	@ (8002e90 <HAL_DMA_Start_IT+0x498>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d01d      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a28      	ldr	r2, [pc, #160]	@ (8002e94 <HAL_DMA_Start_IT+0x49c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d018      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a27      	ldr	r2, [pc, #156]	@ (8002e98 <HAL_DMA_Start_IT+0x4a0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a25      	ldr	r2, [pc, #148]	@ (8002e9c <HAL_DMA_Start_IT+0x4a4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00e      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a24      	ldr	r2, [pc, #144]	@ (8002ea0 <HAL_DMA_Start_IT+0x4a8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a22      	ldr	r2, [pc, #136]	@ (8002ea4 <HAL_DMA_Start_IT+0x4ac>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <HAL_DMA_Start_IT+0x430>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a21      	ldr	r2, [pc, #132]	@ (8002ea8 <HAL_DMA_Start_IT+0x4b0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d108      	bne.n	8002e3a <HAL_DMA_Start_IT+0x442>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e012      	b.n	8002e60 <HAL_DMA_Start_IT+0x468>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0201 	orr.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e009      	b.n	8002e60 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e52:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40020010 	.word	0x40020010
 8002e70:	40020028 	.word	0x40020028
 8002e74:	40020040 	.word	0x40020040
 8002e78:	40020058 	.word	0x40020058
 8002e7c:	40020070 	.word	0x40020070
 8002e80:	40020088 	.word	0x40020088
 8002e84:	400200a0 	.word	0x400200a0
 8002e88:	400200b8 	.word	0x400200b8
 8002e8c:	40020410 	.word	0x40020410
 8002e90:	40020428 	.word	0x40020428
 8002e94:	40020440 	.word	0x40020440
 8002e98:	40020458 	.word	0x40020458
 8002e9c:	40020470 	.word	0x40020470
 8002ea0:	40020488 	.word	0x40020488
 8002ea4:	400204a0 	.word	0x400204a0
 8002ea8:	400204b8 	.word	0x400204b8
 8002eac:	58025408 	.word	0x58025408
 8002eb0:	5802541c 	.word	0x5802541c
 8002eb4:	58025430 	.word	0x58025430
 8002eb8:	58025444 	.word	0x58025444
 8002ebc:	58025458 	.word	0x58025458
 8002ec0:	5802546c 	.word	0x5802546c
 8002ec4:	58025480 	.word	0x58025480
 8002ec8:	58025494 	.word	0x58025494

08002ecc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7ff f8a0 	bl	8002018 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e2dc      	b.n	800349e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d008      	beq.n	8002f02 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2280      	movs	r2, #128	@ 0x80
 8002ef4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e2cd      	b.n	800349e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a76      	ldr	r2, [pc, #472]	@ (80030e0 <HAL_DMA_Abort+0x214>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d04a      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a74      	ldr	r2, [pc, #464]	@ (80030e4 <HAL_DMA_Abort+0x218>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d045      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a73      	ldr	r2, [pc, #460]	@ (80030e8 <HAL_DMA_Abort+0x21c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d040      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a71      	ldr	r2, [pc, #452]	@ (80030ec <HAL_DMA_Abort+0x220>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d03b      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a70      	ldr	r2, [pc, #448]	@ (80030f0 <HAL_DMA_Abort+0x224>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d036      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a6e      	ldr	r2, [pc, #440]	@ (80030f4 <HAL_DMA_Abort+0x228>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d031      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6d      	ldr	r2, [pc, #436]	@ (80030f8 <HAL_DMA_Abort+0x22c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d02c      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a6b      	ldr	r2, [pc, #428]	@ (80030fc <HAL_DMA_Abort+0x230>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d027      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a6a      	ldr	r2, [pc, #424]	@ (8003100 <HAL_DMA_Abort+0x234>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d022      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a68      	ldr	r2, [pc, #416]	@ (8003104 <HAL_DMA_Abort+0x238>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d01d      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a67      	ldr	r2, [pc, #412]	@ (8003108 <HAL_DMA_Abort+0x23c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d018      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a65      	ldr	r2, [pc, #404]	@ (800310c <HAL_DMA_Abort+0x240>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a64      	ldr	r2, [pc, #400]	@ (8003110 <HAL_DMA_Abort+0x244>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00e      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a62      	ldr	r2, [pc, #392]	@ (8003114 <HAL_DMA_Abort+0x248>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a61      	ldr	r2, [pc, #388]	@ (8003118 <HAL_DMA_Abort+0x24c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_DMA_Abort+0xd6>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a5f      	ldr	r2, [pc, #380]	@ (800311c <HAL_DMA_Abort+0x250>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_DMA_Abort+0xda>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_DMA_Abort+0xdc>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 021e 	bic.w	r2, r2, #30
 8002fba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	e00a      	b.n	8002fea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 020e 	bic.w	r2, r2, #14
 8002fe2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a3c      	ldr	r2, [pc, #240]	@ (80030e0 <HAL_DMA_Abort+0x214>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d072      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a3a      	ldr	r2, [pc, #232]	@ (80030e4 <HAL_DMA_Abort+0x218>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d06d      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a39      	ldr	r2, [pc, #228]	@ (80030e8 <HAL_DMA_Abort+0x21c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d068      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a37      	ldr	r2, [pc, #220]	@ (80030ec <HAL_DMA_Abort+0x220>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d063      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a36      	ldr	r2, [pc, #216]	@ (80030f0 <HAL_DMA_Abort+0x224>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d05e      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a34      	ldr	r2, [pc, #208]	@ (80030f4 <HAL_DMA_Abort+0x228>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d059      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a33      	ldr	r2, [pc, #204]	@ (80030f8 <HAL_DMA_Abort+0x22c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d054      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a31      	ldr	r2, [pc, #196]	@ (80030fc <HAL_DMA_Abort+0x230>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d04f      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a30      	ldr	r2, [pc, #192]	@ (8003100 <HAL_DMA_Abort+0x234>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d04a      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2e      	ldr	r2, [pc, #184]	@ (8003104 <HAL_DMA_Abort+0x238>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d045      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2d      	ldr	r2, [pc, #180]	@ (8003108 <HAL_DMA_Abort+0x23c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d040      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2b      	ldr	r2, [pc, #172]	@ (800310c <HAL_DMA_Abort+0x240>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d03b      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2a      	ldr	r2, [pc, #168]	@ (8003110 <HAL_DMA_Abort+0x244>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d036      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a28      	ldr	r2, [pc, #160]	@ (8003114 <HAL_DMA_Abort+0x248>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d031      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a27      	ldr	r2, [pc, #156]	@ (8003118 <HAL_DMA_Abort+0x24c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d02c      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a25      	ldr	r2, [pc, #148]	@ (800311c <HAL_DMA_Abort+0x250>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d027      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a24      	ldr	r2, [pc, #144]	@ (8003120 <HAL_DMA_Abort+0x254>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d022      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a22      	ldr	r2, [pc, #136]	@ (8003124 <HAL_DMA_Abort+0x258>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01d      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a21      	ldr	r2, [pc, #132]	@ (8003128 <HAL_DMA_Abort+0x25c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d018      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1f      	ldr	r2, [pc, #124]	@ (800312c <HAL_DMA_Abort+0x260>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003130 <HAL_DMA_Abort+0x264>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00e      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003134 <HAL_DMA_Abort+0x268>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d009      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003138 <HAL_DMA_Abort+0x26c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d004      	beq.n	80030da <HAL_DMA_Abort+0x20e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a19      	ldr	r2, [pc, #100]	@ (800313c <HAL_DMA_Abort+0x270>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d132      	bne.n	8003140 <HAL_DMA_Abort+0x274>
 80030da:	2301      	movs	r3, #1
 80030dc:	e031      	b.n	8003142 <HAL_DMA_Abort+0x276>
 80030de:	bf00      	nop
 80030e0:	40020010 	.word	0x40020010
 80030e4:	40020028 	.word	0x40020028
 80030e8:	40020040 	.word	0x40020040
 80030ec:	40020058 	.word	0x40020058
 80030f0:	40020070 	.word	0x40020070
 80030f4:	40020088 	.word	0x40020088
 80030f8:	400200a0 	.word	0x400200a0
 80030fc:	400200b8 	.word	0x400200b8
 8003100:	40020410 	.word	0x40020410
 8003104:	40020428 	.word	0x40020428
 8003108:	40020440 	.word	0x40020440
 800310c:	40020458 	.word	0x40020458
 8003110:	40020470 	.word	0x40020470
 8003114:	40020488 	.word	0x40020488
 8003118:	400204a0 	.word	0x400204a0
 800311c:	400204b8 	.word	0x400204b8
 8003120:	58025408 	.word	0x58025408
 8003124:	5802541c 	.word	0x5802541c
 8003128:	58025430 	.word	0x58025430
 800312c:	58025444 	.word	0x58025444
 8003130:	58025458 	.word	0x58025458
 8003134:	5802546c 	.word	0x5802546c
 8003138:	58025480 	.word	0x58025480
 800313c:	58025494 	.word	0x58025494
 8003140:	2300      	movs	r3, #0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003150:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003154:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6d      	ldr	r2, [pc, #436]	@ (8003310 <HAL_DMA_Abort+0x444>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d04a      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a6b      	ldr	r2, [pc, #428]	@ (8003314 <HAL_DMA_Abort+0x448>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d045      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6a      	ldr	r2, [pc, #424]	@ (8003318 <HAL_DMA_Abort+0x44c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d040      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a68      	ldr	r2, [pc, #416]	@ (800331c <HAL_DMA_Abort+0x450>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d03b      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a67      	ldr	r2, [pc, #412]	@ (8003320 <HAL_DMA_Abort+0x454>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d036      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a65      	ldr	r2, [pc, #404]	@ (8003324 <HAL_DMA_Abort+0x458>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d031      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a64      	ldr	r2, [pc, #400]	@ (8003328 <HAL_DMA_Abort+0x45c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d02c      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a62      	ldr	r2, [pc, #392]	@ (800332c <HAL_DMA_Abort+0x460>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d027      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a61      	ldr	r2, [pc, #388]	@ (8003330 <HAL_DMA_Abort+0x464>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d022      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a5f      	ldr	r2, [pc, #380]	@ (8003334 <HAL_DMA_Abort+0x468>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01d      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a5e      	ldr	r2, [pc, #376]	@ (8003338 <HAL_DMA_Abort+0x46c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d018      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a5c      	ldr	r2, [pc, #368]	@ (800333c <HAL_DMA_Abort+0x470>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003340 <HAL_DMA_Abort+0x474>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00e      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a59      	ldr	r2, [pc, #356]	@ (8003344 <HAL_DMA_Abort+0x478>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d009      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a58      	ldr	r2, [pc, #352]	@ (8003348 <HAL_DMA_Abort+0x47c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d004      	beq.n	80031f6 <HAL_DMA_Abort+0x32a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a56      	ldr	r2, [pc, #344]	@ (800334c <HAL_DMA_Abort+0x480>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d108      	bne.n	8003208 <HAL_DMA_Abort+0x33c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e007      	b.n	8003218 <HAL_DMA_Abort+0x34c>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003218:	e013      	b.n	8003242 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800321a:	f7fe fefd 	bl	8002018 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b05      	cmp	r3, #5
 8003226:	d90c      	bls.n	8003242 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2203      	movs	r2, #3
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e12d      	b.n	800349e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e5      	bne.n	800321a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a2f      	ldr	r2, [pc, #188]	@ (8003310 <HAL_DMA_Abort+0x444>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d04a      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2d      	ldr	r2, [pc, #180]	@ (8003314 <HAL_DMA_Abort+0x448>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d045      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a2c      	ldr	r2, [pc, #176]	@ (8003318 <HAL_DMA_Abort+0x44c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d040      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a2a      	ldr	r2, [pc, #168]	@ (800331c <HAL_DMA_Abort+0x450>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d03b      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a29      	ldr	r2, [pc, #164]	@ (8003320 <HAL_DMA_Abort+0x454>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d036      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a27      	ldr	r2, [pc, #156]	@ (8003324 <HAL_DMA_Abort+0x458>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d031      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a26      	ldr	r2, [pc, #152]	@ (8003328 <HAL_DMA_Abort+0x45c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d02c      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a24      	ldr	r2, [pc, #144]	@ (800332c <HAL_DMA_Abort+0x460>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d027      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a23      	ldr	r2, [pc, #140]	@ (8003330 <HAL_DMA_Abort+0x464>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d022      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a21      	ldr	r2, [pc, #132]	@ (8003334 <HAL_DMA_Abort+0x468>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01d      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a20      	ldr	r2, [pc, #128]	@ (8003338 <HAL_DMA_Abort+0x46c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d018      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1e      	ldr	r2, [pc, #120]	@ (800333c <HAL_DMA_Abort+0x470>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003340 <HAL_DMA_Abort+0x474>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00e      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003344 <HAL_DMA_Abort+0x478>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1a      	ldr	r2, [pc, #104]	@ (8003348 <HAL_DMA_Abort+0x47c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_DMA_Abort+0x422>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a18      	ldr	r2, [pc, #96]	@ (800334c <HAL_DMA_Abort+0x480>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d101      	bne.n	80032f2 <HAL_DMA_Abort+0x426>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_DMA_Abort+0x428>
 80032f2:	2300      	movs	r3, #0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d02b      	beq.n	8003350 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	223f      	movs	r2, #63	@ 0x3f
 8003308:	409a      	lsls	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	e02a      	b.n	8003366 <HAL_DMA_Abort+0x49a>
 8003310:	40020010 	.word	0x40020010
 8003314:	40020028 	.word	0x40020028
 8003318:	40020040 	.word	0x40020040
 800331c:	40020058 	.word	0x40020058
 8003320:	40020070 	.word	0x40020070
 8003324:	40020088 	.word	0x40020088
 8003328:	400200a0 	.word	0x400200a0
 800332c:	400200b8 	.word	0x400200b8
 8003330:	40020410 	.word	0x40020410
 8003334:	40020428 	.word	0x40020428
 8003338:	40020440 	.word	0x40020440
 800333c:	40020458 	.word	0x40020458
 8003340:	40020470 	.word	0x40020470
 8003344:	40020488 	.word	0x40020488
 8003348:	400204a0 	.word	0x400204a0
 800334c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	2201      	movs	r2, #1
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a4f      	ldr	r2, [pc, #316]	@ (80034a8 <HAL_DMA_Abort+0x5dc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d072      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a4d      	ldr	r2, [pc, #308]	@ (80034ac <HAL_DMA_Abort+0x5e0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d06d      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a4c      	ldr	r2, [pc, #304]	@ (80034b0 <HAL_DMA_Abort+0x5e4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d068      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a4a      	ldr	r2, [pc, #296]	@ (80034b4 <HAL_DMA_Abort+0x5e8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d063      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a49      	ldr	r2, [pc, #292]	@ (80034b8 <HAL_DMA_Abort+0x5ec>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d05e      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a47      	ldr	r2, [pc, #284]	@ (80034bc <HAL_DMA_Abort+0x5f0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d059      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a46      	ldr	r2, [pc, #280]	@ (80034c0 <HAL_DMA_Abort+0x5f4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d054      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a44      	ldr	r2, [pc, #272]	@ (80034c4 <HAL_DMA_Abort+0x5f8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d04f      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a43      	ldr	r2, [pc, #268]	@ (80034c8 <HAL_DMA_Abort+0x5fc>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d04a      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a41      	ldr	r2, [pc, #260]	@ (80034cc <HAL_DMA_Abort+0x600>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d045      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a40      	ldr	r2, [pc, #256]	@ (80034d0 <HAL_DMA_Abort+0x604>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d040      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a3e      	ldr	r2, [pc, #248]	@ (80034d4 <HAL_DMA_Abort+0x608>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d03b      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a3d      	ldr	r2, [pc, #244]	@ (80034d8 <HAL_DMA_Abort+0x60c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d036      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a3b      	ldr	r2, [pc, #236]	@ (80034dc <HAL_DMA_Abort+0x610>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d031      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a3a      	ldr	r2, [pc, #232]	@ (80034e0 <HAL_DMA_Abort+0x614>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d02c      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a38      	ldr	r2, [pc, #224]	@ (80034e4 <HAL_DMA_Abort+0x618>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d027      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a37      	ldr	r2, [pc, #220]	@ (80034e8 <HAL_DMA_Abort+0x61c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d022      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a35      	ldr	r2, [pc, #212]	@ (80034ec <HAL_DMA_Abort+0x620>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01d      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a34      	ldr	r2, [pc, #208]	@ (80034f0 <HAL_DMA_Abort+0x624>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d018      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a32      	ldr	r2, [pc, #200]	@ (80034f4 <HAL_DMA_Abort+0x628>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a31      	ldr	r2, [pc, #196]	@ (80034f8 <HAL_DMA_Abort+0x62c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a2f      	ldr	r2, [pc, #188]	@ (80034fc <HAL_DMA_Abort+0x630>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a2e      	ldr	r2, [pc, #184]	@ (8003500 <HAL_DMA_Abort+0x634>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_DMA_Abort+0x58a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a2c      	ldr	r2, [pc, #176]	@ (8003504 <HAL_DMA_Abort+0x638>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <HAL_DMA_Abort+0x58e>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_DMA_Abort+0x590>
 800345a:	2300      	movs	r3, #0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d015      	beq.n	800348c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003468:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800347c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003480:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800348a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40020010 	.word	0x40020010
 80034ac:	40020028 	.word	0x40020028
 80034b0:	40020040 	.word	0x40020040
 80034b4:	40020058 	.word	0x40020058
 80034b8:	40020070 	.word	0x40020070
 80034bc:	40020088 	.word	0x40020088
 80034c0:	400200a0 	.word	0x400200a0
 80034c4:	400200b8 	.word	0x400200b8
 80034c8:	40020410 	.word	0x40020410
 80034cc:	40020428 	.word	0x40020428
 80034d0:	40020440 	.word	0x40020440
 80034d4:	40020458 	.word	0x40020458
 80034d8:	40020470 	.word	0x40020470
 80034dc:	40020488 	.word	0x40020488
 80034e0:	400204a0 	.word	0x400204a0
 80034e4:	400204b8 	.word	0x400204b8
 80034e8:	58025408 	.word	0x58025408
 80034ec:	5802541c 	.word	0x5802541c
 80034f0:	58025430 	.word	0x58025430
 80034f4:	58025444 	.word	0x58025444
 80034f8:	58025458 	.word	0x58025458
 80034fc:	5802546c 	.word	0x5802546c
 8003500:	58025480 	.word	0x58025480
 8003504:	58025494 	.word	0x58025494

08003508 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	@ 0x28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003514:	4b67      	ldr	r3, [pc, #412]	@ (80036b4 <HAL_DMA_IRQHandler+0x1ac>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a67      	ldr	r2, [pc, #412]	@ (80036b8 <HAL_DMA_IRQHandler+0x1b0>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0a9b      	lsrs	r3, r3, #10
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003526:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a5f      	ldr	r2, [pc, #380]	@ (80036bc <HAL_DMA_IRQHandler+0x1b4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d04a      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a5d      	ldr	r2, [pc, #372]	@ (80036c0 <HAL_DMA_IRQHandler+0x1b8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d045      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5c      	ldr	r2, [pc, #368]	@ (80036c4 <HAL_DMA_IRQHandler+0x1bc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d040      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a5a      	ldr	r2, [pc, #360]	@ (80036c8 <HAL_DMA_IRQHandler+0x1c0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d03b      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a59      	ldr	r2, [pc, #356]	@ (80036cc <HAL_DMA_IRQHandler+0x1c4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d036      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a57      	ldr	r2, [pc, #348]	@ (80036d0 <HAL_DMA_IRQHandler+0x1c8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d031      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a56      	ldr	r2, [pc, #344]	@ (80036d4 <HAL_DMA_IRQHandler+0x1cc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d02c      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a54      	ldr	r2, [pc, #336]	@ (80036d8 <HAL_DMA_IRQHandler+0x1d0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d027      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a53      	ldr	r2, [pc, #332]	@ (80036dc <HAL_DMA_IRQHandler+0x1d4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d022      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a51      	ldr	r2, [pc, #324]	@ (80036e0 <HAL_DMA_IRQHandler+0x1d8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01d      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a50      	ldr	r2, [pc, #320]	@ (80036e4 <HAL_DMA_IRQHandler+0x1dc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d018      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a4e      	ldr	r2, [pc, #312]	@ (80036e8 <HAL_DMA_IRQHandler+0x1e0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a4d      	ldr	r2, [pc, #308]	@ (80036ec <HAL_DMA_IRQHandler+0x1e4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00e      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a4b      	ldr	r2, [pc, #300]	@ (80036f0 <HAL_DMA_IRQHandler+0x1e8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d009      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a4a      	ldr	r2, [pc, #296]	@ (80036f4 <HAL_DMA_IRQHandler+0x1ec>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_DMA_IRQHandler+0xd2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a48      	ldr	r2, [pc, #288]	@ (80036f8 <HAL_DMA_IRQHandler+0x1f0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <HAL_DMA_IRQHandler+0xd6>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <HAL_DMA_IRQHandler+0xd8>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 842b 	beq.w	8003e3c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	2208      	movs	r2, #8
 80035f0:	409a      	lsls	r2, r3
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 80a2 	beq.w	8003740 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2e      	ldr	r2, [pc, #184]	@ (80036bc <HAL_DMA_IRQHandler+0x1b4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d04a      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a2d      	ldr	r2, [pc, #180]	@ (80036c0 <HAL_DMA_IRQHandler+0x1b8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d045      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2b      	ldr	r2, [pc, #172]	@ (80036c4 <HAL_DMA_IRQHandler+0x1bc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d040      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2a      	ldr	r2, [pc, #168]	@ (80036c8 <HAL_DMA_IRQHandler+0x1c0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d03b      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a28      	ldr	r2, [pc, #160]	@ (80036cc <HAL_DMA_IRQHandler+0x1c4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d036      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a27      	ldr	r2, [pc, #156]	@ (80036d0 <HAL_DMA_IRQHandler+0x1c8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d031      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a25      	ldr	r2, [pc, #148]	@ (80036d4 <HAL_DMA_IRQHandler+0x1cc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d02c      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a24      	ldr	r2, [pc, #144]	@ (80036d8 <HAL_DMA_IRQHandler+0x1d0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d027      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a22      	ldr	r2, [pc, #136]	@ (80036dc <HAL_DMA_IRQHandler+0x1d4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d022      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a21      	ldr	r2, [pc, #132]	@ (80036e0 <HAL_DMA_IRQHandler+0x1d8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d01d      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1f      	ldr	r2, [pc, #124]	@ (80036e4 <HAL_DMA_IRQHandler+0x1dc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d018      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1e      	ldr	r2, [pc, #120]	@ (80036e8 <HAL_DMA_IRQHandler+0x1e0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d013      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1c      	ldr	r2, [pc, #112]	@ (80036ec <HAL_DMA_IRQHandler+0x1e4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00e      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1b      	ldr	r2, [pc, #108]	@ (80036f0 <HAL_DMA_IRQHandler+0x1e8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d009      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a19      	ldr	r2, [pc, #100]	@ (80036f4 <HAL_DMA_IRQHandler+0x1ec>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_DMA_IRQHandler+0x194>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a18      	ldr	r2, [pc, #96]	@ (80036f8 <HAL_DMA_IRQHandler+0x1f0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d12f      	bne.n	80036fc <HAL_DMA_IRQHandler+0x1f4>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	e02e      	b.n	8003710 <HAL_DMA_IRQHandler+0x208>
 80036b2:	bf00      	nop
 80036b4:	24000000 	.word	0x24000000
 80036b8:	1b4e81b5 	.word	0x1b4e81b5
 80036bc:	40020010 	.word	0x40020010
 80036c0:	40020028 	.word	0x40020028
 80036c4:	40020040 	.word	0x40020040
 80036c8:	40020058 	.word	0x40020058
 80036cc:	40020070 	.word	0x40020070
 80036d0:	40020088 	.word	0x40020088
 80036d4:	400200a0 	.word	0x400200a0
 80036d8:	400200b8 	.word	0x400200b8
 80036dc:	40020410 	.word	0x40020410
 80036e0:	40020428 	.word	0x40020428
 80036e4:	40020440 	.word	0x40020440
 80036e8:	40020458 	.word	0x40020458
 80036ec:	40020470 	.word	0x40020470
 80036f0:	40020488 	.word	0x40020488
 80036f4:	400204a0 	.word	0x400204a0
 80036f8:	400204b8 	.word	0x400204b8
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	bf14      	ite	ne
 800370a:	2301      	movne	r3, #1
 800370c:	2300      	moveq	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0204 	bic.w	r2, r2, #4
 8003722:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2208      	movs	r2, #8
 800372e:	409a      	lsls	r2, r3
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003738:	f043 0201 	orr.w	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	fa22 f303 	lsr.w	r3, r2, r3
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d06e      	beq.n	8003834 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a69      	ldr	r2, [pc, #420]	@ (8003900 <HAL_DMA_IRQHandler+0x3f8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d04a      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a67      	ldr	r2, [pc, #412]	@ (8003904 <HAL_DMA_IRQHandler+0x3fc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d045      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a66      	ldr	r2, [pc, #408]	@ (8003908 <HAL_DMA_IRQHandler+0x400>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d040      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a64      	ldr	r2, [pc, #400]	@ (800390c <HAL_DMA_IRQHandler+0x404>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d03b      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a63      	ldr	r2, [pc, #396]	@ (8003910 <HAL_DMA_IRQHandler+0x408>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d036      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a61      	ldr	r2, [pc, #388]	@ (8003914 <HAL_DMA_IRQHandler+0x40c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d031      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a60      	ldr	r2, [pc, #384]	@ (8003918 <HAL_DMA_IRQHandler+0x410>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d02c      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a5e      	ldr	r2, [pc, #376]	@ (800391c <HAL_DMA_IRQHandler+0x414>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d027      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a5d      	ldr	r2, [pc, #372]	@ (8003920 <HAL_DMA_IRQHandler+0x418>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d022      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a5b      	ldr	r2, [pc, #364]	@ (8003924 <HAL_DMA_IRQHandler+0x41c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d01d      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a5a      	ldr	r2, [pc, #360]	@ (8003928 <HAL_DMA_IRQHandler+0x420>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d018      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a58      	ldr	r2, [pc, #352]	@ (800392c <HAL_DMA_IRQHandler+0x424>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a57      	ldr	r2, [pc, #348]	@ (8003930 <HAL_DMA_IRQHandler+0x428>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00e      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a55      	ldr	r2, [pc, #340]	@ (8003934 <HAL_DMA_IRQHandler+0x42c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d009      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a54      	ldr	r2, [pc, #336]	@ (8003938 <HAL_DMA_IRQHandler+0x430>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d004      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x2ee>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a52      	ldr	r2, [pc, #328]	@ (800393c <HAL_DMA_IRQHandler+0x434>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10a      	bne.n	800380c <HAL_DMA_IRQHandler+0x304>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf14      	ite	ne
 8003804:	2301      	movne	r3, #1
 8003806:	2300      	moveq	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	e003      	b.n	8003814 <HAL_DMA_IRQHandler+0x30c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2300      	movs	r3, #0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	2201      	movs	r2, #1
 8003822:	409a      	lsls	r2, r3
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382c:	f043 0202 	orr.w	r2, r3, #2
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	2204      	movs	r2, #4
 800383e:	409a      	lsls	r2, r3
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 808f 	beq.w	8003968 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2c      	ldr	r2, [pc, #176]	@ (8003900 <HAL_DMA_IRQHandler+0x3f8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d04a      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a2a      	ldr	r2, [pc, #168]	@ (8003904 <HAL_DMA_IRQHandler+0x3fc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d045      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a29      	ldr	r2, [pc, #164]	@ (8003908 <HAL_DMA_IRQHandler+0x400>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d040      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a27      	ldr	r2, [pc, #156]	@ (800390c <HAL_DMA_IRQHandler+0x404>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d03b      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a26      	ldr	r2, [pc, #152]	@ (8003910 <HAL_DMA_IRQHandler+0x408>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d036      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a24      	ldr	r2, [pc, #144]	@ (8003914 <HAL_DMA_IRQHandler+0x40c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d031      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a23      	ldr	r2, [pc, #140]	@ (8003918 <HAL_DMA_IRQHandler+0x410>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d02c      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a21      	ldr	r2, [pc, #132]	@ (800391c <HAL_DMA_IRQHandler+0x414>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d027      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a20      	ldr	r2, [pc, #128]	@ (8003920 <HAL_DMA_IRQHandler+0x418>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d022      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003924 <HAL_DMA_IRQHandler+0x41c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01d      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003928 <HAL_DMA_IRQHandler+0x420>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d018      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1b      	ldr	r2, [pc, #108]	@ (800392c <HAL_DMA_IRQHandler+0x424>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003930 <HAL_DMA_IRQHandler+0x428>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00e      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a18      	ldr	r2, [pc, #96]	@ (8003934 <HAL_DMA_IRQHandler+0x42c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d009      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a17      	ldr	r2, [pc, #92]	@ (8003938 <HAL_DMA_IRQHandler+0x430>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d004      	beq.n	80038ea <HAL_DMA_IRQHandler+0x3e2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a15      	ldr	r2, [pc, #84]	@ (800393c <HAL_DMA_IRQHandler+0x434>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d12a      	bne.n	8003940 <HAL_DMA_IRQHandler+0x438>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e023      	b.n	8003948 <HAL_DMA_IRQHandler+0x440>
 8003900:	40020010 	.word	0x40020010
 8003904:	40020028 	.word	0x40020028
 8003908:	40020040 	.word	0x40020040
 800390c:	40020058 	.word	0x40020058
 8003910:	40020070 	.word	0x40020070
 8003914:	40020088 	.word	0x40020088
 8003918:	400200a0 	.word	0x400200a0
 800391c:	400200b8 	.word	0x400200b8
 8003920:	40020410 	.word	0x40020410
 8003924:	40020428 	.word	0x40020428
 8003928:	40020440 	.word	0x40020440
 800392c:	40020458 	.word	0x40020458
 8003930:	40020470 	.word	0x40020470
 8003934:	40020488 	.word	0x40020488
 8003938:	400204a0 	.word	0x400204a0
 800393c:	400204b8 	.word	0x400204b8
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	2204      	movs	r2, #4
 8003956:	409a      	lsls	r2, r3
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003960:	f043 0204 	orr.w	r2, r3, #4
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2210      	movs	r2, #16
 8003972:	409a      	lsls	r2, r3
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80a6 	beq.w	8003aca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a85      	ldr	r2, [pc, #532]	@ (8003b98 <HAL_DMA_IRQHandler+0x690>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d04a      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a83      	ldr	r2, [pc, #524]	@ (8003b9c <HAL_DMA_IRQHandler+0x694>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d045      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a82      	ldr	r2, [pc, #520]	@ (8003ba0 <HAL_DMA_IRQHandler+0x698>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d040      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a80      	ldr	r2, [pc, #512]	@ (8003ba4 <HAL_DMA_IRQHandler+0x69c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d03b      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a7f      	ldr	r2, [pc, #508]	@ (8003ba8 <HAL_DMA_IRQHandler+0x6a0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d036      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a7d      	ldr	r2, [pc, #500]	@ (8003bac <HAL_DMA_IRQHandler+0x6a4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d031      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a7c      	ldr	r2, [pc, #496]	@ (8003bb0 <HAL_DMA_IRQHandler+0x6a8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d02c      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a7a      	ldr	r2, [pc, #488]	@ (8003bb4 <HAL_DMA_IRQHandler+0x6ac>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d027      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a79      	ldr	r2, [pc, #484]	@ (8003bb8 <HAL_DMA_IRQHandler+0x6b0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d022      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a77      	ldr	r2, [pc, #476]	@ (8003bbc <HAL_DMA_IRQHandler+0x6b4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01d      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a76      	ldr	r2, [pc, #472]	@ (8003bc0 <HAL_DMA_IRQHandler+0x6b8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d018      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a74      	ldr	r2, [pc, #464]	@ (8003bc4 <HAL_DMA_IRQHandler+0x6bc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a73      	ldr	r2, [pc, #460]	@ (8003bc8 <HAL_DMA_IRQHandler+0x6c0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00e      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a71      	ldr	r2, [pc, #452]	@ (8003bcc <HAL_DMA_IRQHandler+0x6c4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a70      	ldr	r2, [pc, #448]	@ (8003bd0 <HAL_DMA_IRQHandler+0x6c8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x516>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6e      	ldr	r2, [pc, #440]	@ (8003bd4 <HAL_DMA_IRQHandler+0x6cc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d10a      	bne.n	8003a34 <HAL_DMA_IRQHandler+0x52c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e009      	b.n	8003a48 <HAL_DMA_IRQHandler+0x540>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bf14      	ite	ne
 8003a42:	2301      	movne	r3, #1
 8003a44:	2300      	moveq	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d03e      	beq.n	8003aca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	2210      	movs	r2, #16
 8003a56:	409a      	lsls	r2, r3
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d018      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d108      	bne.n	8003a8a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d024      	beq.n	8003aca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4798      	blx	r3
 8003a88:	e01f      	b.n	8003aca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01b      	beq.n	8003aca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
 8003a9a:	e016      	b.n	8003aca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d107      	bne.n	8003aba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0208 	bic.w	r2, r2, #8
 8003ab8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ace:	f003 031f 	and.w	r3, r3, #31
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 8110 	beq.w	8003d00 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8003b98 <HAL_DMA_IRQHandler+0x690>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d04a      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a2b      	ldr	r2, [pc, #172]	@ (8003b9c <HAL_DMA_IRQHandler+0x694>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d045      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a29      	ldr	r2, [pc, #164]	@ (8003ba0 <HAL_DMA_IRQHandler+0x698>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d040      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a28      	ldr	r2, [pc, #160]	@ (8003ba4 <HAL_DMA_IRQHandler+0x69c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d03b      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a26      	ldr	r2, [pc, #152]	@ (8003ba8 <HAL_DMA_IRQHandler+0x6a0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d036      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a25      	ldr	r2, [pc, #148]	@ (8003bac <HAL_DMA_IRQHandler+0x6a4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d031      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a23      	ldr	r2, [pc, #140]	@ (8003bb0 <HAL_DMA_IRQHandler+0x6a8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d02c      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a22      	ldr	r2, [pc, #136]	@ (8003bb4 <HAL_DMA_IRQHandler+0x6ac>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d027      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a20      	ldr	r2, [pc, #128]	@ (8003bb8 <HAL_DMA_IRQHandler+0x6b0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d022      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bbc <HAL_DMA_IRQHandler+0x6b4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d01d      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc0 <HAL_DMA_IRQHandler+0x6b8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d018      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc4 <HAL_DMA_IRQHandler+0x6bc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc8 <HAL_DMA_IRQHandler+0x6c0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00e      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a19      	ldr	r2, [pc, #100]	@ (8003bcc <HAL_DMA_IRQHandler+0x6c4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d009      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a17      	ldr	r2, [pc, #92]	@ (8003bd0 <HAL_DMA_IRQHandler+0x6c8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d004      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x678>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a16      	ldr	r2, [pc, #88]	@ (8003bd4 <HAL_DMA_IRQHandler+0x6cc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d12b      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x6d0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bf14      	ite	ne
 8003b8e:	2301      	movne	r3, #1
 8003b90:	2300      	moveq	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	e02a      	b.n	8003bec <HAL_DMA_IRQHandler+0x6e4>
 8003b96:	bf00      	nop
 8003b98:	40020010 	.word	0x40020010
 8003b9c:	40020028 	.word	0x40020028
 8003ba0:	40020040 	.word	0x40020040
 8003ba4:	40020058 	.word	0x40020058
 8003ba8:	40020070 	.word	0x40020070
 8003bac:	40020088 	.word	0x40020088
 8003bb0:	400200a0 	.word	0x400200a0
 8003bb4:	400200b8 	.word	0x400200b8
 8003bb8:	40020410 	.word	0x40020410
 8003bbc:	40020428 	.word	0x40020428
 8003bc0:	40020440 	.word	0x40020440
 8003bc4:	40020458 	.word	0x40020458
 8003bc8:	40020470 	.word	0x40020470
 8003bcc:	40020488 	.word	0x40020488
 8003bd0:	400204a0 	.word	0x400204a0
 8003bd4:	400204b8 	.word	0x400204b8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bf14      	ite	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	2300      	moveq	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8087 	beq.w	8003d00 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d139      	bne.n	8003c82 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0216 	bic.w	r2, r2, #22
 8003c1c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c2c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d103      	bne.n	8003c3e <HAL_DMA_IRQHandler+0x736>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0208 	bic.w	r2, r2, #8
 8003c4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	223f      	movs	r2, #63	@ 0x3f
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 834a 	beq.w	800430c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	4798      	blx	r3
          }
          return;
 8003c80:	e344      	b.n	800430c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d018      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d108      	bne.n	8003cb0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d02c      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	4798      	blx	r3
 8003cae:	e027      	b.n	8003d00 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d023      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	4798      	blx	r3
 8003cc0:	e01e      	b.n	8003d00 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10f      	bne.n	8003cf0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0210 	bic.w	r2, r2, #16
 8003cde:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8306 	beq.w	8004316 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8088 	beq.w	8003e28 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a7a      	ldr	r2, [pc, #488]	@ (8003f10 <HAL_DMA_IRQHandler+0xa08>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d04a      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a79      	ldr	r2, [pc, #484]	@ (8003f14 <HAL_DMA_IRQHandler+0xa0c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d045      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a77      	ldr	r2, [pc, #476]	@ (8003f18 <HAL_DMA_IRQHandler+0xa10>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d040      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a76      	ldr	r2, [pc, #472]	@ (8003f1c <HAL_DMA_IRQHandler+0xa14>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d03b      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a74      	ldr	r2, [pc, #464]	@ (8003f20 <HAL_DMA_IRQHandler+0xa18>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d036      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a73      	ldr	r2, [pc, #460]	@ (8003f24 <HAL_DMA_IRQHandler+0xa1c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d031      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a71      	ldr	r2, [pc, #452]	@ (8003f28 <HAL_DMA_IRQHandler+0xa20>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d02c      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a70      	ldr	r2, [pc, #448]	@ (8003f2c <HAL_DMA_IRQHandler+0xa24>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d027      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a6e      	ldr	r2, [pc, #440]	@ (8003f30 <HAL_DMA_IRQHandler+0xa28>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d022      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6d      	ldr	r2, [pc, #436]	@ (8003f34 <HAL_DMA_IRQHandler+0xa2c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d01d      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a6b      	ldr	r2, [pc, #428]	@ (8003f38 <HAL_DMA_IRQHandler+0xa30>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d018      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a6a      	ldr	r2, [pc, #424]	@ (8003f3c <HAL_DMA_IRQHandler+0xa34>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d013      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a68      	ldr	r2, [pc, #416]	@ (8003f40 <HAL_DMA_IRQHandler+0xa38>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00e      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a67      	ldr	r2, [pc, #412]	@ (8003f44 <HAL_DMA_IRQHandler+0xa3c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d009      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a65      	ldr	r2, [pc, #404]	@ (8003f48 <HAL_DMA_IRQHandler+0xa40>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x8b8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a64      	ldr	r2, [pc, #400]	@ (8003f4c <HAL_DMA_IRQHandler+0xa44>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d108      	bne.n	8003dd2 <HAL_DMA_IRQHandler+0x8ca>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e007      	b.n	8003de2 <HAL_DMA_IRQHandler+0x8da>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0201 	bic.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3301      	adds	r3, #1
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d307      	bcc.n	8003dfe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f2      	bne.n	8003de2 <HAL_DMA_IRQHandler+0x8da>
 8003dfc:	e000      	b.n	8003e00 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003dfe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2203      	movs	r2, #3
 8003e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003e16:	e003      	b.n	8003e20 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8272 	beq.w	8004316 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
 8003e3a:	e26c      	b.n	8004316 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a43      	ldr	r2, [pc, #268]	@ (8003f50 <HAL_DMA_IRQHandler+0xa48>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d022      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x984>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a42      	ldr	r2, [pc, #264]	@ (8003f54 <HAL_DMA_IRQHandler+0xa4c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d01d      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x984>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a40      	ldr	r2, [pc, #256]	@ (8003f58 <HAL_DMA_IRQHandler+0xa50>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d018      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x984>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f5c <HAL_DMA_IRQHandler+0xa54>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x984>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a3d      	ldr	r2, [pc, #244]	@ (8003f60 <HAL_DMA_IRQHandler+0xa58>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00e      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x984>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a3c      	ldr	r2, [pc, #240]	@ (8003f64 <HAL_DMA_IRQHandler+0xa5c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d009      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x984>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a3a      	ldr	r2, [pc, #232]	@ (8003f68 <HAL_DMA_IRQHandler+0xa60>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x984>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a39      	ldr	r2, [pc, #228]	@ (8003f6c <HAL_DMA_IRQHandler+0xa64>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <HAL_DMA_IRQHandler+0x988>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <HAL_DMA_IRQHandler+0x98a>
 8003e90:	2300      	movs	r3, #0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 823f 	beq.w	8004316 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80cd 	beq.w	8004050 <HAL_DMA_IRQHandler+0xb48>
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80c7 	beq.w	8004050 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	2204      	movs	r2, #4
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d049      	beq.n	8003f70 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8210 	beq.w	8004310 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ef8:	e20a      	b.n	8004310 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8206 	beq.w	8004310 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f0c:	e200      	b.n	8004310 <HAL_DMA_IRQHandler+0xe08>
 8003f0e:	bf00      	nop
 8003f10:	40020010 	.word	0x40020010
 8003f14:	40020028 	.word	0x40020028
 8003f18:	40020040 	.word	0x40020040
 8003f1c:	40020058 	.word	0x40020058
 8003f20:	40020070 	.word	0x40020070
 8003f24:	40020088 	.word	0x40020088
 8003f28:	400200a0 	.word	0x400200a0
 8003f2c:	400200b8 	.word	0x400200b8
 8003f30:	40020410 	.word	0x40020410
 8003f34:	40020428 	.word	0x40020428
 8003f38:	40020440 	.word	0x40020440
 8003f3c:	40020458 	.word	0x40020458
 8003f40:	40020470 	.word	0x40020470
 8003f44:	40020488 	.word	0x40020488
 8003f48:	400204a0 	.word	0x400204a0
 8003f4c:	400204b8 	.word	0x400204b8
 8003f50:	58025408 	.word	0x58025408
 8003f54:	5802541c 	.word	0x5802541c
 8003f58:	58025430 	.word	0x58025430
 8003f5c:	58025444 	.word	0x58025444
 8003f60:	58025458 	.word	0x58025458
 8003f64:	5802546c 	.word	0x5802546c
 8003f68:	58025480 	.word	0x58025480
 8003f6c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d160      	bne.n	800403c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a7f      	ldr	r2, [pc, #508]	@ (800417c <HAL_DMA_IRQHandler+0xc74>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d04a      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a7d      	ldr	r2, [pc, #500]	@ (8004180 <HAL_DMA_IRQHandler+0xc78>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d045      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a7c      	ldr	r2, [pc, #496]	@ (8004184 <HAL_DMA_IRQHandler+0xc7c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d040      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a7a      	ldr	r2, [pc, #488]	@ (8004188 <HAL_DMA_IRQHandler+0xc80>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d03b      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a79      	ldr	r2, [pc, #484]	@ (800418c <HAL_DMA_IRQHandler+0xc84>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d036      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a77      	ldr	r2, [pc, #476]	@ (8004190 <HAL_DMA_IRQHandler+0xc88>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d031      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a76      	ldr	r2, [pc, #472]	@ (8004194 <HAL_DMA_IRQHandler+0xc8c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d02c      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a74      	ldr	r2, [pc, #464]	@ (8004198 <HAL_DMA_IRQHandler+0xc90>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d027      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a73      	ldr	r2, [pc, #460]	@ (800419c <HAL_DMA_IRQHandler+0xc94>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d022      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a71      	ldr	r2, [pc, #452]	@ (80041a0 <HAL_DMA_IRQHandler+0xc98>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01d      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a70      	ldr	r2, [pc, #448]	@ (80041a4 <HAL_DMA_IRQHandler+0xc9c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d018      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a6e      	ldr	r2, [pc, #440]	@ (80041a8 <HAL_DMA_IRQHandler+0xca0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a6d      	ldr	r2, [pc, #436]	@ (80041ac <HAL_DMA_IRQHandler+0xca4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a6b      	ldr	r2, [pc, #428]	@ (80041b0 <HAL_DMA_IRQHandler+0xca8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a6a      	ldr	r2, [pc, #424]	@ (80041b4 <HAL_DMA_IRQHandler+0xcac>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_DMA_IRQHandler+0xb12>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a68      	ldr	r2, [pc, #416]	@ (80041b8 <HAL_DMA_IRQHandler+0xcb0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d108      	bne.n	800402c <HAL_DMA_IRQHandler+0xb24>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0208 	bic.w	r2, r2, #8
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e007      	b.n	800403c <HAL_DMA_IRQHandler+0xb34>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0204 	bic.w	r2, r2, #4
 800403a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8165 	beq.w	8004310 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800404e:	e15f      	b.n	8004310 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2202      	movs	r2, #2
 800405a:	409a      	lsls	r2, r3
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80c5 	beq.w	80041f0 <HAL_DMA_IRQHandler+0xce8>
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80bf 	beq.w	80041f0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	2202      	movs	r2, #2
 800407c:	409a      	lsls	r2, r3
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d018      	beq.n	80040be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 813a 	beq.w	8004314 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040a8:	e134      	b.n	8004314 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 8130 	beq.w	8004314 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040bc:	e12a      	b.n	8004314 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f040 8089 	bne.w	80041dc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a2b      	ldr	r2, [pc, #172]	@ (800417c <HAL_DMA_IRQHandler+0xc74>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d04a      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a29      	ldr	r2, [pc, #164]	@ (8004180 <HAL_DMA_IRQHandler+0xc78>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d045      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a28      	ldr	r2, [pc, #160]	@ (8004184 <HAL_DMA_IRQHandler+0xc7c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d040      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a26      	ldr	r2, [pc, #152]	@ (8004188 <HAL_DMA_IRQHandler+0xc80>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d03b      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a25      	ldr	r2, [pc, #148]	@ (800418c <HAL_DMA_IRQHandler+0xc84>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d036      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a23      	ldr	r2, [pc, #140]	@ (8004190 <HAL_DMA_IRQHandler+0xc88>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d031      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a22      	ldr	r2, [pc, #136]	@ (8004194 <HAL_DMA_IRQHandler+0xc8c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d02c      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a20      	ldr	r2, [pc, #128]	@ (8004198 <HAL_DMA_IRQHandler+0xc90>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d027      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1f      	ldr	r2, [pc, #124]	@ (800419c <HAL_DMA_IRQHandler+0xc94>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d022      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1d      	ldr	r2, [pc, #116]	@ (80041a0 <HAL_DMA_IRQHandler+0xc98>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01d      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1c      	ldr	r2, [pc, #112]	@ (80041a4 <HAL_DMA_IRQHandler+0xc9c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d018      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1a      	ldr	r2, [pc, #104]	@ (80041a8 <HAL_DMA_IRQHandler+0xca0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a19      	ldr	r2, [pc, #100]	@ (80041ac <HAL_DMA_IRQHandler+0xca4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a17      	ldr	r2, [pc, #92]	@ (80041b0 <HAL_DMA_IRQHandler+0xca8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a16      	ldr	r2, [pc, #88]	@ (80041b4 <HAL_DMA_IRQHandler+0xcac>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_DMA_IRQHandler+0xc62>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a14      	ldr	r2, [pc, #80]	@ (80041b8 <HAL_DMA_IRQHandler+0xcb0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d128      	bne.n	80041bc <HAL_DMA_IRQHandler+0xcb4>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0214 	bic.w	r2, r2, #20
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e027      	b.n	80041cc <HAL_DMA_IRQHandler+0xcc4>
 800417c:	40020010 	.word	0x40020010
 8004180:	40020028 	.word	0x40020028
 8004184:	40020040 	.word	0x40020040
 8004188:	40020058 	.word	0x40020058
 800418c:	40020070 	.word	0x40020070
 8004190:	40020088 	.word	0x40020088
 8004194:	400200a0 	.word	0x400200a0
 8004198:	400200b8 	.word	0x400200b8
 800419c:	40020410 	.word	0x40020410
 80041a0:	40020428 	.word	0x40020428
 80041a4:	40020440 	.word	0x40020440
 80041a8:	40020458 	.word	0x40020458
 80041ac:	40020470 	.word	0x40020470
 80041b0:	40020488 	.word	0x40020488
 80041b4:	400204a0 	.word	0x400204a0
 80041b8:	400204b8 	.word	0x400204b8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 020a 	bic.w	r2, r2, #10
 80041ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8097 	beq.w	8004314 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041ee:	e091      	b.n	8004314 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	2208      	movs	r2, #8
 80041fa:	409a      	lsls	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 8088 	beq.w	8004316 <HAL_DMA_IRQHandler+0xe0e>
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 8082 	beq.w	8004316 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a41      	ldr	r2, [pc, #260]	@ (800431c <HAL_DMA_IRQHandler+0xe14>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d04a      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a3f      	ldr	r2, [pc, #252]	@ (8004320 <HAL_DMA_IRQHandler+0xe18>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d045      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a3e      	ldr	r2, [pc, #248]	@ (8004324 <HAL_DMA_IRQHandler+0xe1c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d040      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a3c      	ldr	r2, [pc, #240]	@ (8004328 <HAL_DMA_IRQHandler+0xe20>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d03b      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a3b      	ldr	r2, [pc, #236]	@ (800432c <HAL_DMA_IRQHandler+0xe24>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d036      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a39      	ldr	r2, [pc, #228]	@ (8004330 <HAL_DMA_IRQHandler+0xe28>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d031      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a38      	ldr	r2, [pc, #224]	@ (8004334 <HAL_DMA_IRQHandler+0xe2c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d02c      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a36      	ldr	r2, [pc, #216]	@ (8004338 <HAL_DMA_IRQHandler+0xe30>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d027      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a35      	ldr	r2, [pc, #212]	@ (800433c <HAL_DMA_IRQHandler+0xe34>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d022      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a33      	ldr	r2, [pc, #204]	@ (8004340 <HAL_DMA_IRQHandler+0xe38>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01d      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a32      	ldr	r2, [pc, #200]	@ (8004344 <HAL_DMA_IRQHandler+0xe3c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d018      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a30      	ldr	r2, [pc, #192]	@ (8004348 <HAL_DMA_IRQHandler+0xe40>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a2f      	ldr	r2, [pc, #188]	@ (800434c <HAL_DMA_IRQHandler+0xe44>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00e      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a2d      	ldr	r2, [pc, #180]	@ (8004350 <HAL_DMA_IRQHandler+0xe48>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d009      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004354 <HAL_DMA_IRQHandler+0xe4c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d004      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xdaa>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004358 <HAL_DMA_IRQHandler+0xe50>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d108      	bne.n	80042c4 <HAL_DMA_IRQHandler+0xdbc>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 021c 	bic.w	r2, r2, #28
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e007      	b.n	80042d4 <HAL_DMA_IRQHandler+0xdcc>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 020e 	bic.w	r2, r2, #14
 80042d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	2201      	movs	r2, #1
 80042de:	409a      	lsls	r2, r3
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	4798      	blx	r3
 800430a:	e004      	b.n	8004316 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800430c:	bf00      	nop
 800430e:	e002      	b.n	8004316 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004314:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004316:	3728      	adds	r7, #40	@ 0x28
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40020010 	.word	0x40020010
 8004320:	40020028 	.word	0x40020028
 8004324:	40020040 	.word	0x40020040
 8004328:	40020058 	.word	0x40020058
 800432c:	40020070 	.word	0x40020070
 8004330:	40020088 	.word	0x40020088
 8004334:	400200a0 	.word	0x400200a0
 8004338:	400200b8 	.word	0x400200b8
 800433c:	40020410 	.word	0x40020410
 8004340:	40020428 	.word	0x40020428
 8004344:	40020440 	.word	0x40020440
 8004348:	40020458 	.word	0x40020458
 800434c:	40020470 	.word	0x40020470
 8004350:	40020488 	.word	0x40020488
 8004354:	400204a0 	.word	0x400204a0
 8004358:	400204b8 	.word	0x400204b8

0800435c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004386:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a7f      	ldr	r2, [pc, #508]	@ (8004590 <DMA_SetConfig+0x21c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d072      	beq.n	800447e <DMA_SetConfig+0x10a>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a7d      	ldr	r2, [pc, #500]	@ (8004594 <DMA_SetConfig+0x220>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d06d      	beq.n	800447e <DMA_SetConfig+0x10a>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004598 <DMA_SetConfig+0x224>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d068      	beq.n	800447e <DMA_SetConfig+0x10a>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a7a      	ldr	r2, [pc, #488]	@ (800459c <DMA_SetConfig+0x228>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d063      	beq.n	800447e <DMA_SetConfig+0x10a>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a79      	ldr	r2, [pc, #484]	@ (80045a0 <DMA_SetConfig+0x22c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d05e      	beq.n	800447e <DMA_SetConfig+0x10a>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a77      	ldr	r2, [pc, #476]	@ (80045a4 <DMA_SetConfig+0x230>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d059      	beq.n	800447e <DMA_SetConfig+0x10a>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a76      	ldr	r2, [pc, #472]	@ (80045a8 <DMA_SetConfig+0x234>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d054      	beq.n	800447e <DMA_SetConfig+0x10a>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a74      	ldr	r2, [pc, #464]	@ (80045ac <DMA_SetConfig+0x238>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d04f      	beq.n	800447e <DMA_SetConfig+0x10a>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a73      	ldr	r2, [pc, #460]	@ (80045b0 <DMA_SetConfig+0x23c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d04a      	beq.n	800447e <DMA_SetConfig+0x10a>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a71      	ldr	r2, [pc, #452]	@ (80045b4 <DMA_SetConfig+0x240>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d045      	beq.n	800447e <DMA_SetConfig+0x10a>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a70      	ldr	r2, [pc, #448]	@ (80045b8 <DMA_SetConfig+0x244>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d040      	beq.n	800447e <DMA_SetConfig+0x10a>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a6e      	ldr	r2, [pc, #440]	@ (80045bc <DMA_SetConfig+0x248>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d03b      	beq.n	800447e <DMA_SetConfig+0x10a>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a6d      	ldr	r2, [pc, #436]	@ (80045c0 <DMA_SetConfig+0x24c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d036      	beq.n	800447e <DMA_SetConfig+0x10a>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a6b      	ldr	r2, [pc, #428]	@ (80045c4 <DMA_SetConfig+0x250>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d031      	beq.n	800447e <DMA_SetConfig+0x10a>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a6a      	ldr	r2, [pc, #424]	@ (80045c8 <DMA_SetConfig+0x254>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d02c      	beq.n	800447e <DMA_SetConfig+0x10a>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a68      	ldr	r2, [pc, #416]	@ (80045cc <DMA_SetConfig+0x258>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d027      	beq.n	800447e <DMA_SetConfig+0x10a>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a67      	ldr	r2, [pc, #412]	@ (80045d0 <DMA_SetConfig+0x25c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d022      	beq.n	800447e <DMA_SetConfig+0x10a>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a65      	ldr	r2, [pc, #404]	@ (80045d4 <DMA_SetConfig+0x260>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d01d      	beq.n	800447e <DMA_SetConfig+0x10a>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a64      	ldr	r2, [pc, #400]	@ (80045d8 <DMA_SetConfig+0x264>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d018      	beq.n	800447e <DMA_SetConfig+0x10a>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a62      	ldr	r2, [pc, #392]	@ (80045dc <DMA_SetConfig+0x268>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <DMA_SetConfig+0x10a>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a61      	ldr	r2, [pc, #388]	@ (80045e0 <DMA_SetConfig+0x26c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <DMA_SetConfig+0x10a>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a5f      	ldr	r2, [pc, #380]	@ (80045e4 <DMA_SetConfig+0x270>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d009      	beq.n	800447e <DMA_SetConfig+0x10a>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a5e      	ldr	r2, [pc, #376]	@ (80045e8 <DMA_SetConfig+0x274>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <DMA_SetConfig+0x10a>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a5c      	ldr	r2, [pc, #368]	@ (80045ec <DMA_SetConfig+0x278>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d101      	bne.n	8004482 <DMA_SetConfig+0x10e>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <DMA_SetConfig+0x110>
 8004482:	2300      	movs	r3, #0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00d      	beq.n	80044a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004490:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80044a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a39      	ldr	r2, [pc, #228]	@ (8004590 <DMA_SetConfig+0x21c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d04a      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a38      	ldr	r2, [pc, #224]	@ (8004594 <DMA_SetConfig+0x220>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d045      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a36      	ldr	r2, [pc, #216]	@ (8004598 <DMA_SetConfig+0x224>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d040      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a35      	ldr	r2, [pc, #212]	@ (800459c <DMA_SetConfig+0x228>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d03b      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a33      	ldr	r2, [pc, #204]	@ (80045a0 <DMA_SetConfig+0x22c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d036      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a32      	ldr	r2, [pc, #200]	@ (80045a4 <DMA_SetConfig+0x230>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d031      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a30      	ldr	r2, [pc, #192]	@ (80045a8 <DMA_SetConfig+0x234>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d02c      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2f      	ldr	r2, [pc, #188]	@ (80045ac <DMA_SetConfig+0x238>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d027      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a2d      	ldr	r2, [pc, #180]	@ (80045b0 <DMA_SetConfig+0x23c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d022      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a2c      	ldr	r2, [pc, #176]	@ (80045b4 <DMA_SetConfig+0x240>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d01d      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a2a      	ldr	r2, [pc, #168]	@ (80045b8 <DMA_SetConfig+0x244>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d018      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a29      	ldr	r2, [pc, #164]	@ (80045bc <DMA_SetConfig+0x248>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d013      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a27      	ldr	r2, [pc, #156]	@ (80045c0 <DMA_SetConfig+0x24c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00e      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a26      	ldr	r2, [pc, #152]	@ (80045c4 <DMA_SetConfig+0x250>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d009      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a24      	ldr	r2, [pc, #144]	@ (80045c8 <DMA_SetConfig+0x254>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d004      	beq.n	8004544 <DMA_SetConfig+0x1d0>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a23      	ldr	r2, [pc, #140]	@ (80045cc <DMA_SetConfig+0x258>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d101      	bne.n	8004548 <DMA_SetConfig+0x1d4>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <DMA_SetConfig+0x1d6>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d059      	beq.n	8004602 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	223f      	movs	r2, #63	@ 0x3f
 8004558:	409a      	lsls	r2, r3
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800456c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b40      	cmp	r3, #64	@ 0x40
 800457c:	d138      	bne.n	80045f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800458e:	e086      	b.n	800469e <DMA_SetConfig+0x32a>
 8004590:	40020010 	.word	0x40020010
 8004594:	40020028 	.word	0x40020028
 8004598:	40020040 	.word	0x40020040
 800459c:	40020058 	.word	0x40020058
 80045a0:	40020070 	.word	0x40020070
 80045a4:	40020088 	.word	0x40020088
 80045a8:	400200a0 	.word	0x400200a0
 80045ac:	400200b8 	.word	0x400200b8
 80045b0:	40020410 	.word	0x40020410
 80045b4:	40020428 	.word	0x40020428
 80045b8:	40020440 	.word	0x40020440
 80045bc:	40020458 	.word	0x40020458
 80045c0:	40020470 	.word	0x40020470
 80045c4:	40020488 	.word	0x40020488
 80045c8:	400204a0 	.word	0x400204a0
 80045cc:	400204b8 	.word	0x400204b8
 80045d0:	58025408 	.word	0x58025408
 80045d4:	5802541c 	.word	0x5802541c
 80045d8:	58025430 	.word	0x58025430
 80045dc:	58025444 	.word	0x58025444
 80045e0:	58025458 	.word	0x58025458
 80045e4:	5802546c 	.word	0x5802546c
 80045e8:	58025480 	.word	0x58025480
 80045ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	60da      	str	r2, [r3, #12]
}
 8004600:	e04d      	b.n	800469e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a29      	ldr	r2, [pc, #164]	@ (80046ac <DMA_SetConfig+0x338>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d022      	beq.n	8004652 <DMA_SetConfig+0x2de>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a27      	ldr	r2, [pc, #156]	@ (80046b0 <DMA_SetConfig+0x33c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01d      	beq.n	8004652 <DMA_SetConfig+0x2de>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a26      	ldr	r2, [pc, #152]	@ (80046b4 <DMA_SetConfig+0x340>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d018      	beq.n	8004652 <DMA_SetConfig+0x2de>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a24      	ldr	r2, [pc, #144]	@ (80046b8 <DMA_SetConfig+0x344>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d013      	beq.n	8004652 <DMA_SetConfig+0x2de>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a23      	ldr	r2, [pc, #140]	@ (80046bc <DMA_SetConfig+0x348>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00e      	beq.n	8004652 <DMA_SetConfig+0x2de>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a21      	ldr	r2, [pc, #132]	@ (80046c0 <DMA_SetConfig+0x34c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d009      	beq.n	8004652 <DMA_SetConfig+0x2de>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a20      	ldr	r2, [pc, #128]	@ (80046c4 <DMA_SetConfig+0x350>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <DMA_SetConfig+0x2de>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1e      	ldr	r2, [pc, #120]	@ (80046c8 <DMA_SetConfig+0x354>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <DMA_SetConfig+0x2e2>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <DMA_SetConfig+0x2e4>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d020      	beq.n	800469e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	2201      	movs	r2, #1
 8004666:	409a      	lsls	r2, r3
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b40      	cmp	r3, #64	@ 0x40
 800467a:	d108      	bne.n	800468e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	60da      	str	r2, [r3, #12]
}
 800468c:	e007      	b.n	800469e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	60da      	str	r2, [r3, #12]
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	58025408 	.word	0x58025408
 80046b0:	5802541c 	.word	0x5802541c
 80046b4:	58025430 	.word	0x58025430
 80046b8:	58025444 	.word	0x58025444
 80046bc:	58025458 	.word	0x58025458
 80046c0:	5802546c 	.word	0x5802546c
 80046c4:	58025480 	.word	0x58025480
 80046c8:	58025494 	.word	0x58025494

080046cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a42      	ldr	r2, [pc, #264]	@ (80047e4 <DMA_CalcBaseAndBitshift+0x118>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d04a      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a41      	ldr	r2, [pc, #260]	@ (80047e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d045      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a3f      	ldr	r2, [pc, #252]	@ (80047ec <DMA_CalcBaseAndBitshift+0x120>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d040      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a3e      	ldr	r2, [pc, #248]	@ (80047f0 <DMA_CalcBaseAndBitshift+0x124>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d03b      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a3c      	ldr	r2, [pc, #240]	@ (80047f4 <DMA_CalcBaseAndBitshift+0x128>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d036      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a3b      	ldr	r2, [pc, #236]	@ (80047f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d031      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a39      	ldr	r2, [pc, #228]	@ (80047fc <DMA_CalcBaseAndBitshift+0x130>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d02c      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a38      	ldr	r2, [pc, #224]	@ (8004800 <DMA_CalcBaseAndBitshift+0x134>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d027      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a36      	ldr	r2, [pc, #216]	@ (8004804 <DMA_CalcBaseAndBitshift+0x138>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d022      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a35      	ldr	r2, [pc, #212]	@ (8004808 <DMA_CalcBaseAndBitshift+0x13c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d01d      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a33      	ldr	r2, [pc, #204]	@ (800480c <DMA_CalcBaseAndBitshift+0x140>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d018      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a32      	ldr	r2, [pc, #200]	@ (8004810 <DMA_CalcBaseAndBitshift+0x144>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d013      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a30      	ldr	r2, [pc, #192]	@ (8004814 <DMA_CalcBaseAndBitshift+0x148>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00e      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2f      	ldr	r2, [pc, #188]	@ (8004818 <DMA_CalcBaseAndBitshift+0x14c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d009      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2d      	ldr	r2, [pc, #180]	@ (800481c <DMA_CalcBaseAndBitshift+0x150>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xa8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a2c      	ldr	r2, [pc, #176]	@ (8004820 <DMA_CalcBaseAndBitshift+0x154>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d101      	bne.n	8004778 <DMA_CalcBaseAndBitshift+0xac>
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <DMA_CalcBaseAndBitshift+0xae>
 8004778:	2300      	movs	r3, #0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d024      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	3b10      	subs	r3, #16
 8004786:	4a27      	ldr	r2, [pc, #156]	@ (8004824 <DMA_CalcBaseAndBitshift+0x158>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	091b      	lsrs	r3, r3, #4
 800478e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	4a24      	ldr	r2, [pc, #144]	@ (8004828 <DMA_CalcBaseAndBitshift+0x15c>)
 8004798:	5cd3      	ldrb	r3, [r2, r3]
 800479a:	461a      	mov	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d908      	bls.n	80047b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	4b1f      	ldr	r3, [pc, #124]	@ (800482c <DMA_CalcBaseAndBitshift+0x160>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	1d1a      	adds	r2, r3, #4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80047b6:	e00d      	b.n	80047d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	4b1b      	ldr	r3, [pc, #108]	@ (800482c <DMA_CalcBaseAndBitshift+0x160>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047c6:	e005      	b.n	80047d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	40020010 	.word	0x40020010
 80047e8:	40020028 	.word	0x40020028
 80047ec:	40020040 	.word	0x40020040
 80047f0:	40020058 	.word	0x40020058
 80047f4:	40020070 	.word	0x40020070
 80047f8:	40020088 	.word	0x40020088
 80047fc:	400200a0 	.word	0x400200a0
 8004800:	400200b8 	.word	0x400200b8
 8004804:	40020410 	.word	0x40020410
 8004808:	40020428 	.word	0x40020428
 800480c:	40020440 	.word	0x40020440
 8004810:	40020458 	.word	0x40020458
 8004814:	40020470 	.word	0x40020470
 8004818:	40020488 	.word	0x40020488
 800481c:	400204a0 	.word	0x400204a0
 8004820:	400204b8 	.word	0x400204b8
 8004824:	aaaaaaab 	.word	0xaaaaaaab
 8004828:	08011368 	.word	0x08011368
 800482c:	fffffc00 	.word	0xfffffc00

08004830 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d120      	bne.n	8004886 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004848:	2b03      	cmp	r3, #3
 800484a:	d858      	bhi.n	80048fe <DMA_CheckFifoParam+0xce>
 800484c:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <DMA_CheckFifoParam+0x24>)
 800484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004852:	bf00      	nop
 8004854:	08004865 	.word	0x08004865
 8004858:	08004877 	.word	0x08004877
 800485c:	08004865 	.word	0x08004865
 8004860:	080048ff 	.word	0x080048ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004868:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d048      	beq.n	8004902 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004874:	e045      	b.n	8004902 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800487e:	d142      	bne.n	8004906 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004884:	e03f      	b.n	8004906 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800488e:	d123      	bne.n	80048d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	2b03      	cmp	r3, #3
 8004896:	d838      	bhi.n	800490a <DMA_CheckFifoParam+0xda>
 8004898:	a201      	add	r2, pc, #4	@ (adr r2, 80048a0 <DMA_CheckFifoParam+0x70>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048b1 	.word	0x080048b1
 80048a4:	080048b7 	.word	0x080048b7
 80048a8:	080048b1 	.word	0x080048b1
 80048ac:	080048c9 	.word	0x080048c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
        break;
 80048b4:	e030      	b.n	8004918 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d025      	beq.n	800490e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048c6:	e022      	b.n	800490e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048d0:	d11f      	bne.n	8004912 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048d6:	e01c      	b.n	8004912 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d902      	bls.n	80048e6 <DMA_CheckFifoParam+0xb6>
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d003      	beq.n	80048ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80048e4:	e018      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	73fb      	strb	r3, [r7, #15]
        break;
 80048ea:	e015      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00e      	beq.n	8004916 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
    break;
 80048fc:	e00b      	b.n	8004916 <DMA_CheckFifoParam+0xe6>
        break;
 80048fe:	bf00      	nop
 8004900:	e00a      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
        break;
 8004902:	bf00      	nop
 8004904:	e008      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
        break;
 8004906:	bf00      	nop
 8004908:	e006      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
        break;
 800490a:	bf00      	nop
 800490c:	e004      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
        break;
 800490e:	bf00      	nop
 8004910:	e002      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
        break;
 8004912:	bf00      	nop
 8004914:	e000      	b.n	8004918 <DMA_CheckFifoParam+0xe8>
    break;
 8004916:	bf00      	nop
    }
  }

  return status;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop

08004928 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a38      	ldr	r2, [pc, #224]	@ (8004a1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d022      	beq.n	8004986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a36      	ldr	r2, [pc, #216]	@ (8004a20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d01d      	beq.n	8004986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a35      	ldr	r2, [pc, #212]	@ (8004a24 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d018      	beq.n	8004986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a33      	ldr	r2, [pc, #204]	@ (8004a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a32      	ldr	r2, [pc, #200]	@ (8004a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00e      	beq.n	8004986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a30      	ldr	r2, [pc, #192]	@ (8004a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d009      	beq.n	8004986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a2f      	ldr	r2, [pc, #188]	@ (8004a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a2d      	ldr	r2, [pc, #180]	@ (8004a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d101      	bne.n	800498a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01a      	beq.n	80049c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	3b08      	subs	r3, #8
 8004998:	4a28      	ldr	r2, [pc, #160]	@ (8004a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	091b      	lsrs	r3, r3, #4
 80049a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4b26      	ldr	r3, [pc, #152]	@ (8004a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	461a      	mov	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a24      	ldr	r2, [pc, #144]	@ (8004a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80049b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	2201      	movs	r2, #1
 80049be:	409a      	lsls	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80049c4:	e024      	b.n	8004a10 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	3b10      	subs	r3, #16
 80049ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80049d0:	fba2 2303 	umull	r2, r3, r2, r3
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4a1c      	ldr	r2, [pc, #112]	@ (8004a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d806      	bhi.n	80049ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d902      	bls.n	80049ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3308      	adds	r3, #8
 80049ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4b18      	ldr	r3, [pc, #96]	@ (8004a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	461a      	mov	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a16      	ldr	r2, [pc, #88]	@ (8004a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004a00:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	2201      	movs	r2, #1
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	58025408 	.word	0x58025408
 8004a20:	5802541c 	.word	0x5802541c
 8004a24:	58025430 	.word	0x58025430
 8004a28:	58025444 	.word	0x58025444
 8004a2c:	58025458 	.word	0x58025458
 8004a30:	5802546c 	.word	0x5802546c
 8004a34:	58025480 	.word	0x58025480
 8004a38:	58025494 	.word	0x58025494
 8004a3c:	cccccccd 	.word	0xcccccccd
 8004a40:	16009600 	.word	0x16009600
 8004a44:	58025880 	.word	0x58025880
 8004a48:	aaaaaaab 	.word	0xaaaaaaab
 8004a4c:	400204b8 	.word	0x400204b8
 8004a50:	4002040f 	.word	0x4002040f
 8004a54:	10008200 	.word	0x10008200
 8004a58:	40020880 	.word	0x40020880

08004a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d04a      	beq.n	8004b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d847      	bhi.n	8004b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a25      	ldr	r2, [pc, #148]	@ (8004b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d022      	beq.n	8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a24      	ldr	r2, [pc, #144]	@ (8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d01d      	beq.n	8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a22      	ldr	r2, [pc, #136]	@ (8004b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d018      	beq.n	8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a21      	ldr	r2, [pc, #132]	@ (8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d013      	beq.n	8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8004b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00e      	beq.n	8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1e      	ldr	r2, [pc, #120]	@ (8004b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d009      	beq.n	8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d101      	bne.n	8004acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004acc:	2300      	movs	r3, #0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4b17      	ldr	r3, [pc, #92]	@ (8004b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	461a      	mov	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a15      	ldr	r2, [pc, #84]	@ (8004b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ae4:	671a      	str	r2, [r3, #112]	@ 0x70
 8004ae6:	e009      	b.n	8004afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4b14      	ldr	r3, [pc, #80]	@ (8004b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	461a      	mov	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a11      	ldr	r2, [pc, #68]	@ (8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004afa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	2201      	movs	r2, #1
 8004b02:	409a      	lsls	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004b08:	bf00      	nop
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	58025408 	.word	0x58025408
 8004b18:	5802541c 	.word	0x5802541c
 8004b1c:	58025430 	.word	0x58025430
 8004b20:	58025444 	.word	0x58025444
 8004b24:	58025458 	.word	0x58025458
 8004b28:	5802546c 	.word	0x5802546c
 8004b2c:	58025480 	.word	0x58025480
 8004b30:	58025494 	.word	0x58025494
 8004b34:	1600963f 	.word	0x1600963f
 8004b38:	58025940 	.word	0x58025940
 8004b3c:	1000823f 	.word	0x1000823f
 8004b40:	40020940 	.word	0x40020940

08004b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b089      	sub	sp, #36	@ 0x24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b52:	4b89      	ldr	r3, [pc, #548]	@ (8004d78 <HAL_GPIO_Init+0x234>)
 8004b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b56:	e194      	b.n	8004e82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	4013      	ands	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 8186 	beq.w	8004e7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d005      	beq.n	8004b88 <HAL_GPIO_Init+0x44>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d130      	bne.n	8004bea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	2203      	movs	r2, #3
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	091b      	lsrs	r3, r3, #4
 8004bd4:	f003 0201 	and.w	r2, r3, #1
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d017      	beq.n	8004c26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	2203      	movs	r2, #3
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43db      	mvns	r3, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d123      	bne.n	8004c7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	08da      	lsrs	r2, r3, #3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3208      	adds	r2, #8
 8004c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	220f      	movs	r2, #15
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	4013      	ands	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	08da      	lsrs	r2, r3, #3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3208      	adds	r2, #8
 8004c74:	69b9      	ldr	r1, [r7, #24]
 8004c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	2203      	movs	r2, #3
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 0203 	and.w	r2, r3, #3
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80e0 	beq.w	8004e7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cbc:	4b2f      	ldr	r3, [pc, #188]	@ (8004d7c <HAL_GPIO_Init+0x238>)
 8004cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cc2:	4a2e      	ldr	r2, [pc, #184]	@ (8004d7c <HAL_GPIO_Init+0x238>)
 8004cc4:	f043 0302 	orr.w	r3, r3, #2
 8004cc8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8004d7c <HAL_GPIO_Init+0x238>)
 8004cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cda:	4a29      	ldr	r2, [pc, #164]	@ (8004d80 <HAL_GPIO_Init+0x23c>)
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	089b      	lsrs	r3, r3, #2
 8004ce0:	3302      	adds	r3, #2
 8004ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	220f      	movs	r2, #15
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a20      	ldr	r2, [pc, #128]	@ (8004d84 <HAL_GPIO_Init+0x240>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d052      	beq.n	8004dac <HAL_GPIO_Init+0x268>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a1f      	ldr	r2, [pc, #124]	@ (8004d88 <HAL_GPIO_Init+0x244>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d031      	beq.n	8004d72 <HAL_GPIO_Init+0x22e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a1e      	ldr	r2, [pc, #120]	@ (8004d8c <HAL_GPIO_Init+0x248>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d02b      	beq.n	8004d6e <HAL_GPIO_Init+0x22a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a1d      	ldr	r2, [pc, #116]	@ (8004d90 <HAL_GPIO_Init+0x24c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d025      	beq.n	8004d6a <HAL_GPIO_Init+0x226>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a1c      	ldr	r2, [pc, #112]	@ (8004d94 <HAL_GPIO_Init+0x250>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01f      	beq.n	8004d66 <HAL_GPIO_Init+0x222>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a1b      	ldr	r2, [pc, #108]	@ (8004d98 <HAL_GPIO_Init+0x254>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d019      	beq.n	8004d62 <HAL_GPIO_Init+0x21e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a1a      	ldr	r2, [pc, #104]	@ (8004d9c <HAL_GPIO_Init+0x258>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <HAL_GPIO_Init+0x21a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a19      	ldr	r2, [pc, #100]	@ (8004da0 <HAL_GPIO_Init+0x25c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00d      	beq.n	8004d5a <HAL_GPIO_Init+0x216>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a18      	ldr	r2, [pc, #96]	@ (8004da4 <HAL_GPIO_Init+0x260>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d007      	beq.n	8004d56 <HAL_GPIO_Init+0x212>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a17      	ldr	r2, [pc, #92]	@ (8004da8 <HAL_GPIO_Init+0x264>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d101      	bne.n	8004d52 <HAL_GPIO_Init+0x20e>
 8004d4e:	2309      	movs	r3, #9
 8004d50:	e02d      	b.n	8004dae <HAL_GPIO_Init+0x26a>
 8004d52:	230a      	movs	r3, #10
 8004d54:	e02b      	b.n	8004dae <HAL_GPIO_Init+0x26a>
 8004d56:	2308      	movs	r3, #8
 8004d58:	e029      	b.n	8004dae <HAL_GPIO_Init+0x26a>
 8004d5a:	2307      	movs	r3, #7
 8004d5c:	e027      	b.n	8004dae <HAL_GPIO_Init+0x26a>
 8004d5e:	2306      	movs	r3, #6
 8004d60:	e025      	b.n	8004dae <HAL_GPIO_Init+0x26a>
 8004d62:	2305      	movs	r3, #5
 8004d64:	e023      	b.n	8004dae <HAL_GPIO_Init+0x26a>
 8004d66:	2304      	movs	r3, #4
 8004d68:	e021      	b.n	8004dae <HAL_GPIO_Init+0x26a>
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e01f      	b.n	8004dae <HAL_GPIO_Init+0x26a>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e01d      	b.n	8004dae <HAL_GPIO_Init+0x26a>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e01b      	b.n	8004dae <HAL_GPIO_Init+0x26a>
 8004d76:	bf00      	nop
 8004d78:	58000080 	.word	0x58000080
 8004d7c:	58024400 	.word	0x58024400
 8004d80:	58000400 	.word	0x58000400
 8004d84:	58020000 	.word	0x58020000
 8004d88:	58020400 	.word	0x58020400
 8004d8c:	58020800 	.word	0x58020800
 8004d90:	58020c00 	.word	0x58020c00
 8004d94:	58021000 	.word	0x58021000
 8004d98:	58021400 	.word	0x58021400
 8004d9c:	58021800 	.word	0x58021800
 8004da0:	58021c00 	.word	0x58021c00
 8004da4:	58022000 	.word	0x58022000
 8004da8:	58022400 	.word	0x58022400
 8004dac:	2300      	movs	r3, #0
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	f002 0203 	and.w	r2, r2, #3
 8004db4:	0092      	lsls	r2, r2, #2
 8004db6:	4093      	lsls	r3, r2
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dbe:	4938      	ldr	r1, [pc, #224]	@ (8004ea0 <HAL_GPIO_Init+0x35c>)
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	089b      	lsrs	r3, r3, #2
 8004dc4:	3302      	adds	r3, #2
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004df2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	43db      	mvns	r3, r3
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	4013      	ands	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	fa22 f303 	lsr.w	r3, r2, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f47f ae63 	bne.w	8004b58 <HAL_GPIO_Init+0x14>
  }
}
 8004e92:	bf00      	nop
 8004e94:	bf00      	nop
 8004e96:	3724      	adds	r7, #36	@ 0x24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	58000400 	.word	0x58000400

08004ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	807b      	strh	r3, [r7, #2]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004eb4:	787b      	ldrb	r3, [r7, #1]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eba:	887a      	ldrh	r2, [r7, #2]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ec0:	e003      	b.n	8004eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ec2:	887b      	ldrh	r3, [r7, #2]
 8004ec4:	041a      	lsls	r2, r3, #16
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	619a      	str	r2, [r3, #24]
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b086      	sub	sp, #24
 8004eda:	af02      	add	r7, sp, #8
 8004edc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0fe      	b.n	80050e6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f00b f9dd 	bl	80102bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2203      	movs	r2, #3
 8004f06:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f006 f933 	bl	800b17a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	7c1a      	ldrb	r2, [r3, #16]
 8004f1c:	f88d 2000 	strb.w	r2, [sp]
 8004f20:	3304      	adds	r3, #4
 8004f22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f24:	f006 f804 	bl	800af30 <USB_CoreInit>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0d5      	b.n	80050e6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4618      	mov	r0, r3
 8004f42:	f006 f92b 	bl	800b19c <USB_SetCurrentMode>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0c6      	b.n	80050e6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	73fb      	strb	r3, [r7, #15]
 8004f5c:	e04a      	b.n	8004ff4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f5e:	7bfa      	ldrb	r2, [r7, #15]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	3315      	adds	r3, #21
 8004f6e:	2201      	movs	r2, #1
 8004f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f72:	7bfa      	ldrb	r2, [r7, #15]
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	3314      	adds	r3, #20
 8004f82:	7bfa      	ldrb	r2, [r7, #15]
 8004f84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f86:	7bfa      	ldrb	r2, [r7, #15]
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	b298      	uxth	r0, r3
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	332e      	adds	r3, #46	@ 0x2e
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f9e:	7bfa      	ldrb	r2, [r7, #15]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	3318      	adds	r3, #24
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fb2:	7bfa      	ldrb	r2, [r7, #15]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	331c      	adds	r3, #28
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fc6:	7bfa      	ldrb	r2, [r7, #15]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	3320      	adds	r3, #32
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004fda:	7bfa      	ldrb	r2, [r7, #15]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	3324      	adds	r3, #36	@ 0x24
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	791b      	ldrb	r3, [r3, #4]
 8004ff8:	7bfa      	ldrb	r2, [r7, #15]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d3af      	bcc.n	8004f5e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]
 8005002:	e044      	b.n	800508e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005004:	7bfa      	ldrb	r2, [r7, #15]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	4413      	add	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800501a:	7bfa      	ldrb	r2, [r7, #15]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800502c:	7bfa      	ldrb	r2, [r7, #15]
 800502e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005030:	7bfa      	ldrb	r2, [r7, #15]
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005046:	7bfa      	ldrb	r2, [r7, #15]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800505c:	7bfa      	ldrb	r2, [r7, #15]
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005072:	7bfa      	ldrb	r2, [r7, #15]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	3301      	adds	r3, #1
 800508c:	73fb      	strb	r3, [r7, #15]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	791b      	ldrb	r3, [r3, #4]
 8005092:	7bfa      	ldrb	r2, [r7, #15]
 8005094:	429a      	cmp	r2, r3
 8005096:	d3b5      	bcc.n	8005004 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	7c1a      	ldrb	r2, [r3, #16]
 80050a0:	f88d 2000 	strb.w	r2, [sp]
 80050a4:	3304      	adds	r3, #4
 80050a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050a8:	f006 f8c4 	bl	800b234 <USB_DevInit>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e013      	b.n	80050e6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	7b1b      	ldrb	r3, [r3, #12]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d102      	bne.n	80050da <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f001 f96f 	bl	80063b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f007 f907 	bl	800c2f2 <USB_DevDisconnect>

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_PCD_Start+0x1c>
 8005106:	2302      	movs	r3, #2
 8005108:	e022      	b.n	8005150 <HAL_PCD_Start+0x62>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005122:	2b01      	cmp	r3, #1
 8005124:	d105      	bne.n	8005132 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f006 f80e 	bl	800b158 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f007 f8b5 	bl	800c2b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005158:	b590      	push	{r4, r7, lr}
 800515a:	b08d      	sub	sp, #52	@ 0x34
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f007 f973 	bl	800c45a <USB_GetMode>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	f040 84b9 	bne.w	8005aee <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f007 f8d7 	bl	800c334 <USB_ReadInterrupts>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 84af 	beq.w	8005aec <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	0a1b      	lsrs	r3, r3, #8
 8005198:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f007 f8c4 	bl	800c334 <USB_ReadInterrupts>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d107      	bne.n	80051c6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695a      	ldr	r2, [r3, #20]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f002 0202 	and.w	r2, r2, #2
 80051c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f007 f8b2 	bl	800c334 <USB_ReadInterrupts>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d161      	bne.n	800529e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699a      	ldr	r2, [r3, #24]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0210 	bic.w	r2, r2, #16
 80051e8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f003 020f 	and.w	r2, r3, #15
 80051f6:	4613      	mov	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	4413      	add	r3, r2
 8005206:	3304      	adds	r3, #4
 8005208:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005210:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005214:	d124      	bne.n	8005260 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800521c:	4013      	ands	r3, r2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d035      	beq.n	800528e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800522c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005230:	b29b      	uxth	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	6a38      	ldr	r0, [r7, #32]
 8005236:	f006 fee9 	bl	800c00c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	091b      	lsrs	r3, r3, #4
 8005242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005246:	441a      	add	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005258:	441a      	add	r2, r3
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	615a      	str	r2, [r3, #20]
 800525e:	e016      	b.n	800528e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005266:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800526a:	d110      	bne.n	800528e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005272:	2208      	movs	r2, #8
 8005274:	4619      	mov	r1, r3
 8005276:	6a38      	ldr	r0, [r7, #32]
 8005278:	f006 fec8 	bl	800c00c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	695a      	ldr	r2, [r3, #20]
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	091b      	lsrs	r3, r3, #4
 8005284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005288:	441a      	add	r2, r3
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0210 	orr.w	r2, r2, #16
 800529c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f007 f846 	bl	800c334 <USB_ReadInterrupts>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052ae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80052b2:	f040 80a7 	bne.w	8005404 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f007 f84b 	bl	800c35a <USB_ReadDevAllOutEpInterrupt>
 80052c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80052c6:	e099      	b.n	80053fc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 808e 	beq.w	80053f0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	4611      	mov	r1, r2
 80052de:	4618      	mov	r0, r3
 80052e0:	f007 f86f 	bl	800c3c2 <USB_ReadDevOutEPInterrupt>
 80052e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00c      	beq.n	800530a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80052f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052fc:	461a      	mov	r2, r3
 80052fe:	2301      	movs	r3, #1
 8005300:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005302:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fed1 	bl	80060ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00c      	beq.n	800532e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005320:	461a      	mov	r2, r3
 8005322:	2308      	movs	r3, #8
 8005324:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005326:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 ffa7 	bl	800627c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b00      	cmp	r3, #0
 8005336:	d008      	beq.n	800534a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005344:	461a      	mov	r2, r3
 8005346:	2310      	movs	r3, #16
 8005348:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d030      	beq.n	80053b6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800535c:	2b80      	cmp	r3, #128	@ 0x80
 800535e:	d109      	bne.n	8005374 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800536e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005372:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005376:	4613      	mov	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	4413      	add	r3, r2
 8005386:	3304      	adds	r3, #4
 8005388:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	78db      	ldrb	r3, [r3, #3]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d108      	bne.n	80053a4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2200      	movs	r2, #0
 8005396:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	b2db      	uxtb	r3, r3
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f00b f8b2 	bl	8010508 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b0:	461a      	mov	r2, r3
 80053b2:	2302      	movs	r3, #2
 80053b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053cc:	461a      	mov	r2, r3
 80053ce:	2320      	movs	r3, #32
 80053d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80053dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e8:	461a      	mov	r2, r3
 80053ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80053ee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	3301      	adds	r3, #1
 80053f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80053f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f8:	085b      	lsrs	r3, r3, #1
 80053fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80053fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f47f af62 	bne.w	80052c8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f006 ff93 	bl	800c334 <USB_ReadInterrupts>
 800540e:	4603      	mov	r3, r0
 8005410:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005414:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005418:	f040 80db 	bne.w	80055d2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f006 ffb4 	bl	800c38e <USB_ReadDevAllInEpInterrupt>
 8005426:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800542c:	e0cd      	b.n	80055ca <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800542e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 80c2 	beq.w	80055be <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	4611      	mov	r1, r2
 8005444:	4618      	mov	r0, r3
 8005446:	f006 ffda 	bl	800c3fe <USB_ReadDevInEPInterrupt>
 800544a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d057      	beq.n	8005506 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	2201      	movs	r2, #1
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800546a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	43db      	mvns	r3, r3
 8005470:	69f9      	ldr	r1, [r7, #28]
 8005472:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005476:	4013      	ands	r3, r2
 8005478:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005486:	461a      	mov	r2, r3
 8005488:	2301      	movs	r3, #1
 800548a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	799b      	ldrb	r3, [r3, #6]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d132      	bne.n	80054fa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	3320      	adds	r3, #32
 80054a4:	6819      	ldr	r1, [r3, #0]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054aa:	4613      	mov	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4403      	add	r3, r0
 80054b4:	331c      	adds	r3, #28
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4419      	add	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054be:	4613      	mov	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4403      	add	r3, r0
 80054c8:	3320      	adds	r3, #32
 80054ca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d113      	bne.n	80054fa <HAL_PCD_IRQHandler+0x3a2>
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d6:	4613      	mov	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	3324      	adds	r3, #36	@ 0x24
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d108      	bne.n	80054fa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80054f2:	461a      	mov	r2, r3
 80054f4:	2101      	movs	r1, #1
 80054f6:	f006 ffe3 	bl	800c4c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f00a ff7c 	bl	80103fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800551c:	461a      	mov	r2, r3
 800551e:	2308      	movs	r3, #8
 8005520:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005538:	461a      	mov	r2, r3
 800553a:	2310      	movs	r3, #16
 800553c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d008      	beq.n	800555a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005554:	461a      	mov	r2, r3
 8005556:	2340      	movs	r3, #64	@ 0x40
 8005558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d023      	beq.n	80055ac <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005564:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005566:	6a38      	ldr	r0, [r7, #32]
 8005568:	f005 ffc2 	bl	800b4f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800556c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556e:	4613      	mov	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	3310      	adds	r3, #16
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	4413      	add	r3, r2
 800557c:	3304      	adds	r3, #4
 800557e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	78db      	ldrb	r3, [r3, #3]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d108      	bne.n	800559a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2200      	movs	r2, #0
 800558c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	b2db      	uxtb	r3, r3
 8005592:	4619      	mov	r1, r3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f00a ffc9 	bl	801052c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055a6:	461a      	mov	r2, r3
 80055a8:	2302      	movs	r3, #2
 80055aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80055b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fcea 	bl	8005f92 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	3301      	adds	r3, #1
 80055c2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80055ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f47f af2e 	bne.w	800542e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f006 feac 	bl	800c334 <USB_ReadInterrupts>
 80055dc:	4603      	mov	r3, r0
 80055de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055e6:	d122      	bne.n	800562e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055f6:	f023 0301 	bic.w	r3, r3, #1
 80055fa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005602:	2b01      	cmp	r3, #1
 8005604:	d108      	bne.n	8005618 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800560e:	2100      	movs	r1, #0
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fef5 	bl	8006400 <HAL_PCDEx_LPM_Callback>
 8005616:	e002      	b.n	800561e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f00a ff67 	bl	80104ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800562c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f006 fe7e 	bl	800c334 <USB_ReadInterrupts>
 8005638:	4603      	mov	r3, r0
 800563a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800563e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005642:	d112      	bne.n	800566a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b01      	cmp	r3, #1
 8005652:	d102      	bne.n	800565a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f00a ff23 	bl	80104a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695a      	ldr	r2, [r3, #20]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005668:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f006 fe60 	bl	800c334 <USB_ReadInterrupts>
 8005674:	4603      	mov	r3, r0
 8005676:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800567a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800567e:	d121      	bne.n	80056c4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800568e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005696:	2b00      	cmp	r3, #0
 8005698:	d111      	bne.n	80056be <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a8:	089b      	lsrs	r3, r3, #2
 80056aa:	f003 020f 	and.w	r2, r3, #15
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80056b4:	2101      	movs	r1, #1
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fea2 	bl	8006400 <HAL_PCDEx_LPM_Callback>
 80056bc:	e002      	b.n	80056c4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f00a feee 	bl	80104a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f006 fe33 	bl	800c334 <USB_ReadInterrupts>
 80056ce:	4603      	mov	r3, r0
 80056d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d8:	f040 80b7 	bne.w	800584a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	69fa      	ldr	r2, [r7, #28]
 80056e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056ea:	f023 0301 	bic.w	r3, r3, #1
 80056ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2110      	movs	r1, #16
 80056f6:	4618      	mov	r0, r3
 80056f8:	f005 fefa 	bl	800b4f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056fc:	2300      	movs	r3, #0
 80056fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005700:	e046      	b.n	8005790 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800570e:	461a      	mov	r2, r3
 8005710:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005714:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	440a      	add	r2, r1
 800572c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005730:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005734:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005742:	461a      	mov	r2, r3
 8005744:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005748:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800574a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800575a:	0151      	lsls	r1, r2, #5
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	440a      	add	r2, r1
 8005760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005764:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005768:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800576a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	69fa      	ldr	r2, [r7, #28]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005784:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005788:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800578a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578c:	3301      	adds	r3, #1
 800578e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	791b      	ldrb	r3, [r3, #4]
 8005794:	461a      	mov	r2, r3
 8005796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005798:	4293      	cmp	r3, r2
 800579a:	d3b2      	bcc.n	8005702 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057aa:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80057ae:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	7bdb      	ldrb	r3, [r3, #15]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d016      	beq.n	80057e6 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057c8:	f043 030b 	orr.w	r3, r3, #11
 80057cc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057de:	f043 030b 	orr.w	r3, r3, #11
 80057e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80057e4:	e015      	b.n	8005812 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057ec:	695a      	ldr	r2, [r3, #20]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f4:	4619      	mov	r1, r3
 80057f6:	f242 032b 	movw	r3, #8235	@ 0x202b
 80057fa:	4313      	orrs	r3, r2
 80057fc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800580c:	f043 030b 	orr.w	r3, r3, #11
 8005810:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005820:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005824:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005834:	461a      	mov	r2, r3
 8005836:	f006 fe43 	bl	800c4c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695a      	ldr	r2, [r3, #20]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f006 fd70 	bl	800c334 <USB_ReadInterrupts>
 8005854:	4603      	mov	r3, r0
 8005856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800585a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800585e:	d123      	bne.n	80058a8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f006 fe07 	bl	800c478 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f005 feb7 	bl	800b5e2 <USB_GetDevSpeed>
 8005874:	4603      	mov	r3, r0
 8005876:	461a      	mov	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681c      	ldr	r4, [r3, #0]
 8005880:	f001 fd9e 	bl	80073c0 <HAL_RCC_GetHCLKFreq>
 8005884:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800588a:	461a      	mov	r2, r3
 800588c:	4620      	mov	r0, r4
 800588e:	f005 fbc1 	bl	800b014 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f00a fddb 	bl	801044e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695a      	ldr	r2, [r3, #20]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80058a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f006 fd41 	bl	800c334 <USB_ReadInterrupts>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d10a      	bne.n	80058d2 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f00a fdb8 	bl	8010432 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695a      	ldr	r2, [r3, #20]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f002 0208 	and.w	r2, r2, #8
 80058d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f006 fd2c 	bl	800c334 <USB_ReadInterrupts>
 80058dc:	4603      	mov	r3, r0
 80058de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e2:	2b80      	cmp	r3, #128	@ 0x80
 80058e4:	d123      	bne.n	800592e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058f2:	2301      	movs	r3, #1
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f6:	e014      	b.n	8005922 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058fc:	4613      	mov	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d105      	bne.n	800591c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	b2db      	uxtb	r3, r3
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fb0a 	bl	8005f30 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	3301      	adds	r3, #1
 8005920:	627b      	str	r3, [r7, #36]	@ 0x24
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	791b      	ldrb	r3, [r3, #4]
 8005926:	461a      	mov	r2, r3
 8005928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592a:	4293      	cmp	r3, r2
 800592c:	d3e4      	bcc.n	80058f8 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f006 fcfe 	bl	800c334 <USB_ReadInterrupts>
 8005938:	4603      	mov	r3, r0
 800593a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800593e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005942:	d13c      	bne.n	80059be <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005944:	2301      	movs	r3, #1
 8005946:	627b      	str	r3, [r7, #36]	@ 0x24
 8005948:	e02b      	b.n	80059a2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800595e:	4613      	mov	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	3318      	adds	r3, #24
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d115      	bne.n	800599c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005970:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005972:	2b00      	cmp	r3, #0
 8005974:	da12      	bge.n	800599c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800597a:	4613      	mov	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	3317      	adds	r3, #23
 8005986:	2201      	movs	r2, #1
 8005988:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598c:	b2db      	uxtb	r3, r3
 800598e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005992:	b2db      	uxtb	r3, r3
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 faca 	bl	8005f30 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	3301      	adds	r3, #1
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	791b      	ldrb	r3, [r3, #4]
 80059a6:	461a      	mov	r2, r3
 80059a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d3cd      	bcc.n	800594a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80059bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f006 fcb6 	bl	800c334 <USB_ReadInterrupts>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059d2:	d156      	bne.n	8005a82 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059d4:	2301      	movs	r3, #1
 80059d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d8:	e045      	b.n	8005a66 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ee:	4613      	mov	r3, r2
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d12e      	bne.n	8005a60 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a02:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	da2b      	bge.n	8005a60 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	0c1a      	lsrs	r2, r3, #16
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005a12:	4053      	eors	r3, r2
 8005a14:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d121      	bne.n	8005a60 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a20:	4613      	mov	r3, r2
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005a2e:	2201      	movs	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a5c:	6053      	str	r3, [r2, #4]
            break;
 8005a5e:	e008      	b.n	8005a72 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a62:	3301      	adds	r3, #1
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	791b      	ldrb	r3, [r3, #4]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d3b3      	bcc.n	80059da <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695a      	ldr	r2, [r3, #20]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f006 fc54 	bl	800c334 <USB_ReadInterrupts>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a96:	d10a      	bne.n	8005aae <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f00a fd59 	bl	8010550 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695a      	ldr	r2, [r3, #20]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f006 fc3e 	bl	800c334 <USB_ReadInterrupts>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d115      	bne.n	8005aee <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f00a fd49 	bl	801056c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6859      	ldr	r1, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
 8005aea:	e000      	b.n	8005aee <HAL_PCD_IRQHandler+0x996>
      return;
 8005aec:	bf00      	nop
    }
  }
}
 8005aee:	3734      	adds	r7, #52	@ 0x34
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd90      	pop	{r4, r7, pc}

08005af4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_PCD_SetAddress+0x1a>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e012      	b.n	8005b34 <HAL_PCD_SetAddress+0x40>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	78fa      	ldrb	r2, [r7, #3]
 8005b1a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	78fa      	ldrb	r2, [r7, #3]
 8005b22:	4611      	mov	r1, r2
 8005b24:	4618      	mov	r0, r3
 8005b26:	f006 fb9d 	bl	800c264 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	4608      	mov	r0, r1
 8005b46:	4611      	mov	r1, r2
 8005b48:	461a      	mov	r2, r3
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	70fb      	strb	r3, [r7, #3]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	803b      	strh	r3, [r7, #0]
 8005b52:	4613      	mov	r3, r2
 8005b54:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	da0f      	bge.n	8005b82 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	f003 020f 	and.w	r2, r3, #15
 8005b68:	4613      	mov	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	3310      	adds	r3, #16
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	3304      	adds	r3, #4
 8005b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	705a      	strb	r2, [r3, #1]
 8005b80:	e00f      	b.n	8005ba2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	f003 020f 	and.w	r2, r3, #15
 8005b88:	4613      	mov	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4413      	add	r3, r2
 8005b98:	3304      	adds	r3, #4
 8005b9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005bae:	883b      	ldrh	r3, [r7, #0]
 8005bb0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	78ba      	ldrb	r2, [r7, #2]
 8005bbc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	785b      	ldrb	r3, [r3, #1]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d004      	beq.n	8005bd0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005bd0:	78bb      	ldrb	r3, [r7, #2]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d102      	bne.n	8005bdc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_PCD_EP_Open+0xae>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e00e      	b.n	8005c08 <HAL_PCD_EP_Open+0xcc>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f005 fd17 	bl	800b62c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005c06:	7afb      	ldrb	r3, [r7, #11]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	da0f      	bge.n	8005c44 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	f003 020f 	and.w	r2, r3, #15
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	3310      	adds	r3, #16
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	3304      	adds	r3, #4
 8005c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	705a      	strb	r2, [r3, #1]
 8005c42:	e00f      	b.n	8005c64 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	f003 020f 	and.w	r2, r3, #15
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	4413      	add	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	4413      	add	r3, r2
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c64:	78fb      	ldrb	r3, [r7, #3]
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <HAL_PCD_EP_Close+0x6e>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e00e      	b.n	8005c9c <HAL_PCD_EP_Close+0x8c>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68f9      	ldr	r1, [r7, #12]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f005 fd55 	bl	800b73c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	603b      	str	r3, [r7, #0]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cb4:	7afb      	ldrb	r3, [r7, #11]
 8005cb6:	f003 020f 	and.w	r2, r3, #15
 8005cba:	4613      	mov	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	3304      	adds	r3, #4
 8005ccc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	f003 030f 	and.w	r3, r3, #15
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	799b      	ldrb	r3, [r3, #6]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d102      	bne.n	8005d00 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	799b      	ldrb	r3, [r3, #6]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6979      	ldr	r1, [r7, #20]
 8005d0c:	f005 fdf2 	bl	800b8f4 <USB_EPStartXfer>

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	460b      	mov	r3, r1
 8005d24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	f003 020f 	and.w	r2, r3, #15
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	440b      	add	r3, r1
 8005d38:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005d3c:	681b      	ldr	r3, [r3, #0]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b086      	sub	sp, #24
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
 8005d56:	460b      	mov	r3, r1
 8005d58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d5a:	7afb      	ldrb	r3, [r7, #11]
 8005d5c:	f003 020f 	and.w	r2, r3, #15
 8005d60:	4613      	mov	r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	3310      	adds	r3, #16
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3304      	adds	r3, #4
 8005d70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2200      	movs	r2, #0
 8005d82:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2201      	movs	r2, #1
 8005d88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d8a:	7afb      	ldrb	r3, [r7, #11]
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	799b      	ldrb	r3, [r3, #6]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d102      	bne.n	8005da4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	799b      	ldrb	r3, [r3, #6]
 8005dac:	461a      	mov	r2, r3
 8005dae:	6979      	ldr	r1, [r7, #20]
 8005db0:	f005 fda0 	bl	800b8f4 <USB_EPStartXfer>

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005dca:	78fb      	ldrb	r3, [r7, #3]
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	7912      	ldrb	r2, [r2, #4]
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d901      	bls.n	8005ddc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e04f      	b.n	8005e7c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	da0f      	bge.n	8005e04 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	f003 020f 	and.w	r2, r3, #15
 8005dea:	4613      	mov	r3, r2
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	3310      	adds	r3, #16
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	4413      	add	r3, r2
 8005df8:	3304      	adds	r3, #4
 8005dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	705a      	strb	r2, [r3, #1]
 8005e02:	e00d      	b.n	8005e20 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	4613      	mov	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	4413      	add	r3, r2
 8005e16:	3304      	adds	r3, #4
 8005e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	f003 030f 	and.w	r3, r3, #15
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_PCD_EP_SetStall+0x82>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e01d      	b.n	8005e7c <HAL_PCD_EP_SetStall+0xbe>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68f9      	ldr	r1, [r7, #12]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f006 f934 	bl	800c0bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d109      	bne.n	8005e72 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	7999      	ldrb	r1, [r3, #6]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f006 fb27 	bl	800c4c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	7912      	ldrb	r2, [r2, #4]
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e042      	b.n	8005f28 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	da0f      	bge.n	8005eca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	f003 020f 	and.w	r2, r3, #15
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	3310      	adds	r3, #16
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	705a      	strb	r2, [r3, #1]
 8005ec8:	e00f      	b.n	8005eea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	f003 020f 	and.w	r2, r3, #15
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	4413      	add	r3, r2
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_PCD_EP_ClrStall+0x86>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e00e      	b.n	8005f28 <HAL_PCD_EP_ClrStall+0xa4>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f006 f93d 	bl	800c198 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	da0c      	bge.n	8005f5e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	f003 020f 	and.w	r2, r3, #15
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	3310      	adds	r3, #16
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	4413      	add	r3, r2
 8005f58:	3304      	adds	r3, #4
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	e00c      	b.n	8005f78 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	f003 020f 	and.w	r2, r3, #15
 8005f64:	4613      	mov	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	4413      	add	r3, r2
 8005f74:	3304      	adds	r3, #4
 8005f76:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68f9      	ldr	r1, [r7, #12]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f005 ff5c 	bl	800be3c <USB_EPStopXfer>
 8005f84:	4603      	mov	r3, r0
 8005f86:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005f88:	7afb      	ldrb	r3, [r7, #11]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b08a      	sub	sp, #40	@ 0x28
 8005f96:	af02      	add	r7, sp, #8
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	3310      	adds	r3, #16
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	695a      	ldr	r2, [r3, #20]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d901      	bls.n	8005fca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e06b      	b.n	80060a2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d902      	bls.n	8005fe6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	3303      	adds	r3, #3
 8005fea:	089b      	lsrs	r3, r3, #2
 8005fec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005fee:	e02a      	b.n	8006046 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	69fa      	ldr	r2, [r7, #28]
 8006002:	429a      	cmp	r2, r3
 8006004:	d902      	bls.n	800600c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	3303      	adds	r3, #3
 8006010:	089b      	lsrs	r3, r3, #2
 8006012:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	68d9      	ldr	r1, [r3, #12]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	b2da      	uxtb	r2, r3
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	4603      	mov	r3, r0
 8006028:	6978      	ldr	r0, [r7, #20]
 800602a:	f005 ffb1 	bl	800bf90 <USB_WritePacket>

    ep->xfer_buff  += len;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	441a      	add	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	695a      	ldr	r2, [r3, #20]
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	441a      	add	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	429a      	cmp	r2, r3
 800605a:	d809      	bhi.n	8006070 <PCD_WriteEmptyTxFifo+0xde>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	695a      	ldr	r2, [r3, #20]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006064:	429a      	cmp	r2, r3
 8006066:	d203      	bcs.n	8006070 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1bf      	bne.n	8005ff0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	429a      	cmp	r2, r3
 800607a:	d811      	bhi.n	80060a0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	2201      	movs	r2, #1
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	43db      	mvns	r3, r3
 8006096:	6939      	ldr	r1, [r7, #16]
 8006098:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800609c:	4013      	ands	r3, r2
 800609e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	333c      	adds	r3, #60	@ 0x3c
 80060c4:	3304      	adds	r3, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	799b      	ldrb	r3, [r3, #6]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d17b      	bne.n	80061da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d015      	beq.n	8006118 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	4a61      	ldr	r2, [pc, #388]	@ (8006274 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	f240 80b9 	bls.w	8006268 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80b3 	beq.w	8006268 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610e:	461a      	mov	r2, r3
 8006110:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006114:	6093      	str	r3, [r2, #8]
 8006116:	e0a7      	b.n	8006268 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800612e:	461a      	mov	r2, r3
 8006130:	2320      	movs	r3, #32
 8006132:	6093      	str	r3, [r2, #8]
 8006134:	e098      	b.n	8006268 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800613c:	2b00      	cmp	r3, #0
 800613e:	f040 8093 	bne.w	8006268 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	4a4b      	ldr	r2, [pc, #300]	@ (8006274 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d90f      	bls.n	800616a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006160:	461a      	mov	r2, r3
 8006162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006166:	6093      	str	r3, [r2, #8]
 8006168:	e07e      	b.n	8006268 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	4613      	mov	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	4413      	add	r3, r2
 800617c:	3304      	adds	r3, #4
 800617e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a1a      	ldr	r2, [r3, #32]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	0159      	lsls	r1, r3, #5
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	440b      	add	r3, r1
 800618c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006196:	1ad2      	subs	r2, r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d114      	bne.n	80061cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d109      	bne.n	80061be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061b4:	461a      	mov	r2, r3
 80061b6:	2101      	movs	r1, #1
 80061b8:	f006 f982 	bl	800c4c0 <USB_EP0_OutStart>
 80061bc:	e006      	b.n	80061cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	441a      	add	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f00a f8f8 	bl	80103c8 <HAL_PCD_DataOutStageCallback>
 80061d8:	e046      	b.n	8006268 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	4a26      	ldr	r2, [pc, #152]	@ (8006278 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d124      	bne.n	800622c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f8:	461a      	mov	r2, r3
 80061fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061fe:	6093      	str	r3, [r2, #8]
 8006200:	e032      	b.n	8006268 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d008      	beq.n	800621e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006218:	461a      	mov	r2, r3
 800621a:	2320      	movs	r3, #32
 800621c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f00a f8cf 	bl	80103c8 <HAL_PCD_DataOutStageCallback>
 800622a:	e01d      	b.n	8006268 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d114      	bne.n	800625c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	4613      	mov	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d108      	bne.n	800625c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006254:	461a      	mov	r2, r3
 8006256:	2100      	movs	r1, #0
 8006258:	f006 f932 	bl	800c4c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f00a f8b0 	bl	80103c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	4f54300a 	.word	0x4f54300a
 8006278:	4f54310a 	.word	0x4f54310a

0800627c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	333c      	adds	r3, #60	@ 0x3c
 8006294:	3304      	adds	r3, #4
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a15      	ldr	r2, [pc, #84]	@ (8006304 <PCD_EP_OutSetupPacket_int+0x88>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d90e      	bls.n	80062d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d009      	beq.n	80062d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c8:	461a      	mov	r2, r3
 80062ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f00a f867 	bl	80103a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4a0a      	ldr	r2, [pc, #40]	@ (8006304 <PCD_EP_OutSetupPacket_int+0x88>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d90c      	bls.n	80062f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	799b      	ldrb	r3, [r3, #6]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d108      	bne.n	80062f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062f0:	461a      	mov	r2, r3
 80062f2:	2101      	movs	r1, #1
 80062f4:	f006 f8e4 	bl	800c4c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	4f54300a 	.word	0x4f54300a

08006308 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	70fb      	strb	r3, [r7, #3]
 8006314:	4613      	mov	r3, r2
 8006316:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d107      	bne.n	8006336 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006326:	883b      	ldrh	r3, [r7, #0]
 8006328:	0419      	lsls	r1, r3, #16
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	430a      	orrs	r2, r1
 8006332:	629a      	str	r2, [r3, #40]	@ 0x28
 8006334:	e028      	b.n	8006388 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633c:	0c1b      	lsrs	r3, r3, #16
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	4413      	add	r3, r2
 8006342:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006344:	2300      	movs	r3, #0
 8006346:	73fb      	strb	r3, [r7, #15]
 8006348:	e00d      	b.n	8006366 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	3340      	adds	r3, #64	@ 0x40
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	0c1b      	lsrs	r3, r3, #16
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	4413      	add	r3, r2
 800635e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	3301      	adds	r3, #1
 8006364:	73fb      	strb	r3, [r7, #15]
 8006366:	7bfa      	ldrb	r2, [r7, #15]
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	3b01      	subs	r3, #1
 800636c:	429a      	cmp	r2, r3
 800636e:	d3ec      	bcc.n	800634a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006370:	883b      	ldrh	r3, [r7, #0]
 8006372:	0418      	lsls	r0, r3, #16
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6819      	ldr	r1, [r3, #0]
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	3b01      	subs	r3, #1
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	4302      	orrs	r2, r0
 8006380:	3340      	adds	r3, #64	@ 0x40
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	460b      	mov	r3, r1
 80063a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	887a      	ldrh	r2, [r7, #2]
 80063a8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063e6:	4b05      	ldr	r3, [pc, #20]	@ (80063fc <HAL_PCDEx_ActivateLPM+0x44>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	10000003 	.word	0x10000003

08006400 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006420:	4b19      	ldr	r3, [pc, #100]	@ (8006488 <HAL_PWREx_ConfigSupply+0x70>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b04      	cmp	r3, #4
 800642a:	d00a      	beq.n	8006442 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800642c:	4b16      	ldr	r3, [pc, #88]	@ (8006488 <HAL_PWREx_ConfigSupply+0x70>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	429a      	cmp	r2, r3
 8006438:	d001      	beq.n	800643e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e01f      	b.n	800647e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	e01d      	b.n	800647e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006442:	4b11      	ldr	r3, [pc, #68]	@ (8006488 <HAL_PWREx_ConfigSupply+0x70>)
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f023 0207 	bic.w	r2, r3, #7
 800644a:	490f      	ldr	r1, [pc, #60]	@ (8006488 <HAL_PWREx_ConfigSupply+0x70>)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4313      	orrs	r3, r2
 8006450:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006452:	f7fb fde1 	bl	8002018 <HAL_GetTick>
 8006456:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006458:	e009      	b.n	800646e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800645a:	f7fb fddd 	bl	8002018 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006468:	d901      	bls.n	800646e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e007      	b.n	800647e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800646e:	4b06      	ldr	r3, [pc, #24]	@ (8006488 <HAL_PWREx_ConfigSupply+0x70>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006476:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800647a:	d1ee      	bne.n	800645a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	58024800 	.word	0x58024800

0800648c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006490:	4b05      	ldr	r3, [pc, #20]	@ (80064a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	4a04      	ldr	r2, [pc, #16]	@ (80064a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006496:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800649a:	60d3      	str	r3, [r2, #12]
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	58024800 	.word	0x58024800

080064ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08c      	sub	sp, #48	@ 0x30
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d102      	bne.n	80064c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f000 bc48 	b.w	8006d50 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 8088 	beq.w	80065de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ce:	4b99      	ldr	r3, [pc, #612]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064d8:	4b96      	ldr	r3, [pc, #600]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 80064da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80064de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e0:	2b10      	cmp	r3, #16
 80064e2:	d007      	beq.n	80064f4 <HAL_RCC_OscConfig+0x48>
 80064e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e6:	2b18      	cmp	r3, #24
 80064e8:	d111      	bne.n	800650e <HAL_RCC_OscConfig+0x62>
 80064ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ec:	f003 0303 	and.w	r3, r3, #3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d10c      	bne.n	800650e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f4:	4b8f      	ldr	r3, [pc, #572]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d06d      	beq.n	80065dc <HAL_RCC_OscConfig+0x130>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d169      	bne.n	80065dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	f000 bc21 	b.w	8006d50 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006516:	d106      	bne.n	8006526 <HAL_RCC_OscConfig+0x7a>
 8006518:	4b86      	ldr	r3, [pc, #536]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a85      	ldr	r2, [pc, #532]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 800651e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	e02e      	b.n	8006584 <HAL_RCC_OscConfig+0xd8>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10c      	bne.n	8006548 <HAL_RCC_OscConfig+0x9c>
 800652e:	4b81      	ldr	r3, [pc, #516]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a80      	ldr	r2, [pc, #512]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 8006534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	4b7e      	ldr	r3, [pc, #504]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a7d      	ldr	r2, [pc, #500]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 8006540:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	e01d      	b.n	8006584 <HAL_RCC_OscConfig+0xd8>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006550:	d10c      	bne.n	800656c <HAL_RCC_OscConfig+0xc0>
 8006552:	4b78      	ldr	r3, [pc, #480]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a77      	ldr	r2, [pc, #476]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 8006558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	4b75      	ldr	r3, [pc, #468]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a74      	ldr	r2, [pc, #464]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 8006564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	e00b      	b.n	8006584 <HAL_RCC_OscConfig+0xd8>
 800656c:	4b71      	ldr	r3, [pc, #452]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a70      	ldr	r2, [pc, #448]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 8006572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	4b6e      	ldr	r3, [pc, #440]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a6d      	ldr	r2, [pc, #436]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 800657e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d013      	beq.n	80065b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fb fd44 	bl	8002018 <HAL_GetTick>
 8006590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006594:	f7fb fd40 	bl	8002018 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b64      	cmp	r3, #100	@ 0x64
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e3d4      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065a6:	4b63      	ldr	r3, [pc, #396]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0f0      	beq.n	8006594 <HAL_RCC_OscConfig+0xe8>
 80065b2:	e014      	b.n	80065de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b4:	f7fb fd30 	bl	8002018 <HAL_GetTick>
 80065b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065ba:	e008      	b.n	80065ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065bc:	f7fb fd2c 	bl	8002018 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b64      	cmp	r3, #100	@ 0x64
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e3c0      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065ce:	4b59      	ldr	r3, [pc, #356]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1f0      	bne.n	80065bc <HAL_RCC_OscConfig+0x110>
 80065da:	e000      	b.n	80065de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 80ca 	beq.w	8006780 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ec:	4b51      	ldr	r3, [pc, #324]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065f6:	4b4f      	ldr	r3, [pc, #316]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 80065f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <HAL_RCC_OscConfig+0x166>
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	2b18      	cmp	r3, #24
 8006606:	d156      	bne.n	80066b6 <HAL_RCC_OscConfig+0x20a>
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d151      	bne.n	80066b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006612:	4b48      	ldr	r3, [pc, #288]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0304 	and.w	r3, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	d005      	beq.n	800662a <HAL_RCC_OscConfig+0x17e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e392      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800662a:	4b42      	ldr	r3, [pc, #264]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f023 0219 	bic.w	r2, r3, #25
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	493f      	ldr	r1, [pc, #252]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 8006638:	4313      	orrs	r3, r2
 800663a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663c:	f7fb fcec 	bl	8002018 <HAL_GetTick>
 8006640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006644:	f7fb fce8 	bl	8002018 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e37c      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006656:	4b37      	ldr	r3, [pc, #220]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0f0      	beq.n	8006644 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006662:	f7fb fd09 	bl	8002078 <HAL_GetREVID>
 8006666:	4603      	mov	r3, r0
 8006668:	f241 0203 	movw	r2, #4099	@ 0x1003
 800666c:	4293      	cmp	r3, r2
 800666e:	d817      	bhi.n	80066a0 <HAL_RCC_OscConfig+0x1f4>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b40      	cmp	r3, #64	@ 0x40
 8006676:	d108      	bne.n	800668a <HAL_RCC_OscConfig+0x1de>
 8006678:	4b2e      	ldr	r3, [pc, #184]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006680:	4a2c      	ldr	r2, [pc, #176]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 8006682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006686:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006688:	e07a      	b.n	8006780 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800668a:	4b2a      	ldr	r3, [pc, #168]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	031b      	lsls	r3, r3, #12
 8006698:	4926      	ldr	r1, [pc, #152]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 800669a:	4313      	orrs	r3, r2
 800669c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800669e:	e06f      	b.n	8006780 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a0:	4b24      	ldr	r3, [pc, #144]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	061b      	lsls	r3, r3, #24
 80066ae:	4921      	ldr	r1, [pc, #132]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066b4:	e064      	b.n	8006780 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d047      	beq.n	800674e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066be:	4b1d      	ldr	r3, [pc, #116]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f023 0219 	bic.w	r2, r3, #25
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	491a      	ldr	r1, [pc, #104]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d0:	f7fb fca2 	bl	8002018 <HAL_GetTick>
 80066d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066d6:	e008      	b.n	80066ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066d8:	f7fb fc9e 	bl	8002018 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e332      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066ea:	4b12      	ldr	r3, [pc, #72]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0f0      	beq.n	80066d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066f6:	f7fb fcbf 	bl	8002078 <HAL_GetREVID>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006700:	4293      	cmp	r3, r2
 8006702:	d819      	bhi.n	8006738 <HAL_RCC_OscConfig+0x28c>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	2b40      	cmp	r3, #64	@ 0x40
 800670a:	d108      	bne.n	800671e <HAL_RCC_OscConfig+0x272>
 800670c:	4b09      	ldr	r3, [pc, #36]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006714:	4a07      	ldr	r2, [pc, #28]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 8006716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800671a:	6053      	str	r3, [r2, #4]
 800671c:	e030      	b.n	8006780 <HAL_RCC_OscConfig+0x2d4>
 800671e:	4b05      	ldr	r3, [pc, #20]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	031b      	lsls	r3, r3, #12
 800672c:	4901      	ldr	r1, [pc, #4]	@ (8006734 <HAL_RCC_OscConfig+0x288>)
 800672e:	4313      	orrs	r3, r2
 8006730:	604b      	str	r3, [r1, #4]
 8006732:	e025      	b.n	8006780 <HAL_RCC_OscConfig+0x2d4>
 8006734:	58024400 	.word	0x58024400
 8006738:	4b9a      	ldr	r3, [pc, #616]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	061b      	lsls	r3, r3, #24
 8006746:	4997      	ldr	r1, [pc, #604]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 8006748:	4313      	orrs	r3, r2
 800674a:	604b      	str	r3, [r1, #4]
 800674c:	e018      	b.n	8006780 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800674e:	4b95      	ldr	r3, [pc, #596]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a94      	ldr	r2, [pc, #592]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 8006754:	f023 0301 	bic.w	r3, r3, #1
 8006758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675a:	f7fb fc5d 	bl	8002018 <HAL_GetTick>
 800675e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006760:	e008      	b.n	8006774 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006762:	f7fb fc59 	bl	8002018 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d901      	bls.n	8006774 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e2ed      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006774:	4b8b      	ldr	r3, [pc, #556]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1f0      	bne.n	8006762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 80a9 	beq.w	80068e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800678e:	4b85      	ldr	r3, [pc, #532]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006796:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006798:	4b82      	ldr	r3, [pc, #520]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 800679a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d007      	beq.n	80067b4 <HAL_RCC_OscConfig+0x308>
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	2b18      	cmp	r3, #24
 80067a8:	d13a      	bne.n	8006820 <HAL_RCC_OscConfig+0x374>
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d135      	bne.n	8006820 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067b4:	4b7b      	ldr	r3, [pc, #492]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d005      	beq.n	80067cc <HAL_RCC_OscConfig+0x320>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	2b80      	cmp	r3, #128	@ 0x80
 80067c6:	d001      	beq.n	80067cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e2c1      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067cc:	f7fb fc54 	bl	8002078 <HAL_GetREVID>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d817      	bhi.n	800680a <HAL_RCC_OscConfig+0x35e>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	2b20      	cmp	r3, #32
 80067e0:	d108      	bne.n	80067f4 <HAL_RCC_OscConfig+0x348>
 80067e2:	4b70      	ldr	r3, [pc, #448]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80067ea:	4a6e      	ldr	r2, [pc, #440]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 80067ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067f2:	e075      	b.n	80068e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067f4:	4b6b      	ldr	r3, [pc, #428]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	069b      	lsls	r3, r3, #26
 8006802:	4968      	ldr	r1, [pc, #416]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 8006804:	4313      	orrs	r3, r2
 8006806:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006808:	e06a      	b.n	80068e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800680a:	4b66      	ldr	r3, [pc, #408]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	061b      	lsls	r3, r3, #24
 8006818:	4962      	ldr	r1, [pc, #392]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 800681a:	4313      	orrs	r3, r2
 800681c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800681e:	e05f      	b.n	80068e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d042      	beq.n	80068ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006828:	4b5e      	ldr	r3, [pc, #376]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a5d      	ldr	r2, [pc, #372]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 800682e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006834:	f7fb fbf0 	bl	8002018 <HAL_GetTick>
 8006838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800683c:	f7fb fbec 	bl	8002018 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e280      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800684e:	4b55      	ldr	r3, [pc, #340]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0f0      	beq.n	800683c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800685a:	f7fb fc0d 	bl	8002078 <HAL_GetREVID>
 800685e:	4603      	mov	r3, r0
 8006860:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006864:	4293      	cmp	r3, r2
 8006866:	d817      	bhi.n	8006898 <HAL_RCC_OscConfig+0x3ec>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	2b20      	cmp	r3, #32
 800686e:	d108      	bne.n	8006882 <HAL_RCC_OscConfig+0x3d6>
 8006870:	4b4c      	ldr	r3, [pc, #304]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006878:	4a4a      	ldr	r2, [pc, #296]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 800687a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800687e:	6053      	str	r3, [r2, #4]
 8006880:	e02e      	b.n	80068e0 <HAL_RCC_OscConfig+0x434>
 8006882:	4b48      	ldr	r3, [pc, #288]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	069b      	lsls	r3, r3, #26
 8006890:	4944      	ldr	r1, [pc, #272]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 8006892:	4313      	orrs	r3, r2
 8006894:	604b      	str	r3, [r1, #4]
 8006896:	e023      	b.n	80068e0 <HAL_RCC_OscConfig+0x434>
 8006898:	4b42      	ldr	r3, [pc, #264]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	061b      	lsls	r3, r3, #24
 80068a6:	493f      	ldr	r1, [pc, #252]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60cb      	str	r3, [r1, #12]
 80068ac:	e018      	b.n	80068e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80068ae:	4b3d      	ldr	r3, [pc, #244]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a3c      	ldr	r2, [pc, #240]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 80068b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ba:	f7fb fbad 	bl	8002018 <HAL_GetTick>
 80068be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80068c2:	f7fb fba9 	bl	8002018 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e23d      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068d4:	4b33      	ldr	r3, [pc, #204]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f0      	bne.n	80068c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d036      	beq.n	800695a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d019      	beq.n	8006928 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068f4:	4b2b      	ldr	r3, [pc, #172]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 80068f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068f8:	4a2a      	ldr	r2, [pc, #168]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 80068fa:	f043 0301 	orr.w	r3, r3, #1
 80068fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006900:	f7fb fb8a 	bl	8002018 <HAL_GetTick>
 8006904:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006908:	f7fb fb86 	bl	8002018 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e21a      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800691a:	4b22      	ldr	r3, [pc, #136]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 800691c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0f0      	beq.n	8006908 <HAL_RCC_OscConfig+0x45c>
 8006926:	e018      	b.n	800695a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006928:	4b1e      	ldr	r3, [pc, #120]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 800692a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800692c:	4a1d      	ldr	r2, [pc, #116]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 800692e:	f023 0301 	bic.w	r3, r3, #1
 8006932:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006934:	f7fb fb70 	bl	8002018 <HAL_GetTick>
 8006938:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800693a:	e008      	b.n	800694e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800693c:	f7fb fb6c 	bl	8002018 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e200      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800694e:	4b15      	ldr	r3, [pc, #84]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 8006950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1f0      	bne.n	800693c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b00      	cmp	r3, #0
 8006964:	d039      	beq.n	80069da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d01c      	beq.n	80069a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800696e:	4b0d      	ldr	r3, [pc, #52]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a0c      	ldr	r2, [pc, #48]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 8006974:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006978:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800697a:	f7fb fb4d 	bl	8002018 <HAL_GetTick>
 800697e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006980:	e008      	b.n	8006994 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006982:	f7fb fb49 	bl	8002018 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e1dd      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006994:	4b03      	ldr	r3, [pc, #12]	@ (80069a4 <HAL_RCC_OscConfig+0x4f8>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0f0      	beq.n	8006982 <HAL_RCC_OscConfig+0x4d6>
 80069a0:	e01b      	b.n	80069da <HAL_RCC_OscConfig+0x52e>
 80069a2:	bf00      	nop
 80069a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069a8:	4b9b      	ldr	r3, [pc, #620]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a9a      	ldr	r2, [pc, #616]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 80069ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069b4:	f7fb fb30 	bl	8002018 <HAL_GetTick>
 80069b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069bc:	f7fb fb2c 	bl	8002018 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e1c0      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069ce:	4b92      	ldr	r3, [pc, #584]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f0      	bne.n	80069bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8081 	beq.w	8006aea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80069e8:	4b8c      	ldr	r3, [pc, #560]	@ (8006c1c <HAL_RCC_OscConfig+0x770>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a8b      	ldr	r2, [pc, #556]	@ (8006c1c <HAL_RCC_OscConfig+0x770>)
 80069ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069f4:	f7fb fb10 	bl	8002018 <HAL_GetTick>
 80069f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069fa:	e008      	b.n	8006a0e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069fc:	f7fb fb0c 	bl	8002018 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	2b64      	cmp	r3, #100	@ 0x64
 8006a08:	d901      	bls.n	8006a0e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e1a0      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a0e:	4b83      	ldr	r3, [pc, #524]	@ (8006c1c <HAL_RCC_OscConfig+0x770>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0f0      	beq.n	80069fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d106      	bne.n	8006a30 <HAL_RCC_OscConfig+0x584>
 8006a22:	4b7d      	ldr	r3, [pc, #500]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a26:	4a7c      	ldr	r2, [pc, #496]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006a28:	f043 0301 	orr.w	r3, r3, #1
 8006a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a2e:	e02d      	b.n	8006a8c <HAL_RCC_OscConfig+0x5e0>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10c      	bne.n	8006a52 <HAL_RCC_OscConfig+0x5a6>
 8006a38:	4b77      	ldr	r3, [pc, #476]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a3c:	4a76      	ldr	r2, [pc, #472]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a44:	4b74      	ldr	r3, [pc, #464]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a48:	4a73      	ldr	r2, [pc, #460]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006a4a:	f023 0304 	bic.w	r3, r3, #4
 8006a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a50:	e01c      	b.n	8006a8c <HAL_RCC_OscConfig+0x5e0>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	2b05      	cmp	r3, #5
 8006a58:	d10c      	bne.n	8006a74 <HAL_RCC_OscConfig+0x5c8>
 8006a5a:	4b6f      	ldr	r3, [pc, #444]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5e:	4a6e      	ldr	r2, [pc, #440]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006a60:	f043 0304 	orr.w	r3, r3, #4
 8006a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a66:	4b6c      	ldr	r3, [pc, #432]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a6a:	4a6b      	ldr	r2, [pc, #428]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006a6c:	f043 0301 	orr.w	r3, r3, #1
 8006a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a72:	e00b      	b.n	8006a8c <HAL_RCC_OscConfig+0x5e0>
 8006a74:	4b68      	ldr	r3, [pc, #416]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a78:	4a67      	ldr	r2, [pc, #412]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006a7a:	f023 0301 	bic.w	r3, r3, #1
 8006a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a80:	4b65      	ldr	r3, [pc, #404]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a84:	4a64      	ldr	r2, [pc, #400]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006a86:	f023 0304 	bic.w	r3, r3, #4
 8006a8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d015      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a94:	f7fb fac0 	bl	8002018 <HAL_GetTick>
 8006a98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a9a:	e00a      	b.n	8006ab2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a9c:	f7fb fabc 	bl	8002018 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e14e      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ab2:	4b59      	ldr	r3, [pc, #356]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0ee      	beq.n	8006a9c <HAL_RCC_OscConfig+0x5f0>
 8006abe:	e014      	b.n	8006aea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac0:	f7fb faaa 	bl	8002018 <HAL_GetTick>
 8006ac4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ac6:	e00a      	b.n	8006ade <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ac8:	f7fb faa6 	bl	8002018 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e138      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ade:	4b4e      	ldr	r3, [pc, #312]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1ee      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 812d 	beq.w	8006d4e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006af4:	4b48      	ldr	r3, [pc, #288]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006afc:	2b18      	cmp	r3, #24
 8006afe:	f000 80bd 	beq.w	8006c7c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	f040 809e 	bne.w	8006c48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b0c:	4b42      	ldr	r3, [pc, #264]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a41      	ldr	r2, [pc, #260]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b18:	f7fb fa7e 	bl	8002018 <HAL_GetTick>
 8006b1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b1e:	e008      	b.n	8006b32 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b20:	f7fb fa7a 	bl	8002018 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e10e      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b32:	4b39      	ldr	r3, [pc, #228]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1f0      	bne.n	8006b20 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b3e:	4b36      	ldr	r3, [pc, #216]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006b40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b42:	4b37      	ldr	r3, [pc, #220]	@ (8006c20 <HAL_RCC_OscConfig+0x774>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006b4e:	0112      	lsls	r2, r2, #4
 8006b50:	430a      	orrs	r2, r1
 8006b52:	4931      	ldr	r1, [pc, #196]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b66:	3b01      	subs	r3, #1
 8006b68:	025b      	lsls	r3, r3, #9
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b72:	3b01      	subs	r3, #1
 8006b74:	041b      	lsls	r3, r3, #16
 8006b76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b80:	3b01      	subs	r3, #1
 8006b82:	061b      	lsls	r3, r3, #24
 8006b84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b88:	4923      	ldr	r1, [pc, #140]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006b8e:	4b22      	ldr	r3, [pc, #136]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b92:	4a21      	ldr	r2, [pc, #132]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006b94:	f023 0301 	bic.w	r3, r3, #1
 8006b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b9e:	4b21      	ldr	r3, [pc, #132]	@ (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ba6:	00d2      	lsls	r2, r2, #3
 8006ba8:	491b      	ldr	r1, [pc, #108]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006bae:	4b1a      	ldr	r3, [pc, #104]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb2:	f023 020c 	bic.w	r2, r3, #12
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bba:	4917      	ldr	r1, [pc, #92]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006bc0:	4b15      	ldr	r3, [pc, #84]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc4:	f023 0202 	bic.w	r2, r3, #2
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bcc:	4912      	ldr	r1, [pc, #72]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006bd2:	4b11      	ldr	r3, [pc, #68]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd6:	4a10      	ldr	r2, [pc, #64]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bde:	4b0e      	ldr	r3, [pc, #56]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be2:	4a0d      	ldr	r2, [pc, #52]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006bea:	4b0b      	ldr	r3, [pc, #44]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bee:	4a0a      	ldr	r2, [pc, #40]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006bf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006bf6:	4b08      	ldr	r3, [pc, #32]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfa:	4a07      	ldr	r2, [pc, #28]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c02:	4b05      	ldr	r3, [pc, #20]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a04      	ldr	r2, [pc, #16]	@ (8006c18 <HAL_RCC_OscConfig+0x76c>)
 8006c08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0e:	f7fb fa03 	bl	8002018 <HAL_GetTick>
 8006c12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c14:	e011      	b.n	8006c3a <HAL_RCC_OscConfig+0x78e>
 8006c16:	bf00      	nop
 8006c18:	58024400 	.word	0x58024400
 8006c1c:	58024800 	.word	0x58024800
 8006c20:	fffffc0c 	.word	0xfffffc0c
 8006c24:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c28:	f7fb f9f6 	bl	8002018 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e08a      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c3a:	4b47      	ldr	r3, [pc, #284]	@ (8006d58 <HAL_RCC_OscConfig+0x8ac>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0f0      	beq.n	8006c28 <HAL_RCC_OscConfig+0x77c>
 8006c46:	e082      	b.n	8006d4e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c48:	4b43      	ldr	r3, [pc, #268]	@ (8006d58 <HAL_RCC_OscConfig+0x8ac>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a42      	ldr	r2, [pc, #264]	@ (8006d58 <HAL_RCC_OscConfig+0x8ac>)
 8006c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c54:	f7fb f9e0 	bl	8002018 <HAL_GetTick>
 8006c58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c5c:	f7fb f9dc 	bl	8002018 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e070      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8006d58 <HAL_RCC_OscConfig+0x8ac>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0x7b0>
 8006c7a:	e068      	b.n	8006d4e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006c7c:	4b36      	ldr	r3, [pc, #216]	@ (8006d58 <HAL_RCC_OscConfig+0x8ac>)
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c82:	4b35      	ldr	r3, [pc, #212]	@ (8006d58 <HAL_RCC_OscConfig+0x8ac>)
 8006c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d031      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f003 0203 	and.w	r2, r3, #3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d12a      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	091b      	lsrs	r3, r3, #4
 8006ca2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d122      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d11a      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	0a5b      	lsrs	r3, r3, #9
 8006cc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d111      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	0c1b      	lsrs	r3, r3, #16
 8006cd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d108      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	0e1b      	lsrs	r3, r3, #24
 8006ce6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d001      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e02b      	b.n	8006d50 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006cf8:	4b17      	ldr	r3, [pc, #92]	@ (8006d58 <HAL_RCC_OscConfig+0x8ac>)
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cfc:	08db      	lsrs	r3, r3, #3
 8006cfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d01f      	beq.n	8006d4e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006d0e:	4b12      	ldr	r3, [pc, #72]	@ (8006d58 <HAL_RCC_OscConfig+0x8ac>)
 8006d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d12:	4a11      	ldr	r2, [pc, #68]	@ (8006d58 <HAL_RCC_OscConfig+0x8ac>)
 8006d14:	f023 0301 	bic.w	r3, r3, #1
 8006d18:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d1a:	f7fb f97d 	bl	8002018 <HAL_GetTick>
 8006d1e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006d20:	bf00      	nop
 8006d22:	f7fb f979 	bl	8002018 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d0f9      	beq.n	8006d22 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d58 <HAL_RCC_OscConfig+0x8ac>)
 8006d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d32:	4b0a      	ldr	r3, [pc, #40]	@ (8006d5c <HAL_RCC_OscConfig+0x8b0>)
 8006d34:	4013      	ands	r3, r2
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006d3a:	00d2      	lsls	r2, r2, #3
 8006d3c:	4906      	ldr	r1, [pc, #24]	@ (8006d58 <HAL_RCC_OscConfig+0x8ac>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006d42:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <HAL_RCC_OscConfig+0x8ac>)
 8006d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d46:	4a04      	ldr	r2, [pc, #16]	@ (8006d58 <HAL_RCC_OscConfig+0x8ac>)
 8006d48:	f043 0301 	orr.w	r3, r3, #1
 8006d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3730      	adds	r7, #48	@ 0x30
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	58024400 	.word	0x58024400
 8006d5c:	ffff0007 	.word	0xffff0007

08006d60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e19c      	b.n	80070ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d74:	4b8a      	ldr	r3, [pc, #552]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 030f 	and.w	r3, r3, #15
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d910      	bls.n	8006da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d82:	4b87      	ldr	r3, [pc, #540]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f023 020f 	bic.w	r2, r3, #15
 8006d8a:	4985      	ldr	r1, [pc, #532]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d92:	4b83      	ldr	r3, [pc, #524]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 030f 	and.w	r3, r3, #15
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d001      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e184      	b.n	80070ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d010      	beq.n	8006dd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	4b7b      	ldr	r3, [pc, #492]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d908      	bls.n	8006dd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006dc0:	4b78      	ldr	r3, [pc, #480]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	4975      	ldr	r1, [pc, #468]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0308 	and.w	r3, r3, #8
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d010      	beq.n	8006e00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	695a      	ldr	r2, [r3, #20]
 8006de2:	4b70      	ldr	r3, [pc, #448]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d908      	bls.n	8006e00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006dee:	4b6d      	ldr	r3, [pc, #436]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	496a      	ldr	r1, [pc, #424]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d010      	beq.n	8006e2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	699a      	ldr	r2, [r3, #24]
 8006e10:	4b64      	ldr	r3, [pc, #400]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d908      	bls.n	8006e2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e1c:	4b61      	ldr	r3, [pc, #388]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	495e      	ldr	r1, [pc, #376]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d010      	beq.n	8006e5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69da      	ldr	r2, [r3, #28]
 8006e3e:	4b59      	ldr	r3, [pc, #356]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d908      	bls.n	8006e5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e4a:	4b56      	ldr	r3, [pc, #344]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	4953      	ldr	r1, [pc, #332]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d010      	beq.n	8006e8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	f003 030f 	and.w	r3, r3, #15
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d908      	bls.n	8006e8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e78:	4b4a      	ldr	r3, [pc, #296]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	f023 020f 	bic.w	r2, r3, #15
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	4947      	ldr	r1, [pc, #284]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d055      	beq.n	8006f42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e96:	4b43      	ldr	r3, [pc, #268]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	4940      	ldr	r1, [pc, #256]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d107      	bne.n	8006ec0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d121      	bne.n	8006f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e0f6      	b.n	80070ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d107      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ec8:	4b36      	ldr	r3, [pc, #216]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d115      	bne.n	8006f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e0ea      	b.n	80070ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d107      	bne.n	8006ef0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ee0:	4b30      	ldr	r3, [pc, #192]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d109      	bne.n	8006f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e0de      	b.n	80070ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e0d6      	b.n	80070ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f00:	4b28      	ldr	r3, [pc, #160]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	f023 0207 	bic.w	r2, r3, #7
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	4925      	ldr	r1, [pc, #148]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f12:	f7fb f881 	bl	8002018 <HAL_GetTick>
 8006f16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f18:	e00a      	b.n	8006f30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f1a:	f7fb f87d 	bl	8002018 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d901      	bls.n	8006f30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e0be      	b.n	80070ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f30:	4b1c      	ldr	r3, [pc, #112]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d1eb      	bne.n	8006f1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d010      	beq.n	8006f70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	4b14      	ldr	r3, [pc, #80]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d208      	bcs.n	8006f70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f5e:	4b11      	ldr	r3, [pc, #68]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	f023 020f 	bic.w	r2, r3, #15
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	490e      	ldr	r1, [pc, #56]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f70:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 030f 	and.w	r3, r3, #15
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d214      	bcs.n	8006fa8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f7e:	4b08      	ldr	r3, [pc, #32]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f023 020f 	bic.w	r2, r3, #15
 8006f86:	4906      	ldr	r1, [pc, #24]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f8e:	4b04      	ldr	r3, [pc, #16]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 030f 	and.w	r3, r3, #15
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d005      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e086      	b.n	80070ae <HAL_RCC_ClockConfig+0x34e>
 8006fa0:	52002000 	.word	0x52002000
 8006fa4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d010      	beq.n	8006fd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	691a      	ldr	r2, [r3, #16]
 8006fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80070b8 <HAL_RCC_ClockConfig+0x358>)
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d208      	bcs.n	8006fd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006fc4:	4b3c      	ldr	r3, [pc, #240]	@ (80070b8 <HAL_RCC_ClockConfig+0x358>)
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	4939      	ldr	r1, [pc, #228]	@ (80070b8 <HAL_RCC_ClockConfig+0x358>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d010      	beq.n	8007004 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	695a      	ldr	r2, [r3, #20]
 8006fe6:	4b34      	ldr	r3, [pc, #208]	@ (80070b8 <HAL_RCC_ClockConfig+0x358>)
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d208      	bcs.n	8007004 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ff2:	4b31      	ldr	r3, [pc, #196]	@ (80070b8 <HAL_RCC_ClockConfig+0x358>)
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	492e      	ldr	r1, [pc, #184]	@ (80070b8 <HAL_RCC_ClockConfig+0x358>)
 8007000:	4313      	orrs	r3, r2
 8007002:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0310 	and.w	r3, r3, #16
 800700c:	2b00      	cmp	r3, #0
 800700e:	d010      	beq.n	8007032 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699a      	ldr	r2, [r3, #24]
 8007014:	4b28      	ldr	r3, [pc, #160]	@ (80070b8 <HAL_RCC_ClockConfig+0x358>)
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800701c:	429a      	cmp	r2, r3
 800701e:	d208      	bcs.n	8007032 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007020:	4b25      	ldr	r3, [pc, #148]	@ (80070b8 <HAL_RCC_ClockConfig+0x358>)
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	4922      	ldr	r1, [pc, #136]	@ (80070b8 <HAL_RCC_ClockConfig+0x358>)
 800702e:	4313      	orrs	r3, r2
 8007030:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0320 	and.w	r3, r3, #32
 800703a:	2b00      	cmp	r3, #0
 800703c:	d010      	beq.n	8007060 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	69da      	ldr	r2, [r3, #28]
 8007042:	4b1d      	ldr	r3, [pc, #116]	@ (80070b8 <HAL_RCC_ClockConfig+0x358>)
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800704a:	429a      	cmp	r2, r3
 800704c:	d208      	bcs.n	8007060 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800704e:	4b1a      	ldr	r3, [pc, #104]	@ (80070b8 <HAL_RCC_ClockConfig+0x358>)
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	4917      	ldr	r1, [pc, #92]	@ (80070b8 <HAL_RCC_ClockConfig+0x358>)
 800705c:	4313      	orrs	r3, r2
 800705e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007060:	f000 f834 	bl	80070cc <HAL_RCC_GetSysClockFreq>
 8007064:	4602      	mov	r2, r0
 8007066:	4b14      	ldr	r3, [pc, #80]	@ (80070b8 <HAL_RCC_ClockConfig+0x358>)
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	0a1b      	lsrs	r3, r3, #8
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	4912      	ldr	r1, [pc, #72]	@ (80070bc <HAL_RCC_ClockConfig+0x35c>)
 8007072:	5ccb      	ldrb	r3, [r1, r3]
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	fa22 f303 	lsr.w	r3, r2, r3
 800707c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800707e:	4b0e      	ldr	r3, [pc, #56]	@ (80070b8 <HAL_RCC_ClockConfig+0x358>)
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	4a0d      	ldr	r2, [pc, #52]	@ (80070bc <HAL_RCC_ClockConfig+0x35c>)
 8007088:	5cd3      	ldrb	r3, [r2, r3]
 800708a:	f003 031f 	and.w	r3, r3, #31
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	fa22 f303 	lsr.w	r3, r2, r3
 8007094:	4a0a      	ldr	r2, [pc, #40]	@ (80070c0 <HAL_RCC_ClockConfig+0x360>)
 8007096:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007098:	4a0a      	ldr	r2, [pc, #40]	@ (80070c4 <HAL_RCC_ClockConfig+0x364>)
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800709e:	4b0a      	ldr	r3, [pc, #40]	@ (80070c8 <HAL_RCC_ClockConfig+0x368>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fa f83a 	bl	800111c <HAL_InitTick>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	58024400 	.word	0x58024400
 80070bc:	08011358 	.word	0x08011358
 80070c0:	24000004 	.word	0x24000004
 80070c4:	24000000 	.word	0x24000000
 80070c8:	24000008 	.word	0x24000008

080070cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b089      	sub	sp, #36	@ 0x24
 80070d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070d2:	4bb3      	ldr	r3, [pc, #716]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070da:	2b18      	cmp	r3, #24
 80070dc:	f200 8155 	bhi.w	800738a <HAL_RCC_GetSysClockFreq+0x2be>
 80070e0:	a201      	add	r2, pc, #4	@ (adr r2, 80070e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80070e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e6:	bf00      	nop
 80070e8:	0800714d 	.word	0x0800714d
 80070ec:	0800738b 	.word	0x0800738b
 80070f0:	0800738b 	.word	0x0800738b
 80070f4:	0800738b 	.word	0x0800738b
 80070f8:	0800738b 	.word	0x0800738b
 80070fc:	0800738b 	.word	0x0800738b
 8007100:	0800738b 	.word	0x0800738b
 8007104:	0800738b 	.word	0x0800738b
 8007108:	08007173 	.word	0x08007173
 800710c:	0800738b 	.word	0x0800738b
 8007110:	0800738b 	.word	0x0800738b
 8007114:	0800738b 	.word	0x0800738b
 8007118:	0800738b 	.word	0x0800738b
 800711c:	0800738b 	.word	0x0800738b
 8007120:	0800738b 	.word	0x0800738b
 8007124:	0800738b 	.word	0x0800738b
 8007128:	08007179 	.word	0x08007179
 800712c:	0800738b 	.word	0x0800738b
 8007130:	0800738b 	.word	0x0800738b
 8007134:	0800738b 	.word	0x0800738b
 8007138:	0800738b 	.word	0x0800738b
 800713c:	0800738b 	.word	0x0800738b
 8007140:	0800738b 	.word	0x0800738b
 8007144:	0800738b 	.word	0x0800738b
 8007148:	0800717f 	.word	0x0800717f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800714c:	4b94      	ldr	r3, [pc, #592]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0320 	and.w	r3, r3, #32
 8007154:	2b00      	cmp	r3, #0
 8007156:	d009      	beq.n	800716c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007158:	4b91      	ldr	r3, [pc, #580]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	08db      	lsrs	r3, r3, #3
 800715e:	f003 0303 	and.w	r3, r3, #3
 8007162:	4a90      	ldr	r2, [pc, #576]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007164:	fa22 f303 	lsr.w	r3, r2, r3
 8007168:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800716a:	e111      	b.n	8007390 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800716c:	4b8d      	ldr	r3, [pc, #564]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800716e:	61bb      	str	r3, [r7, #24]
      break;
 8007170:	e10e      	b.n	8007390 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007172:	4b8d      	ldr	r3, [pc, #564]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007174:	61bb      	str	r3, [r7, #24]
      break;
 8007176:	e10b      	b.n	8007390 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007178:	4b8c      	ldr	r3, [pc, #560]	@ (80073ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800717a:	61bb      	str	r3, [r7, #24]
      break;
 800717c:	e108      	b.n	8007390 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800717e:	4b88      	ldr	r3, [pc, #544]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007188:	4b85      	ldr	r3, [pc, #532]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800718a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800718c:	091b      	lsrs	r3, r3, #4
 800718e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007192:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007194:	4b82      	ldr	r3, [pc, #520]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800719e:	4b80      	ldr	r3, [pc, #512]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071a2:	08db      	lsrs	r3, r3, #3
 80071a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	fb02 f303 	mul.w	r3, r2, r3
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 80e1 	beq.w	8007384 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	f000 8083 	beq.w	80072d0 <HAL_RCC_GetSysClockFreq+0x204>
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	f200 80a1 	bhi.w	8007314 <HAL_RCC_GetSysClockFreq+0x248>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_RCC_GetSysClockFreq+0x114>
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d056      	beq.n	800728c <HAL_RCC_GetSysClockFreq+0x1c0>
 80071de:	e099      	b.n	8007314 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071e0:	4b6f      	ldr	r3, [pc, #444]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0320 	and.w	r3, r3, #32
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d02d      	beq.n	8007248 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071ec:	4b6c      	ldr	r3, [pc, #432]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	08db      	lsrs	r3, r3, #3
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	4a6b      	ldr	r2, [pc, #428]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071f8:	fa22 f303 	lsr.w	r3, r2, r3
 80071fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	ee07 3a90 	vmov	s15, r3
 8007204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007216:	4b62      	ldr	r3, [pc, #392]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007226:	ed97 6a02 	vldr	s12, [r7, #8]
 800722a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80073b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800722e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800723a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007242:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007246:	e087      	b.n	8007358 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007252:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80073b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725a:	4b51      	ldr	r3, [pc, #324]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800725c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800725e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726a:	ed97 6a02 	vldr	s12, [r7, #8]
 800726e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80073b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800727e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007286:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800728a:	e065      	b.n	8007358 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007296:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80073b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800729a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729e:	4b40      	ldr	r3, [pc, #256]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80072b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80073b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072ce:	e043      	b.n	8007358 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80073bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80072de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e2:	4b2f      	ldr	r3, [pc, #188]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80072f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80073b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007312:	e021      	b.n	8007358 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80073b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007326:	4b1e      	ldr	r3, [pc, #120]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007336:	ed97 6a02 	vldr	s12, [r7, #8]
 800733a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80073b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800733e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800734a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007352:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007356:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007358:	4b11      	ldr	r3, [pc, #68]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800735a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800735c:	0a5b      	lsrs	r3, r3, #9
 800735e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007362:	3301      	adds	r3, #1
 8007364:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	ee07 3a90 	vmov	s15, r3
 800736c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007370:	edd7 6a07 	vldr	s13, [r7, #28]
 8007374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800737c:	ee17 3a90 	vmov	r3, s15
 8007380:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007382:	e005      	b.n	8007390 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	61bb      	str	r3, [r7, #24]
      break;
 8007388:	e002      	b.n	8007390 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800738a:	4b07      	ldr	r3, [pc, #28]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800738c:	61bb      	str	r3, [r7, #24]
      break;
 800738e:	bf00      	nop
  }

  return sysclockfreq;
 8007390:	69bb      	ldr	r3, [r7, #24]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3724      	adds	r7, #36	@ 0x24
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	58024400 	.word	0x58024400
 80073a4:	03d09000 	.word	0x03d09000
 80073a8:	003d0900 	.word	0x003d0900
 80073ac:	007a1200 	.word	0x007a1200
 80073b0:	46000000 	.word	0x46000000
 80073b4:	4c742400 	.word	0x4c742400
 80073b8:	4a742400 	.word	0x4a742400
 80073bc:	4af42400 	.word	0x4af42400

080073c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80073c6:	f7ff fe81 	bl	80070cc <HAL_RCC_GetSysClockFreq>
 80073ca:	4602      	mov	r2, r0
 80073cc:	4b10      	ldr	r3, [pc, #64]	@ (8007410 <HAL_RCC_GetHCLKFreq+0x50>)
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	0a1b      	lsrs	r3, r3, #8
 80073d2:	f003 030f 	and.w	r3, r3, #15
 80073d6:	490f      	ldr	r1, [pc, #60]	@ (8007414 <HAL_RCC_GetHCLKFreq+0x54>)
 80073d8:	5ccb      	ldrb	r3, [r1, r3]
 80073da:	f003 031f 	and.w	r3, r3, #31
 80073de:	fa22 f303 	lsr.w	r3, r2, r3
 80073e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007410 <HAL_RCC_GetHCLKFreq+0x50>)
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	f003 030f 	and.w	r3, r3, #15
 80073ec:	4a09      	ldr	r2, [pc, #36]	@ (8007414 <HAL_RCC_GetHCLKFreq+0x54>)
 80073ee:	5cd3      	ldrb	r3, [r2, r3]
 80073f0:	f003 031f 	and.w	r3, r3, #31
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	fa22 f303 	lsr.w	r3, r2, r3
 80073fa:	4a07      	ldr	r2, [pc, #28]	@ (8007418 <HAL_RCC_GetHCLKFreq+0x58>)
 80073fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073fe:	4a07      	ldr	r2, [pc, #28]	@ (800741c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007404:	4b04      	ldr	r3, [pc, #16]	@ (8007418 <HAL_RCC_GetHCLKFreq+0x58>)
 8007406:	681b      	ldr	r3, [r3, #0]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	58024400 	.word	0x58024400
 8007414:	08011358 	.word	0x08011358
 8007418:	24000004 	.word	0x24000004
 800741c:	24000000 	.word	0x24000000

08007420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007424:	f7ff ffcc 	bl	80073c0 <HAL_RCC_GetHCLKFreq>
 8007428:	4602      	mov	r2, r0
 800742a:	4b06      	ldr	r3, [pc, #24]	@ (8007444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	091b      	lsrs	r3, r3, #4
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	4904      	ldr	r1, [pc, #16]	@ (8007448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007436:	5ccb      	ldrb	r3, [r1, r3]
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007440:	4618      	mov	r0, r3
 8007442:	bd80      	pop	{r7, pc}
 8007444:	58024400 	.word	0x58024400
 8007448:	08011358 	.word	0x08011358

0800744c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007450:	f7ff ffb6 	bl	80073c0 <HAL_RCC_GetHCLKFreq>
 8007454:	4602      	mov	r2, r0
 8007456:	4b06      	ldr	r3, [pc, #24]	@ (8007470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	0a1b      	lsrs	r3, r3, #8
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	4904      	ldr	r1, [pc, #16]	@ (8007474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007462:	5ccb      	ldrb	r3, [r1, r3]
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800746c:	4618      	mov	r0, r3
 800746e:	bd80      	pop	{r7, pc}
 8007470:	58024400 	.word	0x58024400
 8007474:	08011358 	.word	0x08011358

08007478 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	223f      	movs	r2, #63	@ 0x3f
 8007486:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007488:	4b1a      	ldr	r3, [pc, #104]	@ (80074f4 <HAL_RCC_GetClockConfig+0x7c>)
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f003 0207 	and.w	r2, r3, #7
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007494:	4b17      	ldr	r3, [pc, #92]	@ (80074f4 <HAL_RCC_GetClockConfig+0x7c>)
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80074a0:	4b14      	ldr	r3, [pc, #80]	@ (80074f4 <HAL_RCC_GetClockConfig+0x7c>)
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	f003 020f 	and.w	r2, r3, #15
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80074ac:	4b11      	ldr	r3, [pc, #68]	@ (80074f4 <HAL_RCC_GetClockConfig+0x7c>)
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80074b8:	4b0e      	ldr	r3, [pc, #56]	@ (80074f4 <HAL_RCC_GetClockConfig+0x7c>)
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80074c4:	4b0b      	ldr	r3, [pc, #44]	@ (80074f4 <HAL_RCC_GetClockConfig+0x7c>)
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80074d0:	4b08      	ldr	r3, [pc, #32]	@ (80074f4 <HAL_RCC_GetClockConfig+0x7c>)
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074dc:	4b06      	ldr	r3, [pc, #24]	@ (80074f8 <HAL_RCC_GetClockConfig+0x80>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 020f 	and.w	r2, r3, #15
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	601a      	str	r2, [r3, #0]
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	58024400 	.word	0x58024400
 80074f8:	52002000 	.word	0x52002000

080074fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007500:	b0ca      	sub	sp, #296	@ 0x128
 8007502:	af00      	add	r7, sp, #0
 8007504:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007508:	2300      	movs	r3, #0
 800750a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800750e:	2300      	movs	r3, #0
 8007510:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007520:	2500      	movs	r5, #0
 8007522:	ea54 0305 	orrs.w	r3, r4, r5
 8007526:	d049      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800752e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007532:	d02f      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007534:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007538:	d828      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800753a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800753e:	d01a      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007540:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007544:	d822      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800754a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800754e:	d007      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007550:	e01c      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007552:	4bb8      	ldr	r3, [pc, #736]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007556:	4ab7      	ldr	r2, [pc, #732]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800755c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800755e:	e01a      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007564:	3308      	adds	r3, #8
 8007566:	2102      	movs	r1, #2
 8007568:	4618      	mov	r0, r3
 800756a:	f001 fc8f 	bl	8008e8c <RCCEx_PLL2_Config>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007574:	e00f      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757a:	3328      	adds	r3, #40	@ 0x28
 800757c:	2102      	movs	r1, #2
 800757e:	4618      	mov	r0, r3
 8007580:	f001 fd36 	bl	8008ff0 <RCCEx_PLL3_Config>
 8007584:	4603      	mov	r3, r0
 8007586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800758a:	e004      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007592:	e000      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800759e:	4ba5      	ldr	r3, [pc, #660]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80075a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075ac:	4aa1      	ldr	r2, [pc, #644]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075ae:	430b      	orrs	r3, r1
 80075b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80075b2:	e003      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80075c8:	f04f 0900 	mov.w	r9, #0
 80075cc:	ea58 0309 	orrs.w	r3, r8, r9
 80075d0:	d047      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d8:	2b04      	cmp	r3, #4
 80075da:	d82a      	bhi.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80075dc:	a201      	add	r2, pc, #4	@ (adr r2, 80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80075de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e2:	bf00      	nop
 80075e4:	080075f9 	.word	0x080075f9
 80075e8:	08007607 	.word	0x08007607
 80075ec:	0800761d 	.word	0x0800761d
 80075f0:	0800763b 	.word	0x0800763b
 80075f4:	0800763b 	.word	0x0800763b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f8:	4b8e      	ldr	r3, [pc, #568]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	4a8d      	ldr	r2, [pc, #564]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007604:	e01a      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800760a:	3308      	adds	r3, #8
 800760c:	2100      	movs	r1, #0
 800760e:	4618      	mov	r0, r3
 8007610:	f001 fc3c 	bl	8008e8c <RCCEx_PLL2_Config>
 8007614:	4603      	mov	r3, r0
 8007616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800761a:	e00f      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800761c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007620:	3328      	adds	r3, #40	@ 0x28
 8007622:	2100      	movs	r1, #0
 8007624:	4618      	mov	r0, r3
 8007626:	f001 fce3 	bl	8008ff0 <RCCEx_PLL3_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007630:	e004      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007638:	e000      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800763a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800763c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007644:	4b7b      	ldr	r3, [pc, #492]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007648:	f023 0107 	bic.w	r1, r3, #7
 800764c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007652:	4a78      	ldr	r2, [pc, #480]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007654:	430b      	orrs	r3, r1
 8007656:	6513      	str	r3, [r2, #80]	@ 0x50
 8007658:	e003      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800765a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800765e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800766e:	f04f 0b00 	mov.w	fp, #0
 8007672:	ea5a 030b 	orrs.w	r3, sl, fp
 8007676:	d04c      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800767e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007682:	d030      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007688:	d829      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800768a:	2bc0      	cmp	r3, #192	@ 0xc0
 800768c:	d02d      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800768e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007690:	d825      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007692:	2b80      	cmp	r3, #128	@ 0x80
 8007694:	d018      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007696:	2b80      	cmp	r3, #128	@ 0x80
 8007698:	d821      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800769e:	2b40      	cmp	r3, #64	@ 0x40
 80076a0:	d007      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80076a2:	e01c      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a4:	4b63      	ldr	r3, [pc, #396]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a8:	4a62      	ldr	r2, [pc, #392]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076b0:	e01c      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b6:	3308      	adds	r3, #8
 80076b8:	2100      	movs	r1, #0
 80076ba:	4618      	mov	r0, r3
 80076bc:	f001 fbe6 	bl	8008e8c <RCCEx_PLL2_Config>
 80076c0:	4603      	mov	r3, r0
 80076c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076c6:	e011      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076cc:	3328      	adds	r3, #40	@ 0x28
 80076ce:	2100      	movs	r1, #0
 80076d0:	4618      	mov	r0, r3
 80076d2:	f001 fc8d 	bl	8008ff0 <RCCEx_PLL3_Config>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076dc:	e006      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076e4:	e002      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80076e6:	bf00      	nop
 80076e8:	e000      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80076ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80076f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80076fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007702:	4a4c      	ldr	r2, [pc, #304]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007704:	430b      	orrs	r3, r1
 8007706:	6513      	str	r3, [r2, #80]	@ 0x50
 8007708:	e003      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800770e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800771e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007722:	2300      	movs	r3, #0
 8007724:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007728:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800772c:	460b      	mov	r3, r1
 800772e:	4313      	orrs	r3, r2
 8007730:	d053      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007736:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800773a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800773e:	d035      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007740:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007744:	d82e      	bhi.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007746:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800774a:	d031      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800774c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007750:	d828      	bhi.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007752:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007756:	d01a      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007758:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800775c:	d822      	bhi.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007762:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007766:	d007      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007768:	e01c      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800776a:	4b32      	ldr	r3, [pc, #200]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800776c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776e:	4a31      	ldr	r2, [pc, #196]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007774:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007776:	e01c      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777c:	3308      	adds	r3, #8
 800777e:	2100      	movs	r1, #0
 8007780:	4618      	mov	r0, r3
 8007782:	f001 fb83 	bl	8008e8c <RCCEx_PLL2_Config>
 8007786:	4603      	mov	r3, r0
 8007788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800778c:	e011      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800778e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007792:	3328      	adds	r3, #40	@ 0x28
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f001 fc2a 	bl	8008ff0 <RCCEx_PLL3_Config>
 800779c:	4603      	mov	r3, r0
 800779e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077a2:	e006      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077aa:	e002      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80077ac:	bf00      	nop
 80077ae:	e000      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80077b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10b      	bne.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80077ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077be:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80077c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077cc:	430b      	orrs	r3, r1
 80077ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80077d0:	e003      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80077e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80077ea:	2300      	movs	r3, #0
 80077ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80077f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80077f4:	460b      	mov	r3, r1
 80077f6:	4313      	orrs	r3, r2
 80077f8:	d056      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007802:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007806:	d038      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007808:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800780c:	d831      	bhi.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800780e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007812:	d034      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007814:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007818:	d82b      	bhi.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800781a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800781e:	d01d      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007820:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007824:	d825      	bhi.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007826:	2b00      	cmp	r3, #0
 8007828:	d006      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800782a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800782e:	d00a      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007830:	e01f      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007832:	bf00      	nop
 8007834:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007838:	4ba2      	ldr	r3, [pc, #648]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800783a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783c:	4aa1      	ldr	r2, [pc, #644]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800783e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007844:	e01c      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784a:	3308      	adds	r3, #8
 800784c:	2100      	movs	r1, #0
 800784e:	4618      	mov	r0, r3
 8007850:	f001 fb1c 	bl	8008e8c <RCCEx_PLL2_Config>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800785a:	e011      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800785c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007860:	3328      	adds	r3, #40	@ 0x28
 8007862:	2100      	movs	r1, #0
 8007864:	4618      	mov	r0, r3
 8007866:	f001 fbc3 	bl	8008ff0 <RCCEx_PLL3_Config>
 800786a:	4603      	mov	r3, r0
 800786c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007870:	e006      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007878:	e002      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800787a:	bf00      	nop
 800787c:	e000      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800787e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10b      	bne.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007888:	4b8e      	ldr	r3, [pc, #568]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800788a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800788c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007894:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007898:	4a8a      	ldr	r2, [pc, #552]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800789a:	430b      	orrs	r3, r1
 800789c:	6593      	str	r3, [r2, #88]	@ 0x58
 800789e:	e003      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80078a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80078b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80078b8:	2300      	movs	r3, #0
 80078ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80078be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80078c2:	460b      	mov	r3, r1
 80078c4:	4313      	orrs	r3, r2
 80078c6:	d03a      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80078c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ce:	2b30      	cmp	r3, #48	@ 0x30
 80078d0:	d01f      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80078d2:	2b30      	cmp	r3, #48	@ 0x30
 80078d4:	d819      	bhi.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d00c      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80078da:	2b20      	cmp	r3, #32
 80078dc:	d815      	bhi.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d019      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80078e2:	2b10      	cmp	r3, #16
 80078e4:	d111      	bne.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e6:	4b77      	ldr	r3, [pc, #476]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ea:	4a76      	ldr	r2, [pc, #472]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80078f2:	e011      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f8:	3308      	adds	r3, #8
 80078fa:	2102      	movs	r1, #2
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 fac5 	bl	8008e8c <RCCEx_PLL2_Config>
 8007902:	4603      	mov	r3, r0
 8007904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007908:	e006      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007910:	e002      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007912:	bf00      	nop
 8007914:	e000      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10a      	bne.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007920:	4b68      	ldr	r3, [pc, #416]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007924:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800792e:	4a65      	ldr	r2, [pc, #404]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007930:	430b      	orrs	r3, r1
 8007932:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007934:	e003      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800793a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800794a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800794e:	2300      	movs	r3, #0
 8007950:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007954:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007958:	460b      	mov	r3, r1
 800795a:	4313      	orrs	r3, r2
 800795c:	d051      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007964:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007968:	d035      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800796a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800796e:	d82e      	bhi.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007970:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007974:	d031      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007976:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800797a:	d828      	bhi.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800797c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007980:	d01a      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007986:	d822      	bhi.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800798c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007990:	d007      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007992:	e01c      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007994:	4b4b      	ldr	r3, [pc, #300]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007998:	4a4a      	ldr	r2, [pc, #296]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800799a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800799e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079a0:	e01c      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a6:	3308      	adds	r3, #8
 80079a8:	2100      	movs	r1, #0
 80079aa:	4618      	mov	r0, r3
 80079ac:	f001 fa6e 	bl	8008e8c <RCCEx_PLL2_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079b6:	e011      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079bc:	3328      	adds	r3, #40	@ 0x28
 80079be:	2100      	movs	r1, #0
 80079c0:	4618      	mov	r0, r3
 80079c2:	f001 fb15 	bl	8008ff0 <RCCEx_PLL3_Config>
 80079c6:	4603      	mov	r3, r0
 80079c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079cc:	e006      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079d4:	e002      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80079d6:	bf00      	nop
 80079d8:	e000      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80079da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80079e4:	4b37      	ldr	r3, [pc, #220]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80079ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079f2:	4a34      	ldr	r2, [pc, #208]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079f4:	430b      	orrs	r3, r1
 80079f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80079f8:	e003      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a12:	2300      	movs	r3, #0
 8007a14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a18:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	d056      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a2c:	d033      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007a2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a32:	d82c      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a38:	d02f      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007a3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a3e:	d826      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a44:	d02b      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007a46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a4a:	d820      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a50:	d012      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007a52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a56:	d81a      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d022      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a60:	d115      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a66:	3308      	adds	r3, #8
 8007a68:	2101      	movs	r1, #1
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f001 fa0e 	bl	8008e8c <RCCEx_PLL2_Config>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a76:	e015      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7c:	3328      	adds	r3, #40	@ 0x28
 8007a7e:	2101      	movs	r1, #1
 8007a80:	4618      	mov	r0, r3
 8007a82:	f001 fab5 	bl	8008ff0 <RCCEx_PLL3_Config>
 8007a86:	4603      	mov	r3, r0
 8007a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a8c:	e00a      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a94:	e006      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a96:	bf00      	nop
 8007a98:	e004      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a9a:	bf00      	nop
 8007a9c:	e002      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a9e:	bf00      	nop
 8007aa0:	e000      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10d      	bne.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007aac:	4b05      	ldr	r3, [pc, #20]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007aba:	4a02      	ldr	r2, [pc, #8]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007abc:	430b      	orrs	r3, r1
 8007abe:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ac0:	e006      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007ac2:	bf00      	nop
 8007ac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007acc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007adc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ae6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4313      	orrs	r3, r2
 8007aee:	d055      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007afc:	d033      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b02:	d82c      	bhi.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b08:	d02f      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b0e:	d826      	bhi.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b14:	d02b      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007b16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b1a:	d820      	bhi.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b20:	d012      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b26:	d81a      	bhi.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d022      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007b2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b30:	d115      	bne.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b36:	3308      	adds	r3, #8
 8007b38:	2101      	movs	r1, #1
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f001 f9a6 	bl	8008e8c <RCCEx_PLL2_Config>
 8007b40:	4603      	mov	r3, r0
 8007b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b46:	e015      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b4c:	3328      	adds	r3, #40	@ 0x28
 8007b4e:	2101      	movs	r1, #1
 8007b50:	4618      	mov	r0, r3
 8007b52:	f001 fa4d 	bl	8008ff0 <RCCEx_PLL3_Config>
 8007b56:	4603      	mov	r3, r0
 8007b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b5c:	e00a      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b64:	e006      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b66:	bf00      	nop
 8007b68:	e004      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b6a:	bf00      	nop
 8007b6c:	e002      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b6e:	bf00      	nop
 8007b70:	e000      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10b      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b7c:	4ba3      	ldr	r3, [pc, #652]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b80:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b8c:	4a9f      	ldr	r2, [pc, #636]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b92:	e003      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bac:	2300      	movs	r3, #0
 8007bae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	d037      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bc6:	d00e      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bcc:	d816      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d018      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bd6:	d111      	bne.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bd8:	4b8c      	ldr	r3, [pc, #560]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bdc:	4a8b      	ldr	r2, [pc, #556]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007be4:	e00f      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bea:	3308      	adds	r3, #8
 8007bec:	2101      	movs	r1, #1
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f001 f94c 	bl	8008e8c <RCCEx_PLL2_Config>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007bfa:	e004      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c02:	e000      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c12:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c1c:	4a7b      	ldr	r2, [pc, #492]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c1e:	430b      	orrs	r3, r1
 8007c20:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c22:	e003      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007c38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	d039      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d81c      	bhi.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007c56:	a201      	add	r2, pc, #4	@ (adr r2, 8007c5c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c99 	.word	0x08007c99
 8007c60:	08007c6d 	.word	0x08007c6d
 8007c64:	08007c7b 	.word	0x08007c7b
 8007c68:	08007c99 	.word	0x08007c99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c6c:	4b67      	ldr	r3, [pc, #412]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c70:	4a66      	ldr	r2, [pc, #408]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c78:	e00f      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c7e:	3308      	adds	r3, #8
 8007c80:	2102      	movs	r1, #2
 8007c82:	4618      	mov	r0, r3
 8007c84:	f001 f902 	bl	8008e8c <RCCEx_PLL2_Config>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c8e:	e004      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c96:	e000      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ca2:	4b5a      	ldr	r3, [pc, #360]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ca6:	f023 0103 	bic.w	r1, r3, #3
 8007caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cb0:	4a56      	ldr	r2, [pc, #344]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cb2:	430b      	orrs	r3, r1
 8007cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007cb6:	e003      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cd6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	f000 809f 	beq.w	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a4a      	ldr	r2, [pc, #296]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cee:	f7fa f993 	bl	8002018 <HAL_GetTick>
 8007cf2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cf6:	e00b      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cf8:	f7fa f98e 	bl	8002018 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	2b64      	cmp	r3, #100	@ 0x64
 8007d06:	d903      	bls.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d0e:	e005      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d10:	4b3f      	ldr	r3, [pc, #252]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d0ed      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d179      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d24:	4b39      	ldr	r3, [pc, #228]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d30:	4053      	eors	r3, r2
 8007d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d015      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d3a:	4b34      	ldr	r3, [pc, #208]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d46:	4b31      	ldr	r3, [pc, #196]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d4a:	4a30      	ldr	r2, [pc, #192]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d50:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d52:	4b2e      	ldr	r3, [pc, #184]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d56:	4a2d      	ldr	r2, [pc, #180]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d5c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007d64:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d72:	d118      	bne.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d74:	f7fa f950 	bl	8002018 <HAL_GetTick>
 8007d78:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d7c:	e00d      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d7e:	f7fa f94b 	bl	8002018 <HAL_GetTick>
 8007d82:	4602      	mov	r2, r0
 8007d84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007d88:	1ad2      	subs	r2, r2, r3
 8007d8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d903      	bls.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007d98:	e005      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0eb      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d129      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dbe:	d10e      	bne.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007dc0:	4b12      	ldr	r3, [pc, #72]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dd0:	091a      	lsrs	r2, r3, #4
 8007dd2:	4b10      	ldr	r3, [pc, #64]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	6113      	str	r3, [r2, #16]
 8007ddc:	e005      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007dde:	4b0b      	ldr	r3, [pc, #44]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	4a0a      	ldr	r2, [pc, #40]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007de4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007de8:	6113      	str	r3, [r2, #16]
 8007dea:	4b08      	ldr	r3, [pc, #32]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dfa:	4a04      	ldr	r2, [pc, #16]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dfc:	430b      	orrs	r3, r1
 8007dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e00:	e00e      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007e0a:	e009      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007e0c:	58024400 	.word	0x58024400
 8007e10:	58024800 	.word	0x58024800
 8007e14:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f002 0301 	and.w	r3, r2, #1
 8007e2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e30:	2300      	movs	r3, #0
 8007e32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f000 8089 	beq.w	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e48:	2b28      	cmp	r3, #40	@ 0x28
 8007e4a:	d86b      	bhi.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e52:	bf00      	nop
 8007e54:	08007f2d 	.word	0x08007f2d
 8007e58:	08007f25 	.word	0x08007f25
 8007e5c:	08007f25 	.word	0x08007f25
 8007e60:	08007f25 	.word	0x08007f25
 8007e64:	08007f25 	.word	0x08007f25
 8007e68:	08007f25 	.word	0x08007f25
 8007e6c:	08007f25 	.word	0x08007f25
 8007e70:	08007f25 	.word	0x08007f25
 8007e74:	08007ef9 	.word	0x08007ef9
 8007e78:	08007f25 	.word	0x08007f25
 8007e7c:	08007f25 	.word	0x08007f25
 8007e80:	08007f25 	.word	0x08007f25
 8007e84:	08007f25 	.word	0x08007f25
 8007e88:	08007f25 	.word	0x08007f25
 8007e8c:	08007f25 	.word	0x08007f25
 8007e90:	08007f25 	.word	0x08007f25
 8007e94:	08007f0f 	.word	0x08007f0f
 8007e98:	08007f25 	.word	0x08007f25
 8007e9c:	08007f25 	.word	0x08007f25
 8007ea0:	08007f25 	.word	0x08007f25
 8007ea4:	08007f25 	.word	0x08007f25
 8007ea8:	08007f25 	.word	0x08007f25
 8007eac:	08007f25 	.word	0x08007f25
 8007eb0:	08007f25 	.word	0x08007f25
 8007eb4:	08007f2d 	.word	0x08007f2d
 8007eb8:	08007f25 	.word	0x08007f25
 8007ebc:	08007f25 	.word	0x08007f25
 8007ec0:	08007f25 	.word	0x08007f25
 8007ec4:	08007f25 	.word	0x08007f25
 8007ec8:	08007f25 	.word	0x08007f25
 8007ecc:	08007f25 	.word	0x08007f25
 8007ed0:	08007f25 	.word	0x08007f25
 8007ed4:	08007f2d 	.word	0x08007f2d
 8007ed8:	08007f25 	.word	0x08007f25
 8007edc:	08007f25 	.word	0x08007f25
 8007ee0:	08007f25 	.word	0x08007f25
 8007ee4:	08007f25 	.word	0x08007f25
 8007ee8:	08007f25 	.word	0x08007f25
 8007eec:	08007f25 	.word	0x08007f25
 8007ef0:	08007f25 	.word	0x08007f25
 8007ef4:	08007f2d 	.word	0x08007f2d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efc:	3308      	adds	r3, #8
 8007efe:	2101      	movs	r1, #1
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 ffc3 	bl	8008e8c <RCCEx_PLL2_Config>
 8007f06:	4603      	mov	r3, r0
 8007f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f0c:	e00f      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f12:	3328      	adds	r3, #40	@ 0x28
 8007f14:	2101      	movs	r1, #1
 8007f16:	4618      	mov	r0, r3
 8007f18:	f001 f86a 	bl	8008ff0 <RCCEx_PLL3_Config>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f22:	e004      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f2a:	e000      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10a      	bne.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f36:	4bbf      	ldr	r3, [pc, #764]	@ (8008234 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f44:	4abb      	ldr	r2, [pc, #748]	@ (8008234 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f46:	430b      	orrs	r3, r1
 8007f48:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f4a:	e003      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f002 0302 	and.w	r3, r2, #2
 8007f60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f64:	2300      	movs	r3, #0
 8007f66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4313      	orrs	r3, r2
 8007f72:	d041      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f7a:	2b05      	cmp	r3, #5
 8007f7c:	d824      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f84 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f84:	08007fd1 	.word	0x08007fd1
 8007f88:	08007f9d 	.word	0x08007f9d
 8007f8c:	08007fb3 	.word	0x08007fb3
 8007f90:	08007fd1 	.word	0x08007fd1
 8007f94:	08007fd1 	.word	0x08007fd1
 8007f98:	08007fd1 	.word	0x08007fd1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 ff71 	bl	8008e8c <RCCEx_PLL2_Config>
 8007faa:	4603      	mov	r3, r0
 8007fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fb0:	e00f      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb6:	3328      	adds	r3, #40	@ 0x28
 8007fb8:	2101      	movs	r1, #1
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f001 f818 	bl	8008ff0 <RCCEx_PLL3_Config>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fc6:	e004      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fce:	e000      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007fda:	4b96      	ldr	r3, [pc, #600]	@ (8008234 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fde:	f023 0107 	bic.w	r1, r3, #7
 8007fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fe8:	4a92      	ldr	r2, [pc, #584]	@ (8008234 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007fea:	430b      	orrs	r3, r1
 8007fec:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fee:	e003      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f002 0304 	and.w	r3, r2, #4
 8008004:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008008:	2300      	movs	r3, #0
 800800a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800800e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008012:	460b      	mov	r3, r1
 8008014:	4313      	orrs	r3, r2
 8008016:	d044      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008020:	2b05      	cmp	r3, #5
 8008022:	d825      	bhi.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008024:	a201      	add	r2, pc, #4	@ (adr r2, 800802c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802a:	bf00      	nop
 800802c:	08008079 	.word	0x08008079
 8008030:	08008045 	.word	0x08008045
 8008034:	0800805b 	.word	0x0800805b
 8008038:	08008079 	.word	0x08008079
 800803c:	08008079 	.word	0x08008079
 8008040:	08008079 	.word	0x08008079
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008048:	3308      	adds	r3, #8
 800804a:	2101      	movs	r1, #1
 800804c:	4618      	mov	r0, r3
 800804e:	f000 ff1d 	bl	8008e8c <RCCEx_PLL2_Config>
 8008052:	4603      	mov	r3, r0
 8008054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008058:	e00f      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805e:	3328      	adds	r3, #40	@ 0x28
 8008060:	2101      	movs	r1, #1
 8008062:	4618      	mov	r0, r3
 8008064:	f000 ffc4 	bl	8008ff0 <RCCEx_PLL3_Config>
 8008068:	4603      	mov	r3, r0
 800806a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800806e:	e004      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008076:	e000      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800807a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10b      	bne.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008082:	4b6c      	ldr	r3, [pc, #432]	@ (8008234 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008086:	f023 0107 	bic.w	r1, r3, #7
 800808a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008092:	4a68      	ldr	r2, [pc, #416]	@ (8008234 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008094:	430b      	orrs	r3, r1
 8008096:	6593      	str	r3, [r2, #88]	@ 0x58
 8008098:	e003      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800809e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f002 0320 	and.w	r3, r2, #32
 80080ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080b2:	2300      	movs	r3, #0
 80080b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080bc:	460b      	mov	r3, r1
 80080be:	4313      	orrs	r3, r2
 80080c0:	d055      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80080c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080ce:	d033      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80080d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080d4:	d82c      	bhi.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080da:	d02f      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80080dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080e0:	d826      	bhi.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080e6:	d02b      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80080e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080ec:	d820      	bhi.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080f2:	d012      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80080f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080f8:	d81a      	bhi.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d022      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80080fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008102:	d115      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008108:	3308      	adds	r3, #8
 800810a:	2100      	movs	r1, #0
 800810c:	4618      	mov	r0, r3
 800810e:	f000 febd 	bl	8008e8c <RCCEx_PLL2_Config>
 8008112:	4603      	mov	r3, r0
 8008114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008118:	e015      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800811a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811e:	3328      	adds	r3, #40	@ 0x28
 8008120:	2102      	movs	r1, #2
 8008122:	4618      	mov	r0, r3
 8008124:	f000 ff64 	bl	8008ff0 <RCCEx_PLL3_Config>
 8008128:	4603      	mov	r3, r0
 800812a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800812e:	e00a      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008136:	e006      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008138:	bf00      	nop
 800813a:	e004      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800813c:	bf00      	nop
 800813e:	e002      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008140:	bf00      	nop
 8008142:	e000      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10b      	bne.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800814e:	4b39      	ldr	r3, [pc, #228]	@ (8008234 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008152:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800815e:	4a35      	ldr	r2, [pc, #212]	@ (8008234 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008160:	430b      	orrs	r3, r1
 8008162:	6553      	str	r3, [r2, #84]	@ 0x54
 8008164:	e003      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800816a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800816e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800817a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800817e:	2300      	movs	r3, #0
 8008180:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008184:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008188:	460b      	mov	r3, r1
 800818a:	4313      	orrs	r3, r2
 800818c:	d058      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800818e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008192:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008196:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800819a:	d033      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800819c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081a0:	d82c      	bhi.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081a6:	d02f      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80081a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ac:	d826      	bhi.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081b2:	d02b      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80081b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081b8:	d820      	bhi.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081be:	d012      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80081c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081c4:	d81a      	bhi.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d022      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80081ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ce:	d115      	bne.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d4:	3308      	adds	r3, #8
 80081d6:	2100      	movs	r1, #0
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 fe57 	bl	8008e8c <RCCEx_PLL2_Config>
 80081de:	4603      	mov	r3, r0
 80081e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80081e4:	e015      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ea:	3328      	adds	r3, #40	@ 0x28
 80081ec:	2102      	movs	r1, #2
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fefe 	bl	8008ff0 <RCCEx_PLL3_Config>
 80081f4:	4603      	mov	r3, r0
 80081f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80081fa:	e00a      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008202:	e006      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008204:	bf00      	nop
 8008206:	e004      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008208:	bf00      	nop
 800820a:	e002      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800820c:	bf00      	nop
 800820e:	e000      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10e      	bne.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800821a:	4b06      	ldr	r3, [pc, #24]	@ (8008234 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800821c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800821e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800822a:	4a02      	ldr	r2, [pc, #8]	@ (8008234 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800822c:	430b      	orrs	r3, r1
 800822e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008230:	e006      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008232:	bf00      	nop
 8008234:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008238:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800823c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800824c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008250:	2300      	movs	r3, #0
 8008252:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008256:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800825a:	460b      	mov	r3, r1
 800825c:	4313      	orrs	r3, r2
 800825e:	d055      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008264:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008268:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800826c:	d033      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800826e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008272:	d82c      	bhi.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008278:	d02f      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800827a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800827e:	d826      	bhi.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008280:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008284:	d02b      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008286:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800828a:	d820      	bhi.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800828c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008290:	d012      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008292:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008296:	d81a      	bhi.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008298:	2b00      	cmp	r3, #0
 800829a:	d022      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800829c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082a0:	d115      	bne.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a6:	3308      	adds	r3, #8
 80082a8:	2100      	movs	r1, #0
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 fdee 	bl	8008e8c <RCCEx_PLL2_Config>
 80082b0:	4603      	mov	r3, r0
 80082b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082b6:	e015      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082bc:	3328      	adds	r3, #40	@ 0x28
 80082be:	2102      	movs	r1, #2
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 fe95 	bl	8008ff0 <RCCEx_PLL3_Config>
 80082c6:	4603      	mov	r3, r0
 80082c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082cc:	e00a      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082d4:	e006      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082d6:	bf00      	nop
 80082d8:	e004      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082da:	bf00      	nop
 80082dc:	e002      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082de:	bf00      	nop
 80082e0:	e000      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10b      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80082ec:	4ba1      	ldr	r3, [pc, #644]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80082f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80082fc:	4a9d      	ldr	r2, [pc, #628]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082fe:	430b      	orrs	r3, r1
 8008300:	6593      	str	r3, [r2, #88]	@ 0x58
 8008302:	e003      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800830c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	f002 0308 	and.w	r3, r2, #8
 8008318:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800831c:	2300      	movs	r3, #0
 800831e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008322:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008326:	460b      	mov	r3, r1
 8008328:	4313      	orrs	r3, r2
 800832a:	d01e      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800832c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008338:	d10c      	bne.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800833a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800833e:	3328      	adds	r3, #40	@ 0x28
 8008340:	2102      	movs	r1, #2
 8008342:	4618      	mov	r0, r3
 8008344:	f000 fe54 	bl	8008ff0 <RCCEx_PLL3_Config>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008354:	4b87      	ldr	r3, [pc, #540]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008358:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800835c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008364:	4a83      	ldr	r2, [pc, #524]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008366:	430b      	orrs	r3, r1
 8008368:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008372:	f002 0310 	and.w	r3, r2, #16
 8008376:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800837a:	2300      	movs	r3, #0
 800837c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008380:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008384:	460b      	mov	r3, r1
 8008386:	4313      	orrs	r3, r2
 8008388:	d01e      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800838a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008396:	d10c      	bne.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800839c:	3328      	adds	r3, #40	@ 0x28
 800839e:	2102      	movs	r1, #2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 fe25 	bl	8008ff0 <RCCEx_PLL3_Config>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d002      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083b2:	4b70      	ldr	r3, [pc, #448]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083c2:	4a6c      	ldr	r2, [pc, #432]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083c4:	430b      	orrs	r3, r1
 80083c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80083d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083d8:	2300      	movs	r3, #0
 80083da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80083e2:	460b      	mov	r3, r1
 80083e4:	4313      	orrs	r3, r2
 80083e6:	d03e      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80083e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80083f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083f4:	d022      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80083f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083fa:	d81b      	bhi.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d003      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008404:	d00b      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008406:	e015      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800840c:	3308      	adds	r3, #8
 800840e:	2100      	movs	r1, #0
 8008410:	4618      	mov	r0, r3
 8008412:	f000 fd3b 	bl	8008e8c <RCCEx_PLL2_Config>
 8008416:	4603      	mov	r3, r0
 8008418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800841c:	e00f      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800841e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008422:	3328      	adds	r3, #40	@ 0x28
 8008424:	2102      	movs	r1, #2
 8008426:	4618      	mov	r0, r3
 8008428:	f000 fde2 	bl	8008ff0 <RCCEx_PLL3_Config>
 800842c:	4603      	mov	r3, r0
 800842e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008432:	e004      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800843a:	e000      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800843c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800843e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10b      	bne.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008446:	4b4b      	ldr	r3, [pc, #300]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800844a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800844e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008452:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008456:	4a47      	ldr	r2, [pc, #284]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008458:	430b      	orrs	r3, r1
 800845a:	6593      	str	r3, [r2, #88]	@ 0x58
 800845c:	e003      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800845e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008462:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008472:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008474:	2300      	movs	r3, #0
 8008476:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008478:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800847c:	460b      	mov	r3, r1
 800847e:	4313      	orrs	r3, r2
 8008480:	d03b      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800848a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800848e:	d01f      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008490:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008494:	d818      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800849a:	d003      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800849c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084a0:	d007      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80084a2:	e011      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084a4:	4b33      	ldr	r3, [pc, #204]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a8:	4a32      	ldr	r2, [pc, #200]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80084b0:	e00f      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b6:	3328      	adds	r3, #40	@ 0x28
 80084b8:	2101      	movs	r1, #1
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fd98 	bl	8008ff0 <RCCEx_PLL3_Config>
 80084c0:	4603      	mov	r3, r0
 80084c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80084c6:	e004      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084ce:	e000      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80084d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10b      	bne.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084da:	4b26      	ldr	r3, [pc, #152]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80084e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084ea:	4a22      	ldr	r2, [pc, #136]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084ec:	430b      	orrs	r3, r1
 80084ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80084f0:	e003      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80084fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008506:	673b      	str	r3, [r7, #112]	@ 0x70
 8008508:	2300      	movs	r3, #0
 800850a:	677b      	str	r3, [r7, #116]	@ 0x74
 800850c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008510:	460b      	mov	r3, r1
 8008512:	4313      	orrs	r3, r2
 8008514:	d034      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800851c:	2b00      	cmp	r3, #0
 800851e:	d003      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008524:	d007      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008526:	e011      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008528:	4b12      	ldr	r3, [pc, #72]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800852a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800852c:	4a11      	ldr	r2, [pc, #68]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800852e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008532:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008534:	e00e      	b.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800853a:	3308      	adds	r3, #8
 800853c:	2102      	movs	r1, #2
 800853e:	4618      	mov	r0, r3
 8008540:	f000 fca4 	bl	8008e8c <RCCEx_PLL2_Config>
 8008544:	4603      	mov	r3, r0
 8008546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800854a:	e003      	b.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10d      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800855c:	4b05      	ldr	r3, [pc, #20]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800855e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008560:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800856a:	4a02      	ldr	r2, [pc, #8]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800856c:	430b      	orrs	r3, r1
 800856e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008570:	e006      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008572:	bf00      	nop
 8008574:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800857c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800858c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800858e:	2300      	movs	r3, #0
 8008590:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008592:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008596:	460b      	mov	r3, r1
 8008598:	4313      	orrs	r3, r2
 800859a:	d00c      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800859c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a0:	3328      	adds	r3, #40	@ 0x28
 80085a2:	2102      	movs	r1, #2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 fd23 	bl	8008ff0 <RCCEx_PLL3_Config>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80085b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80085c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80085c4:	2300      	movs	r3, #0
 80085c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80085c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80085cc:	460b      	mov	r3, r1
 80085ce:	4313      	orrs	r3, r2
 80085d0:	d038      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80085d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085de:	d018      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80085e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085e4:	d811      	bhi.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80085e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085ea:	d014      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80085ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085f0:	d80b      	bhi.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d011      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80085f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085fa:	d106      	bne.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085fc:	4bc3      	ldr	r3, [pc, #780]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008600:	4ac2      	ldr	r2, [pc, #776]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008606:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008608:	e008      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008610:	e004      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008612:	bf00      	nop
 8008614:	e002      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008616:	bf00      	nop
 8008618:	e000      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800861a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800861c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10b      	bne.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008624:	4bb9      	ldr	r3, [pc, #740]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008628:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800862c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008634:	4ab5      	ldr	r2, [pc, #724]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008636:	430b      	orrs	r3, r1
 8008638:	6553      	str	r3, [r2, #84]	@ 0x54
 800863a:	e003      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008640:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008650:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008652:	2300      	movs	r3, #0
 8008654:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008656:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800865a:	460b      	mov	r3, r1
 800865c:	4313      	orrs	r3, r2
 800865e:	d009      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008660:	4baa      	ldr	r3, [pc, #680]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008664:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800866e:	4aa7      	ldr	r2, [pc, #668]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008670:	430b      	orrs	r3, r1
 8008672:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008680:	653b      	str	r3, [r7, #80]	@ 0x50
 8008682:	2300      	movs	r3, #0
 8008684:	657b      	str	r3, [r7, #84]	@ 0x54
 8008686:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800868a:	460b      	mov	r3, r1
 800868c:	4313      	orrs	r3, r2
 800868e:	d00a      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008690:	4b9e      	ldr	r3, [pc, #632]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80086a0:	4a9a      	ldr	r2, [pc, #616]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086a2:	430b      	orrs	r3, r1
 80086a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80086b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086b4:	2300      	movs	r3, #0
 80086b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80086bc:	460b      	mov	r3, r1
 80086be:	4313      	orrs	r3, r2
 80086c0:	d009      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086c2:	4b92      	ldr	r3, [pc, #584]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086c6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80086ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086d0:	4a8e      	ldr	r2, [pc, #568]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086d2:	430b      	orrs	r3, r1
 80086d4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80086d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80086e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80086e4:	2300      	movs	r3, #0
 80086e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80086e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80086ec:	460b      	mov	r3, r1
 80086ee:	4313      	orrs	r3, r2
 80086f0:	d00e      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086f2:	4b86      	ldr	r3, [pc, #536]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	4a85      	ldr	r2, [pc, #532]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086fc:	6113      	str	r3, [r2, #16]
 80086fe:	4b83      	ldr	r3, [pc, #524]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008700:	6919      	ldr	r1, [r3, #16]
 8008702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008706:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800870a:	4a80      	ldr	r2, [pc, #512]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800870c:	430b      	orrs	r3, r1
 800870e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800871c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800871e:	2300      	movs	r3, #0
 8008720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008722:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008726:	460b      	mov	r3, r1
 8008728:	4313      	orrs	r3, r2
 800872a:	d009      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800872c:	4b77      	ldr	r3, [pc, #476]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800872e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008730:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800873a:	4a74      	ldr	r2, [pc, #464]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800873c:	430b      	orrs	r3, r1
 800873e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800874c:	633b      	str	r3, [r7, #48]	@ 0x30
 800874e:	2300      	movs	r3, #0
 8008750:	637b      	str	r3, [r7, #52]	@ 0x34
 8008752:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008756:	460b      	mov	r3, r1
 8008758:	4313      	orrs	r3, r2
 800875a:	d00a      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800875c:	4b6b      	ldr	r3, [pc, #428]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800875e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008760:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800876c:	4a67      	ldr	r2, [pc, #412]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800876e:	430b      	orrs	r3, r1
 8008770:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877a:	2100      	movs	r1, #0
 800877c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008784:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008788:	460b      	mov	r3, r1
 800878a:	4313      	orrs	r3, r2
 800878c:	d011      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800878e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008792:	3308      	adds	r3, #8
 8008794:	2100      	movs	r1, #0
 8008796:	4618      	mov	r0, r3
 8008798:	f000 fb78 	bl	8008e8c <RCCEx_PLL2_Config>
 800879c:	4603      	mov	r3, r0
 800879e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80087b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ba:	2100      	movs	r1, #0
 80087bc:	6239      	str	r1, [r7, #32]
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80087c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80087c8:	460b      	mov	r3, r1
 80087ca:	4313      	orrs	r3, r2
 80087cc:	d011      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d2:	3308      	adds	r3, #8
 80087d4:	2101      	movs	r1, #1
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 fb58 	bl	8008e8c <RCCEx_PLL2_Config>
 80087dc:	4603      	mov	r3, r0
 80087de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80087f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	2100      	movs	r1, #0
 80087fc:	61b9      	str	r1, [r7, #24]
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	61fb      	str	r3, [r7, #28]
 8008804:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008808:	460b      	mov	r3, r1
 800880a:	4313      	orrs	r3, r2
 800880c:	d011      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800880e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008812:	3308      	adds	r3, #8
 8008814:	2102      	movs	r1, #2
 8008816:	4618      	mov	r0, r3
 8008818:	f000 fb38 	bl	8008e8c <RCCEx_PLL2_Config>
 800881c:	4603      	mov	r3, r0
 800881e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800882e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	2100      	movs	r1, #0
 800883c:	6139      	str	r1, [r7, #16]
 800883e:	f003 0308 	and.w	r3, r3, #8
 8008842:	617b      	str	r3, [r7, #20]
 8008844:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008848:	460b      	mov	r3, r1
 800884a:	4313      	orrs	r3, r2
 800884c:	d011      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800884e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008852:	3328      	adds	r3, #40	@ 0x28
 8008854:	2100      	movs	r1, #0
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fbca 	bl	8008ff0 <RCCEx_PLL3_Config>
 800885c:	4603      	mov	r3, r0
 800885e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800886e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	2100      	movs	r1, #0
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	f003 0310 	and.w	r3, r3, #16
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008888:	460b      	mov	r3, r1
 800888a:	4313      	orrs	r3, r2
 800888c:	d011      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800888e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008892:	3328      	adds	r3, #40	@ 0x28
 8008894:	2101      	movs	r1, #1
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fbaa 	bl	8008ff0 <RCCEx_PLL3_Config>
 800889c:	4603      	mov	r3, r0
 800889e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d003      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	2100      	movs	r1, #0
 80088bc:	6039      	str	r1, [r7, #0]
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80088c8:	460b      	mov	r3, r1
 80088ca:	4313      	orrs	r3, r2
 80088cc:	d011      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d2:	3328      	adds	r3, #40	@ 0x28
 80088d4:	2102      	movs	r1, #2
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fb8a 	bl	8008ff0 <RCCEx_PLL3_Config>
 80088dc:	4603      	mov	r3, r0
 80088de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80088f2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	e000      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
}
 8008900:	4618      	mov	r0, r3
 8008902:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008906:	46bd      	mov	sp, r7
 8008908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800890c:	58024400 	.word	0x58024400

08008910 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008914:	f7fe fd54 	bl	80073c0 <HAL_RCC_GetHCLKFreq>
 8008918:	4602      	mov	r2, r0
 800891a:	4b06      	ldr	r3, [pc, #24]	@ (8008934 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	091b      	lsrs	r3, r3, #4
 8008920:	f003 0307 	and.w	r3, r3, #7
 8008924:	4904      	ldr	r1, [pc, #16]	@ (8008938 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008926:	5ccb      	ldrb	r3, [r1, r3]
 8008928:	f003 031f 	and.w	r3, r3, #31
 800892c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008930:	4618      	mov	r0, r3
 8008932:	bd80      	pop	{r7, pc}
 8008934:	58024400 	.word	0x58024400
 8008938:	08011358 	.word	0x08011358

0800893c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800893c:	b480      	push	{r7}
 800893e:	b089      	sub	sp, #36	@ 0x24
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008944:	4ba1      	ldr	r3, [pc, #644]	@ (8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008948:	f003 0303 	and.w	r3, r3, #3
 800894c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800894e:	4b9f      	ldr	r3, [pc, #636]	@ (8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008952:	0b1b      	lsrs	r3, r3, #12
 8008954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008958:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800895a:	4b9c      	ldr	r3, [pc, #624]	@ (8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800895c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895e:	091b      	lsrs	r3, r3, #4
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008966:	4b99      	ldr	r3, [pc, #612]	@ (8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800896a:	08db      	lsrs	r3, r3, #3
 800896c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	fb02 f303 	mul.w	r3, r2, r3
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 8111 	beq.w	8008bac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	2b02      	cmp	r3, #2
 800898e:	f000 8083 	beq.w	8008a98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	2b02      	cmp	r3, #2
 8008996:	f200 80a1 	bhi.w	8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d003      	beq.n	80089a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d056      	beq.n	8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80089a6:	e099      	b.n	8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089a8:	4b88      	ldr	r3, [pc, #544]	@ (8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0320 	and.w	r3, r3, #32
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d02d      	beq.n	8008a10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089b4:	4b85      	ldr	r3, [pc, #532]	@ (8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	08db      	lsrs	r3, r3, #3
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	4a84      	ldr	r2, [pc, #528]	@ (8008bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089c0:	fa22 f303 	lsr.w	r3, r2, r3
 80089c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	ee07 3a90 	vmov	s15, r3
 80089cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089de:	4b7b      	ldr	r3, [pc, #492]	@ (8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80089f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a0e:	e087      	b.n	8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a22:	4b6a      	ldr	r3, [pc, #424]	@ (8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a2a:	ee07 3a90 	vmov	s15, r3
 8008a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a52:	e065      	b.n	8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a66:	4b59      	ldr	r3, [pc, #356]	@ (8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a6e:	ee07 3a90 	vmov	s15, r3
 8008a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a96:	e043      	b.n	8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aaa:	4b48      	ldr	r3, [pc, #288]	@ (8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008abe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ada:	e021      	b.n	8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aee:	4b37      	ldr	r3, [pc, #220]	@ (8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008b20:	4b2a      	ldr	r3, [pc, #168]	@ (8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b24:	0a5b      	lsrs	r3, r3, #9
 8008b26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b46:	ee17 2a90 	vmov	r2, s15
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b52:	0c1b      	lsrs	r3, r3, #16
 8008b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b58:	ee07 3a90 	vmov	s15, r3
 8008b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b74:	ee17 2a90 	vmov	r2, s15
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b7c:	4b13      	ldr	r3, [pc, #76]	@ (8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b80:	0e1b      	lsrs	r3, r3, #24
 8008b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ba2:	ee17 2a90 	vmov	r2, s15
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008baa:	e008      	b.n	8008bbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	609a      	str	r2, [r3, #8]
}
 8008bbe:	bf00      	nop
 8008bc0:	3724      	adds	r7, #36	@ 0x24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	58024400 	.word	0x58024400
 8008bd0:	03d09000 	.word	0x03d09000
 8008bd4:	46000000 	.word	0x46000000
 8008bd8:	4c742400 	.word	0x4c742400
 8008bdc:	4a742400 	.word	0x4a742400
 8008be0:	4af42400 	.word	0x4af42400

08008be4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b089      	sub	sp, #36	@ 0x24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bec:	4ba1      	ldr	r3, [pc, #644]	@ (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf0:	f003 0303 	and.w	r3, r3, #3
 8008bf4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008bf6:	4b9f      	ldr	r3, [pc, #636]	@ (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfa:	0d1b      	lsrs	r3, r3, #20
 8008bfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c02:	4b9c      	ldr	r3, [pc, #624]	@ (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c06:	0a1b      	lsrs	r3, r3, #8
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008c0e:	4b99      	ldr	r3, [pc, #612]	@ (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c12:	08db      	lsrs	r3, r3, #3
 8008c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	fb02 f303 	mul.w	r3, r2, r3
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 8111 	beq.w	8008e54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	f000 8083 	beq.w	8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	f200 80a1 	bhi.w	8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d056      	beq.n	8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c4e:	e099      	b.n	8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c50:	4b88      	ldr	r3, [pc, #544]	@ (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0320 	and.w	r3, r3, #32
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d02d      	beq.n	8008cb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c5c:	4b85      	ldr	r3, [pc, #532]	@ (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	08db      	lsrs	r3, r3, #3
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	4a84      	ldr	r2, [pc, #528]	@ (8008e78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c68:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	ee07 3a90 	vmov	s15, r3
 8008c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c86:	4b7b      	ldr	r3, [pc, #492]	@ (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cb6:	e087      	b.n	8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	ee07 3a90 	vmov	s15, r3
 8008cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cca:	4b6a      	ldr	r3, [pc, #424]	@ (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cde:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cfa:	e065      	b.n	8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d0e:	4b59      	ldr	r3, [pc, #356]	@ (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d3e:	e043      	b.n	8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d52:	4b48      	ldr	r3, [pc, #288]	@ (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d82:	e021      	b.n	8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	ee07 3a90 	vmov	s15, r3
 8008d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d96:	4b37      	ldr	r3, [pc, #220]	@ (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008daa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dcc:	0a5b      	lsrs	r3, r3, #9
 8008dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dee:	ee17 2a90 	vmov	r2, s15
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008df6:	4b1f      	ldr	r3, [pc, #124]	@ (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfa:	0c1b      	lsrs	r3, r3, #16
 8008dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e00:	ee07 3a90 	vmov	s15, r3
 8008e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e1c:	ee17 2a90 	vmov	r2, s15
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008e24:	4b13      	ldr	r3, [pc, #76]	@ (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e28:	0e1b      	lsrs	r3, r3, #24
 8008e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e4a:	ee17 2a90 	vmov	r2, s15
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e52:	e008      	b.n	8008e66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	609a      	str	r2, [r3, #8]
}
 8008e66:	bf00      	nop
 8008e68:	3724      	adds	r7, #36	@ 0x24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	58024400 	.word	0x58024400
 8008e78:	03d09000 	.word	0x03d09000
 8008e7c:	46000000 	.word	0x46000000
 8008e80:	4c742400 	.word	0x4c742400
 8008e84:	4a742400 	.word	0x4a742400
 8008e88:	4af42400 	.word	0x4af42400

08008e8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e9a:	4b53      	ldr	r3, [pc, #332]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9e:	f003 0303 	and.w	r3, r3, #3
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d101      	bne.n	8008eaa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e099      	b.n	8008fde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a4e      	ldr	r2, [pc, #312]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008eb0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eb6:	f7f9 f8af 	bl	8002018 <HAL_GetTick>
 8008eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ebc:	e008      	b.n	8008ed0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ebe:	f7f9 f8ab 	bl	8002018 <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d901      	bls.n	8008ed0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e086      	b.n	8008fde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ed0:	4b45      	ldr	r3, [pc, #276]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1f0      	bne.n	8008ebe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008edc:	4b42      	ldr	r3, [pc, #264]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	031b      	lsls	r3, r3, #12
 8008eea:	493f      	ldr	r1, [pc, #252]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	3b01      	subs	r3, #1
 8008f00:	025b      	lsls	r3, r3, #9
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	431a      	orrs	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	041b      	lsls	r3, r3, #16
 8008f0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f12:	431a      	orrs	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	061b      	lsls	r3, r3, #24
 8008f1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f20:	4931      	ldr	r1, [pc, #196]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f22:	4313      	orrs	r3, r2
 8008f24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f26:	4b30      	ldr	r3, [pc, #192]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	492d      	ldr	r1, [pc, #180]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f38:	4b2b      	ldr	r3, [pc, #172]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3c:	f023 0220 	bic.w	r2, r3, #32
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	4928      	ldr	r1, [pc, #160]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f4a:	4b27      	ldr	r3, [pc, #156]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4e:	4a26      	ldr	r2, [pc, #152]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f50:	f023 0310 	bic.w	r3, r3, #16
 8008f54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f56:	4b24      	ldr	r3, [pc, #144]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f5a:	4b24      	ldr	r3, [pc, #144]	@ (8008fec <RCCEx_PLL2_Config+0x160>)
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	69d2      	ldr	r2, [r2, #28]
 8008f62:	00d2      	lsls	r2, r2, #3
 8008f64:	4920      	ldr	r1, [pc, #128]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f70:	f043 0310 	orr.w	r3, r3, #16
 8008f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d106      	bne.n	8008f8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f80:	4a19      	ldr	r2, [pc, #100]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f88:	e00f      	b.n	8008faa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d106      	bne.n	8008f9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f90:	4b15      	ldr	r3, [pc, #84]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f94:	4a14      	ldr	r2, [pc, #80]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008f96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f9c:	e005      	b.n	8008faa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f9e:	4b12      	ldr	r3, [pc, #72]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa2:	4a11      	ldr	r2, [pc, #68]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008fa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008faa:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a0e      	ldr	r2, [pc, #56]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008fb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fb6:	f7f9 f82f 	bl	8002018 <HAL_GetTick>
 8008fba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fbc:	e008      	b.n	8008fd0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fbe:	f7f9 f82b 	bl	8002018 <HAL_GetTick>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d901      	bls.n	8008fd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e006      	b.n	8008fde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fd0:	4b05      	ldr	r3, [pc, #20]	@ (8008fe8 <RCCEx_PLL2_Config+0x15c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d0f0      	beq.n	8008fbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	58024400 	.word	0x58024400
 8008fec:	ffff0007 	.word	0xffff0007

08008ff0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ffe:	4b53      	ldr	r3, [pc, #332]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 8009000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009002:	f003 0303 	and.w	r3, r3, #3
 8009006:	2b03      	cmp	r3, #3
 8009008:	d101      	bne.n	800900e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e099      	b.n	8009142 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800900e:	4b4f      	ldr	r3, [pc, #316]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a4e      	ldr	r2, [pc, #312]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 8009014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800901a:	f7f8 fffd 	bl	8002018 <HAL_GetTick>
 800901e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009020:	e008      	b.n	8009034 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009022:	f7f8 fff9 	bl	8002018 <HAL_GetTick>
 8009026:	4602      	mov	r2, r0
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	2b02      	cmp	r3, #2
 800902e:	d901      	bls.n	8009034 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e086      	b.n	8009142 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009034:	4b45      	ldr	r3, [pc, #276]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1f0      	bne.n	8009022 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009040:	4b42      	ldr	r3, [pc, #264]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 8009042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009044:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	051b      	lsls	r3, r3, #20
 800904e:	493f      	ldr	r1, [pc, #252]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 8009050:	4313      	orrs	r3, r2
 8009052:	628b      	str	r3, [r1, #40]	@ 0x28
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	3b01      	subs	r3, #1
 800905a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	3b01      	subs	r3, #1
 8009064:	025b      	lsls	r3, r3, #9
 8009066:	b29b      	uxth	r3, r3
 8009068:	431a      	orrs	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	3b01      	subs	r3, #1
 8009070:	041b      	lsls	r3, r3, #16
 8009072:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009076:	431a      	orrs	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	3b01      	subs	r3, #1
 800907e:	061b      	lsls	r3, r3, #24
 8009080:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009084:	4931      	ldr	r1, [pc, #196]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 8009086:	4313      	orrs	r3, r2
 8009088:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800908a:	4b30      	ldr	r3, [pc, #192]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 800908c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	492d      	ldr	r1, [pc, #180]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 8009098:	4313      	orrs	r3, r2
 800909a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800909c:	4b2b      	ldr	r3, [pc, #172]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 800909e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	4928      	ldr	r1, [pc, #160]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80090ae:	4b27      	ldr	r3, [pc, #156]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 80090b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b2:	4a26      	ldr	r2, [pc, #152]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 80090b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80090ba:	4b24      	ldr	r3, [pc, #144]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 80090bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090be:	4b24      	ldr	r3, [pc, #144]	@ (8009150 <RCCEx_PLL3_Config+0x160>)
 80090c0:	4013      	ands	r3, r2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	69d2      	ldr	r2, [r2, #28]
 80090c6:	00d2      	lsls	r2, r2, #3
 80090c8:	4920      	ldr	r1, [pc, #128]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 80090ca:	4313      	orrs	r3, r2
 80090cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80090ce:	4b1f      	ldr	r3, [pc, #124]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 80090d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d2:	4a1e      	ldr	r2, [pc, #120]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 80090d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d106      	bne.n	80090ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80090e0:	4b1a      	ldr	r3, [pc, #104]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 80090e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e4:	4a19      	ldr	r2, [pc, #100]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 80090e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80090ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80090ec:	e00f      	b.n	800910e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d106      	bne.n	8009102 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80090f4:	4b15      	ldr	r3, [pc, #84]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 80090f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f8:	4a14      	ldr	r2, [pc, #80]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 80090fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80090fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009100:	e005      	b.n	800910e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009102:	4b12      	ldr	r3, [pc, #72]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 8009104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009106:	4a11      	ldr	r2, [pc, #68]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 8009108:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800910c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800910e:	4b0f      	ldr	r3, [pc, #60]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a0e      	ldr	r2, [pc, #56]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 8009114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800911a:	f7f8 ff7d 	bl	8002018 <HAL_GetTick>
 800911e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009120:	e008      	b.n	8009134 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009122:	f7f8 ff79 	bl	8002018 <HAL_GetTick>
 8009126:	4602      	mov	r2, r0
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	2b02      	cmp	r3, #2
 800912e:	d901      	bls.n	8009134 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	e006      	b.n	8009142 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009134:	4b05      	ldr	r3, [pc, #20]	@ (800914c <RCCEx_PLL3_Config+0x15c>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0f0      	beq.n	8009122 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009140:	7bfb      	ldrb	r3, [r7, #15]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	58024400 	.word	0x58024400
 8009150:	ffff0007 	.word	0xffff0007

08009154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e049      	b.n	80091fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d106      	bne.n	8009180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f841 	bl	8009202 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3304      	adds	r3, #4
 8009190:	4619      	mov	r1, r3
 8009192:	4610      	mov	r0, r2
 8009194:	f000 f9e8 	bl	8009568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009202:	b480      	push	{r7}
 8009204:	b083      	sub	sp, #12
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800920a:	bf00      	nop
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
	...

08009218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b01      	cmp	r3, #1
 800922a:	d001      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e054      	b.n	80092da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2202      	movs	r2, #2
 8009234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68da      	ldr	r2, [r3, #12]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f042 0201 	orr.w	r2, r2, #1
 8009246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a26      	ldr	r2, [pc, #152]	@ (80092e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d022      	beq.n	8009298 <HAL_TIM_Base_Start_IT+0x80>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800925a:	d01d      	beq.n	8009298 <HAL_TIM_Base_Start_IT+0x80>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a22      	ldr	r2, [pc, #136]	@ (80092ec <HAL_TIM_Base_Start_IT+0xd4>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d018      	beq.n	8009298 <HAL_TIM_Base_Start_IT+0x80>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a21      	ldr	r2, [pc, #132]	@ (80092f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d013      	beq.n	8009298 <HAL_TIM_Base_Start_IT+0x80>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a1f      	ldr	r2, [pc, #124]	@ (80092f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d00e      	beq.n	8009298 <HAL_TIM_Base_Start_IT+0x80>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a1e      	ldr	r2, [pc, #120]	@ (80092f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d009      	beq.n	8009298 <HAL_TIM_Base_Start_IT+0x80>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a1c      	ldr	r2, [pc, #112]	@ (80092fc <HAL_TIM_Base_Start_IT+0xe4>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d004      	beq.n	8009298 <HAL_TIM_Base_Start_IT+0x80>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a1b      	ldr	r2, [pc, #108]	@ (8009300 <HAL_TIM_Base_Start_IT+0xe8>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d115      	bne.n	80092c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689a      	ldr	r2, [r3, #8]
 800929e:	4b19      	ldr	r3, [pc, #100]	@ (8009304 <HAL_TIM_Base_Start_IT+0xec>)
 80092a0:	4013      	ands	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2b06      	cmp	r3, #6
 80092a8:	d015      	beq.n	80092d6 <HAL_TIM_Base_Start_IT+0xbe>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092b0:	d011      	beq.n	80092d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f042 0201 	orr.w	r2, r2, #1
 80092c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092c2:	e008      	b.n	80092d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0201 	orr.w	r2, r2, #1
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	e000      	b.n	80092d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	40010000 	.word	0x40010000
 80092ec:	40000400 	.word	0x40000400
 80092f0:	40000800 	.word	0x40000800
 80092f4:	40000c00 	.word	0x40000c00
 80092f8:	40010400 	.word	0x40010400
 80092fc:	40001800 	.word	0x40001800
 8009300:	40014000 	.word	0x40014000
 8009304:	00010007 	.word	0x00010007

08009308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d020      	beq.n	800936c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f003 0302 	and.w	r3, r3, #2
 8009330:	2b00      	cmp	r3, #0
 8009332:	d01b      	beq.n	800936c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f06f 0202 	mvn.w	r2, #2
 800933c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	f003 0303 	and.w	r3, r3, #3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f8e9 	bl	800952a <HAL_TIM_IC_CaptureCallback>
 8009358:	e005      	b.n	8009366 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f8db 	bl	8009516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f8ec 	bl	800953e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f003 0304 	and.w	r3, r3, #4
 8009372:	2b00      	cmp	r3, #0
 8009374:	d020      	beq.n	80093b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b00      	cmp	r3, #0
 800937e:	d01b      	beq.n	80093b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f06f 0204 	mvn.w	r2, #4
 8009388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2202      	movs	r2, #2
 800938e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800939a:	2b00      	cmp	r3, #0
 800939c:	d003      	beq.n	80093a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f8c3 	bl	800952a <HAL_TIM_IC_CaptureCallback>
 80093a4:	e005      	b.n	80093b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f8b5 	bl	8009516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f8c6 	bl	800953e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f003 0308 	and.w	r3, r3, #8
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d020      	beq.n	8009404 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f003 0308 	and.w	r3, r3, #8
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d01b      	beq.n	8009404 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f06f 0208 	mvn.w	r2, #8
 80093d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2204      	movs	r2, #4
 80093da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	69db      	ldr	r3, [r3, #28]
 80093e2:	f003 0303 	and.w	r3, r3, #3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f89d 	bl	800952a <HAL_TIM_IC_CaptureCallback>
 80093f0:	e005      	b.n	80093fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f88f 	bl	8009516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f8a0 	bl	800953e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f003 0310 	and.w	r3, r3, #16
 800940a:	2b00      	cmp	r3, #0
 800940c:	d020      	beq.n	8009450 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f003 0310 	and.w	r3, r3, #16
 8009414:	2b00      	cmp	r3, #0
 8009416:	d01b      	beq.n	8009450 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f06f 0210 	mvn.w	r2, #16
 8009420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2208      	movs	r2, #8
 8009426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f877 	bl	800952a <HAL_TIM_IC_CaptureCallback>
 800943c:	e005      	b.n	800944a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f869 	bl	8009516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f87a 	bl	800953e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00c      	beq.n	8009474 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b00      	cmp	r3, #0
 8009462:	d007      	beq.n	8009474 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f06f 0201 	mvn.w	r2, #1
 800946c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7f7 fe1e 	bl	80010b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800947a:	2b00      	cmp	r3, #0
 800947c:	d104      	bne.n	8009488 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00c      	beq.n	80094a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800948e:	2b00      	cmp	r3, #0
 8009490:	d007      	beq.n	80094a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800949a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 f90d 	bl	80096bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00c      	beq.n	80094c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d007      	beq.n	80094c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80094be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f905 	bl	80096d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00c      	beq.n	80094ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80094e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f834 	bl	8009552 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f003 0320 	and.w	r3, r3, #32
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00c      	beq.n	800950e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f003 0320 	and.w	r3, r3, #32
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d007      	beq.n	800950e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f06f 0220 	mvn.w	r2, #32
 8009506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f8cd 	bl	80096a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009516:	b480      	push	{r7}
 8009518:	b083      	sub	sp, #12
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800951e:	bf00      	nop
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009532:	bf00      	nop
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800953e:	b480      	push	{r7}
 8009540:	b083      	sub	sp, #12
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009546:	bf00      	nop
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009552:	b480      	push	{r7}
 8009554:	b083      	sub	sp, #12
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
	...

08009568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a43      	ldr	r2, [pc, #268]	@ (8009688 <TIM_Base_SetConfig+0x120>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d013      	beq.n	80095a8 <TIM_Base_SetConfig+0x40>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009586:	d00f      	beq.n	80095a8 <TIM_Base_SetConfig+0x40>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a40      	ldr	r2, [pc, #256]	@ (800968c <TIM_Base_SetConfig+0x124>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d00b      	beq.n	80095a8 <TIM_Base_SetConfig+0x40>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a3f      	ldr	r2, [pc, #252]	@ (8009690 <TIM_Base_SetConfig+0x128>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d007      	beq.n	80095a8 <TIM_Base_SetConfig+0x40>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a3e      	ldr	r2, [pc, #248]	@ (8009694 <TIM_Base_SetConfig+0x12c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d003      	beq.n	80095a8 <TIM_Base_SetConfig+0x40>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a3d      	ldr	r2, [pc, #244]	@ (8009698 <TIM_Base_SetConfig+0x130>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d108      	bne.n	80095ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a32      	ldr	r2, [pc, #200]	@ (8009688 <TIM_Base_SetConfig+0x120>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d01f      	beq.n	8009602 <TIM_Base_SetConfig+0x9a>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095c8:	d01b      	beq.n	8009602 <TIM_Base_SetConfig+0x9a>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a2f      	ldr	r2, [pc, #188]	@ (800968c <TIM_Base_SetConfig+0x124>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d017      	beq.n	8009602 <TIM_Base_SetConfig+0x9a>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a2e      	ldr	r2, [pc, #184]	@ (8009690 <TIM_Base_SetConfig+0x128>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d013      	beq.n	8009602 <TIM_Base_SetConfig+0x9a>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a2d      	ldr	r2, [pc, #180]	@ (8009694 <TIM_Base_SetConfig+0x12c>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d00f      	beq.n	8009602 <TIM_Base_SetConfig+0x9a>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a2c      	ldr	r2, [pc, #176]	@ (8009698 <TIM_Base_SetConfig+0x130>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d00b      	beq.n	8009602 <TIM_Base_SetConfig+0x9a>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a2b      	ldr	r2, [pc, #172]	@ (800969c <TIM_Base_SetConfig+0x134>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d007      	beq.n	8009602 <TIM_Base_SetConfig+0x9a>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a2a      	ldr	r2, [pc, #168]	@ (80096a0 <TIM_Base_SetConfig+0x138>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d003      	beq.n	8009602 <TIM_Base_SetConfig+0x9a>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a29      	ldr	r2, [pc, #164]	@ (80096a4 <TIM_Base_SetConfig+0x13c>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d108      	bne.n	8009614 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	4313      	orrs	r3, r2
 8009612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	4313      	orrs	r3, r2
 8009620:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	689a      	ldr	r2, [r3, #8]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a14      	ldr	r2, [pc, #80]	@ (8009688 <TIM_Base_SetConfig+0x120>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d00f      	beq.n	800965a <TIM_Base_SetConfig+0xf2>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a16      	ldr	r2, [pc, #88]	@ (8009698 <TIM_Base_SetConfig+0x130>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00b      	beq.n	800965a <TIM_Base_SetConfig+0xf2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a15      	ldr	r2, [pc, #84]	@ (800969c <TIM_Base_SetConfig+0x134>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d007      	beq.n	800965a <TIM_Base_SetConfig+0xf2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a14      	ldr	r2, [pc, #80]	@ (80096a0 <TIM_Base_SetConfig+0x138>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d003      	beq.n	800965a <TIM_Base_SetConfig+0xf2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a13      	ldr	r2, [pc, #76]	@ (80096a4 <TIM_Base_SetConfig+0x13c>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d103      	bne.n	8009662 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	691a      	ldr	r2, [r3, #16]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f043 0204 	orr.w	r2, r3, #4
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2201      	movs	r2, #1
 8009672:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	601a      	str	r2, [r3, #0]
}
 800967a:	bf00      	nop
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	40010000 	.word	0x40010000
 800968c:	40000400 	.word	0x40000400
 8009690:	40000800 	.word	0x40000800
 8009694:	40000c00 	.word	0x40000c00
 8009698:	40010400 	.word	0x40010400
 800969c:	40014000 	.word	0x40014000
 80096a0:	40014400 	.word	0x40014400
 80096a4:	40014800 	.word	0x40014800

080096a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e042      	b.n	800977c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d106      	bne.n	800970e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7f7 fea7 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2224      	movs	r2, #36	@ 0x24
 8009712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f022 0201 	bic.w	r2, r2, #1
 8009724:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800972a:	2b00      	cmp	r3, #0
 800972c:	d002      	beq.n	8009734 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 ff00 	bl	800a534 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f995 	bl	8009a64 <UART_SetConfig>
 800973a:	4603      	mov	r3, r0
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e01b      	b.n	800977c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689a      	ldr	r2, [r3, #8]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 ff7f 	bl	800a678 <UART_CheckIdleState>
 800977a:	4603      	mov	r3, r0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b08a      	sub	sp, #40	@ 0x28
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	4613      	mov	r3, r2
 8009790:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009798:	2b20      	cmp	r3, #32
 800979a:	d137      	bne.n	800980c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <HAL_UART_Receive_DMA+0x24>
 80097a2:	88fb      	ldrh	r3, [r7, #6]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e030      	b.n	800980e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a18      	ldr	r2, [pc, #96]	@ (8009818 <HAL_UART_Receive_DMA+0x94>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d01f      	beq.n	80097fc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d018      	beq.n	80097fc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	e853 3f00 	ldrex	r3, [r3]
 80097d6:	613b      	str	r3, [r7, #16]
   return(result);
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80097de:	627b      	str	r3, [r7, #36]	@ 0x24
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	461a      	mov	r2, r3
 80097e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e8:	623b      	str	r3, [r7, #32]
 80097ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	69f9      	ldr	r1, [r7, #28]
 80097ee:	6a3a      	ldr	r2, [r7, #32]
 80097f0:	e841 2300 	strex	r3, r2, [r1]
 80097f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e6      	bne.n	80097ca <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80097fc:	88fb      	ldrh	r3, [r7, #6]
 80097fe:	461a      	mov	r2, r3
 8009800:	68b9      	ldr	r1, [r7, #8]
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f001 f850 	bl	800a8a8 <UART_Start_Receive_DMA>
 8009808:	4603      	mov	r3, r0
 800980a:	e000      	b.n	800980e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800980c:	2302      	movs	r3, #2
  }
}
 800980e:	4618      	mov	r0, r3
 8009810:	3728      	adds	r7, #40	@ 0x28
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	58000c00 	.word	0x58000c00

0800981c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b0a0      	sub	sp, #128	@ 0x80
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800982c:	e853 3f00 	ldrex	r3, [r3]
 8009830:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009832:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009834:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8009838:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	461a      	mov	r2, r3
 8009840:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009842:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009844:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009846:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009848:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800984a:	e841 2300 	strex	r3, r2, [r1]
 800984e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009850:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1e6      	bne.n	8009824 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3308      	adds	r3, #8
 800985c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009860:	e853 3f00 	ldrex	r3, [r3]
 8009864:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009868:	4b72      	ldr	r3, [pc, #456]	@ (8009a34 <HAL_UART_Abort+0x218>)
 800986a:	4013      	ands	r3, r2
 800986c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3308      	adds	r3, #8
 8009874:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009876:	657a      	str	r2, [r7, #84]	@ 0x54
 8009878:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800987c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800987e:	e841 2300 	strex	r3, r2, [r1]
 8009882:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1e5      	bne.n	8009856 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800988e:	2b01      	cmp	r3, #1
 8009890:	d118      	bne.n	80098c4 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800989a:	e853 3f00 	ldrex	r3, [r3]
 800989e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a2:	f023 0310 	bic.w	r3, r3, #16
 80098a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	461a      	mov	r2, r3
 80098ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80098b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098b8:	e841 2300 	strex	r3, r2, [r1]
 80098bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1e6      	bne.n	8009892 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ce:	2b80      	cmp	r3, #128	@ 0x80
 80098d0:	d137      	bne.n	8009942 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3308      	adds	r3, #8
 80098d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	e853 3f00 	ldrex	r3, [r3]
 80098e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3308      	adds	r3, #8
 80098f0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80098f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098fa:	e841 2300 	strex	r3, r2, [r1]
 80098fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1e5      	bne.n	80098d2 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800990a:	2b00      	cmp	r3, #0
 800990c:	d019      	beq.n	8009942 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009912:	2200      	movs	r2, #0
 8009914:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800991a:	4618      	mov	r0, r3
 800991c:	f7f9 fad6 	bl	8002ecc <HAL_DMA_Abort>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00d      	beq.n	8009942 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800992a:	4618      	mov	r0, r3
 800992c:	f7fa fd16 	bl	800435c <HAL_DMA_GetError>
 8009930:	4603      	mov	r3, r0
 8009932:	2b20      	cmp	r3, #32
 8009934:	d105      	bne.n	8009942 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2210      	movs	r2, #16
 800993a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800993e:	2303      	movs	r3, #3
 8009940:	e073      	b.n	8009a2a <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800994c:	2b40      	cmp	r3, #64	@ 0x40
 800994e:	d13b      	bne.n	80099c8 <HAL_UART_Abort+0x1ac>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3308      	adds	r3, #8
 8009956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	e853 3f00 	ldrex	r3, [r3]
 800995e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009966:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3308      	adds	r3, #8
 800996e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009970:	61ba      	str	r2, [r7, #24]
 8009972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009974:	6979      	ldr	r1, [r7, #20]
 8009976:	69ba      	ldr	r2, [r7, #24]
 8009978:	e841 2300 	strex	r3, r2, [r1]
 800997c:	613b      	str	r3, [r7, #16]
   return(result);
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e5      	bne.n	8009950 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800998a:	2b00      	cmp	r3, #0
 800998c:	d01c      	beq.n	80099c8 <HAL_UART_Abort+0x1ac>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009994:	2200      	movs	r2, #0
 8009996:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800999e:	4618      	mov	r0, r3
 80099a0:	f7f9 fa94 	bl	8002ecc <HAL_DMA_Abort>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00e      	beq.n	80099c8 <HAL_UART_Abort+0x1ac>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fa fcd3 	bl	800435c <HAL_DMA_GetError>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d105      	bne.n	80099c8 <HAL_UART_Abort+0x1ac>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2210      	movs	r2, #16
 80099c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e030      	b.n	8009a2a <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	220f      	movs	r2, #15
 80099de:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099e8:	d107      	bne.n	80099fa <HAL_UART_Abort+0x1de>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	699a      	ldr	r2, [r3, #24]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f042 0210 	orr.w	r2, r2, #16
 80099f8:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	699a      	ldr	r2, [r3, #24]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f042 0208 	orr.w	r2, r2, #8
 8009a08:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2220      	movs	r2, #32
 8009a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2220      	movs	r2, #32
 8009a16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3780      	adds	r7, #128	@ 0x80
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	ef7ffffe 	.word	0xef7ffffe

08009a38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	460b      	mov	r3, r1
 8009a56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a68:	b092      	sub	sp, #72	@ 0x48
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	689a      	ldr	r2, [r3, #8]
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	431a      	orrs	r2, r3
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	431a      	orrs	r2, r3
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	4bbe      	ldr	r3, [pc, #760]	@ (8009d8c <UART_SetConfig+0x328>)
 8009a94:	4013      	ands	r3, r2
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	6812      	ldr	r2, [r2, #0]
 8009a9a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a9c:	430b      	orrs	r3, r1
 8009a9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	68da      	ldr	r2, [r3, #12]
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4ab3      	ldr	r2, [pc, #716]	@ (8009d90 <UART_SetConfig+0x32c>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d004      	beq.n	8009ad0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009acc:	4313      	orrs	r3, r2
 8009ace:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689a      	ldr	r2, [r3, #8]
 8009ad6:	4baf      	ldr	r3, [pc, #700]	@ (8009d94 <UART_SetConfig+0x330>)
 8009ad8:	4013      	ands	r3, r2
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	6812      	ldr	r2, [r2, #0]
 8009ade:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009ae0:	430b      	orrs	r3, r1
 8009ae2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aea:	f023 010f 	bic.w	r1, r3, #15
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	430a      	orrs	r2, r1
 8009af8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4aa6      	ldr	r2, [pc, #664]	@ (8009d98 <UART_SetConfig+0x334>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d177      	bne.n	8009bf4 <UART_SetConfig+0x190>
 8009b04:	4ba5      	ldr	r3, [pc, #660]	@ (8009d9c <UART_SetConfig+0x338>)
 8009b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b0c:	2b28      	cmp	r3, #40	@ 0x28
 8009b0e:	d86d      	bhi.n	8009bec <UART_SetConfig+0x188>
 8009b10:	a201      	add	r2, pc, #4	@ (adr r2, 8009b18 <UART_SetConfig+0xb4>)
 8009b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b16:	bf00      	nop
 8009b18:	08009bbd 	.word	0x08009bbd
 8009b1c:	08009bed 	.word	0x08009bed
 8009b20:	08009bed 	.word	0x08009bed
 8009b24:	08009bed 	.word	0x08009bed
 8009b28:	08009bed 	.word	0x08009bed
 8009b2c:	08009bed 	.word	0x08009bed
 8009b30:	08009bed 	.word	0x08009bed
 8009b34:	08009bed 	.word	0x08009bed
 8009b38:	08009bc5 	.word	0x08009bc5
 8009b3c:	08009bed 	.word	0x08009bed
 8009b40:	08009bed 	.word	0x08009bed
 8009b44:	08009bed 	.word	0x08009bed
 8009b48:	08009bed 	.word	0x08009bed
 8009b4c:	08009bed 	.word	0x08009bed
 8009b50:	08009bed 	.word	0x08009bed
 8009b54:	08009bed 	.word	0x08009bed
 8009b58:	08009bcd 	.word	0x08009bcd
 8009b5c:	08009bed 	.word	0x08009bed
 8009b60:	08009bed 	.word	0x08009bed
 8009b64:	08009bed 	.word	0x08009bed
 8009b68:	08009bed 	.word	0x08009bed
 8009b6c:	08009bed 	.word	0x08009bed
 8009b70:	08009bed 	.word	0x08009bed
 8009b74:	08009bed 	.word	0x08009bed
 8009b78:	08009bd5 	.word	0x08009bd5
 8009b7c:	08009bed 	.word	0x08009bed
 8009b80:	08009bed 	.word	0x08009bed
 8009b84:	08009bed 	.word	0x08009bed
 8009b88:	08009bed 	.word	0x08009bed
 8009b8c:	08009bed 	.word	0x08009bed
 8009b90:	08009bed 	.word	0x08009bed
 8009b94:	08009bed 	.word	0x08009bed
 8009b98:	08009bdd 	.word	0x08009bdd
 8009b9c:	08009bed 	.word	0x08009bed
 8009ba0:	08009bed 	.word	0x08009bed
 8009ba4:	08009bed 	.word	0x08009bed
 8009ba8:	08009bed 	.word	0x08009bed
 8009bac:	08009bed 	.word	0x08009bed
 8009bb0:	08009bed 	.word	0x08009bed
 8009bb4:	08009bed 	.word	0x08009bed
 8009bb8:	08009be5 	.word	0x08009be5
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc2:	e222      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009bc4:	2304      	movs	r3, #4
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bca:	e21e      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009bcc:	2308      	movs	r3, #8
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd2:	e21a      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009bd4:	2310      	movs	r3, #16
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bda:	e216      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009bdc:	2320      	movs	r3, #32
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be2:	e212      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009be4:	2340      	movs	r3, #64	@ 0x40
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bea:	e20e      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009bec:	2380      	movs	r3, #128	@ 0x80
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf2:	e20a      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a69      	ldr	r2, [pc, #420]	@ (8009da0 <UART_SetConfig+0x33c>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d130      	bne.n	8009c60 <UART_SetConfig+0x1fc>
 8009bfe:	4b67      	ldr	r3, [pc, #412]	@ (8009d9c <UART_SetConfig+0x338>)
 8009c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c02:	f003 0307 	and.w	r3, r3, #7
 8009c06:	2b05      	cmp	r3, #5
 8009c08:	d826      	bhi.n	8009c58 <UART_SetConfig+0x1f4>
 8009c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c10 <UART_SetConfig+0x1ac>)
 8009c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c10:	08009c29 	.word	0x08009c29
 8009c14:	08009c31 	.word	0x08009c31
 8009c18:	08009c39 	.word	0x08009c39
 8009c1c:	08009c41 	.word	0x08009c41
 8009c20:	08009c49 	.word	0x08009c49
 8009c24:	08009c51 	.word	0x08009c51
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2e:	e1ec      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009c30:	2304      	movs	r3, #4
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c36:	e1e8      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009c38:	2308      	movs	r3, #8
 8009c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c3e:	e1e4      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009c40:	2310      	movs	r3, #16
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c46:	e1e0      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009c48:	2320      	movs	r3, #32
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c4e:	e1dc      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009c50:	2340      	movs	r3, #64	@ 0x40
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c56:	e1d8      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009c58:	2380      	movs	r3, #128	@ 0x80
 8009c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c5e:	e1d4      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a4f      	ldr	r2, [pc, #316]	@ (8009da4 <UART_SetConfig+0x340>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d130      	bne.n	8009ccc <UART_SetConfig+0x268>
 8009c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8009d9c <UART_SetConfig+0x338>)
 8009c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c6e:	f003 0307 	and.w	r3, r3, #7
 8009c72:	2b05      	cmp	r3, #5
 8009c74:	d826      	bhi.n	8009cc4 <UART_SetConfig+0x260>
 8009c76:	a201      	add	r2, pc, #4	@ (adr r2, 8009c7c <UART_SetConfig+0x218>)
 8009c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7c:	08009c95 	.word	0x08009c95
 8009c80:	08009c9d 	.word	0x08009c9d
 8009c84:	08009ca5 	.word	0x08009ca5
 8009c88:	08009cad 	.word	0x08009cad
 8009c8c:	08009cb5 	.word	0x08009cb5
 8009c90:	08009cbd 	.word	0x08009cbd
 8009c94:	2300      	movs	r3, #0
 8009c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c9a:	e1b6      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009c9c:	2304      	movs	r3, #4
 8009c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ca2:	e1b2      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009ca4:	2308      	movs	r3, #8
 8009ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009caa:	e1ae      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009cac:	2310      	movs	r3, #16
 8009cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cb2:	e1aa      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009cb4:	2320      	movs	r3, #32
 8009cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cba:	e1a6      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009cbc:	2340      	movs	r3, #64	@ 0x40
 8009cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc2:	e1a2      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009cc4:	2380      	movs	r3, #128	@ 0x80
 8009cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cca:	e19e      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a35      	ldr	r2, [pc, #212]	@ (8009da8 <UART_SetConfig+0x344>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d130      	bne.n	8009d38 <UART_SetConfig+0x2d4>
 8009cd6:	4b31      	ldr	r3, [pc, #196]	@ (8009d9c <UART_SetConfig+0x338>)
 8009cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cda:	f003 0307 	and.w	r3, r3, #7
 8009cde:	2b05      	cmp	r3, #5
 8009ce0:	d826      	bhi.n	8009d30 <UART_SetConfig+0x2cc>
 8009ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ce8 <UART_SetConfig+0x284>)
 8009ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce8:	08009d01 	.word	0x08009d01
 8009cec:	08009d09 	.word	0x08009d09
 8009cf0:	08009d11 	.word	0x08009d11
 8009cf4:	08009d19 	.word	0x08009d19
 8009cf8:	08009d21 	.word	0x08009d21
 8009cfc:	08009d29 	.word	0x08009d29
 8009d00:	2300      	movs	r3, #0
 8009d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d06:	e180      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009d08:	2304      	movs	r3, #4
 8009d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0e:	e17c      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009d10:	2308      	movs	r3, #8
 8009d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d16:	e178      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009d18:	2310      	movs	r3, #16
 8009d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d1e:	e174      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009d20:	2320      	movs	r3, #32
 8009d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d26:	e170      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009d28:	2340      	movs	r3, #64	@ 0x40
 8009d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2e:	e16c      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009d30:	2380      	movs	r3, #128	@ 0x80
 8009d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d36:	e168      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8009dac <UART_SetConfig+0x348>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d142      	bne.n	8009dc8 <UART_SetConfig+0x364>
 8009d42:	4b16      	ldr	r3, [pc, #88]	@ (8009d9c <UART_SetConfig+0x338>)
 8009d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d46:	f003 0307 	and.w	r3, r3, #7
 8009d4a:	2b05      	cmp	r3, #5
 8009d4c:	d838      	bhi.n	8009dc0 <UART_SetConfig+0x35c>
 8009d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d54 <UART_SetConfig+0x2f0>)
 8009d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d54:	08009d6d 	.word	0x08009d6d
 8009d58:	08009d75 	.word	0x08009d75
 8009d5c:	08009d7d 	.word	0x08009d7d
 8009d60:	08009d85 	.word	0x08009d85
 8009d64:	08009db1 	.word	0x08009db1
 8009d68:	08009db9 	.word	0x08009db9
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d72:	e14a      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009d74:	2304      	movs	r3, #4
 8009d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7a:	e146      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009d7c:	2308      	movs	r3, #8
 8009d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d82:	e142      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009d84:	2310      	movs	r3, #16
 8009d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8a:	e13e      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009d8c:	cfff69f3 	.word	0xcfff69f3
 8009d90:	58000c00 	.word	0x58000c00
 8009d94:	11fff4ff 	.word	0x11fff4ff
 8009d98:	40011000 	.word	0x40011000
 8009d9c:	58024400 	.word	0x58024400
 8009da0:	40004400 	.word	0x40004400
 8009da4:	40004800 	.word	0x40004800
 8009da8:	40004c00 	.word	0x40004c00
 8009dac:	40005000 	.word	0x40005000
 8009db0:	2320      	movs	r3, #32
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db6:	e128      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009db8:	2340      	movs	r3, #64	@ 0x40
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dbe:	e124      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009dc0:	2380      	movs	r3, #128	@ 0x80
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc6:	e120      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4acb      	ldr	r2, [pc, #812]	@ (800a0fc <UART_SetConfig+0x698>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d176      	bne.n	8009ec0 <UART_SetConfig+0x45c>
 8009dd2:	4bcb      	ldr	r3, [pc, #812]	@ (800a100 <UART_SetConfig+0x69c>)
 8009dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009dda:	2b28      	cmp	r3, #40	@ 0x28
 8009ddc:	d86c      	bhi.n	8009eb8 <UART_SetConfig+0x454>
 8009dde:	a201      	add	r2, pc, #4	@ (adr r2, 8009de4 <UART_SetConfig+0x380>)
 8009de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de4:	08009e89 	.word	0x08009e89
 8009de8:	08009eb9 	.word	0x08009eb9
 8009dec:	08009eb9 	.word	0x08009eb9
 8009df0:	08009eb9 	.word	0x08009eb9
 8009df4:	08009eb9 	.word	0x08009eb9
 8009df8:	08009eb9 	.word	0x08009eb9
 8009dfc:	08009eb9 	.word	0x08009eb9
 8009e00:	08009eb9 	.word	0x08009eb9
 8009e04:	08009e91 	.word	0x08009e91
 8009e08:	08009eb9 	.word	0x08009eb9
 8009e0c:	08009eb9 	.word	0x08009eb9
 8009e10:	08009eb9 	.word	0x08009eb9
 8009e14:	08009eb9 	.word	0x08009eb9
 8009e18:	08009eb9 	.word	0x08009eb9
 8009e1c:	08009eb9 	.word	0x08009eb9
 8009e20:	08009eb9 	.word	0x08009eb9
 8009e24:	08009e99 	.word	0x08009e99
 8009e28:	08009eb9 	.word	0x08009eb9
 8009e2c:	08009eb9 	.word	0x08009eb9
 8009e30:	08009eb9 	.word	0x08009eb9
 8009e34:	08009eb9 	.word	0x08009eb9
 8009e38:	08009eb9 	.word	0x08009eb9
 8009e3c:	08009eb9 	.word	0x08009eb9
 8009e40:	08009eb9 	.word	0x08009eb9
 8009e44:	08009ea1 	.word	0x08009ea1
 8009e48:	08009eb9 	.word	0x08009eb9
 8009e4c:	08009eb9 	.word	0x08009eb9
 8009e50:	08009eb9 	.word	0x08009eb9
 8009e54:	08009eb9 	.word	0x08009eb9
 8009e58:	08009eb9 	.word	0x08009eb9
 8009e5c:	08009eb9 	.word	0x08009eb9
 8009e60:	08009eb9 	.word	0x08009eb9
 8009e64:	08009ea9 	.word	0x08009ea9
 8009e68:	08009eb9 	.word	0x08009eb9
 8009e6c:	08009eb9 	.word	0x08009eb9
 8009e70:	08009eb9 	.word	0x08009eb9
 8009e74:	08009eb9 	.word	0x08009eb9
 8009e78:	08009eb9 	.word	0x08009eb9
 8009e7c:	08009eb9 	.word	0x08009eb9
 8009e80:	08009eb9 	.word	0x08009eb9
 8009e84:	08009eb1 	.word	0x08009eb1
 8009e88:	2301      	movs	r3, #1
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8e:	e0bc      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009e90:	2304      	movs	r3, #4
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e96:	e0b8      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009e98:	2308      	movs	r3, #8
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9e:	e0b4      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009ea0:	2310      	movs	r3, #16
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea6:	e0b0      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009ea8:	2320      	movs	r3, #32
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eae:	e0ac      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009eb0:	2340      	movs	r3, #64	@ 0x40
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb6:	e0a8      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009eb8:	2380      	movs	r3, #128	@ 0x80
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ebe:	e0a4      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a8f      	ldr	r2, [pc, #572]	@ (800a104 <UART_SetConfig+0x6a0>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d130      	bne.n	8009f2c <UART_SetConfig+0x4c8>
 8009eca:	4b8d      	ldr	r3, [pc, #564]	@ (800a100 <UART_SetConfig+0x69c>)
 8009ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ece:	f003 0307 	and.w	r3, r3, #7
 8009ed2:	2b05      	cmp	r3, #5
 8009ed4:	d826      	bhi.n	8009f24 <UART_SetConfig+0x4c0>
 8009ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8009edc <UART_SetConfig+0x478>)
 8009ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009edc:	08009ef5 	.word	0x08009ef5
 8009ee0:	08009efd 	.word	0x08009efd
 8009ee4:	08009f05 	.word	0x08009f05
 8009ee8:	08009f0d 	.word	0x08009f0d
 8009eec:	08009f15 	.word	0x08009f15
 8009ef0:	08009f1d 	.word	0x08009f1d
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009efa:	e086      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009efc:	2304      	movs	r3, #4
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f02:	e082      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009f04:	2308      	movs	r3, #8
 8009f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f0a:	e07e      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009f0c:	2310      	movs	r3, #16
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f12:	e07a      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009f14:	2320      	movs	r3, #32
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1a:	e076      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009f1c:	2340      	movs	r3, #64	@ 0x40
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f22:	e072      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009f24:	2380      	movs	r3, #128	@ 0x80
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2a:	e06e      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a75      	ldr	r2, [pc, #468]	@ (800a108 <UART_SetConfig+0x6a4>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d130      	bne.n	8009f98 <UART_SetConfig+0x534>
 8009f36:	4b72      	ldr	r3, [pc, #456]	@ (800a100 <UART_SetConfig+0x69c>)
 8009f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f3a:	f003 0307 	and.w	r3, r3, #7
 8009f3e:	2b05      	cmp	r3, #5
 8009f40:	d826      	bhi.n	8009f90 <UART_SetConfig+0x52c>
 8009f42:	a201      	add	r2, pc, #4	@ (adr r2, 8009f48 <UART_SetConfig+0x4e4>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	08009f61 	.word	0x08009f61
 8009f4c:	08009f69 	.word	0x08009f69
 8009f50:	08009f71 	.word	0x08009f71
 8009f54:	08009f79 	.word	0x08009f79
 8009f58:	08009f81 	.word	0x08009f81
 8009f5c:	08009f89 	.word	0x08009f89
 8009f60:	2300      	movs	r3, #0
 8009f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f66:	e050      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009f68:	2304      	movs	r3, #4
 8009f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f6e:	e04c      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009f70:	2308      	movs	r3, #8
 8009f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f76:	e048      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009f78:	2310      	movs	r3, #16
 8009f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f7e:	e044      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009f80:	2320      	movs	r3, #32
 8009f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f86:	e040      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009f88:	2340      	movs	r3, #64	@ 0x40
 8009f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8e:	e03c      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009f90:	2380      	movs	r3, #128	@ 0x80
 8009f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f96:	e038      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a5b      	ldr	r2, [pc, #364]	@ (800a10c <UART_SetConfig+0x6a8>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d130      	bne.n	800a004 <UART_SetConfig+0x5a0>
 8009fa2:	4b57      	ldr	r3, [pc, #348]	@ (800a100 <UART_SetConfig+0x69c>)
 8009fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fa6:	f003 0307 	and.w	r3, r3, #7
 8009faa:	2b05      	cmp	r3, #5
 8009fac:	d826      	bhi.n	8009ffc <UART_SetConfig+0x598>
 8009fae:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb4 <UART_SetConfig+0x550>)
 8009fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb4:	08009fcd 	.word	0x08009fcd
 8009fb8:	08009fd5 	.word	0x08009fd5
 8009fbc:	08009fdd 	.word	0x08009fdd
 8009fc0:	08009fe5 	.word	0x08009fe5
 8009fc4:	08009fed 	.word	0x08009fed
 8009fc8:	08009ff5 	.word	0x08009ff5
 8009fcc:	2302      	movs	r3, #2
 8009fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fd2:	e01a      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009fd4:	2304      	movs	r3, #4
 8009fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fda:	e016      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009fdc:	2308      	movs	r3, #8
 8009fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fe2:	e012      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009fe4:	2310      	movs	r3, #16
 8009fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fea:	e00e      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009fec:	2320      	movs	r3, #32
 8009fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff2:	e00a      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009ff4:	2340      	movs	r3, #64	@ 0x40
 8009ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffa:	e006      	b.n	800a00a <UART_SetConfig+0x5a6>
 8009ffc:	2380      	movs	r3, #128	@ 0x80
 8009ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a002:	e002      	b.n	800a00a <UART_SetConfig+0x5a6>
 800a004:	2380      	movs	r3, #128	@ 0x80
 800a006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a3f      	ldr	r2, [pc, #252]	@ (800a10c <UART_SetConfig+0x6a8>)
 800a010:	4293      	cmp	r3, r2
 800a012:	f040 80f8 	bne.w	800a206 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a016:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a01a:	2b20      	cmp	r3, #32
 800a01c:	dc46      	bgt.n	800a0ac <UART_SetConfig+0x648>
 800a01e:	2b02      	cmp	r3, #2
 800a020:	f2c0 8082 	blt.w	800a128 <UART_SetConfig+0x6c4>
 800a024:	3b02      	subs	r3, #2
 800a026:	2b1e      	cmp	r3, #30
 800a028:	d87e      	bhi.n	800a128 <UART_SetConfig+0x6c4>
 800a02a:	a201      	add	r2, pc, #4	@ (adr r2, 800a030 <UART_SetConfig+0x5cc>)
 800a02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a030:	0800a0b3 	.word	0x0800a0b3
 800a034:	0800a129 	.word	0x0800a129
 800a038:	0800a0bb 	.word	0x0800a0bb
 800a03c:	0800a129 	.word	0x0800a129
 800a040:	0800a129 	.word	0x0800a129
 800a044:	0800a129 	.word	0x0800a129
 800a048:	0800a0cb 	.word	0x0800a0cb
 800a04c:	0800a129 	.word	0x0800a129
 800a050:	0800a129 	.word	0x0800a129
 800a054:	0800a129 	.word	0x0800a129
 800a058:	0800a129 	.word	0x0800a129
 800a05c:	0800a129 	.word	0x0800a129
 800a060:	0800a129 	.word	0x0800a129
 800a064:	0800a129 	.word	0x0800a129
 800a068:	0800a0db 	.word	0x0800a0db
 800a06c:	0800a129 	.word	0x0800a129
 800a070:	0800a129 	.word	0x0800a129
 800a074:	0800a129 	.word	0x0800a129
 800a078:	0800a129 	.word	0x0800a129
 800a07c:	0800a129 	.word	0x0800a129
 800a080:	0800a129 	.word	0x0800a129
 800a084:	0800a129 	.word	0x0800a129
 800a088:	0800a129 	.word	0x0800a129
 800a08c:	0800a129 	.word	0x0800a129
 800a090:	0800a129 	.word	0x0800a129
 800a094:	0800a129 	.word	0x0800a129
 800a098:	0800a129 	.word	0x0800a129
 800a09c:	0800a129 	.word	0x0800a129
 800a0a0:	0800a129 	.word	0x0800a129
 800a0a4:	0800a129 	.word	0x0800a129
 800a0a8:	0800a11b 	.word	0x0800a11b
 800a0ac:	2b40      	cmp	r3, #64	@ 0x40
 800a0ae:	d037      	beq.n	800a120 <UART_SetConfig+0x6bc>
 800a0b0:	e03a      	b.n	800a128 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a0b2:	f7fe fc2d 	bl	8008910 <HAL_RCCEx_GetD3PCLK1Freq>
 800a0b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a0b8:	e03c      	b.n	800a134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe fc3c 	bl	800893c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c8:	e034      	b.n	800a134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ca:	f107 0318 	add.w	r3, r7, #24
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe fd88 	bl	8008be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d8:	e02c      	b.n	800a134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0da:	4b09      	ldr	r3, [pc, #36]	@ (800a100 <UART_SetConfig+0x69c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0320 	and.w	r3, r3, #32
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d016      	beq.n	800a114 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0e6:	4b06      	ldr	r3, [pc, #24]	@ (800a100 <UART_SetConfig+0x69c>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	08db      	lsrs	r3, r3, #3
 800a0ec:	f003 0303 	and.w	r3, r3, #3
 800a0f0:	4a07      	ldr	r2, [pc, #28]	@ (800a110 <UART_SetConfig+0x6ac>)
 800a0f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0f8:	e01c      	b.n	800a134 <UART_SetConfig+0x6d0>
 800a0fa:	bf00      	nop
 800a0fc:	40011400 	.word	0x40011400
 800a100:	58024400 	.word	0x58024400
 800a104:	40007800 	.word	0x40007800
 800a108:	40007c00 	.word	0x40007c00
 800a10c:	58000c00 	.word	0x58000c00
 800a110:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a114:	4b9d      	ldr	r3, [pc, #628]	@ (800a38c <UART_SetConfig+0x928>)
 800a116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a118:	e00c      	b.n	800a134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a11a:	4b9d      	ldr	r3, [pc, #628]	@ (800a390 <UART_SetConfig+0x92c>)
 800a11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a11e:	e009      	b.n	800a134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a120:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a126:	e005      	b.n	800a134 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a128:	2300      	movs	r3, #0
 800a12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a132:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 81de 	beq.w	800a4f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a140:	4a94      	ldr	r2, [pc, #592]	@ (800a394 <UART_SetConfig+0x930>)
 800a142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a146:	461a      	mov	r2, r3
 800a148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a14a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a14e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	4613      	mov	r3, r2
 800a156:	005b      	lsls	r3, r3, #1
 800a158:	4413      	add	r3, r2
 800a15a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d305      	bcc.n	800a16c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a168:	429a      	cmp	r2, r3
 800a16a:	d903      	bls.n	800a174 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a172:	e1c1      	b.n	800a4f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a176:	2200      	movs	r2, #0
 800a178:	60bb      	str	r3, [r7, #8]
 800a17a:	60fa      	str	r2, [r7, #12]
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a180:	4a84      	ldr	r2, [pc, #528]	@ (800a394 <UART_SetConfig+0x930>)
 800a182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a186:	b29b      	uxth	r3, r3
 800a188:	2200      	movs	r2, #0
 800a18a:	603b      	str	r3, [r7, #0]
 800a18c:	607a      	str	r2, [r7, #4]
 800a18e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a192:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a196:	f7f6 fa5f 	bl	8000658 <__aeabi_uldivmod>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4610      	mov	r0, r2
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f04f 0200 	mov.w	r2, #0
 800a1a6:	f04f 0300 	mov.w	r3, #0
 800a1aa:	020b      	lsls	r3, r1, #8
 800a1ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1b0:	0202      	lsls	r2, r0, #8
 800a1b2:	6979      	ldr	r1, [r7, #20]
 800a1b4:	6849      	ldr	r1, [r1, #4]
 800a1b6:	0849      	lsrs	r1, r1, #1
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	4605      	mov	r5, r0
 800a1be:	eb12 0804 	adds.w	r8, r2, r4
 800a1c2:	eb43 0905 	adc.w	r9, r3, r5
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	469a      	mov	sl, r3
 800a1ce:	4693      	mov	fp, r2
 800a1d0:	4652      	mov	r2, sl
 800a1d2:	465b      	mov	r3, fp
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	f7f6 fa3e 	bl	8000658 <__aeabi_uldivmod>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1ea:	d308      	bcc.n	800a1fe <UART_SetConfig+0x79a>
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1f2:	d204      	bcs.n	800a1fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1fa:	60da      	str	r2, [r3, #12]
 800a1fc:	e17c      	b.n	800a4f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a204:	e178      	b.n	800a4f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a20e:	f040 80c5 	bne.w	800a39c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a212:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a216:	2b20      	cmp	r3, #32
 800a218:	dc48      	bgt.n	800a2ac <UART_SetConfig+0x848>
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	db7b      	blt.n	800a316 <UART_SetConfig+0x8b2>
 800a21e:	2b20      	cmp	r3, #32
 800a220:	d879      	bhi.n	800a316 <UART_SetConfig+0x8b2>
 800a222:	a201      	add	r2, pc, #4	@ (adr r2, 800a228 <UART_SetConfig+0x7c4>)
 800a224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a228:	0800a2b3 	.word	0x0800a2b3
 800a22c:	0800a2bb 	.word	0x0800a2bb
 800a230:	0800a317 	.word	0x0800a317
 800a234:	0800a317 	.word	0x0800a317
 800a238:	0800a2c3 	.word	0x0800a2c3
 800a23c:	0800a317 	.word	0x0800a317
 800a240:	0800a317 	.word	0x0800a317
 800a244:	0800a317 	.word	0x0800a317
 800a248:	0800a2d3 	.word	0x0800a2d3
 800a24c:	0800a317 	.word	0x0800a317
 800a250:	0800a317 	.word	0x0800a317
 800a254:	0800a317 	.word	0x0800a317
 800a258:	0800a317 	.word	0x0800a317
 800a25c:	0800a317 	.word	0x0800a317
 800a260:	0800a317 	.word	0x0800a317
 800a264:	0800a317 	.word	0x0800a317
 800a268:	0800a2e3 	.word	0x0800a2e3
 800a26c:	0800a317 	.word	0x0800a317
 800a270:	0800a317 	.word	0x0800a317
 800a274:	0800a317 	.word	0x0800a317
 800a278:	0800a317 	.word	0x0800a317
 800a27c:	0800a317 	.word	0x0800a317
 800a280:	0800a317 	.word	0x0800a317
 800a284:	0800a317 	.word	0x0800a317
 800a288:	0800a317 	.word	0x0800a317
 800a28c:	0800a317 	.word	0x0800a317
 800a290:	0800a317 	.word	0x0800a317
 800a294:	0800a317 	.word	0x0800a317
 800a298:	0800a317 	.word	0x0800a317
 800a29c:	0800a317 	.word	0x0800a317
 800a2a0:	0800a317 	.word	0x0800a317
 800a2a4:	0800a317 	.word	0x0800a317
 800a2a8:	0800a309 	.word	0x0800a309
 800a2ac:	2b40      	cmp	r3, #64	@ 0x40
 800a2ae:	d02e      	beq.n	800a30e <UART_SetConfig+0x8aa>
 800a2b0:	e031      	b.n	800a316 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2b2:	f7fd f8b5 	bl	8007420 <HAL_RCC_GetPCLK1Freq>
 800a2b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2b8:	e033      	b.n	800a322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2ba:	f7fd f8c7 	bl	800744c <HAL_RCC_GetPCLK2Freq>
 800a2be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2c0:	e02f      	b.n	800a322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fe fb38 	bl	800893c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d0:	e027      	b.n	800a322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2d2:	f107 0318 	add.w	r3, r7, #24
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fe fc84 	bl	8008be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e0:	e01f      	b.n	800a322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2e2:	4b2d      	ldr	r3, [pc, #180]	@ (800a398 <UART_SetConfig+0x934>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0320 	and.w	r3, r3, #32
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d009      	beq.n	800a302 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2ee:	4b2a      	ldr	r3, [pc, #168]	@ (800a398 <UART_SetConfig+0x934>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	08db      	lsrs	r3, r3, #3
 800a2f4:	f003 0303 	and.w	r3, r3, #3
 800a2f8:	4a24      	ldr	r2, [pc, #144]	@ (800a38c <UART_SetConfig+0x928>)
 800a2fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a300:	e00f      	b.n	800a322 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a302:	4b22      	ldr	r3, [pc, #136]	@ (800a38c <UART_SetConfig+0x928>)
 800a304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a306:	e00c      	b.n	800a322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a308:	4b21      	ldr	r3, [pc, #132]	@ (800a390 <UART_SetConfig+0x92c>)
 800a30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a30c:	e009      	b.n	800a322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a30e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a314:	e005      	b.n	800a322 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a316:	2300      	movs	r3, #0
 800a318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a320:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 80e7 	beq.w	800a4f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a32e:	4a19      	ldr	r2, [pc, #100]	@ (800a394 <UART_SetConfig+0x930>)
 800a330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a334:	461a      	mov	r2, r3
 800a336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a338:	fbb3 f3f2 	udiv	r3, r3, r2
 800a33c:	005a      	lsls	r2, r3, #1
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	085b      	lsrs	r3, r3, #1
 800a344:	441a      	add	r2, r3
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a34e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a352:	2b0f      	cmp	r3, #15
 800a354:	d916      	bls.n	800a384 <UART_SetConfig+0x920>
 800a356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a35c:	d212      	bcs.n	800a384 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a360:	b29b      	uxth	r3, r3
 800a362:	f023 030f 	bic.w	r3, r3, #15
 800a366:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36a:	085b      	lsrs	r3, r3, #1
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	f003 0307 	and.w	r3, r3, #7
 800a372:	b29a      	uxth	r2, r3
 800a374:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a376:	4313      	orrs	r3, r2
 800a378:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a380:	60da      	str	r2, [r3, #12]
 800a382:	e0b9      	b.n	800a4f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a38a:	e0b5      	b.n	800a4f8 <UART_SetConfig+0xa94>
 800a38c:	03d09000 	.word	0x03d09000
 800a390:	003d0900 	.word	0x003d0900
 800a394:	08011370 	.word	0x08011370
 800a398:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a39c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a3a0:	2b20      	cmp	r3, #32
 800a3a2:	dc49      	bgt.n	800a438 <UART_SetConfig+0x9d4>
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	db7c      	blt.n	800a4a2 <UART_SetConfig+0xa3e>
 800a3a8:	2b20      	cmp	r3, #32
 800a3aa:	d87a      	bhi.n	800a4a2 <UART_SetConfig+0xa3e>
 800a3ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a3b4 <UART_SetConfig+0x950>)
 800a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b2:	bf00      	nop
 800a3b4:	0800a43f 	.word	0x0800a43f
 800a3b8:	0800a447 	.word	0x0800a447
 800a3bc:	0800a4a3 	.word	0x0800a4a3
 800a3c0:	0800a4a3 	.word	0x0800a4a3
 800a3c4:	0800a44f 	.word	0x0800a44f
 800a3c8:	0800a4a3 	.word	0x0800a4a3
 800a3cc:	0800a4a3 	.word	0x0800a4a3
 800a3d0:	0800a4a3 	.word	0x0800a4a3
 800a3d4:	0800a45f 	.word	0x0800a45f
 800a3d8:	0800a4a3 	.word	0x0800a4a3
 800a3dc:	0800a4a3 	.word	0x0800a4a3
 800a3e0:	0800a4a3 	.word	0x0800a4a3
 800a3e4:	0800a4a3 	.word	0x0800a4a3
 800a3e8:	0800a4a3 	.word	0x0800a4a3
 800a3ec:	0800a4a3 	.word	0x0800a4a3
 800a3f0:	0800a4a3 	.word	0x0800a4a3
 800a3f4:	0800a46f 	.word	0x0800a46f
 800a3f8:	0800a4a3 	.word	0x0800a4a3
 800a3fc:	0800a4a3 	.word	0x0800a4a3
 800a400:	0800a4a3 	.word	0x0800a4a3
 800a404:	0800a4a3 	.word	0x0800a4a3
 800a408:	0800a4a3 	.word	0x0800a4a3
 800a40c:	0800a4a3 	.word	0x0800a4a3
 800a410:	0800a4a3 	.word	0x0800a4a3
 800a414:	0800a4a3 	.word	0x0800a4a3
 800a418:	0800a4a3 	.word	0x0800a4a3
 800a41c:	0800a4a3 	.word	0x0800a4a3
 800a420:	0800a4a3 	.word	0x0800a4a3
 800a424:	0800a4a3 	.word	0x0800a4a3
 800a428:	0800a4a3 	.word	0x0800a4a3
 800a42c:	0800a4a3 	.word	0x0800a4a3
 800a430:	0800a4a3 	.word	0x0800a4a3
 800a434:	0800a495 	.word	0x0800a495
 800a438:	2b40      	cmp	r3, #64	@ 0x40
 800a43a:	d02e      	beq.n	800a49a <UART_SetConfig+0xa36>
 800a43c:	e031      	b.n	800a4a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a43e:	f7fc ffef 	bl	8007420 <HAL_RCC_GetPCLK1Freq>
 800a442:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a444:	e033      	b.n	800a4ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a446:	f7fd f801 	bl	800744c <HAL_RCC_GetPCLK2Freq>
 800a44a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a44c:	e02f      	b.n	800a4ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a44e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a452:	4618      	mov	r0, r3
 800a454:	f7fe fa72 	bl	800893c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a45c:	e027      	b.n	800a4ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a45e:	f107 0318 	add.w	r3, r7, #24
 800a462:	4618      	mov	r0, r3
 800a464:	f7fe fbbe 	bl	8008be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a46c:	e01f      	b.n	800a4ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a46e:	4b2d      	ldr	r3, [pc, #180]	@ (800a524 <UART_SetConfig+0xac0>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f003 0320 	and.w	r3, r3, #32
 800a476:	2b00      	cmp	r3, #0
 800a478:	d009      	beq.n	800a48e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a47a:	4b2a      	ldr	r3, [pc, #168]	@ (800a524 <UART_SetConfig+0xac0>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	08db      	lsrs	r3, r3, #3
 800a480:	f003 0303 	and.w	r3, r3, #3
 800a484:	4a28      	ldr	r2, [pc, #160]	@ (800a528 <UART_SetConfig+0xac4>)
 800a486:	fa22 f303 	lsr.w	r3, r2, r3
 800a48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a48c:	e00f      	b.n	800a4ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a48e:	4b26      	ldr	r3, [pc, #152]	@ (800a528 <UART_SetConfig+0xac4>)
 800a490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a492:	e00c      	b.n	800a4ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a494:	4b25      	ldr	r3, [pc, #148]	@ (800a52c <UART_SetConfig+0xac8>)
 800a496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a498:	e009      	b.n	800a4ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a49a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4a0:	e005      	b.n	800a4ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a4ac:	bf00      	nop
    }

    if (pclk != 0U)
 800a4ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d021      	beq.n	800a4f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a530 <UART_SetConfig+0xacc>)
 800a4ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	085b      	lsrs	r3, r3, #1
 800a4cc:	441a      	add	r2, r3
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4da:	2b0f      	cmp	r3, #15
 800a4dc:	d909      	bls.n	800a4f2 <UART_SetConfig+0xa8e>
 800a4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4e4:	d205      	bcs.n	800a4f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	60da      	str	r2, [r3, #12]
 800a4f0:	e002      	b.n	800a4f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2201      	movs	r2, #1
 800a504:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	2200      	movs	r2, #0
 800a50c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	2200      	movs	r2, #0
 800a512:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a514:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3748      	adds	r7, #72	@ 0x48
 800a51c:	46bd      	mov	sp, r7
 800a51e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a522:	bf00      	nop
 800a524:	58024400 	.word	0x58024400
 800a528:	03d09000 	.word	0x03d09000
 800a52c:	003d0900 	.word	0x003d0900
 800a530:	08011370 	.word	0x08011370

0800a534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a540:	f003 0308 	and.w	r3, r3, #8
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00a      	beq.n	800a55e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	430a      	orrs	r2, r1
 800a55c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a562:	f003 0301 	and.w	r3, r3, #1
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00a      	beq.n	800a580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	430a      	orrs	r2, r1
 800a57e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a584:	f003 0302 	and.w	r3, r3, #2
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00a      	beq.n	800a5a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	430a      	orrs	r2, r1
 800a5a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a6:	f003 0304 	and.w	r3, r3, #4
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00a      	beq.n	800a5c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	430a      	orrs	r2, r1
 800a5c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c8:	f003 0310 	and.w	r3, r3, #16
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00a      	beq.n	800a5e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ea:	f003 0320 	and.w	r3, r3, #32
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00a      	beq.n	800a608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	430a      	orrs	r2, r1
 800a606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a60c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a610:	2b00      	cmp	r3, #0
 800a612:	d01a      	beq.n	800a64a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	430a      	orrs	r2, r1
 800a628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a62e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a632:	d10a      	bne.n	800a64a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00a      	beq.n	800a66c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	430a      	orrs	r2, r1
 800a66a:	605a      	str	r2, [r3, #4]
  }
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b098      	sub	sp, #96	@ 0x60
 800a67c:	af02      	add	r7, sp, #8
 800a67e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a688:	f7f7 fcc6 	bl	8002018 <HAL_GetTick>
 800a68c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0308 	and.w	r3, r3, #8
 800a698:	2b08      	cmp	r3, #8
 800a69a:	d12f      	bne.n	800a6fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a69c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f88e 	bl	800a7cc <UART_WaitOnFlagUntilTimeout>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d022      	beq.n	800a6fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6be:	e853 3f00 	ldrex	r3, [r3]
 800a6c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6dc:	e841 2300 	strex	r3, r2, [r1]
 800a6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1e6      	bne.n	800a6b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2220      	movs	r2, #32
 800a6ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	e063      	b.n	800a7c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 0304 	and.w	r3, r3, #4
 800a706:	2b04      	cmp	r3, #4
 800a708:	d149      	bne.n	800a79e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a70a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a712:	2200      	movs	r2, #0
 800a714:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 f857 	bl	800a7cc <UART_WaitOnFlagUntilTimeout>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d03c      	beq.n	800a79e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72c:	e853 3f00 	ldrex	r3, [r3]
 800a730:	623b      	str	r3, [r7, #32]
   return(result);
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	461a      	mov	r2, r3
 800a740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a742:	633b      	str	r3, [r7, #48]	@ 0x30
 800a744:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a746:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a74a:	e841 2300 	strex	r3, r2, [r1]
 800a74e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1e6      	bne.n	800a724 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3308      	adds	r3, #8
 800a75c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	e853 3f00 	ldrex	r3, [r3]
 800a764:	60fb      	str	r3, [r7, #12]
   return(result);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f023 0301 	bic.w	r3, r3, #1
 800a76c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3308      	adds	r3, #8
 800a774:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a776:	61fa      	str	r2, [r7, #28]
 800a778:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77a:	69b9      	ldr	r1, [r7, #24]
 800a77c:	69fa      	ldr	r2, [r7, #28]
 800a77e:	e841 2300 	strex	r3, r2, [r1]
 800a782:	617b      	str	r3, [r7, #20]
   return(result);
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e5      	bne.n	800a756 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2220      	movs	r2, #32
 800a78e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e012      	b.n	800a7c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2220      	movs	r2, #32
 800a7a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2220      	movs	r2, #32
 800a7aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3758      	adds	r7, #88	@ 0x58
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	603b      	str	r3, [r7, #0]
 800a7d8:	4613      	mov	r3, r2
 800a7da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7dc:	e04f      	b.n	800a87e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e4:	d04b      	beq.n	800a87e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7e6:	f7f7 fc17 	bl	8002018 <HAL_GetTick>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	69ba      	ldr	r2, [r7, #24]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d302      	bcc.n	800a7fc <UART_WaitOnFlagUntilTimeout+0x30>
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e04e      	b.n	800a89e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 0304 	and.w	r3, r3, #4
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d037      	beq.n	800a87e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	2b80      	cmp	r3, #128	@ 0x80
 800a812:	d034      	beq.n	800a87e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	2b40      	cmp	r3, #64	@ 0x40
 800a818:	d031      	beq.n	800a87e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	69db      	ldr	r3, [r3, #28]
 800a820:	f003 0308 	and.w	r3, r3, #8
 800a824:	2b08      	cmp	r3, #8
 800a826:	d110      	bne.n	800a84a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2208      	movs	r2, #8
 800a82e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f000 f921 	bl	800aa78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2208      	movs	r2, #8
 800a83a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	e029      	b.n	800a89e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	69db      	ldr	r3, [r3, #28]
 800a850:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a858:	d111      	bne.n	800a87e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a862:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 f907 	bl	800aa78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2220      	movs	r2, #32
 800a86e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a87a:	2303      	movs	r3, #3
 800a87c:	e00f      	b.n	800a89e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	69da      	ldr	r2, [r3, #28]
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	4013      	ands	r3, r2
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	bf0c      	ite	eq
 800a88e:	2301      	moveq	r3, #1
 800a890:	2300      	movne	r3, #0
 800a892:	b2db      	uxtb	r3, r3
 800a894:	461a      	mov	r2, r3
 800a896:	79fb      	ldrb	r3, [r7, #7]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d0a0      	beq.n	800a7de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
	...

0800a8a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b096      	sub	sp, #88	@ 0x58
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	88fa      	ldrh	r2, [r7, #6]
 800a8c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2222      	movs	r2, #34	@ 0x22
 800a8d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d02d      	beq.n	800a93a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8e4:	4a40      	ldr	r2, [pc, #256]	@ (800a9e8 <UART_Start_Receive_DMA+0x140>)
 800a8e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8ee:	4a3f      	ldr	r2, [pc, #252]	@ (800a9ec <UART_Start_Receive_DMA+0x144>)
 800a8f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8f8:	4a3d      	ldr	r2, [pc, #244]	@ (800a9f0 <UART_Start_Receive_DMA+0x148>)
 800a8fa:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a902:	2200      	movs	r2, #0
 800a904:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3324      	adds	r3, #36	@ 0x24
 800a912:	4619      	mov	r1, r3
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a918:	461a      	mov	r2, r3
 800a91a:	88fb      	ldrh	r3, [r7, #6]
 800a91c:	f7f8 f86c 	bl	80029f8 <HAL_DMA_Start_IT>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d009      	beq.n	800a93a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2210      	movs	r2, #16
 800a92a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2220      	movs	r2, #32
 800a932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	e051      	b.n	800a9de <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d018      	beq.n	800a974 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a94a:	e853 3f00 	ldrex	r3, [r3]
 800a94e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a956:	657b      	str	r3, [r7, #84]	@ 0x54
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	461a      	mov	r2, r3
 800a95e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a960:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a962:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a964:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a968:	e841 2300 	strex	r3, r2, [r1]
 800a96c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a96e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1e6      	bne.n	800a942 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	3308      	adds	r3, #8
 800a97a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97e:	e853 3f00 	ldrex	r3, [r3]
 800a982:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a986:	f043 0301 	orr.w	r3, r3, #1
 800a98a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	3308      	adds	r3, #8
 800a992:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a994:	637a      	str	r2, [r7, #52]	@ 0x34
 800a996:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a998:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a99a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a99c:	e841 2300 	strex	r3, r2, [r1]
 800a9a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1e5      	bne.n	800a974 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	e853 3f00 	ldrex	r3, [r3]
 800a9b6:	613b      	str	r3, [r7, #16]
   return(result);
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a9c8:	623a      	str	r2, [r7, #32]
 800a9ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9cc:	69f9      	ldr	r1, [r7, #28]
 800a9ce:	6a3a      	ldr	r2, [r7, #32]
 800a9d0:	e841 2300 	strex	r3, r2, [r1]
 800a9d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1e5      	bne.n	800a9a8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3758      	adds	r7, #88	@ 0x58
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	0800ab45 	.word	0x0800ab45
 800a9ec:	0800ac6d 	.word	0x0800ac6d
 800a9f0:	0800acab 	.word	0x0800acab

0800a9f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b08f      	sub	sp, #60	@ 0x3c
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa02:	6a3b      	ldr	r3, [r7, #32]
 800aa04:	e853 3f00 	ldrex	r3, [r3]
 800aa08:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aa10:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	461a      	mov	r2, r3
 800aa18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa1c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa22:	e841 2300 	strex	r3, r2, [r1]
 800aa26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1e6      	bne.n	800a9fc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3308      	adds	r3, #8
 800aa34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	e853 3f00 	ldrex	r3, [r3]
 800aa3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aa44:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	3308      	adds	r3, #8
 800aa4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa4e:	61ba      	str	r2, [r7, #24]
 800aa50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa52:	6979      	ldr	r1, [r7, #20]
 800aa54:	69ba      	ldr	r2, [r7, #24]
 800aa56:	e841 2300 	strex	r3, r2, [r1]
 800aa5a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1e5      	bne.n	800aa2e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2220      	movs	r2, #32
 800aa66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800aa6a:	bf00      	nop
 800aa6c:	373c      	adds	r7, #60	@ 0x3c
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
	...

0800aa78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b095      	sub	sp, #84	@ 0x54
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa88:	e853 3f00 	ldrex	r3, [r3]
 800aa8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa9e:	643b      	str	r3, [r7, #64]	@ 0x40
 800aaa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aaa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aaa6:	e841 2300 	strex	r3, r2, [r1]
 800aaaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aaac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1e6      	bne.n	800aa80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	3308      	adds	r3, #8
 800aab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	e853 3f00 	ldrex	r3, [r3]
 800aac0:	61fb      	str	r3, [r7, #28]
   return(result);
 800aac2:	69fa      	ldr	r2, [r7, #28]
 800aac4:	4b1e      	ldr	r3, [pc, #120]	@ (800ab40 <UART_EndRxTransfer+0xc8>)
 800aac6:	4013      	ands	r3, r2
 800aac8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	3308      	adds	r3, #8
 800aad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aada:	e841 2300 	strex	r3, r2, [r1]
 800aade:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1e5      	bne.n	800aab2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d118      	bne.n	800ab20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	e853 3f00 	ldrex	r3, [r3]
 800aafa:	60bb      	str	r3, [r7, #8]
   return(result);
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	f023 0310 	bic.w	r3, r3, #16
 800ab02:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab0c:	61bb      	str	r3, [r7, #24]
 800ab0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab10:	6979      	ldr	r1, [r7, #20]
 800ab12:	69ba      	ldr	r2, [r7, #24]
 800ab14:	e841 2300 	strex	r3, r2, [r1]
 800ab18:	613b      	str	r3, [r7, #16]
   return(result);
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1e6      	bne.n	800aaee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2220      	movs	r2, #32
 800ab24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ab34:	bf00      	nop
 800ab36:	3754      	adds	r7, #84	@ 0x54
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	effffffe 	.word	0xeffffffe

0800ab44 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b09c      	sub	sp, #112	@ 0x70
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab50:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	69db      	ldr	r3, [r3, #28]
 800ab56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab5a:	d071      	beq.n	800ac40 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ab5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab6c:	e853 3f00 	ldrex	r3, [r3]
 800ab70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab78:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab82:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ab88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab8a:	e841 2300 	strex	r3, r2, [r1]
 800ab8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ab90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1e6      	bne.n	800ab64 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba0:	e853 3f00 	ldrex	r3, [r3]
 800aba4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aba8:	f023 0301 	bic.w	r3, r3, #1
 800abac:	667b      	str	r3, [r7, #100]	@ 0x64
 800abae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	3308      	adds	r3, #8
 800abb4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800abb6:	647a      	str	r2, [r7, #68]	@ 0x44
 800abb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800abbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abbe:	e841 2300 	strex	r3, r2, [r1]
 800abc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800abc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1e5      	bne.n	800ab96 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	3308      	adds	r3, #8
 800abd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd4:	e853 3f00 	ldrex	r3, [r3]
 800abd8:	623b      	str	r3, [r7, #32]
   return(result);
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abe0:	663b      	str	r3, [r7, #96]	@ 0x60
 800abe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3308      	adds	r3, #8
 800abe8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800abea:	633a      	str	r2, [r7, #48]	@ 0x30
 800abec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abf2:	e841 2300 	strex	r3, r2, [r1]
 800abf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1e5      	bne.n	800abca <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800abfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac00:	2220      	movs	r2, #32
 800ac02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d118      	bne.n	800ac40 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	e853 3f00 	ldrex	r3, [r3]
 800ac1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f023 0310 	bic.w	r3, r3, #16
 800ac22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac2c:	61fb      	str	r3, [r7, #28]
 800ac2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac30:	69b9      	ldr	r1, [r7, #24]
 800ac32:	69fa      	ldr	r2, [r7, #28]
 800ac34:	e841 2300 	strex	r3, r2, [r1]
 800ac38:	617b      	str	r3, [r7, #20]
   return(result);
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1e6      	bne.n	800ac0e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac42:	2200      	movs	r2, #0
 800ac44:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d107      	bne.n	800ac5e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac54:	4619      	mov	r1, r3
 800ac56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ac58:	f7fe fef8 	bl	8009a4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac5c:	e002      	b.n	800ac64 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ac5e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ac60:	f7f6 fcb6 	bl	80015d0 <HAL_UART_RxCpltCallback>
}
 800ac64:	bf00      	nop
 800ac66:	3770      	adds	r7, #112	@ 0x70
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac78:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d109      	bne.n	800ac9c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac8e:	085b      	lsrs	r3, r3, #1
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	4619      	mov	r1, r3
 800ac94:	68f8      	ldr	r0, [r7, #12]
 800ac96:	f7fe fed9 	bl	8009a4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac9a:	e002      	b.n	800aca2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f7f6 fc79 	bl	8001594 <HAL_UART_RxHalfCpltCallback>
}
 800aca2:	bf00      	nop
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b086      	sub	sp, #24
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acb6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acbe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acc6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acd2:	2b80      	cmp	r3, #128	@ 0x80
 800acd4:	d109      	bne.n	800acea <UART_DMAError+0x40>
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	2b21      	cmp	r3, #33	@ 0x21
 800acda:	d106      	bne.n	800acea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	2200      	movs	r2, #0
 800ace0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ace4:	6978      	ldr	r0, [r7, #20]
 800ace6:	f7ff fe85 	bl	800a9f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acf4:	2b40      	cmp	r3, #64	@ 0x40
 800acf6:	d109      	bne.n	800ad0c <UART_DMAError+0x62>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2b22      	cmp	r3, #34	@ 0x22
 800acfc:	d106      	bne.n	800ad0c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ad06:	6978      	ldr	r0, [r7, #20]
 800ad08:	f7ff feb6 	bl	800aa78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad12:	f043 0210 	orr.w	r2, r3, #16
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad1c:	6978      	ldr	r0, [r7, #20]
 800ad1e:	f7fe fe8b 	bl	8009a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad22:	bf00      	nop
 800ad24:	3718      	adds	r7, #24
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad2a:	b480      	push	{r7}
 800ad2c:	b085      	sub	sp, #20
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d101      	bne.n	800ad40 <HAL_UARTEx_DisableFifoMode+0x16>
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	e027      	b.n	800ad90 <HAL_UARTEx_DisableFifoMode+0x66>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2224      	movs	r2, #36	@ 0x24
 800ad4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f022 0201 	bic.w	r2, r2, #1
 800ad66:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2220      	movs	r2, #32
 800ad82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3714      	adds	r7, #20
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800adac:	2b01      	cmp	r3, #1
 800adae:	d101      	bne.n	800adb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800adb0:	2302      	movs	r3, #2
 800adb2:	e02d      	b.n	800ae10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2224      	movs	r2, #36	@ 0x24
 800adc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f022 0201 	bic.w	r2, r2, #1
 800adda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	430a      	orrs	r2, r1
 800adee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f84f 	bl	800ae94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2220      	movs	r2, #32
 800ae02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3710      	adds	r7, #16
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d101      	bne.n	800ae30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	e02d      	b.n	800ae8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2224      	movs	r2, #36	@ 0x24
 800ae3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f022 0201 	bic.w	r2, r2, #1
 800ae56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	430a      	orrs	r2, r1
 800ae6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f811 	bl	800ae94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2220      	movs	r2, #32
 800ae7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d108      	bne.n	800aeb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aeb4:	e031      	b.n	800af1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aeb6:	2310      	movs	r3, #16
 800aeb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aeba:	2310      	movs	r3, #16
 800aebc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	0e5b      	lsrs	r3, r3, #25
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	f003 0307 	and.w	r3, r3, #7
 800aecc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	0f5b      	lsrs	r3, r3, #29
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	f003 0307 	and.w	r3, r3, #7
 800aedc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aede:	7bbb      	ldrb	r3, [r7, #14]
 800aee0:	7b3a      	ldrb	r2, [r7, #12]
 800aee2:	4911      	ldr	r1, [pc, #68]	@ (800af28 <UARTEx_SetNbDataToProcess+0x94>)
 800aee4:	5c8a      	ldrb	r2, [r1, r2]
 800aee6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aeea:	7b3a      	ldrb	r2, [r7, #12]
 800aeec:	490f      	ldr	r1, [pc, #60]	@ (800af2c <UARTEx_SetNbDataToProcess+0x98>)
 800aeee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aef0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aef4:	b29a      	uxth	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	7b7a      	ldrb	r2, [r7, #13]
 800af00:	4909      	ldr	r1, [pc, #36]	@ (800af28 <UARTEx_SetNbDataToProcess+0x94>)
 800af02:	5c8a      	ldrb	r2, [r1, r2]
 800af04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af08:	7b7a      	ldrb	r2, [r7, #13]
 800af0a:	4908      	ldr	r1, [pc, #32]	@ (800af2c <UARTEx_SetNbDataToProcess+0x98>)
 800af0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af0e:	fb93 f3f2 	sdiv	r3, r3, r2
 800af12:	b29a      	uxth	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800af1a:	bf00      	nop
 800af1c:	3714      	adds	r7, #20
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	08011388 	.word	0x08011388
 800af2c:	08011390 	.word	0x08011390

0800af30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af30:	b084      	sub	sp, #16
 800af32:	b580      	push	{r7, lr}
 800af34:	b084      	sub	sp, #16
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	f107 001c 	add.w	r0, r7, #28
 800af3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800af46:	2b01      	cmp	r3, #1
 800af48:	d121      	bne.n	800af8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	68da      	ldr	r2, [r3, #12]
 800af5a:	4b2c      	ldr	r3, [pc, #176]	@ (800b00c <USB_CoreInit+0xdc>)
 800af5c:	4013      	ands	r3, r2
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800af6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800af72:	2b01      	cmp	r3, #1
 800af74:	d105      	bne.n	800af82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f001 fafa 	bl	800c57c <USB_CoreReset>
 800af88:	4603      	mov	r3, r0
 800af8a:	73fb      	strb	r3, [r7, #15]
 800af8c:	e01b      	b.n	800afc6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f001 faee 	bl	800c57c <USB_CoreReset>
 800afa0:	4603      	mov	r3, r0
 800afa2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800afa4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d106      	bne.n	800afba <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	639a      	str	r2, [r3, #56]	@ 0x38
 800afb8:	e005      	b.n	800afc6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800afc6:	7fbb      	ldrb	r3, [r7, #30]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d116      	bne.n	800affa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800afda:	4b0d      	ldr	r3, [pc, #52]	@ (800b010 <USB_CoreInit+0xe0>)
 800afdc:	4313      	orrs	r3, r2
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	f043 0206 	orr.w	r2, r3, #6
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	f043 0220 	orr.w	r2, r3, #32
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800affa:	7bfb      	ldrb	r3, [r7, #15]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b006:	b004      	add	sp, #16
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	ffbdffbf 	.word	0xffbdffbf
 800b010:	03ee0000 	.word	0x03ee0000

0800b014 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b014:	b480      	push	{r7}
 800b016:	b087      	sub	sp, #28
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	4613      	mov	r3, r2
 800b020:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b022:	79fb      	ldrb	r3, [r7, #7]
 800b024:	2b02      	cmp	r3, #2
 800b026:	d165      	bne.n	800b0f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	4a41      	ldr	r2, [pc, #260]	@ (800b130 <USB_SetTurnaroundTime+0x11c>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d906      	bls.n	800b03e <USB_SetTurnaroundTime+0x2a>
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	4a40      	ldr	r2, [pc, #256]	@ (800b134 <USB_SetTurnaroundTime+0x120>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d202      	bcs.n	800b03e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b038:	230f      	movs	r3, #15
 800b03a:	617b      	str	r3, [r7, #20]
 800b03c:	e062      	b.n	800b104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	4a3c      	ldr	r2, [pc, #240]	@ (800b134 <USB_SetTurnaroundTime+0x120>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d306      	bcc.n	800b054 <USB_SetTurnaroundTime+0x40>
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	4a3b      	ldr	r2, [pc, #236]	@ (800b138 <USB_SetTurnaroundTime+0x124>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d202      	bcs.n	800b054 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b04e:	230e      	movs	r3, #14
 800b050:	617b      	str	r3, [r7, #20]
 800b052:	e057      	b.n	800b104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	4a38      	ldr	r2, [pc, #224]	@ (800b138 <USB_SetTurnaroundTime+0x124>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d306      	bcc.n	800b06a <USB_SetTurnaroundTime+0x56>
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	4a37      	ldr	r2, [pc, #220]	@ (800b13c <USB_SetTurnaroundTime+0x128>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d202      	bcs.n	800b06a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b064:	230d      	movs	r3, #13
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	e04c      	b.n	800b104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	4a33      	ldr	r2, [pc, #204]	@ (800b13c <USB_SetTurnaroundTime+0x128>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d306      	bcc.n	800b080 <USB_SetTurnaroundTime+0x6c>
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	4a32      	ldr	r2, [pc, #200]	@ (800b140 <USB_SetTurnaroundTime+0x12c>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d802      	bhi.n	800b080 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b07a:	230c      	movs	r3, #12
 800b07c:	617b      	str	r3, [r7, #20]
 800b07e:	e041      	b.n	800b104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	4a2f      	ldr	r2, [pc, #188]	@ (800b140 <USB_SetTurnaroundTime+0x12c>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d906      	bls.n	800b096 <USB_SetTurnaroundTime+0x82>
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	4a2e      	ldr	r2, [pc, #184]	@ (800b144 <USB_SetTurnaroundTime+0x130>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d802      	bhi.n	800b096 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b090:	230b      	movs	r3, #11
 800b092:	617b      	str	r3, [r7, #20]
 800b094:	e036      	b.n	800b104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	4a2a      	ldr	r2, [pc, #168]	@ (800b144 <USB_SetTurnaroundTime+0x130>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d906      	bls.n	800b0ac <USB_SetTurnaroundTime+0x98>
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	4a29      	ldr	r2, [pc, #164]	@ (800b148 <USB_SetTurnaroundTime+0x134>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d802      	bhi.n	800b0ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b0a6:	230a      	movs	r3, #10
 800b0a8:	617b      	str	r3, [r7, #20]
 800b0aa:	e02b      	b.n	800b104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	4a26      	ldr	r2, [pc, #152]	@ (800b148 <USB_SetTurnaroundTime+0x134>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d906      	bls.n	800b0c2 <USB_SetTurnaroundTime+0xae>
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	4a25      	ldr	r2, [pc, #148]	@ (800b14c <USB_SetTurnaroundTime+0x138>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d202      	bcs.n	800b0c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b0bc:	2309      	movs	r3, #9
 800b0be:	617b      	str	r3, [r7, #20]
 800b0c0:	e020      	b.n	800b104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	4a21      	ldr	r2, [pc, #132]	@ (800b14c <USB_SetTurnaroundTime+0x138>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d306      	bcc.n	800b0d8 <USB_SetTurnaroundTime+0xc4>
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	4a20      	ldr	r2, [pc, #128]	@ (800b150 <USB_SetTurnaroundTime+0x13c>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d802      	bhi.n	800b0d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b0d2:	2308      	movs	r3, #8
 800b0d4:	617b      	str	r3, [r7, #20]
 800b0d6:	e015      	b.n	800b104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	4a1d      	ldr	r2, [pc, #116]	@ (800b150 <USB_SetTurnaroundTime+0x13c>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d906      	bls.n	800b0ee <USB_SetTurnaroundTime+0xda>
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	4a1c      	ldr	r2, [pc, #112]	@ (800b154 <USB_SetTurnaroundTime+0x140>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d202      	bcs.n	800b0ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b0e8:	2307      	movs	r3, #7
 800b0ea:	617b      	str	r3, [r7, #20]
 800b0ec:	e00a      	b.n	800b104 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b0ee:	2306      	movs	r3, #6
 800b0f0:	617b      	str	r3, [r7, #20]
 800b0f2:	e007      	b.n	800b104 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b0f4:	79fb      	ldrb	r3, [r7, #7]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d102      	bne.n	800b100 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b0fa:	2309      	movs	r3, #9
 800b0fc:	617b      	str	r3, [r7, #20]
 800b0fe:	e001      	b.n	800b104 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b100:	2309      	movs	r3, #9
 800b102:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	68da      	ldr	r2, [r3, #12]
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	029b      	lsls	r3, r3, #10
 800b118:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b11c:	431a      	orrs	r2, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	371c      	adds	r7, #28
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	00d8acbf 	.word	0x00d8acbf
 800b134:	00e4e1c0 	.word	0x00e4e1c0
 800b138:	00f42400 	.word	0x00f42400
 800b13c:	01067380 	.word	0x01067380
 800b140:	011a499f 	.word	0x011a499f
 800b144:	01312cff 	.word	0x01312cff
 800b148:	014ca43f 	.word	0x014ca43f
 800b14c:	016e3600 	.word	0x016e3600
 800b150:	01a6ab1f 	.word	0x01a6ab1f
 800b154:	01e84800 	.word	0x01e84800

0800b158 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	f043 0201 	orr.w	r2, r3, #1
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b16c:	2300      	movs	r3, #0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b083      	sub	sp, #12
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	f023 0201 	bic.w	r2, r3, #1
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b1b8:	78fb      	ldrb	r3, [r7, #3]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d115      	bne.n	800b1ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b1ca:	200a      	movs	r0, #10
 800b1cc:	f7f6 ff30 	bl	8002030 <HAL_Delay>
      ms += 10U;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	330a      	adds	r3, #10
 800b1d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f001 f93f 	bl	800c45a <USB_GetMode>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d01e      	beq.n	800b220 <USB_SetCurrentMode+0x84>
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2bc7      	cmp	r3, #199	@ 0xc7
 800b1e6:	d9f0      	bls.n	800b1ca <USB_SetCurrentMode+0x2e>
 800b1e8:	e01a      	b.n	800b220 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b1ea:	78fb      	ldrb	r3, [r7, #3]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d115      	bne.n	800b21c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b1fc:	200a      	movs	r0, #10
 800b1fe:	f7f6 ff17 	bl	8002030 <HAL_Delay>
      ms += 10U;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	330a      	adds	r3, #10
 800b206:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f001 f926 	bl	800c45a <USB_GetMode>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d005      	beq.n	800b220 <USB_SetCurrentMode+0x84>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2bc7      	cmp	r3, #199	@ 0xc7
 800b218:	d9f0      	bls.n	800b1fc <USB_SetCurrentMode+0x60>
 800b21a:	e001      	b.n	800b220 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e005      	b.n	800b22c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2bc8      	cmp	r3, #200	@ 0xc8
 800b224:	d101      	bne.n	800b22a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	e000      	b.n	800b22c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b234:	b084      	sub	sp, #16
 800b236:	b580      	push	{r7, lr}
 800b238:	b086      	sub	sp, #24
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b246:	2300      	movs	r3, #0
 800b248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b24e:	2300      	movs	r3, #0
 800b250:	613b      	str	r3, [r7, #16]
 800b252:	e009      	b.n	800b268 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	3340      	adds	r3, #64	@ 0x40
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4413      	add	r3, r2
 800b25e:	2200      	movs	r2, #0
 800b260:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	3301      	adds	r3, #1
 800b266:	613b      	str	r3, [r7, #16]
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	2b0e      	cmp	r3, #14
 800b26c:	d9f2      	bls.n	800b254 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b26e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b272:	2b00      	cmp	r3, #0
 800b274:	d11c      	bne.n	800b2b0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b284:	f043 0302 	orr.w	r3, r3, #2
 800b288:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b28e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	601a      	str	r2, [r3, #0]
 800b2ae:	e005      	b.n	800b2bc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b2c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d10d      	bne.n	800b2ec <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b2d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d104      	bne.n	800b2e2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b2d8:	2100      	movs	r1, #0
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f968 	bl	800b5b0 <USB_SetDevSpeed>
 800b2e0:	e008      	b.n	800b2f4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b2e2:	2101      	movs	r1, #1
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f963 	bl	800b5b0 <USB_SetDevSpeed>
 800b2ea:	e003      	b.n	800b2f4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b2ec:	2103      	movs	r1, #3
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f95e 	bl	800b5b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b2f4:	2110      	movs	r1, #16
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f8fa 	bl	800b4f0 <USB_FlushTxFifo>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b302:	2301      	movs	r3, #1
 800b304:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f924 	bl	800b554 <USB_FlushRxFifo>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b31c:	461a      	mov	r2, r3
 800b31e:	2300      	movs	r3, #0
 800b320:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b328:	461a      	mov	r2, r3
 800b32a:	2300      	movs	r3, #0
 800b32c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b334:	461a      	mov	r2, r3
 800b336:	2300      	movs	r3, #0
 800b338:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b33a:	2300      	movs	r3, #0
 800b33c:	613b      	str	r3, [r7, #16]
 800b33e:	e043      	b.n	800b3c8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	015a      	lsls	r2, r3, #5
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	4413      	add	r3, r2
 800b348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b352:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b356:	d118      	bne.n	800b38a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10a      	bne.n	800b374 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	015a      	lsls	r2, r3, #5
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	4413      	add	r3, r2
 800b366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b36a:	461a      	mov	r2, r3
 800b36c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b370:	6013      	str	r3, [r2, #0]
 800b372:	e013      	b.n	800b39c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	015a      	lsls	r2, r3, #5
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	4413      	add	r3, r2
 800b37c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b380:	461a      	mov	r2, r3
 800b382:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b386:	6013      	str	r3, [r2, #0]
 800b388:	e008      	b.n	800b39c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	015a      	lsls	r2, r3, #5
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	4413      	add	r3, r2
 800b392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b396:	461a      	mov	r2, r3
 800b398:	2300      	movs	r3, #0
 800b39a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	015a      	lsls	r2, r3, #5
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	015a      	lsls	r2, r3, #5
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b3c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	613b      	str	r3, [r7, #16]
 800b3c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d3b5      	bcc.n	800b340 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	613b      	str	r3, [r7, #16]
 800b3d8:	e043      	b.n	800b462 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	015a      	lsls	r2, r3, #5
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b3ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3f0:	d118      	bne.n	800b424 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10a      	bne.n	800b40e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	015a      	lsls	r2, r3, #5
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	4413      	add	r3, r2
 800b400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b404:	461a      	mov	r2, r3
 800b406:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b40a:	6013      	str	r3, [r2, #0]
 800b40c:	e013      	b.n	800b436 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	015a      	lsls	r2, r3, #5
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	4413      	add	r3, r2
 800b416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b41a:	461a      	mov	r2, r3
 800b41c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	e008      	b.n	800b436 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	015a      	lsls	r2, r3, #5
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b430:	461a      	mov	r2, r3
 800b432:	2300      	movs	r3, #0
 800b434:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	015a      	lsls	r2, r3, #5
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	4413      	add	r3, r2
 800b43e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b442:	461a      	mov	r2, r3
 800b444:	2300      	movs	r3, #0
 800b446:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	015a      	lsls	r2, r3, #5
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	4413      	add	r3, r2
 800b450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b454:	461a      	mov	r2, r3
 800b456:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b45a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	3301      	adds	r3, #1
 800b460:	613b      	str	r3, [r7, #16]
 800b462:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b466:	461a      	mov	r2, r3
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d3b5      	bcc.n	800b3da <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b47c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b480:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b48e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b490:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b494:	2b00      	cmp	r3, #0
 800b496:	d105      	bne.n	800b4a4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	699b      	ldr	r3, [r3, #24]
 800b49c:	f043 0210 	orr.w	r2, r3, #16
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	699a      	ldr	r2, [r3, #24]
 800b4a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b4e8 <USB_DevInit+0x2b4>)
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b4b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d005      	beq.n	800b4c4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	699b      	ldr	r3, [r3, #24]
 800b4bc:	f043 0208 	orr.w	r2, r3, #8
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b4c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d105      	bne.n	800b4d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	699a      	ldr	r2, [r3, #24]
 800b4d0:	4b06      	ldr	r3, [pc, #24]	@ (800b4ec <USB_DevInit+0x2b8>)
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b4d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3718      	adds	r7, #24
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4e4:	b004      	add	sp, #16
 800b4e6:	4770      	bx	lr
 800b4e8:	803c3800 	.word	0x803c3800
 800b4ec:	40000004 	.word	0x40000004

0800b4f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3301      	adds	r3, #1
 800b502:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b50a:	d901      	bls.n	800b510 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b50c:	2303      	movs	r3, #3
 800b50e:	e01b      	b.n	800b548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	daf2      	bge.n	800b4fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b518:	2300      	movs	r3, #0
 800b51a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	019b      	lsls	r3, r3, #6
 800b520:	f043 0220 	orr.w	r2, r3, #32
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	3301      	adds	r3, #1
 800b52c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b534:	d901      	bls.n	800b53a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b536:	2303      	movs	r3, #3
 800b538:	e006      	b.n	800b548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	691b      	ldr	r3, [r3, #16]
 800b53e:	f003 0320 	and.w	r3, r3, #32
 800b542:	2b20      	cmp	r3, #32
 800b544:	d0f0      	beq.n	800b528 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b546:	2300      	movs	r3, #0
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3714      	adds	r7, #20
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b55c:	2300      	movs	r3, #0
 800b55e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	3301      	adds	r3, #1
 800b564:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b56c:	d901      	bls.n	800b572 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b56e:	2303      	movs	r3, #3
 800b570:	e018      	b.n	800b5a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	2b00      	cmp	r3, #0
 800b578:	daf2      	bge.n	800b560 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b57a:	2300      	movs	r3, #0
 800b57c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2210      	movs	r2, #16
 800b582:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	3301      	adds	r3, #1
 800b588:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b590:	d901      	bls.n	800b596 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b592:	2303      	movs	r3, #3
 800b594:	e006      	b.n	800b5a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	f003 0310 	and.w	r3, r3, #16
 800b59e:	2b10      	cmp	r3, #16
 800b5a0:	d0f0      	beq.n	800b584 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3714      	adds	r7, #20
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	78fb      	ldrb	r3, [r7, #3]
 800b5ca:	68f9      	ldr	r1, [r7, #12]
 800b5cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3714      	adds	r7, #20
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr

0800b5e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b087      	sub	sp, #28
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5f4:	689b      	ldr	r3, [r3, #8]
 800b5f6:	f003 0306 	and.w	r3, r3, #6
 800b5fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d102      	bne.n	800b608 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b602:	2300      	movs	r3, #0
 800b604:	75fb      	strb	r3, [r7, #23]
 800b606:	e00a      	b.n	800b61e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2b02      	cmp	r3, #2
 800b60c:	d002      	beq.n	800b614 <USB_GetDevSpeed+0x32>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2b06      	cmp	r3, #6
 800b612:	d102      	bne.n	800b61a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b614:	2302      	movs	r3, #2
 800b616:	75fb      	strb	r3, [r7, #23]
 800b618:	e001      	b.n	800b61e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b61a:	230f      	movs	r3, #15
 800b61c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b61e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b620:	4618      	mov	r0, r3
 800b622:	371c      	adds	r7, #28
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	785b      	ldrb	r3, [r3, #1]
 800b644:	2b01      	cmp	r3, #1
 800b646:	d139      	bne.n	800b6bc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b64e:	69da      	ldr	r2, [r3, #28]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	f003 030f 	and.w	r3, r3, #15
 800b658:	2101      	movs	r1, #1
 800b65a:	fa01 f303 	lsl.w	r3, r1, r3
 800b65e:	b29b      	uxth	r3, r3
 800b660:	68f9      	ldr	r1, [r7, #12]
 800b662:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b666:	4313      	orrs	r3, r2
 800b668:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	015a      	lsls	r2, r3, #5
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	4413      	add	r3, r2
 800b672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d153      	bne.n	800b728 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	015a      	lsls	r2, r3, #5
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	4413      	add	r3, r2
 800b688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	791b      	ldrb	r3, [r3, #4]
 800b69a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b69c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	059b      	lsls	r3, r3, #22
 800b6a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b6a4:	431a      	orrs	r2, r3
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	0159      	lsls	r1, r3, #5
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	440b      	add	r3, r1
 800b6ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	4b20      	ldr	r3, [pc, #128]	@ (800b738 <USB_ActivateEndpoint+0x10c>)
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	600b      	str	r3, [r1, #0]
 800b6ba:	e035      	b.n	800b728 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6c2:	69da      	ldr	r2, [r3, #28]
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f003 030f 	and.w	r3, r3, #15
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b6d2:	041b      	lsls	r3, r3, #16
 800b6d4:	68f9      	ldr	r1, [r7, #12]
 800b6d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	015a      	lsls	r2, r3, #5
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d119      	bne.n	800b728 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	015a      	lsls	r2, r3, #5
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	791b      	ldrb	r3, [r3, #4]
 800b70e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b710:	430b      	orrs	r3, r1
 800b712:	431a      	orrs	r2, r3
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	0159      	lsls	r1, r3, #5
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	440b      	add	r3, r1
 800b71c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b720:	4619      	mov	r1, r3
 800b722:	4b05      	ldr	r3, [pc, #20]	@ (800b738 <USB_ActivateEndpoint+0x10c>)
 800b724:	4313      	orrs	r3, r2
 800b726:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b728:	2300      	movs	r3, #0
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3714      	adds	r7, #20
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	10008000 	.word	0x10008000

0800b73c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	785b      	ldrb	r3, [r3, #1]
 800b754:	2b01      	cmp	r3, #1
 800b756:	d161      	bne.n	800b81c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	015a      	lsls	r2, r3, #5
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	4413      	add	r3, r2
 800b760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b76a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b76e:	d11f      	bne.n	800b7b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	015a      	lsls	r2, r3, #5
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	4413      	add	r3, r2
 800b778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	0151      	lsls	r1, r2, #5
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	440a      	add	r2, r1
 800b786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b78a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b78e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	015a      	lsls	r2, r3, #5
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	4413      	add	r3, r2
 800b798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	0151      	lsls	r1, r2, #5
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	440a      	add	r2, r1
 800b7a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b7ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	f003 030f 	and.w	r3, r3, #15
 800b7c0:	2101      	movs	r1, #1
 800b7c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	43db      	mvns	r3, r3
 800b7ca:	68f9      	ldr	r1, [r7, #12]
 800b7cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7da:	69da      	ldr	r2, [r3, #28]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	f003 030f 	and.w	r3, r3, #15
 800b7e4:	2101      	movs	r1, #1
 800b7e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	43db      	mvns	r3, r3
 800b7ee:	68f9      	ldr	r1, [r7, #12]
 800b7f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b7f4:	4013      	ands	r3, r2
 800b7f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	015a      	lsls	r2, r3, #5
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	4413      	add	r3, r2
 800b800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	0159      	lsls	r1, r3, #5
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	440b      	add	r3, r1
 800b80e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b812:	4619      	mov	r1, r3
 800b814:	4b35      	ldr	r3, [pc, #212]	@ (800b8ec <USB_DeactivateEndpoint+0x1b0>)
 800b816:	4013      	ands	r3, r2
 800b818:	600b      	str	r3, [r1, #0]
 800b81a:	e060      	b.n	800b8de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	015a      	lsls	r2, r3, #5
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	4413      	add	r3, r2
 800b824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b82e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b832:	d11f      	bne.n	800b874 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	015a      	lsls	r2, r3, #5
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	4413      	add	r3, r2
 800b83c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	0151      	lsls	r1, r2, #5
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	440a      	add	r2, r1
 800b84a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b84e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b852:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	015a      	lsls	r2, r3, #5
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	4413      	add	r3, r2
 800b85c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	0151      	lsls	r1, r2, #5
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	440a      	add	r2, r1
 800b86a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b86e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b872:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b87a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	f003 030f 	and.w	r3, r3, #15
 800b884:	2101      	movs	r1, #1
 800b886:	fa01 f303 	lsl.w	r3, r1, r3
 800b88a:	041b      	lsls	r3, r3, #16
 800b88c:	43db      	mvns	r3, r3
 800b88e:	68f9      	ldr	r1, [r7, #12]
 800b890:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b894:	4013      	ands	r3, r2
 800b896:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b89e:	69da      	ldr	r2, [r3, #28]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	f003 030f 	and.w	r3, r3, #15
 800b8a8:	2101      	movs	r1, #1
 800b8aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ae:	041b      	lsls	r3, r3, #16
 800b8b0:	43db      	mvns	r3, r3
 800b8b2:	68f9      	ldr	r1, [r7, #12]
 800b8b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b8b8:	4013      	ands	r3, r2
 800b8ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	015a      	lsls	r2, r3, #5
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	0159      	lsls	r1, r3, #5
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	440b      	add	r3, r1
 800b8d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	4b05      	ldr	r3, [pc, #20]	@ (800b8f0 <USB_DeactivateEndpoint+0x1b4>)
 800b8da:	4013      	ands	r3, r2
 800b8dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr
 800b8ec:	ec337800 	.word	0xec337800
 800b8f0:	eff37800 	.word	0xeff37800

0800b8f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b08a      	sub	sp, #40	@ 0x28
 800b8f8:	af02      	add	r7, sp, #8
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	4613      	mov	r3, r2
 800b900:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	785b      	ldrb	r3, [r3, #1]
 800b910:	2b01      	cmp	r3, #1
 800b912:	f040 8185 	bne.w	800bc20 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d132      	bne.n	800b984 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	015a      	lsls	r2, r3, #5
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	4413      	add	r3, r2
 800b926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b92a:	691a      	ldr	r2, [r3, #16]
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	0159      	lsls	r1, r3, #5
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	440b      	add	r3, r1
 800b934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b938:	4619      	mov	r1, r3
 800b93a:	4ba7      	ldr	r3, [pc, #668]	@ (800bbd8 <USB_EPStartXfer+0x2e4>)
 800b93c:	4013      	ands	r3, r2
 800b93e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	015a      	lsls	r2, r3, #5
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	4413      	add	r3, r2
 800b948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	69ba      	ldr	r2, [r7, #24]
 800b950:	0151      	lsls	r1, r2, #5
 800b952:	69fa      	ldr	r2, [r7, #28]
 800b954:	440a      	add	r2, r1
 800b956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b95a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b95e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	015a      	lsls	r2, r3, #5
 800b964:	69fb      	ldr	r3, [r7, #28]
 800b966:	4413      	add	r3, r2
 800b968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b96c:	691a      	ldr	r2, [r3, #16]
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	0159      	lsls	r1, r3, #5
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	440b      	add	r3, r1
 800b976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b97a:	4619      	mov	r1, r3
 800b97c:	4b97      	ldr	r3, [pc, #604]	@ (800bbdc <USB_EPStartXfer+0x2e8>)
 800b97e:	4013      	ands	r3, r2
 800b980:	610b      	str	r3, [r1, #16]
 800b982:	e097      	b.n	800bab4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	015a      	lsls	r2, r3, #5
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	4413      	add	r3, r2
 800b98c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b990:	691a      	ldr	r2, [r3, #16]
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	0159      	lsls	r1, r3, #5
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	440b      	add	r3, r1
 800b99a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b99e:	4619      	mov	r1, r3
 800b9a0:	4b8e      	ldr	r3, [pc, #568]	@ (800bbdc <USB_EPStartXfer+0x2e8>)
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	015a      	lsls	r2, r3, #5
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9b2:	691a      	ldr	r2, [r3, #16]
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	0159      	lsls	r1, r3, #5
 800b9b8:	69fb      	ldr	r3, [r7, #28]
 800b9ba:	440b      	add	r3, r1
 800b9bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4b85      	ldr	r3, [pc, #532]	@ (800bbd8 <USB_EPStartXfer+0x2e4>)
 800b9c4:	4013      	ands	r3, r2
 800b9c6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d11a      	bne.n	800ba04 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	691a      	ldr	r2, [r3, #16]
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d903      	bls.n	800b9e2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	689a      	ldr	r2, [r3, #8]
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	015a      	lsls	r2, r3, #5
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	69ba      	ldr	r2, [r7, #24]
 800b9f2:	0151      	lsls	r1, r2, #5
 800b9f4:	69fa      	ldr	r2, [r7, #28]
 800b9f6:	440a      	add	r2, r1
 800b9f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ba00:	6113      	str	r3, [r2, #16]
 800ba02:	e044      	b.n	800ba8e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	691a      	ldr	r2, [r3, #16]
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	1e5a      	subs	r2, r3, #1
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba18:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	015a      	lsls	r2, r3, #5
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	4413      	add	r3, r2
 800ba22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba26:	691a      	ldr	r2, [r3, #16]
 800ba28:	8afb      	ldrh	r3, [r7, #22]
 800ba2a:	04d9      	lsls	r1, r3, #19
 800ba2c:	4b6c      	ldr	r3, [pc, #432]	@ (800bbe0 <USB_EPStartXfer+0x2ec>)
 800ba2e:	400b      	ands	r3, r1
 800ba30:	69b9      	ldr	r1, [r7, #24]
 800ba32:	0148      	lsls	r0, r1, #5
 800ba34:	69f9      	ldr	r1, [r7, #28]
 800ba36:	4401      	add	r1, r0
 800ba38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	791b      	ldrb	r3, [r3, #4]
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d122      	bne.n	800ba8e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	015a      	lsls	r2, r3, #5
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	4413      	add	r3, r2
 800ba50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	69ba      	ldr	r2, [r7, #24]
 800ba58:	0151      	lsls	r1, r2, #5
 800ba5a:	69fa      	ldr	r2, [r7, #28]
 800ba5c:	440a      	add	r2, r1
 800ba5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba62:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ba66:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	015a      	lsls	r2, r3, #5
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	4413      	add	r3, r2
 800ba70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba74:	691a      	ldr	r2, [r3, #16]
 800ba76:	8afb      	ldrh	r3, [r7, #22]
 800ba78:	075b      	lsls	r3, r3, #29
 800ba7a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800ba7e:	69b9      	ldr	r1, [r7, #24]
 800ba80:	0148      	lsls	r0, r1, #5
 800ba82:	69f9      	ldr	r1, [r7, #28]
 800ba84:	4401      	add	r1, r0
 800ba86:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	015a      	lsls	r2, r3, #5
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	4413      	add	r3, r2
 800ba96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba9a:	691a      	ldr	r2, [r3, #16]
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	691b      	ldr	r3, [r3, #16]
 800baa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800baa4:	69b9      	ldr	r1, [r7, #24]
 800baa6:	0148      	lsls	r0, r1, #5
 800baa8:	69f9      	ldr	r1, [r7, #28]
 800baaa:	4401      	add	r1, r0
 800baac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bab0:	4313      	orrs	r3, r2
 800bab2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bab4:	79fb      	ldrb	r3, [r7, #7]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d14b      	bne.n	800bb52 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	69db      	ldr	r3, [r3, #28]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d009      	beq.n	800bad6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	015a      	lsls	r2, r3, #5
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	4413      	add	r3, r2
 800baca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bace:	461a      	mov	r2, r3
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	69db      	ldr	r3, [r3, #28]
 800bad4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	791b      	ldrb	r3, [r3, #4]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d128      	bne.n	800bb30 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800baea:	2b00      	cmp	r3, #0
 800baec:	d110      	bne.n	800bb10 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	015a      	lsls	r2, r3, #5
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	4413      	add	r3, r2
 800baf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	69ba      	ldr	r2, [r7, #24]
 800bafe:	0151      	lsls	r1, r2, #5
 800bb00:	69fa      	ldr	r2, [r7, #28]
 800bb02:	440a      	add	r2, r1
 800bb04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bb0c:	6013      	str	r3, [r2, #0]
 800bb0e:	e00f      	b.n	800bb30 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	015a      	lsls	r2, r3, #5
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	4413      	add	r3, r2
 800bb18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	69ba      	ldr	r2, [r7, #24]
 800bb20:	0151      	lsls	r1, r2, #5
 800bb22:	69fa      	ldr	r2, [r7, #28]
 800bb24:	440a      	add	r2, r1
 800bb26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb2e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	015a      	lsls	r2, r3, #5
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	4413      	add	r3, r2
 800bb38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	69ba      	ldr	r2, [r7, #24]
 800bb40:	0151      	lsls	r1, r2, #5
 800bb42:	69fa      	ldr	r2, [r7, #28]
 800bb44:	440a      	add	r2, r1
 800bb46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb4a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bb4e:	6013      	str	r3, [r2, #0]
 800bb50:	e169      	b.n	800be26 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	015a      	lsls	r2, r3, #5
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	69ba      	ldr	r2, [r7, #24]
 800bb62:	0151      	lsls	r1, r2, #5
 800bb64:	69fa      	ldr	r2, [r7, #28]
 800bb66:	440a      	add	r2, r1
 800bb68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb6c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bb70:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	791b      	ldrb	r3, [r3, #4]
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d015      	beq.n	800bba6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f000 8151 	beq.w	800be26 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	f003 030f 	and.w	r3, r3, #15
 800bb94:	2101      	movs	r1, #1
 800bb96:	fa01 f303 	lsl.w	r3, r1, r3
 800bb9a:	69f9      	ldr	r1, [r7, #28]
 800bb9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bba0:	4313      	orrs	r3, r2
 800bba2:	634b      	str	r3, [r1, #52]	@ 0x34
 800bba4:	e13f      	b.n	800be26 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d116      	bne.n	800bbe4 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	015a      	lsls	r2, r3, #5
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	69ba      	ldr	r2, [r7, #24]
 800bbc6:	0151      	lsls	r1, r2, #5
 800bbc8:	69fa      	ldr	r2, [r7, #28]
 800bbca:	440a      	add	r2, r1
 800bbcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bbd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bbd4:	6013      	str	r3, [r2, #0]
 800bbd6:	e015      	b.n	800bc04 <USB_EPStartXfer+0x310>
 800bbd8:	e007ffff 	.word	0xe007ffff
 800bbdc:	fff80000 	.word	0xfff80000
 800bbe0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	015a      	lsls	r2, r3, #5
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	4413      	add	r3, r2
 800bbec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	69ba      	ldr	r2, [r7, #24]
 800bbf4:	0151      	lsls	r1, r2, #5
 800bbf6:	69fa      	ldr	r2, [r7, #28]
 800bbf8:	440a      	add	r2, r1
 800bbfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bbfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc02:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	68d9      	ldr	r1, [r3, #12]
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	781a      	ldrb	r2, [r3, #0]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	b298      	uxth	r0, r3
 800bc12:	79fb      	ldrb	r3, [r7, #7]
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	4603      	mov	r3, r0
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 f9b9 	bl	800bf90 <USB_WritePacket>
 800bc1e:	e102      	b.n	800be26 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	015a      	lsls	r2, r3, #5
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	4413      	add	r3, r2
 800bc28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc2c:	691a      	ldr	r2, [r3, #16]
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	0159      	lsls	r1, r3, #5
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	440b      	add	r3, r1
 800bc36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	4b7c      	ldr	r3, [pc, #496]	@ (800be30 <USB_EPStartXfer+0x53c>)
 800bc3e:	4013      	ands	r3, r2
 800bc40:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	015a      	lsls	r2, r3, #5
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	4413      	add	r3, r2
 800bc4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc4e:	691a      	ldr	r2, [r3, #16]
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	0159      	lsls	r1, r3, #5
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	440b      	add	r3, r1
 800bc58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4b75      	ldr	r3, [pc, #468]	@ (800be34 <USB_EPStartXfer+0x540>)
 800bc60:	4013      	ands	r3, r2
 800bc62:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d12f      	bne.n	800bcca <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d003      	beq.n	800bc7a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	689a      	ldr	r2, [r3, #8]
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	689a      	ldr	r2, [r3, #8]
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	015a      	lsls	r2, r3, #5
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	4413      	add	r3, r2
 800bc8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc8e:	691a      	ldr	r2, [r3, #16]
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	6a1b      	ldr	r3, [r3, #32]
 800bc94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc98:	69b9      	ldr	r1, [r7, #24]
 800bc9a:	0148      	lsls	r0, r1, #5
 800bc9c:	69f9      	ldr	r1, [r7, #28]
 800bc9e:	4401      	add	r1, r0
 800bca0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bca4:	4313      	orrs	r3, r2
 800bca6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	015a      	lsls	r2, r3, #5
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	4413      	add	r3, r2
 800bcb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	69ba      	ldr	r2, [r7, #24]
 800bcb8:	0151      	lsls	r1, r2, #5
 800bcba:	69fa      	ldr	r2, [r7, #28]
 800bcbc:	440a      	add	r2, r1
 800bcbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bcc6:	6113      	str	r3, [r2, #16]
 800bcc8:	e05f      	b.n	800bd8a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d123      	bne.n	800bd1a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	015a      	lsls	r2, r3, #5
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	4413      	add	r3, r2
 800bcda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcde:	691a      	ldr	r2, [r3, #16]
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bce8:	69b9      	ldr	r1, [r7, #24]
 800bcea:	0148      	lsls	r0, r1, #5
 800bcec:	69f9      	ldr	r1, [r7, #28]
 800bcee:	4401      	add	r1, r0
 800bcf0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	015a      	lsls	r2, r3, #5
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	4413      	add	r3, r2
 800bd00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	69ba      	ldr	r2, [r7, #24]
 800bd08:	0151      	lsls	r1, r2, #5
 800bd0a:	69fa      	ldr	r2, [r7, #28]
 800bd0c:	440a      	add	r2, r1
 800bd0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bd16:	6113      	str	r3, [r2, #16]
 800bd18:	e037      	b.n	800bd8a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	691a      	ldr	r2, [r3, #16]
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	4413      	add	r3, r2
 800bd24:	1e5a      	subs	r2, r3, #1
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd2e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	8afa      	ldrh	r2, [r7, #22]
 800bd36:	fb03 f202 	mul.w	r2, r3, r2
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	015a      	lsls	r2, r3, #5
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	4413      	add	r3, r2
 800bd46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd4a:	691a      	ldr	r2, [r3, #16]
 800bd4c:	8afb      	ldrh	r3, [r7, #22]
 800bd4e:	04d9      	lsls	r1, r3, #19
 800bd50:	4b39      	ldr	r3, [pc, #228]	@ (800be38 <USB_EPStartXfer+0x544>)
 800bd52:	400b      	ands	r3, r1
 800bd54:	69b9      	ldr	r1, [r7, #24]
 800bd56:	0148      	lsls	r0, r1, #5
 800bd58:	69f9      	ldr	r1, [r7, #28]
 800bd5a:	4401      	add	r1, r0
 800bd5c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bd60:	4313      	orrs	r3, r2
 800bd62:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	015a      	lsls	r2, r3, #5
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd70:	691a      	ldr	r2, [r3, #16]
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	6a1b      	ldr	r3, [r3, #32]
 800bd76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd7a:	69b9      	ldr	r1, [r7, #24]
 800bd7c:	0148      	lsls	r0, r1, #5
 800bd7e:	69f9      	ldr	r1, [r7, #28]
 800bd80:	4401      	add	r1, r0
 800bd82:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bd86:	4313      	orrs	r3, r2
 800bd88:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800bd8a:	79fb      	ldrb	r3, [r7, #7]
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d10d      	bne.n	800bdac <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d009      	beq.n	800bdac <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	68d9      	ldr	r1, [r3, #12]
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	015a      	lsls	r2, r3, #5
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	4413      	add	r3, r2
 800bda4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bda8:	460a      	mov	r2, r1
 800bdaa:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	791b      	ldrb	r3, [r3, #4]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d128      	bne.n	800be06 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d110      	bne.n	800bde6 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	015a      	lsls	r2, r3, #5
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	4413      	add	r3, r2
 800bdcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	69ba      	ldr	r2, [r7, #24]
 800bdd4:	0151      	lsls	r1, r2, #5
 800bdd6:	69fa      	ldr	r2, [r7, #28]
 800bdd8:	440a      	add	r2, r1
 800bdda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bdde:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	e00f      	b.n	800be06 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	015a      	lsls	r2, r3, #5
 800bdea:	69fb      	ldr	r3, [r7, #28]
 800bdec:	4413      	add	r3, r2
 800bdee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	69ba      	ldr	r2, [r7, #24]
 800bdf6:	0151      	lsls	r1, r2, #5
 800bdf8:	69fa      	ldr	r2, [r7, #28]
 800bdfa:	440a      	add	r2, r1
 800bdfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be04:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	015a      	lsls	r2, r3, #5
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	4413      	add	r3, r2
 800be0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	69ba      	ldr	r2, [r7, #24]
 800be16:	0151      	lsls	r1, r2, #5
 800be18:	69fa      	ldr	r2, [r7, #28]
 800be1a:	440a      	add	r2, r1
 800be1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be20:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800be24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be26:	2300      	movs	r3, #0
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3720      	adds	r7, #32
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	fff80000 	.word	0xfff80000
 800be34:	e007ffff 	.word	0xe007ffff
 800be38:	1ff80000 	.word	0x1ff80000

0800be3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b087      	sub	sp, #28
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be46:	2300      	movs	r3, #0
 800be48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800be4a:	2300      	movs	r3, #0
 800be4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	785b      	ldrb	r3, [r3, #1]
 800be56:	2b01      	cmp	r3, #1
 800be58:	d14a      	bne.n	800bef0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	015a      	lsls	r2, r3, #5
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	4413      	add	r3, r2
 800be64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800be6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be72:	f040 8086 	bne.w	800bf82 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	015a      	lsls	r2, r3, #5
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	4413      	add	r3, r2
 800be80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	7812      	ldrb	r2, [r2, #0]
 800be8a:	0151      	lsls	r1, r2, #5
 800be8c:	693a      	ldr	r2, [r7, #16]
 800be8e:	440a      	add	r2, r1
 800be90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800be98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	015a      	lsls	r2, r3, #5
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	4413      	add	r3, r2
 800bea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	7812      	ldrb	r2, [r2, #0]
 800beae:	0151      	lsls	r1, r2, #5
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	440a      	add	r2, r1
 800beb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800beb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bebc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	3301      	adds	r3, #1
 800bec2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800beca:	4293      	cmp	r3, r2
 800becc:	d902      	bls.n	800bed4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	75fb      	strb	r3, [r7, #23]
          break;
 800bed2:	e056      	b.n	800bf82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	015a      	lsls	r2, r3, #5
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	4413      	add	r3, r2
 800bede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bee8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800beec:	d0e7      	beq.n	800bebe <USB_EPStopXfer+0x82>
 800beee:	e048      	b.n	800bf82 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	015a      	lsls	r2, r3, #5
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	4413      	add	r3, r2
 800befa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf08:	d13b      	bne.n	800bf82 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	015a      	lsls	r2, r3, #5
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	4413      	add	r3, r2
 800bf14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	683a      	ldr	r2, [r7, #0]
 800bf1c:	7812      	ldrb	r2, [r2, #0]
 800bf1e:	0151      	lsls	r1, r2, #5
 800bf20:	693a      	ldr	r2, [r7, #16]
 800bf22:	440a      	add	r2, r1
 800bf24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bf2c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	015a      	lsls	r2, r3, #5
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	4413      	add	r3, r2
 800bf38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	7812      	ldrb	r2, [r2, #0]
 800bf42:	0151      	lsls	r1, r2, #5
 800bf44:	693a      	ldr	r2, [r7, #16]
 800bf46:	440a      	add	r2, r1
 800bf48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bf50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	3301      	adds	r3, #1
 800bf56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d902      	bls.n	800bf68 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bf62:	2301      	movs	r3, #1
 800bf64:	75fb      	strb	r3, [r7, #23]
          break;
 800bf66:	e00c      	b.n	800bf82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	015a      	lsls	r2, r3, #5
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	4413      	add	r3, r2
 800bf72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf80:	d0e7      	beq.n	800bf52 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bf82:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	371c      	adds	r7, #28
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b089      	sub	sp, #36	@ 0x24
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	71fb      	strb	r3, [r7, #7]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bfae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d123      	bne.n	800bffe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bfb6:	88bb      	ldrh	r3, [r7, #4]
 800bfb8:	3303      	adds	r3, #3
 800bfba:	089b      	lsrs	r3, r3, #2
 800bfbc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	61bb      	str	r3, [r7, #24]
 800bfc2:	e018      	b.n	800bff6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bfc4:	79fb      	ldrb	r3, [r7, #7]
 800bfc6:	031a      	lsls	r2, r3, #12
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	4413      	add	r3, r2
 800bfcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	3301      	adds	r3, #1
 800bfee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	3301      	adds	r3, #1
 800bff4:	61bb      	str	r3, [r7, #24]
 800bff6:	69ba      	ldr	r2, [r7, #24]
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d3e2      	bcc.n	800bfc4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	3724      	adds	r7, #36	@ 0x24
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b08b      	sub	sp, #44	@ 0x2c
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	4613      	mov	r3, r2
 800c018:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c022:	88fb      	ldrh	r3, [r7, #6]
 800c024:	089b      	lsrs	r3, r3, #2
 800c026:	b29b      	uxth	r3, r3
 800c028:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c02a:	88fb      	ldrh	r3, [r7, #6]
 800c02c:	f003 0303 	and.w	r3, r3, #3
 800c030:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c032:	2300      	movs	r3, #0
 800c034:	623b      	str	r3, [r7, #32]
 800c036:	e014      	b.n	800c062 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c042:	601a      	str	r2, [r3, #0]
    pDest++;
 800c044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c046:	3301      	adds	r3, #1
 800c048:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c04c:	3301      	adds	r3, #1
 800c04e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c052:	3301      	adds	r3, #1
 800c054:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c058:	3301      	adds	r3, #1
 800c05a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	3301      	adds	r3, #1
 800c060:	623b      	str	r3, [r7, #32]
 800c062:	6a3a      	ldr	r2, [r7, #32]
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	429a      	cmp	r2, r3
 800c068:	d3e6      	bcc.n	800c038 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c06a:	8bfb      	ldrh	r3, [r7, #30]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d01e      	beq.n	800c0ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c070:	2300      	movs	r3, #0
 800c072:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c07a:	461a      	mov	r2, r3
 800c07c:	f107 0310 	add.w	r3, r7, #16
 800c080:	6812      	ldr	r2, [r2, #0]
 800c082:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c084:	693a      	ldr	r2, [r7, #16]
 800c086:	6a3b      	ldr	r3, [r7, #32]
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	00db      	lsls	r3, r3, #3
 800c08c:	fa22 f303 	lsr.w	r3, r2, r3
 800c090:	b2da      	uxtb	r2, r3
 800c092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c094:	701a      	strb	r2, [r3, #0]
      i++;
 800c096:	6a3b      	ldr	r3, [r7, #32]
 800c098:	3301      	adds	r3, #1
 800c09a:	623b      	str	r3, [r7, #32]
      pDest++;
 800c09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09e:	3301      	adds	r3, #1
 800c0a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c0a2:	8bfb      	ldrh	r3, [r7, #30]
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c0a8:	8bfb      	ldrh	r3, [r7, #30]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d1ea      	bne.n	800c084 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	372c      	adds	r7, #44	@ 0x2c
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	785b      	ldrb	r3, [r3, #1]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d12c      	bne.n	800c132 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	015a      	lsls	r2, r3, #5
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	4413      	add	r3, r2
 800c0e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	db12      	blt.n	800c110 <USB_EPSetStall+0x54>
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00f      	beq.n	800c110 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	015a      	lsls	r2, r3, #5
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	0151      	lsls	r1, r2, #5
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	440a      	add	r2, r1
 800c106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c10a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c10e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	015a      	lsls	r2, r3, #5
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	4413      	add	r3, r2
 800c118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	0151      	lsls	r1, r2, #5
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	440a      	add	r2, r1
 800c126:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c12a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c12e:	6013      	str	r3, [r2, #0]
 800c130:	e02b      	b.n	800c18a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	015a      	lsls	r2, r3, #5
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	4413      	add	r3, r2
 800c13a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	db12      	blt.n	800c16a <USB_EPSetStall+0xae>
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00f      	beq.n	800c16a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	015a      	lsls	r2, r3, #5
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	4413      	add	r3, r2
 800c152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	0151      	lsls	r1, r2, #5
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	440a      	add	r2, r1
 800c160:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c164:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c168:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	015a      	lsls	r2, r3, #5
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	4413      	add	r3, r2
 800c172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68ba      	ldr	r2, [r7, #8]
 800c17a:	0151      	lsls	r1, r2, #5
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	440a      	add	r2, r1
 800c180:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c184:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c188:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3714      	adds	r7, #20
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	785b      	ldrb	r3, [r3, #1]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d128      	bne.n	800c206 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	015a      	lsls	r2, r3, #5
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	0151      	lsls	r1, r2, #5
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	440a      	add	r2, r1
 800c1ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c1d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	791b      	ldrb	r3, [r3, #4]
 800c1d8:	2b03      	cmp	r3, #3
 800c1da:	d003      	beq.n	800c1e4 <USB_EPClearStall+0x4c>
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	791b      	ldrb	r3, [r3, #4]
 800c1e0:	2b02      	cmp	r3, #2
 800c1e2:	d138      	bne.n	800c256 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	015a      	lsls	r2, r3, #5
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	0151      	lsls	r1, r2, #5
 800c1f6:	68fa      	ldr	r2, [r7, #12]
 800c1f8:	440a      	add	r2, r1
 800c1fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c202:	6013      	str	r3, [r2, #0]
 800c204:	e027      	b.n	800c256 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	015a      	lsls	r2, r3, #5
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	4413      	add	r3, r2
 800c20e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	0151      	lsls	r1, r2, #5
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	440a      	add	r2, r1
 800c21c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c220:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c224:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	791b      	ldrb	r3, [r3, #4]
 800c22a:	2b03      	cmp	r3, #3
 800c22c:	d003      	beq.n	800c236 <USB_EPClearStall+0x9e>
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	791b      	ldrb	r3, [r3, #4]
 800c232:	2b02      	cmp	r3, #2
 800c234:	d10f      	bne.n	800c256 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	015a      	lsls	r2, r3, #5
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	4413      	add	r3, r2
 800c23e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	0151      	lsls	r1, r2, #5
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	440a      	add	r2, r1
 800c24c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c254:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c256:	2300      	movs	r3, #0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3714      	adds	r7, #20
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	460b      	mov	r3, r1
 800c26e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c282:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c286:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	78fb      	ldrb	r3, [r7, #3]
 800c292:	011b      	lsls	r3, r3, #4
 800c294:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c298:	68f9      	ldr	r1, [r7, #12]
 800c29a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c2a2:	2300      	movs	r3, #0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3714      	adds	r7, #20
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c2ca:	f023 0303 	bic.w	r3, r3, #3
 800c2ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c2de:	f023 0302 	bic.w	r3, r3, #2
 800c2e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c2e4:	2300      	movs	r3, #0
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3714      	adds	r7, #20
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr

0800c2f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c2f2:	b480      	push	{r7}
 800c2f4:	b085      	sub	sp, #20
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c30c:	f023 0303 	bic.w	r3, r3, #3
 800c310:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c320:	f043 0302 	orr.w	r3, r3, #2
 800c324:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3714      	adds	r7, #20
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	695b      	ldr	r3, [r3, #20]
 800c340:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	699b      	ldr	r3, [r3, #24]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	4013      	ands	r3, r2
 800c34a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c34c:	68fb      	ldr	r3, [r7, #12]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3714      	adds	r7, #20
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr

0800c35a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c35a:	b480      	push	{r7}
 800c35c:	b085      	sub	sp, #20
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c36c:	699b      	ldr	r3, [r3, #24]
 800c36e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c376:	69db      	ldr	r3, [r3, #28]
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	4013      	ands	r3, r2
 800c37c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	0c1b      	lsrs	r3, r3, #16
}
 800c382:	4618      	mov	r0, r3
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c38e:	b480      	push	{r7}
 800c390:	b085      	sub	sp, #20
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3a0:	699b      	ldr	r3, [r3, #24]
 800c3a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3aa:	69db      	ldr	r3, [r3, #28]
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	4013      	ands	r3, r2
 800c3b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	b29b      	uxth	r3, r3
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3714      	adds	r7, #20
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr

0800c3c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c3c2:	b480      	push	{r7}
 800c3c4:	b085      	sub	sp, #20
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c3d2:	78fb      	ldrb	r3, [r7, #3]
 800c3d4:	015a      	lsls	r2, r3, #5
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	4413      	add	r3, r2
 800c3da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	68ba      	ldr	r2, [r7, #8]
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c3f0:	68bb      	ldr	r3, [r7, #8]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3714      	adds	r7, #20
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr

0800c3fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c3fe:	b480      	push	{r7}
 800c400:	b087      	sub	sp, #28
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
 800c406:	460b      	mov	r3, r1
 800c408:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c414:	691b      	ldr	r3, [r3, #16]
 800c416:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c41e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c420:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c422:	78fb      	ldrb	r3, [r7, #3]
 800c424:	f003 030f 	and.w	r3, r3, #15
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	fa22 f303 	lsr.w	r3, r2, r3
 800c42e:	01db      	lsls	r3, r3, #7
 800c430:	b2db      	uxtb	r3, r3
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	4313      	orrs	r3, r2
 800c436:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c438:	78fb      	ldrb	r3, [r7, #3]
 800c43a:	015a      	lsls	r2, r3, #5
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	4413      	add	r3, r2
 800c440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	693a      	ldr	r2, [r7, #16]
 800c448:	4013      	ands	r3, r2
 800c44a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c44c:	68bb      	ldr	r3, [r7, #8]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	371c      	adds	r7, #28
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c45a:	b480      	push	{r7}
 800c45c:	b083      	sub	sp, #12
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	695b      	ldr	r3, [r3, #20]
 800c466:	f003 0301 	and.w	r3, r3, #1
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	370c      	adds	r7, #12
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
	...

0800c478 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c492:	4619      	mov	r1, r3
 800c494:	4b09      	ldr	r3, [pc, #36]	@ (800c4bc <USB_ActivateSetup+0x44>)
 800c496:	4013      	ands	r3, r2
 800c498:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c4a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c4ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	fffff800 	.word	0xfffff800

0800c4c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b087      	sub	sp, #28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	607a      	str	r2, [r7, #4]
 800c4cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	333c      	adds	r3, #60	@ 0x3c
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	4a26      	ldr	r2, [pc, #152]	@ (800c578 <USB_EP0_OutStart+0xb8>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d90a      	bls.n	800c4fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c4f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c4f4:	d101      	bne.n	800c4fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	e037      	b.n	800c56a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c500:	461a      	mov	r2, r3
 800c502:	2300      	movs	r3, #0
 800c504:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c514:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c518:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c520:	691b      	ldr	r3, [r3, #16]
 800c522:	697a      	ldr	r2, [r7, #20]
 800c524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c528:	f043 0318 	orr.w	r3, r3, #24
 800c52c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	697a      	ldr	r2, [r7, #20]
 800c538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c53c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c540:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c542:	7afb      	ldrb	r3, [r7, #11]
 800c544:	2b01      	cmp	r3, #1
 800c546:	d10f      	bne.n	800c568 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c54e:	461a      	mov	r2, r3
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	697a      	ldr	r2, [r7, #20]
 800c55e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c562:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c566:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	371c      	adds	r7, #28
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	4f54300a 	.word	0x4f54300a

0800c57c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c584:	2300      	movs	r3, #0
 800c586:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	3301      	adds	r3, #1
 800c58c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c594:	d901      	bls.n	800c59a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c596:	2303      	movs	r3, #3
 800c598:	e01b      	b.n	800c5d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	daf2      	bge.n	800c588 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	f043 0201 	orr.w	r2, r3, #1
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c5be:	d901      	bls.n	800c5c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c5c0:	2303      	movs	r3, #3
 800c5c2:	e006      	b.n	800c5d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	f003 0301 	and.w	r3, r3, #1
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d0f0      	beq.n	800c5b2 <USB_CoreReset+0x36>

  return HAL_OK;
 800c5d0:	2300      	movs	r3, #0
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3714      	adds	r7, #20
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
	...

0800c5e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c5ec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c5f0:	f004 f958 	bl	80108a4 <USBD_static_malloc>
 800c5f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d109      	bne.n	800c610 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	32b0      	adds	r2, #176	@ 0xb0
 800c606:	2100      	movs	r1, #0
 800c608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c60c:	2302      	movs	r3, #2
 800c60e:	e0d4      	b.n	800c7ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c610:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c614:	2100      	movs	r1, #0
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f004 f988 	bl	801092c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	32b0      	adds	r2, #176	@ 0xb0
 800c626:	68f9      	ldr	r1, [r7, #12]
 800c628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	32b0      	adds	r2, #176	@ 0xb0
 800c636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	7c1b      	ldrb	r3, [r3, #16]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d138      	bne.n	800c6ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c648:	4b5e      	ldr	r3, [pc, #376]	@ (800c7c4 <USBD_CDC_Init+0x1e4>)
 800c64a:	7819      	ldrb	r1, [r3, #0]
 800c64c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c650:	2202      	movs	r2, #2
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f004 f803 	bl	801065e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c658:	4b5a      	ldr	r3, [pc, #360]	@ (800c7c4 <USBD_CDC_Init+0x1e4>)
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	f003 020f 	and.w	r2, r3, #15
 800c660:	6879      	ldr	r1, [r7, #4]
 800c662:	4613      	mov	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	4413      	add	r3, r2
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	440b      	add	r3, r1
 800c66c:	3324      	adds	r3, #36	@ 0x24
 800c66e:	2201      	movs	r2, #1
 800c670:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c672:	4b55      	ldr	r3, [pc, #340]	@ (800c7c8 <USBD_CDC_Init+0x1e8>)
 800c674:	7819      	ldrb	r1, [r3, #0]
 800c676:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c67a:	2202      	movs	r2, #2
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f003 ffee 	bl	801065e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c682:	4b51      	ldr	r3, [pc, #324]	@ (800c7c8 <USBD_CDC_Init+0x1e8>)
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	f003 020f 	and.w	r2, r3, #15
 800c68a:	6879      	ldr	r1, [r7, #4]
 800c68c:	4613      	mov	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4413      	add	r3, r2
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	440b      	add	r3, r1
 800c696:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c69a:	2201      	movs	r2, #1
 800c69c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c69e:	4b4b      	ldr	r3, [pc, #300]	@ (800c7cc <USBD_CDC_Init+0x1ec>)
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	f003 020f 	and.w	r2, r3, #15
 800c6a6:	6879      	ldr	r1, [r7, #4]
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	4413      	add	r3, r2
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	440b      	add	r3, r1
 800c6b2:	3326      	adds	r3, #38	@ 0x26
 800c6b4:	2210      	movs	r2, #16
 800c6b6:	801a      	strh	r2, [r3, #0]
 800c6b8:	e035      	b.n	800c726 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c6ba:	4b42      	ldr	r3, [pc, #264]	@ (800c7c4 <USBD_CDC_Init+0x1e4>)
 800c6bc:	7819      	ldrb	r1, [r3, #0]
 800c6be:	2340      	movs	r3, #64	@ 0x40
 800c6c0:	2202      	movs	r2, #2
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f003 ffcb 	bl	801065e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c6c8:	4b3e      	ldr	r3, [pc, #248]	@ (800c7c4 <USBD_CDC_Init+0x1e4>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	f003 020f 	and.w	r2, r3, #15
 800c6d0:	6879      	ldr	r1, [r7, #4]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	4413      	add	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	440b      	add	r3, r1
 800c6dc:	3324      	adds	r3, #36	@ 0x24
 800c6de:	2201      	movs	r2, #1
 800c6e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c6e2:	4b39      	ldr	r3, [pc, #228]	@ (800c7c8 <USBD_CDC_Init+0x1e8>)
 800c6e4:	7819      	ldrb	r1, [r3, #0]
 800c6e6:	2340      	movs	r3, #64	@ 0x40
 800c6e8:	2202      	movs	r2, #2
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f003 ffb7 	bl	801065e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c6f0:	4b35      	ldr	r3, [pc, #212]	@ (800c7c8 <USBD_CDC_Init+0x1e8>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	f003 020f 	and.w	r2, r3, #15
 800c6f8:	6879      	ldr	r1, [r7, #4]
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	440b      	add	r3, r1
 800c704:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c708:	2201      	movs	r2, #1
 800c70a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c70c:	4b2f      	ldr	r3, [pc, #188]	@ (800c7cc <USBD_CDC_Init+0x1ec>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	f003 020f 	and.w	r2, r3, #15
 800c714:	6879      	ldr	r1, [r7, #4]
 800c716:	4613      	mov	r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	4413      	add	r3, r2
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	440b      	add	r3, r1
 800c720:	3326      	adds	r3, #38	@ 0x26
 800c722:	2210      	movs	r2, #16
 800c724:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c726:	4b29      	ldr	r3, [pc, #164]	@ (800c7cc <USBD_CDC_Init+0x1ec>)
 800c728:	7819      	ldrb	r1, [r3, #0]
 800c72a:	2308      	movs	r3, #8
 800c72c:	2203      	movs	r2, #3
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f003 ff95 	bl	801065e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c734:	4b25      	ldr	r3, [pc, #148]	@ (800c7cc <USBD_CDC_Init+0x1ec>)
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	f003 020f 	and.w	r2, r3, #15
 800c73c:	6879      	ldr	r1, [r7, #4]
 800c73e:	4613      	mov	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	4413      	add	r3, r2
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	440b      	add	r3, r1
 800c748:	3324      	adds	r3, #36	@ 0x24
 800c74a:	2201      	movs	r2, #1
 800c74c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2200      	movs	r2, #0
 800c752:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	33b0      	adds	r3, #176	@ 0xb0
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	4413      	add	r3, r2
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2200      	movs	r2, #0
 800c776:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c780:	2b00      	cmp	r3, #0
 800c782:	d101      	bne.n	800c788 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c784:	2302      	movs	r3, #2
 800c786:	e018      	b.n	800c7ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	7c1b      	ldrb	r3, [r3, #16]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10a      	bne.n	800c7a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c790:	4b0d      	ldr	r3, [pc, #52]	@ (800c7c8 <USBD_CDC_Init+0x1e8>)
 800c792:	7819      	ldrb	r1, [r3, #0]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c79a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f004 f84c 	bl	801083c <USBD_LL_PrepareReceive>
 800c7a4:	e008      	b.n	800c7b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c7a6:	4b08      	ldr	r3, [pc, #32]	@ (800c7c8 <USBD_CDC_Init+0x1e8>)
 800c7a8:	7819      	ldrb	r1, [r3, #0]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c7b0:	2340      	movs	r3, #64	@ 0x40
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f004 f842 	bl	801083c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	24000097 	.word	0x24000097
 800c7c8:	24000098 	.word	0x24000098
 800c7cc:	24000099 	.word	0x24000099

0800c7d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	460b      	mov	r3, r1
 800c7da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c7dc:	4b3a      	ldr	r3, [pc, #232]	@ (800c8c8 <USBD_CDC_DeInit+0xf8>)
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f003 ff61 	bl	80106aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c7e8:	4b37      	ldr	r3, [pc, #220]	@ (800c8c8 <USBD_CDC_DeInit+0xf8>)
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	f003 020f 	and.w	r2, r3, #15
 800c7f0:	6879      	ldr	r1, [r7, #4]
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	4413      	add	r3, r2
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	440b      	add	r3, r1
 800c7fc:	3324      	adds	r3, #36	@ 0x24
 800c7fe:	2200      	movs	r2, #0
 800c800:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c802:	4b32      	ldr	r3, [pc, #200]	@ (800c8cc <USBD_CDC_DeInit+0xfc>)
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	4619      	mov	r1, r3
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f003 ff4e 	bl	80106aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c80e:	4b2f      	ldr	r3, [pc, #188]	@ (800c8cc <USBD_CDC_DeInit+0xfc>)
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	f003 020f 	and.w	r2, r3, #15
 800c816:	6879      	ldr	r1, [r7, #4]
 800c818:	4613      	mov	r3, r2
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	4413      	add	r3, r2
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	440b      	add	r3, r1
 800c822:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c826:	2200      	movs	r2, #0
 800c828:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c82a:	4b29      	ldr	r3, [pc, #164]	@ (800c8d0 <USBD_CDC_DeInit+0x100>)
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	4619      	mov	r1, r3
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f003 ff3a 	bl	80106aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c836:	4b26      	ldr	r3, [pc, #152]	@ (800c8d0 <USBD_CDC_DeInit+0x100>)
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	f003 020f 	and.w	r2, r3, #15
 800c83e:	6879      	ldr	r1, [r7, #4]
 800c840:	4613      	mov	r3, r2
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	4413      	add	r3, r2
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	440b      	add	r3, r1
 800c84a:	3324      	adds	r3, #36	@ 0x24
 800c84c:	2200      	movs	r2, #0
 800c84e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c850:	4b1f      	ldr	r3, [pc, #124]	@ (800c8d0 <USBD_CDC_DeInit+0x100>)
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	f003 020f 	and.w	r2, r3, #15
 800c858:	6879      	ldr	r1, [r7, #4]
 800c85a:	4613      	mov	r3, r2
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	4413      	add	r3, r2
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	440b      	add	r3, r1
 800c864:	3326      	adds	r3, #38	@ 0x26
 800c866:	2200      	movs	r2, #0
 800c868:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	32b0      	adds	r2, #176	@ 0xb0
 800c874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d01f      	beq.n	800c8bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	33b0      	adds	r3, #176	@ 0xb0
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	4413      	add	r3, r2
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	32b0      	adds	r2, #176	@ 0xb0
 800c89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f004 f80e 	bl	80108c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	32b0      	adds	r2, #176	@ 0xb0
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	24000097 	.word	0x24000097
 800c8cc:	24000098 	.word	0x24000098
 800c8d0:	24000099 	.word	0x24000099

0800c8d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	32b0      	adds	r2, #176	@ 0xb0
 800c8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d101      	bne.n	800c904 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c900:	2303      	movs	r3, #3
 800c902:	e0bf      	b.n	800ca84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d050      	beq.n	800c9b2 <USBD_CDC_Setup+0xde>
 800c910:	2b20      	cmp	r3, #32
 800c912:	f040 80af 	bne.w	800ca74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	88db      	ldrh	r3, [r3, #6]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d03a      	beq.n	800c994 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	b25b      	sxtb	r3, r3
 800c924:	2b00      	cmp	r3, #0
 800c926:	da1b      	bge.n	800c960 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	33b0      	adds	r3, #176	@ 0xb0
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	4413      	add	r3, r2
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	683a      	ldr	r2, [r7, #0]
 800c93c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c93e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c940:	683a      	ldr	r2, [r7, #0]
 800c942:	88d2      	ldrh	r2, [r2, #6]
 800c944:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	88db      	ldrh	r3, [r3, #6]
 800c94a:	2b07      	cmp	r3, #7
 800c94c:	bf28      	it	cs
 800c94e:	2307      	movcs	r3, #7
 800c950:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	89fa      	ldrh	r2, [r7, #14]
 800c956:	4619      	mov	r1, r3
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f001 fd7d 	bl	800e458 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c95e:	e090      	b.n	800ca82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	785a      	ldrb	r2, [r3, #1]
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	88db      	ldrh	r3, [r3, #6]
 800c96e:	2b3f      	cmp	r3, #63	@ 0x3f
 800c970:	d803      	bhi.n	800c97a <USBD_CDC_Setup+0xa6>
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	88db      	ldrh	r3, [r3, #6]
 800c976:	b2da      	uxtb	r2, r3
 800c978:	e000      	b.n	800c97c <USBD_CDC_Setup+0xa8>
 800c97a:	2240      	movs	r2, #64	@ 0x40
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c982:	6939      	ldr	r1, [r7, #16]
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c98a:	461a      	mov	r2, r3
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f001 fd8f 	bl	800e4b0 <USBD_CtlPrepareRx>
      break;
 800c992:	e076      	b.n	800ca82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	33b0      	adds	r3, #176	@ 0xb0
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	4413      	add	r3, r2
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	689b      	ldr	r3, [r3, #8]
 800c9a6:	683a      	ldr	r2, [r7, #0]
 800c9a8:	7850      	ldrb	r0, [r2, #1]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	6839      	ldr	r1, [r7, #0]
 800c9ae:	4798      	blx	r3
      break;
 800c9b0:	e067      	b.n	800ca82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	785b      	ldrb	r3, [r3, #1]
 800c9b6:	2b0b      	cmp	r3, #11
 800c9b8:	d851      	bhi.n	800ca5e <USBD_CDC_Setup+0x18a>
 800c9ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c9c0 <USBD_CDC_Setup+0xec>)
 800c9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c0:	0800c9f1 	.word	0x0800c9f1
 800c9c4:	0800ca6d 	.word	0x0800ca6d
 800c9c8:	0800ca5f 	.word	0x0800ca5f
 800c9cc:	0800ca5f 	.word	0x0800ca5f
 800c9d0:	0800ca5f 	.word	0x0800ca5f
 800c9d4:	0800ca5f 	.word	0x0800ca5f
 800c9d8:	0800ca5f 	.word	0x0800ca5f
 800c9dc:	0800ca5f 	.word	0x0800ca5f
 800c9e0:	0800ca5f 	.word	0x0800ca5f
 800c9e4:	0800ca5f 	.word	0x0800ca5f
 800c9e8:	0800ca1b 	.word	0x0800ca1b
 800c9ec:	0800ca45 	.word	0x0800ca45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	2b03      	cmp	r3, #3
 800c9fa:	d107      	bne.n	800ca0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c9fc:	f107 030a 	add.w	r3, r7, #10
 800ca00:	2202      	movs	r2, #2
 800ca02:	4619      	mov	r1, r3
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f001 fd27 	bl	800e458 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ca0a:	e032      	b.n	800ca72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ca0c:	6839      	ldr	r1, [r7, #0]
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f001 fca5 	bl	800e35e <USBD_CtlError>
            ret = USBD_FAIL;
 800ca14:	2303      	movs	r3, #3
 800ca16:	75fb      	strb	r3, [r7, #23]
          break;
 800ca18:	e02b      	b.n	800ca72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	2b03      	cmp	r3, #3
 800ca24:	d107      	bne.n	800ca36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ca26:	f107 030d 	add.w	r3, r7, #13
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f001 fd12 	bl	800e458 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ca34:	e01d      	b.n	800ca72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ca36:	6839      	ldr	r1, [r7, #0]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f001 fc90 	bl	800e35e <USBD_CtlError>
            ret = USBD_FAIL;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	75fb      	strb	r3, [r7, #23]
          break;
 800ca42:	e016      	b.n	800ca72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	2b03      	cmp	r3, #3
 800ca4e:	d00f      	beq.n	800ca70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f001 fc83 	bl	800e35e <USBD_CtlError>
            ret = USBD_FAIL;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ca5c:	e008      	b.n	800ca70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ca5e:	6839      	ldr	r1, [r7, #0]
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f001 fc7c 	bl	800e35e <USBD_CtlError>
          ret = USBD_FAIL;
 800ca66:	2303      	movs	r3, #3
 800ca68:	75fb      	strb	r3, [r7, #23]
          break;
 800ca6a:	e002      	b.n	800ca72 <USBD_CDC_Setup+0x19e>
          break;
 800ca6c:	bf00      	nop
 800ca6e:	e008      	b.n	800ca82 <USBD_CDC_Setup+0x1ae>
          break;
 800ca70:	bf00      	nop
      }
      break;
 800ca72:	e006      	b.n	800ca82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f001 fc71 	bl	800e35e <USBD_CtlError>
      ret = USBD_FAIL;
 800ca7c:	2303      	movs	r3, #3
 800ca7e:	75fb      	strb	r3, [r7, #23]
      break;
 800ca80:	bf00      	nop
  }

  return (uint8_t)ret;
 800ca82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3718      	adds	r7, #24
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	460b      	mov	r3, r1
 800ca96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	32b0      	adds	r2, #176	@ 0xb0
 800caaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d101      	bne.n	800cab6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cab2:	2303      	movs	r3, #3
 800cab4:	e065      	b.n	800cb82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	32b0      	adds	r2, #176	@ 0xb0
 800cac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cac4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cac6:	78fb      	ldrb	r3, [r7, #3]
 800cac8:	f003 020f 	and.w	r2, r3, #15
 800cacc:	6879      	ldr	r1, [r7, #4]
 800cace:	4613      	mov	r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	440b      	add	r3, r1
 800cad8:	3318      	adds	r3, #24
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d02f      	beq.n	800cb40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cae0:	78fb      	ldrb	r3, [r7, #3]
 800cae2:	f003 020f 	and.w	r2, r3, #15
 800cae6:	6879      	ldr	r1, [r7, #4]
 800cae8:	4613      	mov	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	4413      	add	r3, r2
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	440b      	add	r3, r1
 800caf2:	3318      	adds	r3, #24
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	78fb      	ldrb	r3, [r7, #3]
 800caf8:	f003 010f 	and.w	r1, r3, #15
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	460b      	mov	r3, r1
 800cb00:	00db      	lsls	r3, r3, #3
 800cb02:	440b      	add	r3, r1
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	4403      	add	r3, r0
 800cb08:	331c      	adds	r3, #28
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	fbb2 f1f3 	udiv	r1, r2, r3
 800cb10:	fb01 f303 	mul.w	r3, r1, r3
 800cb14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d112      	bne.n	800cb40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cb1a:	78fb      	ldrb	r3, [r7, #3]
 800cb1c:	f003 020f 	and.w	r2, r3, #15
 800cb20:	6879      	ldr	r1, [r7, #4]
 800cb22:	4613      	mov	r3, r2
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	4413      	add	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	440b      	add	r3, r1
 800cb2c:	3318      	adds	r3, #24
 800cb2e:	2200      	movs	r2, #0
 800cb30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cb32:	78f9      	ldrb	r1, [r7, #3]
 800cb34:	2300      	movs	r3, #0
 800cb36:	2200      	movs	r2, #0
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f003 fe5e 	bl	80107fa <USBD_LL_Transmit>
 800cb3e:	e01f      	b.n	800cb80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	2200      	movs	r2, #0
 800cb44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	33b0      	adds	r3, #176	@ 0xb0
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	4413      	add	r3, r2
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	691b      	ldr	r3, [r3, #16]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d010      	beq.n	800cb80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	33b0      	adds	r3, #176	@ 0xb0
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4413      	add	r3, r2
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	691b      	ldr	r3, [r3, #16]
 800cb70:	68ba      	ldr	r2, [r7, #8]
 800cb72:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800cb7c:	78fa      	ldrb	r2, [r7, #3]
 800cb7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b084      	sub	sp, #16
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
 800cb92:	460b      	mov	r3, r1
 800cb94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	32b0      	adds	r2, #176	@ 0xb0
 800cba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cba4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	32b0      	adds	r2, #176	@ 0xb0
 800cbb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d101      	bne.n	800cbbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cbb8:	2303      	movs	r3, #3
 800cbba:	e01a      	b.n	800cbf2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cbbc:	78fb      	ldrb	r3, [r7, #3]
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f003 fe5c 	bl	801087e <USBD_LL_GetRxDataSize>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	33b0      	adds	r3, #176	@ 0xb0
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	4413      	add	r3, r2
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cbe6:	68fa      	ldr	r2, [r7, #12]
 800cbe8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800cbec:	4611      	mov	r1, r2
 800cbee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cbf0:	2300      	movs	r3, #0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b084      	sub	sp, #16
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	32b0      	adds	r2, #176	@ 0xb0
 800cc0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d101      	bne.n	800cc1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	e024      	b.n	800cc66 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	33b0      	adds	r3, #176	@ 0xb0
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4413      	add	r3, r2
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d019      	beq.n	800cc64 <USBD_CDC_EP0_RxReady+0x6a>
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800cc36:	2bff      	cmp	r3, #255	@ 0xff
 800cc38:	d014      	beq.n	800cc64 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	33b0      	adds	r3, #176	@ 0xb0
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	4413      	add	r3, r2
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800cc52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cc5a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	22ff      	movs	r2, #255	@ 0xff
 800cc60:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b086      	sub	sp, #24
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cc78:	2182      	movs	r1, #130	@ 0x82
 800cc7a:	4818      	ldr	r0, [pc, #96]	@ (800ccdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cc7c:	f000 fd0f 	bl	800d69e <USBD_GetEpDesc>
 800cc80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cc82:	2101      	movs	r1, #1
 800cc84:	4815      	ldr	r0, [pc, #84]	@ (800ccdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cc86:	f000 fd0a 	bl	800d69e <USBD_GetEpDesc>
 800cc8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cc8c:	2181      	movs	r1, #129	@ 0x81
 800cc8e:	4813      	ldr	r0, [pc, #76]	@ (800ccdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cc90:	f000 fd05 	bl	800d69e <USBD_GetEpDesc>
 800cc94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d002      	beq.n	800cca2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	2210      	movs	r2, #16
 800cca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d006      	beq.n	800ccb6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ccb0:	711a      	strb	r2, [r3, #4]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d006      	beq.n	800ccca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ccc4:	711a      	strb	r2, [r3, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2243      	movs	r2, #67	@ 0x43
 800ccce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ccd0:	4b02      	ldr	r3, [pc, #8]	@ (800ccdc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3718      	adds	r7, #24
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	24000054 	.word	0x24000054

0800cce0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b086      	sub	sp, #24
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cce8:	2182      	movs	r1, #130	@ 0x82
 800ccea:	4818      	ldr	r0, [pc, #96]	@ (800cd4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ccec:	f000 fcd7 	bl	800d69e <USBD_GetEpDesc>
 800ccf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ccf2:	2101      	movs	r1, #1
 800ccf4:	4815      	ldr	r0, [pc, #84]	@ (800cd4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ccf6:	f000 fcd2 	bl	800d69e <USBD_GetEpDesc>
 800ccfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ccfc:	2181      	movs	r1, #129	@ 0x81
 800ccfe:	4813      	ldr	r0, [pc, #76]	@ (800cd4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cd00:	f000 fccd 	bl	800d69e <USBD_GetEpDesc>
 800cd04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d002      	beq.n	800cd12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	2210      	movs	r2, #16
 800cd10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d006      	beq.n	800cd26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	711a      	strb	r2, [r3, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f042 0202 	orr.w	r2, r2, #2
 800cd24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d006      	beq.n	800cd3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	711a      	strb	r2, [r3, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	f042 0202 	orr.w	r2, r2, #2
 800cd38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2243      	movs	r2, #67	@ 0x43
 800cd3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cd40:	4b02      	ldr	r3, [pc, #8]	@ (800cd4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3718      	adds	r7, #24
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	24000054 	.word	0x24000054

0800cd50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cd58:	2182      	movs	r1, #130	@ 0x82
 800cd5a:	4818      	ldr	r0, [pc, #96]	@ (800cdbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cd5c:	f000 fc9f 	bl	800d69e <USBD_GetEpDesc>
 800cd60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cd62:	2101      	movs	r1, #1
 800cd64:	4815      	ldr	r0, [pc, #84]	@ (800cdbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cd66:	f000 fc9a 	bl	800d69e <USBD_GetEpDesc>
 800cd6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cd6c:	2181      	movs	r1, #129	@ 0x81
 800cd6e:	4813      	ldr	r0, [pc, #76]	@ (800cdbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cd70:	f000 fc95 	bl	800d69e <USBD_GetEpDesc>
 800cd74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	2210      	movs	r2, #16
 800cd80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d006      	beq.n	800cd96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd90:	711a      	strb	r2, [r3, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d006      	beq.n	800cdaa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cda4:	711a      	strb	r2, [r3, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2243      	movs	r2, #67	@ 0x43
 800cdae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cdb0:	4b02      	ldr	r3, [pc, #8]	@ (800cdbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3718      	adds	r7, #24
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	24000054 	.word	0x24000054

0800cdc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	220a      	movs	r2, #10
 800cdcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cdce:	4b03      	ldr	r3, [pc, #12]	@ (800cddc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr
 800cddc:	24000010 	.word	0x24000010

0800cde0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d101      	bne.n	800cdf4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cdf0:	2303      	movs	r3, #3
 800cdf2:	e009      	b.n	800ce08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	33b0      	adds	r3, #176	@ 0xb0
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	4413      	add	r3, r2
 800ce02:	683a      	ldr	r2, [r7, #0]
 800ce04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b087      	sub	sp, #28
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	32b0      	adds	r2, #176	@ 0xb0
 800ce2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce2e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d101      	bne.n	800ce3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ce36:	2303      	movs	r3, #3
 800ce38:	e008      	b.n	800ce4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ce4a:	2300      	movs	r3, #0
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	371c      	adds	r7, #28
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	32b0      	adds	r2, #176	@ 0xb0
 800ce6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d101      	bne.n	800ce7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ce78:	2303      	movs	r3, #3
 800ce7a:	e004      	b.n	800ce86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	683a      	ldr	r2, [r7, #0]
 800ce80:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ce84:	2300      	movs	r3, #0
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
	...

0800ce94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	32b0      	adds	r2, #176	@ 0xb0
 800cea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceaa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	32b0      	adds	r2, #176	@ 0xb0
 800ceb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d101      	bne.n	800cec2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800cebe:	2303      	movs	r3, #3
 800cec0:	e018      	b.n	800cef4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	7c1b      	ldrb	r3, [r3, #16]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d10a      	bne.n	800cee0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ceca:	4b0c      	ldr	r3, [pc, #48]	@ (800cefc <USBD_CDC_ReceivePacket+0x68>)
 800cecc:	7819      	ldrb	r1, [r3, #0]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ced4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f003 fcaf 	bl	801083c <USBD_LL_PrepareReceive>
 800cede:	e008      	b.n	800cef2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cee0:	4b06      	ldr	r3, [pc, #24]	@ (800cefc <USBD_CDC_ReceivePacket+0x68>)
 800cee2:	7819      	ldrb	r1, [r3, #0]
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ceea:	2340      	movs	r3, #64	@ 0x40
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f003 fca5 	bl	801083c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	24000098 	.word	0x24000098

0800cf00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b086      	sub	sp, #24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	4613      	mov	r3, r2
 800cf0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d101      	bne.n	800cf18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cf14:	2303      	movs	r3, #3
 800cf16:	e01f      	b.n	800cf58 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d003      	beq.n	800cf3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	68ba      	ldr	r2, [r7, #8]
 800cf3a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	79fa      	ldrb	r2, [r7, #7]
 800cf4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f003 fb1b 	bl	8010588 <USBD_LL_Init>
 800cf52:	4603      	mov	r3, r0
 800cf54:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cf56:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3718      	adds	r7, #24
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d101      	bne.n	800cf78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cf74:	2303      	movs	r3, #3
 800cf76:	e025      	b.n	800cfc4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	683a      	ldr	r2, [r7, #0]
 800cf7c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	32ae      	adds	r2, #174	@ 0xae
 800cf8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d00f      	beq.n	800cfb4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	32ae      	adds	r2, #174	@ 0xae
 800cf9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfa4:	f107 020e 	add.w	r2, r7, #14
 800cfa8:	4610      	mov	r0, r2
 800cfaa:	4798      	blx	r3
 800cfac:	4602      	mov	r2, r0
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cfba:	1c5a      	adds	r2, r3, #1
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3710      	adds	r7, #16
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f003 fb27 	bl	8010628 <USBD_LL_Start>
 800cfda:	4603      	mov	r3, r0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cfec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	370c      	adds	r7, #12
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr

0800cffa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b084      	sub	sp, #16
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	460b      	mov	r3, r1
 800d004:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d006:	2300      	movs	r3, #0
 800d008:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d010:	2b00      	cmp	r3, #0
 800d012:	d009      	beq.n	800d028 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	78fa      	ldrb	r2, [r7, #3]
 800d01e:	4611      	mov	r1, r2
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	4798      	blx	r3
 800d024:	4603      	mov	r3, r0
 800d026:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d028:	7bfb      	ldrb	r3, [r7, #15]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b084      	sub	sp, #16
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
 800d03a:	460b      	mov	r3, r1
 800d03c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d03e:	2300      	movs	r3, #0
 800d040:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	78fa      	ldrb	r2, [r7, #3]
 800d04c:	4611      	mov	r1, r2
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	4798      	blx	r3
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d001      	beq.n	800d05c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d058:	2303      	movs	r3, #3
 800d05a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d066:	b580      	push	{r7, lr}
 800d068:	b084      	sub	sp, #16
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d076:	6839      	ldr	r1, [r7, #0]
 800d078:	4618      	mov	r0, r3
 800d07a:	f001 f936 	bl	800e2ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2201      	movs	r2, #1
 800d082:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d08c:	461a      	mov	r2, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d09a:	f003 031f 	and.w	r3, r3, #31
 800d09e:	2b02      	cmp	r3, #2
 800d0a0:	d01a      	beq.n	800d0d8 <USBD_LL_SetupStage+0x72>
 800d0a2:	2b02      	cmp	r3, #2
 800d0a4:	d822      	bhi.n	800d0ec <USBD_LL_SetupStage+0x86>
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <USBD_LL_SetupStage+0x4a>
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d00a      	beq.n	800d0c4 <USBD_LL_SetupStage+0x5e>
 800d0ae:	e01d      	b.n	800d0ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 fb63 	bl	800d784 <USBD_StdDevReq>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	73fb      	strb	r3, [r7, #15]
      break;
 800d0c2:	e020      	b.n	800d106 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 fbcb 	bl	800d868 <USBD_StdItfReq>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	73fb      	strb	r3, [r7, #15]
      break;
 800d0d6:	e016      	b.n	800d106 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d0de:	4619      	mov	r1, r3
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 fc2d 	bl	800d940 <USBD_StdEPReq>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	73fb      	strb	r3, [r7, #15]
      break;
 800d0ea:	e00c      	b.n	800d106 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d0f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f003 faf4 	bl	80106e8 <USBD_LL_StallEP>
 800d100:	4603      	mov	r3, r0
 800d102:	73fb      	strb	r3, [r7, #15]
      break;
 800d104:	bf00      	nop
  }

  return ret;
 800d106:	7bfb      	ldrb	r3, [r7, #15]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b086      	sub	sp, #24
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	460b      	mov	r3, r1
 800d11a:	607a      	str	r2, [r7, #4]
 800d11c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d11e:	2300      	movs	r3, #0
 800d120:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d122:	7afb      	ldrb	r3, [r7, #11]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d16e      	bne.n	800d206 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d12e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d136:	2b03      	cmp	r3, #3
 800d138:	f040 8098 	bne.w	800d26c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	689a      	ldr	r2, [r3, #8]
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	429a      	cmp	r2, r3
 800d146:	d913      	bls.n	800d170 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	689a      	ldr	r2, [r3, #8]
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	1ad2      	subs	r2, r2, r3
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	68da      	ldr	r2, [r3, #12]
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	4293      	cmp	r3, r2
 800d160:	bf28      	it	cs
 800d162:	4613      	movcs	r3, r2
 800d164:	461a      	mov	r2, r3
 800d166:	6879      	ldr	r1, [r7, #4]
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f001 f9be 	bl	800e4ea <USBD_CtlContinueRx>
 800d16e:	e07d      	b.n	800d26c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d176:	f003 031f 	and.w	r3, r3, #31
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d014      	beq.n	800d1a8 <USBD_LL_DataOutStage+0x98>
 800d17e:	2b02      	cmp	r3, #2
 800d180:	d81d      	bhi.n	800d1be <USBD_LL_DataOutStage+0xae>
 800d182:	2b00      	cmp	r3, #0
 800d184:	d002      	beq.n	800d18c <USBD_LL_DataOutStage+0x7c>
 800d186:	2b01      	cmp	r3, #1
 800d188:	d003      	beq.n	800d192 <USBD_LL_DataOutStage+0x82>
 800d18a:	e018      	b.n	800d1be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d18c:	2300      	movs	r3, #0
 800d18e:	75bb      	strb	r3, [r7, #22]
            break;
 800d190:	e018      	b.n	800d1c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	4619      	mov	r1, r3
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f000 fa64 	bl	800d66a <USBD_CoreFindIF>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	75bb      	strb	r3, [r7, #22]
            break;
 800d1a6:	e00d      	b.n	800d1c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f000 fa66 	bl	800d684 <USBD_CoreFindEP>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	75bb      	strb	r3, [r7, #22]
            break;
 800d1bc:	e002      	b.n	800d1c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	75bb      	strb	r3, [r7, #22]
            break;
 800d1c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d1c4:	7dbb      	ldrb	r3, [r7, #22]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d119      	bne.n	800d1fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	2b03      	cmp	r3, #3
 800d1d4:	d113      	bne.n	800d1fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d1d6:	7dba      	ldrb	r2, [r7, #22]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	32ae      	adds	r2, #174	@ 0xae
 800d1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1e0:	691b      	ldr	r3, [r3, #16]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00b      	beq.n	800d1fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d1e6:	7dba      	ldrb	r2, [r7, #22]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d1ee:	7dba      	ldrb	r2, [r7, #22]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	32ae      	adds	r2, #174	@ 0xae
 800d1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1f8:	691b      	ldr	r3, [r3, #16]
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d1fe:	68f8      	ldr	r0, [r7, #12]
 800d200:	f001 f984 	bl	800e50c <USBD_CtlSendStatus>
 800d204:	e032      	b.n	800d26c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d206:	7afb      	ldrb	r3, [r7, #11]
 800d208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	4619      	mov	r1, r3
 800d210:	68f8      	ldr	r0, [r7, #12]
 800d212:	f000 fa37 	bl	800d684 <USBD_CoreFindEP>
 800d216:	4603      	mov	r3, r0
 800d218:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d21a:	7dbb      	ldrb	r3, [r7, #22]
 800d21c:	2bff      	cmp	r3, #255	@ 0xff
 800d21e:	d025      	beq.n	800d26c <USBD_LL_DataOutStage+0x15c>
 800d220:	7dbb      	ldrb	r3, [r7, #22]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d122      	bne.n	800d26c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d22c:	b2db      	uxtb	r3, r3
 800d22e:	2b03      	cmp	r3, #3
 800d230:	d117      	bne.n	800d262 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d232:	7dba      	ldrb	r2, [r7, #22]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	32ae      	adds	r2, #174	@ 0xae
 800d238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d23c:	699b      	ldr	r3, [r3, #24]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00f      	beq.n	800d262 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d242:	7dba      	ldrb	r2, [r7, #22]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d24a:	7dba      	ldrb	r2, [r7, #22]
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	32ae      	adds	r2, #174	@ 0xae
 800d250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d254:	699b      	ldr	r3, [r3, #24]
 800d256:	7afa      	ldrb	r2, [r7, #11]
 800d258:	4611      	mov	r1, r2
 800d25a:	68f8      	ldr	r0, [r7, #12]
 800d25c:	4798      	blx	r3
 800d25e:	4603      	mov	r3, r0
 800d260:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d262:	7dfb      	ldrb	r3, [r7, #23]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d268:	7dfb      	ldrb	r3, [r7, #23]
 800d26a:	e000      	b.n	800d26e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d26c:	2300      	movs	r3, #0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3718      	adds	r7, #24
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b086      	sub	sp, #24
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	60f8      	str	r0, [r7, #12]
 800d27e:	460b      	mov	r3, r1
 800d280:	607a      	str	r2, [r7, #4]
 800d282:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d284:	7afb      	ldrb	r3, [r7, #11]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d16f      	bne.n	800d36a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	3314      	adds	r3, #20
 800d28e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d296:	2b02      	cmp	r3, #2
 800d298:	d15a      	bne.n	800d350 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	689a      	ldr	r2, [r3, #8]
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d914      	bls.n	800d2d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	689a      	ldr	r2, [r3, #8]
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	68db      	ldr	r3, [r3, #12]
 800d2ae:	1ad2      	subs	r2, r2, r3
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	6879      	ldr	r1, [r7, #4]
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	f001 f8e6 	bl	800e48e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	68f8      	ldr	r0, [r7, #12]
 800d2ca:	f003 fab7 	bl	801083c <USBD_LL_PrepareReceive>
 800d2ce:	e03f      	b.n	800d350 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	68da      	ldr	r2, [r3, #12]
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d11c      	bne.n	800d316 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	685a      	ldr	r2, [r3, #4]
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d316      	bcc.n	800d316 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	685a      	ldr	r2, [r3, #4]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d20f      	bcs.n	800d316 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f001 f8c7 	bl	800e48e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2200      	movs	r2, #0
 800d304:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d308:	2300      	movs	r3, #0
 800d30a:	2200      	movs	r2, #0
 800d30c:	2100      	movs	r1, #0
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f003 fa94 	bl	801083c <USBD_LL_PrepareReceive>
 800d314:	e01c      	b.n	800d350 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	2b03      	cmp	r3, #3
 800d320:	d10f      	bne.n	800d342 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d009      	beq.n	800d342 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2200      	movs	r2, #0
 800d332:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d342:	2180      	movs	r1, #128	@ 0x80
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f003 f9cf 	bl	80106e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d34a:	68f8      	ldr	r0, [r7, #12]
 800d34c:	f001 f8f1 	bl	800e532 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d03a      	beq.n	800d3d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f7ff fe42 	bl	800cfe4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2200      	movs	r2, #0
 800d364:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d368:	e032      	b.n	800d3d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d36a:	7afb      	ldrb	r3, [r7, #11]
 800d36c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d370:	b2db      	uxtb	r3, r3
 800d372:	4619      	mov	r1, r3
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f000 f985 	bl	800d684 <USBD_CoreFindEP>
 800d37a:	4603      	mov	r3, r0
 800d37c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d37e:	7dfb      	ldrb	r3, [r7, #23]
 800d380:	2bff      	cmp	r3, #255	@ 0xff
 800d382:	d025      	beq.n	800d3d0 <USBD_LL_DataInStage+0x15a>
 800d384:	7dfb      	ldrb	r3, [r7, #23]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d122      	bne.n	800d3d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d390:	b2db      	uxtb	r3, r3
 800d392:	2b03      	cmp	r3, #3
 800d394:	d11c      	bne.n	800d3d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d396:	7dfa      	ldrb	r2, [r7, #23]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	32ae      	adds	r2, #174	@ 0xae
 800d39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3a0:	695b      	ldr	r3, [r3, #20]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d014      	beq.n	800d3d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d3a6:	7dfa      	ldrb	r2, [r7, #23]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d3ae:	7dfa      	ldrb	r2, [r7, #23]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	32ae      	adds	r2, #174	@ 0xae
 800d3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3b8:	695b      	ldr	r3, [r3, #20]
 800d3ba:	7afa      	ldrb	r2, [r7, #11]
 800d3bc:	4611      	mov	r1, r2
 800d3be:	68f8      	ldr	r0, [r7, #12]
 800d3c0:	4798      	blx	r3
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d3c6:	7dbb      	ldrb	r3, [r7, #22]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d001      	beq.n	800d3d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d3cc:	7dbb      	ldrb	r3, [r7, #22]
 800d3ce:	e000      	b.n	800d3d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d3d0:	2300      	movs	r3, #0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3718      	adds	r7, #24
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b084      	sub	sp, #16
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2200      	movs	r2, #0
 800d408:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d412:	2b00      	cmp	r3, #0
 800d414:	d014      	beq.n	800d440 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d00e      	beq.n	800d440 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	6852      	ldr	r2, [r2, #4]
 800d42e:	b2d2      	uxtb	r2, r2
 800d430:	4611      	mov	r1, r2
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	4798      	blx	r3
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d001      	beq.n	800d440 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d43c:	2303      	movs	r3, #3
 800d43e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d440:	2340      	movs	r3, #64	@ 0x40
 800d442:	2200      	movs	r2, #0
 800d444:	2100      	movs	r1, #0
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f003 f909 	bl	801065e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2201      	movs	r2, #1
 800d450:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2240      	movs	r2, #64	@ 0x40
 800d458:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d45c:	2340      	movs	r3, #64	@ 0x40
 800d45e:	2200      	movs	r2, #0
 800d460:	2180      	movs	r1, #128	@ 0x80
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f003 f8fb 	bl	801065e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2201      	movs	r2, #1
 800d46c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2240      	movs	r2, #64	@ 0x40
 800d472:	621a      	str	r2, [r3, #32]

  return ret;
 800d474:	7bfb      	ldrb	r3, [r7, #15]
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d47e:	b480      	push	{r7}
 800d480:	b083      	sub	sp, #12
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
 800d486:	460b      	mov	r3, r1
 800d488:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	78fa      	ldrb	r2, [r7, #3]
 800d48e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d490:	2300      	movs	r3, #0
}
 800d492:	4618      	mov	r0, r3
 800d494:	370c      	adds	r7, #12
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr

0800d49e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d49e:	b480      	push	{r7}
 800d4a0:	b083      	sub	sp, #12
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	2b04      	cmp	r3, #4
 800d4b0:	d006      	beq.n	800d4c0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2204      	movs	r2, #4
 800d4c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	370c      	adds	r7, #12
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr

0800d4d6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d4d6:	b480      	push	{r7}
 800d4d8:	b083      	sub	sp, #12
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	2b04      	cmp	r3, #4
 800d4e8:	d106      	bne.n	800d4f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d4f0:	b2da      	uxtb	r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	370c      	adds	r7, #12
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr

0800d506 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b082      	sub	sp, #8
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d514:	b2db      	uxtb	r3, r3
 800d516:	2b03      	cmp	r3, #3
 800d518:	d110      	bne.n	800d53c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00b      	beq.n	800d53c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d52a:	69db      	ldr	r3, [r3, #28]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d005      	beq.n	800d53c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d536:	69db      	ldr	r3, [r3, #28]
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3708      	adds	r7, #8
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b082      	sub	sp, #8
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
 800d54e:	460b      	mov	r3, r1
 800d550:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	32ae      	adds	r2, #174	@ 0xae
 800d55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d101      	bne.n	800d568 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d564:	2303      	movs	r3, #3
 800d566:	e01c      	b.n	800d5a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	2b03      	cmp	r3, #3
 800d572:	d115      	bne.n	800d5a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	32ae      	adds	r2, #174	@ 0xae
 800d57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d582:	6a1b      	ldr	r3, [r3, #32]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d00b      	beq.n	800d5a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	32ae      	adds	r2, #174	@ 0xae
 800d592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d596:	6a1b      	ldr	r3, [r3, #32]
 800d598:	78fa      	ldrb	r2, [r7, #3]
 800d59a:	4611      	mov	r1, r2
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d5a0:	2300      	movs	r3, #0
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3708      	adds	r7, #8
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b082      	sub	sp, #8
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	32ae      	adds	r2, #174	@ 0xae
 800d5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d101      	bne.n	800d5cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d5c8:	2303      	movs	r3, #3
 800d5ca:	e01c      	b.n	800d606 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	2b03      	cmp	r3, #3
 800d5d6:	d115      	bne.n	800d604 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	32ae      	adds	r2, #174	@ 0xae
 800d5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00b      	beq.n	800d604 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	32ae      	adds	r2, #174	@ 0xae
 800d5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5fc:	78fa      	ldrb	r2, [r7, #3]
 800d5fe:	4611      	mov	r1, r2
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d604:	2300      	movs	r3, #0
}
 800d606:	4618      	mov	r0, r3
 800d608:	3708      	adds	r7, #8
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d60e:	b480      	push	{r7}
 800d610:	b083      	sub	sp, #12
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	370c      	adds	r7, #12
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d62c:	2300      	movs	r3, #0
 800d62e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00e      	beq.n	800d660 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	6852      	ldr	r2, [r2, #4]
 800d64e:	b2d2      	uxtb	r2, r2
 800d650:	4611      	mov	r1, r2
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	4798      	blx	r3
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d001      	beq.n	800d660 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d65c:	2303      	movs	r3, #3
 800d65e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d660:	7bfb      	ldrb	r3, [r7, #15]
}
 800d662:	4618      	mov	r0, r3
 800d664:	3710      	adds	r7, #16
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}

0800d66a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d66a:	b480      	push	{r7}
 800d66c:	b083      	sub	sp, #12
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
 800d672:	460b      	mov	r3, r1
 800d674:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d676:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d678:	4618      	mov	r0, r3
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	460b      	mov	r3, r1
 800d68e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d690:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d692:	4618      	mov	r0, r3
 800d694:	370c      	adds	r7, #12
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr

0800d69e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b086      	sub	sp, #24
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
 800d6a6:	460b      	mov	r3, r1
 800d6a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	885b      	ldrh	r3, [r3, #2]
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	68fa      	ldr	r2, [r7, #12]
 800d6be:	7812      	ldrb	r2, [r2, #0]
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d91f      	bls.n	800d704 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d6ca:	e013      	b.n	800d6f4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d6cc:	f107 030a 	add.w	r3, r7, #10
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	6978      	ldr	r0, [r7, #20]
 800d6d4:	f000 f81b 	bl	800d70e <USBD_GetNextDesc>
 800d6d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	785b      	ldrb	r3, [r3, #1]
 800d6de:	2b05      	cmp	r3, #5
 800d6e0:	d108      	bne.n	800d6f4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	789b      	ldrb	r3, [r3, #2]
 800d6ea:	78fa      	ldrb	r2, [r7, #3]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d008      	beq.n	800d702 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	885b      	ldrh	r3, [r3, #2]
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	897b      	ldrh	r3, [r7, #10]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d8e5      	bhi.n	800d6cc <USBD_GetEpDesc+0x2e>
 800d700:	e000      	b.n	800d704 <USBD_GetEpDesc+0x66>
          break;
 800d702:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d704:	693b      	ldr	r3, [r7, #16]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3718      	adds	r7, #24
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d70e:	b480      	push	{r7}
 800d710:	b085      	sub	sp, #20
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
 800d716:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	881b      	ldrh	r3, [r3, #0]
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	7812      	ldrb	r2, [r2, #0]
 800d724:	4413      	add	r3, r2
 800d726:	b29a      	uxth	r2, r3
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	461a      	mov	r2, r3
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4413      	add	r3, r2
 800d736:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d738:	68fb      	ldr	r3, [r7, #12]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3714      	adds	r7, #20
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr

0800d746 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d746:	b480      	push	{r7}
 800d748:	b087      	sub	sp, #28
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	3301      	adds	r3, #1
 800d75c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d764:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d768:	021b      	lsls	r3, r3, #8
 800d76a:	b21a      	sxth	r2, r3
 800d76c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d770:	4313      	orrs	r3, r2
 800d772:	b21b      	sxth	r3, r3
 800d774:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d776:	89fb      	ldrh	r3, [r7, #14]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	371c      	adds	r7, #28
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d78e:	2300      	movs	r3, #0
 800d790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d79a:	2b40      	cmp	r3, #64	@ 0x40
 800d79c:	d005      	beq.n	800d7aa <USBD_StdDevReq+0x26>
 800d79e:	2b40      	cmp	r3, #64	@ 0x40
 800d7a0:	d857      	bhi.n	800d852 <USBD_StdDevReq+0xce>
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d00f      	beq.n	800d7c6 <USBD_StdDevReq+0x42>
 800d7a6:	2b20      	cmp	r3, #32
 800d7a8:	d153      	bne.n	800d852 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	32ae      	adds	r2, #174	@ 0xae
 800d7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7b8:	689b      	ldr	r3, [r3, #8]
 800d7ba:	6839      	ldr	r1, [r7, #0]
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	4798      	blx	r3
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	73fb      	strb	r3, [r7, #15]
      break;
 800d7c4:	e04a      	b.n	800d85c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	785b      	ldrb	r3, [r3, #1]
 800d7ca:	2b09      	cmp	r3, #9
 800d7cc:	d83b      	bhi.n	800d846 <USBD_StdDevReq+0xc2>
 800d7ce:	a201      	add	r2, pc, #4	@ (adr r2, 800d7d4 <USBD_StdDevReq+0x50>)
 800d7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d4:	0800d829 	.word	0x0800d829
 800d7d8:	0800d83d 	.word	0x0800d83d
 800d7dc:	0800d847 	.word	0x0800d847
 800d7e0:	0800d833 	.word	0x0800d833
 800d7e4:	0800d847 	.word	0x0800d847
 800d7e8:	0800d807 	.word	0x0800d807
 800d7ec:	0800d7fd 	.word	0x0800d7fd
 800d7f0:	0800d847 	.word	0x0800d847
 800d7f4:	0800d81f 	.word	0x0800d81f
 800d7f8:	0800d811 	.word	0x0800d811
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d7fc:	6839      	ldr	r1, [r7, #0]
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 fa3c 	bl	800dc7c <USBD_GetDescriptor>
          break;
 800d804:	e024      	b.n	800d850 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d806:	6839      	ldr	r1, [r7, #0]
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 fbcb 	bl	800dfa4 <USBD_SetAddress>
          break;
 800d80e:	e01f      	b.n	800d850 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d810:	6839      	ldr	r1, [r7, #0]
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 fc0a 	bl	800e02c <USBD_SetConfig>
 800d818:	4603      	mov	r3, r0
 800d81a:	73fb      	strb	r3, [r7, #15]
          break;
 800d81c:	e018      	b.n	800d850 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d81e:	6839      	ldr	r1, [r7, #0]
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 fcad 	bl	800e180 <USBD_GetConfig>
          break;
 800d826:	e013      	b.n	800d850 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d828:	6839      	ldr	r1, [r7, #0]
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f000 fcde 	bl	800e1ec <USBD_GetStatus>
          break;
 800d830:	e00e      	b.n	800d850 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d832:	6839      	ldr	r1, [r7, #0]
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 fd0d 	bl	800e254 <USBD_SetFeature>
          break;
 800d83a:	e009      	b.n	800d850 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d83c:	6839      	ldr	r1, [r7, #0]
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 fd31 	bl	800e2a6 <USBD_ClrFeature>
          break;
 800d844:	e004      	b.n	800d850 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d846:	6839      	ldr	r1, [r7, #0]
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 fd88 	bl	800e35e <USBD_CtlError>
          break;
 800d84e:	bf00      	nop
      }
      break;
 800d850:	e004      	b.n	800d85c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d852:	6839      	ldr	r1, [r7, #0]
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 fd82 	bl	800e35e <USBD_CtlError>
      break;
 800d85a:	bf00      	nop
  }

  return ret;
 800d85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3710      	adds	r7, #16
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop

0800d868 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d872:	2300      	movs	r3, #0
 800d874:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d87e:	2b40      	cmp	r3, #64	@ 0x40
 800d880:	d005      	beq.n	800d88e <USBD_StdItfReq+0x26>
 800d882:	2b40      	cmp	r3, #64	@ 0x40
 800d884:	d852      	bhi.n	800d92c <USBD_StdItfReq+0xc4>
 800d886:	2b00      	cmp	r3, #0
 800d888:	d001      	beq.n	800d88e <USBD_StdItfReq+0x26>
 800d88a:	2b20      	cmp	r3, #32
 800d88c:	d14e      	bne.n	800d92c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d894:	b2db      	uxtb	r3, r3
 800d896:	3b01      	subs	r3, #1
 800d898:	2b02      	cmp	r3, #2
 800d89a:	d840      	bhi.n	800d91e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	889b      	ldrh	r3, [r3, #4]
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d836      	bhi.n	800d914 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	889b      	ldrh	r3, [r3, #4]
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f7ff fedb 	bl	800d66a <USBD_CoreFindIF>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d8b8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ba:	2bff      	cmp	r3, #255	@ 0xff
 800d8bc:	d01d      	beq.n	800d8fa <USBD_StdItfReq+0x92>
 800d8be:	7bbb      	ldrb	r3, [r7, #14]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d11a      	bne.n	800d8fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d8c4:	7bba      	ldrb	r2, [r7, #14]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	32ae      	adds	r2, #174	@ 0xae
 800d8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00f      	beq.n	800d8f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d8d4:	7bba      	ldrb	r2, [r7, #14]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d8dc:	7bba      	ldrb	r2, [r7, #14]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	32ae      	adds	r2, #174	@ 0xae
 800d8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	6839      	ldr	r1, [r7, #0]
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	4798      	blx	r3
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d8f2:	e004      	b.n	800d8fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d8f4:	2303      	movs	r3, #3
 800d8f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d8f8:	e001      	b.n	800d8fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d8fa:	2303      	movs	r3, #3
 800d8fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	88db      	ldrh	r3, [r3, #6]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d110      	bne.n	800d928 <USBD_StdItfReq+0xc0>
 800d906:	7bfb      	ldrb	r3, [r7, #15]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d10d      	bne.n	800d928 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 fdfd 	bl	800e50c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d912:	e009      	b.n	800d928 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d914:	6839      	ldr	r1, [r7, #0]
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 fd21 	bl	800e35e <USBD_CtlError>
          break;
 800d91c:	e004      	b.n	800d928 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d91e:	6839      	ldr	r1, [r7, #0]
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 fd1c 	bl	800e35e <USBD_CtlError>
          break;
 800d926:	e000      	b.n	800d92a <USBD_StdItfReq+0xc2>
          break;
 800d928:	bf00      	nop
      }
      break;
 800d92a:	e004      	b.n	800d936 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d92c:	6839      	ldr	r1, [r7, #0]
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 fd15 	bl	800e35e <USBD_CtlError>
      break;
 800d934:	bf00      	nop
  }

  return ret;
 800d936:	7bfb      	ldrb	r3, [r7, #15]
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3710      	adds	r7, #16
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d94a:	2300      	movs	r3, #0
 800d94c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	889b      	ldrh	r3, [r3, #4]
 800d952:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d95c:	2b40      	cmp	r3, #64	@ 0x40
 800d95e:	d007      	beq.n	800d970 <USBD_StdEPReq+0x30>
 800d960:	2b40      	cmp	r3, #64	@ 0x40
 800d962:	f200 817f 	bhi.w	800dc64 <USBD_StdEPReq+0x324>
 800d966:	2b00      	cmp	r3, #0
 800d968:	d02a      	beq.n	800d9c0 <USBD_StdEPReq+0x80>
 800d96a:	2b20      	cmp	r3, #32
 800d96c:	f040 817a 	bne.w	800dc64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d970:	7bbb      	ldrb	r3, [r7, #14]
 800d972:	4619      	mov	r1, r3
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f7ff fe85 	bl	800d684 <USBD_CoreFindEP>
 800d97a:	4603      	mov	r3, r0
 800d97c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d97e:	7b7b      	ldrb	r3, [r7, #13]
 800d980:	2bff      	cmp	r3, #255	@ 0xff
 800d982:	f000 8174 	beq.w	800dc6e <USBD_StdEPReq+0x32e>
 800d986:	7b7b      	ldrb	r3, [r7, #13]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	f040 8170 	bne.w	800dc6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d98e:	7b7a      	ldrb	r2, [r7, #13]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d996:	7b7a      	ldrb	r2, [r7, #13]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	32ae      	adds	r2, #174	@ 0xae
 800d99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f000 8163 	beq.w	800dc6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d9a8:	7b7a      	ldrb	r2, [r7, #13]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	32ae      	adds	r2, #174	@ 0xae
 800d9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	6839      	ldr	r1, [r7, #0]
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	4798      	blx	r3
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d9be:	e156      	b.n	800dc6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	785b      	ldrb	r3, [r3, #1]
 800d9c4:	2b03      	cmp	r3, #3
 800d9c6:	d008      	beq.n	800d9da <USBD_StdEPReq+0x9a>
 800d9c8:	2b03      	cmp	r3, #3
 800d9ca:	f300 8145 	bgt.w	800dc58 <USBD_StdEPReq+0x318>
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	f000 809b 	beq.w	800db0a <USBD_StdEPReq+0x1ca>
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d03c      	beq.n	800da52 <USBD_StdEPReq+0x112>
 800d9d8:	e13e      	b.n	800dc58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	2b02      	cmp	r3, #2
 800d9e4:	d002      	beq.n	800d9ec <USBD_StdEPReq+0xac>
 800d9e6:	2b03      	cmp	r3, #3
 800d9e8:	d016      	beq.n	800da18 <USBD_StdEPReq+0xd8>
 800d9ea:	e02c      	b.n	800da46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d9ec:	7bbb      	ldrb	r3, [r7, #14]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00d      	beq.n	800da0e <USBD_StdEPReq+0xce>
 800d9f2:	7bbb      	ldrb	r3, [r7, #14]
 800d9f4:	2b80      	cmp	r3, #128	@ 0x80
 800d9f6:	d00a      	beq.n	800da0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d9f8:	7bbb      	ldrb	r3, [r7, #14]
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f002 fe73 	bl	80106e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da02:	2180      	movs	r1, #128	@ 0x80
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f002 fe6f 	bl	80106e8 <USBD_LL_StallEP>
 800da0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800da0c:	e020      	b.n	800da50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800da0e:	6839      	ldr	r1, [r7, #0]
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 fca4 	bl	800e35e <USBD_CtlError>
              break;
 800da16:	e01b      	b.n	800da50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	885b      	ldrh	r3, [r3, #2]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d10e      	bne.n	800da3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800da20:	7bbb      	ldrb	r3, [r7, #14]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00b      	beq.n	800da3e <USBD_StdEPReq+0xfe>
 800da26:	7bbb      	ldrb	r3, [r7, #14]
 800da28:	2b80      	cmp	r3, #128	@ 0x80
 800da2a:	d008      	beq.n	800da3e <USBD_StdEPReq+0xfe>
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	88db      	ldrh	r3, [r3, #6]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d104      	bne.n	800da3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800da34:	7bbb      	ldrb	r3, [r7, #14]
 800da36:	4619      	mov	r1, r3
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f002 fe55 	bl	80106e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 fd64 	bl	800e50c <USBD_CtlSendStatus>

              break;
 800da44:	e004      	b.n	800da50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800da46:	6839      	ldr	r1, [r7, #0]
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 fc88 	bl	800e35e <USBD_CtlError>
              break;
 800da4e:	bf00      	nop
          }
          break;
 800da50:	e107      	b.n	800dc62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	2b02      	cmp	r3, #2
 800da5c:	d002      	beq.n	800da64 <USBD_StdEPReq+0x124>
 800da5e:	2b03      	cmp	r3, #3
 800da60:	d016      	beq.n	800da90 <USBD_StdEPReq+0x150>
 800da62:	e04b      	b.n	800dafc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da64:	7bbb      	ldrb	r3, [r7, #14]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00d      	beq.n	800da86 <USBD_StdEPReq+0x146>
 800da6a:	7bbb      	ldrb	r3, [r7, #14]
 800da6c:	2b80      	cmp	r3, #128	@ 0x80
 800da6e:	d00a      	beq.n	800da86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da70:	7bbb      	ldrb	r3, [r7, #14]
 800da72:	4619      	mov	r1, r3
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f002 fe37 	bl	80106e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da7a:	2180      	movs	r1, #128	@ 0x80
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f002 fe33 	bl	80106e8 <USBD_LL_StallEP>
 800da82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800da84:	e040      	b.n	800db08 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800da86:	6839      	ldr	r1, [r7, #0]
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 fc68 	bl	800e35e <USBD_CtlError>
              break;
 800da8e:	e03b      	b.n	800db08 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	885b      	ldrh	r3, [r3, #2]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d136      	bne.n	800db06 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800da98:	7bbb      	ldrb	r3, [r7, #14]
 800da9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d004      	beq.n	800daac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800daa2:	7bbb      	ldrb	r3, [r7, #14]
 800daa4:	4619      	mov	r1, r3
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f002 fe3d 	bl	8010726 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f000 fd2d 	bl	800e50c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dab2:	7bbb      	ldrb	r3, [r7, #14]
 800dab4:	4619      	mov	r1, r3
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f7ff fde4 	bl	800d684 <USBD_CoreFindEP>
 800dabc:	4603      	mov	r3, r0
 800dabe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dac0:	7b7b      	ldrb	r3, [r7, #13]
 800dac2:	2bff      	cmp	r3, #255	@ 0xff
 800dac4:	d01f      	beq.n	800db06 <USBD_StdEPReq+0x1c6>
 800dac6:	7b7b      	ldrb	r3, [r7, #13]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d11c      	bne.n	800db06 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dacc:	7b7a      	ldrb	r2, [r7, #13]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dad4:	7b7a      	ldrb	r2, [r7, #13]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	32ae      	adds	r2, #174	@ 0xae
 800dada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d010      	beq.n	800db06 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dae4:	7b7a      	ldrb	r2, [r7, #13]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	32ae      	adds	r2, #174	@ 0xae
 800daea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daee:	689b      	ldr	r3, [r3, #8]
 800daf0:	6839      	ldr	r1, [r7, #0]
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	4798      	blx	r3
 800daf6:	4603      	mov	r3, r0
 800daf8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dafa:	e004      	b.n	800db06 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dafc:	6839      	ldr	r1, [r7, #0]
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 fc2d 	bl	800e35e <USBD_CtlError>
              break;
 800db04:	e000      	b.n	800db08 <USBD_StdEPReq+0x1c8>
              break;
 800db06:	bf00      	nop
          }
          break;
 800db08:	e0ab      	b.n	800dc62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db10:	b2db      	uxtb	r3, r3
 800db12:	2b02      	cmp	r3, #2
 800db14:	d002      	beq.n	800db1c <USBD_StdEPReq+0x1dc>
 800db16:	2b03      	cmp	r3, #3
 800db18:	d032      	beq.n	800db80 <USBD_StdEPReq+0x240>
 800db1a:	e097      	b.n	800dc4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db1c:	7bbb      	ldrb	r3, [r7, #14]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d007      	beq.n	800db32 <USBD_StdEPReq+0x1f2>
 800db22:	7bbb      	ldrb	r3, [r7, #14]
 800db24:	2b80      	cmp	r3, #128	@ 0x80
 800db26:	d004      	beq.n	800db32 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800db28:	6839      	ldr	r1, [r7, #0]
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 fc17 	bl	800e35e <USBD_CtlError>
                break;
 800db30:	e091      	b.n	800dc56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db36:	2b00      	cmp	r3, #0
 800db38:	da0b      	bge.n	800db52 <USBD_StdEPReq+0x212>
 800db3a:	7bbb      	ldrb	r3, [r7, #14]
 800db3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800db40:	4613      	mov	r3, r2
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	4413      	add	r3, r2
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	3310      	adds	r3, #16
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	4413      	add	r3, r2
 800db4e:	3304      	adds	r3, #4
 800db50:	e00b      	b.n	800db6a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800db52:	7bbb      	ldrb	r3, [r7, #14]
 800db54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db58:	4613      	mov	r3, r2
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	4413      	add	r3, r2
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800db64:	687a      	ldr	r2, [r7, #4]
 800db66:	4413      	add	r3, r2
 800db68:	3304      	adds	r3, #4
 800db6a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	2200      	movs	r2, #0
 800db70:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	2202      	movs	r2, #2
 800db76:	4619      	mov	r1, r3
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 fc6d 	bl	800e458 <USBD_CtlSendData>
              break;
 800db7e:	e06a      	b.n	800dc56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800db80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db84:	2b00      	cmp	r3, #0
 800db86:	da11      	bge.n	800dbac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800db88:	7bbb      	ldrb	r3, [r7, #14]
 800db8a:	f003 020f 	and.w	r2, r3, #15
 800db8e:	6879      	ldr	r1, [r7, #4]
 800db90:	4613      	mov	r3, r2
 800db92:	009b      	lsls	r3, r3, #2
 800db94:	4413      	add	r3, r2
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	440b      	add	r3, r1
 800db9a:	3324      	adds	r3, #36	@ 0x24
 800db9c:	881b      	ldrh	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d117      	bne.n	800dbd2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dba2:	6839      	ldr	r1, [r7, #0]
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 fbda 	bl	800e35e <USBD_CtlError>
                  break;
 800dbaa:	e054      	b.n	800dc56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dbac:	7bbb      	ldrb	r3, [r7, #14]
 800dbae:	f003 020f 	and.w	r2, r3, #15
 800dbb2:	6879      	ldr	r1, [r7, #4]
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	4413      	add	r3, r2
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	440b      	add	r3, r1
 800dbbe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dbc2:	881b      	ldrh	r3, [r3, #0]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d104      	bne.n	800dbd2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dbc8:	6839      	ldr	r1, [r7, #0]
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 fbc7 	bl	800e35e <USBD_CtlError>
                  break;
 800dbd0:	e041      	b.n	800dc56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dbd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	da0b      	bge.n	800dbf2 <USBD_StdEPReq+0x2b2>
 800dbda:	7bbb      	ldrb	r3, [r7, #14]
 800dbdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dbe0:	4613      	mov	r3, r2
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	4413      	add	r3, r2
 800dbe6:	009b      	lsls	r3, r3, #2
 800dbe8:	3310      	adds	r3, #16
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	4413      	add	r3, r2
 800dbee:	3304      	adds	r3, #4
 800dbf0:	e00b      	b.n	800dc0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dbf2:	7bbb      	ldrb	r3, [r7, #14]
 800dbf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	4413      	add	r3, r2
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	4413      	add	r3, r2
 800dc08:	3304      	adds	r3, #4
 800dc0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dc0c:	7bbb      	ldrb	r3, [r7, #14]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d002      	beq.n	800dc18 <USBD_StdEPReq+0x2d8>
 800dc12:	7bbb      	ldrb	r3, [r7, #14]
 800dc14:	2b80      	cmp	r3, #128	@ 0x80
 800dc16:	d103      	bne.n	800dc20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	601a      	str	r2, [r3, #0]
 800dc1e:	e00e      	b.n	800dc3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dc20:	7bbb      	ldrb	r3, [r7, #14]
 800dc22:	4619      	mov	r1, r3
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f002 fd9d 	bl	8010764 <USBD_LL_IsStallEP>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d003      	beq.n	800dc38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	2201      	movs	r2, #1
 800dc34:	601a      	str	r2, [r3, #0]
 800dc36:	e002      	b.n	800dc3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	2202      	movs	r2, #2
 800dc42:	4619      	mov	r1, r3
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f000 fc07 	bl	800e458 <USBD_CtlSendData>
              break;
 800dc4a:	e004      	b.n	800dc56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dc4c:	6839      	ldr	r1, [r7, #0]
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 fb85 	bl	800e35e <USBD_CtlError>
              break;
 800dc54:	bf00      	nop
          }
          break;
 800dc56:	e004      	b.n	800dc62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800dc58:	6839      	ldr	r1, [r7, #0]
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 fb7f 	bl	800e35e <USBD_CtlError>
          break;
 800dc60:	bf00      	nop
      }
      break;
 800dc62:	e005      	b.n	800dc70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800dc64:	6839      	ldr	r1, [r7, #0]
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 fb79 	bl	800e35e <USBD_CtlError>
      break;
 800dc6c:	e000      	b.n	800dc70 <USBD_StdEPReq+0x330>
      break;
 800dc6e:	bf00      	nop
  }

  return ret;
 800dc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
	...

0800dc7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc86:	2300      	movs	r3, #0
 800dc88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	885b      	ldrh	r3, [r3, #2]
 800dc96:	0a1b      	lsrs	r3, r3, #8
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	2b0e      	cmp	r3, #14
 800dc9e:	f200 8152 	bhi.w	800df46 <USBD_GetDescriptor+0x2ca>
 800dca2:	a201      	add	r2, pc, #4	@ (adr r2, 800dca8 <USBD_GetDescriptor+0x2c>)
 800dca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca8:	0800dd19 	.word	0x0800dd19
 800dcac:	0800dd31 	.word	0x0800dd31
 800dcb0:	0800dd71 	.word	0x0800dd71
 800dcb4:	0800df47 	.word	0x0800df47
 800dcb8:	0800df47 	.word	0x0800df47
 800dcbc:	0800dee7 	.word	0x0800dee7
 800dcc0:	0800df13 	.word	0x0800df13
 800dcc4:	0800df47 	.word	0x0800df47
 800dcc8:	0800df47 	.word	0x0800df47
 800dccc:	0800df47 	.word	0x0800df47
 800dcd0:	0800df47 	.word	0x0800df47
 800dcd4:	0800df47 	.word	0x0800df47
 800dcd8:	0800df47 	.word	0x0800df47
 800dcdc:	0800df47 	.word	0x0800df47
 800dce0:	0800dce5 	.word	0x0800dce5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dcea:	69db      	ldr	r3, [r3, #28]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00b      	beq.n	800dd08 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dcf6:	69db      	ldr	r3, [r3, #28]
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	7c12      	ldrb	r2, [r2, #16]
 800dcfc:	f107 0108 	add.w	r1, r7, #8
 800dd00:	4610      	mov	r0, r2
 800dd02:	4798      	blx	r3
 800dd04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd06:	e126      	b.n	800df56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd08:	6839      	ldr	r1, [r7, #0]
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 fb27 	bl	800e35e <USBD_CtlError>
        err++;
 800dd10:	7afb      	ldrb	r3, [r7, #11]
 800dd12:	3301      	adds	r3, #1
 800dd14:	72fb      	strb	r3, [r7, #11]
      break;
 800dd16:	e11e      	b.n	800df56 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	7c12      	ldrb	r2, [r2, #16]
 800dd24:	f107 0108 	add.w	r1, r7, #8
 800dd28:	4610      	mov	r0, r2
 800dd2a:	4798      	blx	r3
 800dd2c:	60f8      	str	r0, [r7, #12]
      break;
 800dd2e:	e112      	b.n	800df56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	7c1b      	ldrb	r3, [r3, #16]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d10d      	bne.n	800dd54 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd40:	f107 0208 	add.w	r2, r7, #8
 800dd44:	4610      	mov	r0, r2
 800dd46:	4798      	blx	r3
 800dd48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	2202      	movs	r2, #2
 800dd50:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dd52:	e100      	b.n	800df56 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd5c:	f107 0208 	add.w	r2, r7, #8
 800dd60:	4610      	mov	r0, r2
 800dd62:	4798      	blx	r3
 800dd64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	2202      	movs	r2, #2
 800dd6c:	701a      	strb	r2, [r3, #0]
      break;
 800dd6e:	e0f2      	b.n	800df56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	885b      	ldrh	r3, [r3, #2]
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b05      	cmp	r3, #5
 800dd78:	f200 80ac 	bhi.w	800ded4 <USBD_GetDescriptor+0x258>
 800dd7c:	a201      	add	r2, pc, #4	@ (adr r2, 800dd84 <USBD_GetDescriptor+0x108>)
 800dd7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd82:	bf00      	nop
 800dd84:	0800dd9d 	.word	0x0800dd9d
 800dd88:	0800ddd1 	.word	0x0800ddd1
 800dd8c:	0800de05 	.word	0x0800de05
 800dd90:	0800de39 	.word	0x0800de39
 800dd94:	0800de6d 	.word	0x0800de6d
 800dd98:	0800dea1 	.word	0x0800dea1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00b      	beq.n	800ddc0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	7c12      	ldrb	r2, [r2, #16]
 800ddb4:	f107 0108 	add.w	r1, r7, #8
 800ddb8:	4610      	mov	r0, r2
 800ddba:	4798      	blx	r3
 800ddbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddbe:	e091      	b.n	800dee4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ddc0:	6839      	ldr	r1, [r7, #0]
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 facb 	bl	800e35e <USBD_CtlError>
            err++;
 800ddc8:	7afb      	ldrb	r3, [r7, #11]
 800ddca:	3301      	adds	r3, #1
 800ddcc:	72fb      	strb	r3, [r7, #11]
          break;
 800ddce:	e089      	b.n	800dee4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddd6:	689b      	ldr	r3, [r3, #8]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d00b      	beq.n	800ddf4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dde2:	689b      	ldr	r3, [r3, #8]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	7c12      	ldrb	r2, [r2, #16]
 800dde8:	f107 0108 	add.w	r1, r7, #8
 800ddec:	4610      	mov	r0, r2
 800ddee:	4798      	blx	r3
 800ddf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddf2:	e077      	b.n	800dee4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ddf4:	6839      	ldr	r1, [r7, #0]
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 fab1 	bl	800e35e <USBD_CtlError>
            err++;
 800ddfc:	7afb      	ldrb	r3, [r7, #11]
 800ddfe:	3301      	adds	r3, #1
 800de00:	72fb      	strb	r3, [r7, #11]
          break;
 800de02:	e06f      	b.n	800dee4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d00b      	beq.n	800de28 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	7c12      	ldrb	r2, [r2, #16]
 800de1c:	f107 0108 	add.w	r1, r7, #8
 800de20:	4610      	mov	r0, r2
 800de22:	4798      	blx	r3
 800de24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de26:	e05d      	b.n	800dee4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de28:	6839      	ldr	r1, [r7, #0]
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 fa97 	bl	800e35e <USBD_CtlError>
            err++;
 800de30:	7afb      	ldrb	r3, [r7, #11]
 800de32:	3301      	adds	r3, #1
 800de34:	72fb      	strb	r3, [r7, #11]
          break;
 800de36:	e055      	b.n	800dee4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de3e:	691b      	ldr	r3, [r3, #16]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00b      	beq.n	800de5c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de4a:	691b      	ldr	r3, [r3, #16]
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	7c12      	ldrb	r2, [r2, #16]
 800de50:	f107 0108 	add.w	r1, r7, #8
 800de54:	4610      	mov	r0, r2
 800de56:	4798      	blx	r3
 800de58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de5a:	e043      	b.n	800dee4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de5c:	6839      	ldr	r1, [r7, #0]
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 fa7d 	bl	800e35e <USBD_CtlError>
            err++;
 800de64:	7afb      	ldrb	r3, [r7, #11]
 800de66:	3301      	adds	r3, #1
 800de68:	72fb      	strb	r3, [r7, #11]
          break;
 800de6a:	e03b      	b.n	800dee4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de72:	695b      	ldr	r3, [r3, #20]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d00b      	beq.n	800de90 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de7e:	695b      	ldr	r3, [r3, #20]
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	7c12      	ldrb	r2, [r2, #16]
 800de84:	f107 0108 	add.w	r1, r7, #8
 800de88:	4610      	mov	r0, r2
 800de8a:	4798      	blx	r3
 800de8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de8e:	e029      	b.n	800dee4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de90:	6839      	ldr	r1, [r7, #0]
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 fa63 	bl	800e35e <USBD_CtlError>
            err++;
 800de98:	7afb      	ldrb	r3, [r7, #11]
 800de9a:	3301      	adds	r3, #1
 800de9c:	72fb      	strb	r3, [r7, #11]
          break;
 800de9e:	e021      	b.n	800dee4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dea6:	699b      	ldr	r3, [r3, #24]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d00b      	beq.n	800dec4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800deb2:	699b      	ldr	r3, [r3, #24]
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	7c12      	ldrb	r2, [r2, #16]
 800deb8:	f107 0108 	add.w	r1, r7, #8
 800debc:	4610      	mov	r0, r2
 800debe:	4798      	blx	r3
 800dec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dec2:	e00f      	b.n	800dee4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dec4:	6839      	ldr	r1, [r7, #0]
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 fa49 	bl	800e35e <USBD_CtlError>
            err++;
 800decc:	7afb      	ldrb	r3, [r7, #11]
 800dece:	3301      	adds	r3, #1
 800ded0:	72fb      	strb	r3, [r7, #11]
          break;
 800ded2:	e007      	b.n	800dee4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ded4:	6839      	ldr	r1, [r7, #0]
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 fa41 	bl	800e35e <USBD_CtlError>
          err++;
 800dedc:	7afb      	ldrb	r3, [r7, #11]
 800dede:	3301      	adds	r3, #1
 800dee0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dee2:	bf00      	nop
      }
      break;
 800dee4:	e037      	b.n	800df56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	7c1b      	ldrb	r3, [r3, #16]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d109      	bne.n	800df02 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800def4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800def6:	f107 0208 	add.w	r2, r7, #8
 800defa:	4610      	mov	r0, r2
 800defc:	4798      	blx	r3
 800defe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df00:	e029      	b.n	800df56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800df02:	6839      	ldr	r1, [r7, #0]
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f000 fa2a 	bl	800e35e <USBD_CtlError>
        err++;
 800df0a:	7afb      	ldrb	r3, [r7, #11]
 800df0c:	3301      	adds	r3, #1
 800df0e:	72fb      	strb	r3, [r7, #11]
      break;
 800df10:	e021      	b.n	800df56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	7c1b      	ldrb	r3, [r3, #16]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10d      	bne.n	800df36 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df22:	f107 0208 	add.w	r2, r7, #8
 800df26:	4610      	mov	r0, r2
 800df28:	4798      	blx	r3
 800df2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	3301      	adds	r3, #1
 800df30:	2207      	movs	r2, #7
 800df32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df34:	e00f      	b.n	800df56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800df36:	6839      	ldr	r1, [r7, #0]
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 fa10 	bl	800e35e <USBD_CtlError>
        err++;
 800df3e:	7afb      	ldrb	r3, [r7, #11]
 800df40:	3301      	adds	r3, #1
 800df42:	72fb      	strb	r3, [r7, #11]
      break;
 800df44:	e007      	b.n	800df56 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800df46:	6839      	ldr	r1, [r7, #0]
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 fa08 	bl	800e35e <USBD_CtlError>
      err++;
 800df4e:	7afb      	ldrb	r3, [r7, #11]
 800df50:	3301      	adds	r3, #1
 800df52:	72fb      	strb	r3, [r7, #11]
      break;
 800df54:	bf00      	nop
  }

  if (err != 0U)
 800df56:	7afb      	ldrb	r3, [r7, #11]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d11e      	bne.n	800df9a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	88db      	ldrh	r3, [r3, #6]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d016      	beq.n	800df92 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800df64:	893b      	ldrh	r3, [r7, #8]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d00e      	beq.n	800df88 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	88da      	ldrh	r2, [r3, #6]
 800df6e:	893b      	ldrh	r3, [r7, #8]
 800df70:	4293      	cmp	r3, r2
 800df72:	bf28      	it	cs
 800df74:	4613      	movcs	r3, r2
 800df76:	b29b      	uxth	r3, r3
 800df78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800df7a:	893b      	ldrh	r3, [r7, #8]
 800df7c:	461a      	mov	r2, r3
 800df7e:	68f9      	ldr	r1, [r7, #12]
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 fa69 	bl	800e458 <USBD_CtlSendData>
 800df86:	e009      	b.n	800df9c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800df88:	6839      	ldr	r1, [r7, #0]
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 f9e7 	bl	800e35e <USBD_CtlError>
 800df90:	e004      	b.n	800df9c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 faba 	bl	800e50c <USBD_CtlSendStatus>
 800df98:	e000      	b.n	800df9c <USBD_GetDescriptor+0x320>
    return;
 800df9a:	bf00      	nop
  }
}
 800df9c:	3710      	adds	r7, #16
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop

0800dfa4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	889b      	ldrh	r3, [r3, #4]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d131      	bne.n	800e01a <USBD_SetAddress+0x76>
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	88db      	ldrh	r3, [r3, #6]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d12d      	bne.n	800e01a <USBD_SetAddress+0x76>
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	885b      	ldrh	r3, [r3, #2]
 800dfc2:	2b7f      	cmp	r3, #127	@ 0x7f
 800dfc4:	d829      	bhi.n	800e01a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	885b      	ldrh	r3, [r3, #2]
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dfd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	2b03      	cmp	r3, #3
 800dfdc:	d104      	bne.n	800dfe8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dfde:	6839      	ldr	r1, [r7, #0]
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f000 f9bc 	bl	800e35e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfe6:	e01d      	b.n	800e024 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	7bfa      	ldrb	r2, [r7, #15]
 800dfec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dff0:	7bfb      	ldrb	r3, [r7, #15]
 800dff2:	4619      	mov	r1, r3
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f002 fbe1 	bl	80107bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f000 fa86 	bl	800e50c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e000:	7bfb      	ldrb	r3, [r7, #15]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d004      	beq.n	800e010 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2202      	movs	r2, #2
 800e00a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e00e:	e009      	b.n	800e024 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2201      	movs	r2, #1
 800e014:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e018:	e004      	b.n	800e024 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e01a:	6839      	ldr	r1, [r7, #0]
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f000 f99e 	bl	800e35e <USBD_CtlError>
  }
}
 800e022:	bf00      	nop
 800e024:	bf00      	nop
 800e026:	3710      	adds	r7, #16
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e036:	2300      	movs	r3, #0
 800e038:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	885b      	ldrh	r3, [r3, #2]
 800e03e:	b2da      	uxtb	r2, r3
 800e040:	4b4e      	ldr	r3, [pc, #312]	@ (800e17c <USBD_SetConfig+0x150>)
 800e042:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e044:	4b4d      	ldr	r3, [pc, #308]	@ (800e17c <USBD_SetConfig+0x150>)
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d905      	bls.n	800e058 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e04c:	6839      	ldr	r1, [r7, #0]
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 f985 	bl	800e35e <USBD_CtlError>
    return USBD_FAIL;
 800e054:	2303      	movs	r3, #3
 800e056:	e08c      	b.n	800e172 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	2b02      	cmp	r3, #2
 800e062:	d002      	beq.n	800e06a <USBD_SetConfig+0x3e>
 800e064:	2b03      	cmp	r3, #3
 800e066:	d029      	beq.n	800e0bc <USBD_SetConfig+0x90>
 800e068:	e075      	b.n	800e156 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e06a:	4b44      	ldr	r3, [pc, #272]	@ (800e17c <USBD_SetConfig+0x150>)
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d020      	beq.n	800e0b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e072:	4b42      	ldr	r3, [pc, #264]	@ (800e17c <USBD_SetConfig+0x150>)
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	461a      	mov	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e07c:	4b3f      	ldr	r3, [pc, #252]	@ (800e17c <USBD_SetConfig+0x150>)
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	4619      	mov	r1, r3
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f7fe ffb9 	bl	800cffa <USBD_SetClassConfig>
 800e088:	4603      	mov	r3, r0
 800e08a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e08c:	7bfb      	ldrb	r3, [r7, #15]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d008      	beq.n	800e0a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e092:	6839      	ldr	r1, [r7, #0]
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f000 f962 	bl	800e35e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2202      	movs	r2, #2
 800e09e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e0a2:	e065      	b.n	800e170 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 fa31 	bl	800e50c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2203      	movs	r2, #3
 800e0ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e0b2:	e05d      	b.n	800e170 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 fa29 	bl	800e50c <USBD_CtlSendStatus>
      break;
 800e0ba:	e059      	b.n	800e170 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e0bc:	4b2f      	ldr	r3, [pc, #188]	@ (800e17c <USBD_SetConfig+0x150>)
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d112      	bne.n	800e0ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e0cc:	4b2b      	ldr	r3, [pc, #172]	@ (800e17c <USBD_SetConfig+0x150>)
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e0d6:	4b29      	ldr	r3, [pc, #164]	@ (800e17c <USBD_SetConfig+0x150>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	4619      	mov	r1, r3
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f7fe ffa8 	bl	800d032 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 fa12 	bl	800e50c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e0e8:	e042      	b.n	800e170 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e0ea:	4b24      	ldr	r3, [pc, #144]	@ (800e17c <USBD_SetConfig+0x150>)
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d02a      	beq.n	800e14e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	4619      	mov	r1, r3
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7fe ff96 	bl	800d032 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e106:	4b1d      	ldr	r3, [pc, #116]	@ (800e17c <USBD_SetConfig+0x150>)
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	461a      	mov	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e110:	4b1a      	ldr	r3, [pc, #104]	@ (800e17c <USBD_SetConfig+0x150>)
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	4619      	mov	r1, r3
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f7fe ff6f 	bl	800cffa <USBD_SetClassConfig>
 800e11c:	4603      	mov	r3, r0
 800e11e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e120:	7bfb      	ldrb	r3, [r7, #15]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d00f      	beq.n	800e146 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e126:	6839      	ldr	r1, [r7, #0]
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 f918 	bl	800e35e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	b2db      	uxtb	r3, r3
 800e134:	4619      	mov	r1, r3
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f7fe ff7b 	bl	800d032 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2202      	movs	r2, #2
 800e140:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e144:	e014      	b.n	800e170 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f000 f9e0 	bl	800e50c <USBD_CtlSendStatus>
      break;
 800e14c:	e010      	b.n	800e170 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 f9dc 	bl	800e50c <USBD_CtlSendStatus>
      break;
 800e154:	e00c      	b.n	800e170 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e156:	6839      	ldr	r1, [r7, #0]
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f000 f900 	bl	800e35e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e15e:	4b07      	ldr	r3, [pc, #28]	@ (800e17c <USBD_SetConfig+0x150>)
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	4619      	mov	r1, r3
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7fe ff64 	bl	800d032 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e16a:	2303      	movs	r3, #3
 800e16c:	73fb      	strb	r3, [r7, #15]
      break;
 800e16e:	bf00      	nop
  }

  return ret;
 800e170:	7bfb      	ldrb	r3, [r7, #15]
}
 800e172:	4618      	mov	r0, r3
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	24000cd8 	.word	0x24000cd8

0800e180 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	88db      	ldrh	r3, [r3, #6]
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d004      	beq.n	800e19c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e192:	6839      	ldr	r1, [r7, #0]
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 f8e2 	bl	800e35e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e19a:	e023      	b.n	800e1e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	dc02      	bgt.n	800e1ae <USBD_GetConfig+0x2e>
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	dc03      	bgt.n	800e1b4 <USBD_GetConfig+0x34>
 800e1ac:	e015      	b.n	800e1da <USBD_GetConfig+0x5a>
 800e1ae:	2b03      	cmp	r3, #3
 800e1b0:	d00b      	beq.n	800e1ca <USBD_GetConfig+0x4a>
 800e1b2:	e012      	b.n	800e1da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	3308      	adds	r3, #8
 800e1be:	2201      	movs	r2, #1
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f000 f948 	bl	800e458 <USBD_CtlSendData>
        break;
 800e1c8:	e00c      	b.n	800e1e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 f940 	bl	800e458 <USBD_CtlSendData>
        break;
 800e1d8:	e004      	b.n	800e1e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 f8be 	bl	800e35e <USBD_CtlError>
        break;
 800e1e2:	bf00      	nop
}
 800e1e4:	bf00      	nop
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	3b01      	subs	r3, #1
 800e200:	2b02      	cmp	r3, #2
 800e202:	d81e      	bhi.n	800e242 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	88db      	ldrh	r3, [r3, #6]
 800e208:	2b02      	cmp	r3, #2
 800e20a:	d004      	beq.n	800e216 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 f8a5 	bl	800e35e <USBD_CtlError>
        break;
 800e214:	e01a      	b.n	800e24c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2201      	movs	r2, #1
 800e21a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e222:	2b00      	cmp	r3, #0
 800e224:	d005      	beq.n	800e232 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	68db      	ldr	r3, [r3, #12]
 800e22a:	f043 0202 	orr.w	r2, r3, #2
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	330c      	adds	r3, #12
 800e236:	2202      	movs	r2, #2
 800e238:	4619      	mov	r1, r3
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 f90c 	bl	800e458 <USBD_CtlSendData>
      break;
 800e240:	e004      	b.n	800e24c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e242:	6839      	ldr	r1, [r7, #0]
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f000 f88a 	bl	800e35e <USBD_CtlError>
      break;
 800e24a:	bf00      	nop
  }
}
 800e24c:	bf00      	nop
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	885b      	ldrh	r3, [r3, #2]
 800e262:	2b01      	cmp	r3, #1
 800e264:	d107      	bne.n	800e276 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2201      	movs	r2, #1
 800e26a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 f94c 	bl	800e50c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e274:	e013      	b.n	800e29e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	885b      	ldrh	r3, [r3, #2]
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	d10b      	bne.n	800e296 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	889b      	ldrh	r3, [r3, #4]
 800e282:	0a1b      	lsrs	r3, r3, #8
 800e284:	b29b      	uxth	r3, r3
 800e286:	b2da      	uxtb	r2, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 f93c 	bl	800e50c <USBD_CtlSendStatus>
}
 800e294:	e003      	b.n	800e29e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e296:	6839      	ldr	r1, [r7, #0]
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f000 f860 	bl	800e35e <USBD_CtlError>
}
 800e29e:	bf00      	nop
 800e2a0:	3708      	adds	r7, #8
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b082      	sub	sp, #8
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
 800e2ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	3b01      	subs	r3, #1
 800e2ba:	2b02      	cmp	r3, #2
 800e2bc:	d80b      	bhi.n	800e2d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	885b      	ldrh	r3, [r3, #2]
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d10c      	bne.n	800e2e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 f91c 	bl	800e50c <USBD_CtlSendStatus>
      }
      break;
 800e2d4:	e004      	b.n	800e2e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e2d6:	6839      	ldr	r1, [r7, #0]
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f000 f840 	bl	800e35e <USBD_CtlError>
      break;
 800e2de:	e000      	b.n	800e2e2 <USBD_ClrFeature+0x3c>
      break;
 800e2e0:	bf00      	nop
  }
}
 800e2e2:	bf00      	nop
 800e2e4:	3708      	adds	r7, #8
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}

0800e2ea <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b084      	sub	sp, #16
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
 800e2f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	781a      	ldrb	r2, [r3, #0]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	3301      	adds	r3, #1
 800e304:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	781a      	ldrb	r2, [r3, #0]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	3301      	adds	r3, #1
 800e312:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	f7ff fa16 	bl	800d746 <SWAPBYTE>
 800e31a:	4603      	mov	r3, r0
 800e31c:	461a      	mov	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	3301      	adds	r3, #1
 800e326:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	3301      	adds	r3, #1
 800e32c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	f7ff fa09 	bl	800d746 <SWAPBYTE>
 800e334:	4603      	mov	r3, r0
 800e336:	461a      	mov	r2, r3
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	3301      	adds	r3, #1
 800e340:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	3301      	adds	r3, #1
 800e346:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e348:	68f8      	ldr	r0, [r7, #12]
 800e34a:	f7ff f9fc 	bl	800d746 <SWAPBYTE>
 800e34e:	4603      	mov	r3, r0
 800e350:	461a      	mov	r2, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	80da      	strh	r2, [r3, #6]
}
 800e356:	bf00      	nop
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e35e:	b580      	push	{r7, lr}
 800e360:	b082      	sub	sp, #8
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
 800e366:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e368:	2180      	movs	r1, #128	@ 0x80
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f002 f9bc 	bl	80106e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e370:	2100      	movs	r1, #0
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f002 f9b8 	bl	80106e8 <USBD_LL_StallEP>
}
 800e378:	bf00      	nop
 800e37a:	3708      	adds	r7, #8
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b086      	sub	sp, #24
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e38c:	2300      	movs	r3, #0
 800e38e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d042      	beq.n	800e41c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e39a:	6938      	ldr	r0, [r7, #16]
 800e39c:	f000 f842 	bl	800e424 <USBD_GetLen>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	005b      	lsls	r3, r3, #1
 800e3a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3aa:	d808      	bhi.n	800e3be <USBD_GetString+0x3e>
 800e3ac:	6938      	ldr	r0, [r7, #16]
 800e3ae:	f000 f839 	bl	800e424 <USBD_GetLen>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	005b      	lsls	r3, r3, #1
 800e3ba:	b29a      	uxth	r2, r3
 800e3bc:	e001      	b.n	800e3c2 <USBD_GetString+0x42>
 800e3be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e3c6:	7dfb      	ldrb	r3, [r7, #23]
 800e3c8:	68ba      	ldr	r2, [r7, #8]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	7812      	ldrb	r2, [r2, #0]
 800e3d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e3d2:	7dfb      	ldrb	r3, [r7, #23]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e3d8:	7dfb      	ldrb	r3, [r7, #23]
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	4413      	add	r3, r2
 800e3de:	2203      	movs	r2, #3
 800e3e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e3e2:	7dfb      	ldrb	r3, [r7, #23]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e3e8:	e013      	b.n	800e412 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e3ea:	7dfb      	ldrb	r3, [r7, #23]
 800e3ec:	68ba      	ldr	r2, [r7, #8]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	693a      	ldr	r2, [r7, #16]
 800e3f2:	7812      	ldrb	r2, [r2, #0]
 800e3f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	613b      	str	r3, [r7, #16]
    idx++;
 800e3fc:	7dfb      	ldrb	r3, [r7, #23]
 800e3fe:	3301      	adds	r3, #1
 800e400:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e402:	7dfb      	ldrb	r3, [r7, #23]
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	4413      	add	r3, r2
 800e408:	2200      	movs	r2, #0
 800e40a:	701a      	strb	r2, [r3, #0]
    idx++;
 800e40c:	7dfb      	ldrb	r3, [r7, #23]
 800e40e:	3301      	adds	r3, #1
 800e410:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d1e7      	bne.n	800e3ea <USBD_GetString+0x6a>
 800e41a:	e000      	b.n	800e41e <USBD_GetString+0x9e>
    return;
 800e41c:	bf00      	nop
  }
}
 800e41e:	3718      	adds	r7, #24
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e424:	b480      	push	{r7}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e42c:	2300      	movs	r3, #0
 800e42e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e434:	e005      	b.n	800e442 <USBD_GetLen+0x1e>
  {
    len++;
 800e436:	7bfb      	ldrb	r3, [r7, #15]
 800e438:	3301      	adds	r3, #1
 800e43a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	3301      	adds	r3, #1
 800e440:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d1f5      	bne.n	800e436 <USBD_GetLen+0x12>
  }

  return len;
 800e44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3714      	adds	r7, #20
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2202      	movs	r2, #2
 800e468:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	68ba      	ldr	r2, [r7, #8]
 800e47c:	2100      	movs	r1, #0
 800e47e:	68f8      	ldr	r0, [r7, #12]
 800e480:	f002 f9bb 	bl	80107fa <USBD_LL_Transmit>

  return USBD_OK;
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e48e:	b580      	push	{r7, lr}
 800e490:	b084      	sub	sp, #16
 800e492:	af00      	add	r7, sp, #0
 800e494:	60f8      	str	r0, [r7, #12]
 800e496:	60b9      	str	r1, [r7, #8]
 800e498:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	68ba      	ldr	r2, [r7, #8]
 800e49e:	2100      	movs	r1, #0
 800e4a0:	68f8      	ldr	r0, [r7, #12]
 800e4a2:	f002 f9aa 	bl	80107fa <USBD_LL_Transmit>

  return USBD_OK;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3710      	adds	r7, #16
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	60b9      	str	r1, [r7, #8]
 800e4ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2203      	movs	r2, #3
 800e4c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	687a      	ldr	r2, [r7, #4]
 800e4c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	68ba      	ldr	r2, [r7, #8]
 800e4d8:	2100      	movs	r1, #0
 800e4da:	68f8      	ldr	r0, [r7, #12]
 800e4dc:	f002 f9ae 	bl	801083c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e4e0:	2300      	movs	r3, #0
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3710      	adds	r7, #16
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}

0800e4ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e4ea:	b580      	push	{r7, lr}
 800e4ec:	b084      	sub	sp, #16
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	60f8      	str	r0, [r7, #12]
 800e4f2:	60b9      	str	r1, [r7, #8]
 800e4f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	68ba      	ldr	r2, [r7, #8]
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	68f8      	ldr	r0, [r7, #12]
 800e4fe:	f002 f99d 	bl	801083c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e502:	2300      	movs	r3, #0
}
 800e504:	4618      	mov	r0, r3
 800e506:	3710      	adds	r7, #16
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2204      	movs	r2, #4
 800e518:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e51c:	2300      	movs	r3, #0
 800e51e:	2200      	movs	r2, #0
 800e520:	2100      	movs	r1, #0
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f002 f969 	bl	80107fa <USBD_LL_Transmit>

  return USBD_OK;
 800e528:	2300      	movs	r3, #0
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3708      	adds	r7, #8
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}

0800e532 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b082      	sub	sp, #8
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2205      	movs	r2, #5
 800e53e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e542:	2300      	movs	r3, #0
 800e544:	2200      	movs	r2, #0
 800e546:	2100      	movs	r1, #0
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f002 f977 	bl	801083c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e54e:	2300      	movs	r3, #0
}
 800e550:	4618      	mov	r0, r3
 800e552:	3708      	adds	r7, #8
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e558:	b480      	push	{r7}
 800e55a:	b085      	sub	sp, #20
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	4603      	mov	r3, r0
 800e560:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e562:	2300      	movs	r3, #0
 800e564:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e56a:	2b84      	cmp	r3, #132	@ 0x84
 800e56c:	d005      	beq.n	800e57a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e56e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	4413      	add	r3, r2
 800e576:	3303      	adds	r3, #3
 800e578:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e57a:	68fb      	ldr	r3, [r7, #12]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3714      	adds	r7, #20
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr

0800e588 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e588:	b480      	push	{r7}
 800e58a:	b083      	sub	sp, #12
 800e58c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e58e:	f3ef 8305 	mrs	r3, IPSR
 800e592:	607b      	str	r3, [r7, #4]
  return(result);
 800e594:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e596:	2b00      	cmp	r3, #0
 800e598:	bf14      	ite	ne
 800e59a:	2301      	movne	r3, #1
 800e59c:	2300      	moveq	r3, #0
 800e59e:	b2db      	uxtb	r3, r3
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e5b0:	f000 fb46 	bl	800ec40 <vTaskStartScheduler>
  
  return osOK;
 800e5b4:	2300      	movs	r3, #0
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	bd80      	pop	{r7, pc}

0800e5ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e5ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5bc:	b089      	sub	sp, #36	@ 0x24
 800e5be:	af04      	add	r7, sp, #16
 800e5c0:	6078      	str	r0, [r7, #4]
 800e5c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	695b      	ldr	r3, [r3, #20]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d020      	beq.n	800e60e <osThreadCreate+0x54>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	699b      	ldr	r3, [r3, #24]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d01c      	beq.n	800e60e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	685c      	ldr	r4, [r3, #4]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	691e      	ldr	r6, [r3, #16]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7ff ffb6 	bl	800e558 <makeFreeRtosPriority>
 800e5ec:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	695b      	ldr	r3, [r3, #20]
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e5f6:	9202      	str	r2, [sp, #8]
 800e5f8:	9301      	str	r3, [sp, #4]
 800e5fa:	9100      	str	r1, [sp, #0]
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	4632      	mov	r2, r6
 800e600:	4629      	mov	r1, r5
 800e602:	4620      	mov	r0, r4
 800e604:	f000 f92e 	bl	800e864 <xTaskCreateStatic>
 800e608:	4603      	mov	r3, r0
 800e60a:	60fb      	str	r3, [r7, #12]
 800e60c:	e01c      	b.n	800e648 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	685c      	ldr	r4, [r3, #4]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e61a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e622:	4618      	mov	r0, r3
 800e624:	f7ff ff98 	bl	800e558 <makeFreeRtosPriority>
 800e628:	4602      	mov	r2, r0
 800e62a:	f107 030c 	add.w	r3, r7, #12
 800e62e:	9301      	str	r3, [sp, #4]
 800e630:	9200      	str	r2, [sp, #0]
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	4632      	mov	r2, r6
 800e636:	4629      	mov	r1, r5
 800e638:	4620      	mov	r0, r4
 800e63a:	f000 f973 	bl	800e924 <xTaskCreate>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b01      	cmp	r3, #1
 800e642:	d001      	beq.n	800e648 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e644:	2300      	movs	r3, #0
 800e646:	e000      	b.n	800e64a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e648:	68fb      	ldr	r3, [r7, #12]
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3714      	adds	r7, #20
 800e64e:	46bd      	mov	sp, r7
 800e650:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e652 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e652:	b580      	push	{r7, lr}
 800e654:	b084      	sub	sp, #16
 800e656:	af00      	add	r7, sp, #0
 800e658:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d001      	beq.n	800e668 <osDelay+0x16>
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	e000      	b.n	800e66a <osDelay+0x18>
 800e668:	2301      	movs	r3, #1
 800e66a:	4618      	mov	r0, r3
 800e66c:	f000 fab2 	bl	800ebd4 <vTaskDelay>
  
  return osOK;
 800e670:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e672:	4618      	mov	r0, r3
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
	...

0800e67c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b086      	sub	sp, #24
 800e680:	af02      	add	r7, sp, #8
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e686:	2300      	movs	r3, #0
 800e688:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800e68a:	2300      	movs	r3, #0
 800e68c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800e68e:	f7ff ff7b 	bl	800e588 <inHandlerMode>
 800e692:	4603      	mov	r3, r0
 800e694:	2b00      	cmp	r3, #0
 800e696:	d01c      	beq.n	800e6d2 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800e698:	6839      	ldr	r1, [r7, #0]
 800e69a:	f107 0208 	add.w	r2, r7, #8
 800e69e:	f107 030c 	add.w	r3, r7, #12
 800e6a2:	9300      	str	r3, [sp, #0]
 800e6a4:	4613      	mov	r3, r2
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f000 fe9b 	bl	800f3e4 <xTaskGenericNotifyFromISR>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d002      	beq.n	800e6ba <osSignalSet+0x3e>
      return 0x80000000;
 800e6b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e6b8:	e019      	b.n	800e6ee <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d015      	beq.n	800e6ec <osSignalSet+0x70>
 800e6c0:	4b0d      	ldr	r3, [pc, #52]	@ (800e6f8 <osSignalSet+0x7c>)
 800e6c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6c6:	601a      	str	r2, [r3, #0]
 800e6c8:	f3bf 8f4f 	dsb	sy
 800e6cc:	f3bf 8f6f 	isb	sy
 800e6d0:	e00c      	b.n	800e6ec <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800e6d2:	6839      	ldr	r1, [r7, #0]
 800e6d4:	f107 0308 	add.w	r3, r7, #8
 800e6d8:	2201      	movs	r2, #1
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 fdc0 	bl	800f260 <xTaskGenericNotify>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	d002      	beq.n	800e6ec <osSignalSet+0x70>
    return 0x80000000;
 800e6e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e6ea:	e000      	b.n	800e6ee <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800e6ec:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3710      	adds	r7, #16
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	e000ed04 	.word	0xe000ed04

0800e6fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f103 0208 	add.w	r2, r3, #8
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f04f 32ff 	mov.w	r2, #4294967295
 800e714:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f103 0208 	add.w	r2, r3, #8
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f103 0208 	add.w	r2, r3, #8
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2200      	movs	r2, #0
 800e72e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e730:	bf00      	nop
 800e732:	370c      	adds	r7, #12
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr

0800e73c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2200      	movs	r2, #0
 800e748:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e74a:	bf00      	nop
 800e74c:	370c      	adds	r7, #12
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr

0800e756 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e756:	b480      	push	{r7}
 800e758:	b085      	sub	sp, #20
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
 800e75e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	68fa      	ldr	r2, [r7, #12]
 800e76a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	689a      	ldr	r2, [r3, #8]
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	683a      	ldr	r2, [r7, #0]
 800e77a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	683a      	ldr	r2, [r7, #0]
 800e780:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	1c5a      	adds	r2, r3, #1
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	601a      	str	r2, [r3, #0]
}
 800e792:	bf00      	nop
 800e794:	3714      	adds	r7, #20
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr

0800e79e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e79e:	b480      	push	{r7}
 800e7a0:	b085      	sub	sp, #20
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
 800e7a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7b4:	d103      	bne.n	800e7be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	691b      	ldr	r3, [r3, #16]
 800e7ba:	60fb      	str	r3, [r7, #12]
 800e7bc:	e00c      	b.n	800e7d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	3308      	adds	r3, #8
 800e7c2:	60fb      	str	r3, [r7, #12]
 800e7c4:	e002      	b.n	800e7cc <vListInsert+0x2e>
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	60fb      	str	r3, [r7, #12]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	68ba      	ldr	r2, [r7, #8]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d2f6      	bcs.n	800e7c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	683a      	ldr	r2, [r7, #0]
 800e7e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	68fa      	ldr	r2, [r7, #12]
 800e7ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	683a      	ldr	r2, [r7, #0]
 800e7f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	1c5a      	adds	r2, r3, #1
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	601a      	str	r2, [r3, #0]
}
 800e804:	bf00      	nop
 800e806:	3714      	adds	r7, #20
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e810:	b480      	push	{r7}
 800e812:	b085      	sub	sp, #20
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	691b      	ldr	r3, [r3, #16]
 800e81c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	687a      	ldr	r2, [r7, #4]
 800e824:	6892      	ldr	r2, [r2, #8]
 800e826:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	689b      	ldr	r3, [r3, #8]
 800e82c:	687a      	ldr	r2, [r7, #4]
 800e82e:	6852      	ldr	r2, [r2, #4]
 800e830:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d103      	bne.n	800e844 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	689a      	ldr	r2, [r3, #8]
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2200      	movs	r2, #0
 800e848:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	1e5a      	subs	r2, r3, #1
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3714      	adds	r7, #20
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr

0800e864 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e864:	b580      	push	{r7, lr}
 800e866:	b08e      	sub	sp, #56	@ 0x38
 800e868:	af04      	add	r7, sp, #16
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	607a      	str	r2, [r7, #4]
 800e870:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e874:	2b00      	cmp	r3, #0
 800e876:	d10b      	bne.n	800e890 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e87c:	f383 8811 	msr	BASEPRI, r3
 800e880:	f3bf 8f6f 	isb	sy
 800e884:	f3bf 8f4f 	dsb	sy
 800e888:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e88a:	bf00      	nop
 800e88c:	bf00      	nop
 800e88e:	e7fd      	b.n	800e88c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e892:	2b00      	cmp	r3, #0
 800e894:	d10b      	bne.n	800e8ae <xTaskCreateStatic+0x4a>
	__asm volatile
 800e896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e89a:	f383 8811 	msr	BASEPRI, r3
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	61fb      	str	r3, [r7, #28]
}
 800e8a8:	bf00      	nop
 800e8aa:	bf00      	nop
 800e8ac:	e7fd      	b.n	800e8aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e8ae:	23a0      	movs	r3, #160	@ 0xa0
 800e8b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	2ba0      	cmp	r3, #160	@ 0xa0
 800e8b6:	d00b      	beq.n	800e8d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8bc:	f383 8811 	msr	BASEPRI, r3
 800e8c0:	f3bf 8f6f 	isb	sy
 800e8c4:	f3bf 8f4f 	dsb	sy
 800e8c8:	61bb      	str	r3, [r7, #24]
}
 800e8ca:	bf00      	nop
 800e8cc:	bf00      	nop
 800e8ce:	e7fd      	b.n	800e8cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e8d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d01e      	beq.n	800e916 <xTaskCreateStatic+0xb2>
 800e8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d01b      	beq.n	800e916 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ea:	2202      	movs	r2, #2
 800e8ec:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	9303      	str	r3, [sp, #12]
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8f6:	9302      	str	r3, [sp, #8]
 800e8f8:	f107 0314 	add.w	r3, r7, #20
 800e8fc:	9301      	str	r3, [sp, #4]
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e900:	9300      	str	r3, [sp, #0]
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	68b9      	ldr	r1, [r7, #8]
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f000 f851 	bl	800e9b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e90e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e910:	f000 f8f6 	bl	800eb00 <prvAddNewTaskToReadyList>
 800e914:	e001      	b.n	800e91a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e916:	2300      	movs	r3, #0
 800e918:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e91a:	697b      	ldr	r3, [r7, #20]
	}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3728      	adds	r7, #40	@ 0x28
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e924:	b580      	push	{r7, lr}
 800e926:	b08c      	sub	sp, #48	@ 0x30
 800e928:	af04      	add	r7, sp, #16
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	603b      	str	r3, [r7, #0]
 800e930:	4613      	mov	r3, r2
 800e932:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e934:	88fb      	ldrh	r3, [r7, #6]
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	4618      	mov	r0, r3
 800e93a:	f001 f8ef 	bl	800fb1c <pvPortMalloc>
 800e93e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d00e      	beq.n	800e964 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e946:	20a0      	movs	r0, #160	@ 0xa0
 800e948:	f001 f8e8 	bl	800fb1c <pvPortMalloc>
 800e94c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d003      	beq.n	800e95c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	697a      	ldr	r2, [r7, #20]
 800e958:	631a      	str	r2, [r3, #48]	@ 0x30
 800e95a:	e005      	b.n	800e968 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e95c:	6978      	ldr	r0, [r7, #20]
 800e95e:	f001 f9ab 	bl	800fcb8 <vPortFree>
 800e962:	e001      	b.n	800e968 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e964:	2300      	movs	r3, #0
 800e966:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e968:	69fb      	ldr	r3, [r7, #28]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d017      	beq.n	800e99e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	2200      	movs	r2, #0
 800e972:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e976:	88fa      	ldrh	r2, [r7, #6]
 800e978:	2300      	movs	r3, #0
 800e97a:	9303      	str	r3, [sp, #12]
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	9302      	str	r3, [sp, #8]
 800e980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e982:	9301      	str	r3, [sp, #4]
 800e984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e986:	9300      	str	r3, [sp, #0]
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	68b9      	ldr	r1, [r7, #8]
 800e98c:	68f8      	ldr	r0, [r7, #12]
 800e98e:	f000 f80f 	bl	800e9b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e992:	69f8      	ldr	r0, [r7, #28]
 800e994:	f000 f8b4 	bl	800eb00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e998:	2301      	movs	r3, #1
 800e99a:	61bb      	str	r3, [r7, #24]
 800e99c:	e002      	b.n	800e9a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e99e:	f04f 33ff 	mov.w	r3, #4294967295
 800e9a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e9a4:	69bb      	ldr	r3, [r7, #24]
	}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3720      	adds	r7, #32
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
	...

0800e9b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b088      	sub	sp, #32
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]
 800e9bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	009b      	lsls	r3, r3, #2
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	21a5      	movs	r1, #165	@ 0xa5
 800e9ca:	f001 ffaf 	bl	801092c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e9d2:	6879      	ldr	r1, [r7, #4]
 800e9d4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e9d8:	440b      	add	r3, r1
 800e9da:	009b      	lsls	r3, r3, #2
 800e9dc:	4413      	add	r3, r2
 800e9de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	f023 0307 	bic.w	r3, r3, #7
 800e9e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e9e8:	69bb      	ldr	r3, [r7, #24]
 800e9ea:	f003 0307 	and.w	r3, r3, #7
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00b      	beq.n	800ea0a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9f6:	f383 8811 	msr	BASEPRI, r3
 800e9fa:	f3bf 8f6f 	isb	sy
 800e9fe:	f3bf 8f4f 	dsb	sy
 800ea02:	617b      	str	r3, [r7, #20]
}
 800ea04:	bf00      	nop
 800ea06:	bf00      	nop
 800ea08:	e7fd      	b.n	800ea06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d01f      	beq.n	800ea50 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea10:	2300      	movs	r3, #0
 800ea12:	61fb      	str	r3, [r7, #28]
 800ea14:	e012      	b.n	800ea3c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ea16:	68ba      	ldr	r2, [r7, #8]
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	4413      	add	r3, r2
 800ea1c:	7819      	ldrb	r1, [r3, #0]
 800ea1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea20:	69fb      	ldr	r3, [r7, #28]
 800ea22:	4413      	add	r3, r2
 800ea24:	3334      	adds	r3, #52	@ 0x34
 800ea26:	460a      	mov	r2, r1
 800ea28:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	4413      	add	r3, r2
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d006      	beq.n	800ea44 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	61fb      	str	r3, [r7, #28]
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	2b0f      	cmp	r3, #15
 800ea40:	d9e9      	bls.n	800ea16 <prvInitialiseNewTask+0x66>
 800ea42:	e000      	b.n	800ea46 <prvInitialiseNewTask+0x96>
			{
				break;
 800ea44:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ea46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea48:	2200      	movs	r2, #0
 800ea4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ea4e:	e003      	b.n	800ea58 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ea50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea52:	2200      	movs	r2, #0
 800ea54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ea58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea5a:	2b06      	cmp	r3, #6
 800ea5c:	d901      	bls.n	800ea62 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ea5e:	2306      	movs	r3, #6
 800ea60:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ea62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea66:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ea68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea6c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea70:	2200      	movs	r2, #0
 800ea72:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ea74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea76:	3304      	adds	r3, #4
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7ff fe5f 	bl	800e73c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ea7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea80:	3318      	adds	r3, #24
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7ff fe5a 	bl	800e73c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ea88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea90:	f1c3 0207 	rsb	r2, r3, #7
 800ea94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ea98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea9c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ea9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eaa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800eaae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab0:	334c      	adds	r3, #76	@ 0x4c
 800eab2:	224c      	movs	r2, #76	@ 0x4c
 800eab4:	2100      	movs	r1, #0
 800eab6:	4618      	mov	r0, r3
 800eab8:	f001 ff38 	bl	801092c <memset>
 800eabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eabe:	4a0d      	ldr	r2, [pc, #52]	@ (800eaf4 <prvInitialiseNewTask+0x144>)
 800eac0:	651a      	str	r2, [r3, #80]	@ 0x50
 800eac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac4:	4a0c      	ldr	r2, [pc, #48]	@ (800eaf8 <prvInitialiseNewTask+0x148>)
 800eac6:	655a      	str	r2, [r3, #84]	@ 0x54
 800eac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaca:	4a0c      	ldr	r2, [pc, #48]	@ (800eafc <prvInitialiseNewTask+0x14c>)
 800eacc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eace:	683a      	ldr	r2, [r7, #0]
 800ead0:	68f9      	ldr	r1, [r7, #12]
 800ead2:	69b8      	ldr	r0, [r7, #24]
 800ead4:	f000 fdd2 	bl	800f67c <pxPortInitialiseStack>
 800ead8:	4602      	mov	r2, r0
 800eada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eadc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d002      	beq.n	800eaea <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eaea:	bf00      	nop
 800eaec:	3720      	adds	r7, #32
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	24006610 	.word	0x24006610
 800eaf8:	24006678 	.word	0x24006678
 800eafc:	240066e0 	.word	0x240066e0

0800eb00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eb08:	f000 fee6 	bl	800f8d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eb0c:	4b2a      	ldr	r3, [pc, #168]	@ (800ebb8 <prvAddNewTaskToReadyList+0xb8>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	3301      	adds	r3, #1
 800eb12:	4a29      	ldr	r2, [pc, #164]	@ (800ebb8 <prvAddNewTaskToReadyList+0xb8>)
 800eb14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eb16:	4b29      	ldr	r3, [pc, #164]	@ (800ebbc <prvAddNewTaskToReadyList+0xbc>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d109      	bne.n	800eb32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eb1e:	4a27      	ldr	r2, [pc, #156]	@ (800ebbc <prvAddNewTaskToReadyList+0xbc>)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eb24:	4b24      	ldr	r3, [pc, #144]	@ (800ebb8 <prvAddNewTaskToReadyList+0xb8>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	d110      	bne.n	800eb4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eb2c:	f000 fad4 	bl	800f0d8 <prvInitialiseTaskLists>
 800eb30:	e00d      	b.n	800eb4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eb32:	4b23      	ldr	r3, [pc, #140]	@ (800ebc0 <prvAddNewTaskToReadyList+0xc0>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d109      	bne.n	800eb4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eb3a:	4b20      	ldr	r3, [pc, #128]	@ (800ebbc <prvAddNewTaskToReadyList+0xbc>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d802      	bhi.n	800eb4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eb48:	4a1c      	ldr	r2, [pc, #112]	@ (800ebbc <prvAddNewTaskToReadyList+0xbc>)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eb4e:	4b1d      	ldr	r3, [pc, #116]	@ (800ebc4 <prvAddNewTaskToReadyList+0xc4>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	3301      	adds	r3, #1
 800eb54:	4a1b      	ldr	r2, [pc, #108]	@ (800ebc4 <prvAddNewTaskToReadyList+0xc4>)
 800eb56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	409a      	lsls	r2, r3
 800eb60:	4b19      	ldr	r3, [pc, #100]	@ (800ebc8 <prvAddNewTaskToReadyList+0xc8>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4313      	orrs	r3, r2
 800eb66:	4a18      	ldr	r2, [pc, #96]	@ (800ebc8 <prvAddNewTaskToReadyList+0xc8>)
 800eb68:	6013      	str	r3, [r2, #0]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb6e:	4613      	mov	r3, r2
 800eb70:	009b      	lsls	r3, r3, #2
 800eb72:	4413      	add	r3, r2
 800eb74:	009b      	lsls	r3, r3, #2
 800eb76:	4a15      	ldr	r2, [pc, #84]	@ (800ebcc <prvAddNewTaskToReadyList+0xcc>)
 800eb78:	441a      	add	r2, r3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	3304      	adds	r3, #4
 800eb7e:	4619      	mov	r1, r3
 800eb80:	4610      	mov	r0, r2
 800eb82:	f7ff fde8 	bl	800e756 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eb86:	f000 fed9 	bl	800f93c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eb8a:	4b0d      	ldr	r3, [pc, #52]	@ (800ebc0 <prvAddNewTaskToReadyList+0xc0>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d00e      	beq.n	800ebb0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eb92:	4b0a      	ldr	r3, [pc, #40]	@ (800ebbc <prvAddNewTaskToReadyList+0xbc>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d207      	bcs.n	800ebb0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eba0:	4b0b      	ldr	r3, [pc, #44]	@ (800ebd0 <prvAddNewTaskToReadyList+0xd0>)
 800eba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eba6:	601a      	str	r2, [r3, #0]
 800eba8:	f3bf 8f4f 	dsb	sy
 800ebac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebb0:	bf00      	nop
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	24000ddc 	.word	0x24000ddc
 800ebbc:	24000cdc 	.word	0x24000cdc
 800ebc0:	24000de8 	.word	0x24000de8
 800ebc4:	24000df8 	.word	0x24000df8
 800ebc8:	24000de4 	.word	0x24000de4
 800ebcc:	24000ce0 	.word	0x24000ce0
 800ebd0:	e000ed04 	.word	0xe000ed04

0800ebd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d018      	beq.n	800ec18 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ebe6:	4b14      	ldr	r3, [pc, #80]	@ (800ec38 <vTaskDelay+0x64>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d00b      	beq.n	800ec06 <vTaskDelay+0x32>
	__asm volatile
 800ebee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebf2:	f383 8811 	msr	BASEPRI, r3
 800ebf6:	f3bf 8f6f 	isb	sy
 800ebfa:	f3bf 8f4f 	dsb	sy
 800ebfe:	60bb      	str	r3, [r7, #8]
}
 800ec00:	bf00      	nop
 800ec02:	bf00      	nop
 800ec04:	e7fd      	b.n	800ec02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ec06:	f000 f885 	bl	800ed14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 fccf 	bl	800f5b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ec12:	f000 f88d 	bl	800ed30 <xTaskResumeAll>
 800ec16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d107      	bne.n	800ec2e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ec1e:	4b07      	ldr	r3, [pc, #28]	@ (800ec3c <vTaskDelay+0x68>)
 800ec20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec24:	601a      	str	r2, [r3, #0]
 800ec26:	f3bf 8f4f 	dsb	sy
 800ec2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec2e:	bf00      	nop
 800ec30:	3710      	adds	r7, #16
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	24000e04 	.word	0x24000e04
 800ec3c:	e000ed04 	.word	0xe000ed04

0800ec40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b08a      	sub	sp, #40	@ 0x28
 800ec44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ec46:	2300      	movs	r3, #0
 800ec48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ec4e:	463a      	mov	r2, r7
 800ec50:	1d39      	adds	r1, r7, #4
 800ec52:	f107 0308 	add.w	r3, r7, #8
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7f1 feb4 	bl	80009c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ec5c:	6839      	ldr	r1, [r7, #0]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	68ba      	ldr	r2, [r7, #8]
 800ec62:	9202      	str	r2, [sp, #8]
 800ec64:	9301      	str	r3, [sp, #4]
 800ec66:	2300      	movs	r3, #0
 800ec68:	9300      	str	r3, [sp, #0]
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	460a      	mov	r2, r1
 800ec6e:	4921      	ldr	r1, [pc, #132]	@ (800ecf4 <vTaskStartScheduler+0xb4>)
 800ec70:	4821      	ldr	r0, [pc, #132]	@ (800ecf8 <vTaskStartScheduler+0xb8>)
 800ec72:	f7ff fdf7 	bl	800e864 <xTaskCreateStatic>
 800ec76:	4603      	mov	r3, r0
 800ec78:	4a20      	ldr	r2, [pc, #128]	@ (800ecfc <vTaskStartScheduler+0xbc>)
 800ec7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ec7c:	4b1f      	ldr	r3, [pc, #124]	@ (800ecfc <vTaskStartScheduler+0xbc>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d002      	beq.n	800ec8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ec84:	2301      	movs	r3, #1
 800ec86:	617b      	str	r3, [r7, #20]
 800ec88:	e001      	b.n	800ec8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d11b      	bne.n	800eccc <vTaskStartScheduler+0x8c>
	__asm volatile
 800ec94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec98:	f383 8811 	msr	BASEPRI, r3
 800ec9c:	f3bf 8f6f 	isb	sy
 800eca0:	f3bf 8f4f 	dsb	sy
 800eca4:	613b      	str	r3, [r7, #16]
}
 800eca6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eca8:	4b15      	ldr	r3, [pc, #84]	@ (800ed00 <vTaskStartScheduler+0xc0>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	334c      	adds	r3, #76	@ 0x4c
 800ecae:	4a15      	ldr	r2, [pc, #84]	@ (800ed04 <vTaskStartScheduler+0xc4>)
 800ecb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ecb2:	4b15      	ldr	r3, [pc, #84]	@ (800ed08 <vTaskStartScheduler+0xc8>)
 800ecb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ecb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ecba:	4b14      	ldr	r3, [pc, #80]	@ (800ed0c <vTaskStartScheduler+0xcc>)
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ecc0:	4b13      	ldr	r3, [pc, #76]	@ (800ed10 <vTaskStartScheduler+0xd0>)
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ecc6:	f000 fd63 	bl	800f790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ecca:	e00f      	b.n	800ecec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecd2:	d10b      	bne.n	800ecec <vTaskStartScheduler+0xac>
	__asm volatile
 800ecd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecd8:	f383 8811 	msr	BASEPRI, r3
 800ecdc:	f3bf 8f6f 	isb	sy
 800ece0:	f3bf 8f4f 	dsb	sy
 800ece4:	60fb      	str	r3, [r7, #12]
}
 800ece6:	bf00      	nop
 800ece8:	bf00      	nop
 800ecea:	e7fd      	b.n	800ece8 <vTaskStartScheduler+0xa8>
}
 800ecec:	bf00      	nop
 800ecee:	3718      	adds	r7, #24
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	08011308 	.word	0x08011308
 800ecf8:	0800f0a9 	.word	0x0800f0a9
 800ecfc:	24000e00 	.word	0x24000e00
 800ed00:	24000cdc 	.word	0x24000cdc
 800ed04:	24000108 	.word	0x24000108
 800ed08:	24000dfc 	.word	0x24000dfc
 800ed0c:	24000de8 	.word	0x24000de8
 800ed10:	24000de0 	.word	0x24000de0

0800ed14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ed14:	b480      	push	{r7}
 800ed16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ed18:	4b04      	ldr	r3, [pc, #16]	@ (800ed2c <vTaskSuspendAll+0x18>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	4a03      	ldr	r2, [pc, #12]	@ (800ed2c <vTaskSuspendAll+0x18>)
 800ed20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ed22:	bf00      	nop
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr
 800ed2c:	24000e04 	.word	0x24000e04

0800ed30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ed36:	2300      	movs	r3, #0
 800ed38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ed3e:	4b42      	ldr	r3, [pc, #264]	@ (800ee48 <xTaskResumeAll+0x118>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d10b      	bne.n	800ed5e <xTaskResumeAll+0x2e>
	__asm volatile
 800ed46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed4a:	f383 8811 	msr	BASEPRI, r3
 800ed4e:	f3bf 8f6f 	isb	sy
 800ed52:	f3bf 8f4f 	dsb	sy
 800ed56:	603b      	str	r3, [r7, #0]
}
 800ed58:	bf00      	nop
 800ed5a:	bf00      	nop
 800ed5c:	e7fd      	b.n	800ed5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ed5e:	f000 fdbb 	bl	800f8d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ed62:	4b39      	ldr	r3, [pc, #228]	@ (800ee48 <xTaskResumeAll+0x118>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	3b01      	subs	r3, #1
 800ed68:	4a37      	ldr	r2, [pc, #220]	@ (800ee48 <xTaskResumeAll+0x118>)
 800ed6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed6c:	4b36      	ldr	r3, [pc, #216]	@ (800ee48 <xTaskResumeAll+0x118>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d161      	bne.n	800ee38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ed74:	4b35      	ldr	r3, [pc, #212]	@ (800ee4c <xTaskResumeAll+0x11c>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d05d      	beq.n	800ee38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed7c:	e02e      	b.n	800eddc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed7e:	4b34      	ldr	r3, [pc, #208]	@ (800ee50 <xTaskResumeAll+0x120>)
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	68db      	ldr	r3, [r3, #12]
 800ed84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	3318      	adds	r3, #24
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7ff fd40 	bl	800e810 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	3304      	adds	r3, #4
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7ff fd3b 	bl	800e810 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed9e:	2201      	movs	r2, #1
 800eda0:	409a      	lsls	r2, r3
 800eda2:	4b2c      	ldr	r3, [pc, #176]	@ (800ee54 <xTaskResumeAll+0x124>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	4313      	orrs	r3, r2
 800eda8:	4a2a      	ldr	r2, [pc, #168]	@ (800ee54 <xTaskResumeAll+0x124>)
 800edaa:	6013      	str	r3, [r2, #0]
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edb0:	4613      	mov	r3, r2
 800edb2:	009b      	lsls	r3, r3, #2
 800edb4:	4413      	add	r3, r2
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	4a27      	ldr	r2, [pc, #156]	@ (800ee58 <xTaskResumeAll+0x128>)
 800edba:	441a      	add	r2, r3
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	3304      	adds	r3, #4
 800edc0:	4619      	mov	r1, r3
 800edc2:	4610      	mov	r0, r2
 800edc4:	f7ff fcc7 	bl	800e756 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edcc:	4b23      	ldr	r3, [pc, #140]	@ (800ee5c <xTaskResumeAll+0x12c>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d302      	bcc.n	800eddc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800edd6:	4b22      	ldr	r3, [pc, #136]	@ (800ee60 <xTaskResumeAll+0x130>)
 800edd8:	2201      	movs	r2, #1
 800edda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eddc:	4b1c      	ldr	r3, [pc, #112]	@ (800ee50 <xTaskResumeAll+0x120>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d1cc      	bne.n	800ed7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d001      	beq.n	800edee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800edea:	f000 fa19 	bl	800f220 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800edee:	4b1d      	ldr	r3, [pc, #116]	@ (800ee64 <xTaskResumeAll+0x134>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d010      	beq.n	800ee1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800edfa:	f000 f837 	bl	800ee6c <xTaskIncrementTick>
 800edfe:	4603      	mov	r3, r0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d002      	beq.n	800ee0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ee04:	4b16      	ldr	r3, [pc, #88]	@ (800ee60 <xTaskResumeAll+0x130>)
 800ee06:	2201      	movs	r2, #1
 800ee08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1f1      	bne.n	800edfa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ee16:	4b13      	ldr	r3, [pc, #76]	@ (800ee64 <xTaskResumeAll+0x134>)
 800ee18:	2200      	movs	r2, #0
 800ee1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ee1c:	4b10      	ldr	r3, [pc, #64]	@ (800ee60 <xTaskResumeAll+0x130>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d009      	beq.n	800ee38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ee24:	2301      	movs	r3, #1
 800ee26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ee28:	4b0f      	ldr	r3, [pc, #60]	@ (800ee68 <xTaskResumeAll+0x138>)
 800ee2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee2e:	601a      	str	r2, [r3, #0]
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee38:	f000 fd80 	bl	800f93c <vPortExitCritical>

	return xAlreadyYielded;
 800ee3c:	68bb      	ldr	r3, [r7, #8]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	24000e04 	.word	0x24000e04
 800ee4c:	24000ddc 	.word	0x24000ddc
 800ee50:	24000d9c 	.word	0x24000d9c
 800ee54:	24000de4 	.word	0x24000de4
 800ee58:	24000ce0 	.word	0x24000ce0
 800ee5c:	24000cdc 	.word	0x24000cdc
 800ee60:	24000df0 	.word	0x24000df0
 800ee64:	24000dec 	.word	0x24000dec
 800ee68:	e000ed04 	.word	0xe000ed04

0800ee6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b086      	sub	sp, #24
 800ee70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ee72:	2300      	movs	r3, #0
 800ee74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee76:	4b4f      	ldr	r3, [pc, #316]	@ (800efb4 <xTaskIncrementTick+0x148>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	f040 808f 	bne.w	800ef9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ee80:	4b4d      	ldr	r3, [pc, #308]	@ (800efb8 <xTaskIncrementTick+0x14c>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	3301      	adds	r3, #1
 800ee86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ee88:	4a4b      	ldr	r2, [pc, #300]	@ (800efb8 <xTaskIncrementTick+0x14c>)
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d121      	bne.n	800eed8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ee94:	4b49      	ldr	r3, [pc, #292]	@ (800efbc <xTaskIncrementTick+0x150>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d00b      	beq.n	800eeb6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ee9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eea2:	f383 8811 	msr	BASEPRI, r3
 800eea6:	f3bf 8f6f 	isb	sy
 800eeaa:	f3bf 8f4f 	dsb	sy
 800eeae:	603b      	str	r3, [r7, #0]
}
 800eeb0:	bf00      	nop
 800eeb2:	bf00      	nop
 800eeb4:	e7fd      	b.n	800eeb2 <xTaskIncrementTick+0x46>
 800eeb6:	4b41      	ldr	r3, [pc, #260]	@ (800efbc <xTaskIncrementTick+0x150>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	60fb      	str	r3, [r7, #12]
 800eebc:	4b40      	ldr	r3, [pc, #256]	@ (800efc0 <xTaskIncrementTick+0x154>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4a3e      	ldr	r2, [pc, #248]	@ (800efbc <xTaskIncrementTick+0x150>)
 800eec2:	6013      	str	r3, [r2, #0]
 800eec4:	4a3e      	ldr	r2, [pc, #248]	@ (800efc0 <xTaskIncrementTick+0x154>)
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	6013      	str	r3, [r2, #0]
 800eeca:	4b3e      	ldr	r3, [pc, #248]	@ (800efc4 <xTaskIncrementTick+0x158>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	3301      	adds	r3, #1
 800eed0:	4a3c      	ldr	r2, [pc, #240]	@ (800efc4 <xTaskIncrementTick+0x158>)
 800eed2:	6013      	str	r3, [r2, #0]
 800eed4:	f000 f9a4 	bl	800f220 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800eed8:	4b3b      	ldr	r3, [pc, #236]	@ (800efc8 <xTaskIncrementTick+0x15c>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	693a      	ldr	r2, [r7, #16]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d348      	bcc.n	800ef74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eee2:	4b36      	ldr	r3, [pc, #216]	@ (800efbc <xTaskIncrementTick+0x150>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d104      	bne.n	800eef6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eeec:	4b36      	ldr	r3, [pc, #216]	@ (800efc8 <xTaskIncrementTick+0x15c>)
 800eeee:	f04f 32ff 	mov.w	r2, #4294967295
 800eef2:	601a      	str	r2, [r3, #0]
					break;
 800eef4:	e03e      	b.n	800ef74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eef6:	4b31      	ldr	r3, [pc, #196]	@ (800efbc <xTaskIncrementTick+0x150>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ef06:	693a      	ldr	r2, [r7, #16]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d203      	bcs.n	800ef16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ef0e:	4a2e      	ldr	r2, [pc, #184]	@ (800efc8 <xTaskIncrementTick+0x15c>)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ef14:	e02e      	b.n	800ef74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	3304      	adds	r3, #4
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7ff fc78 	bl	800e810 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d004      	beq.n	800ef32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	3318      	adds	r3, #24
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7ff fc6f 	bl	800e810 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef36:	2201      	movs	r2, #1
 800ef38:	409a      	lsls	r2, r3
 800ef3a:	4b24      	ldr	r3, [pc, #144]	@ (800efcc <xTaskIncrementTick+0x160>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	4313      	orrs	r3, r2
 800ef40:	4a22      	ldr	r2, [pc, #136]	@ (800efcc <xTaskIncrementTick+0x160>)
 800ef42:	6013      	str	r3, [r2, #0]
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef48:	4613      	mov	r3, r2
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	4413      	add	r3, r2
 800ef4e:	009b      	lsls	r3, r3, #2
 800ef50:	4a1f      	ldr	r2, [pc, #124]	@ (800efd0 <xTaskIncrementTick+0x164>)
 800ef52:	441a      	add	r2, r3
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	3304      	adds	r3, #4
 800ef58:	4619      	mov	r1, r3
 800ef5a:	4610      	mov	r0, r2
 800ef5c:	f7ff fbfb 	bl	800e756 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef64:	4b1b      	ldr	r3, [pc, #108]	@ (800efd4 <xTaskIncrementTick+0x168>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d3b9      	bcc.n	800eee2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ef6e:	2301      	movs	r3, #1
 800ef70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef72:	e7b6      	b.n	800eee2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ef74:	4b17      	ldr	r3, [pc, #92]	@ (800efd4 <xTaskIncrementTick+0x168>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef7a:	4915      	ldr	r1, [pc, #84]	@ (800efd0 <xTaskIncrementTick+0x164>)
 800ef7c:	4613      	mov	r3, r2
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	4413      	add	r3, r2
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	440b      	add	r3, r1
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d901      	bls.n	800ef90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ef90:	4b11      	ldr	r3, [pc, #68]	@ (800efd8 <xTaskIncrementTick+0x16c>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d007      	beq.n	800efa8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ef98:	2301      	movs	r3, #1
 800ef9a:	617b      	str	r3, [r7, #20]
 800ef9c:	e004      	b.n	800efa8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ef9e:	4b0f      	ldr	r3, [pc, #60]	@ (800efdc <xTaskIncrementTick+0x170>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	3301      	adds	r3, #1
 800efa4:	4a0d      	ldr	r2, [pc, #52]	@ (800efdc <xTaskIncrementTick+0x170>)
 800efa6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800efa8:	697b      	ldr	r3, [r7, #20]
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3718      	adds	r7, #24
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	24000e04 	.word	0x24000e04
 800efb8:	24000de0 	.word	0x24000de0
 800efbc:	24000d94 	.word	0x24000d94
 800efc0:	24000d98 	.word	0x24000d98
 800efc4:	24000df4 	.word	0x24000df4
 800efc8:	24000dfc 	.word	0x24000dfc
 800efcc:	24000de4 	.word	0x24000de4
 800efd0:	24000ce0 	.word	0x24000ce0
 800efd4:	24000cdc 	.word	0x24000cdc
 800efd8:	24000df0 	.word	0x24000df0
 800efdc:	24000dec 	.word	0x24000dec

0800efe0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800efe0:	b480      	push	{r7}
 800efe2:	b087      	sub	sp, #28
 800efe4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800efe6:	4b2a      	ldr	r3, [pc, #168]	@ (800f090 <vTaskSwitchContext+0xb0>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d003      	beq.n	800eff6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800efee:	4b29      	ldr	r3, [pc, #164]	@ (800f094 <vTaskSwitchContext+0xb4>)
 800eff0:	2201      	movs	r2, #1
 800eff2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eff4:	e045      	b.n	800f082 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800eff6:	4b27      	ldr	r3, [pc, #156]	@ (800f094 <vTaskSwitchContext+0xb4>)
 800eff8:	2200      	movs	r2, #0
 800effa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800effc:	4b26      	ldr	r3, [pc, #152]	@ (800f098 <vTaskSwitchContext+0xb8>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	fab3 f383 	clz	r3, r3
 800f008:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f00a:	7afb      	ldrb	r3, [r7, #11]
 800f00c:	f1c3 031f 	rsb	r3, r3, #31
 800f010:	617b      	str	r3, [r7, #20]
 800f012:	4922      	ldr	r1, [pc, #136]	@ (800f09c <vTaskSwitchContext+0xbc>)
 800f014:	697a      	ldr	r2, [r7, #20]
 800f016:	4613      	mov	r3, r2
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	4413      	add	r3, r2
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	440b      	add	r3, r1
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d10b      	bne.n	800f03e <vTaskSwitchContext+0x5e>
	__asm volatile
 800f026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f02a:	f383 8811 	msr	BASEPRI, r3
 800f02e:	f3bf 8f6f 	isb	sy
 800f032:	f3bf 8f4f 	dsb	sy
 800f036:	607b      	str	r3, [r7, #4]
}
 800f038:	bf00      	nop
 800f03a:	bf00      	nop
 800f03c:	e7fd      	b.n	800f03a <vTaskSwitchContext+0x5a>
 800f03e:	697a      	ldr	r2, [r7, #20]
 800f040:	4613      	mov	r3, r2
 800f042:	009b      	lsls	r3, r3, #2
 800f044:	4413      	add	r3, r2
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	4a14      	ldr	r2, [pc, #80]	@ (800f09c <vTaskSwitchContext+0xbc>)
 800f04a:	4413      	add	r3, r2
 800f04c:	613b      	str	r3, [r7, #16]
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	685a      	ldr	r2, [r3, #4]
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	605a      	str	r2, [r3, #4]
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	685a      	ldr	r2, [r3, #4]
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	3308      	adds	r3, #8
 800f060:	429a      	cmp	r2, r3
 800f062:	d104      	bne.n	800f06e <vTaskSwitchContext+0x8e>
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	685a      	ldr	r2, [r3, #4]
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	605a      	str	r2, [r3, #4]
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	68db      	ldr	r3, [r3, #12]
 800f074:	4a0a      	ldr	r2, [pc, #40]	@ (800f0a0 <vTaskSwitchContext+0xc0>)
 800f076:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f078:	4b09      	ldr	r3, [pc, #36]	@ (800f0a0 <vTaskSwitchContext+0xc0>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	334c      	adds	r3, #76	@ 0x4c
 800f07e:	4a09      	ldr	r2, [pc, #36]	@ (800f0a4 <vTaskSwitchContext+0xc4>)
 800f080:	6013      	str	r3, [r2, #0]
}
 800f082:	bf00      	nop
 800f084:	371c      	adds	r7, #28
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr
 800f08e:	bf00      	nop
 800f090:	24000e04 	.word	0x24000e04
 800f094:	24000df0 	.word	0x24000df0
 800f098:	24000de4 	.word	0x24000de4
 800f09c:	24000ce0 	.word	0x24000ce0
 800f0a0:	24000cdc 	.word	0x24000cdc
 800f0a4:	24000108 	.word	0x24000108

0800f0a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f0b0:	f000 f852 	bl	800f158 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f0b4:	4b06      	ldr	r3, [pc, #24]	@ (800f0d0 <prvIdleTask+0x28>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d9f9      	bls.n	800f0b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f0bc:	4b05      	ldr	r3, [pc, #20]	@ (800f0d4 <prvIdleTask+0x2c>)
 800f0be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0c2:	601a      	str	r2, [r3, #0]
 800f0c4:	f3bf 8f4f 	dsb	sy
 800f0c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f0cc:	e7f0      	b.n	800f0b0 <prvIdleTask+0x8>
 800f0ce:	bf00      	nop
 800f0d0:	24000ce0 	.word	0x24000ce0
 800f0d4:	e000ed04 	.word	0xe000ed04

0800f0d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f0de:	2300      	movs	r3, #0
 800f0e0:	607b      	str	r3, [r7, #4]
 800f0e2:	e00c      	b.n	800f0fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	4613      	mov	r3, r2
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	4413      	add	r3, r2
 800f0ec:	009b      	lsls	r3, r3, #2
 800f0ee:	4a12      	ldr	r2, [pc, #72]	@ (800f138 <prvInitialiseTaskLists+0x60>)
 800f0f0:	4413      	add	r3, r2
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7ff fb02 	bl	800e6fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	607b      	str	r3, [r7, #4]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2b06      	cmp	r3, #6
 800f102:	d9ef      	bls.n	800f0e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f104:	480d      	ldr	r0, [pc, #52]	@ (800f13c <prvInitialiseTaskLists+0x64>)
 800f106:	f7ff faf9 	bl	800e6fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f10a:	480d      	ldr	r0, [pc, #52]	@ (800f140 <prvInitialiseTaskLists+0x68>)
 800f10c:	f7ff faf6 	bl	800e6fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f110:	480c      	ldr	r0, [pc, #48]	@ (800f144 <prvInitialiseTaskLists+0x6c>)
 800f112:	f7ff faf3 	bl	800e6fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f116:	480c      	ldr	r0, [pc, #48]	@ (800f148 <prvInitialiseTaskLists+0x70>)
 800f118:	f7ff faf0 	bl	800e6fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f11c:	480b      	ldr	r0, [pc, #44]	@ (800f14c <prvInitialiseTaskLists+0x74>)
 800f11e:	f7ff faed 	bl	800e6fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f122:	4b0b      	ldr	r3, [pc, #44]	@ (800f150 <prvInitialiseTaskLists+0x78>)
 800f124:	4a05      	ldr	r2, [pc, #20]	@ (800f13c <prvInitialiseTaskLists+0x64>)
 800f126:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f128:	4b0a      	ldr	r3, [pc, #40]	@ (800f154 <prvInitialiseTaskLists+0x7c>)
 800f12a:	4a05      	ldr	r2, [pc, #20]	@ (800f140 <prvInitialiseTaskLists+0x68>)
 800f12c:	601a      	str	r2, [r3, #0]
}
 800f12e:	bf00      	nop
 800f130:	3708      	adds	r7, #8
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	24000ce0 	.word	0x24000ce0
 800f13c:	24000d6c 	.word	0x24000d6c
 800f140:	24000d80 	.word	0x24000d80
 800f144:	24000d9c 	.word	0x24000d9c
 800f148:	24000db0 	.word	0x24000db0
 800f14c:	24000dc8 	.word	0x24000dc8
 800f150:	24000d94 	.word	0x24000d94
 800f154:	24000d98 	.word	0x24000d98

0800f158 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f15e:	e019      	b.n	800f194 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f160:	f000 fbba 	bl	800f8d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f164:	4b10      	ldr	r3, [pc, #64]	@ (800f1a8 <prvCheckTasksWaitingTermination+0x50>)
 800f166:	68db      	ldr	r3, [r3, #12]
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	3304      	adds	r3, #4
 800f170:	4618      	mov	r0, r3
 800f172:	f7ff fb4d 	bl	800e810 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f176:	4b0d      	ldr	r3, [pc, #52]	@ (800f1ac <prvCheckTasksWaitingTermination+0x54>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	3b01      	subs	r3, #1
 800f17c:	4a0b      	ldr	r2, [pc, #44]	@ (800f1ac <prvCheckTasksWaitingTermination+0x54>)
 800f17e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f180:	4b0b      	ldr	r3, [pc, #44]	@ (800f1b0 <prvCheckTasksWaitingTermination+0x58>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	3b01      	subs	r3, #1
 800f186:	4a0a      	ldr	r2, [pc, #40]	@ (800f1b0 <prvCheckTasksWaitingTermination+0x58>)
 800f188:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f18a:	f000 fbd7 	bl	800f93c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f000 f810 	bl	800f1b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f194:	4b06      	ldr	r3, [pc, #24]	@ (800f1b0 <prvCheckTasksWaitingTermination+0x58>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d1e1      	bne.n	800f160 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f19c:	bf00      	nop
 800f19e:	bf00      	nop
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	24000db0 	.word	0x24000db0
 800f1ac:	24000ddc 	.word	0x24000ddc
 800f1b0:	24000dc4 	.word	0x24000dc4

0800f1b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	334c      	adds	r3, #76	@ 0x4c
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f001 fbbb 	bl	801093c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d108      	bne.n	800f1e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f000 fd6f 	bl	800fcb8 <vPortFree>
				vPortFree( pxTCB );
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 fd6c 	bl	800fcb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f1e0:	e019      	b.n	800f216 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	d103      	bne.n	800f1f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f000 fd63 	bl	800fcb8 <vPortFree>
	}
 800f1f2:	e010      	b.n	800f216 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f1fa:	2b02      	cmp	r3, #2
 800f1fc:	d00b      	beq.n	800f216 <prvDeleteTCB+0x62>
	__asm volatile
 800f1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f202:	f383 8811 	msr	BASEPRI, r3
 800f206:	f3bf 8f6f 	isb	sy
 800f20a:	f3bf 8f4f 	dsb	sy
 800f20e:	60fb      	str	r3, [r7, #12]
}
 800f210:	bf00      	nop
 800f212:	bf00      	nop
 800f214:	e7fd      	b.n	800f212 <prvDeleteTCB+0x5e>
	}
 800f216:	bf00      	nop
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
	...

0800f220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f226:	4b0c      	ldr	r3, [pc, #48]	@ (800f258 <prvResetNextTaskUnblockTime+0x38>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d104      	bne.n	800f23a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f230:	4b0a      	ldr	r3, [pc, #40]	@ (800f25c <prvResetNextTaskUnblockTime+0x3c>)
 800f232:	f04f 32ff 	mov.w	r2, #4294967295
 800f236:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f238:	e008      	b.n	800f24c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f23a:	4b07      	ldr	r3, [pc, #28]	@ (800f258 <prvResetNextTaskUnblockTime+0x38>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	68db      	ldr	r3, [r3, #12]
 800f240:	68db      	ldr	r3, [r3, #12]
 800f242:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	4a04      	ldr	r2, [pc, #16]	@ (800f25c <prvResetNextTaskUnblockTime+0x3c>)
 800f24a:	6013      	str	r3, [r2, #0]
}
 800f24c:	bf00      	nop
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr
 800f258:	24000d94 	.word	0x24000d94
 800f25c:	24000dfc 	.word	0x24000dfc

0800f260 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f260:	b580      	push	{r7, lr}
 800f262:	b08a      	sub	sp, #40	@ 0x28
 800f264:	af00      	add	r7, sp, #0
 800f266:	60f8      	str	r0, [r7, #12]
 800f268:	60b9      	str	r1, [r7, #8]
 800f26a:	603b      	str	r3, [r7, #0]
 800f26c:	4613      	mov	r3, r2
 800f26e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f270:	2301      	movs	r3, #1
 800f272:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d10b      	bne.n	800f292 <xTaskGenericNotify+0x32>
	__asm volatile
 800f27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f27e:	f383 8811 	msr	BASEPRI, r3
 800f282:	f3bf 8f6f 	isb	sy
 800f286:	f3bf 8f4f 	dsb	sy
 800f28a:	61bb      	str	r3, [r7, #24]
}
 800f28c:	bf00      	nop
 800f28e:	bf00      	nop
 800f290:	e7fd      	b.n	800f28e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f296:	f000 fb1f 	bl	800f8d8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d004      	beq.n	800f2aa <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f2a0:	6a3b      	ldr	r3, [r7, #32]
 800f2a2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f2aa:	6a3b      	ldr	r3, [r7, #32]
 800f2ac:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800f2b0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f2b2:	6a3b      	ldr	r3, [r7, #32]
 800f2b4:	2202      	movs	r2, #2
 800f2b6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800f2ba:	79fb      	ldrb	r3, [r7, #7]
 800f2bc:	2b04      	cmp	r3, #4
 800f2be:	d82e      	bhi.n	800f31e <xTaskGenericNotify+0xbe>
 800f2c0:	a201      	add	r2, pc, #4	@ (adr r2, 800f2c8 <xTaskGenericNotify+0x68>)
 800f2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c6:	bf00      	nop
 800f2c8:	0800f343 	.word	0x0800f343
 800f2cc:	0800f2dd 	.word	0x0800f2dd
 800f2d0:	0800f2ef 	.word	0x0800f2ef
 800f2d4:	0800f2ff 	.word	0x0800f2ff
 800f2d8:	0800f309 	.word	0x0800f309
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f2dc:	6a3b      	ldr	r3, [r7, #32]
 800f2de:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	431a      	orrs	r2, r3
 800f2e6:	6a3b      	ldr	r3, [r7, #32]
 800f2e8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800f2ec:	e02c      	b.n	800f348 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f2ee:	6a3b      	ldr	r3, [r7, #32]
 800f2f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f2f4:	1c5a      	adds	r2, r3, #1
 800f2f6:	6a3b      	ldr	r3, [r7, #32]
 800f2f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800f2fc:	e024      	b.n	800f348 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f2fe:	6a3b      	ldr	r3, [r7, #32]
 800f300:	68ba      	ldr	r2, [r7, #8]
 800f302:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800f306:	e01f      	b.n	800f348 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f308:	7ffb      	ldrb	r3, [r7, #31]
 800f30a:	2b02      	cmp	r3, #2
 800f30c:	d004      	beq.n	800f318 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f30e:	6a3b      	ldr	r3, [r7, #32]
 800f310:	68ba      	ldr	r2, [r7, #8]
 800f312:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f316:	e017      	b.n	800f348 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f318:	2300      	movs	r3, #0
 800f31a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f31c:	e014      	b.n	800f348 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f31e:	6a3b      	ldr	r3, [r7, #32]
 800f320:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f328:	d00d      	beq.n	800f346 <xTaskGenericNotify+0xe6>
	__asm volatile
 800f32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f32e:	f383 8811 	msr	BASEPRI, r3
 800f332:	f3bf 8f6f 	isb	sy
 800f336:	f3bf 8f4f 	dsb	sy
 800f33a:	617b      	str	r3, [r7, #20]
}
 800f33c:	bf00      	nop
 800f33e:	bf00      	nop
 800f340:	e7fd      	b.n	800f33e <xTaskGenericNotify+0xde>
					break;
 800f342:	bf00      	nop
 800f344:	e000      	b.n	800f348 <xTaskGenericNotify+0xe8>

					break;
 800f346:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f348:	7ffb      	ldrb	r3, [r7, #31]
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	d13a      	bne.n	800f3c4 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f34e:	6a3b      	ldr	r3, [r7, #32]
 800f350:	3304      	adds	r3, #4
 800f352:	4618      	mov	r0, r3
 800f354:	f7ff fa5c 	bl	800e810 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f358:	6a3b      	ldr	r3, [r7, #32]
 800f35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f35c:	2201      	movs	r2, #1
 800f35e:	409a      	lsls	r2, r3
 800f360:	4b1c      	ldr	r3, [pc, #112]	@ (800f3d4 <xTaskGenericNotify+0x174>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	4313      	orrs	r3, r2
 800f366:	4a1b      	ldr	r2, [pc, #108]	@ (800f3d4 <xTaskGenericNotify+0x174>)
 800f368:	6013      	str	r3, [r2, #0]
 800f36a:	6a3b      	ldr	r3, [r7, #32]
 800f36c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f36e:	4613      	mov	r3, r2
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	4413      	add	r3, r2
 800f374:	009b      	lsls	r3, r3, #2
 800f376:	4a18      	ldr	r2, [pc, #96]	@ (800f3d8 <xTaskGenericNotify+0x178>)
 800f378:	441a      	add	r2, r3
 800f37a:	6a3b      	ldr	r3, [r7, #32]
 800f37c:	3304      	adds	r3, #4
 800f37e:	4619      	mov	r1, r3
 800f380:	4610      	mov	r0, r2
 800f382:	f7ff f9e8 	bl	800e756 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f386:	6a3b      	ldr	r3, [r7, #32]
 800f388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d00b      	beq.n	800f3a6 <xTaskGenericNotify+0x146>
	__asm volatile
 800f38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f392:	f383 8811 	msr	BASEPRI, r3
 800f396:	f3bf 8f6f 	isb	sy
 800f39a:	f3bf 8f4f 	dsb	sy
 800f39e:	613b      	str	r3, [r7, #16]
}
 800f3a0:	bf00      	nop
 800f3a2:	bf00      	nop
 800f3a4:	e7fd      	b.n	800f3a2 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f3a6:	6a3b      	ldr	r3, [r7, #32]
 800f3a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3aa:	4b0c      	ldr	r3, [pc, #48]	@ (800f3dc <xTaskGenericNotify+0x17c>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d907      	bls.n	800f3c4 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f3b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f3e0 <xTaskGenericNotify+0x180>)
 800f3b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3ba:	601a      	str	r2, [r3, #0]
 800f3bc:	f3bf 8f4f 	dsb	sy
 800f3c0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f3c4:	f000 faba 	bl	800f93c <vPortExitCritical>

		return xReturn;
 800f3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3728      	adds	r7, #40	@ 0x28
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
 800f3d2:	bf00      	nop
 800f3d4:	24000de4 	.word	0x24000de4
 800f3d8:	24000ce0 	.word	0x24000ce0
 800f3dc:	24000cdc 	.word	0x24000cdc
 800f3e0:	e000ed04 	.word	0xe000ed04

0800f3e4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b08e      	sub	sp, #56	@ 0x38
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	603b      	str	r3, [r7, #0]
 800f3f0:	4613      	mov	r3, r2
 800f3f2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d10b      	bne.n	800f416 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800f3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f402:	f383 8811 	msr	BASEPRI, r3
 800f406:	f3bf 8f6f 	isb	sy
 800f40a:	f3bf 8f4f 	dsb	sy
 800f40e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f410:	bf00      	nop
 800f412:	bf00      	nop
 800f414:	e7fd      	b.n	800f412 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f416:	f000 fb3f 	bl	800fa98 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f41e:	f3ef 8211 	mrs	r2, BASEPRI
 800f422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f426:	f383 8811 	msr	BASEPRI, r3
 800f42a:	f3bf 8f6f 	isb	sy
 800f42e:	f3bf 8f4f 	dsb	sy
 800f432:	623a      	str	r2, [r7, #32]
 800f434:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f436:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f438:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d004      	beq.n	800f44a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f442:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f44c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800f450:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f456:	2202      	movs	r2, #2
 800f458:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800f45c:	79fb      	ldrb	r3, [r7, #7]
 800f45e:	2b04      	cmp	r3, #4
 800f460:	d82e      	bhi.n	800f4c0 <xTaskGenericNotifyFromISR+0xdc>
 800f462:	a201      	add	r2, pc, #4	@ (adr r2, 800f468 <xTaskGenericNotifyFromISR+0x84>)
 800f464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f468:	0800f4e5 	.word	0x0800f4e5
 800f46c:	0800f47d 	.word	0x0800f47d
 800f470:	0800f48f 	.word	0x0800f48f
 800f474:	0800f49f 	.word	0x0800f49f
 800f478:	0800f4a9 	.word	0x0800f4a9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f47e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	431a      	orrs	r2, r3
 800f486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f488:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800f48c:	e02d      	b.n	800f4ea <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f490:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f494:	1c5a      	adds	r2, r3, #1
 800f496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f498:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800f49c:	e025      	b.n	800f4ea <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a0:	68ba      	ldr	r2, [r7, #8]
 800f4a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800f4a6:	e020      	b.n	800f4ea <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f4a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f4ac:	2b02      	cmp	r3, #2
 800f4ae:	d004      	beq.n	800f4ba <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4b2:	68ba      	ldr	r2, [r7, #8]
 800f4b4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f4b8:	e017      	b.n	800f4ea <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800f4be:	e014      	b.n	800f4ea <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ca:	d00d      	beq.n	800f4e8 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800f4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d0:	f383 8811 	msr	BASEPRI, r3
 800f4d4:	f3bf 8f6f 	isb	sy
 800f4d8:	f3bf 8f4f 	dsb	sy
 800f4dc:	61bb      	str	r3, [r7, #24]
}
 800f4de:	bf00      	nop
 800f4e0:	bf00      	nop
 800f4e2:	e7fd      	b.n	800f4e0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800f4e4:	bf00      	nop
 800f4e6:	e000      	b.n	800f4ea <xTaskGenericNotifyFromISR+0x106>
					break;
 800f4e8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f4ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d146      	bne.n	800f580 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d00b      	beq.n	800f512 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800f4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4fe:	f383 8811 	msr	BASEPRI, r3
 800f502:	f3bf 8f6f 	isb	sy
 800f506:	f3bf 8f4f 	dsb	sy
 800f50a:	617b      	str	r3, [r7, #20]
}
 800f50c:	bf00      	nop
 800f50e:	bf00      	nop
 800f510:	e7fd      	b.n	800f50e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f512:	4b21      	ldr	r3, [pc, #132]	@ (800f598 <xTaskGenericNotifyFromISR+0x1b4>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d11c      	bne.n	800f554 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f51c:	3304      	adds	r3, #4
 800f51e:	4618      	mov	r0, r3
 800f520:	f7ff f976 	bl	800e810 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f528:	2201      	movs	r2, #1
 800f52a:	409a      	lsls	r2, r3
 800f52c:	4b1b      	ldr	r3, [pc, #108]	@ (800f59c <xTaskGenericNotifyFromISR+0x1b8>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	4313      	orrs	r3, r2
 800f532:	4a1a      	ldr	r2, [pc, #104]	@ (800f59c <xTaskGenericNotifyFromISR+0x1b8>)
 800f534:	6013      	str	r3, [r2, #0]
 800f536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f53a:	4613      	mov	r3, r2
 800f53c:	009b      	lsls	r3, r3, #2
 800f53e:	4413      	add	r3, r2
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	4a17      	ldr	r2, [pc, #92]	@ (800f5a0 <xTaskGenericNotifyFromISR+0x1bc>)
 800f544:	441a      	add	r2, r3
 800f546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f548:	3304      	adds	r3, #4
 800f54a:	4619      	mov	r1, r3
 800f54c:	4610      	mov	r0, r2
 800f54e:	f7ff f902 	bl	800e756 <vListInsertEnd>
 800f552:	e005      	b.n	800f560 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f556:	3318      	adds	r3, #24
 800f558:	4619      	mov	r1, r3
 800f55a:	4812      	ldr	r0, [pc, #72]	@ (800f5a4 <xTaskGenericNotifyFromISR+0x1c0>)
 800f55c:	f7ff f8fb 	bl	800e756 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f564:	4b10      	ldr	r3, [pc, #64]	@ (800f5a8 <xTaskGenericNotifyFromISR+0x1c4>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d908      	bls.n	800f580 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f56e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f570:	2b00      	cmp	r3, #0
 800f572:	d002      	beq.n	800f57a <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f576:	2201      	movs	r2, #1
 800f578:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f57a:	4b0c      	ldr	r3, [pc, #48]	@ (800f5ac <xTaskGenericNotifyFromISR+0x1c8>)
 800f57c:	2201      	movs	r2, #1
 800f57e:	601a      	str	r2, [r3, #0]
 800f580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f582:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f584:	693b      	ldr	r3, [r7, #16]
 800f586:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f58a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f58c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800f58e:	4618      	mov	r0, r3
 800f590:	3738      	adds	r7, #56	@ 0x38
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}
 800f596:	bf00      	nop
 800f598:	24000e04 	.word	0x24000e04
 800f59c:	24000de4 	.word	0x24000de4
 800f5a0:	24000ce0 	.word	0x24000ce0
 800f5a4:	24000d9c 	.word	0x24000d9c
 800f5a8:	24000cdc 	.word	0x24000cdc
 800f5ac:	24000df0 	.word	0x24000df0

0800f5b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f5ba:	4b29      	ldr	r3, [pc, #164]	@ (800f660 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f5c0:	4b28      	ldr	r3, [pc, #160]	@ (800f664 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	3304      	adds	r3, #4
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7ff f922 	bl	800e810 <uxListRemove>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d10b      	bne.n	800f5ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f5d2:	4b24      	ldr	r3, [pc, #144]	@ (800f664 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5d8:	2201      	movs	r2, #1
 800f5da:	fa02 f303 	lsl.w	r3, r2, r3
 800f5de:	43da      	mvns	r2, r3
 800f5e0:	4b21      	ldr	r3, [pc, #132]	@ (800f668 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4013      	ands	r3, r2
 800f5e6:	4a20      	ldr	r2, [pc, #128]	@ (800f668 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f5e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f0:	d10a      	bne.n	800f608 <prvAddCurrentTaskToDelayedList+0x58>
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d007      	beq.n	800f608 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5f8:	4b1a      	ldr	r3, [pc, #104]	@ (800f664 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	3304      	adds	r3, #4
 800f5fe:	4619      	mov	r1, r3
 800f600:	481a      	ldr	r0, [pc, #104]	@ (800f66c <prvAddCurrentTaskToDelayedList+0xbc>)
 800f602:	f7ff f8a8 	bl	800e756 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f606:	e026      	b.n	800f656 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f608:	68fa      	ldr	r2, [r7, #12]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4413      	add	r3, r2
 800f60e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f610:	4b14      	ldr	r3, [pc, #80]	@ (800f664 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	68ba      	ldr	r2, [r7, #8]
 800f616:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f618:	68ba      	ldr	r2, [r7, #8]
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d209      	bcs.n	800f634 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f620:	4b13      	ldr	r3, [pc, #76]	@ (800f670 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	4b0f      	ldr	r3, [pc, #60]	@ (800f664 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	3304      	adds	r3, #4
 800f62a:	4619      	mov	r1, r3
 800f62c:	4610      	mov	r0, r2
 800f62e:	f7ff f8b6 	bl	800e79e <vListInsert>
}
 800f632:	e010      	b.n	800f656 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f634:	4b0f      	ldr	r3, [pc, #60]	@ (800f674 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f636:	681a      	ldr	r2, [r3, #0]
 800f638:	4b0a      	ldr	r3, [pc, #40]	@ (800f664 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	3304      	adds	r3, #4
 800f63e:	4619      	mov	r1, r3
 800f640:	4610      	mov	r0, r2
 800f642:	f7ff f8ac 	bl	800e79e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f646:	4b0c      	ldr	r3, [pc, #48]	@ (800f678 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	68ba      	ldr	r2, [r7, #8]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d202      	bcs.n	800f656 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f650:	4a09      	ldr	r2, [pc, #36]	@ (800f678 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	6013      	str	r3, [r2, #0]
}
 800f656:	bf00      	nop
 800f658:	3710      	adds	r7, #16
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	24000de0 	.word	0x24000de0
 800f664:	24000cdc 	.word	0x24000cdc
 800f668:	24000de4 	.word	0x24000de4
 800f66c:	24000dc8 	.word	0x24000dc8
 800f670:	24000d98 	.word	0x24000d98
 800f674:	24000d94 	.word	0x24000d94
 800f678:	24000dfc 	.word	0x24000dfc

0800f67c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f67c:	b480      	push	{r7}
 800f67e:	b085      	sub	sp, #20
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	60b9      	str	r1, [r7, #8]
 800f686:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	3b04      	subs	r3, #4
 800f68c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	3b04      	subs	r3, #4
 800f69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	f023 0201 	bic.w	r2, r3, #1
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	3b04      	subs	r3, #4
 800f6aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f6ac:	4a0c      	ldr	r2, [pc, #48]	@ (800f6e0 <pxPortInitialiseStack+0x64>)
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	3b14      	subs	r3, #20
 800f6b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	3b04      	subs	r3, #4
 800f6c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f06f 0202 	mvn.w	r2, #2
 800f6ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	3b20      	subs	r3, #32
 800f6d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3714      	adds	r7, #20
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr
 800f6e0:	0800f6e5 	.word	0x0800f6e5

0800f6e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b085      	sub	sp, #20
 800f6e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f6ee:	4b13      	ldr	r3, [pc, #76]	@ (800f73c <prvTaskExitError+0x58>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6f6:	d00b      	beq.n	800f710 <prvTaskExitError+0x2c>
	__asm volatile
 800f6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6fc:	f383 8811 	msr	BASEPRI, r3
 800f700:	f3bf 8f6f 	isb	sy
 800f704:	f3bf 8f4f 	dsb	sy
 800f708:	60fb      	str	r3, [r7, #12]
}
 800f70a:	bf00      	nop
 800f70c:	bf00      	nop
 800f70e:	e7fd      	b.n	800f70c <prvTaskExitError+0x28>
	__asm volatile
 800f710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f714:	f383 8811 	msr	BASEPRI, r3
 800f718:	f3bf 8f6f 	isb	sy
 800f71c:	f3bf 8f4f 	dsb	sy
 800f720:	60bb      	str	r3, [r7, #8]
}
 800f722:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f724:	bf00      	nop
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d0fc      	beq.n	800f726 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f72c:	bf00      	nop
 800f72e:	bf00      	nop
 800f730:	3714      	adds	r7, #20
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr
 800f73a:	bf00      	nop
 800f73c:	2400009c 	.word	0x2400009c

0800f740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f740:	4b07      	ldr	r3, [pc, #28]	@ (800f760 <pxCurrentTCBConst2>)
 800f742:	6819      	ldr	r1, [r3, #0]
 800f744:	6808      	ldr	r0, [r1, #0]
 800f746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f74a:	f380 8809 	msr	PSP, r0
 800f74e:	f3bf 8f6f 	isb	sy
 800f752:	f04f 0000 	mov.w	r0, #0
 800f756:	f380 8811 	msr	BASEPRI, r0
 800f75a:	4770      	bx	lr
 800f75c:	f3af 8000 	nop.w

0800f760 <pxCurrentTCBConst2>:
 800f760:	24000cdc 	.word	0x24000cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f764:	bf00      	nop
 800f766:	bf00      	nop

0800f768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f768:	4808      	ldr	r0, [pc, #32]	@ (800f78c <prvPortStartFirstTask+0x24>)
 800f76a:	6800      	ldr	r0, [r0, #0]
 800f76c:	6800      	ldr	r0, [r0, #0]
 800f76e:	f380 8808 	msr	MSP, r0
 800f772:	f04f 0000 	mov.w	r0, #0
 800f776:	f380 8814 	msr	CONTROL, r0
 800f77a:	b662      	cpsie	i
 800f77c:	b661      	cpsie	f
 800f77e:	f3bf 8f4f 	dsb	sy
 800f782:	f3bf 8f6f 	isb	sy
 800f786:	df00      	svc	0
 800f788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f78a:	bf00      	nop
 800f78c:	e000ed08 	.word	0xe000ed08

0800f790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b086      	sub	sp, #24
 800f794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f796:	4b47      	ldr	r3, [pc, #284]	@ (800f8b4 <xPortStartScheduler+0x124>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	4a47      	ldr	r2, [pc, #284]	@ (800f8b8 <xPortStartScheduler+0x128>)
 800f79c:	4293      	cmp	r3, r2
 800f79e:	d10b      	bne.n	800f7b8 <xPortStartScheduler+0x28>
	__asm volatile
 800f7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	60fb      	str	r3, [r7, #12]
}
 800f7b2:	bf00      	nop
 800f7b4:	bf00      	nop
 800f7b6:	e7fd      	b.n	800f7b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f7b8:	4b3e      	ldr	r3, [pc, #248]	@ (800f8b4 <xPortStartScheduler+0x124>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4a3f      	ldr	r2, [pc, #252]	@ (800f8bc <xPortStartScheduler+0x12c>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d10b      	bne.n	800f7da <xPortStartScheduler+0x4a>
	__asm volatile
 800f7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c6:	f383 8811 	msr	BASEPRI, r3
 800f7ca:	f3bf 8f6f 	isb	sy
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	613b      	str	r3, [r7, #16]
}
 800f7d4:	bf00      	nop
 800f7d6:	bf00      	nop
 800f7d8:	e7fd      	b.n	800f7d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f7da:	4b39      	ldr	r3, [pc, #228]	@ (800f8c0 <xPortStartScheduler+0x130>)
 800f7dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	22ff      	movs	r2, #255	@ 0xff
 800f7ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f7f4:	78fb      	ldrb	r3, [r7, #3]
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f7fc:	b2da      	uxtb	r2, r3
 800f7fe:	4b31      	ldr	r3, [pc, #196]	@ (800f8c4 <xPortStartScheduler+0x134>)
 800f800:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f802:	4b31      	ldr	r3, [pc, #196]	@ (800f8c8 <xPortStartScheduler+0x138>)
 800f804:	2207      	movs	r2, #7
 800f806:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f808:	e009      	b.n	800f81e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f80a:	4b2f      	ldr	r3, [pc, #188]	@ (800f8c8 <xPortStartScheduler+0x138>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	3b01      	subs	r3, #1
 800f810:	4a2d      	ldr	r2, [pc, #180]	@ (800f8c8 <xPortStartScheduler+0x138>)
 800f812:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f814:	78fb      	ldrb	r3, [r7, #3]
 800f816:	b2db      	uxtb	r3, r3
 800f818:	005b      	lsls	r3, r3, #1
 800f81a:	b2db      	uxtb	r3, r3
 800f81c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f81e:	78fb      	ldrb	r3, [r7, #3]
 800f820:	b2db      	uxtb	r3, r3
 800f822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f826:	2b80      	cmp	r3, #128	@ 0x80
 800f828:	d0ef      	beq.n	800f80a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f82a:	4b27      	ldr	r3, [pc, #156]	@ (800f8c8 <xPortStartScheduler+0x138>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f1c3 0307 	rsb	r3, r3, #7
 800f832:	2b04      	cmp	r3, #4
 800f834:	d00b      	beq.n	800f84e <xPortStartScheduler+0xbe>
	__asm volatile
 800f836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f83a:	f383 8811 	msr	BASEPRI, r3
 800f83e:	f3bf 8f6f 	isb	sy
 800f842:	f3bf 8f4f 	dsb	sy
 800f846:	60bb      	str	r3, [r7, #8]
}
 800f848:	bf00      	nop
 800f84a:	bf00      	nop
 800f84c:	e7fd      	b.n	800f84a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f84e:	4b1e      	ldr	r3, [pc, #120]	@ (800f8c8 <xPortStartScheduler+0x138>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	021b      	lsls	r3, r3, #8
 800f854:	4a1c      	ldr	r2, [pc, #112]	@ (800f8c8 <xPortStartScheduler+0x138>)
 800f856:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f858:	4b1b      	ldr	r3, [pc, #108]	@ (800f8c8 <xPortStartScheduler+0x138>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f860:	4a19      	ldr	r2, [pc, #100]	@ (800f8c8 <xPortStartScheduler+0x138>)
 800f862:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	b2da      	uxtb	r2, r3
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f86c:	4b17      	ldr	r3, [pc, #92]	@ (800f8cc <xPortStartScheduler+0x13c>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a16      	ldr	r2, [pc, #88]	@ (800f8cc <xPortStartScheduler+0x13c>)
 800f872:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f878:	4b14      	ldr	r3, [pc, #80]	@ (800f8cc <xPortStartScheduler+0x13c>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4a13      	ldr	r2, [pc, #76]	@ (800f8cc <xPortStartScheduler+0x13c>)
 800f87e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f884:	f000 f8da 	bl	800fa3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f888:	4b11      	ldr	r3, [pc, #68]	@ (800f8d0 <xPortStartScheduler+0x140>)
 800f88a:	2200      	movs	r2, #0
 800f88c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f88e:	f000 f8f9 	bl	800fa84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f892:	4b10      	ldr	r3, [pc, #64]	@ (800f8d4 <xPortStartScheduler+0x144>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	4a0f      	ldr	r2, [pc, #60]	@ (800f8d4 <xPortStartScheduler+0x144>)
 800f898:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f89c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f89e:	f7ff ff63 	bl	800f768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f8a2:	f7ff fb9d 	bl	800efe0 <vTaskSwitchContext>
	prvTaskExitError();
 800f8a6:	f7ff ff1d 	bl	800f6e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f8aa:	2300      	movs	r3, #0
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3718      	adds	r7, #24
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}
 800f8b4:	e000ed00 	.word	0xe000ed00
 800f8b8:	410fc271 	.word	0x410fc271
 800f8bc:	410fc270 	.word	0x410fc270
 800f8c0:	e000e400 	.word	0xe000e400
 800f8c4:	24000e08 	.word	0x24000e08
 800f8c8:	24000e0c 	.word	0x24000e0c
 800f8cc:	e000ed20 	.word	0xe000ed20
 800f8d0:	2400009c 	.word	0x2400009c
 800f8d4:	e000ef34 	.word	0xe000ef34

0800f8d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b083      	sub	sp, #12
 800f8dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8e2:	f383 8811 	msr	BASEPRI, r3
 800f8e6:	f3bf 8f6f 	isb	sy
 800f8ea:	f3bf 8f4f 	dsb	sy
 800f8ee:	607b      	str	r3, [r7, #4]
}
 800f8f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f8f2:	4b10      	ldr	r3, [pc, #64]	@ (800f934 <vPortEnterCritical+0x5c>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	3301      	adds	r3, #1
 800f8f8:	4a0e      	ldr	r2, [pc, #56]	@ (800f934 <vPortEnterCritical+0x5c>)
 800f8fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f8fc:	4b0d      	ldr	r3, [pc, #52]	@ (800f934 <vPortEnterCritical+0x5c>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	2b01      	cmp	r3, #1
 800f902:	d110      	bne.n	800f926 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f904:	4b0c      	ldr	r3, [pc, #48]	@ (800f938 <vPortEnterCritical+0x60>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d00b      	beq.n	800f926 <vPortEnterCritical+0x4e>
	__asm volatile
 800f90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f912:	f383 8811 	msr	BASEPRI, r3
 800f916:	f3bf 8f6f 	isb	sy
 800f91a:	f3bf 8f4f 	dsb	sy
 800f91e:	603b      	str	r3, [r7, #0]
}
 800f920:	bf00      	nop
 800f922:	bf00      	nop
 800f924:	e7fd      	b.n	800f922 <vPortEnterCritical+0x4a>
	}
}
 800f926:	bf00      	nop
 800f928:	370c      	adds	r7, #12
 800f92a:	46bd      	mov	sp, r7
 800f92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f930:	4770      	bx	lr
 800f932:	bf00      	nop
 800f934:	2400009c 	.word	0x2400009c
 800f938:	e000ed04 	.word	0xe000ed04

0800f93c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f942:	4b12      	ldr	r3, [pc, #72]	@ (800f98c <vPortExitCritical+0x50>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d10b      	bne.n	800f962 <vPortExitCritical+0x26>
	__asm volatile
 800f94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f94e:	f383 8811 	msr	BASEPRI, r3
 800f952:	f3bf 8f6f 	isb	sy
 800f956:	f3bf 8f4f 	dsb	sy
 800f95a:	607b      	str	r3, [r7, #4]
}
 800f95c:	bf00      	nop
 800f95e:	bf00      	nop
 800f960:	e7fd      	b.n	800f95e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f962:	4b0a      	ldr	r3, [pc, #40]	@ (800f98c <vPortExitCritical+0x50>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	3b01      	subs	r3, #1
 800f968:	4a08      	ldr	r2, [pc, #32]	@ (800f98c <vPortExitCritical+0x50>)
 800f96a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f96c:	4b07      	ldr	r3, [pc, #28]	@ (800f98c <vPortExitCritical+0x50>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d105      	bne.n	800f980 <vPortExitCritical+0x44>
 800f974:	2300      	movs	r3, #0
 800f976:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	f383 8811 	msr	BASEPRI, r3
}
 800f97e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f980:	bf00      	nop
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr
 800f98c:	2400009c 	.word	0x2400009c

0800f990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f990:	f3ef 8009 	mrs	r0, PSP
 800f994:	f3bf 8f6f 	isb	sy
 800f998:	4b15      	ldr	r3, [pc, #84]	@ (800f9f0 <pxCurrentTCBConst>)
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	f01e 0f10 	tst.w	lr, #16
 800f9a0:	bf08      	it	eq
 800f9a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f9a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9aa:	6010      	str	r0, [r2, #0]
 800f9ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f9b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f9b4:	f380 8811 	msr	BASEPRI, r0
 800f9b8:	f3bf 8f4f 	dsb	sy
 800f9bc:	f3bf 8f6f 	isb	sy
 800f9c0:	f7ff fb0e 	bl	800efe0 <vTaskSwitchContext>
 800f9c4:	f04f 0000 	mov.w	r0, #0
 800f9c8:	f380 8811 	msr	BASEPRI, r0
 800f9cc:	bc09      	pop	{r0, r3}
 800f9ce:	6819      	ldr	r1, [r3, #0]
 800f9d0:	6808      	ldr	r0, [r1, #0]
 800f9d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d6:	f01e 0f10 	tst.w	lr, #16
 800f9da:	bf08      	it	eq
 800f9dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f9e0:	f380 8809 	msr	PSP, r0
 800f9e4:	f3bf 8f6f 	isb	sy
 800f9e8:	4770      	bx	lr
 800f9ea:	bf00      	nop
 800f9ec:	f3af 8000 	nop.w

0800f9f0 <pxCurrentTCBConst>:
 800f9f0:	24000cdc 	.word	0x24000cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f9f4:	bf00      	nop
 800f9f6:	bf00      	nop

0800f9f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b082      	sub	sp, #8
 800f9fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa02:	f383 8811 	msr	BASEPRI, r3
 800fa06:	f3bf 8f6f 	isb	sy
 800fa0a:	f3bf 8f4f 	dsb	sy
 800fa0e:	607b      	str	r3, [r7, #4]
}
 800fa10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fa12:	f7ff fa2b 	bl	800ee6c <xTaskIncrementTick>
 800fa16:	4603      	mov	r3, r0
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d003      	beq.n	800fa24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fa1c:	4b06      	ldr	r3, [pc, #24]	@ (800fa38 <SysTick_Handler+0x40>)
 800fa1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa22:	601a      	str	r2, [r3, #0]
 800fa24:	2300      	movs	r3, #0
 800fa26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	f383 8811 	msr	BASEPRI, r3
}
 800fa2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fa30:	bf00      	nop
 800fa32:	3708      	adds	r7, #8
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	e000ed04 	.word	0xe000ed04

0800fa3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fa40:	4b0b      	ldr	r3, [pc, #44]	@ (800fa70 <vPortSetupTimerInterrupt+0x34>)
 800fa42:	2200      	movs	r2, #0
 800fa44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fa46:	4b0b      	ldr	r3, [pc, #44]	@ (800fa74 <vPortSetupTimerInterrupt+0x38>)
 800fa48:	2200      	movs	r2, #0
 800fa4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fa4c:	4b0a      	ldr	r3, [pc, #40]	@ (800fa78 <vPortSetupTimerInterrupt+0x3c>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4a0a      	ldr	r2, [pc, #40]	@ (800fa7c <vPortSetupTimerInterrupt+0x40>)
 800fa52:	fba2 2303 	umull	r2, r3, r2, r3
 800fa56:	099b      	lsrs	r3, r3, #6
 800fa58:	4a09      	ldr	r2, [pc, #36]	@ (800fa80 <vPortSetupTimerInterrupt+0x44>)
 800fa5a:	3b01      	subs	r3, #1
 800fa5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fa5e:	4b04      	ldr	r3, [pc, #16]	@ (800fa70 <vPortSetupTimerInterrupt+0x34>)
 800fa60:	2207      	movs	r2, #7
 800fa62:	601a      	str	r2, [r3, #0]
}
 800fa64:	bf00      	nop
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop
 800fa70:	e000e010 	.word	0xe000e010
 800fa74:	e000e018 	.word	0xe000e018
 800fa78:	24000000 	.word	0x24000000
 800fa7c:	10624dd3 	.word	0x10624dd3
 800fa80:	e000e014 	.word	0xe000e014

0800fa84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fa84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fa94 <vPortEnableVFP+0x10>
 800fa88:	6801      	ldr	r1, [r0, #0]
 800fa8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fa8e:	6001      	str	r1, [r0, #0]
 800fa90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fa92:	bf00      	nop
 800fa94:	e000ed88 	.word	0xe000ed88

0800fa98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fa98:	b480      	push	{r7}
 800fa9a:	b085      	sub	sp, #20
 800fa9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fa9e:	f3ef 8305 	mrs	r3, IPSR
 800faa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	2b0f      	cmp	r3, #15
 800faa8:	d915      	bls.n	800fad6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800faaa:	4a18      	ldr	r2, [pc, #96]	@ (800fb0c <vPortValidateInterruptPriority+0x74>)
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	4413      	add	r3, r2
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fab4:	4b16      	ldr	r3, [pc, #88]	@ (800fb10 <vPortValidateInterruptPriority+0x78>)
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	7afa      	ldrb	r2, [r7, #11]
 800faba:	429a      	cmp	r2, r3
 800fabc:	d20b      	bcs.n	800fad6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fac2:	f383 8811 	msr	BASEPRI, r3
 800fac6:	f3bf 8f6f 	isb	sy
 800faca:	f3bf 8f4f 	dsb	sy
 800face:	607b      	str	r3, [r7, #4]
}
 800fad0:	bf00      	nop
 800fad2:	bf00      	nop
 800fad4:	e7fd      	b.n	800fad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fad6:	4b0f      	ldr	r3, [pc, #60]	@ (800fb14 <vPortValidateInterruptPriority+0x7c>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fade:	4b0e      	ldr	r3, [pc, #56]	@ (800fb18 <vPortValidateInterruptPriority+0x80>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d90b      	bls.n	800fafe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faea:	f383 8811 	msr	BASEPRI, r3
 800faee:	f3bf 8f6f 	isb	sy
 800faf2:	f3bf 8f4f 	dsb	sy
 800faf6:	603b      	str	r3, [r7, #0]
}
 800faf8:	bf00      	nop
 800fafa:	bf00      	nop
 800fafc:	e7fd      	b.n	800fafa <vPortValidateInterruptPriority+0x62>
	}
 800fafe:	bf00      	nop
 800fb00:	3714      	adds	r7, #20
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr
 800fb0a:	bf00      	nop
 800fb0c:	e000e3f0 	.word	0xe000e3f0
 800fb10:	24000e08 	.word	0x24000e08
 800fb14:	e000ed0c 	.word	0xe000ed0c
 800fb18:	24000e0c 	.word	0x24000e0c

0800fb1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b08a      	sub	sp, #40	@ 0x28
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb24:	2300      	movs	r3, #0
 800fb26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb28:	f7ff f8f4 	bl	800ed14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fb2c:	4b5c      	ldr	r3, [pc, #368]	@ (800fca0 <pvPortMalloc+0x184>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d101      	bne.n	800fb38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fb34:	f000 f924 	bl	800fd80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fb38:	4b5a      	ldr	r3, [pc, #360]	@ (800fca4 <pvPortMalloc+0x188>)
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	4013      	ands	r3, r2
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	f040 8095 	bne.w	800fc70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d01e      	beq.n	800fb8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fb4c:	2208      	movs	r2, #8
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	4413      	add	r3, r2
 800fb52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f003 0307 	and.w	r3, r3, #7
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d015      	beq.n	800fb8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f023 0307 	bic.w	r3, r3, #7
 800fb64:	3308      	adds	r3, #8
 800fb66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f003 0307 	and.w	r3, r3, #7
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d00b      	beq.n	800fb8a <pvPortMalloc+0x6e>
	__asm volatile
 800fb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb76:	f383 8811 	msr	BASEPRI, r3
 800fb7a:	f3bf 8f6f 	isb	sy
 800fb7e:	f3bf 8f4f 	dsb	sy
 800fb82:	617b      	str	r3, [r7, #20]
}
 800fb84:	bf00      	nop
 800fb86:	bf00      	nop
 800fb88:	e7fd      	b.n	800fb86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d06f      	beq.n	800fc70 <pvPortMalloc+0x154>
 800fb90:	4b45      	ldr	r3, [pc, #276]	@ (800fca8 <pvPortMalloc+0x18c>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	687a      	ldr	r2, [r7, #4]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d86a      	bhi.n	800fc70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fb9a:	4b44      	ldr	r3, [pc, #272]	@ (800fcac <pvPortMalloc+0x190>)
 800fb9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fb9e:	4b43      	ldr	r3, [pc, #268]	@ (800fcac <pvPortMalloc+0x190>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fba4:	e004      	b.n	800fbb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fba8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d903      	bls.n	800fbc2 <pvPortMalloc+0xa6>
 800fbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d1f1      	bne.n	800fba6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fbc2:	4b37      	ldr	r3, [pc, #220]	@ (800fca0 <pvPortMalloc+0x184>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d051      	beq.n	800fc70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fbcc:	6a3b      	ldr	r3, [r7, #32]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2208      	movs	r2, #8
 800fbd2:	4413      	add	r3, r2
 800fbd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbd8:	681a      	ldr	r2, [r3, #0]
 800fbda:	6a3b      	ldr	r3, [r7, #32]
 800fbdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbe0:	685a      	ldr	r2, [r3, #4]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	1ad2      	subs	r2, r2, r3
 800fbe6:	2308      	movs	r3, #8
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d920      	bls.n	800fc30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fbee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbf6:	69bb      	ldr	r3, [r7, #24]
 800fbf8:	f003 0307 	and.w	r3, r3, #7
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d00b      	beq.n	800fc18 <pvPortMalloc+0xfc>
	__asm volatile
 800fc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc04:	f383 8811 	msr	BASEPRI, r3
 800fc08:	f3bf 8f6f 	isb	sy
 800fc0c:	f3bf 8f4f 	dsb	sy
 800fc10:	613b      	str	r3, [r7, #16]
}
 800fc12:	bf00      	nop
 800fc14:	bf00      	nop
 800fc16:	e7fd      	b.n	800fc14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc1a:	685a      	ldr	r2, [r3, #4]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	1ad2      	subs	r2, r2, r3
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc2a:	69b8      	ldr	r0, [r7, #24]
 800fc2c:	f000 f90a 	bl	800fe44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fc30:	4b1d      	ldr	r3, [pc, #116]	@ (800fca8 <pvPortMalloc+0x18c>)
 800fc32:	681a      	ldr	r2, [r3, #0]
 800fc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	1ad3      	subs	r3, r2, r3
 800fc3a:	4a1b      	ldr	r2, [pc, #108]	@ (800fca8 <pvPortMalloc+0x18c>)
 800fc3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fc3e:	4b1a      	ldr	r3, [pc, #104]	@ (800fca8 <pvPortMalloc+0x18c>)
 800fc40:	681a      	ldr	r2, [r3, #0]
 800fc42:	4b1b      	ldr	r3, [pc, #108]	@ (800fcb0 <pvPortMalloc+0x194>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d203      	bcs.n	800fc52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fc4a:	4b17      	ldr	r3, [pc, #92]	@ (800fca8 <pvPortMalloc+0x18c>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	4a18      	ldr	r2, [pc, #96]	@ (800fcb0 <pvPortMalloc+0x194>)
 800fc50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc54:	685a      	ldr	r2, [r3, #4]
 800fc56:	4b13      	ldr	r3, [pc, #76]	@ (800fca4 <pvPortMalloc+0x188>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	431a      	orrs	r2, r3
 800fc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc62:	2200      	movs	r2, #0
 800fc64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fc66:	4b13      	ldr	r3, [pc, #76]	@ (800fcb4 <pvPortMalloc+0x198>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	4a11      	ldr	r2, [pc, #68]	@ (800fcb4 <pvPortMalloc+0x198>)
 800fc6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fc70:	f7ff f85e 	bl	800ed30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	f003 0307 	and.w	r3, r3, #7
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d00b      	beq.n	800fc96 <pvPortMalloc+0x17a>
	__asm volatile
 800fc7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc82:	f383 8811 	msr	BASEPRI, r3
 800fc86:	f3bf 8f6f 	isb	sy
 800fc8a:	f3bf 8f4f 	dsb	sy
 800fc8e:	60fb      	str	r3, [r7, #12]
}
 800fc90:	bf00      	nop
 800fc92:	bf00      	nop
 800fc94:	e7fd      	b.n	800fc92 <pvPortMalloc+0x176>
	return pvReturn;
 800fc96:	69fb      	ldr	r3, [r7, #28]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3728      	adds	r7, #40	@ 0x28
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	24004a18 	.word	0x24004a18
 800fca4:	24004a2c 	.word	0x24004a2c
 800fca8:	24004a1c 	.word	0x24004a1c
 800fcac:	24004a10 	.word	0x24004a10
 800fcb0:	24004a20 	.word	0x24004a20
 800fcb4:	24004a24 	.word	0x24004a24

0800fcb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b086      	sub	sp, #24
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d04f      	beq.n	800fd6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fcca:	2308      	movs	r3, #8
 800fccc:	425b      	negs	r3, r3
 800fcce:	697a      	ldr	r2, [r7, #20]
 800fcd0:	4413      	add	r3, r2
 800fcd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	685a      	ldr	r2, [r3, #4]
 800fcdc:	4b25      	ldr	r3, [pc, #148]	@ (800fd74 <vPortFree+0xbc>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4013      	ands	r3, r2
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d10b      	bne.n	800fcfe <vPortFree+0x46>
	__asm volatile
 800fce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcea:	f383 8811 	msr	BASEPRI, r3
 800fcee:	f3bf 8f6f 	isb	sy
 800fcf2:	f3bf 8f4f 	dsb	sy
 800fcf6:	60fb      	str	r3, [r7, #12]
}
 800fcf8:	bf00      	nop
 800fcfa:	bf00      	nop
 800fcfc:	e7fd      	b.n	800fcfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d00b      	beq.n	800fd1e <vPortFree+0x66>
	__asm volatile
 800fd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd0a:	f383 8811 	msr	BASEPRI, r3
 800fd0e:	f3bf 8f6f 	isb	sy
 800fd12:	f3bf 8f4f 	dsb	sy
 800fd16:	60bb      	str	r3, [r7, #8]
}
 800fd18:	bf00      	nop
 800fd1a:	bf00      	nop
 800fd1c:	e7fd      	b.n	800fd1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	685a      	ldr	r2, [r3, #4]
 800fd22:	4b14      	ldr	r3, [pc, #80]	@ (800fd74 <vPortFree+0xbc>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	4013      	ands	r3, r2
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d01e      	beq.n	800fd6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d11a      	bne.n	800fd6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	685a      	ldr	r2, [r3, #4]
 800fd38:	4b0e      	ldr	r3, [pc, #56]	@ (800fd74 <vPortFree+0xbc>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	43db      	mvns	r3, r3
 800fd3e:	401a      	ands	r2, r3
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fd44:	f7fe ffe6 	bl	800ed14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	4b0a      	ldr	r3, [pc, #40]	@ (800fd78 <vPortFree+0xc0>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4413      	add	r3, r2
 800fd52:	4a09      	ldr	r2, [pc, #36]	@ (800fd78 <vPortFree+0xc0>)
 800fd54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fd56:	6938      	ldr	r0, [r7, #16]
 800fd58:	f000 f874 	bl	800fe44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fd5c:	4b07      	ldr	r3, [pc, #28]	@ (800fd7c <vPortFree+0xc4>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	3301      	adds	r3, #1
 800fd62:	4a06      	ldr	r2, [pc, #24]	@ (800fd7c <vPortFree+0xc4>)
 800fd64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fd66:	f7fe ffe3 	bl	800ed30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fd6a:	bf00      	nop
 800fd6c:	3718      	adds	r7, #24
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	24004a2c 	.word	0x24004a2c
 800fd78:	24004a1c 	.word	0x24004a1c
 800fd7c:	24004a28 	.word	0x24004a28

0800fd80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fd80:	b480      	push	{r7}
 800fd82:	b085      	sub	sp, #20
 800fd84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fd86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800fd8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fd8c:	4b27      	ldr	r3, [pc, #156]	@ (800fe2c <prvHeapInit+0xac>)
 800fd8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f003 0307 	and.w	r3, r3, #7
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d00c      	beq.n	800fdb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	3307      	adds	r3, #7
 800fd9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f023 0307 	bic.w	r3, r3, #7
 800fda6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fda8:	68ba      	ldr	r2, [r7, #8]
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	1ad3      	subs	r3, r2, r3
 800fdae:	4a1f      	ldr	r2, [pc, #124]	@ (800fe2c <prvHeapInit+0xac>)
 800fdb0:	4413      	add	r3, r2
 800fdb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fdb8:	4a1d      	ldr	r2, [pc, #116]	@ (800fe30 <prvHeapInit+0xb0>)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fdbe:	4b1c      	ldr	r3, [pc, #112]	@ (800fe30 <prvHeapInit+0xb0>)
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	68ba      	ldr	r2, [r7, #8]
 800fdc8:	4413      	add	r3, r2
 800fdca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fdcc:	2208      	movs	r2, #8
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	1a9b      	subs	r3, r3, r2
 800fdd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f023 0307 	bic.w	r3, r3, #7
 800fdda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	4a15      	ldr	r2, [pc, #84]	@ (800fe34 <prvHeapInit+0xb4>)
 800fde0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fde2:	4b14      	ldr	r3, [pc, #80]	@ (800fe34 <prvHeapInit+0xb4>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2200      	movs	r2, #0
 800fde8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fdea:	4b12      	ldr	r3, [pc, #72]	@ (800fe34 <prvHeapInit+0xb4>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	68fa      	ldr	r2, [r7, #12]
 800fdfa:	1ad2      	subs	r2, r2, r3
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe00:	4b0c      	ldr	r3, [pc, #48]	@ (800fe34 <prvHeapInit+0xb4>)
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	4a0a      	ldr	r2, [pc, #40]	@ (800fe38 <prvHeapInit+0xb8>)
 800fe0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	4a09      	ldr	r2, [pc, #36]	@ (800fe3c <prvHeapInit+0xbc>)
 800fe16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe18:	4b09      	ldr	r3, [pc, #36]	@ (800fe40 <prvHeapInit+0xc0>)
 800fe1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fe1e:	601a      	str	r2, [r3, #0]
}
 800fe20:	bf00      	nop
 800fe22:	3714      	adds	r7, #20
 800fe24:	46bd      	mov	sp, r7
 800fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2a:	4770      	bx	lr
 800fe2c:	24000e10 	.word	0x24000e10
 800fe30:	24004a10 	.word	0x24004a10
 800fe34:	24004a18 	.word	0x24004a18
 800fe38:	24004a20 	.word	0x24004a20
 800fe3c:	24004a1c 	.word	0x24004a1c
 800fe40:	24004a2c 	.word	0x24004a2c

0800fe44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe44:	b480      	push	{r7}
 800fe46:	b085      	sub	sp, #20
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe4c:	4b28      	ldr	r3, [pc, #160]	@ (800fef0 <prvInsertBlockIntoFreeList+0xac>)
 800fe4e:	60fb      	str	r3, [r7, #12]
 800fe50:	e002      	b.n	800fe58 <prvInsertBlockIntoFreeList+0x14>
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	60fb      	str	r3, [r7, #12]
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	687a      	ldr	r2, [r7, #4]
 800fe5e:	429a      	cmp	r2, r3
 800fe60:	d8f7      	bhi.n	800fe52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	68ba      	ldr	r2, [r7, #8]
 800fe6c:	4413      	add	r3, r2
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d108      	bne.n	800fe86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	685a      	ldr	r2, [r3, #4]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	441a      	add	r2, r3
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	68ba      	ldr	r2, [r7, #8]
 800fe90:	441a      	add	r2, r3
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d118      	bne.n	800fecc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	681a      	ldr	r2, [r3, #0]
 800fe9e:	4b15      	ldr	r3, [pc, #84]	@ (800fef4 <prvInsertBlockIntoFreeList+0xb0>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d00d      	beq.n	800fec2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	685a      	ldr	r2, [r3, #4]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	441a      	add	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	681a      	ldr	r2, [r3, #0]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	601a      	str	r2, [r3, #0]
 800fec0:	e008      	b.n	800fed4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fec2:	4b0c      	ldr	r3, [pc, #48]	@ (800fef4 <prvInsertBlockIntoFreeList+0xb0>)
 800fec4:	681a      	ldr	r2, [r3, #0]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	601a      	str	r2, [r3, #0]
 800feca:	e003      	b.n	800fed4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681a      	ldr	r2, [r3, #0]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fed4:	68fa      	ldr	r2, [r7, #12]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d002      	beq.n	800fee2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	687a      	ldr	r2, [r7, #4]
 800fee0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fee2:	bf00      	nop
 800fee4:	3714      	adds	r7, #20
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr
 800feee:	bf00      	nop
 800fef0:	24004a10 	.word	0x24004a10
 800fef4:	24004a18 	.word	0x24004a18

0800fef8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fefc:	2200      	movs	r2, #0
 800fefe:	4913      	ldr	r1, [pc, #76]	@ (800ff4c <MX_USB_DEVICE_Init+0x54>)
 800ff00:	4813      	ldr	r0, [pc, #76]	@ (800ff50 <MX_USB_DEVICE_Init+0x58>)
 800ff02:	f7fc fffd 	bl	800cf00 <USBD_Init>
 800ff06:	4603      	mov	r3, r0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d001      	beq.n	800ff10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ff0c:	f7f1 f8e2 	bl	80010d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ff10:	4910      	ldr	r1, [pc, #64]	@ (800ff54 <MX_USB_DEVICE_Init+0x5c>)
 800ff12:	480f      	ldr	r0, [pc, #60]	@ (800ff50 <MX_USB_DEVICE_Init+0x58>)
 800ff14:	f7fd f824 	bl	800cf60 <USBD_RegisterClass>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d001      	beq.n	800ff22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ff1e:	f7f1 f8d9 	bl	80010d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ff22:	490d      	ldr	r1, [pc, #52]	@ (800ff58 <MX_USB_DEVICE_Init+0x60>)
 800ff24:	480a      	ldr	r0, [pc, #40]	@ (800ff50 <MX_USB_DEVICE_Init+0x58>)
 800ff26:	f7fc ff5b 	bl	800cde0 <USBD_CDC_RegisterInterface>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d001      	beq.n	800ff34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ff30:	f7f1 f8d0 	bl	80010d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ff34:	4806      	ldr	r0, [pc, #24]	@ (800ff50 <MX_USB_DEVICE_Init+0x58>)
 800ff36:	f7fd f849 	bl	800cfcc <USBD_Start>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d001      	beq.n	800ff44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ff40:	f7f1 f8c8 	bl	80010d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ff44:	f7f6 faa2 	bl	800648c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ff48:	bf00      	nop
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	240000b4 	.word	0x240000b4
 800ff50:	24004a30 	.word	0x24004a30
 800ff54:	2400001c 	.word	0x2400001c
 800ff58:	240000a0 	.word	0x240000a0

0800ff5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ff60:	2200      	movs	r2, #0
 800ff62:	4905      	ldr	r1, [pc, #20]	@ (800ff78 <CDC_Init_FS+0x1c>)
 800ff64:	4805      	ldr	r0, [pc, #20]	@ (800ff7c <CDC_Init_FS+0x20>)
 800ff66:	f7fc ff55 	bl	800ce14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ff6a:	4905      	ldr	r1, [pc, #20]	@ (800ff80 <CDC_Init_FS+0x24>)
 800ff6c:	4803      	ldr	r0, [pc, #12]	@ (800ff7c <CDC_Init_FS+0x20>)
 800ff6e:	f7fc ff73 	bl	800ce58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ff72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	2400550c 	.word	0x2400550c
 800ff7c:	24004a30 	.word	0x24004a30
 800ff80:	24004d0c 	.word	0x24004d0c

0800ff84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ff84:	b480      	push	{r7}
 800ff86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ff88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr

0800ff94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ff94:	b480      	push	{r7}
 800ff96:	b083      	sub	sp, #12
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	6039      	str	r1, [r7, #0]
 800ff9e:	71fb      	strb	r3, [r7, #7]
 800ffa0:	4613      	mov	r3, r2
 800ffa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ffa4:	79fb      	ldrb	r3, [r7, #7]
 800ffa6:	2b23      	cmp	r3, #35	@ 0x23
 800ffa8:	d84a      	bhi.n	8010040 <CDC_Control_FS+0xac>
 800ffaa:	a201      	add	r2, pc, #4	@ (adr r2, 800ffb0 <CDC_Control_FS+0x1c>)
 800ffac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb0:	08010041 	.word	0x08010041
 800ffb4:	08010041 	.word	0x08010041
 800ffb8:	08010041 	.word	0x08010041
 800ffbc:	08010041 	.word	0x08010041
 800ffc0:	08010041 	.word	0x08010041
 800ffc4:	08010041 	.word	0x08010041
 800ffc8:	08010041 	.word	0x08010041
 800ffcc:	08010041 	.word	0x08010041
 800ffd0:	08010041 	.word	0x08010041
 800ffd4:	08010041 	.word	0x08010041
 800ffd8:	08010041 	.word	0x08010041
 800ffdc:	08010041 	.word	0x08010041
 800ffe0:	08010041 	.word	0x08010041
 800ffe4:	08010041 	.word	0x08010041
 800ffe8:	08010041 	.word	0x08010041
 800ffec:	08010041 	.word	0x08010041
 800fff0:	08010041 	.word	0x08010041
 800fff4:	08010041 	.word	0x08010041
 800fff8:	08010041 	.word	0x08010041
 800fffc:	08010041 	.word	0x08010041
 8010000:	08010041 	.word	0x08010041
 8010004:	08010041 	.word	0x08010041
 8010008:	08010041 	.word	0x08010041
 801000c:	08010041 	.word	0x08010041
 8010010:	08010041 	.word	0x08010041
 8010014:	08010041 	.word	0x08010041
 8010018:	08010041 	.word	0x08010041
 801001c:	08010041 	.word	0x08010041
 8010020:	08010041 	.word	0x08010041
 8010024:	08010041 	.word	0x08010041
 8010028:	08010041 	.word	0x08010041
 801002c:	08010041 	.word	0x08010041
 8010030:	08010041 	.word	0x08010041
 8010034:	08010041 	.word	0x08010041
 8010038:	08010041 	.word	0x08010041
 801003c:	08010041 	.word	0x08010041
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010040:	bf00      	nop
  }

  return (USBD_OK);
 8010042:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010044:	4618      	mov	r0, r3
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801005a:	6879      	ldr	r1, [r7, #4]
 801005c:	4805      	ldr	r0, [pc, #20]	@ (8010074 <CDC_Receive_FS+0x24>)
 801005e:	f7fc fefb 	bl	800ce58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010062:	4804      	ldr	r0, [pc, #16]	@ (8010074 <CDC_Receive_FS+0x24>)
 8010064:	f7fc ff16 	bl	800ce94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010068:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801006a:	4618      	mov	r0, r3
 801006c:	3708      	adds	r7, #8
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}
 8010072:	bf00      	nop
 8010074:	24004a30 	.word	0x24004a30

08010078 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010078:	b480      	push	{r7}
 801007a:	b087      	sub	sp, #28
 801007c:	af00      	add	r7, sp, #0
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	4613      	mov	r3, r2
 8010084:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010086:	2300      	movs	r3, #0
 8010088:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801008a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801008e:	4618      	mov	r0, r3
 8010090:	371c      	adds	r7, #28
 8010092:	46bd      	mov	sp, r7
 8010094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010098:	4770      	bx	lr
	...

0801009c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801009c:	b480      	push	{r7}
 801009e:	b083      	sub	sp, #12
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	4603      	mov	r3, r0
 80100a4:	6039      	str	r1, [r7, #0]
 80100a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	2212      	movs	r2, #18
 80100ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80100ae:	4b03      	ldr	r3, [pc, #12]	@ (80100bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr
 80100bc:	240000d4 	.word	0x240000d4

080100c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	4603      	mov	r3, r0
 80100c8:	6039      	str	r1, [r7, #0]
 80100ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	2204      	movs	r2, #4
 80100d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80100d2:	4b03      	ldr	r3, [pc, #12]	@ (80100e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr
 80100e0:	240000e8 	.word	0x240000e8

080100e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	4603      	mov	r3, r0
 80100ec:	6039      	str	r1, [r7, #0]
 80100ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80100f0:	79fb      	ldrb	r3, [r7, #7]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d105      	bne.n	8010102 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80100f6:	683a      	ldr	r2, [r7, #0]
 80100f8:	4907      	ldr	r1, [pc, #28]	@ (8010118 <USBD_FS_ProductStrDescriptor+0x34>)
 80100fa:	4808      	ldr	r0, [pc, #32]	@ (801011c <USBD_FS_ProductStrDescriptor+0x38>)
 80100fc:	f7fe f940 	bl	800e380 <USBD_GetString>
 8010100:	e004      	b.n	801010c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010102:	683a      	ldr	r2, [r7, #0]
 8010104:	4904      	ldr	r1, [pc, #16]	@ (8010118 <USBD_FS_ProductStrDescriptor+0x34>)
 8010106:	4805      	ldr	r0, [pc, #20]	@ (801011c <USBD_FS_ProductStrDescriptor+0x38>)
 8010108:	f7fe f93a 	bl	800e380 <USBD_GetString>
  }
  return USBD_StrDesc;
 801010c:	4b02      	ldr	r3, [pc, #8]	@ (8010118 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801010e:	4618      	mov	r0, r3
 8010110:	3708      	adds	r7, #8
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	24005d0c 	.word	0x24005d0c
 801011c:	08011310 	.word	0x08011310

08010120 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	4603      	mov	r3, r0
 8010128:	6039      	str	r1, [r7, #0]
 801012a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801012c:	683a      	ldr	r2, [r7, #0]
 801012e:	4904      	ldr	r1, [pc, #16]	@ (8010140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010130:	4804      	ldr	r0, [pc, #16]	@ (8010144 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010132:	f7fe f925 	bl	800e380 <USBD_GetString>
  return USBD_StrDesc;
 8010136:	4b02      	ldr	r3, [pc, #8]	@ (8010140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010138:	4618      	mov	r0, r3
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}
 8010140:	24005d0c 	.word	0x24005d0c
 8010144:	08011328 	.word	0x08011328

08010148 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	4603      	mov	r3, r0
 8010150:	6039      	str	r1, [r7, #0]
 8010152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	221a      	movs	r2, #26
 8010158:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801015a:	f000 f843 	bl	80101e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801015e:	4b02      	ldr	r3, [pc, #8]	@ (8010168 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010160:	4618      	mov	r0, r3
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}
 8010168:	240000ec 	.word	0x240000ec

0801016c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	af00      	add	r7, sp, #0
 8010172:	4603      	mov	r3, r0
 8010174:	6039      	str	r1, [r7, #0]
 8010176:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d105      	bne.n	801018a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801017e:	683a      	ldr	r2, [r7, #0]
 8010180:	4907      	ldr	r1, [pc, #28]	@ (80101a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010182:	4808      	ldr	r0, [pc, #32]	@ (80101a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010184:	f7fe f8fc 	bl	800e380 <USBD_GetString>
 8010188:	e004      	b.n	8010194 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801018a:	683a      	ldr	r2, [r7, #0]
 801018c:	4904      	ldr	r1, [pc, #16]	@ (80101a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801018e:	4805      	ldr	r0, [pc, #20]	@ (80101a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010190:	f7fe f8f6 	bl	800e380 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010194:	4b02      	ldr	r3, [pc, #8]	@ (80101a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010196:	4618      	mov	r0, r3
 8010198:	3708      	adds	r7, #8
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	24005d0c 	.word	0x24005d0c
 80101a4:	0801133c 	.word	0x0801133c

080101a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	4603      	mov	r3, r0
 80101b0:	6039      	str	r1, [r7, #0]
 80101b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80101b4:	79fb      	ldrb	r3, [r7, #7]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d105      	bne.n	80101c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101ba:	683a      	ldr	r2, [r7, #0]
 80101bc:	4907      	ldr	r1, [pc, #28]	@ (80101dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101be:	4808      	ldr	r0, [pc, #32]	@ (80101e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101c0:	f7fe f8de 	bl	800e380 <USBD_GetString>
 80101c4:	e004      	b.n	80101d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101c6:	683a      	ldr	r2, [r7, #0]
 80101c8:	4904      	ldr	r1, [pc, #16]	@ (80101dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101ca:	4805      	ldr	r0, [pc, #20]	@ (80101e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101cc:	f7fe f8d8 	bl	800e380 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101d0:	4b02      	ldr	r3, [pc, #8]	@ (80101dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3708      	adds	r7, #8
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	bf00      	nop
 80101dc:	24005d0c 	.word	0x24005d0c
 80101e0:	08011348 	.word	0x08011348

080101e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80101ea:	4b0f      	ldr	r3, [pc, #60]	@ (8010228 <Get_SerialNum+0x44>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80101f0:	4b0e      	ldr	r3, [pc, #56]	@ (801022c <Get_SerialNum+0x48>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80101f6:	4b0e      	ldr	r3, [pc, #56]	@ (8010230 <Get_SerialNum+0x4c>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4413      	add	r3, r2
 8010202:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d009      	beq.n	801021e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801020a:	2208      	movs	r2, #8
 801020c:	4909      	ldr	r1, [pc, #36]	@ (8010234 <Get_SerialNum+0x50>)
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f000 f814 	bl	801023c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010214:	2204      	movs	r2, #4
 8010216:	4908      	ldr	r1, [pc, #32]	@ (8010238 <Get_SerialNum+0x54>)
 8010218:	68b8      	ldr	r0, [r7, #8]
 801021a:	f000 f80f 	bl	801023c <IntToUnicode>
  }
}
 801021e:	bf00      	nop
 8010220:	3710      	adds	r7, #16
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	1ff1e800 	.word	0x1ff1e800
 801022c:	1ff1e804 	.word	0x1ff1e804
 8010230:	1ff1e808 	.word	0x1ff1e808
 8010234:	240000ee 	.word	0x240000ee
 8010238:	240000fe 	.word	0x240000fe

0801023c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801023c:	b480      	push	{r7}
 801023e:	b087      	sub	sp, #28
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	4613      	mov	r3, r2
 8010248:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801024a:	2300      	movs	r3, #0
 801024c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801024e:	2300      	movs	r3, #0
 8010250:	75fb      	strb	r3, [r7, #23]
 8010252:	e027      	b.n	80102a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	0f1b      	lsrs	r3, r3, #28
 8010258:	2b09      	cmp	r3, #9
 801025a:	d80b      	bhi.n	8010274 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	0f1b      	lsrs	r3, r3, #28
 8010260:	b2da      	uxtb	r2, r3
 8010262:	7dfb      	ldrb	r3, [r7, #23]
 8010264:	005b      	lsls	r3, r3, #1
 8010266:	4619      	mov	r1, r3
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	440b      	add	r3, r1
 801026c:	3230      	adds	r2, #48	@ 0x30
 801026e:	b2d2      	uxtb	r2, r2
 8010270:	701a      	strb	r2, [r3, #0]
 8010272:	e00a      	b.n	801028a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	0f1b      	lsrs	r3, r3, #28
 8010278:	b2da      	uxtb	r2, r3
 801027a:	7dfb      	ldrb	r3, [r7, #23]
 801027c:	005b      	lsls	r3, r3, #1
 801027e:	4619      	mov	r1, r3
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	440b      	add	r3, r1
 8010284:	3237      	adds	r2, #55	@ 0x37
 8010286:	b2d2      	uxtb	r2, r2
 8010288:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	011b      	lsls	r3, r3, #4
 801028e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010290:	7dfb      	ldrb	r3, [r7, #23]
 8010292:	005b      	lsls	r3, r3, #1
 8010294:	3301      	adds	r3, #1
 8010296:	68ba      	ldr	r2, [r7, #8]
 8010298:	4413      	add	r3, r2
 801029a:	2200      	movs	r2, #0
 801029c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801029e:	7dfb      	ldrb	r3, [r7, #23]
 80102a0:	3301      	adds	r3, #1
 80102a2:	75fb      	strb	r3, [r7, #23]
 80102a4:	7dfa      	ldrb	r2, [r7, #23]
 80102a6:	79fb      	ldrb	r3, [r7, #7]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d3d3      	bcc.n	8010254 <IntToUnicode+0x18>
  }
}
 80102ac:	bf00      	nop
 80102ae:	bf00      	nop
 80102b0:	371c      	adds	r7, #28
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr
	...

080102bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b0ba      	sub	sp, #232	@ 0xe8
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80102c8:	2200      	movs	r2, #0
 80102ca:	601a      	str	r2, [r3, #0]
 80102cc:	605a      	str	r2, [r3, #4]
 80102ce:	609a      	str	r2, [r3, #8]
 80102d0:	60da      	str	r2, [r3, #12]
 80102d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80102d4:	f107 0310 	add.w	r3, r7, #16
 80102d8:	22c0      	movs	r2, #192	@ 0xc0
 80102da:	2100      	movs	r1, #0
 80102dc:	4618      	mov	r0, r3
 80102de:	f000 fb25 	bl	801092c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	4a2c      	ldr	r2, [pc, #176]	@ (8010398 <HAL_PCD_MspInit+0xdc>)
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d151      	bne.n	8010390 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80102ec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80102f0:	f04f 0300 	mov.w	r3, #0
 80102f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80102f8:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80102fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010300:	f107 0310 	add.w	r3, r7, #16
 8010304:	4618      	mov	r0, r3
 8010306:	f7f7 f8f9 	bl	80074fc <HAL_RCCEx_PeriphCLKConfig>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	d001      	beq.n	8010314 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8010310:	f7f0 fee0 	bl	80010d4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010314:	f7f6 f8ba 	bl	800648c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010318:	4b20      	ldr	r3, [pc, #128]	@ (801039c <HAL_PCD_MspInit+0xe0>)
 801031a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801031e:	4a1f      	ldr	r2, [pc, #124]	@ (801039c <HAL_PCD_MspInit+0xe0>)
 8010320:	f043 0301 	orr.w	r3, r3, #1
 8010324:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010328:	4b1c      	ldr	r3, [pc, #112]	@ (801039c <HAL_PCD_MspInit+0xe0>)
 801032a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801032e:	f003 0301 	and.w	r3, r3, #1
 8010332:	60fb      	str	r3, [r7, #12]
 8010334:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8010336:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801033a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801033e:	2302      	movs	r3, #2
 8010340:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010344:	2300      	movs	r3, #0
 8010346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801034a:	2300      	movs	r3, #0
 801034c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010350:	230a      	movs	r3, #10
 8010352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010356:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801035a:	4619      	mov	r1, r3
 801035c:	4810      	ldr	r0, [pc, #64]	@ (80103a0 <HAL_PCD_MspInit+0xe4>)
 801035e:	f7f4 fbf1 	bl	8004b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010362:	4b0e      	ldr	r3, [pc, #56]	@ (801039c <HAL_PCD_MspInit+0xe0>)
 8010364:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010368:	4a0c      	ldr	r2, [pc, #48]	@ (801039c <HAL_PCD_MspInit+0xe0>)
 801036a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801036e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010372:	4b0a      	ldr	r3, [pc, #40]	@ (801039c <HAL_PCD_MspInit+0xe0>)
 8010374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801037c:	60bb      	str	r3, [r7, #8]
 801037e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010380:	2200      	movs	r2, #0
 8010382:	2105      	movs	r1, #5
 8010384:	2065      	movs	r0, #101	@ 0x65
 8010386:	f7f1 ff3b 	bl	8002200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801038a:	2065      	movs	r0, #101	@ 0x65
 801038c:	f7f1 ff52 	bl	8002234 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010390:	bf00      	nop
 8010392:	37e8      	adds	r7, #232	@ 0xe8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	40080000 	.word	0x40080000
 801039c:	58024400 	.word	0x58024400
 80103a0:	58020000 	.word	0x58020000

080103a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80103b8:	4619      	mov	r1, r3
 80103ba:	4610      	mov	r0, r2
 80103bc:	f7fc fe53 	bl	800d066 <USBD_LL_SetupStage>
}
 80103c0:	bf00      	nop
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	460b      	mov	r3, r1
 80103d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80103da:	78fa      	ldrb	r2, [r7, #3]
 80103dc:	6879      	ldr	r1, [r7, #4]
 80103de:	4613      	mov	r3, r2
 80103e0:	00db      	lsls	r3, r3, #3
 80103e2:	4413      	add	r3, r2
 80103e4:	009b      	lsls	r3, r3, #2
 80103e6:	440b      	add	r3, r1
 80103e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80103ec:	681a      	ldr	r2, [r3, #0]
 80103ee:	78fb      	ldrb	r3, [r7, #3]
 80103f0:	4619      	mov	r1, r3
 80103f2:	f7fc fe8d 	bl	800d110 <USBD_LL_DataOutStage>
}
 80103f6:	bf00      	nop
 80103f8:	3708      	adds	r7, #8
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}

080103fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103fe:	b580      	push	{r7, lr}
 8010400:	b082      	sub	sp, #8
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
 8010406:	460b      	mov	r3, r1
 8010408:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010410:	78fa      	ldrb	r2, [r7, #3]
 8010412:	6879      	ldr	r1, [r7, #4]
 8010414:	4613      	mov	r3, r2
 8010416:	00db      	lsls	r3, r3, #3
 8010418:	4413      	add	r3, r2
 801041a:	009b      	lsls	r3, r3, #2
 801041c:	440b      	add	r3, r1
 801041e:	3320      	adds	r3, #32
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	78fb      	ldrb	r3, [r7, #3]
 8010424:	4619      	mov	r1, r3
 8010426:	f7fc ff26 	bl	800d276 <USBD_LL_DataInStage>
}
 801042a:	bf00      	nop
 801042c:	3708      	adds	r7, #8
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}

08010432 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010432:	b580      	push	{r7, lr}
 8010434:	b082      	sub	sp, #8
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010440:	4618      	mov	r0, r3
 8010442:	f7fd f860 	bl	800d506 <USBD_LL_SOF>
}
 8010446:	bf00      	nop
 8010448:	3708      	adds	r7, #8
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801044e:	b580      	push	{r7, lr}
 8010450:	b084      	sub	sp, #16
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010456:	2301      	movs	r3, #1
 8010458:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	79db      	ldrb	r3, [r3, #7]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d102      	bne.n	8010468 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010462:	2300      	movs	r3, #0
 8010464:	73fb      	strb	r3, [r7, #15]
 8010466:	e008      	b.n	801047a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	79db      	ldrb	r3, [r3, #7]
 801046c:	2b02      	cmp	r3, #2
 801046e:	d102      	bne.n	8010476 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010470:	2301      	movs	r3, #1
 8010472:	73fb      	strb	r3, [r7, #15]
 8010474:	e001      	b.n	801047a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010476:	f7f0 fe2d 	bl	80010d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010480:	7bfa      	ldrb	r2, [r7, #15]
 8010482:	4611      	mov	r1, r2
 8010484:	4618      	mov	r0, r3
 8010486:	f7fc fffa 	bl	800d47e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010490:	4618      	mov	r0, r3
 8010492:	f7fc ffa2 	bl	800d3da <USBD_LL_Reset>
}
 8010496:	bf00      	nop
 8010498:	3710      	adds	r7, #16
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
	...

080104a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7fc fff5 	bl	800d49e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	687a      	ldr	r2, [r7, #4]
 80104c0:	6812      	ldr	r2, [r2, #0]
 80104c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80104c6:	f043 0301 	orr.w	r3, r3, #1
 80104ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	7adb      	ldrb	r3, [r3, #11]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d005      	beq.n	80104e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80104d4:	4b04      	ldr	r3, [pc, #16]	@ (80104e8 <HAL_PCD_SuspendCallback+0x48>)
 80104d6:	691b      	ldr	r3, [r3, #16]
 80104d8:	4a03      	ldr	r2, [pc, #12]	@ (80104e8 <HAL_PCD_SuspendCallback+0x48>)
 80104da:	f043 0306 	orr.w	r3, r3, #6
 80104de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80104e0:	bf00      	nop
 80104e2:	3708      	adds	r7, #8
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	e000ed00 	.word	0xe000ed00

080104ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fc ffeb 	bl	800d4d6 <USBD_LL_Resume>
}
 8010500:	bf00      	nop
 8010502:	3708      	adds	r7, #8
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	460b      	mov	r3, r1
 8010512:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801051a:	78fa      	ldrb	r2, [r7, #3]
 801051c:	4611      	mov	r1, r2
 801051e:	4618      	mov	r0, r3
 8010520:	f7fd f843 	bl	800d5aa <USBD_LL_IsoOUTIncomplete>
}
 8010524:	bf00      	nop
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	460b      	mov	r3, r1
 8010536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801053e:	78fa      	ldrb	r2, [r7, #3]
 8010540:	4611      	mov	r1, r2
 8010542:	4618      	mov	r0, r3
 8010544:	f7fc ffff 	bl	800d546 <USBD_LL_IsoINIncomplete>
}
 8010548:	bf00      	nop
 801054a:	3708      	adds	r7, #8
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801055e:	4618      	mov	r0, r3
 8010560:	f7fd f855 	bl	800d60e <USBD_LL_DevConnected>
}
 8010564:	bf00      	nop
 8010566:	3708      	adds	r7, #8
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}

0801056c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b082      	sub	sp, #8
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801057a:	4618      	mov	r0, r3
 801057c:	f7fd f852 	bl	800d624 <USBD_LL_DevDisconnected>
}
 8010580:	bf00      	nop
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}

08010588 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d13e      	bne.n	8010616 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010598:	4a21      	ldr	r2, [pc, #132]	@ (8010620 <USBD_LL_Init+0x98>)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	4a1f      	ldr	r2, [pc, #124]	@ (8010620 <USBD_LL_Init+0x98>)
 80105a4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80105a8:	4b1d      	ldr	r3, [pc, #116]	@ (8010620 <USBD_LL_Init+0x98>)
 80105aa:	4a1e      	ldr	r2, [pc, #120]	@ (8010624 <USBD_LL_Init+0x9c>)
 80105ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80105ae:	4b1c      	ldr	r3, [pc, #112]	@ (8010620 <USBD_LL_Init+0x98>)
 80105b0:	2209      	movs	r2, #9
 80105b2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80105b4:	4b1a      	ldr	r3, [pc, #104]	@ (8010620 <USBD_LL_Init+0x98>)
 80105b6:	2202      	movs	r2, #2
 80105b8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80105ba:	4b19      	ldr	r3, [pc, #100]	@ (8010620 <USBD_LL_Init+0x98>)
 80105bc:	2200      	movs	r2, #0
 80105be:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80105c0:	4b17      	ldr	r3, [pc, #92]	@ (8010620 <USBD_LL_Init+0x98>)
 80105c2:	2202      	movs	r2, #2
 80105c4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80105c6:	4b16      	ldr	r3, [pc, #88]	@ (8010620 <USBD_LL_Init+0x98>)
 80105c8:	2200      	movs	r2, #0
 80105ca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80105cc:	4b14      	ldr	r3, [pc, #80]	@ (8010620 <USBD_LL_Init+0x98>)
 80105ce:	2200      	movs	r2, #0
 80105d0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80105d2:	4b13      	ldr	r3, [pc, #76]	@ (8010620 <USBD_LL_Init+0x98>)
 80105d4:	2200      	movs	r2, #0
 80105d6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80105d8:	4b11      	ldr	r3, [pc, #68]	@ (8010620 <USBD_LL_Init+0x98>)
 80105da:	2200      	movs	r2, #0
 80105dc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80105de:	4b10      	ldr	r3, [pc, #64]	@ (8010620 <USBD_LL_Init+0x98>)
 80105e0:	2200      	movs	r2, #0
 80105e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80105e4:	4b0e      	ldr	r3, [pc, #56]	@ (8010620 <USBD_LL_Init+0x98>)
 80105e6:	2200      	movs	r2, #0
 80105e8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80105ea:	480d      	ldr	r0, [pc, #52]	@ (8010620 <USBD_LL_Init+0x98>)
 80105ec:	f7f4 fc73 	bl	8004ed6 <HAL_PCD_Init>
 80105f0:	4603      	mov	r3, r0
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d001      	beq.n	80105fa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80105f6:	f7f0 fd6d 	bl	80010d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80105fa:	2180      	movs	r1, #128	@ 0x80
 80105fc:	4808      	ldr	r0, [pc, #32]	@ (8010620 <USBD_LL_Init+0x98>)
 80105fe:	f7f5 feca 	bl	8006396 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010602:	2240      	movs	r2, #64	@ 0x40
 8010604:	2100      	movs	r1, #0
 8010606:	4806      	ldr	r0, [pc, #24]	@ (8010620 <USBD_LL_Init+0x98>)
 8010608:	f7f5 fe7e 	bl	8006308 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801060c:	2280      	movs	r2, #128	@ 0x80
 801060e:	2101      	movs	r1, #1
 8010610:	4803      	ldr	r0, [pc, #12]	@ (8010620 <USBD_LL_Init+0x98>)
 8010612:	f7f5 fe79 	bl	8006308 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8010616:	2300      	movs	r3, #0
}
 8010618:	4618      	mov	r0, r3
 801061a:	3708      	adds	r7, #8
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}
 8010620:	24005f0c 	.word	0x24005f0c
 8010624:	40080000 	.word	0x40080000

08010628 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010630:	2300      	movs	r3, #0
 8010632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010634:	2300      	movs	r3, #0
 8010636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801063e:	4618      	mov	r0, r3
 8010640:	f7f4 fd55 	bl	80050ee <HAL_PCD_Start>
 8010644:	4603      	mov	r3, r0
 8010646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010648:	7bfb      	ldrb	r3, [r7, #15]
 801064a:	4618      	mov	r0, r3
 801064c:	f000 f942 	bl	80108d4 <USBD_Get_USB_Status>
 8010650:	4603      	mov	r3, r0
 8010652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010654:	7bbb      	ldrb	r3, [r7, #14]
}
 8010656:	4618      	mov	r0, r3
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}

0801065e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801065e:	b580      	push	{r7, lr}
 8010660:	b084      	sub	sp, #16
 8010662:	af00      	add	r7, sp, #0
 8010664:	6078      	str	r0, [r7, #4]
 8010666:	4608      	mov	r0, r1
 8010668:	4611      	mov	r1, r2
 801066a:	461a      	mov	r2, r3
 801066c:	4603      	mov	r3, r0
 801066e:	70fb      	strb	r3, [r7, #3]
 8010670:	460b      	mov	r3, r1
 8010672:	70bb      	strb	r3, [r7, #2]
 8010674:	4613      	mov	r3, r2
 8010676:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010678:	2300      	movs	r3, #0
 801067a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801067c:	2300      	movs	r3, #0
 801067e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010686:	78bb      	ldrb	r3, [r7, #2]
 8010688:	883a      	ldrh	r2, [r7, #0]
 801068a:	78f9      	ldrb	r1, [r7, #3]
 801068c:	f7f5 fa56 	bl	8005b3c <HAL_PCD_EP_Open>
 8010690:	4603      	mov	r3, r0
 8010692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010694:	7bfb      	ldrb	r3, [r7, #15]
 8010696:	4618      	mov	r0, r3
 8010698:	f000 f91c 	bl	80108d4 <USBD_Get_USB_Status>
 801069c:	4603      	mov	r3, r0
 801069e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3710      	adds	r7, #16
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}

080106aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106aa:	b580      	push	{r7, lr}
 80106ac:	b084      	sub	sp, #16
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
 80106b2:	460b      	mov	r3, r1
 80106b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106b6:	2300      	movs	r3, #0
 80106b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106ba:	2300      	movs	r3, #0
 80106bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80106c4:	78fa      	ldrb	r2, [r7, #3]
 80106c6:	4611      	mov	r1, r2
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7f5 faa1 	bl	8005c10 <HAL_PCD_EP_Close>
 80106ce:	4603      	mov	r3, r0
 80106d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106d2:	7bfb      	ldrb	r3, [r7, #15]
 80106d4:	4618      	mov	r0, r3
 80106d6:	f000 f8fd 	bl	80108d4 <USBD_Get_USB_Status>
 80106da:	4603      	mov	r3, r0
 80106dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106de:	7bbb      	ldrb	r3, [r7, #14]
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	3710      	adds	r7, #16
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}

080106e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b084      	sub	sp, #16
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	460b      	mov	r3, r1
 80106f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106f4:	2300      	movs	r3, #0
 80106f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106f8:	2300      	movs	r3, #0
 80106fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010702:	78fa      	ldrb	r2, [r7, #3]
 8010704:	4611      	mov	r1, r2
 8010706:	4618      	mov	r0, r3
 8010708:	f7f5 fb59 	bl	8005dbe <HAL_PCD_EP_SetStall>
 801070c:	4603      	mov	r3, r0
 801070e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010710:	7bfb      	ldrb	r3, [r7, #15]
 8010712:	4618      	mov	r0, r3
 8010714:	f000 f8de 	bl	80108d4 <USBD_Get_USB_Status>
 8010718:	4603      	mov	r3, r0
 801071a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801071c:	7bbb      	ldrb	r3, [r7, #14]
}
 801071e:	4618      	mov	r0, r3
 8010720:	3710      	adds	r7, #16
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010726:	b580      	push	{r7, lr}
 8010728:	b084      	sub	sp, #16
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	460b      	mov	r3, r1
 8010730:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010732:	2300      	movs	r3, #0
 8010734:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010736:	2300      	movs	r3, #0
 8010738:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010740:	78fa      	ldrb	r2, [r7, #3]
 8010742:	4611      	mov	r1, r2
 8010744:	4618      	mov	r0, r3
 8010746:	f7f5 fb9d 	bl	8005e84 <HAL_PCD_EP_ClrStall>
 801074a:	4603      	mov	r3, r0
 801074c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801074e:	7bfb      	ldrb	r3, [r7, #15]
 8010750:	4618      	mov	r0, r3
 8010752:	f000 f8bf 	bl	80108d4 <USBD_Get_USB_Status>
 8010756:	4603      	mov	r3, r0
 8010758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801075a:	7bbb      	ldrb	r3, [r7, #14]
}
 801075c:	4618      	mov	r0, r3
 801075e:	3710      	adds	r7, #16
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010764:	b480      	push	{r7}
 8010766:	b085      	sub	sp, #20
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	460b      	mov	r3, r1
 801076e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010776:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801077c:	2b00      	cmp	r3, #0
 801077e:	da0b      	bge.n	8010798 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010780:	78fb      	ldrb	r3, [r7, #3]
 8010782:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010786:	68f9      	ldr	r1, [r7, #12]
 8010788:	4613      	mov	r3, r2
 801078a:	00db      	lsls	r3, r3, #3
 801078c:	4413      	add	r3, r2
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	440b      	add	r3, r1
 8010792:	3316      	adds	r3, #22
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	e00b      	b.n	80107b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010798:	78fb      	ldrb	r3, [r7, #3]
 801079a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801079e:	68f9      	ldr	r1, [r7, #12]
 80107a0:	4613      	mov	r3, r2
 80107a2:	00db      	lsls	r3, r3, #3
 80107a4:	4413      	add	r3, r2
 80107a6:	009b      	lsls	r3, r3, #2
 80107a8:	440b      	add	r3, r1
 80107aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80107ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3714      	adds	r7, #20
 80107b4:	46bd      	mov	sp, r7
 80107b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ba:	4770      	bx	lr

080107bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	460b      	mov	r3, r1
 80107c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107c8:	2300      	movs	r3, #0
 80107ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107cc:	2300      	movs	r3, #0
 80107ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80107d6:	78fa      	ldrb	r2, [r7, #3]
 80107d8:	4611      	mov	r1, r2
 80107da:	4618      	mov	r0, r3
 80107dc:	f7f5 f98a 	bl	8005af4 <HAL_PCD_SetAddress>
 80107e0:	4603      	mov	r3, r0
 80107e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107e4:	7bfb      	ldrb	r3, [r7, #15]
 80107e6:	4618      	mov	r0, r3
 80107e8:	f000 f874 	bl	80108d4 <USBD_Get_USB_Status>
 80107ec:	4603      	mov	r3, r0
 80107ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3710      	adds	r7, #16
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}

080107fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b086      	sub	sp, #24
 80107fe:	af00      	add	r7, sp, #0
 8010800:	60f8      	str	r0, [r7, #12]
 8010802:	607a      	str	r2, [r7, #4]
 8010804:	603b      	str	r3, [r7, #0]
 8010806:	460b      	mov	r3, r1
 8010808:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801080a:	2300      	movs	r3, #0
 801080c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801080e:	2300      	movs	r3, #0
 8010810:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010818:	7af9      	ldrb	r1, [r7, #11]
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	687a      	ldr	r2, [r7, #4]
 801081e:	f7f5 fa94 	bl	8005d4a <HAL_PCD_EP_Transmit>
 8010822:	4603      	mov	r3, r0
 8010824:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010826:	7dfb      	ldrb	r3, [r7, #23]
 8010828:	4618      	mov	r0, r3
 801082a:	f000 f853 	bl	80108d4 <USBD_Get_USB_Status>
 801082e:	4603      	mov	r3, r0
 8010830:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010832:	7dbb      	ldrb	r3, [r7, #22]
}
 8010834:	4618      	mov	r0, r3
 8010836:	3718      	adds	r7, #24
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b086      	sub	sp, #24
 8010840:	af00      	add	r7, sp, #0
 8010842:	60f8      	str	r0, [r7, #12]
 8010844:	607a      	str	r2, [r7, #4]
 8010846:	603b      	str	r3, [r7, #0]
 8010848:	460b      	mov	r3, r1
 801084a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801084c:	2300      	movs	r3, #0
 801084e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010850:	2300      	movs	r3, #0
 8010852:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801085a:	7af9      	ldrb	r1, [r7, #11]
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	f7f5 fa20 	bl	8005ca4 <HAL_PCD_EP_Receive>
 8010864:	4603      	mov	r3, r0
 8010866:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010868:	7dfb      	ldrb	r3, [r7, #23]
 801086a:	4618      	mov	r0, r3
 801086c:	f000 f832 	bl	80108d4 <USBD_Get_USB_Status>
 8010870:	4603      	mov	r3, r0
 8010872:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010874:	7dbb      	ldrb	r3, [r7, #22]
}
 8010876:	4618      	mov	r0, r3
 8010878:	3718      	adds	r7, #24
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}

0801087e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801087e:	b580      	push	{r7, lr}
 8010880:	b082      	sub	sp, #8
 8010882:	af00      	add	r7, sp, #0
 8010884:	6078      	str	r0, [r7, #4]
 8010886:	460b      	mov	r3, r1
 8010888:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010890:	78fa      	ldrb	r2, [r7, #3]
 8010892:	4611      	mov	r1, r2
 8010894:	4618      	mov	r0, r3
 8010896:	f7f5 fa40 	bl	8005d1a <HAL_PCD_EP_GetRxCount>
 801089a:	4603      	mov	r3, r0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3708      	adds	r7, #8
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80108ac:	4b03      	ldr	r3, [pc, #12]	@ (80108bc <USBD_static_malloc+0x18>)
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	370c      	adds	r7, #12
 80108b2:	46bd      	mov	sp, r7
 80108b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop
 80108bc:	240063f0 	.word	0x240063f0

080108c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b083      	sub	sp, #12
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80108c8:	bf00      	nop
 80108ca:	370c      	adds	r7, #12
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr

080108d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80108d4:	b480      	push	{r7}
 80108d6:	b085      	sub	sp, #20
 80108d8:	af00      	add	r7, sp, #0
 80108da:	4603      	mov	r3, r0
 80108dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108de:	2300      	movs	r3, #0
 80108e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80108e2:	79fb      	ldrb	r3, [r7, #7]
 80108e4:	2b03      	cmp	r3, #3
 80108e6:	d817      	bhi.n	8010918 <USBD_Get_USB_Status+0x44>
 80108e8:	a201      	add	r2, pc, #4	@ (adr r2, 80108f0 <USBD_Get_USB_Status+0x1c>)
 80108ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ee:	bf00      	nop
 80108f0:	08010901 	.word	0x08010901
 80108f4:	08010907 	.word	0x08010907
 80108f8:	0801090d 	.word	0x0801090d
 80108fc:	08010913 	.word	0x08010913
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010900:	2300      	movs	r3, #0
 8010902:	73fb      	strb	r3, [r7, #15]
    break;
 8010904:	e00b      	b.n	801091e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010906:	2303      	movs	r3, #3
 8010908:	73fb      	strb	r3, [r7, #15]
    break;
 801090a:	e008      	b.n	801091e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801090c:	2301      	movs	r3, #1
 801090e:	73fb      	strb	r3, [r7, #15]
    break;
 8010910:	e005      	b.n	801091e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010912:	2303      	movs	r3, #3
 8010914:	73fb      	strb	r3, [r7, #15]
    break;
 8010916:	e002      	b.n	801091e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010918:	2303      	movs	r3, #3
 801091a:	73fb      	strb	r3, [r7, #15]
    break;
 801091c:	bf00      	nop
  }
  return usb_status;
 801091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010920:	4618      	mov	r0, r3
 8010922:	3714      	adds	r7, #20
 8010924:	46bd      	mov	sp, r7
 8010926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092a:	4770      	bx	lr

0801092c <memset>:
 801092c:	4402      	add	r2, r0
 801092e:	4603      	mov	r3, r0
 8010930:	4293      	cmp	r3, r2
 8010932:	d100      	bne.n	8010936 <memset+0xa>
 8010934:	4770      	bx	lr
 8010936:	f803 1b01 	strb.w	r1, [r3], #1
 801093a:	e7f9      	b.n	8010930 <memset+0x4>

0801093c <_reclaim_reent>:
 801093c:	4b2d      	ldr	r3, [pc, #180]	@ (80109f4 <_reclaim_reent+0xb8>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4283      	cmp	r3, r0
 8010942:	b570      	push	{r4, r5, r6, lr}
 8010944:	4604      	mov	r4, r0
 8010946:	d053      	beq.n	80109f0 <_reclaim_reent+0xb4>
 8010948:	69c3      	ldr	r3, [r0, #28]
 801094a:	b31b      	cbz	r3, 8010994 <_reclaim_reent+0x58>
 801094c:	68db      	ldr	r3, [r3, #12]
 801094e:	b163      	cbz	r3, 801096a <_reclaim_reent+0x2e>
 8010950:	2500      	movs	r5, #0
 8010952:	69e3      	ldr	r3, [r4, #28]
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	5959      	ldr	r1, [r3, r5]
 8010958:	b9b1      	cbnz	r1, 8010988 <_reclaim_reent+0x4c>
 801095a:	3504      	adds	r5, #4
 801095c:	2d80      	cmp	r5, #128	@ 0x80
 801095e:	d1f8      	bne.n	8010952 <_reclaim_reent+0x16>
 8010960:	69e3      	ldr	r3, [r4, #28]
 8010962:	4620      	mov	r0, r4
 8010964:	68d9      	ldr	r1, [r3, #12]
 8010966:	f000 f873 	bl	8010a50 <_free_r>
 801096a:	69e3      	ldr	r3, [r4, #28]
 801096c:	6819      	ldr	r1, [r3, #0]
 801096e:	b111      	cbz	r1, 8010976 <_reclaim_reent+0x3a>
 8010970:	4620      	mov	r0, r4
 8010972:	f000 f86d 	bl	8010a50 <_free_r>
 8010976:	69e3      	ldr	r3, [r4, #28]
 8010978:	689d      	ldr	r5, [r3, #8]
 801097a:	b15d      	cbz	r5, 8010994 <_reclaim_reent+0x58>
 801097c:	4629      	mov	r1, r5
 801097e:	4620      	mov	r0, r4
 8010980:	682d      	ldr	r5, [r5, #0]
 8010982:	f000 f865 	bl	8010a50 <_free_r>
 8010986:	e7f8      	b.n	801097a <_reclaim_reent+0x3e>
 8010988:	680e      	ldr	r6, [r1, #0]
 801098a:	4620      	mov	r0, r4
 801098c:	f000 f860 	bl	8010a50 <_free_r>
 8010990:	4631      	mov	r1, r6
 8010992:	e7e1      	b.n	8010958 <_reclaim_reent+0x1c>
 8010994:	6961      	ldr	r1, [r4, #20]
 8010996:	b111      	cbz	r1, 801099e <_reclaim_reent+0x62>
 8010998:	4620      	mov	r0, r4
 801099a:	f000 f859 	bl	8010a50 <_free_r>
 801099e:	69e1      	ldr	r1, [r4, #28]
 80109a0:	b111      	cbz	r1, 80109a8 <_reclaim_reent+0x6c>
 80109a2:	4620      	mov	r0, r4
 80109a4:	f000 f854 	bl	8010a50 <_free_r>
 80109a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80109aa:	b111      	cbz	r1, 80109b2 <_reclaim_reent+0x76>
 80109ac:	4620      	mov	r0, r4
 80109ae:	f000 f84f 	bl	8010a50 <_free_r>
 80109b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109b4:	b111      	cbz	r1, 80109bc <_reclaim_reent+0x80>
 80109b6:	4620      	mov	r0, r4
 80109b8:	f000 f84a 	bl	8010a50 <_free_r>
 80109bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80109be:	b111      	cbz	r1, 80109c6 <_reclaim_reent+0x8a>
 80109c0:	4620      	mov	r0, r4
 80109c2:	f000 f845 	bl	8010a50 <_free_r>
 80109c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80109c8:	b111      	cbz	r1, 80109d0 <_reclaim_reent+0x94>
 80109ca:	4620      	mov	r0, r4
 80109cc:	f000 f840 	bl	8010a50 <_free_r>
 80109d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80109d2:	b111      	cbz	r1, 80109da <_reclaim_reent+0x9e>
 80109d4:	4620      	mov	r0, r4
 80109d6:	f000 f83b 	bl	8010a50 <_free_r>
 80109da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80109dc:	b111      	cbz	r1, 80109e4 <_reclaim_reent+0xa8>
 80109de:	4620      	mov	r0, r4
 80109e0:	f000 f836 	bl	8010a50 <_free_r>
 80109e4:	6a23      	ldr	r3, [r4, #32]
 80109e6:	b11b      	cbz	r3, 80109f0 <_reclaim_reent+0xb4>
 80109e8:	4620      	mov	r0, r4
 80109ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109ee:	4718      	bx	r3
 80109f0:	bd70      	pop	{r4, r5, r6, pc}
 80109f2:	bf00      	nop
 80109f4:	24000108 	.word	0x24000108

080109f8 <__errno>:
 80109f8:	4b01      	ldr	r3, [pc, #4]	@ (8010a00 <__errno+0x8>)
 80109fa:	6818      	ldr	r0, [r3, #0]
 80109fc:	4770      	bx	lr
 80109fe:	bf00      	nop
 8010a00:	24000108 	.word	0x24000108

08010a04 <__libc_init_array>:
 8010a04:	b570      	push	{r4, r5, r6, lr}
 8010a06:	4d0d      	ldr	r5, [pc, #52]	@ (8010a3c <__libc_init_array+0x38>)
 8010a08:	4c0d      	ldr	r4, [pc, #52]	@ (8010a40 <__libc_init_array+0x3c>)
 8010a0a:	1b64      	subs	r4, r4, r5
 8010a0c:	10a4      	asrs	r4, r4, #2
 8010a0e:	2600      	movs	r6, #0
 8010a10:	42a6      	cmp	r6, r4
 8010a12:	d109      	bne.n	8010a28 <__libc_init_array+0x24>
 8010a14:	4d0b      	ldr	r5, [pc, #44]	@ (8010a44 <__libc_init_array+0x40>)
 8010a16:	4c0c      	ldr	r4, [pc, #48]	@ (8010a48 <__libc_init_array+0x44>)
 8010a18:	f000 fc42 	bl	80112a0 <_init>
 8010a1c:	1b64      	subs	r4, r4, r5
 8010a1e:	10a4      	asrs	r4, r4, #2
 8010a20:	2600      	movs	r6, #0
 8010a22:	42a6      	cmp	r6, r4
 8010a24:	d105      	bne.n	8010a32 <__libc_init_array+0x2e>
 8010a26:	bd70      	pop	{r4, r5, r6, pc}
 8010a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a2c:	4798      	blx	r3
 8010a2e:	3601      	adds	r6, #1
 8010a30:	e7ee      	b.n	8010a10 <__libc_init_array+0xc>
 8010a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a36:	4798      	blx	r3
 8010a38:	3601      	adds	r6, #1
 8010a3a:	e7f2      	b.n	8010a22 <__libc_init_array+0x1e>
 8010a3c:	08011770 	.word	0x08011770
 8010a40:	08011770 	.word	0x08011770
 8010a44:	08011770 	.word	0x08011770
 8010a48:	08011774 	.word	0x08011774

08010a4c <__retarget_lock_acquire_recursive>:
 8010a4c:	4770      	bx	lr

08010a4e <__retarget_lock_release_recursive>:
 8010a4e:	4770      	bx	lr

08010a50 <_free_r>:
 8010a50:	b538      	push	{r3, r4, r5, lr}
 8010a52:	4605      	mov	r5, r0
 8010a54:	2900      	cmp	r1, #0
 8010a56:	d041      	beq.n	8010adc <_free_r+0x8c>
 8010a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a5c:	1f0c      	subs	r4, r1, #4
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	bfb8      	it	lt
 8010a62:	18e4      	addlt	r4, r4, r3
 8010a64:	f000 f83e 	bl	8010ae4 <__malloc_lock>
 8010a68:	4a1d      	ldr	r2, [pc, #116]	@ (8010ae0 <_free_r+0x90>)
 8010a6a:	6813      	ldr	r3, [r2, #0]
 8010a6c:	b933      	cbnz	r3, 8010a7c <_free_r+0x2c>
 8010a6e:	6063      	str	r3, [r4, #4]
 8010a70:	6014      	str	r4, [r2, #0]
 8010a72:	4628      	mov	r0, r5
 8010a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a78:	f000 b83a 	b.w	8010af0 <__malloc_unlock>
 8010a7c:	42a3      	cmp	r3, r4
 8010a7e:	d908      	bls.n	8010a92 <_free_r+0x42>
 8010a80:	6820      	ldr	r0, [r4, #0]
 8010a82:	1821      	adds	r1, r4, r0
 8010a84:	428b      	cmp	r3, r1
 8010a86:	bf01      	itttt	eq
 8010a88:	6819      	ldreq	r1, [r3, #0]
 8010a8a:	685b      	ldreq	r3, [r3, #4]
 8010a8c:	1809      	addeq	r1, r1, r0
 8010a8e:	6021      	streq	r1, [r4, #0]
 8010a90:	e7ed      	b.n	8010a6e <_free_r+0x1e>
 8010a92:	461a      	mov	r2, r3
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	b10b      	cbz	r3, 8010a9c <_free_r+0x4c>
 8010a98:	42a3      	cmp	r3, r4
 8010a9a:	d9fa      	bls.n	8010a92 <_free_r+0x42>
 8010a9c:	6811      	ldr	r1, [r2, #0]
 8010a9e:	1850      	adds	r0, r2, r1
 8010aa0:	42a0      	cmp	r0, r4
 8010aa2:	d10b      	bne.n	8010abc <_free_r+0x6c>
 8010aa4:	6820      	ldr	r0, [r4, #0]
 8010aa6:	4401      	add	r1, r0
 8010aa8:	1850      	adds	r0, r2, r1
 8010aaa:	4283      	cmp	r3, r0
 8010aac:	6011      	str	r1, [r2, #0]
 8010aae:	d1e0      	bne.n	8010a72 <_free_r+0x22>
 8010ab0:	6818      	ldr	r0, [r3, #0]
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	6053      	str	r3, [r2, #4]
 8010ab6:	4408      	add	r0, r1
 8010ab8:	6010      	str	r0, [r2, #0]
 8010aba:	e7da      	b.n	8010a72 <_free_r+0x22>
 8010abc:	d902      	bls.n	8010ac4 <_free_r+0x74>
 8010abe:	230c      	movs	r3, #12
 8010ac0:	602b      	str	r3, [r5, #0]
 8010ac2:	e7d6      	b.n	8010a72 <_free_r+0x22>
 8010ac4:	6820      	ldr	r0, [r4, #0]
 8010ac6:	1821      	adds	r1, r4, r0
 8010ac8:	428b      	cmp	r3, r1
 8010aca:	bf04      	itt	eq
 8010acc:	6819      	ldreq	r1, [r3, #0]
 8010ace:	685b      	ldreq	r3, [r3, #4]
 8010ad0:	6063      	str	r3, [r4, #4]
 8010ad2:	bf04      	itt	eq
 8010ad4:	1809      	addeq	r1, r1, r0
 8010ad6:	6021      	streq	r1, [r4, #0]
 8010ad8:	6054      	str	r4, [r2, #4]
 8010ada:	e7ca      	b.n	8010a72 <_free_r+0x22>
 8010adc:	bd38      	pop	{r3, r4, r5, pc}
 8010ade:	bf00      	nop
 8010ae0:	2400674c 	.word	0x2400674c

08010ae4 <__malloc_lock>:
 8010ae4:	4801      	ldr	r0, [pc, #4]	@ (8010aec <__malloc_lock+0x8>)
 8010ae6:	f7ff bfb1 	b.w	8010a4c <__retarget_lock_acquire_recursive>
 8010aea:	bf00      	nop
 8010aec:	24006748 	.word	0x24006748

08010af0 <__malloc_unlock>:
 8010af0:	4801      	ldr	r0, [pc, #4]	@ (8010af8 <__malloc_unlock+0x8>)
 8010af2:	f7ff bfac 	b.w	8010a4e <__retarget_lock_release_recursive>
 8010af6:	bf00      	nop
 8010af8:	24006748 	.word	0x24006748

08010afc <sqrtf>:
 8010afc:	b508      	push	{r3, lr}
 8010afe:	ed2d 8b02 	vpush	{d8}
 8010b02:	eeb0 8a40 	vmov.f32	s16, s0
 8010b06:	f000 fb84 	bl	8011212 <__ieee754_sqrtf>
 8010b0a:	eeb4 8a48 	vcmp.f32	s16, s16
 8010b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b12:	d60c      	bvs.n	8010b2e <sqrtf+0x32>
 8010b14:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010b34 <sqrtf+0x38>
 8010b18:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b20:	d505      	bpl.n	8010b2e <sqrtf+0x32>
 8010b22:	f7ff ff69 	bl	80109f8 <__errno>
 8010b26:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010b2a:	2321      	movs	r3, #33	@ 0x21
 8010b2c:	6003      	str	r3, [r0, #0]
 8010b2e:	ecbd 8b02 	vpop	{d8}
 8010b32:	bd08      	pop	{r3, pc}
 8010b34:	00000000 	.word	0x00000000

08010b38 <atanf>:
 8010b38:	b538      	push	{r3, r4, r5, lr}
 8010b3a:	ee10 5a10 	vmov	r5, s0
 8010b3e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010b42:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8010b46:	eef0 7a40 	vmov.f32	s15, s0
 8010b4a:	d30f      	bcc.n	8010b6c <atanf+0x34>
 8010b4c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8010b50:	d904      	bls.n	8010b5c <atanf+0x24>
 8010b52:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010b56:	eeb0 0a67 	vmov.f32	s0, s15
 8010b5a:	bd38      	pop	{r3, r4, r5, pc}
 8010b5c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8010c94 <atanf+0x15c>
 8010b60:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8010c98 <atanf+0x160>
 8010b64:	2d00      	cmp	r5, #0
 8010b66:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8010b6a:	e7f4      	b.n	8010b56 <atanf+0x1e>
 8010b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8010c9c <atanf+0x164>)
 8010b6e:	429c      	cmp	r4, r3
 8010b70:	d810      	bhi.n	8010b94 <atanf+0x5c>
 8010b72:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8010b76:	d20a      	bcs.n	8010b8e <atanf+0x56>
 8010b78:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010ca0 <atanf+0x168>
 8010b7c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010b80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010b84:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8c:	dce3      	bgt.n	8010b56 <atanf+0x1e>
 8010b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b92:	e013      	b.n	8010bbc <atanf+0x84>
 8010b94:	f000 f8a4 	bl	8010ce0 <fabsf>
 8010b98:	4b42      	ldr	r3, [pc, #264]	@ (8010ca4 <atanf+0x16c>)
 8010b9a:	429c      	cmp	r4, r3
 8010b9c:	d84f      	bhi.n	8010c3e <atanf+0x106>
 8010b9e:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8010ba2:	429c      	cmp	r4, r3
 8010ba4:	d841      	bhi.n	8010c2a <atanf+0xf2>
 8010ba6:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010baa:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010bae:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010bb8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010bbc:	1c5a      	adds	r2, r3, #1
 8010bbe:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010bc2:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8010ca8 <atanf+0x170>
 8010bc6:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8010cac <atanf+0x174>
 8010bca:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8010cb0 <atanf+0x178>
 8010bce:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010bd2:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010bd6:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8010cb4 <atanf+0x17c>
 8010bda:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010bde:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8010cb8 <atanf+0x180>
 8010be2:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010be6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8010cbc <atanf+0x184>
 8010bea:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010bee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010cc0 <atanf+0x188>
 8010bf2:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010bf6:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8010cc4 <atanf+0x18c>
 8010bfa:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010bfe:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8010cc8 <atanf+0x190>
 8010c02:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010c06:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8010ccc <atanf+0x194>
 8010c0a:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010c0e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8010cd0 <atanf+0x198>
 8010c12:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010c16:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010c1a:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010c1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010c22:	d121      	bne.n	8010c68 <atanf+0x130>
 8010c24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010c28:	e795      	b.n	8010b56 <atanf+0x1e>
 8010c2a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010c2e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010c32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010c36:	2301      	movs	r3, #1
 8010c38:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010c3c:	e7be      	b.n	8010bbc <atanf+0x84>
 8010c3e:	4b25      	ldr	r3, [pc, #148]	@ (8010cd4 <atanf+0x19c>)
 8010c40:	429c      	cmp	r4, r3
 8010c42:	d80b      	bhi.n	8010c5c <atanf+0x124>
 8010c44:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8010c48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010c4c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010c50:	2302      	movs	r3, #2
 8010c52:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c5a:	e7af      	b.n	8010bbc <atanf+0x84>
 8010c5c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010c60:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010c64:	2303      	movs	r3, #3
 8010c66:	e7a9      	b.n	8010bbc <atanf+0x84>
 8010c68:	4a1b      	ldr	r2, [pc, #108]	@ (8010cd8 <atanf+0x1a0>)
 8010c6a:	491c      	ldr	r1, [pc, #112]	@ (8010cdc <atanf+0x1a4>)
 8010c6c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010c70:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010c74:	edd3 6a00 	vldr	s13, [r3]
 8010c78:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010c7c:	2d00      	cmp	r5, #0
 8010c7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c82:	edd2 7a00 	vldr	s15, [r2]
 8010c86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010c8a:	bfb8      	it	lt
 8010c8c:	eef1 7a67 	vneglt.f32	s15, s15
 8010c90:	e761      	b.n	8010b56 <atanf+0x1e>
 8010c92:	bf00      	nop
 8010c94:	bfc90fdb 	.word	0xbfc90fdb
 8010c98:	3fc90fdb 	.word	0x3fc90fdb
 8010c9c:	3edfffff 	.word	0x3edfffff
 8010ca0:	7149f2ca 	.word	0x7149f2ca
 8010ca4:	3f97ffff 	.word	0x3f97ffff
 8010ca8:	3c8569d7 	.word	0x3c8569d7
 8010cac:	3d4bda59 	.word	0x3d4bda59
 8010cb0:	bd6ef16b 	.word	0xbd6ef16b
 8010cb4:	3d886b35 	.word	0x3d886b35
 8010cb8:	3dba2e6e 	.word	0x3dba2e6e
 8010cbc:	3e124925 	.word	0x3e124925
 8010cc0:	3eaaaaab 	.word	0x3eaaaaab
 8010cc4:	bd15a221 	.word	0xbd15a221
 8010cc8:	bd9d8795 	.word	0xbd9d8795
 8010ccc:	bde38e38 	.word	0xbde38e38
 8010cd0:	be4ccccd 	.word	0xbe4ccccd
 8010cd4:	401bffff 	.word	0x401bffff
 8010cd8:	080113a8 	.word	0x080113a8
 8010cdc:	08011398 	.word	0x08011398

08010ce0 <fabsf>:
 8010ce0:	ee10 3a10 	vmov	r3, s0
 8010ce4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010ce8:	ee00 3a10 	vmov	s0, r3
 8010cec:	4770      	bx	lr

08010cee <checkint>:
 8010cee:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010cf2:	2b7e      	cmp	r3, #126	@ 0x7e
 8010cf4:	d910      	bls.n	8010d18 <checkint+0x2a>
 8010cf6:	2b96      	cmp	r3, #150	@ 0x96
 8010cf8:	d80c      	bhi.n	8010d14 <checkint+0x26>
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8010d00:	fa02 f303 	lsl.w	r3, r2, r3
 8010d04:	1e5a      	subs	r2, r3, #1
 8010d06:	4202      	tst	r2, r0
 8010d08:	d106      	bne.n	8010d18 <checkint+0x2a>
 8010d0a:	4203      	tst	r3, r0
 8010d0c:	bf14      	ite	ne
 8010d0e:	2001      	movne	r0, #1
 8010d10:	2002      	moveq	r0, #2
 8010d12:	4770      	bx	lr
 8010d14:	2002      	movs	r0, #2
 8010d16:	4770      	bx	lr
 8010d18:	2000      	movs	r0, #0
 8010d1a:	4770      	bx	lr
 8010d1c:	0000      	movs	r0, r0
	...

08010d20 <powf>:
 8010d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d22:	ee10 1a10 	vmov	r1, s0
 8010d26:	ee10 4a90 	vmov	r4, s1
 8010d2a:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 8010d2e:	0063      	lsls	r3, r4, #1
 8010d30:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8010d34:	eef0 7a40 	vmov.f32	s15, s0
 8010d38:	eeb0 7a60 	vmov.f32	s14, s1
 8010d3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8010d40:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 8010d44:	d252      	bcs.n	8010dec <powf+0xcc>
 8010d46:	4290      	cmp	r0, r2
 8010d48:	d258      	bcs.n	8010dfc <powf+0xdc>
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 8010d50:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 8010d54:	4a9e      	ldr	r2, [pc, #632]	@ (8010fd0 <powf+0x2b0>)
 8010d56:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 8010d5a:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8010d5e:	f36f 0316 	bfc	r3, #0, #23
 8010d62:	1ac9      	subs	r1, r1, r3
 8010d64:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8010d68:	ee07 1a90 	vmov	s15, r1
 8010d6c:	ed94 5b02 	vldr	d5, [r4, #8]
 8010d70:	ed94 4b00 	vldr	d4, [r4]
 8010d74:	15db      	asrs	r3, r3, #23
 8010d76:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8010d7a:	ee07 3a90 	vmov	s15, r3
 8010d7e:	eea4 2b06 	vfma.f64	d2, d4, d6
 8010d82:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 8010d86:	ee22 4b02 	vmul.f64	d4, d2, d2
 8010d8a:	ee24 0b04 	vmul.f64	d0, d4, d4
 8010d8e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010d92:	ee36 6b05 	vadd.f64	d6, d6, d5
 8010d96:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 8010d9a:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 8010d9e:	eea2 1b05 	vfma.f64	d1, d2, d5
 8010da2:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 8010da6:	eea2 5b03 	vfma.f64	d5, d2, d3
 8010daa:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 8010dae:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8010db2:	eea2 6b03 	vfma.f64	d6, d2, d3
 8010db6:	eea4 6b05 	vfma.f64	d6, d4, d5
 8010dba:	eea1 6b00 	vfma.f64	d6, d1, d0
 8010dbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010dc2:	ee17 3a90 	vmov	r3, s15
 8010dc6:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8010dca:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	f0c0 8098 	bcc.w	8010f04 <powf+0x1e4>
 8010dd4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8010fb0 <powf+0x290>
 8010dd8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010de0:	dd79      	ble.n	8010ed6 <powf+0x1b6>
 8010de2:	b003      	add	sp, #12
 8010de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010de8:	f000 b9ec 	b.w	80111c4 <__math_oflowf>
 8010dec:	4290      	cmp	r0, r2
 8010dee:	d330      	bcc.n	8010e52 <powf+0x132>
 8010df0:	b12b      	cbz	r3, 8010dfe <powf+0xde>
 8010df2:	0049      	lsls	r1, r1, #1
 8010df4:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 8010df8:	d808      	bhi.n	8010e0c <powf+0xec>
 8010dfa:	e015      	b.n	8010e28 <powf+0x108>
 8010dfc:	b953      	cbnz	r3, 8010e14 <powf+0xf4>
 8010dfe:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 8010e02:	0049      	lsls	r1, r1, #1
 8010e04:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 8010e08:	f240 80ca 	bls.w	8010fa0 <powf+0x280>
 8010e0c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010e10:	b003      	add	sp, #12
 8010e12:	bd30      	pop	{r4, r5, pc}
 8010e14:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8010e18:	d105      	bne.n	8010e26 <powf+0x106>
 8010e1a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8010e1e:	0064      	lsls	r4, r4, #1
 8010e20:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8010e24:	e7f0      	b.n	8010e08 <powf+0xe8>
 8010e26:	0049      	lsls	r1, r1, #1
 8010e28:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 8010e2c:	d1ee      	bne.n	8010e0c <powf+0xec>
 8010e2e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8010e32:	f000 80b5 	beq.w	8010fa0 <powf+0x280>
 8010e36:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8010e3a:	ea6f 0404 	mvn.w	r4, r4
 8010e3e:	bf34      	ite	cc
 8010e40:	2100      	movcc	r1, #0
 8010e42:	2101      	movcs	r1, #1
 8010e44:	0fe4      	lsrs	r4, r4, #31
 8010e46:	42a1      	cmp	r1, r4
 8010e48:	f040 80ad 	bne.w	8010fa6 <powf+0x286>
 8010e4c:	ee27 0a07 	vmul.f32	s0, s14, s14
 8010e50:	e7de      	b.n	8010e10 <powf+0xf0>
 8010e52:	004d      	lsls	r5, r1, #1
 8010e54:	1e6b      	subs	r3, r5, #1
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d31b      	bcc.n	8010e92 <powf+0x172>
 8010e5a:	2900      	cmp	r1, #0
 8010e5c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010e60:	da0e      	bge.n	8010e80 <powf+0x160>
 8010e62:	4620      	mov	r0, r4
 8010e64:	f7ff ff43 	bl	8010cee <checkint>
 8010e68:	2801      	cmp	r0, #1
 8010e6a:	d109      	bne.n	8010e80 <powf+0x160>
 8010e6c:	eeb1 0a40 	vneg.f32	s0, s0
 8010e70:	b945      	cbnz	r5, 8010e84 <powf+0x164>
 8010e72:	2c00      	cmp	r4, #0
 8010e74:	dacc      	bge.n	8010e10 <powf+0xf0>
 8010e76:	b003      	add	sp, #12
 8010e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e7c:	f000 b9a8 	b.w	80111d0 <__math_divzerof>
 8010e80:	2000      	movs	r0, #0
 8010e82:	e7f5      	b.n	8010e70 <powf+0x150>
 8010e84:	2c00      	cmp	r4, #0
 8010e86:	dac3      	bge.n	8010e10 <powf+0xf0>
 8010e88:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010e8c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8010e90:	e7be      	b.n	8010e10 <powf+0xf0>
 8010e92:	2900      	cmp	r1, #0
 8010e94:	da1d      	bge.n	8010ed2 <powf+0x1b2>
 8010e96:	4620      	mov	r0, r4
 8010e98:	f7ff ff29 	bl	8010cee <checkint>
 8010e9c:	b920      	cbnz	r0, 8010ea8 <powf+0x188>
 8010e9e:	b003      	add	sp, #12
 8010ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ea4:	f000 b9a6 	b.w	80111f4 <__math_invalidf>
 8010ea8:	1e43      	subs	r3, r0, #1
 8010eaa:	4258      	negs	r0, r3
 8010eac:	4158      	adcs	r0, r3
 8010eae:	0400      	lsls	r0, r0, #16
 8010eb0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010eb4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8010eb8:	f4bf af48 	bcs.w	8010d4c <powf+0x2c>
 8010ebc:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8010fd4 <powf+0x2b4>
 8010ec0:	ee27 0aa6 	vmul.f32	s0, s15, s13
 8010ec4:	ee10 3a10 	vmov	r3, s0
 8010ec8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010ecc:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 8010ed0:	e73c      	b.n	8010d4c <powf+0x2c>
 8010ed2:	2000      	movs	r0, #0
 8010ed4:	e7ee      	b.n	8010eb4 <powf+0x194>
 8010ed6:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8010fb8 <powf+0x298>
 8010eda:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee2:	dd45      	ble.n	8010f70 <powf+0x250>
 8010ee4:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 8010ee8:	b3d0      	cbz	r0, 8010f60 <powf+0x240>
 8010eea:	9301      	str	r3, [sp, #4]
 8010eec:	eddd 6a01 	vldr	s13, [sp, #4]
 8010ef0:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 8010ef4:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010ef8:	eef4 6a46 	vcmp.f32	s13, s12
 8010efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f00:	f47f af6f 	bne.w	8010de2 <powf+0xc2>
 8010f04:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8010f08:	4b33      	ldr	r3, [pc, #204]	@ (8010fd8 <powf+0x2b8>)
 8010f0a:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 8010f0e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010f12:	ee16 2a10 	vmov	r2, s12
 8010f16:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010f1a:	f002 011f 	and.w	r1, r2, #31
 8010f1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010f22:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 8010f26:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010f2a:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 8010f2e:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8010f32:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8010f36:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010f3a:	686d      	ldr	r5, [r5, #4]
 8010f3c:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 8010f40:	1880      	adds	r0, r0, r2
 8010f42:	2100      	movs	r1, #0
 8010f44:	190a      	adds	r2, r1, r4
 8010f46:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8010f4a:	eea7 0b05 	vfma.f64	d0, d7, d5
 8010f4e:	ec43 2b17 	vmov	d7, r2, r3
 8010f52:	eea6 0b04 	vfma.f64	d0, d6, d4
 8010f56:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010f5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010f5e:	e757      	b.n	8010e10 <powf+0xf0>
 8010f60:	9300      	str	r3, [sp, #0]
 8010f62:	eddd 6a00 	vldr	s13, [sp]
 8010f66:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8010f6a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010f6e:	e7c3      	b.n	8010ef8 <powf+0x1d8>
 8010f70:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8010fc0 <powf+0x2a0>
 8010f74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f7c:	d804      	bhi.n	8010f88 <powf+0x268>
 8010f7e:	b003      	add	sp, #12
 8010f80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f84:	f000 b912 	b.w	80111ac <__math_uflowf>
 8010f88:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8010fc8 <powf+0x2a8>
 8010f8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f94:	d5b6      	bpl.n	8010f04 <powf+0x1e4>
 8010f96:	b003      	add	sp, #12
 8010f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f9c:	f000 b90c 	b.w	80111b8 <__math_may_uflowf>
 8010fa0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010fa4:	e734      	b.n	8010e10 <powf+0xf0>
 8010fa6:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8010fdc <powf+0x2bc>
 8010faa:	e731      	b.n	8010e10 <powf+0xf0>
 8010fac:	f3af 8000 	nop.w
 8010fb0:	ffd1d571 	.word	0xffd1d571
 8010fb4:	405fffff 	.word	0x405fffff
 8010fb8:	ffa3aae2 	.word	0xffa3aae2
 8010fbc:	405fffff 	.word	0x405fffff
 8010fc0:	00000000 	.word	0x00000000
 8010fc4:	c062c000 	.word	0xc062c000
 8010fc8:	00000000 	.word	0x00000000
 8010fcc:	c062a000 	.word	0xc062a000
 8010fd0:	08011640 	.word	0x08011640
 8010fd4:	4b000000 	.word	0x4b000000
 8010fd8:	080114f8 	.word	0x080114f8
 8010fdc:	00000000 	.word	0x00000000

08010fe0 <sinf_poly>:
 8010fe0:	07cb      	lsls	r3, r1, #31
 8010fe2:	d412      	bmi.n	801100a <sinf_poly+0x2a>
 8010fe4:	ee21 5b00 	vmul.f64	d5, d1, d0
 8010fe8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8010fec:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8010ff0:	eea6 7b01 	vfma.f64	d7, d6, d1
 8010ff4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8010ff8:	ee21 1b05 	vmul.f64	d1, d1, d5
 8010ffc:	eea6 0b05 	vfma.f64	d0, d6, d5
 8011000:	eea7 0b01 	vfma.f64	d0, d7, d1
 8011004:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011008:	4770      	bx	lr
 801100a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801100e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8011012:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8011016:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801101a:	eea1 7b06 	vfma.f64	d7, d1, d6
 801101e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8011022:	eea1 0b06 	vfma.f64	d0, d1, d6
 8011026:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801102a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801102e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8011032:	e7e5      	b.n	8011000 <sinf_poly+0x20>
 8011034:	0000      	movs	r0, r0
	...

08011038 <cosf>:
 8011038:	b538      	push	{r3, r4, r5, lr}
 801103a:	ee10 4a10 	vmov	r4, s0
 801103e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8011042:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8011046:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801104a:	d21f      	bcs.n	801108c <cosf+0x54>
 801104c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8011050:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8011054:	f0c0 8082 	bcc.w	801115c <cosf+0x124>
 8011058:	ee27 4b07 	vmul.f64	d4, d7, d7
 801105c:	4b44      	ldr	r3, [pc, #272]	@ (8011170 <cosf+0x138>)
 801105e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8011062:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8011066:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 801106a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801106e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8011072:	eea7 0b05 	vfma.f64	d0, d7, d5
 8011076:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 801107a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801107e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011082:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011086:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801108a:	bd38      	pop	{r3, r4, r5, pc}
 801108c:	f240 422e 	movw	r2, #1070	@ 0x42e
 8011090:	4293      	cmp	r3, r2
 8011092:	d829      	bhi.n	80110e8 <cosf+0xb0>
 8011094:	4b36      	ldr	r3, [pc, #216]	@ (8011170 <cosf+0x138>)
 8011096:	ed93 6b08 	vldr	d6, [r3, #32]
 801109a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801109e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80110a2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80110a6:	ee16 1a90 	vmov	r1, s13
 80110aa:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80110ae:	1609      	asrs	r1, r1, #24
 80110b0:	ee06 1a90 	vmov	s13, r1
 80110b4:	f001 0203 	and.w	r2, r1, #3
 80110b8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80110bc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80110c0:	ed92 0b00 	vldr	d0, [r2]
 80110c4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80110c8:	f011 0f02 	tst.w	r1, #2
 80110cc:	f081 0101 	eor.w	r1, r1, #1
 80110d0:	eea5 7b46 	vfms.f64	d7, d5, d6
 80110d4:	bf08      	it	eq
 80110d6:	4618      	moveq	r0, r3
 80110d8:	ee27 1b07 	vmul.f64	d1, d7, d7
 80110dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80110e4:	f7ff bf7c 	b.w	8010fe0 <sinf_poly>
 80110e8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80110ec:	d232      	bcs.n	8011154 <cosf+0x11c>
 80110ee:	4921      	ldr	r1, [pc, #132]	@ (8011174 <cosf+0x13c>)
 80110f0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80110f4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80110f8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80110fc:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8011100:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011104:	6a10      	ldr	r0, [r2, #32]
 8011106:	6912      	ldr	r2, [r2, #16]
 8011108:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801110c:	40ab      	lsls	r3, r5
 801110e:	fba0 5003 	umull	r5, r0, r0, r3
 8011112:	4359      	muls	r1, r3
 8011114:	fbe3 0102 	umlal	r0, r1, r3, r2
 8011118:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801111c:	0f9d      	lsrs	r5, r3, #30
 801111e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8011122:	1ac9      	subs	r1, r1, r3
 8011124:	f7ef fa6a 	bl	80005fc <__aeabi_l2d>
 8011128:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801112c:	4b10      	ldr	r3, [pc, #64]	@ (8011170 <cosf+0x138>)
 801112e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8011168 <cosf+0x130>
 8011132:	ec41 0b17 	vmov	d7, r0, r1
 8011136:	f004 0203 	and.w	r2, r4, #3
 801113a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801113e:	ed92 0b00 	vldr	d0, [r2]
 8011142:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011146:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801114a:	f014 0f02 	tst.w	r4, #2
 801114e:	f085 0101 	eor.w	r1, r5, #1
 8011152:	e7bf      	b.n	80110d4 <cosf+0x9c>
 8011154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011158:	f000 b84c 	b.w	80111f4 <__math_invalidf>
 801115c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011160:	e793      	b.n	801108a <cosf+0x52>
 8011162:	bf00      	nop
 8011164:	f3af 8000 	nop.w
 8011168:	54442d18 	.word	0x54442d18
 801116c:	3c1921fb 	.word	0x3c1921fb
 8011170:	08011418 	.word	0x08011418
 8011174:	080113b8 	.word	0x080113b8

08011178 <with_errnof>:
 8011178:	b510      	push	{r4, lr}
 801117a:	ed2d 8b02 	vpush	{d8}
 801117e:	eeb0 8a40 	vmov.f32	s16, s0
 8011182:	4604      	mov	r4, r0
 8011184:	f7ff fc38 	bl	80109f8 <__errno>
 8011188:	eeb0 0a48 	vmov.f32	s0, s16
 801118c:	ecbd 8b02 	vpop	{d8}
 8011190:	6004      	str	r4, [r0, #0]
 8011192:	bd10      	pop	{r4, pc}

08011194 <xflowf>:
 8011194:	b130      	cbz	r0, 80111a4 <xflowf+0x10>
 8011196:	eef1 7a40 	vneg.f32	s15, s0
 801119a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801119e:	2022      	movs	r0, #34	@ 0x22
 80111a0:	f7ff bfea 	b.w	8011178 <with_errnof>
 80111a4:	eef0 7a40 	vmov.f32	s15, s0
 80111a8:	e7f7      	b.n	801119a <xflowf+0x6>
	...

080111ac <__math_uflowf>:
 80111ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80111b4 <__math_uflowf+0x8>
 80111b0:	f7ff bff0 	b.w	8011194 <xflowf>
 80111b4:	10000000 	.word	0x10000000

080111b8 <__math_may_uflowf>:
 80111b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80111c0 <__math_may_uflowf+0x8>
 80111bc:	f7ff bfea 	b.w	8011194 <xflowf>
 80111c0:	1a200000 	.word	0x1a200000

080111c4 <__math_oflowf>:
 80111c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80111cc <__math_oflowf+0x8>
 80111c8:	f7ff bfe4 	b.w	8011194 <xflowf>
 80111cc:	70000000 	.word	0x70000000

080111d0 <__math_divzerof>:
 80111d0:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80111f0 <__math_divzerof+0x20>
 80111d4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80111d8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80111dc:	2800      	cmp	r0, #0
 80111de:	f04f 0022 	mov.w	r0, #34	@ 0x22
 80111e2:	fe47 7a87 	vseleq.f32	s15, s15, s14
 80111e6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80111ea:	f7ff bfc5 	b.w	8011178 <with_errnof>
 80111ee:	bf00      	nop
 80111f0:	00000000 	.word	0x00000000

080111f4 <__math_invalidf>:
 80111f4:	eef0 7a40 	vmov.f32	s15, s0
 80111f8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80111fc:	eef4 7a67 	vcmp.f32	s15, s15
 8011200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011204:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8011208:	d602      	bvs.n	8011210 <__math_invalidf+0x1c>
 801120a:	2021      	movs	r0, #33	@ 0x21
 801120c:	f7ff bfb4 	b.w	8011178 <with_errnof>
 8011210:	4770      	bx	lr

08011212 <__ieee754_sqrtf>:
 8011212:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011216:	4770      	bx	lr

08011218 <floorf>:
 8011218:	ee10 3a10 	vmov	r3, s0
 801121c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011220:	3a7f      	subs	r2, #127	@ 0x7f
 8011222:	2a16      	cmp	r2, #22
 8011224:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011228:	dc2b      	bgt.n	8011282 <floorf+0x6a>
 801122a:	2a00      	cmp	r2, #0
 801122c:	da12      	bge.n	8011254 <floorf+0x3c>
 801122e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011294 <floorf+0x7c>
 8011232:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011236:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801123e:	dd06      	ble.n	801124e <floorf+0x36>
 8011240:	2b00      	cmp	r3, #0
 8011242:	da24      	bge.n	801128e <floorf+0x76>
 8011244:	2900      	cmp	r1, #0
 8011246:	4b14      	ldr	r3, [pc, #80]	@ (8011298 <floorf+0x80>)
 8011248:	bf08      	it	eq
 801124a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801124e:	ee00 3a10 	vmov	s0, r3
 8011252:	4770      	bx	lr
 8011254:	4911      	ldr	r1, [pc, #68]	@ (801129c <floorf+0x84>)
 8011256:	4111      	asrs	r1, r2
 8011258:	420b      	tst	r3, r1
 801125a:	d0fa      	beq.n	8011252 <floorf+0x3a>
 801125c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011294 <floorf+0x7c>
 8011260:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011264:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801126c:	ddef      	ble.n	801124e <floorf+0x36>
 801126e:	2b00      	cmp	r3, #0
 8011270:	bfbe      	ittt	lt
 8011272:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8011276:	fa40 f202 	asrlt.w	r2, r0, r2
 801127a:	189b      	addlt	r3, r3, r2
 801127c:	ea23 0301 	bic.w	r3, r3, r1
 8011280:	e7e5      	b.n	801124e <floorf+0x36>
 8011282:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011286:	d3e4      	bcc.n	8011252 <floorf+0x3a>
 8011288:	ee30 0a00 	vadd.f32	s0, s0, s0
 801128c:	4770      	bx	lr
 801128e:	2300      	movs	r3, #0
 8011290:	e7dd      	b.n	801124e <floorf+0x36>
 8011292:	bf00      	nop
 8011294:	7149f2ca 	.word	0x7149f2ca
 8011298:	bf800000 	.word	0xbf800000
 801129c:	007fffff 	.word	0x007fffff

080112a0 <_init>:
 80112a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112a2:	bf00      	nop
 80112a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112a6:	bc08      	pop	{r3}
 80112a8:	469e      	mov	lr, r3
 80112aa:	4770      	bx	lr

080112ac <_fini>:
 80112ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ae:	bf00      	nop
 80112b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112b2:	bc08      	pop	{r3}
 80112b4:	469e      	mov	lr, r3
 80112b6:	4770      	bx	lr
