
TEST_FOC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005c70  08005c70  00006c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d04  08005d04  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005d04  08005d04  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005d04  08005d04  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d04  08005d04  00006d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d08  08005d08  00006d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005d0c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000000c  08005d18  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08005d18  00007268  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f2a  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bec  00000000  00000000  00017f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0001ab50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf5  00000000  00000000  0001bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168c4  00000000  00000000  0001c91d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014564  00000000  00000000  000331e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009613d  00000000  00000000  00047745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd0  00000000  00000000  000dd8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000e1498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005c58 	.word	0x08005c58

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005c58 	.word	0x08005c58

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	0018      	movs	r0, r3
 8000226:	230c      	movs	r3, #12
 8000228:	001a      	movs	r2, r3
 800022a:	2100      	movs	r1, #0
 800022c:	f005 fce7 	bl	8005bfe <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000230:	4b4f      	ldr	r3, [pc, #316]	@ (8000370 <MX_ADC1_Init+0x154>)
 8000232:	4a50      	ldr	r2, [pc, #320]	@ (8000374 <MX_ADC1_Init+0x158>)
 8000234:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000236:	4b4e      	ldr	r3, [pc, #312]	@ (8000370 <MX_ADC1_Init+0x154>)
 8000238:	2280      	movs	r2, #128	@ 0x80
 800023a:	05d2      	lsls	r2, r2, #23
 800023c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800023e:	4b4c      	ldr	r3, [pc, #304]	@ (8000370 <MX_ADC1_Init+0x154>)
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000244:	4b4a      	ldr	r3, [pc, #296]	@ (8000370 <MX_ADC1_Init+0x154>)
 8000246:	2200      	movs	r2, #0
 8000248:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800024a:	4b49      	ldr	r3, [pc, #292]	@ (8000370 <MX_ADC1_Init+0x154>)
 800024c:	2280      	movs	r2, #128	@ 0x80
 800024e:	0392      	lsls	r2, r2, #14
 8000250:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000252:	4b47      	ldr	r3, [pc, #284]	@ (8000370 <MX_ADC1_Init+0x154>)
 8000254:	2208      	movs	r2, #8
 8000256:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000258:	4b45      	ldr	r3, [pc, #276]	@ (8000370 <MX_ADC1_Init+0x154>)
 800025a:	2200      	movs	r2, #0
 800025c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800025e:	4b44      	ldr	r3, [pc, #272]	@ (8000370 <MX_ADC1_Init+0x154>)
 8000260:	2200      	movs	r2, #0
 8000262:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000264:	4b42      	ldr	r3, [pc, #264]	@ (8000370 <MX_ADC1_Init+0x154>)
 8000266:	2200      	movs	r2, #0
 8000268:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 800026a:	4b41      	ldr	r3, [pc, #260]	@ (8000370 <MX_ADC1_Init+0x154>)
 800026c:	2205      	movs	r2, #5
 800026e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000270:	4b3f      	ldr	r3, [pc, #252]	@ (8000370 <MX_ADC1_Init+0x154>)
 8000272:	2220      	movs	r2, #32
 8000274:	2101      	movs	r1, #1
 8000276:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8000278:	4b3d      	ldr	r3, [pc, #244]	@ (8000370 <MX_ADC1_Init+0x154>)
 800027a:	2280      	movs	r2, #128	@ 0x80
 800027c:	00d2      	lsls	r2, r2, #3
 800027e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000280:	4b3b      	ldr	r3, [pc, #236]	@ (8000370 <MX_ADC1_Init+0x154>)
 8000282:	2280      	movs	r2, #128	@ 0x80
 8000284:	00d2      	lsls	r2, r2, #3
 8000286:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000288:	4b39      	ldr	r3, [pc, #228]	@ (8000370 <MX_ADC1_Init+0x154>)
 800028a:	222c      	movs	r2, #44	@ 0x2c
 800028c:	2101      	movs	r1, #1
 800028e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000290:	4b37      	ldr	r3, [pc, #220]	@ (8000370 <MX_ADC1_Init+0x154>)
 8000292:	2200      	movs	r2, #0
 8000294:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000296:	4b36      	ldr	r3, [pc, #216]	@ (8000370 <MX_ADC1_Init+0x154>)
 8000298:	2200      	movs	r2, #0
 800029a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800029c:	4b34      	ldr	r3, [pc, #208]	@ (8000370 <MX_ADC1_Init+0x154>)
 800029e:	2200      	movs	r2, #0
 80002a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80002a2:	4b33      	ldr	r3, [pc, #204]	@ (8000370 <MX_ADC1_Init+0x154>)
 80002a4:	223c      	movs	r2, #60	@ 0x3c
 80002a6:	2100      	movs	r1, #0
 80002a8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80002aa:	4b31      	ldr	r3, [pc, #196]	@ (8000370 <MX_ADC1_Init+0x154>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000370 <MX_ADC1_Init+0x154>)
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 f8b2 	bl	800141c <HAL_ADC_Init>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80002bc:	f000 fa94 	bl	80007e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4a2d      	ldr	r2, [pc, #180]	@ (8000378 <MX_ADC1_Init+0x15c>)
 80002c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d2:	1d3a      	adds	r2, r7, #4
 80002d4:	4b26      	ldr	r3, [pc, #152]	@ (8000370 <MX_ADC1_Init+0x154>)
 80002d6:	0011      	movs	r1, r2
 80002d8:	0018      	movs	r0, r3
 80002da:	f001 fc05 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d001      	beq.n	80002e6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80002e2:	f000 fa81 	bl	80007e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4a24      	ldr	r2, [pc, #144]	@ (800037c <MX_ADC1_Init+0x160>)
 80002ea:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2204      	movs	r2, #4
 80002f0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f2:	1d3a      	adds	r2, r7, #4
 80002f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000370 <MX_ADC1_Init+0x154>)
 80002f6:	0011      	movs	r1, r2
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 fbf5 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000302:	f000 fa71 	bl	80007e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4a1d      	ldr	r2, [pc, #116]	@ (8000380 <MX_ADC1_Init+0x164>)
 800030a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2208      	movs	r2, #8
 8000310:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000312:	1d3a      	adds	r2, r7, #4
 8000314:	4b16      	ldr	r3, [pc, #88]	@ (8000370 <MX_ADC1_Init+0x154>)
 8000316:	0011      	movs	r1, r2
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fbe5 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000322:	f000 fa61 	bl	80007e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4a16      	ldr	r2, [pc, #88]	@ (8000384 <MX_ADC1_Init+0x168>)
 800032a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	220c      	movs	r2, #12
 8000330:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000332:	1d3a      	adds	r2, r7, #4
 8000334:	4b0e      	ldr	r3, [pc, #56]	@ (8000370 <MX_ADC1_Init+0x154>)
 8000336:	0011      	movs	r1, r2
 8000338:	0018      	movs	r0, r3
 800033a:	f001 fbd5 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 8000342:	f000 fa51 	bl	80007e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	4a0f      	ldr	r2, [pc, #60]	@ (8000388 <MX_ADC1_Init+0x16c>)
 800034a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2210      	movs	r2, #16
 8000350:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000352:	1d3a      	adds	r2, r7, #4
 8000354:	4b06      	ldr	r3, [pc, #24]	@ (8000370 <MX_ADC1_Init+0x154>)
 8000356:	0011      	movs	r1, r2
 8000358:	0018      	movs	r0, r3
 800035a:	f001 fbc5 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8000362:	f000 fa41 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000366:	46c0      	nop			@ (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b004      	add	sp, #16
 800036c:	bd80      	pop	{r7, pc}
 800036e:	46c0      	nop			@ (mov r8, r8)
 8000370:	20000028 	.word	0x20000028
 8000374:	40012400 	.word	0x40012400
 8000378:	18000040 	.word	0x18000040
 800037c:	1c000080 	.word	0x1c000080
 8000380:	24000200 	.word	0x24000200
 8000384:	14000020 	.word	0x14000020
 8000388:	b4002000 	.word	0xb4002000

0800038c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b08b      	sub	sp, #44	@ 0x2c
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000394:	2414      	movs	r4, #20
 8000396:	193b      	adds	r3, r7, r4
 8000398:	0018      	movs	r0, r3
 800039a:	2314      	movs	r3, #20
 800039c:	001a      	movs	r2, r3
 800039e:	2100      	movs	r1, #0
 80003a0:	f005 fc2d 	bl	8005bfe <memset>
  if(adcHandle->Instance==ADC1)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a3f      	ldr	r2, [pc, #252]	@ (80004a8 <HAL_ADC_MspInit+0x11c>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d177      	bne.n	800049e <HAL_ADC_MspInit+0x112>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80003ae:	4b3f      	ldr	r3, [pc, #252]	@ (80004ac <HAL_ADC_MspInit+0x120>)
 80003b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003b2:	4b3e      	ldr	r3, [pc, #248]	@ (80004ac <HAL_ADC_MspInit+0x120>)
 80003b4:	2180      	movs	r1, #128	@ 0x80
 80003b6:	0349      	lsls	r1, r1, #13
 80003b8:	430a      	orrs	r2, r1
 80003ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80003bc:	4b3b      	ldr	r3, [pc, #236]	@ (80004ac <HAL_ADC_MspInit+0x120>)
 80003be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003c0:	2380      	movs	r3, #128	@ 0x80
 80003c2:	035b      	lsls	r3, r3, #13
 80003c4:	4013      	ands	r3, r2
 80003c6:	613b      	str	r3, [r7, #16]
 80003c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ca:	4b38      	ldr	r3, [pc, #224]	@ (80004ac <HAL_ADC_MspInit+0x120>)
 80003cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003ce:	4b37      	ldr	r3, [pc, #220]	@ (80004ac <HAL_ADC_MspInit+0x120>)
 80003d0:	2101      	movs	r1, #1
 80003d2:	430a      	orrs	r2, r1
 80003d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80003d6:	4b35      	ldr	r3, [pc, #212]	@ (80004ac <HAL_ADC_MspInit+0x120>)
 80003d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003da:	2201      	movs	r2, #1
 80003dc:	4013      	ands	r3, r2
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b32      	ldr	r3, [pc, #200]	@ (80004ac <HAL_ADC_MspInit+0x120>)
 80003e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003e6:	4b31      	ldr	r3, [pc, #196]	@ (80004ac <HAL_ADC_MspInit+0x120>)
 80003e8:	2102      	movs	r1, #2
 80003ea:	430a      	orrs	r2, r1
 80003ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80003ee:	4b2f      	ldr	r3, [pc, #188]	@ (80004ac <HAL_ADC_MspInit+0x120>)
 80003f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003f2:	2202      	movs	r2, #2
 80003f4:	4013      	ands	r3, r2
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80003fa:	193b      	adds	r3, r7, r4
 80003fc:	22e0      	movs	r2, #224	@ 0xe0
 80003fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000400:	193b      	adds	r3, r7, r4
 8000402:	2203      	movs	r2, #3
 8000404:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	193b      	adds	r3, r7, r4
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	193a      	adds	r2, r7, r4
 800040e:	23a0      	movs	r3, #160	@ 0xa0
 8000410:	05db      	lsls	r3, r3, #23
 8000412:	0011      	movs	r1, r2
 8000414:	0018      	movs	r0, r3
 8000416:	f002 fa0d 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800041a:	193b      	adds	r3, r7, r4
 800041c:	2202      	movs	r2, #2
 800041e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000420:	193b      	adds	r3, r7, r4
 8000422:	2203      	movs	r2, #3
 8000424:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	193b      	adds	r3, r7, r4
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042c:	193b      	adds	r3, r7, r4
 800042e:	4a20      	ldr	r2, [pc, #128]	@ (80004b0 <HAL_ADC_MspInit+0x124>)
 8000430:	0019      	movs	r1, r3
 8000432:	0010      	movs	r0, r2
 8000434:	f002 f9fe 	bl	8002834 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000438:	4b1e      	ldr	r3, [pc, #120]	@ (80004b4 <HAL_ADC_MspInit+0x128>)
 800043a:	4a1f      	ldr	r2, [pc, #124]	@ (80004b8 <HAL_ADC_MspInit+0x12c>)
 800043c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800043e:	4b1d      	ldr	r3, [pc, #116]	@ (80004b4 <HAL_ADC_MspInit+0x128>)
 8000440:	2205      	movs	r2, #5
 8000442:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <HAL_ADC_MspInit+0x128>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <HAL_ADC_MspInit+0x128>)
 800044c:	2200      	movs	r2, #0
 800044e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000450:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <HAL_ADC_MspInit+0x128>)
 8000452:	2280      	movs	r2, #128	@ 0x80
 8000454:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000456:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <HAL_ADC_MspInit+0x128>)
 8000458:	2280      	movs	r2, #128	@ 0x80
 800045a:	0052      	lsls	r2, r2, #1
 800045c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800045e:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <HAL_ADC_MspInit+0x128>)
 8000460:	2280      	movs	r2, #128	@ 0x80
 8000462:	00d2      	lsls	r2, r2, #3
 8000464:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000466:	4b13      	ldr	r3, [pc, #76]	@ (80004b4 <HAL_ADC_MspInit+0x128>)
 8000468:	2220      	movs	r2, #32
 800046a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800046c:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <HAL_ADC_MspInit+0x128>)
 800046e:	2200      	movs	r2, #0
 8000470:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000472:	4b10      	ldr	r3, [pc, #64]	@ (80004b4 <HAL_ADC_MspInit+0x128>)
 8000474:	0018      	movs	r0, r3
 8000476:	f001 ff21 	bl	80022bc <HAL_DMA_Init>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800047e:	f000 f9b3 	bl	80007e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a0b      	ldr	r2, [pc, #44]	@ (80004b4 <HAL_ADC_MspInit+0x128>)
 8000486:	651a      	str	r2, [r3, #80]	@ 0x50
 8000488:	4b0a      	ldr	r3, [pc, #40]	@ (80004b4 <HAL_ADC_MspInit+0x128>)
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2100      	movs	r1, #0
 8000492:	200c      	movs	r0, #12
 8000494:	f001 fee0 	bl	8002258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000498:	200c      	movs	r0, #12
 800049a:	f001 fef2 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b00b      	add	sp, #44	@ 0x2c
 80004a4:	bd90      	pop	{r4, r7, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	40012400 	.word	0x40012400
 80004ac:	40021000 	.word	0x40021000
 80004b0:	50000400 	.word	0x50000400
 80004b4:	2000008c 	.word	0x2000008c
 80004b8:	40020008 	.word	0x40020008

080004bc <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]





}
 80004c4:	46c0      	nop			@ (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b002      	add	sp, #8
 80004ca:	bd80      	pop	{r7, pc}

080004cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d2:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <MX_DMA_Init+0x48>)
 80004d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80004d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <MX_DMA_Init+0x48>)
 80004d8:	2101      	movs	r1, #1
 80004da:	430a      	orrs	r2, r1
 80004dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80004de:	4b0d      	ldr	r3, [pc, #52]	@ (8000514 <MX_DMA_Init+0x48>)
 80004e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80004e2:	2201      	movs	r2, #1
 80004e4:	4013      	ands	r3, r2
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	2009      	movs	r0, #9
 80004f0:	f001 feb2 	bl	8002258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004f4:	2009      	movs	r0, #9
 80004f6:	f001 fec4 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	200a      	movs	r0, #10
 8000500:	f001 feaa 	bl	8002258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000504:	200a      	movs	r0, #10
 8000506:	f001 febc 	bl	8002282 <HAL_NVIC_EnableIRQ>

}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b002      	add	sp, #8
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	40021000 	.word	0x40021000

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b089      	sub	sp, #36	@ 0x24
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	240c      	movs	r4, #12
 8000520:	193b      	adds	r3, r7, r4
 8000522:	0018      	movs	r0, r3
 8000524:	2314      	movs	r3, #20
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f005 fb68 	bl	8005bfe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052e:	4b44      	ldr	r3, [pc, #272]	@ (8000640 <MX_GPIO_Init+0x128>)
 8000530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000532:	4b43      	ldr	r3, [pc, #268]	@ (8000640 <MX_GPIO_Init+0x128>)
 8000534:	2120      	movs	r1, #32
 8000536:	430a      	orrs	r2, r1
 8000538:	635a      	str	r2, [r3, #52]	@ 0x34
 800053a:	4b41      	ldr	r3, [pc, #260]	@ (8000640 <MX_GPIO_Init+0x128>)
 800053c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800053e:	2220      	movs	r2, #32
 8000540:	4013      	ands	r3, r2
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b3e      	ldr	r3, [pc, #248]	@ (8000640 <MX_GPIO_Init+0x128>)
 8000548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800054a:	4b3d      	ldr	r3, [pc, #244]	@ (8000640 <MX_GPIO_Init+0x128>)
 800054c:	2101      	movs	r1, #1
 800054e:	430a      	orrs	r2, r1
 8000550:	635a      	str	r2, [r3, #52]	@ 0x34
 8000552:	4b3b      	ldr	r3, [pc, #236]	@ (8000640 <MX_GPIO_Init+0x128>)
 8000554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000556:	2201      	movs	r2, #1
 8000558:	4013      	ands	r3, r2
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b38      	ldr	r3, [pc, #224]	@ (8000640 <MX_GPIO_Init+0x128>)
 8000560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000562:	4b37      	ldr	r3, [pc, #220]	@ (8000640 <MX_GPIO_Init+0x128>)
 8000564:	2102      	movs	r1, #2
 8000566:	430a      	orrs	r2, r1
 8000568:	635a      	str	r2, [r3, #52]	@ 0x34
 800056a:	4b35      	ldr	r3, [pc, #212]	@ (8000640 <MX_GPIO_Init+0x128>)
 800056c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800056e:	2202      	movs	r2, #2
 8000570:	4013      	ands	r3, r2
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000576:	4b33      	ldr	r3, [pc, #204]	@ (8000644 <MX_GPIO_Init+0x12c>)
 8000578:	2200      	movs	r2, #0
 800057a:	2101      	movs	r1, #1
 800057c:	0018      	movs	r0, r3
 800057e:	f002 fabd 	bl	8002afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|HALL_CS_Pin, GPIO_PIN_RESET);
 8000582:	4931      	ldr	r1, [pc, #196]	@ (8000648 <MX_GPIO_Init+0x130>)
 8000584:	23a0      	movs	r3, #160	@ 0xa0
 8000586:	05db      	lsls	r3, r3, #23
 8000588:	2200      	movs	r2, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f002 fab6 	bl	8002afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	2201      	movs	r2, #1
 8000594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2201      	movs	r2, #1
 800059a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	4a26      	ldr	r2, [pc, #152]	@ (8000644 <MX_GPIO_Init+0x12c>)
 80005ac:	0019      	movs	r1, r3
 80005ae:	0010      	movs	r0, r2
 80005b0:	f002 f940 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	220c      	movs	r2, #12
 80005b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	2201      	movs	r2, #1
 80005be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	2202      	movs	r2, #2
 80005ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	193a      	adds	r2, r7, r4
 80005ce:	23a0      	movs	r3, #160	@ 0xa0
 80005d0:	05db      	lsls	r3, r3, #23
 80005d2:	0011      	movs	r1, r2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f002 f92d 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	2280      	movs	r2, #128	@ 0x80
 80005de:	0152      	lsls	r2, r2, #5
 80005e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	2288      	movs	r2, #136	@ 0x88
 80005e6:	0352      	lsls	r2, r2, #13
 80005e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	193a      	adds	r2, r7, r4
 80005f2:	23a0      	movs	r3, #160	@ 0xa0
 80005f4:	05db      	lsls	r3, r3, #23
 80005f6:	0011      	movs	r1, r2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f002 f91b 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_CS_Pin */
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 80005fe:	0021      	movs	r1, r4
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2280      	movs	r2, #128	@ 0x80
 8000604:	0212      	lsls	r2, r2, #8
 8000606:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2201      	movs	r2, #1
 800060c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 800061a:	187a      	adds	r2, r7, r1
 800061c:	23a0      	movs	r3, #160	@ 0xa0
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f002 f906 	bl	8002834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	2007      	movs	r0, #7
 800062e:	f001 fe13 	bl	8002258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000632:	2007      	movs	r0, #7
 8000634:	f001 fe25 	bl	8002282 <HAL_NVIC_EnableIRQ>

}
 8000638:	46c0      	nop			@ (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b009      	add	sp, #36	@ 0x24
 800063e:	bd90      	pop	{r4, r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	50001400 	.word	0x50001400
 8000648:	0000800c 	.word	0x0000800c

0800064c <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	0002      	movs	r2, r0
 8000654:	1dbb      	adds	r3, r7, #6
 8000656:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_0);
 8000658:	4b04      	ldr	r3, [pc, #16]	@ (800066c <HAL_GPIO_EXTI_Rising_Callback+0x20>)
 800065a:	2101      	movs	r1, #1
 800065c:	0018      	movs	r0, r3
 800065e:	f002 fa6a 	bl	8002b36 <HAL_GPIO_TogglePin>


}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	50001400 	.word	0x50001400

08000670 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	0002      	movs	r2, r0
 8000678:	1dbb      	adds	r3, r7, #6
 800067a:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_0);
 800067c:	4b04      	ldr	r3, [pc, #16]	@ (8000690 <HAL_GPIO_EXTI_Falling_Callback+0x20>)
 800067e:	2101      	movs	r1, #1
 8000680:	0018      	movs	r0, r3
 8000682:	f002 fa58 	bl	8002b36 <HAL_GPIO_TogglePin>



}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	50001400 	.word	0x50001400

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fcc2 	bl	8001020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f846 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f7ff ff3a 	bl	8000518 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a4:	f7ff ff12 	bl	80004cc <MX_DMA_Init>
  MX_ADC1_Init();
 80006a8:	f7ff fdb8 	bl	800021c <MX_ADC1_Init>
  MX_SPI2_Init();
 80006ac:	f000 f8a2 	bl	80007f4 <MX_SPI2_Init>
  MX_TIM1_Init();
 80006b0:	f000 fa96 	bl	8000be0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(HALL_CS_GPIO_Port, HALL_CS_Pin, GPIO_PIN_SET);
 80006b4:	2380      	movs	r3, #128	@ 0x80
 80006b6:	0219      	lsls	r1, r3, #8
 80006b8:	23a0      	movs	r3, #160	@ 0xa0
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	2201      	movs	r2, #1
 80006be:	0018      	movs	r0, r3
 80006c0:	f002 fa1c 	bl	8002afc <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80006c4:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <main+0x8c>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	0018      	movs	r0, r3
 80006ca:	f003 ffdb 	bl	8004684 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <main+0x8c>)
 80006d0:	2100      	movs	r1, #0
 80006d2:	0018      	movs	r0, r3
 80006d4:	f005 f8b6 	bl	8005844 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <main+0x8c>)
 80006da:	2104      	movs	r1, #4
 80006dc:	0018      	movs	r0, r3
 80006de:	f003 ffd1 	bl	8004684 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <main+0x8c>)
 80006e4:	2104      	movs	r1, #4
 80006e6:	0018      	movs	r0, r3
 80006e8:	f005 f8ac 	bl	8005844 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <main+0x8c>)
 80006ee:	2108      	movs	r1, #8
 80006f0:	0018      	movs	r0, r3
 80006f2:	f003 ffc7 	bl	8004684 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 80006f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <main+0x8c>)
 80006f8:	2108      	movs	r1, #8
 80006fa:	0018      	movs	r0, r3
 80006fc:	f005 f8a2 	bl	8005844 <HAL_TIMEx_PWMN_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 5);
 8000700:	4908      	ldr	r1, [pc, #32]	@ (8000724 <main+0x90>)
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <main+0x94>)
 8000704:	2205      	movs	r2, #5
 8000706:	0018      	movs	r0, r3
 8000708:	f001 f830 	bl	800176c <HAL_ADC_Start_DMA>


	//HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4);

	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 800070c:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <main+0x8c>)
 800070e:	210c      	movs	r1, #12
 8000710:	0018      	movs	r0, r3
 8000712:	f004 f895 	bl	8004840 <HAL_TIM_PWM_Start_IT>
	while (1)
	{

		//HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_0);

		HAL_Delay(100);
 8000716:	2064      	movs	r0, #100	@ 0x64
 8000718:	f000 fd08 	bl	800112c <HAL_Delay>
 800071c:	e7fb      	b.n	8000716 <main+0x82>
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	20000218 	.word	0x20000218
 8000724:	200000e8 	.word	0x200000e8
 8000728:	20000028 	.word	0x20000028

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b093      	sub	sp, #76	@ 0x4c
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	2410      	movs	r4, #16
 8000734:	193b      	adds	r3, r7, r4
 8000736:	0018      	movs	r0, r3
 8000738:	2338      	movs	r3, #56	@ 0x38
 800073a:	001a      	movs	r2, r3
 800073c:	2100      	movs	r1, #0
 800073e:	f005 fa5e 	bl	8005bfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000742:	003b      	movs	r3, r7
 8000744:	0018      	movs	r0, r3
 8000746:	2310      	movs	r3, #16
 8000748:	001a      	movs	r2, r3
 800074a:	2100      	movs	r1, #0
 800074c:	f005 fa57 	bl	8005bfe <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	2380      	movs	r3, #128	@ 0x80
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	0018      	movs	r0, r3
 8000756:	f002 fa33 	bl	8002bc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2202      	movs	r2, #2
 800075e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2280      	movs	r2, #128	@ 0x80
 8000764:	0052      	lsls	r2, r2, #1
 8000766:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000768:	0021      	movs	r1, r4
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2240      	movs	r2, #64	@ 0x40
 8000774:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2202      	movs	r2, #2
 800077a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2202      	movs	r2, #2
 8000780:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2208      	movs	r2, #8
 800078c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	22c0      	movs	r2, #192	@ 0xc0
 8000792:	02d2      	lsls	r2, r2, #11
 8000794:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2280      	movs	r2, #128	@ 0x80
 800079a:	0492      	lsls	r2, r2, #18
 800079c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2280      	movs	r2, #128	@ 0x80
 80007a2:	0592      	lsls	r2, r2, #22
 80007a4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	0018      	movs	r0, r3
 80007aa:	f002 fa49 	bl	8002c40 <HAL_RCC_OscConfig>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007b2:	f000 f819 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	003b      	movs	r3, r7
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	003b      	movs	r3, r7
 80007be:	2202      	movs	r2, #2
 80007c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ce:	003b      	movs	r3, r7
 80007d0:	2102      	movs	r1, #2
 80007d2:	0018      	movs	r0, r3
 80007d4:	f002 fd4e 	bl	8003274 <HAL_RCC_ClockConfig>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007dc:	f000 f804 	bl	80007e8 <Error_Handler>
  }
}
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b013      	add	sp, #76	@ 0x4c
 80007e6:	bd90      	pop	{r4, r7, pc}

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	e7fd      	b.n	80007f0 <Error_Handler+0x8>

080007f4 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_SPI2_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	@ (800086c <MX_SPI2_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <MX_SPI2_Init+0x74>)
 8000800:	2282      	movs	r2, #130	@ 0x82
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_SPI2_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_SPI2_Init+0x74>)
 800080e:	22e0      	movs	r2, #224	@ 0xe0
 8000810:	00d2      	lsls	r2, r2, #3
 8000812:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_SPI2_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_SPI2_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_SPI2_Init+0x74>)
 8000822:	2280      	movs	r2, #128	@ 0x80
 8000824:	0092      	lsls	r2, r2, #2
 8000826:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_SPI2_Init+0x74>)
 800082a:	2208      	movs	r2, #8
 800082c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_SPI2_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_SPI2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <MX_SPI2_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_SPI2_Init+0x74>)
 8000842:	2207      	movs	r2, #7
 8000844:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <MX_SPI2_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_SPI2_Init+0x74>)
 800084e:	2208      	movs	r2, #8
 8000850:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000852:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <MX_SPI2_Init+0x74>)
 8000854:	0018      	movs	r0, r3
 8000856:	f003 f811 	bl	800387c <HAL_SPI_Init>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800085e:	f7ff ffc3 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000f4 	.word	0x200000f4
 800086c:	40003800 	.word	0x40003800

08000870 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b08b      	sub	sp, #44	@ 0x2c
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	2414      	movs	r4, #20
 800087a:	193b      	adds	r3, r7, r4
 800087c:	0018      	movs	r0, r3
 800087e:	2314      	movs	r3, #20
 8000880:	001a      	movs	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	f005 f9bb 	bl	8005bfe <memset>
  if(spiHandle->Instance==SPI2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a65      	ldr	r2, [pc, #404]	@ (8000a24 <HAL_SPI_MspInit+0x1b4>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d000      	beq.n	8000894 <HAL_SPI_MspInit+0x24>
 8000892:	e0c2      	b.n	8000a1a <HAL_SPI_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000894:	4b64      	ldr	r3, [pc, #400]	@ (8000a28 <HAL_SPI_MspInit+0x1b8>)
 8000896:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000898:	4b63      	ldr	r3, [pc, #396]	@ (8000a28 <HAL_SPI_MspInit+0x1b8>)
 800089a:	2180      	movs	r1, #128	@ 0x80
 800089c:	01c9      	lsls	r1, r1, #7
 800089e:	430a      	orrs	r2, r1
 80008a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008a2:	4b61      	ldr	r3, [pc, #388]	@ (8000a28 <HAL_SPI_MspInit+0x1b8>)
 80008a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	01db      	lsls	r3, r3, #7
 80008aa:	4013      	ands	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b5d      	ldr	r3, [pc, #372]	@ (8000a28 <HAL_SPI_MspInit+0x1b8>)
 80008b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008b4:	4b5c      	ldr	r3, [pc, #368]	@ (8000a28 <HAL_SPI_MspInit+0x1b8>)
 80008b6:	2101      	movs	r1, #1
 80008b8:	430a      	orrs	r2, r1
 80008ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80008bc:	4b5a      	ldr	r3, [pc, #360]	@ (8000a28 <HAL_SPI_MspInit+0x1b8>)
 80008be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008c0:	2201      	movs	r2, #1
 80008c2:	4013      	ands	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c8:	4b57      	ldr	r3, [pc, #348]	@ (8000a28 <HAL_SPI_MspInit+0x1b8>)
 80008ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008cc:	4b56      	ldr	r3, [pc, #344]	@ (8000a28 <HAL_SPI_MspInit+0x1b8>)
 80008ce:	2102      	movs	r1, #2
 80008d0:	430a      	orrs	r2, r1
 80008d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80008d4:	4b54      	ldr	r3, [pc, #336]	@ (8000a28 <HAL_SPI_MspInit+0x1b8>)
 80008d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008d8:	2202      	movs	r2, #2
 80008da:	4013      	ands	r3, r2
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2201      	movs	r2, #1
 80008e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	2202      	movs	r2, #2
 80008ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	193a      	adds	r2, r7, r4
 8000900:	23a0      	movs	r3, #160	@ 0xa0
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f001 ff94 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2240      	movs	r2, #64	@ 0x40
 8000910:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2202      	movs	r2, #2
 8000916:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2204      	movs	r2, #4
 8000928:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	193b      	adds	r3, r7, r4
 800092c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a2c <HAL_SPI_MspInit+0x1bc>)
 800092e:	0019      	movs	r1, r3
 8000930:	0010      	movs	r0, r2
 8000932:	f001 ff7f 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000936:	0021      	movs	r1, r4
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2202      	movs	r2, #2
 8000942:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2201      	movs	r2, #1
 8000954:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	187b      	adds	r3, r7, r1
 8000958:	4a34      	ldr	r2, [pc, #208]	@ (8000a2c <HAL_SPI_MspInit+0x1bc>)
 800095a:	0019      	movs	r1, r3
 800095c:	0010      	movs	r0, r2
 800095e:	f001 ff69 	bl	8002834 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8000962:	4b33      	ldr	r3, [pc, #204]	@ (8000a30 <HAL_SPI_MspInit+0x1c0>)
 8000964:	4a33      	ldr	r2, [pc, #204]	@ (8000a34 <HAL_SPI_MspInit+0x1c4>)
 8000966:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8000968:	4b31      	ldr	r3, [pc, #196]	@ (8000a30 <HAL_SPI_MspInit+0x1c0>)
 800096a:	2212      	movs	r2, #18
 800096c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800096e:	4b30      	ldr	r3, [pc, #192]	@ (8000a30 <HAL_SPI_MspInit+0x1c0>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000974:	4b2e      	ldr	r3, [pc, #184]	@ (8000a30 <HAL_SPI_MspInit+0x1c0>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800097a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a30 <HAL_SPI_MspInit+0x1c0>)
 800097c:	2280      	movs	r2, #128	@ 0x80
 800097e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <HAL_SPI_MspInit+0x1c0>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000986:	4b2a      	ldr	r3, [pc, #168]	@ (8000a30 <HAL_SPI_MspInit+0x1c0>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800098c:	4b28      	ldr	r3, [pc, #160]	@ (8000a30 <HAL_SPI_MspInit+0x1c0>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000992:	4b27      	ldr	r3, [pc, #156]	@ (8000a30 <HAL_SPI_MspInit+0x1c0>)
 8000994:	2280      	movs	r2, #128	@ 0x80
 8000996:	0152      	lsls	r2, r2, #5
 8000998:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800099a:	4b25      	ldr	r3, [pc, #148]	@ (8000a30 <HAL_SPI_MspInit+0x1c0>)
 800099c:	0018      	movs	r0, r3
 800099e:	f001 fc8d 	bl	80022bc <HAL_DMA_Init>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <HAL_SPI_MspInit+0x13a>
    {
      Error_Handler();
 80009a6:	f7ff ff1f 	bl	80007e8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a20      	ldr	r2, [pc, #128]	@ (8000a30 <HAL_SPI_MspInit+0x1c0>)
 80009ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80009b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <HAL_SPI_MspInit+0x1c0>)
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 80009b6:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <HAL_SPI_MspInit+0x1c8>)
 80009b8:	4a20      	ldr	r2, [pc, #128]	@ (8000a3c <HAL_SPI_MspInit+0x1cc>)
 80009ba:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <HAL_SPI_MspInit+0x1c8>)
 80009be:	2213      	movs	r2, #19
 80009c0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <HAL_SPI_MspInit+0x1c8>)
 80009c4:	2210      	movs	r2, #16
 80009c6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <HAL_SPI_MspInit+0x1c8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <HAL_SPI_MspInit+0x1c8>)
 80009d0:	2280      	movs	r2, #128	@ 0x80
 80009d2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009d4:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <HAL_SPI_MspInit+0x1c8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <HAL_SPI_MspInit+0x1c8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80009e0:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <HAL_SPI_MspInit+0x1c8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <HAL_SPI_MspInit+0x1c8>)
 80009e8:	2280      	movs	r2, #128	@ 0x80
 80009ea:	0152      	lsls	r2, r2, #5
 80009ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80009ee:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <HAL_SPI_MspInit+0x1c8>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 fc63 	bl	80022bc <HAL_DMA_Init>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <HAL_SPI_MspInit+0x18e>
    {
      Error_Handler();
 80009fa:	f7ff fef5 	bl	80007e8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a0d      	ldr	r2, [pc, #52]	@ (8000a38 <HAL_SPI_MspInit+0x1c8>)
 8000a02:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <HAL_SPI_MspInit+0x1c8>)
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	201a      	movs	r0, #26
 8000a10:	f001 fc22 	bl	8002258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000a14:	201a      	movs	r0, #26
 8000a16:	f001 fc34 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b00b      	add	sp, #44	@ 0x2c
 8000a20:	bd90      	pop	{r4, r7, pc}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	40003800 	.word	0x40003800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	50000400 	.word	0x50000400
 8000a30:	20000158 	.word	0x20000158
 8000a34:	4002001c 	.word	0x4002001c
 8000a38:	200001b4 	.word	0x200001b4
 8000a3c:	40020030 	.word	0x40020030

08000a40 <HAL_SPI_TxRxCpltCallback>:
  /* USER CODE END SPI2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	uint16_t raw = ((uint16_t)angleraw[0] << 8) | angleraw[1];
 8000a48:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_SPI_TxRxCpltCallback+0x60>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	b21a      	sxth	r2, r3
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <HAL_SPI_TxRxCpltCallback+0x60>)
 8000a54:	785b      	ldrb	r3, [r3, #1]
 8000a56:	b21b      	sxth	r3, r3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	b21a      	sxth	r2, r3
 8000a5c:	210e      	movs	r1, #14
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	801a      	strh	r2, [r3, #0]
	finalangle=raw;
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <HAL_SPI_TxRxCpltCallback+0x64>)
 8000a64:	187a      	adds	r2, r7, r1
 8000a66:	8812      	ldrh	r2, [r2, #0]
 8000a68:	801a      	strh	r2, [r3, #0]

	 HAL_GPIO_WritePin(HALL_CS_GPIO_Port, HALL_CS_Pin, GPIO_PIN_SET);
 8000a6a:	2380      	movs	r3, #128	@ 0x80
 8000a6c:	0219      	lsls	r1, r3, #8
 8000a6e:	23a0      	movs	r3, #160	@ 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	2201      	movs	r2, #1
 8000a74:	0018      	movs	r0, r3
 8000a76:	f002 f841 	bl	8002afc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);
 8000a7a:	23a0      	movs	r3, #160	@ 0xa0
 8000a7c:	05db      	lsls	r3, r3, #23
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2104      	movs	r1, #4
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 f83a 	bl	8002afc <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,0);
 8000a88:	23a0      	movs	r3, #160	@ 0xa0
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2108      	movs	r1, #8
 8000a90:	0018      	movs	r0, r3
 8000a92:	f002 f833 	bl	8002afc <HAL_GPIO_WritePin>



}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b004      	add	sp, #16
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	20000210 	.word	0x20000210
 8000aa4:	200000f2 	.word	0x200000f2

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <HAL_MspInit+0x44>)
 8000ab0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <HAL_MspInit+0x44>)
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <HAL_MspInit+0x44>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_MspInit+0x44>)
 8000ac8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <HAL_MspInit+0x44>)
 8000acc:	2180      	movs	r1, #128	@ 0x80
 8000ace:	0549      	lsls	r1, r1, #21
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_MspInit+0x44>)
 8000ad6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ad8:	2380      	movs	r3, #128	@ 0x80
 8000ada:	055b      	lsls	r3, r3, #21
 8000adc:	4013      	ands	r3, r2
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	40021000 	.word	0x40021000

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af4:	46c0      	nop			@ (mov r8, r8)
 8000af6:	e7fd      	b.n	8000af4 <NMI_Handler+0x4>

08000af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afc:	46c0      	nop			@ (mov r8, r8)
 8000afe:	e7fd      	b.n	8000afc <HardFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 faec 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000b26:	2380      	movs	r3, #128	@ 0x80
 8000b28:	015b      	lsls	r3, r3, #5
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f002 f81e 	bl	8002b6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b3c:	4b03      	ldr	r3, [pc, #12]	@ (8000b4c <DMA1_Channel1_IRQHandler+0x14>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f001 fd36 	bl	80025b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	2000008c 	.word	0x2000008c

08000b50 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f001 fd2a 	bl	80025b0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000b5c:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f001 fd26 	bl	80025b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000b64:	46c0      	nop			@ (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	20000158 	.word	0x20000158
 8000b70:	200001b4 	.word	0x200001b4

08000b74 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <ADC1_IRQHandler+0x14>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 fe84 	bl	8001888 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	20000028 	.word	0x20000028

08000b8c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b90:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000b92:	0018      	movs	r0, r3
 8000b94:	f003 ff78 	bl	8004a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	20000218 	.word	0x20000218

08000ba4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ba8:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <TIM1_CC_IRQHandler+0x14>)
 8000baa:	0018      	movs	r0, r3
 8000bac:	f003 ff6c 	bl	8004a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	20000218 	.word	0x20000218

08000bbc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000bc0:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <SPI2_IRQHandler+0x14>)
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f003 f8bc 	bl	8003d40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000bc8:	46c0      	nop			@ (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	200000f4 	.word	0x200000f4

08000bd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	46c0      	nop			@ (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b09c      	sub	sp, #112	@ 0x70
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	2360      	movs	r3, #96	@ 0x60
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	0018      	movs	r0, r3
 8000bec:	2310      	movs	r3, #16
 8000bee:	001a      	movs	r2, r3
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	f005 f804 	bl	8005bfe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf6:	2354      	movs	r3, #84	@ 0x54
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	230c      	movs	r3, #12
 8000bfe:	001a      	movs	r2, r3
 8000c00:	2100      	movs	r1, #0
 8000c02:	f004 fffc 	bl	8005bfe <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c06:	2338      	movs	r3, #56	@ 0x38
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	231c      	movs	r3, #28
 8000c0e:	001a      	movs	r2, r3
 8000c10:	2100      	movs	r1, #0
 8000c12:	f004 fff4 	bl	8005bfe <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	0018      	movs	r0, r3
 8000c1a:	2334      	movs	r3, #52	@ 0x34
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f004 ffed 	bl	8005bfe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c24:	4b64      	ldr	r3, [pc, #400]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000c26:	4a65      	ldr	r2, [pc, #404]	@ (8000dbc <MX_TIM1_Init+0x1dc>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c2a:	4b63      	ldr	r3, [pc, #396]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c30:	4b61      	ldr	r3, [pc, #388]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000c32:	2220      	movs	r2, #32
 8000c34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1600-1;
 8000c36:	4b60      	ldr	r3, [pc, #384]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000c38:	4a61      	ldr	r2, [pc, #388]	@ (8000dc0 <MX_TIM1_Init+0x1e0>)
 8000c3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b5e      	ldr	r3, [pc, #376]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c42:	4b5d      	ldr	r3, [pc, #372]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b5b      	ldr	r3, [pc, #364]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c4e:	4b5a      	ldr	r3, [pc, #360]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000c50:	0018      	movs	r0, r3
 8000c52:	f003 fc5f 	bl	8004514 <HAL_TIM_Base_Init>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000c5a:	f7ff fdc5 	bl	80007e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5e:	2160      	movs	r1, #96	@ 0x60
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2280      	movs	r2, #128	@ 0x80
 8000c64:	0152      	lsls	r2, r2, #5
 8000c66:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c68:	187a      	adds	r2, r7, r1
 8000c6a:	4b53      	ldr	r3, [pc, #332]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f004 f912 	bl	8004e98 <HAL_TIM_ConfigClockSource>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000c78:	f7ff fdb6 	bl	80007e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c7c:	4b4e      	ldr	r3, [pc, #312]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f003 fca0 	bl	80045c4 <HAL_TIM_PWM_Init>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000c88:	f7ff fdae 	bl	80007e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8c:	2154      	movs	r1, #84	@ 0x54
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC4REF;
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	22e0      	movs	r2, #224	@ 0xe0
 8000c98:	03d2      	lsls	r2, r2, #15
 8000c9a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ca2:	187a      	adds	r2, r7, r1
 8000ca4:	4b44      	ldr	r3, [pc, #272]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f004 fe69 	bl	8005980 <HAL_TIMEx_MasterConfigSynchronization>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000cb2:	f7ff fd99 	bl	80007e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb6:	2138      	movs	r1, #56	@ 0x38
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2260      	movs	r2, #96	@ 0x60
 8000cbc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 800;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	22c8      	movs	r2, #200	@ 0xc8
 8000cc2:	0092      	lsls	r2, r2, #2
 8000cc4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce4:	1879      	adds	r1, r7, r1
 8000ce6:	4b34      	ldr	r3, [pc, #208]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	0018      	movs	r0, r3
 8000cec:	f003 ffd4 	bl	8004c98 <HAL_TIM_PWM_ConfigChannel>
 8000cf0:	1e03      	subs	r3, r0, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000cf4:	f7ff fd78 	bl	80007e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cf8:	2338      	movs	r3, #56	@ 0x38
 8000cfa:	18f9      	adds	r1, r7, r3
 8000cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000cfe:	2204      	movs	r2, #4
 8000d00:	0018      	movs	r0, r3
 8000d02:	f003 ffc9 	bl	8004c98 <HAL_TIM_PWM_ConfigChannel>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000d0a:	f7ff fd6d 	bl	80007e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d0e:	2338      	movs	r3, #56	@ 0x38
 8000d10:	18f9      	adds	r1, r7, r3
 8000d12:	4b29      	ldr	r3, [pc, #164]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000d14:	2208      	movs	r2, #8
 8000d16:	0018      	movs	r0, r3
 8000d18:	f003 ffbe 	bl	8004c98 <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	1e03      	subs	r3, r0, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000d20:	f7ff fd62 	bl	80007e8 <Error_Handler>
  }
  sConfigOC.Pulse = 10;
 8000d24:	2138      	movs	r1, #56	@ 0x38
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	220a      	movs	r2, #10
 8000d2a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d2c:	1879      	adds	r1, r7, r1
 8000d2e:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000d30:	220c      	movs	r2, #12
 8000d32:	0018      	movs	r0, r3
 8000d34:	f003 ffb0 	bl	8004c98 <HAL_TIM_PWM_ConfigChannel>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8000d3c:	f7ff fd54 	bl	80007e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 26;
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	221a      	movs	r2, #26
 8000d56:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2280      	movs	r2, #128	@ 0x80
 8000d5c:	0152      	lsls	r2, r2, #5
 8000d5e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2280      	movs	r2, #128	@ 0x80
 8000d64:	0192      	lsls	r2, r2, #6
 8000d66:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 3;
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2280      	movs	r2, #128	@ 0x80
 8000d7e:	0492      	lsls	r2, r2, #18
 8000d80:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d94:	1d3a      	adds	r2, r7, #4
 8000d96:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000d98:	0011      	movs	r1, r2
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f004 fe58 	bl	8005a50 <HAL_TIMEx_ConfigBreakDeadTime>
 8000da0:	1e03      	subs	r3, r0, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM1_Init+0x1c8>
  {
    Error_Handler();
 8000da4:	f7ff fd20 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <MX_TIM1_Init+0x1d8>)
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 f87e 	bl	8000eac <HAL_TIM_MspPostInit>

}
 8000db0:	46c0      	nop			@ (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b01c      	add	sp, #112	@ 0x70
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000218 	.word	0x20000218
 8000dbc:	40012c00 	.word	0x40012c00
 8000dc0:	0000063f 	.word	0x0000063f

08000dc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b095      	sub	sp, #84	@ 0x54
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	233c      	movs	r3, #60	@ 0x3c
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	2314      	movs	r3, #20
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f004 ff11 	bl	8005bfe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	2414      	movs	r4, #20
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	0018      	movs	r0, r3
 8000de2:	2328      	movs	r3, #40	@ 0x28
 8000de4:	001a      	movs	r2, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	f004 ff09 	bl	8005bfe <memset>
  if(tim_baseHandle->Instance==TIM1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea0 <HAL_TIM_Base_MspInit+0xdc>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d150      	bne.n	8000e98 <HAL_TIM_Base_MspInit+0xd4>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	2280      	movs	r2, #128	@ 0x80
 8000dfa:	0392      	lsls	r2, r2, #14
 8000dfc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	2280      	movs	r2, #128	@ 0x80
 8000e02:	03d2      	lsls	r2, r2, #15
 8000e04:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e06:	193b      	adds	r3, r7, r4
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f002 fbbd 	bl	8003588 <HAL_RCCEx_PeriphCLKConfig>
 8000e0e:	1e03      	subs	r3, r0, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_TIM_Base_MspInit+0x52>
    {
      Error_Handler();
 8000e12:	f7ff fce9 	bl	80007e8 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e16:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xe0>)
 8000e18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xe0>)
 8000e1c:	2180      	movs	r1, #128	@ 0x80
 8000e1e:	0109      	lsls	r1, r1, #4
 8000e20:	430a      	orrs	r2, r1
 8000e22:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xe0>)
 8000e26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e28:	2380      	movs	r3, #128	@ 0x80
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xe0>)
 8000e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xe0>)
 8000e38:	2102      	movs	r1, #2
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xe0>)
 8000e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e42:	2202      	movs	r2, #2
 8000e44:	4013      	ands	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e4a:	213c      	movs	r1, #60	@ 0x3c
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2280      	movs	r2, #128	@ 0x80
 8000e50:	0152      	lsls	r2, r2, #5
 8000e52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2212      	movs	r2, #18
 8000e58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2202      	movs	r2, #2
 8000e6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea8 <HAL_TIM_Base_MspInit+0xe4>)
 8000e70:	0019      	movs	r1, r3
 8000e72:	0010      	movs	r0, r2
 8000e74:	f001 fcde 	bl	8002834 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	200d      	movs	r0, #13
 8000e7e:	f001 f9eb 	bl	8002258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000e82:	200d      	movs	r0, #13
 8000e84:	f001 f9fd 	bl	8002282 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	200e      	movs	r0, #14
 8000e8e:	f001 f9e3 	bl	8002258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e92:	200e      	movs	r0, #14
 8000e94:	f001 f9f5 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e98:	46c0      	nop			@ (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b015      	add	sp, #84	@ 0x54
 8000e9e:	bd90      	pop	{r4, r7, pc}
 8000ea0:	40012c00 	.word	0x40012c00
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	50000400 	.word	0x50000400

08000eac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b08b      	sub	sp, #44	@ 0x2c
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	2414      	movs	r4, #20
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	0018      	movs	r0, r3
 8000eba:	2314      	movs	r3, #20
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	f004 fe9d 	bl	8005bfe <memset>
  if(timHandle->Instance==TIM1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a26      	ldr	r2, [pc, #152]	@ (8000f64 <HAL_TIM_MspPostInit+0xb8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d145      	bne.n	8000f5a <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <HAL_TIM_MspPostInit+0xbc>)
 8000ed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ed2:	4b25      	ldr	r3, [pc, #148]	@ (8000f68 <HAL_TIM_MspPostInit+0xbc>)
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eda:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <HAL_TIM_MspPostInit+0xbc>)
 8000edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ede:	2202      	movs	r2, #2
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <HAL_TIM_MspPostInit+0xbc>)
 8000ee8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eea:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <HAL_TIM_MspPostInit+0xbc>)
 8000eec:	2101      	movs	r1, #1
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <HAL_TIM_MspPostInit+0xbc>)
 8000ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	22e0      	movs	r2, #224	@ 0xe0
 8000f02:	0212      	lsls	r2, r2, #8
 8000f04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	2202      	movs	r2, #2
 8000f0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f18:	193b      	adds	r3, r7, r4
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <HAL_TIM_MspPostInit+0xc0>)
 8000f22:	0019      	movs	r1, r3
 8000f24:	0010      	movs	r0, r2
 8000f26:	f001 fc85 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f2a:	0021      	movs	r1, r4
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	22e0      	movs	r2, #224	@ 0xe0
 8000f30:	00d2      	lsls	r2, r2, #3
 8000f32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2202      	movs	r2, #2
 8000f38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2202      	movs	r2, #2
 8000f4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	187a      	adds	r2, r7, r1
 8000f4e:	23a0      	movs	r3, #160	@ 0xa0
 8000f50:	05db      	lsls	r3, r3, #23
 8000f52:	0011      	movs	r1, r2
 8000f54:	0018      	movs	r0, r3
 8000f56:	f001 fc6d 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b00b      	add	sp, #44	@ 0x2c
 8000f60:	bd90      	pop	{r4, r7, pc}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	40012c00 	.word	0x40012c00
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	50000400 	.word	0x50000400

08000f70 <HAL_TIM_OC_DelayElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) // Vérifie que c'est le CH4
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7f1b      	ldrb	r3, [r3, #28]
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d11b      	bne.n	8000fb8 <HAL_TIM_OC_DelayElapsedCallback+0x48>
        {
            // Ton code ici : impulsion GPIO par ex.
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000f80:	23a0      	movs	r3, #160	@ 0xa0
 8000f82:	05db      	lsls	r3, r3, #23
 8000f84:	2201      	movs	r2, #1
 8000f86:	2104      	movs	r1, #4
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f001 fdb7 	bl	8002afc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000f8e:	23a0      	movs	r3, #160	@ 0xa0
 8000f90:	05db      	lsls	r3, r3, #23
 8000f92:	2201      	movs	r2, #1
 8000f94:	2108      	movs	r1, #8
 8000f96:	0018      	movs	r0, r3
 8000f98:	f001 fdb0 	bl	8002afc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(HALL_CS_GPIO_Port, HALL_CS_Pin, GPIO_PIN_RESET);
 8000f9c:	2380      	movs	r3, #128	@ 0x80
 8000f9e:	0219      	lsls	r1, r3, #8
 8000fa0:	23a0      	movs	r3, #160	@ 0xa0
 8000fa2:	05db      	lsls	r3, r3, #23
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f001 fda8 	bl	8002afc <HAL_GPIO_WritePin>
            HAL_SPI_TransmitReceive_DMA(&hspi2, dummy, angleraw, 2);
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 8000fae:	4905      	ldr	r1, [pc, #20]	@ (8000fc4 <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 8000fb0:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f002 fd1a 	bl	80039ec <HAL_SPI_TransmitReceive_DMA>
        	//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
        	//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);

            //HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 5);
        }
}
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000210 	.word	0x20000210
 8000fc4:	20000214 	.word	0x20000214
 8000fc8:	200000f4 	.word	0x200000f4

08000fcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fcc:	480d      	ldr	r0, [pc, #52]	@ (8001004 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fd0:	f7ff fe00 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	@ (800100c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <LoopForever+0xe>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	@ (8001018 <LoopForever+0x16>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ffa:	f004 fe09 	bl	8005c10 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ffe:	f7ff fb49 	bl	8000694 <main>

08001002 <LoopForever>:

LoopForever:
  b LoopForever
 8001002:	e7fe      	b.n	8001002 <LoopForever>
  ldr   r0, =_estack
 8001004:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001010:	08005d0c 	.word	0x08005d0c
  ldr r2, =_sbss
 8001014:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001018:	20000268 	.word	0x20000268

0800101c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800101c:	e7fe      	b.n	800101c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08001020 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <HAL_Init+0x3c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_Init+0x3c>)
 8001032:	2180      	movs	r1, #128	@ 0x80
 8001034:	0049      	lsls	r1, r1, #1
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800103a:	2003      	movs	r0, #3
 800103c:	f000 f810 	bl	8001060 <HAL_InitTick>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d003      	beq.n	800104c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001044:	1dfb      	adds	r3, r7, #7
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	e001      	b.n	8001050 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fd2c 	bl	8000aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	781b      	ldrb	r3, [r3, #0]
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	b002      	add	sp, #8
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40022000 	.word	0x40022000

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <HAL_InitTick+0x88>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d02b      	beq.n	80010d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001078:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <HAL_InitTick+0x8c>)
 800107a:	681c      	ldr	r4, [r3, #0]
 800107c:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <HAL_InitTick+0x88>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	0019      	movs	r1, r3
 8001082:	23fa      	movs	r3, #250	@ 0xfa
 8001084:	0098      	lsls	r0, r3, #2
 8001086:	f7ff f83d 	bl	8000104 <__udivsi3>
 800108a:	0003      	movs	r3, r0
 800108c:	0019      	movs	r1, r3
 800108e:	0020      	movs	r0, r4
 8001090:	f7ff f838 	bl	8000104 <__udivsi3>
 8001094:	0003      	movs	r3, r0
 8001096:	0018      	movs	r0, r3
 8001098:	f001 f903 	bl	80022a2 <HAL_SYSTICK_Config>
 800109c:	1e03      	subs	r3, r0, #0
 800109e:	d112      	bne.n	80010c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d80a      	bhi.n	80010bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	2301      	movs	r3, #1
 80010aa:	425b      	negs	r3, r3
 80010ac:	2200      	movs	r2, #0
 80010ae:	0018      	movs	r0, r3
 80010b0:	f001 f8d2 	bl	8002258 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <HAL_InitTick+0x90>)
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e00d      	b.n	80010d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010bc:	230f      	movs	r3, #15
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e008      	b.n	80010d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010c6:	230f      	movs	r3, #15
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e003      	b.n	80010d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010d0:	230f      	movs	r3, #15
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010d8:	230f      	movs	r3, #15
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	781b      	ldrb	r3, [r3, #0]
}
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b005      	add	sp, #20
 80010e4:	bd90      	pop	{r4, r7, pc}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <HAL_IncTick+0x1c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	001a      	movs	r2, r3
 80010fe:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <HAL_IncTick+0x20>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	18d2      	adds	r2, r2, r3
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <HAL_IncTick+0x20>)
 8001106:	601a      	str	r2, [r3, #0]
}
 8001108:	46c0      	nop			@ (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			@ (mov r8, r8)
 8001110:	20000008 	.word	0x20000008
 8001114:	20000264 	.word	0x20000264

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b02      	ldr	r3, [pc, #8]	@ (8001128 <HAL_GetTick+0x10>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	20000264 	.word	0x20000264

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff fff0 	bl	8001118 <HAL_GetTick>
 8001138:	0003      	movs	r3, r0
 800113a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3301      	adds	r3, #1
 8001144:	d005      	beq.n	8001152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001146:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <HAL_Delay+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	001a      	movs	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	189b      	adds	r3, r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	f7ff ffe0 	bl	8001118 <HAL_GetTick>
 8001158:	0002      	movs	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d8f7      	bhi.n	8001154 <HAL_Delay+0x28>
  {
  }
}
 8001164:	46c0      	nop			@ (mov r8, r8)
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	b004      	add	sp, #16
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	20000008 	.word	0x20000008

08001174 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001184:	401a      	ands	r2, r3
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	431a      	orrs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]
}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	fe3fffff 	.word	0xfe3fffff

0800119c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	23e0      	movs	r3, #224	@ 0xe0
 80011aa:	045b      	lsls	r3, r3, #17
 80011ac:	4013      	ands	r3, r2
}
 80011ae:	0018      	movs	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	2104      	movs	r1, #4
 80011ca:	400a      	ands	r2, r1
 80011cc:	2107      	movs	r1, #7
 80011ce:	4091      	lsls	r1, r2
 80011d0:	000a      	movs	r2, r1
 80011d2:	43d2      	mvns	r2, r2
 80011d4:	401a      	ands	r2, r3
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2104      	movs	r1, #4
 80011da:	400b      	ands	r3, r1
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4099      	lsls	r1, r3
 80011e0:	000b      	movs	r3, r1
 80011e2:	431a      	orrs	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b004      	add	sp, #16
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	2104      	movs	r1, #4
 8001202:	400a      	ands	r2, r1
 8001204:	2107      	movs	r1, #7
 8001206:	4091      	lsls	r1, r2
 8001208:	000a      	movs	r2, r1
 800120a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2104      	movs	r1, #4
 8001210:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001212:	40da      	lsrs	r2, r3
 8001214:	0013      	movs	r3, r2
}
 8001216:	0018      	movs	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	b002      	add	sp, #8
 800121c:	bd80      	pop	{r7, pc}

0800121e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	23c0      	movs	r3, #192	@ 0xc0
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	4013      	ands	r3, r2
 8001230:	d101      	bne.n	8001236 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001236:	2300      	movs	r3, #0
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}

08001240 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	211f      	movs	r1, #31
 8001254:	400a      	ands	r2, r1
 8001256:	210f      	movs	r1, #15
 8001258:	4091      	lsls	r1, r2
 800125a:	000a      	movs	r2, r1
 800125c:	43d2      	mvns	r2, r2
 800125e:	401a      	ands	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	0e9b      	lsrs	r3, r3, #26
 8001264:	210f      	movs	r1, #15
 8001266:	4019      	ands	r1, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	201f      	movs	r0, #31
 800126c:	4003      	ands	r3, r0
 800126e:	4099      	lsls	r1, r3
 8001270:	000b      	movs	r3, r1
 8001272:	431a      	orrs	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001278:	46c0      	nop			@ (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	b004      	add	sp, #16
 800127e:	bd80      	pop	{r7, pc}

08001280 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	035b      	lsls	r3, r3, #13
 8001292:	0b5b      	lsrs	r3, r3, #13
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	b002      	add	sp, #8
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	0352      	lsls	r2, r2, #13
 80012b4:	0b52      	lsrs	r2, r2, #13
 80012b6:	43d2      	mvns	r2, r2
 80012b8:	401a      	ands	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2203      	movs	r2, #3
 80012d4:	4013      	ands	r3, r2
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	0212      	lsls	r2, r2, #8
 80012f4:	43d2      	mvns	r2, r2
 80012f6:	401a      	ands	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	400b      	ands	r3, r1
 8001300:	4904      	ldr	r1, [pc, #16]	@ (8001314 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001302:	400b      	ands	r3, r1
 8001304:	431a      	orrs	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	b004      	add	sp, #16
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	07ffff00 	.word	0x07ffff00

08001318 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	4a05      	ldr	r2, [pc, #20]	@ (800133c <LL_ADC_EnableInternalRegulator+0x24>)
 8001326:	4013      	ands	r3, r2
 8001328:	2280      	movs	r2, #128	@ 0x80
 800132a:	0552      	lsls	r2, r2, #21
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	b002      	add	sp, #8
 8001338:	bd80      	pop	{r7, pc}
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	6fffffe8 	.word	0x6fffffe8

08001340 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	055b      	lsls	r3, r3, #21
 8001350:	401a      	ands	r2, r3
 8001352:	2380      	movs	r3, #128	@ 0x80
 8001354:	055b      	lsls	r3, r3, #21
 8001356:	429a      	cmp	r2, r3
 8001358:	d101      	bne.n	800135e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800135e:	2300      	movs	r3, #0
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}

08001368 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <LL_ADC_Enable+0x20>)
 8001376:	4013      	ands	r3, r2
 8001378:	2201      	movs	r2, #1
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001380:	46c0      	nop			@ (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}
 8001388:	7fffffe8 	.word	0x7fffffe8

0800138c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <LL_ADC_Disable+0x20>)
 800139a:	4013      	ands	r3, r2
 800139c:	2202      	movs	r2, #2
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013a4:	46c0      	nop			@ (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	7fffffe8 	.word	0x7fffffe8

080013b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2201      	movs	r2, #1
 80013be:	4013      	ands	r3, r2
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <LL_ADC_IsEnabled+0x18>
 80013c4:	2301      	movs	r3, #1
 80013c6:	e000      	b.n	80013ca <LL_ADC_IsEnabled+0x1a>
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	0018      	movs	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b002      	add	sp, #8
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <LL_ADC_REG_StartConversion+0x20>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	2204      	movs	r2, #4
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013ec:	46c0      	nop			@ (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b002      	add	sp, #8
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	7fffffe8 	.word	0x7fffffe8

080013f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2204      	movs	r2, #4
 8001406:	4013      	ands	r3, r2
 8001408:	2b04      	cmp	r3, #4
 800140a:	d101      	bne.n	8001410 <LL_ADC_REG_IsConversionOngoing+0x18>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001410:	2300      	movs	r3, #0
}
 8001412:	0018      	movs	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	b002      	add	sp, #8
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001424:	231f      	movs	r3, #31
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e17f      	b.n	8001742 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10a      	bne.n	8001460 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	0018      	movs	r0, r3
 800144e:	f7fe ff9d 	bl	800038c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2254      	movs	r2, #84	@ 0x54
 800145c:	2100      	movs	r1, #0
 800145e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	0018      	movs	r0, r3
 8001466:	f7ff ff6b 	bl	8001340 <LL_ADC_IsInternalRegulatorEnabled>
 800146a:	1e03      	subs	r3, r0, #0
 800146c:	d115      	bne.n	800149a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	0018      	movs	r0, r3
 8001474:	f7ff ff50 	bl	8001318 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001478:	4bb4      	ldr	r3, [pc, #720]	@ (800174c <HAL_ADC_Init+0x330>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	49b4      	ldr	r1, [pc, #720]	@ (8001750 <HAL_ADC_Init+0x334>)
 800147e:	0018      	movs	r0, r3
 8001480:	f7fe fe40 	bl	8000104 <__udivsi3>
 8001484:	0003      	movs	r3, r0
 8001486:	3301      	adds	r3, #1
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800148c:	e002      	b.n	8001494 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3b01      	subs	r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f9      	bne.n	800148e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	0018      	movs	r0, r3
 80014a0:	f7ff ff4e 	bl	8001340 <LL_ADC_IsInternalRegulatorEnabled>
 80014a4:	1e03      	subs	r3, r0, #0
 80014a6:	d10f      	bne.n	80014c8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ac:	2210      	movs	r2, #16
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b8:	2201      	movs	r2, #1
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80014c0:	231f      	movs	r3, #31
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff ff93 	bl	80013f8 <LL_ADC_REG_IsConversionOngoing>
 80014d2:	0003      	movs	r3, r0
 80014d4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	2210      	movs	r2, #16
 80014dc:	4013      	ands	r3, r2
 80014de:	d000      	beq.n	80014e2 <HAL_ADC_Init+0xc6>
 80014e0:	e122      	b.n	8001728 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d000      	beq.n	80014ea <HAL_ADC_Init+0xce>
 80014e8:	e11e      	b.n	8001728 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	4a99      	ldr	r2, [pc, #612]	@ (8001754 <HAL_ADC_Init+0x338>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	2202      	movs	r2, #2
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	0018      	movs	r0, r3
 8001500:	f7ff ff56 	bl	80013b0 <LL_ADC_IsEnabled>
 8001504:	1e03      	subs	r3, r0, #0
 8001506:	d000      	beq.n	800150a <HAL_ADC_Init+0xee>
 8001508:	e0ad      	b.n	8001666 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7e1b      	ldrb	r3, [r3, #24]
 8001512:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001514:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7e5b      	ldrb	r3, [r3, #25]
 800151a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800151c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7e9b      	ldrb	r3, [r3, #26]
 8001522:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001524:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <HAL_ADC_Init+0x118>
 800152e:	2380      	movs	r3, #128	@ 0x80
 8001530:	015b      	lsls	r3, r3, #5
 8001532:	e000      	b.n	8001536 <HAL_ADC_Init+0x11a>
 8001534:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001536:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800153c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b00      	cmp	r3, #0
 8001544:	da04      	bge.n	8001550 <HAL_ADC_Init+0x134>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	085b      	lsrs	r3, r3, #1
 800154e:	e001      	b.n	8001554 <HAL_ADC_Init+0x138>
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001554:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	212c      	movs	r1, #44	@ 0x2c
 800155a:	5c5b      	ldrb	r3, [r3, r1]
 800155c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800155e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2220      	movs	r2, #32
 800156a:	5c9b      	ldrb	r3, [r3, r2]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d115      	bne.n	800159c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7e9b      	ldrb	r3, [r3, #26]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d105      	bne.n	8001584 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	2280      	movs	r2, #128	@ 0x80
 800157c:	0252      	lsls	r2, r2, #9
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	e00b      	b.n	800159c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	2220      	movs	r2, #32
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001594:	2201      	movs	r2, #1
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00a      	beq.n	80015ba <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015a8:	23e0      	movs	r3, #224	@ 0xe0
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015b2:	4313      	orrs	r3, r2
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4a65      	ldr	r2, [pc, #404]	@ (8001758 <HAL_ADC_Init+0x33c>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	0019      	movs	r1, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	0f9b      	lsrs	r3, r3, #30
 80015d6:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015dc:	4313      	orrs	r3, r2
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	223c      	movs	r2, #60	@ 0x3c
 80015e8:	5c9b      	ldrb	r3, [r3, r2]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d111      	bne.n	8001612 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	0f9b      	lsrs	r3, r3, #30
 80015f4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015fa:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001600:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001606:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	4313      	orrs	r3, r2
 800160c:	2201      	movs	r2, #1
 800160e:	4313      	orrs	r3, r2
 8001610:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	4a50      	ldr	r2, [pc, #320]	@ (800175c <HAL_ADC_Init+0x340>)
 800161a:	4013      	ands	r3, r2
 800161c:	0019      	movs	r1, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	430a      	orrs	r2, r1
 8001626:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	23c0      	movs	r3, #192	@ 0xc0
 800162e:	061b      	lsls	r3, r3, #24
 8001630:	429a      	cmp	r2, r3
 8001632:	d018      	beq.n	8001666 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	05db      	lsls	r3, r3, #23
 800163c:	429a      	cmp	r2, r3
 800163e:	d012      	beq.n	8001666 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001644:	2380      	movs	r3, #128	@ 0x80
 8001646:	061b      	lsls	r3, r3, #24
 8001648:	429a      	cmp	r2, r3
 800164a:	d00c      	beq.n	8001666 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800164c:	4b44      	ldr	r3, [pc, #272]	@ (8001760 <HAL_ADC_Init+0x344>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a44      	ldr	r2, [pc, #272]	@ (8001764 <HAL_ADC_Init+0x348>)
 8001652:	4013      	ands	r3, r2
 8001654:	0019      	movs	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	23f0      	movs	r3, #240	@ 0xf0
 800165c:	039b      	lsls	r3, r3, #14
 800165e:	401a      	ands	r2, r3
 8001660:	4b3f      	ldr	r3, [pc, #252]	@ (8001760 <HAL_ADC_Init+0x344>)
 8001662:	430a      	orrs	r2, r1
 8001664:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800166e:	001a      	movs	r2, r3
 8001670:	2100      	movs	r1, #0
 8001672:	f7ff fda0 	bl	80011b6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800167e:	493a      	ldr	r1, [pc, #232]	@ (8001768 <HAL_ADC_Init+0x34c>)
 8001680:	001a      	movs	r2, r3
 8001682:	f7ff fd98 	bl	80011b6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2110      	movs	r1, #16
 800169a:	4249      	negs	r1, r1
 800169c:	430a      	orrs	r2, r1
 800169e:	629a      	str	r2, [r3, #40]	@ 0x28
 80016a0:	e018      	b.n	80016d4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691a      	ldr	r2, [r3, #16]
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	039b      	lsls	r3, r3, #14
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d112      	bne.n	80016d4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	221c      	movs	r2, #28
 80016be:	4013      	ands	r3, r2
 80016c0:	2210      	movs	r2, #16
 80016c2:	4252      	negs	r2, r2
 80016c4:	409a      	lsls	r2, r3
 80016c6:	0011      	movs	r1, r2
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2100      	movs	r1, #0
 80016da:	0018      	movs	r0, r3
 80016dc:	f7ff fd88 	bl	80011f0 <LL_ADC_GetSamplingTimeCommonChannels>
 80016e0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d10b      	bne.n	8001702 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f4:	2203      	movs	r2, #3
 80016f6:	4393      	bics	r3, r2
 80016f8:	2201      	movs	r2, #1
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001700:	e01c      	b.n	800173c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	2212      	movs	r2, #18
 8001708:	4393      	bics	r3, r2
 800170a:	2210      	movs	r2, #16
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001716:	2201      	movs	r2, #1
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800171e:	231f      	movs	r3, #31
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001726:	e009      	b.n	800173c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172c:	2210      	movs	r2, #16
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001734:	231f      	movs	r3, #31
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800173c:	231f      	movs	r3, #31
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	781b      	ldrb	r3, [r3, #0]
}
 8001742:	0018      	movs	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	b008      	add	sp, #32
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	20000000 	.word	0x20000000
 8001750:	00030d40 	.word	0x00030d40
 8001754:	fffffefd 	.word	0xfffffefd
 8001758:	ffde0201 	.word	0xffde0201
 800175c:	1ffffc02 	.word	0x1ffffc02
 8001760:	40012708 	.word	0x40012708
 8001764:	ffc3ffff 	.word	0xffc3ffff
 8001768:	07ffff04 	.word	0x07ffff04

0800176c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800176c:	b5b0      	push	{r4, r5, r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff fe3b 	bl	80013f8 <LL_ADC_REG_IsConversionOngoing>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d16c      	bne.n	8001860 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2254      	movs	r2, #84	@ 0x54
 800178a:	5c9b      	ldrb	r3, [r3, r2]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_ADC_Start_DMA+0x28>
 8001790:	2302      	movs	r3, #2
 8001792:	e06c      	b.n	800186e <HAL_ADC_Start_DMA+0x102>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2254      	movs	r2, #84	@ 0x54
 8001798:	2101      	movs	r1, #1
 800179a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2201      	movs	r2, #1
 80017a4:	4013      	ands	r3, r2
 80017a6:	d113      	bne.n	80017d0 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0018      	movs	r0, r3
 80017ae:	f7ff fdff 	bl	80013b0 <LL_ADC_IsEnabled>
 80017b2:	1e03      	subs	r3, r0, #0
 80017b4:	d004      	beq.n	80017c0 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7ff fde6 	bl	800138c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2101      	movs	r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017d0:	2517      	movs	r5, #23
 80017d2:	197c      	adds	r4, r7, r5
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	0018      	movs	r0, r3
 80017d8:	f000 fb5e 	bl	8001e98 <ADC_Enable>
 80017dc:	0003      	movs	r3, r0
 80017de:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017e0:	002c      	movs	r4, r5
 80017e2:	193b      	adds	r3, r7, r4
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d13e      	bne.n	8001868 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ee:	4a22      	ldr	r2, [pc, #136]	@ (8001878 <HAL_ADC_Start_DMA+0x10c>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	2280      	movs	r2, #128	@ 0x80
 80017f4:	0052      	lsls	r2, r2, #1
 80017f6:	431a      	orrs	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001806:	4a1d      	ldr	r2, [pc, #116]	@ (800187c <HAL_ADC_Start_DMA+0x110>)
 8001808:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800180e:	4a1c      	ldr	r2, [pc, #112]	@ (8001880 <HAL_ADC_Start_DMA+0x114>)
 8001810:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001816:	4a1b      	ldr	r2, [pc, #108]	@ (8001884 <HAL_ADC_Start_DMA+0x118>)
 8001818:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	221c      	movs	r2, #28
 8001820:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2254      	movs	r2, #84	@ 0x54
 8001826:	2100      	movs	r1, #0
 8001828:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2110      	movs	r1, #16
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3340      	adds	r3, #64	@ 0x40
 8001844:	0019      	movs	r1, r3
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	193c      	adds	r4, r7, r4
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f000 fdc0 	bl	80023d0 <HAL_DMA_Start_IT>
 8001850:	0003      	movs	r3, r0
 8001852:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0018      	movs	r0, r3
 800185a:	f7ff fdbb 	bl	80013d4 <LL_ADC_REG_StartConversion>
 800185e:	e003      	b.n	8001868 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001860:	2317      	movs	r3, #23
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	2202      	movs	r2, #2
 8001866:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001868:	2317      	movs	r3, #23
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	781b      	ldrb	r3, [r3, #0]
}
 800186e:	0018      	movs	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	b006      	add	sp, #24
 8001874:	bdb0      	pop	{r4, r5, r7, pc}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	fffff0fe 	.word	0xfffff0fe
 800187c:	08001fa5 	.word	0x08001fa5
 8001880:	0800206d 	.word	0x0800206d
 8001884:	0800208b 	.word	0x0800208b

08001888 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	2202      	movs	r2, #2
 80018a8:	4013      	ands	r3, r2
 80018aa:	d017      	beq.n	80018dc <HAL_ADC_IRQHandler+0x54>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d013      	beq.n	80018dc <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b8:	2210      	movs	r2, #16
 80018ba:	4013      	ands	r3, r2
 80018bc:	d106      	bne.n	80018cc <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c2:	2280      	movs	r2, #128	@ 0x80
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	0018      	movs	r0, r3
 80018d0:	f000 fc06 	bl	80020e0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2202      	movs	r2, #2
 80018da:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2204      	movs	r2, #4
 80018e0:	4013      	ands	r3, r2
 80018e2:	d003      	beq.n	80018ec <HAL_ADC_IRQHandler+0x64>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2204      	movs	r2, #4
 80018e8:	4013      	ands	r3, r2
 80018ea:	d107      	bne.n	80018fc <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	2208      	movs	r2, #8
 80018f0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80018f2:	d04d      	beq.n	8001990 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2208      	movs	r2, #8
 80018f8:	4013      	ands	r3, r2
 80018fa:	d049      	beq.n	8001990 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001900:	2210      	movs	r2, #16
 8001902:	4013      	ands	r3, r2
 8001904:	d106      	bne.n	8001914 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190a:	2280      	movs	r2, #128	@ 0x80
 800190c:	0092      	lsls	r2, r2, #2
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff fc80 	bl	800121e <LL_ADC_REG_IsTriggerSourceSWStart>
 800191e:	1e03      	subs	r3, r0, #0
 8001920:	d02e      	beq.n	8001980 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	7e9b      	ldrb	r3, [r3, #26]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d12a      	bne.n	8001980 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2208      	movs	r2, #8
 8001932:	4013      	ands	r3, r2
 8001934:	2b08      	cmp	r3, #8
 8001936:	d123      	bne.n	8001980 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	0018      	movs	r0, r3
 800193e:	f7ff fd5b 	bl	80013f8 <LL_ADC_REG_IsConversionOngoing>
 8001942:	1e03      	subs	r3, r0, #0
 8001944:	d110      	bne.n	8001968 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	210c      	movs	r1, #12
 8001952:	438a      	bics	r2, r1
 8001954:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195a:	4a56      	ldr	r2, [pc, #344]	@ (8001ab4 <HAL_ADC_IRQHandler+0x22c>)
 800195c:	4013      	ands	r3, r2
 800195e:	2201      	movs	r2, #1
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	659a      	str	r2, [r3, #88]	@ 0x58
 8001966:	e00b      	b.n	8001980 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196c:	2220      	movs	r2, #32
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001978:	2201      	movs	r2, #1
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	0018      	movs	r0, r3
 8001984:	f7fe fd9a 	bl	80004bc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	220c      	movs	r2, #12
 800198e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	2280      	movs	r2, #128	@ 0x80
 8001994:	4013      	ands	r3, r2
 8001996:	d012      	beq.n	80019be <HAL_ADC_IRQHandler+0x136>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2280      	movs	r2, #128	@ 0x80
 800199c:	4013      	ands	r3, r2
 800199e:	d00e      	beq.n	80019be <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a4:	2280      	movs	r2, #128	@ 0x80
 80019a6:	0252      	lsls	r2, r2, #9
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	0018      	movs	r0, r3
 80019b2:	f000 f889 	bl	8001ac8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2280      	movs	r2, #128	@ 0x80
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	2380      	movs	r3, #128	@ 0x80
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	d014      	beq.n	80019f2 <HAL_ADC_IRQHandler+0x16a>
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	2380      	movs	r3, #128	@ 0x80
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	d00f      	beq.n	80019f2 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	2280      	movs	r2, #128	@ 0x80
 80019d8:	0292      	lsls	r2, r2, #10
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 fb6c 	bl	80020c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2280      	movs	r2, #128	@ 0x80
 80019ee:	0052      	lsls	r2, r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d014      	beq.n	8001a26 <HAL_ADC_IRQHandler+0x19e>
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	2380      	movs	r3, #128	@ 0x80
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4013      	ands	r3, r2
 8001a04:	d00f      	beq.n	8001a26 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0a:	2280      	movs	r2, #128	@ 0x80
 8001a0c:	02d2      	lsls	r2, r2, #11
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 fb5a 	bl	80020d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2280      	movs	r2, #128	@ 0x80
 8001a22:	0092      	lsls	r2, r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2210      	movs	r2, #16
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d02b      	beq.n	8001a86 <HAL_ADC_IRQHandler+0x1fe>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2210      	movs	r2, #16
 8001a32:	4013      	ands	r3, r2
 8001a34:	d027      	beq.n	8001a86 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e008      	b.n	8001a56 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7ff fc3c 	bl	80012c6 <LL_ADC_REG_GetDMATransfer>
 8001a4e:	1e03      	subs	r3, r0, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001a52:	2301      	movs	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d110      	bne.n	8001a7e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a60:	2280      	movs	r2, #128	@ 0x80
 8001a62:	00d2      	lsls	r2, r2, #3
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6e:	2202      	movs	r2, #2
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f000 f82d 	bl	8001ad8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2210      	movs	r2, #16
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	2380      	movs	r3, #128	@ 0x80
 8001a8a:	019b      	lsls	r3, r3, #6
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d00d      	beq.n	8001aac <HAL_ADC_IRQHandler+0x224>
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	2380      	movs	r3, #128	@ 0x80
 8001a94:	019b      	lsls	r3, r3, #6
 8001a96:	4013      	ands	r3, r2
 8001a98:	d008      	beq.n	8001aac <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 fb27 	bl	80020f0 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2280      	movs	r2, #128	@ 0x80
 8001aa8:	0192      	lsls	r2, r2, #6
 8001aaa:	601a      	str	r2, [r3, #0]
  }
}
 8001aac:	46c0      	nop			@ (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b006      	add	sp, #24
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	fffffefe 	.word	0xfffffefe

08001ab8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ac0:	46c0      	nop			@ (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ad0:	46c0      	nop			@ (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ae0:	46c0      	nop			@ (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af2:	2317      	movs	r3, #23
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2254      	movs	r2, #84	@ 0x54
 8001b02:	5c9b      	ldrb	r3, [r3, r2]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x24>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e1c0      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x3a6>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2254      	movs	r2, #84	@ 0x54
 8001b10:	2101      	movs	r1, #1
 8001b12:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff fc6d 	bl	80013f8 <LL_ADC_REG_IsConversionOngoing>
 8001b1e:	1e03      	subs	r3, r0, #0
 8001b20:	d000      	beq.n	8001b24 <HAL_ADC_ConfigChannel+0x3c>
 8001b22:	e1a3      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d100      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x46>
 8001b2c:	e143      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	2380      	movs	r3, #128	@ 0x80
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d004      	beq.n	8001b44 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b3e:	4ac1      	ldr	r2, [pc, #772]	@ (8001e44 <HAL_ADC_ConfigChannel+0x35c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d108      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	0010      	movs	r0, r2
 8001b50:	f7ff fb96 	bl	8001280 <LL_ADC_REG_SetSequencerChAdd>
 8001b54:	e0c9      	b.n	8001cea <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	211f      	movs	r1, #31
 8001b60:	400b      	ands	r3, r1
 8001b62:	210f      	movs	r1, #15
 8001b64:	4099      	lsls	r1, r3
 8001b66:	000b      	movs	r3, r1
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	035b      	lsls	r3, r3, #13
 8001b74:	0b5b      	lsrs	r3, r3, #13
 8001b76:	d105      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x9c>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0e9b      	lsrs	r3, r3, #26
 8001b7e:	221f      	movs	r2, #31
 8001b80:	4013      	ands	r3, r2
 8001b82:	e098      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d000      	beq.n	8001b90 <HAL_ADC_ConfigChannel+0xa8>
 8001b8e:	e091      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x1cc>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d000      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0xb4>
 8001b9a:	e089      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x1c8>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d000      	beq.n	8001ba8 <HAL_ADC_ConfigChannel+0xc0>
 8001ba6:	e081      	b.n	8001cac <HAL_ADC_ConfigChannel+0x1c4>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2208      	movs	r2, #8
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d000      	beq.n	8001bb4 <HAL_ADC_ConfigChannel+0xcc>
 8001bb2:	e079      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x1c0>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2210      	movs	r2, #16
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d000      	beq.n	8001bc0 <HAL_ADC_ConfigChannel+0xd8>
 8001bbe:	e071      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x1bc>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d000      	beq.n	8001bcc <HAL_ADC_ConfigChannel+0xe4>
 8001bca:	e069      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x1b8>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2240      	movs	r2, #64	@ 0x40
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d000      	beq.n	8001bd8 <HAL_ADC_ConfigChannel+0xf0>
 8001bd6:	e061      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x1b4>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2280      	movs	r2, #128	@ 0x80
 8001bde:	4013      	ands	r3, r2
 8001be0:	d000      	beq.n	8001be4 <HAL_ADC_ConfigChannel+0xfc>
 8001be2:	e059      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x1b0>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4013      	ands	r3, r2
 8001bee:	d151      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1ac>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d149      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x1a8>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4013      	ands	r3, r2
 8001c06:	d141      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1a4>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	@ 0x80
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	4013      	ands	r3, r2
 8001c12:	d139      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x1a0>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	015b      	lsls	r3, r3, #5
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d131      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x19c>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2380      	movs	r3, #128	@ 0x80
 8001c26:	019b      	lsls	r3, r3, #6
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d129      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x198>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	01db      	lsls	r3, r3, #7
 8001c34:	4013      	ands	r3, r2
 8001c36:	d121      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x194>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2380      	movs	r3, #128	@ 0x80
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	4013      	ands	r3, r2
 8001c42:	d119      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x190>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	2380      	movs	r3, #128	@ 0x80
 8001c4a:	025b      	lsls	r3, r3, #9
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d111      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x18c>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	@ 0x80
 8001c56:	029b      	lsls	r3, r3, #10
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d109      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x188>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2380      	movs	r3, #128	@ 0x80
 8001c62:	02db      	lsls	r3, r3, #11
 8001c64:	4013      	ands	r3, r2
 8001c66:	d001      	beq.n	8001c6c <HAL_ADC_ConfigChannel+0x184>
 8001c68:	2312      	movs	r3, #18
 8001c6a:	e024      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e022      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c70:	2311      	movs	r3, #17
 8001c72:	e020      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c74:	2310      	movs	r3, #16
 8001c76:	e01e      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c78:	230f      	movs	r3, #15
 8001c7a:	e01c      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c7c:	230e      	movs	r3, #14
 8001c7e:	e01a      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c80:	230d      	movs	r3, #13
 8001c82:	e018      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c84:	230c      	movs	r3, #12
 8001c86:	e016      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c88:	230b      	movs	r3, #11
 8001c8a:	e014      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c8c:	230a      	movs	r3, #10
 8001c8e:	e012      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c90:	2309      	movs	r3, #9
 8001c92:	e010      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c94:	2308      	movs	r3, #8
 8001c96:	e00e      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c98:	2307      	movs	r3, #7
 8001c9a:	e00c      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c9c:	2306      	movs	r3, #6
 8001c9e:	e00a      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001ca0:	2305      	movs	r3, #5
 8001ca2:	e008      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	e006      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e004      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e002      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	6852      	ldr	r2, [r2, #4]
 8001cba:	201f      	movs	r0, #31
 8001cbc:	4002      	ands	r2, r0
 8001cbe:	4093      	lsls	r3, r2
 8001cc0:	000a      	movs	r2, r1
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d808      	bhi.n	8001cea <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	f7ff faab 	bl	8001240 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6819      	ldr	r1, [r3, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	001a      	movs	r2, r3
 8001cf8:	f7ff faf2 	bl	80012e0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db00      	blt.n	8001d06 <HAL_ADC_ConfigChannel+0x21e>
 8001d04:	e0bc      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d06:	4b50      	ldr	r3, [pc, #320]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f7ff fa47 	bl	800119c <LL_ADC_GetCommonPathInternalCh>
 8001d0e:	0003      	movs	r3, r0
 8001d10:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a4d      	ldr	r2, [pc, #308]	@ (8001e4c <HAL_ADC_ConfigChannel+0x364>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d122      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	041b      	lsls	r3, r3, #16
 8001d22:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d24:	d11d      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2280      	movs	r2, #128	@ 0x80
 8001d2a:	0412      	lsls	r2, r2, #16
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	4a46      	ldr	r2, [pc, #280]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001d30:	0019      	movs	r1, r3
 8001d32:	0010      	movs	r0, r2
 8001d34:	f7ff fa1e 	bl	8001174 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d38:	4b45      	ldr	r3, [pc, #276]	@ (8001e50 <HAL_ADC_ConfigChannel+0x368>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4945      	ldr	r1, [pc, #276]	@ (8001e54 <HAL_ADC_ConfigChannel+0x36c>)
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7fe f9e0 	bl	8000104 <__udivsi3>
 8001d44:	0003      	movs	r3, r0
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	0013      	movs	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	189b      	adds	r3, r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d52:	e002      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f9      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d60:	e08e      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a3c      	ldr	r2, [pc, #240]	@ (8001e58 <HAL_ADC_ConfigChannel+0x370>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d10e      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	2380      	movs	r3, #128	@ 0x80
 8001d70:	045b      	lsls	r3, r3, #17
 8001d72:	4013      	ands	r3, r2
 8001d74:	d109      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2280      	movs	r2, #128	@ 0x80
 8001d7a:	0452      	lsls	r2, r2, #17
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	4a32      	ldr	r2, [pc, #200]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001d80:	0019      	movs	r1, r3
 8001d82:	0010      	movs	r0, r2
 8001d84:	f7ff f9f6 	bl	8001174 <LL_ADC_SetCommonPathInternalCh>
 8001d88:	e07a      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a33      	ldr	r2, [pc, #204]	@ (8001e5c <HAL_ADC_ConfigChannel+0x374>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d000      	beq.n	8001d96 <HAL_ADC_ConfigChannel+0x2ae>
 8001d94:	e074      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	03db      	lsls	r3, r3, #15
 8001d9c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d9e:	d000      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x2ba>
 8001da0:	e06e      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2280      	movs	r2, #128	@ 0x80
 8001da6:	03d2      	lsls	r2, r2, #15
 8001da8:	4313      	orrs	r3, r2
 8001daa:	4a27      	ldr	r2, [pc, #156]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001dac:	0019      	movs	r1, r3
 8001dae:	0010      	movs	r0, r2
 8001db0:	f7ff f9e0 	bl	8001174 <LL_ADC_SetCommonPathInternalCh>
 8001db4:	e064      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	2380      	movs	r3, #128	@ 0x80
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d004      	beq.n	8001dcc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e44 <HAL_ADC_ConfigChannel+0x35c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d107      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	0010      	movs	r0, r2
 8001dd8:	f7ff fa63 	bl	80012a2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	da4d      	bge.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001de4:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001de6:	0018      	movs	r0, r3
 8001de8:	f7ff f9d8 	bl	800119c <LL_ADC_GetCommonPathInternalCh>
 8001dec:	0003      	movs	r3, r0
 8001dee:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a15      	ldr	r2, [pc, #84]	@ (8001e4c <HAL_ADC_ConfigChannel+0x364>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d108      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4a18      	ldr	r2, [pc, #96]	@ (8001e60 <HAL_ADC_ConfigChannel+0x378>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	4a11      	ldr	r2, [pc, #68]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001e02:	0019      	movs	r1, r3
 8001e04:	0010      	movs	r0, r2
 8001e06:	f7ff f9b5 	bl	8001174 <LL_ADC_SetCommonPathInternalCh>
 8001e0a:	e039      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a11      	ldr	r2, [pc, #68]	@ (8001e58 <HAL_ADC_ConfigChannel+0x370>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d108      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <HAL_ADC_ConfigChannel+0x37c>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001e1e:	0019      	movs	r1, r3
 8001e20:	0010      	movs	r0, r2
 8001e22:	f7ff f9a7 	bl	8001174 <LL_ADC_SetCommonPathInternalCh>
 8001e26:	e02b      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e5c <HAL_ADC_ConfigChannel+0x374>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d126      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4a0c      	ldr	r2, [pc, #48]	@ (8001e68 <HAL_ADC_ConfigChannel+0x380>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	4a03      	ldr	r2, [pc, #12]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	0010      	movs	r0, r2
 8001e3e:	f7ff f999 	bl	8001174 <LL_ADC_SetCommonPathInternalCh>
 8001e42:	e01d      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
 8001e44:	80000004 	.word	0x80000004
 8001e48:	40012708 	.word	0x40012708
 8001e4c:	b0001000 	.word	0xb0001000
 8001e50:	20000000 	.word	0x20000000
 8001e54:	00030d40 	.word	0x00030d40
 8001e58:	b8004000 	.word	0xb8004000
 8001e5c:	b4002000 	.word	0xb4002000
 8001e60:	ff7fffff 	.word	0xff7fffff
 8001e64:	feffffff 	.word	0xfeffffff
 8001e68:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e70:	2220      	movs	r2, #32
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e78:	2317      	movs	r3, #23
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2254      	movs	r2, #84	@ 0x54
 8001e84:	2100      	movs	r1, #0
 8001e86:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001e88:	2317      	movs	r3, #23
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	781b      	ldrb	r3, [r3, #0]
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b006      	add	sp, #24
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			@ (mov r8, r8)

08001e98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7ff fa81 	bl	80013b0 <LL_ADC_IsEnabled>
 8001eae:	1e03      	subs	r3, r0, #0
 8001eb0:	d000      	beq.n	8001eb4 <ADC_Enable+0x1c>
 8001eb2:	e069      	b.n	8001f88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	4a36      	ldr	r2, [pc, #216]	@ (8001f94 <ADC_Enable+0xfc>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d00d      	beq.n	8001edc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e056      	b.n	8001f8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff fa41 	bl	8001368 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f98 <ADC_Enable+0x100>)
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff f957 	bl	800119c <LL_ADC_GetCommonPathInternalCh>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	041b      	lsls	r3, r3, #16
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d00f      	beq.n	8001f18 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ef8:	4b28      	ldr	r3, [pc, #160]	@ (8001f9c <ADC_Enable+0x104>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4928      	ldr	r1, [pc, #160]	@ (8001fa0 <ADC_Enable+0x108>)
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7fe f900 	bl	8000104 <__udivsi3>
 8001f04:	0003      	movs	r3, r0
 8001f06:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001f08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f0a:	e002      	b.n	8001f12 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f9      	bne.n	8001f0c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7e5b      	ldrb	r3, [r3, #25]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d033      	beq.n	8001f88 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001f20:	f7ff f8fa 	bl	8001118 <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f28:	e027      	b.n	8001f7a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7ff fa3e 	bl	80013b0 <LL_ADC_IsEnabled>
 8001f34:	1e03      	subs	r3, r0, #0
 8001f36:	d104      	bne.n	8001f42 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff fa13 	bl	8001368 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f42:	f7ff f8e9 	bl	8001118 <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d914      	bls.n	8001f7a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d00d      	beq.n	8001f7a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	2210      	movs	r2, #16
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6e:	2201      	movs	r2, #1
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e007      	b.n	8001f8a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2201      	movs	r2, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d1d0      	bne.n	8001f2a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b004      	add	sp, #16
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	80000017 	.word	0x80000017
 8001f98:	40012708 	.word	0x40012708
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	00030d40 	.word	0x00030d40

08001fa4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb6:	2250      	movs	r2, #80	@ 0x50
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d141      	bne.n	8002040 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc0:	2280      	movs	r2, #128	@ 0x80
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7ff f925 	bl	800121e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fd4:	1e03      	subs	r3, r0, #0
 8001fd6:	d02e      	beq.n	8002036 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	7e9b      	ldrb	r3, [r3, #26]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d12a      	bne.n	8002036 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d123      	bne.n	8002036 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff fa00 	bl	80013f8 <LL_ADC_REG_IsConversionOngoing>
 8001ff8:	1e03      	subs	r3, r0, #0
 8001ffa:	d110      	bne.n	800201e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	210c      	movs	r1, #12
 8002008:	438a      	bics	r2, r1
 800200a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002010:	4a15      	ldr	r2, [pc, #84]	@ (8002068 <ADC_DMAConvCplt+0xc4>)
 8002012:	4013      	ands	r3, r2
 8002014:	2201      	movs	r2, #1
 8002016:	431a      	orrs	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	659a      	str	r2, [r3, #88]	@ 0x58
 800201c:	e00b      	b.n	8002036 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002022:	2220      	movs	r2, #32
 8002024:	431a      	orrs	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202e:	2201      	movs	r2, #1
 8002030:	431a      	orrs	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	0018      	movs	r0, r3
 800203a:	f7fe fa3f 	bl	80004bc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800203e:	e00f      	b.n	8002060 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002044:	2210      	movs	r2, #16
 8002046:	4013      	ands	r3, r2
 8002048:	d004      	beq.n	8002054 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	0018      	movs	r0, r3
 800204e:	f7ff fd43 	bl	8001ad8 <HAL_ADC_ErrorCallback>
}
 8002052:	e005      	b.n	8002060 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	0010      	movs	r0, r2
 800205e:	4798      	blx	r3
}
 8002060:	46c0      	nop			@ (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b004      	add	sp, #16
 8002066:	bd80      	pop	{r7, pc}
 8002068:	fffffefe 	.word	0xfffffefe

0800206c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002078:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	0018      	movs	r0, r3
 800207e:	f7ff fd1b 	bl	8001ab8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002082:	46c0      	nop			@ (mov r8, r8)
 8002084:	46bd      	mov	sp, r7
 8002086:	b004      	add	sp, #16
 8002088:	bd80      	pop	{r7, pc}

0800208a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002096:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	2240      	movs	r2, #64	@ 0x40
 800209e:	431a      	orrs	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a8:	2204      	movs	r2, #4
 80020aa:	431a      	orrs	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	0018      	movs	r0, r3
 80020b4:	f7ff fd10 	bl	8001ad8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020b8:	46c0      	nop			@ (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b004      	add	sp, #16
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80020c8:	46c0      	nop			@ (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b002      	add	sp, #8
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80020d8:	46c0      	nop			@ (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80020e8:	46c0      	nop			@ (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80020f8:	46c0      	nop			@ (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b002      	add	sp, #8
 80020fe:	bd80      	pop	{r7, pc}

08002100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	0002      	movs	r2, r0
 8002108:	1dfb      	adds	r3, r7, #7
 800210a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800210c:	1dfb      	adds	r3, r7, #7
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b7f      	cmp	r3, #127	@ 0x7f
 8002112:	d809      	bhi.n	8002128 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002114:	1dfb      	adds	r3, r7, #7
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	001a      	movs	r2, r3
 800211a:	231f      	movs	r3, #31
 800211c:	401a      	ands	r2, r3
 800211e:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <__NVIC_EnableIRQ+0x30>)
 8002120:	2101      	movs	r1, #1
 8002122:	4091      	lsls	r1, r2
 8002124:	000a      	movs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002128:	46c0      	nop			@ (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	b002      	add	sp, #8
 800212e:	bd80      	pop	{r7, pc}
 8002130:	e000e100 	.word	0xe000e100

08002134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	0002      	movs	r2, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002142:	1dfb      	adds	r3, r7, #7
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b7f      	cmp	r3, #127	@ 0x7f
 8002148:	d828      	bhi.n	800219c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800214a:	4a2f      	ldr	r2, [pc, #188]	@ (8002208 <__NVIC_SetPriority+0xd4>)
 800214c:	1dfb      	adds	r3, r7, #7
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b25b      	sxtb	r3, r3
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	33c0      	adds	r3, #192	@ 0xc0
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	589b      	ldr	r3, [r3, r2]
 800215a:	1dfa      	adds	r2, r7, #7
 800215c:	7812      	ldrb	r2, [r2, #0]
 800215e:	0011      	movs	r1, r2
 8002160:	2203      	movs	r2, #3
 8002162:	400a      	ands	r2, r1
 8002164:	00d2      	lsls	r2, r2, #3
 8002166:	21ff      	movs	r1, #255	@ 0xff
 8002168:	4091      	lsls	r1, r2
 800216a:	000a      	movs	r2, r1
 800216c:	43d2      	mvns	r2, r2
 800216e:	401a      	ands	r2, r3
 8002170:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	019b      	lsls	r3, r3, #6
 8002176:	22ff      	movs	r2, #255	@ 0xff
 8002178:	401a      	ands	r2, r3
 800217a:	1dfb      	adds	r3, r7, #7
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	0018      	movs	r0, r3
 8002180:	2303      	movs	r3, #3
 8002182:	4003      	ands	r3, r0
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002188:	481f      	ldr	r0, [pc, #124]	@ (8002208 <__NVIC_SetPriority+0xd4>)
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b25b      	sxtb	r3, r3
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	430a      	orrs	r2, r1
 8002194:	33c0      	adds	r3, #192	@ 0xc0
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800219a:	e031      	b.n	8002200 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800219c:	4a1b      	ldr	r2, [pc, #108]	@ (800220c <__NVIC_SetPriority+0xd8>)
 800219e:	1dfb      	adds	r3, r7, #7
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	0019      	movs	r1, r3
 80021a4:	230f      	movs	r3, #15
 80021a6:	400b      	ands	r3, r1
 80021a8:	3b08      	subs	r3, #8
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	3306      	adds	r3, #6
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	18d3      	adds	r3, r2, r3
 80021b2:	3304      	adds	r3, #4
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1dfa      	adds	r2, r7, #7
 80021b8:	7812      	ldrb	r2, [r2, #0]
 80021ba:	0011      	movs	r1, r2
 80021bc:	2203      	movs	r2, #3
 80021be:	400a      	ands	r2, r1
 80021c0:	00d2      	lsls	r2, r2, #3
 80021c2:	21ff      	movs	r1, #255	@ 0xff
 80021c4:	4091      	lsls	r1, r2
 80021c6:	000a      	movs	r2, r1
 80021c8:	43d2      	mvns	r2, r2
 80021ca:	401a      	ands	r2, r3
 80021cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	019b      	lsls	r3, r3, #6
 80021d2:	22ff      	movs	r2, #255	@ 0xff
 80021d4:	401a      	ands	r2, r3
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	0018      	movs	r0, r3
 80021dc:	2303      	movs	r3, #3
 80021de:	4003      	ands	r3, r0
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021e4:	4809      	ldr	r0, [pc, #36]	@ (800220c <__NVIC_SetPriority+0xd8>)
 80021e6:	1dfb      	adds	r3, r7, #7
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	001c      	movs	r4, r3
 80021ec:	230f      	movs	r3, #15
 80021ee:	4023      	ands	r3, r4
 80021f0:	3b08      	subs	r3, #8
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	430a      	orrs	r2, r1
 80021f6:	3306      	adds	r3, #6
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	18c3      	adds	r3, r0, r3
 80021fc:	3304      	adds	r3, #4
 80021fe:	601a      	str	r2, [r3, #0]
}
 8002200:	46c0      	nop			@ (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b003      	add	sp, #12
 8002206:	bd90      	pop	{r4, r7, pc}
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	1e5a      	subs	r2, r3, #1
 800221c:	2380      	movs	r3, #128	@ 0x80
 800221e:	045b      	lsls	r3, r3, #17
 8002220:	429a      	cmp	r2, r3
 8002222:	d301      	bcc.n	8002228 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002224:	2301      	movs	r3, #1
 8002226:	e010      	b.n	800224a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002228:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <SysTick_Config+0x44>)
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	3a01      	subs	r2, #1
 800222e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002230:	2301      	movs	r3, #1
 8002232:	425b      	negs	r3, r3
 8002234:	2103      	movs	r1, #3
 8002236:	0018      	movs	r0, r3
 8002238:	f7ff ff7c 	bl	8002134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <SysTick_Config+0x44>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <SysTick_Config+0x44>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	0018      	movs	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	210f      	movs	r1, #15
 8002264:	187b      	adds	r3, r7, r1
 8002266:	1c02      	adds	r2, r0, #0
 8002268:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	187b      	adds	r3, r7, r1
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b25b      	sxtb	r3, r3
 8002272:	0011      	movs	r1, r2
 8002274:	0018      	movs	r0, r3
 8002276:	f7ff ff5d 	bl	8002134 <__NVIC_SetPriority>
}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b004      	add	sp, #16
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	0002      	movs	r2, r0
 800228a:	1dfb      	adds	r3, r7, #7
 800228c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228e:	1dfb      	adds	r3, r7, #7
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b25b      	sxtb	r3, r3
 8002294:	0018      	movs	r0, r3
 8002296:	f7ff ff33 	bl	8002100 <__NVIC_EnableIRQ>
}
 800229a:	46c0      	nop			@ (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b002      	add	sp, #8
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7ff ffaf 	bl	8002210 <SysTick_Config>
 80022b2:	0003      	movs	r3, r0
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b002      	add	sp, #8
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e077      	b.n	80023be <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a3d      	ldr	r2, [pc, #244]	@ (80023c8 <HAL_DMA_Init+0x10c>)
 80022d4:	4694      	mov	ip, r2
 80022d6:	4463      	add	r3, ip
 80022d8:	2114      	movs	r1, #20
 80022da:	0018      	movs	r0, r3
 80022dc:	f7fd ff12 	bl	8000104 <__udivsi3>
 80022e0:	0003      	movs	r3, r0
 80022e2:	009a      	lsls	r2, r3, #2
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2225      	movs	r2, #37	@ 0x25
 80022ec:	2102      	movs	r1, #2
 80022ee:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4934      	ldr	r1, [pc, #208]	@ (80023cc <HAL_DMA_Init+0x110>)
 80022fc:	400a      	ands	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 fa2b 	bl	8002794 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	2380      	movs	r3, #128	@ 0x80
 8002344:	01db      	lsls	r3, r3, #7
 8002346:	429a      	cmp	r2, r3
 8002348:	d102      	bne.n	8002350 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002358:	213f      	movs	r1, #63	@ 0x3f
 800235a:	400a      	ands	r2, r1
 800235c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002366:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d011      	beq.n	8002394 <HAL_DMA_Init+0xd8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b04      	cmp	r3, #4
 8002376:	d80d      	bhi.n	8002394 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	0018      	movs	r0, r3
 800237c:	f000 fa36 	bl	80027ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	e008      	b.n	80023a6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2225      	movs	r2, #37	@ 0x25
 80023b0:	2101      	movs	r1, #1
 80023b2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2224      	movs	r2, #36	@ 0x24
 80023b8:	2100      	movs	r1, #0
 80023ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	0018      	movs	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b002      	add	sp, #8
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			@ (mov r8, r8)
 80023c8:	bffdfff8 	.word	0xbffdfff8
 80023cc:	ffff800f 	.word	0xffff800f

080023d0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023de:	2317      	movs	r3, #23
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2224      	movs	r2, #36	@ 0x24
 80023ea:	5c9b      	ldrb	r3, [r3, r2]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_DMA_Start_IT+0x24>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e06f      	b.n	80024d4 <HAL_DMA_Start_IT+0x104>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2224      	movs	r2, #36	@ 0x24
 80023f8:	2101      	movs	r1, #1
 80023fa:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2225      	movs	r2, #37	@ 0x25
 8002400:	5c9b      	ldrb	r3, [r3, r2]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	d157      	bne.n	80024b8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2225      	movs	r2, #37	@ 0x25
 800240c:	2102      	movs	r1, #2
 800240e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	438a      	bics	r2, r1
 8002424:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f971 	bl	8002714 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	210e      	movs	r1, #14
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e00f      	b.n	800246c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2104      	movs	r1, #4
 8002458:	438a      	bics	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	210a      	movs	r1, #10
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	025b      	lsls	r3, r3, #9
 8002476:	4013      	ands	r3, r2
 8002478:	d008      	beq.n	800248c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002484:	2180      	movs	r1, #128	@ 0x80
 8002486:	0049      	lsls	r1, r1, #1
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249e:	2180      	movs	r1, #128	@ 0x80
 80024a0:	0049      	lsls	r1, r1, #1
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2101      	movs	r1, #1
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e00a      	b.n	80024ce <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2280      	movs	r2, #128	@ 0x80
 80024bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2224      	movs	r2, #36	@ 0x24
 80024c2:	2100      	movs	r1, #0
 80024c4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80024c6:	2317      	movs	r3, #23
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80024ce:	2317      	movs	r3, #23
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	781b      	ldrb	r3, [r3, #0]
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b006      	add	sp, #24
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e4:	210f      	movs	r1, #15
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2225      	movs	r2, #37	@ 0x25
 80024f0:	5c9b      	ldrb	r3, [r3, r2]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d006      	beq.n	8002506 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2204      	movs	r2, #4
 80024fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	e049      	b.n	800259a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	210e      	movs	r1, #14
 8002512:	438a      	bics	r2, r1
 8002514:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2101      	movs	r1, #1
 8002522:	438a      	bics	r2, r1
 8002524:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002530:	491d      	ldr	r1, [pc, #116]	@ (80025a8 <HAL_DMA_Abort_IT+0xcc>)
 8002532:	400a      	ands	r2, r1
 8002534:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002536:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <HAL_DMA_Abort_IT+0xd0>)
 8002538:	6859      	ldr	r1, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	221c      	movs	r2, #28
 8002540:	4013      	ands	r3, r2
 8002542:	2201      	movs	r2, #1
 8002544:	409a      	lsls	r2, r3
 8002546:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <HAL_DMA_Abort_IT+0xd0>)
 8002548:	430a      	orrs	r2, r1
 800254a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002554:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002568:	490f      	ldr	r1, [pc, #60]	@ (80025a8 <HAL_DMA_Abort_IT+0xcc>)
 800256a:	400a      	ands	r2, r1
 800256c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002576:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2225      	movs	r2, #37	@ 0x25
 800257c:	2101      	movs	r1, #1
 800257e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2224      	movs	r2, #36	@ 0x24
 8002584:	2100      	movs	r1, #0
 8002586:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	0010      	movs	r0, r2
 8002598:	4798      	blx	r3
    }
  }
  return status;
 800259a:	230f      	movs	r3, #15
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	781b      	ldrb	r3, [r3, #0]
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b004      	add	sp, #16
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	fffffeff 	.word	0xfffffeff
 80025ac:	40020000 	.word	0x40020000

080025b0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80025b8:	4b55      	ldr	r3, [pc, #340]	@ (8002710 <HAL_DMA_IRQHandler+0x160>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	221c      	movs	r2, #28
 80025cc:	4013      	ands	r3, r2
 80025ce:	2204      	movs	r2, #4
 80025d0:	409a      	lsls	r2, r3
 80025d2:	0013      	movs	r3, r2
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	d027      	beq.n	800262a <HAL_DMA_IRQHandler+0x7a>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2204      	movs	r2, #4
 80025de:	4013      	ands	r3, r2
 80025e0:	d023      	beq.n	800262a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2220      	movs	r2, #32
 80025ea:	4013      	ands	r3, r2
 80025ec:	d107      	bne.n	80025fe <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2104      	movs	r1, #4
 80025fa:	438a      	bics	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80025fe:	4b44      	ldr	r3, [pc, #272]	@ (8002710 <HAL_DMA_IRQHandler+0x160>)
 8002600:	6859      	ldr	r1, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	221c      	movs	r2, #28
 8002608:	4013      	ands	r3, r2
 800260a:	2204      	movs	r2, #4
 800260c:	409a      	lsls	r2, r3
 800260e:	4b40      	ldr	r3, [pc, #256]	@ (8002710 <HAL_DMA_IRQHandler+0x160>)
 8002610:	430a      	orrs	r2, r1
 8002612:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	2b00      	cmp	r3, #0
 800261a:	d100      	bne.n	800261e <HAL_DMA_IRQHandler+0x6e>
 800261c:	e073      	b.n	8002706 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	0010      	movs	r0, r2
 8002626:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002628:	e06d      	b.n	8002706 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	221c      	movs	r2, #28
 8002630:	4013      	ands	r3, r2
 8002632:	2202      	movs	r2, #2
 8002634:	409a      	lsls	r2, r3
 8002636:	0013      	movs	r3, r2
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4013      	ands	r3, r2
 800263c:	d02e      	beq.n	800269c <HAL_DMA_IRQHandler+0xec>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2202      	movs	r2, #2
 8002642:	4013      	ands	r3, r2
 8002644:	d02a      	beq.n	800269c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2220      	movs	r2, #32
 800264e:	4013      	ands	r3, r2
 8002650:	d10b      	bne.n	800266a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	210a      	movs	r1, #10
 800265e:	438a      	bics	r2, r1
 8002660:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2225      	movs	r2, #37	@ 0x25
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800266a:	4b29      	ldr	r3, [pc, #164]	@ (8002710 <HAL_DMA_IRQHandler+0x160>)
 800266c:	6859      	ldr	r1, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	221c      	movs	r2, #28
 8002674:	4013      	ands	r3, r2
 8002676:	2202      	movs	r2, #2
 8002678:	409a      	lsls	r2, r3
 800267a:	4b25      	ldr	r3, [pc, #148]	@ (8002710 <HAL_DMA_IRQHandler+0x160>)
 800267c:	430a      	orrs	r2, r1
 800267e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2224      	movs	r2, #36	@ 0x24
 8002684:	2100      	movs	r1, #0
 8002686:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d03a      	beq.n	8002706 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	0010      	movs	r0, r2
 8002698:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800269a:	e034      	b.n	8002706 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	221c      	movs	r2, #28
 80026a2:	4013      	ands	r3, r2
 80026a4:	2208      	movs	r2, #8
 80026a6:	409a      	lsls	r2, r3
 80026a8:	0013      	movs	r3, r2
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4013      	ands	r3, r2
 80026ae:	d02b      	beq.n	8002708 <HAL_DMA_IRQHandler+0x158>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2208      	movs	r2, #8
 80026b4:	4013      	ands	r3, r2
 80026b6:	d027      	beq.n	8002708 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	210e      	movs	r1, #14
 80026c4:	438a      	bics	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80026c8:	4b11      	ldr	r3, [pc, #68]	@ (8002710 <HAL_DMA_IRQHandler+0x160>)
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	221c      	movs	r2, #28
 80026d2:	4013      	ands	r3, r2
 80026d4:	2201      	movs	r2, #1
 80026d6:	409a      	lsls	r2, r3
 80026d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002710 <HAL_DMA_IRQHandler+0x160>)
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2225      	movs	r2, #37	@ 0x25
 80026e8:	2101      	movs	r1, #1
 80026ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2224      	movs	r2, #36	@ 0x24
 80026f0:	2100      	movs	r1, #0
 80026f2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	0010      	movs	r0, r2
 8002704:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	46c0      	nop			@ (mov r8, r8)
}
 800270a:	46bd      	mov	sp, r7
 800270c:	b004      	add	sp, #16
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40020000 	.word	0x40020000

08002714 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800272a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800273c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800273e:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <DMA_SetConfig+0x7c>)
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	221c      	movs	r2, #28
 8002748:	4013      	ands	r3, r2
 800274a:	2201      	movs	r2, #1
 800274c:	409a      	lsls	r2, r3
 800274e:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <DMA_SetConfig+0x7c>)
 8002750:	430a      	orrs	r2, r1
 8002752:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b10      	cmp	r3, #16
 8002762:	d108      	bne.n	8002776 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002774:	e007      	b.n	8002786 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	60da      	str	r2, [r3, #12]
}
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	b004      	add	sp, #16
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	40020000 	.word	0x40020000

08002794 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	4a10      	ldr	r2, [pc, #64]	@ (80027e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80027a4:	4694      	mov	ip, r2
 80027a6:	4463      	add	r3, ip
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	001a      	movs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	001a      	movs	r2, r3
 80027b6:	23ff      	movs	r3, #255	@ 0xff
 80027b8:	4013      	ands	r3, r2
 80027ba:	3b08      	subs	r3, #8
 80027bc:	2114      	movs	r1, #20
 80027be:	0018      	movs	r0, r3
 80027c0:	f7fd fca0 	bl	8000104 <__udivsi3>
 80027c4:	0003      	movs	r3, r0
 80027c6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a07      	ldr	r2, [pc, #28]	@ (80027e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80027cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	221f      	movs	r2, #31
 80027d2:	4013      	ands	r3, r2
 80027d4:	2201      	movs	r2, #1
 80027d6:	409a      	lsls	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80027dc:	46c0      	nop			@ (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b004      	add	sp, #16
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	10008200 	.word	0x10008200
 80027e8:	40020880 	.word	0x40020880

080027ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	223f      	movs	r2, #63	@ 0x3f
 80027fa:	4013      	ands	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a0a      	ldr	r2, [pc, #40]	@ (800282c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002802:	4694      	mov	ip, r2
 8002804:	4463      	add	r3, ip
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	001a      	movs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a07      	ldr	r2, [pc, #28]	@ (8002830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002812:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3b01      	subs	r3, #1
 8002818:	2203      	movs	r2, #3
 800281a:	4013      	ands	r3, r2
 800281c:	2201      	movs	r2, #1
 800281e:	409a      	lsls	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002824:	46c0      	nop			@ (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b004      	add	sp, #16
 800282a:	bd80      	pop	{r7, pc}
 800282c:	1000823f 	.word	0x1000823f
 8002830:	40020940 	.word	0x40020940

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002842:	e147      	b.n	8002ad4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2101      	movs	r1, #1
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4091      	lsls	r1, r2
 800284e:	000a      	movs	r2, r1
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d100      	bne.n	800285c <HAL_GPIO_Init+0x28>
 800285a:	e138      	b.n	8002ace <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2203      	movs	r2, #3
 8002862:	4013      	ands	r3, r2
 8002864:	2b01      	cmp	r3, #1
 8002866:	d005      	beq.n	8002874 <HAL_GPIO_Init+0x40>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2203      	movs	r2, #3
 800286e:	4013      	ands	r3, r2
 8002870:	2b02      	cmp	r3, #2
 8002872:	d130      	bne.n	80028d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	409a      	lsls	r2, r3
 8002882:	0013      	movs	r3, r2
 8002884:	43da      	mvns	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	409a      	lsls	r2, r3
 8002896:	0013      	movs	r3, r2
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028aa:	2201      	movs	r2, #1
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	409a      	lsls	r2, r3
 80028b0:	0013      	movs	r3, r2
 80028b2:	43da      	mvns	r2, r3
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	2201      	movs	r2, #1
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
 80028c8:	0013      	movs	r3, r2
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2203      	movs	r2, #3
 80028dc:	4013      	ands	r3, r2
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d017      	beq.n	8002912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	2203      	movs	r2, #3
 80028ee:	409a      	lsls	r2, r3
 80028f0:	0013      	movs	r3, r2
 80028f2:	43da      	mvns	r2, r3
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	409a      	lsls	r2, r3
 8002904:	0013      	movs	r3, r2
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2203      	movs	r2, #3
 8002918:	4013      	ands	r3, r2
 800291a:	2b02      	cmp	r3, #2
 800291c:	d123      	bne.n	8002966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	08da      	lsrs	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3208      	adds	r2, #8
 8002926:	0092      	lsls	r2, r2, #2
 8002928:	58d3      	ldr	r3, [r2, r3]
 800292a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2207      	movs	r2, #7
 8002930:	4013      	ands	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	220f      	movs	r2, #15
 8002936:	409a      	lsls	r2, r3
 8002938:	0013      	movs	r3, r2
 800293a:	43da      	mvns	r2, r3
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2107      	movs	r1, #7
 800294a:	400b      	ands	r3, r1
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	409a      	lsls	r2, r3
 8002950:	0013      	movs	r3, r2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	08da      	lsrs	r2, r3, #3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3208      	adds	r2, #8
 8002960:	0092      	lsls	r2, r2, #2
 8002962:	6939      	ldr	r1, [r7, #16]
 8002964:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	2203      	movs	r2, #3
 8002972:	409a      	lsls	r2, r3
 8002974:	0013      	movs	r3, r2
 8002976:	43da      	mvns	r2, r3
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2203      	movs	r2, #3
 8002984:	401a      	ands	r2, r3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	409a      	lsls	r2, r3
 800298c:	0013      	movs	r3, r2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	23c0      	movs	r3, #192	@ 0xc0
 80029a0:	029b      	lsls	r3, r3, #10
 80029a2:	4013      	ands	r3, r2
 80029a4:	d100      	bne.n	80029a8 <HAL_GPIO_Init+0x174>
 80029a6:	e092      	b.n	8002ace <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80029a8:	4a50      	ldr	r2, [pc, #320]	@ (8002aec <HAL_GPIO_Init+0x2b8>)
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	3318      	adds	r3, #24
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	589b      	ldr	r3, [r3, r2]
 80029b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2203      	movs	r2, #3
 80029ba:	4013      	ands	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	220f      	movs	r2, #15
 80029c0:	409a      	lsls	r2, r3
 80029c2:	0013      	movs	r3, r2
 80029c4:	43da      	mvns	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	23a0      	movs	r3, #160	@ 0xa0
 80029d0:	05db      	lsls	r3, r3, #23
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d013      	beq.n	80029fe <HAL_GPIO_Init+0x1ca>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a45      	ldr	r2, [pc, #276]	@ (8002af0 <HAL_GPIO_Init+0x2bc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00d      	beq.n	80029fa <HAL_GPIO_Init+0x1c6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a44      	ldr	r2, [pc, #272]	@ (8002af4 <HAL_GPIO_Init+0x2c0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <HAL_GPIO_Init+0x1c2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a43      	ldr	r2, [pc, #268]	@ (8002af8 <HAL_GPIO_Init+0x2c4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d101      	bne.n	80029f2 <HAL_GPIO_Init+0x1be>
 80029ee:	2303      	movs	r3, #3
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x1cc>
 80029f2:	2305      	movs	r3, #5
 80029f4:	e004      	b.n	8002a00 <HAL_GPIO_Init+0x1cc>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_Init+0x1cc>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_GPIO_Init+0x1cc>
 80029fe:	2300      	movs	r3, #0
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	2103      	movs	r1, #3
 8002a04:	400a      	ands	r2, r1
 8002a06:	00d2      	lsls	r2, r2, #3
 8002a08:	4093      	lsls	r3, r2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002a10:	4936      	ldr	r1, [pc, #216]	@ (8002aec <HAL_GPIO_Init+0x2b8>)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	3318      	adds	r3, #24
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a1e:	4b33      	ldr	r3, [pc, #204]	@ (8002aec <HAL_GPIO_Init+0x2b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	43da      	mvns	r2, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	035b      	lsls	r3, r3, #13
 8002a36:	4013      	ands	r3, r2
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a42:	4b2a      	ldr	r3, [pc, #168]	@ (8002aec <HAL_GPIO_Init+0x2b8>)
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002a48:	4b28      	ldr	r3, [pc, #160]	@ (8002aec <HAL_GPIO_Init+0x2b8>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	43da      	mvns	r2, r3
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	2380      	movs	r3, #128	@ 0x80
 8002a5e:	039b      	lsls	r3, r3, #14
 8002a60:	4013      	ands	r3, r2
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002aec <HAL_GPIO_Init+0x2b8>)
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a72:	4a1e      	ldr	r2, [pc, #120]	@ (8002aec <HAL_GPIO_Init+0x2b8>)
 8002a74:	2384      	movs	r3, #132	@ 0x84
 8002a76:	58d3      	ldr	r3, [r2, r3]
 8002a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	2380      	movs	r3, #128	@ 0x80
 8002a8a:	029b      	lsls	r3, r3, #10
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a98:	4914      	ldr	r1, [pc, #80]	@ (8002aec <HAL_GPIO_Init+0x2b8>)
 8002a9a:	2284      	movs	r2, #132	@ 0x84
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002aa0:	4a12      	ldr	r2, [pc, #72]	@ (8002aec <HAL_GPIO_Init+0x2b8>)
 8002aa2:	2380      	movs	r3, #128	@ 0x80
 8002aa4:	58d3      	ldr	r3, [r2, r3]
 8002aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	2380      	movs	r3, #128	@ 0x80
 8002ab8:	025b      	lsls	r3, r3, #9
 8002aba:	4013      	ands	r3, r2
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ac6:	4909      	ldr	r1, [pc, #36]	@ (8002aec <HAL_GPIO_Init+0x2b8>)
 8002ac8:	2280      	movs	r2, #128	@ 0x80
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	40da      	lsrs	r2, r3
 8002adc:	1e13      	subs	r3, r2, #0
 8002ade:	d000      	beq.n	8002ae2 <HAL_GPIO_Init+0x2ae>
 8002ae0:	e6b0      	b.n	8002844 <HAL_GPIO_Init+0x10>
  }
}
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	46c0      	nop			@ (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b006      	add	sp, #24
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021800 	.word	0x40021800
 8002af0:	50000400 	.word	0x50000400
 8002af4:	50000800 	.word	0x50000800
 8002af8:	50000c00 	.word	0x50000c00

08002afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	0008      	movs	r0, r1
 8002b06:	0011      	movs	r1, r2
 8002b08:	1cbb      	adds	r3, r7, #2
 8002b0a:	1c02      	adds	r2, r0, #0
 8002b0c:	801a      	strh	r2, [r3, #0]
 8002b0e:	1c7b      	adds	r3, r7, #1
 8002b10:	1c0a      	adds	r2, r1, #0
 8002b12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b14:	1c7b      	adds	r3, r7, #1
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b1c:	1cbb      	adds	r3, r7, #2
 8002b1e:	881a      	ldrh	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b24:	e003      	b.n	8002b2e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b26:	1cbb      	adds	r3, r7, #2
 8002b28:	881a      	ldrh	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b2e:	46c0      	nop			@ (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b002      	add	sp, #8
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	000a      	movs	r2, r1
 8002b40:	1cbb      	adds	r3, r7, #2
 8002b42:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b4a:	1cbb      	adds	r3, r7, #2
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4013      	ands	r3, r2
 8002b52:	041a      	lsls	r2, r3, #16
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	1cb9      	adds	r1, r7, #2
 8002b5a:	8809      	ldrh	r1, [r1, #0]
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	619a      	str	r2, [r3, #24]
}
 8002b64:	46c0      	nop			@ (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b004      	add	sp, #16
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	0002      	movs	r2, r0
 8002b74:	1dbb      	adds	r3, r7, #6
 8002b76:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002b78:	4b10      	ldr	r3, [pc, #64]	@ (8002bbc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	1dba      	adds	r2, r7, #6
 8002b7e:	8812      	ldrh	r2, [r2, #0]
 8002b80:	4013      	ands	r3, r2
 8002b82:	d008      	beq.n	8002b96 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002b84:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002b86:	1dba      	adds	r2, r7, #6
 8002b88:	8812      	ldrh	r2, [r2, #0]
 8002b8a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002b8c:	1dbb      	adds	r3, r7, #6
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7fd fd5b 	bl	800064c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002b96:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	1dba      	adds	r2, r7, #6
 8002b9c:	8812      	ldrh	r2, [r2, #0]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d008      	beq.n	8002bb4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002ba2:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002ba4:	1dba      	adds	r2, r7, #6
 8002ba6:	8812      	ldrh	r2, [r2, #0]
 8002ba8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002baa:	1dbb      	adds	r3, r7, #6
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f7fd fd5e 	bl	8000670 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002bb4:	46c0      	nop			@ (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b002      	add	sp, #8
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021800 	.word	0x40021800

08002bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002bc8:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a19      	ldr	r2, [pc, #100]	@ (8002c34 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	4b17      	ldr	r3, [pc, #92]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d11f      	bne.n	8002c24 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002be4:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	0013      	movs	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	189b      	adds	r3, r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4912      	ldr	r1, [pc, #72]	@ (8002c3c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f7fd fa86 	bl	8000104 <__udivsi3>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bfe:	e008      	b.n	8002c12 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e001      	b.n	8002c12 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e009      	b.n	8002c26 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c12:	4b07      	ldr	r3, [pc, #28]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	2380      	movs	r3, #128	@ 0x80
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d0ed      	beq.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b004      	add	sp, #16
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	40007000 	.word	0x40007000
 8002c34:	fffff9ff 	.word	0xfffff9ff
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	000f4240 	.word	0x000f4240

08002c40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e2fe      	b.n	8003250 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2201      	movs	r2, #1
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d100      	bne.n	8002c5e <HAL_RCC_OscConfig+0x1e>
 8002c5c:	e07c      	b.n	8002d58 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5e:	4bc3      	ldr	r3, [pc, #780]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2238      	movs	r2, #56	@ 0x38
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c68:	4bc0      	ldr	r3, [pc, #768]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	4013      	ands	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3e>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d002      	beq.n	8002c84 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d10b      	bne.n	8002c9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c84:	4bb9      	ldr	r3, [pc, #740]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	@ 0x80
 8002c8a:	029b      	lsls	r3, r3, #10
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d062      	beq.n	8002d56 <HAL_RCC_OscConfig+0x116>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d15e      	bne.n	8002d56 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e2d9      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	2380      	movs	r3, #128	@ 0x80
 8002ca2:	025b      	lsls	r3, r3, #9
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x78>
 8002ca8:	4bb0      	ldr	r3, [pc, #704]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4baf      	ldr	r3, [pc, #700]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002cae:	2180      	movs	r1, #128	@ 0x80
 8002cb0:	0249      	lsls	r1, r1, #9
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e020      	b.n	8002cfa <HAL_RCC_OscConfig+0xba>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	23a0      	movs	r3, #160	@ 0xa0
 8002cbe:	02db      	lsls	r3, r3, #11
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d10e      	bne.n	8002ce2 <HAL_RCC_OscConfig+0xa2>
 8002cc4:	4ba9      	ldr	r3, [pc, #676]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4ba8      	ldr	r3, [pc, #672]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002cca:	2180      	movs	r1, #128	@ 0x80
 8002ccc:	02c9      	lsls	r1, r1, #11
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	4ba6      	ldr	r3, [pc, #664]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4ba5      	ldr	r3, [pc, #660]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002cd8:	2180      	movs	r1, #128	@ 0x80
 8002cda:	0249      	lsls	r1, r1, #9
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e00b      	b.n	8002cfa <HAL_RCC_OscConfig+0xba>
 8002ce2:	4ba2      	ldr	r3, [pc, #648]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4ba1      	ldr	r3, [pc, #644]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002ce8:	49a1      	ldr	r1, [pc, #644]	@ (8002f70 <HAL_RCC_OscConfig+0x330>)
 8002cea:	400a      	ands	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	4b9f      	ldr	r3, [pc, #636]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b9e      	ldr	r3, [pc, #632]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002cf4:	499f      	ldr	r1, [pc, #636]	@ (8002f74 <HAL_RCC_OscConfig+0x334>)
 8002cf6:	400a      	ands	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d014      	beq.n	8002d2c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7fe fa09 	bl	8001118 <HAL_GetTick>
 8002d06:	0003      	movs	r3, r0
 8002d08:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7fe fa04 	bl	8001118 <HAL_GetTick>
 8002d10:	0002      	movs	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	@ 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e298      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d1e:	4b93      	ldr	r3, [pc, #588]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	2380      	movs	r3, #128	@ 0x80
 8002d24:	029b      	lsls	r3, r3, #10
 8002d26:	4013      	ands	r3, r2
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0xcc>
 8002d2a:	e015      	b.n	8002d58 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe f9f4 	bl	8001118 <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d36:	f7fe f9ef 	bl	8001118 <HAL_GetTick>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b64      	cmp	r3, #100	@ 0x64
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e283      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d48:	4b88      	ldr	r3, [pc, #544]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2380      	movs	r3, #128	@ 0x80
 8002d4e:	029b      	lsls	r3, r3, #10
 8002d50:	4013      	ands	r3, r2
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0xf6>
 8002d54:	e000      	b.n	8002d58 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d56:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d100      	bne.n	8002d64 <HAL_RCC_OscConfig+0x124>
 8002d62:	e099      	b.n	8002e98 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d64:	4b81      	ldr	r3, [pc, #516]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2238      	movs	r2, #56	@ 0x38
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d6e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2203      	movs	r2, #3
 8002d74:	4013      	ands	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d102      	bne.n	8002d84 <HAL_RCC_OscConfig+0x144>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d002      	beq.n	8002d8a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d135      	bne.n	8002df6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8a:	4b78      	ldr	r3, [pc, #480]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	2380      	movs	r3, #128	@ 0x80
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4013      	ands	r3, r2
 8002d94:	d005      	beq.n	8002da2 <HAL_RCC_OscConfig+0x162>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e256      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da2:	4b72      	ldr	r3, [pc, #456]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4a74      	ldr	r2, [pc, #464]	@ (8002f78 <HAL_RCC_OscConfig+0x338>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	021a      	lsls	r2, r3, #8
 8002db2:	4b6e      	ldr	r3, [pc, #440]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002db4:	430a      	orrs	r2, r1
 8002db6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d112      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dbe:	4b6b      	ldr	r3, [pc, #428]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a6e      	ldr	r2, [pc, #440]	@ (8002f7c <HAL_RCC_OscConfig+0x33c>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	4b67      	ldr	r3, [pc, #412]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002dd2:	4b66      	ldr	r3, [pc, #408]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0adb      	lsrs	r3, r3, #11
 8002dd8:	2207      	movs	r2, #7
 8002dda:	4013      	ands	r3, r2
 8002ddc:	4a68      	ldr	r2, [pc, #416]	@ (8002f80 <HAL_RCC_OscConfig+0x340>)
 8002dde:	40da      	lsrs	r2, r3
 8002de0:	4b68      	ldr	r3, [pc, #416]	@ (8002f84 <HAL_RCC_OscConfig+0x344>)
 8002de2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002de4:	4b68      	ldr	r3, [pc, #416]	@ (8002f88 <HAL_RCC_OscConfig+0x348>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7fe f939 	bl	8001060 <HAL_InitTick>
 8002dee:	1e03      	subs	r3, r0, #0
 8002df0:	d051      	beq.n	8002e96 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e22c      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d030      	beq.n	8002e60 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a5e      	ldr	r2, [pc, #376]	@ (8002f7c <HAL_RCC_OscConfig+0x33c>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	4b57      	ldr	r3, [pc, #348]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002e12:	4b56      	ldr	r3, [pc, #344]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b55      	ldr	r3, [pc, #340]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002e18:	2180      	movs	r1, #128	@ 0x80
 8002e1a:	0049      	lsls	r1, r1, #1
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe f97a 	bl	8001118 <HAL_GetTick>
 8002e24:	0003      	movs	r3, r0
 8002e26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2a:	f7fe f975 	bl	8001118 <HAL_GetTick>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e209      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	2380      	movs	r3, #128	@ 0x80
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4013      	ands	r3, r2
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	4b48      	ldr	r3, [pc, #288]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f78 <HAL_RCC_OscConfig+0x338>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	021a      	lsls	r2, r3, #8
 8002e58:	4b44      	ldr	r3, [pc, #272]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	e01b      	b.n	8002e98 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002e60:	4b42      	ldr	r3, [pc, #264]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b41      	ldr	r3, [pc, #260]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002e66:	4949      	ldr	r1, [pc, #292]	@ (8002f8c <HAL_RCC_OscConfig+0x34c>)
 8002e68:	400a      	ands	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7fe f954 	bl	8001118 <HAL_GetTick>
 8002e70:	0003      	movs	r3, r0
 8002e72:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e76:	f7fe f94f 	bl	8001118 <HAL_GetTick>
 8002e7a:	0002      	movs	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e1e3      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e88:	4b38      	ldr	r3, [pc, #224]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	2380      	movs	r3, #128	@ 0x80
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4013      	ands	r3, r2
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x236>
 8002e94:	e000      	b.n	8002e98 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e96:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d047      	beq.n	8002f32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ea2:	4b32      	ldr	r3, [pc, #200]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2238      	movs	r2, #56	@ 0x38
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b18      	cmp	r3, #24
 8002eac:	d10a      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002eae:	4b2f      	ldr	r3, [pc, #188]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d03c      	beq.n	8002f32 <HAL_RCC_OscConfig+0x2f2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d138      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e1c5      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d019      	beq.n	8002f00 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ecc:	4b27      	ldr	r3, [pc, #156]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002ece:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ed0:	4b26      	ldr	r3, [pc, #152]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fe f91e 	bl	8001118 <HAL_GetTick>
 8002edc:	0003      	movs	r3, r0
 8002ede:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee2:	f7fe f919 	bl	8001118 <HAL_GetTick>
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e1ad      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef8:	2202      	movs	r2, #2
 8002efa:	4013      	ands	r3, r2
 8002efc:	d0f1      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x2a2>
 8002efe:	e018      	b.n	8002f32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002f00:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002f02:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f04:	4b19      	ldr	r3, [pc, #100]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002f06:	2101      	movs	r1, #1
 8002f08:	438a      	bics	r2, r1
 8002f0a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7fe f904 	bl	8001118 <HAL_GetTick>
 8002f10:	0003      	movs	r3, r0
 8002f12:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f16:	f7fe f8ff 	bl	8001118 <HAL_GetTick>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e193      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f28:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d1f1      	bne.n	8002f16 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2204      	movs	r2, #4
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d100      	bne.n	8002f3e <HAL_RCC_OscConfig+0x2fe>
 8002f3c:	e0c6      	b.n	80030cc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f3e:	231f      	movs	r3, #31
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f46:	4b09      	ldr	r3, [pc, #36]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2238      	movs	r2, #56	@ 0x38
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d11e      	bne.n	8002f90 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002f52:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <HAL_RCC_OscConfig+0x32c>)
 8002f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f56:	2202      	movs	r2, #2
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d100      	bne.n	8002f5e <HAL_RCC_OscConfig+0x31e>
 8002f5c:	e0b6      	b.n	80030cc <HAL_RCC_OscConfig+0x48c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d000      	beq.n	8002f68 <HAL_RCC_OscConfig+0x328>
 8002f66:	e0b1      	b.n	80030cc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e171      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	fffeffff 	.word	0xfffeffff
 8002f74:	fffbffff 	.word	0xfffbffff
 8002f78:	ffff80ff 	.word	0xffff80ff
 8002f7c:	ffffc7ff 	.word	0xffffc7ff
 8002f80:	00f42400 	.word	0x00f42400
 8002f84:	20000000 	.word	0x20000000
 8002f88:	20000004 	.word	0x20000004
 8002f8c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f90:	4bb1      	ldr	r3, [pc, #708]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8002f92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f94:	2380      	movs	r3, #128	@ 0x80
 8002f96:	055b      	lsls	r3, r3, #21
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x360>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x362>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d011      	beq.n	8002fca <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	4bac      	ldr	r3, [pc, #688]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8002fa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002faa:	4bab      	ldr	r3, [pc, #684]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8002fac:	2180      	movs	r1, #128	@ 0x80
 8002fae:	0549      	lsls	r1, r1, #21
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002fb4:	4ba8      	ldr	r3, [pc, #672]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8002fb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fb8:	2380      	movs	r3, #128	@ 0x80
 8002fba:	055b      	lsls	r3, r3, #21
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002fc2:	231f      	movs	r3, #31
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fca:	4ba4      	ldr	r3, [pc, #656]	@ (800325c <HAL_RCC_OscConfig+0x61c>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	2380      	movs	r3, #128	@ 0x80
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d11a      	bne.n	800300c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd6:	4ba1      	ldr	r3, [pc, #644]	@ (800325c <HAL_RCC_OscConfig+0x61c>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4ba0      	ldr	r3, [pc, #640]	@ (800325c <HAL_RCC_OscConfig+0x61c>)
 8002fdc:	2180      	movs	r1, #128	@ 0x80
 8002fde:	0049      	lsls	r1, r1, #1
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe f898 	bl	8001118 <HAL_GetTick>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fee:	f7fe f893 	bl	8001118 <HAL_GetTick>
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e127      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003000:	4b96      	ldr	r3, [pc, #600]	@ (800325c <HAL_RCC_OscConfig+0x61c>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2380      	movs	r3, #128	@ 0x80
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4013      	ands	r3, r2
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d106      	bne.n	8003022 <HAL_RCC_OscConfig+0x3e2>
 8003014:	4b90      	ldr	r3, [pc, #576]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003016:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003018:	4b8f      	ldr	r3, [pc, #572]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 800301a:	2101      	movs	r1, #1
 800301c:	430a      	orrs	r2, r1
 800301e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003020:	e01c      	b.n	800305c <HAL_RCC_OscConfig+0x41c>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x404>
 800302a:	4b8b      	ldr	r3, [pc, #556]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 800302c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800302e:	4b8a      	ldr	r3, [pc, #552]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003030:	2104      	movs	r1, #4
 8003032:	430a      	orrs	r2, r1
 8003034:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003036:	4b88      	ldr	r3, [pc, #544]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003038:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800303a:	4b87      	ldr	r3, [pc, #540]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 800303c:	2101      	movs	r1, #1
 800303e:	430a      	orrs	r2, r1
 8003040:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0x41c>
 8003044:	4b84      	ldr	r3, [pc, #528]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003046:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003048:	4b83      	ldr	r3, [pc, #524]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 800304a:	2101      	movs	r1, #1
 800304c:	438a      	bics	r2, r1
 800304e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003050:	4b81      	ldr	r3, [pc, #516]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003052:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003054:	4b80      	ldr	r3, [pc, #512]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003056:	2104      	movs	r1, #4
 8003058:	438a      	bics	r2, r1
 800305a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d014      	beq.n	800308e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe f858 	bl	8001118 <HAL_GetTick>
 8003068:	0003      	movs	r3, r0
 800306a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800306c:	e009      	b.n	8003082 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306e:	f7fe f853 	bl	8001118 <HAL_GetTick>
 8003072:	0002      	movs	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	4a79      	ldr	r2, [pc, #484]	@ (8003260 <HAL_RCC_OscConfig+0x620>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e0e6      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003082:	4b75      	ldr	r3, [pc, #468]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003086:	2202      	movs	r2, #2
 8003088:	4013      	ands	r3, r2
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x42e>
 800308c:	e013      	b.n	80030b6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7fe f843 	bl	8001118 <HAL_GetTick>
 8003092:	0003      	movs	r3, r0
 8003094:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003096:	e009      	b.n	80030ac <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003098:	f7fe f83e 	bl	8001118 <HAL_GetTick>
 800309c:	0002      	movs	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	4a6f      	ldr	r2, [pc, #444]	@ (8003260 <HAL_RCC_OscConfig+0x620>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e0d1      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80030ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b0:	2202      	movs	r2, #2
 80030b2:	4013      	ands	r3, r2
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80030b6:	231f      	movs	r3, #31
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030c0:	4b65      	ldr	r3, [pc, #404]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80030c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030c4:	4b64      	ldr	r3, [pc, #400]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80030c6:	4967      	ldr	r1, [pc, #412]	@ (8003264 <HAL_RCC_OscConfig+0x624>)
 80030c8:	400a      	ands	r2, r1
 80030ca:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d100      	bne.n	80030d6 <HAL_RCC_OscConfig+0x496>
 80030d4:	e0bb      	b.n	800324e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d6:	4b60      	ldr	r3, [pc, #384]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2238      	movs	r2, #56	@ 0x38
 80030dc:	4013      	ands	r3, r2
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d100      	bne.n	80030e4 <HAL_RCC_OscConfig+0x4a4>
 80030e2:	e07b      	b.n	80031dc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d156      	bne.n	800319a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ec:	4b5a      	ldr	r3, [pc, #360]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b59      	ldr	r3, [pc, #356]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80030f2:	495d      	ldr	r1, [pc, #372]	@ (8003268 <HAL_RCC_OscConfig+0x628>)
 80030f4:	400a      	ands	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe f80e 	bl	8001118 <HAL_GetTick>
 80030fc:	0003      	movs	r3, r0
 80030fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003102:	f7fe f809 	bl	8001118 <HAL_GetTick>
 8003106:	0002      	movs	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e09d      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003114:	4b50      	ldr	r3, [pc, #320]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	2380      	movs	r3, #128	@ 0x80
 800311a:	049b      	lsls	r3, r3, #18
 800311c:	4013      	ands	r3, r2
 800311e:	d1f0      	bne.n	8003102 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003120:	4b4d      	ldr	r3, [pc, #308]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a51      	ldr	r2, [pc, #324]	@ (800326c <HAL_RCC_OscConfig+0x62c>)
 8003126:	4013      	ands	r3, r2
 8003128:	0019      	movs	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1a      	ldr	r2, [r3, #32]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314c:	431a      	orrs	r2, r3
 800314e:	4b42      	ldr	r3, [pc, #264]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003150:	430a      	orrs	r2, r1
 8003152:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003154:	4b40      	ldr	r3, [pc, #256]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b3f      	ldr	r3, [pc, #252]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 800315a:	2180      	movs	r1, #128	@ 0x80
 800315c:	0449      	lsls	r1, r1, #17
 800315e:	430a      	orrs	r2, r1
 8003160:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003162:	4b3d      	ldr	r3, [pc, #244]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	4b3c      	ldr	r3, [pc, #240]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003168:	2180      	movs	r1, #128	@ 0x80
 800316a:	0549      	lsls	r1, r1, #21
 800316c:	430a      	orrs	r2, r1
 800316e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fd ffd2 	bl	8001118 <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317a:	f7fd ffcd 	bl	8001118 <HAL_GetTick>
 800317e:	0002      	movs	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e061      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318c:	4b32      	ldr	r3, [pc, #200]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2380      	movs	r3, #128	@ 0x80
 8003192:	049b      	lsls	r3, r3, #18
 8003194:	4013      	ands	r3, r2
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x53a>
 8003198:	e059      	b.n	800324e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319a:	4b2f      	ldr	r3, [pc, #188]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b2e      	ldr	r3, [pc, #184]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80031a0:	4931      	ldr	r1, [pc, #196]	@ (8003268 <HAL_RCC_OscConfig+0x628>)
 80031a2:	400a      	ands	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7fd ffb7 	bl	8001118 <HAL_GetTick>
 80031aa:	0003      	movs	r3, r0
 80031ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fd ffb2 	bl	8001118 <HAL_GetTick>
 80031b4:	0002      	movs	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e046      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c2:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	2380      	movs	r3, #128	@ 0x80
 80031c8:	049b      	lsls	r3, r3, #18
 80031ca:	4013      	ands	r3, r2
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80031ce:	4b22      	ldr	r3, [pc, #136]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	4b21      	ldr	r3, [pc, #132]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80031d4:	4926      	ldr	r1, [pc, #152]	@ (8003270 <HAL_RCC_OscConfig+0x630>)
 80031d6:	400a      	ands	r2, r1
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	e038      	b.n	800324e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e033      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80031e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2203      	movs	r2, #3
 80031f2:	401a      	ands	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d126      	bne.n	800324a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2270      	movs	r2, #112	@ 0x70
 8003200:	401a      	ands	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d11f      	bne.n	800324a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	23fe      	movs	r3, #254	@ 0xfe
 800320e:	01db      	lsls	r3, r3, #7
 8003210:	401a      	ands	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d116      	bne.n	800324a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	23f8      	movs	r3, #248	@ 0xf8
 8003220:	039b      	lsls	r3, r3, #14
 8003222:	401a      	ands	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d10e      	bne.n	800324a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	23e0      	movs	r3, #224	@ 0xe0
 8003230:	051b      	lsls	r3, r3, #20
 8003232:	401a      	ands	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d106      	bne.n	800324a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	0f5b      	lsrs	r3, r3, #29
 8003240:	075a      	lsls	r2, r3, #29
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d001      	beq.n	800324e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	b008      	add	sp, #32
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000
 800325c:	40007000 	.word	0x40007000
 8003260:	00001388 	.word	0x00001388
 8003264:	efffffff 	.word	0xefffffff
 8003268:	feffffff 	.word	0xfeffffff
 800326c:	11c1808c 	.word	0x11c1808c
 8003270:	eefefffc 	.word	0xeefefffc

08003274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0e9      	b.n	800345c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003288:	4b76      	ldr	r3, [pc, #472]	@ (8003464 <HAL_RCC_ClockConfig+0x1f0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2207      	movs	r2, #7
 800328e:	4013      	ands	r3, r2
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d91e      	bls.n	80032d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003296:	4b73      	ldr	r3, [pc, #460]	@ (8003464 <HAL_RCC_ClockConfig+0x1f0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2207      	movs	r2, #7
 800329c:	4393      	bics	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	4b70      	ldr	r3, [pc, #448]	@ (8003464 <HAL_RCC_ClockConfig+0x1f0>)
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032a8:	f7fd ff36 	bl	8001118 <HAL_GetTick>
 80032ac:	0003      	movs	r3, r0
 80032ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032b0:	e009      	b.n	80032c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b2:	f7fd ff31 	bl	8001118 <HAL_GetTick>
 80032b6:	0002      	movs	r2, r0
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	4a6a      	ldr	r2, [pc, #424]	@ (8003468 <HAL_RCC_ClockConfig+0x1f4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e0ca      	b.n	800345c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032c6:	4b67      	ldr	r3, [pc, #412]	@ (8003464 <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2207      	movs	r2, #7
 80032cc:	4013      	ands	r3, r2
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d1ee      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2202      	movs	r2, #2
 80032da:	4013      	ands	r3, r2
 80032dc:	d015      	beq.n	800330a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2204      	movs	r2, #4
 80032e4:	4013      	ands	r3, r2
 80032e6:	d006      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80032e8:	4b60      	ldr	r3, [pc, #384]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	4b5f      	ldr	r3, [pc, #380]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 80032ee:	21e0      	movs	r1, #224	@ 0xe0
 80032f0:	01c9      	lsls	r1, r1, #7
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f6:	4b5d      	ldr	r3, [pc, #372]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	4a5d      	ldr	r2, [pc, #372]	@ (8003470 <HAL_RCC_ClockConfig+0x1fc>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	0019      	movs	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	4b59      	ldr	r3, [pc, #356]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 8003306:	430a      	orrs	r2, r1
 8003308:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2201      	movs	r2, #1
 8003310:	4013      	ands	r3, r2
 8003312:	d057      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d107      	bne.n	800332c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331c:	4b53      	ldr	r3, [pc, #332]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	2380      	movs	r3, #128	@ 0x80
 8003322:	029b      	lsls	r3, r3, #10
 8003324:	4013      	ands	r3, r2
 8003326:	d12b      	bne.n	8003380 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e097      	b.n	800345c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d107      	bne.n	8003344 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003334:	4b4d      	ldr	r3, [pc, #308]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	049b      	lsls	r3, r3, #18
 800333c:	4013      	ands	r3, r2
 800333e:	d11f      	bne.n	8003380 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e08b      	b.n	800345c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800334c:	4b47      	ldr	r3, [pc, #284]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	2380      	movs	r3, #128	@ 0x80
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4013      	ands	r3, r2
 8003356:	d113      	bne.n	8003380 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e07f      	b.n	800345c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d106      	bne.n	8003372 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003364:	4b41      	ldr	r3, [pc, #260]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 8003366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003368:	2202      	movs	r2, #2
 800336a:	4013      	ands	r3, r2
 800336c:	d108      	bne.n	8003380 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e074      	b.n	800345c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003372:	4b3e      	ldr	r3, [pc, #248]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 8003374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003376:	2202      	movs	r2, #2
 8003378:	4013      	ands	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e06d      	b.n	800345c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003380:	4b3a      	ldr	r3, [pc, #232]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2207      	movs	r2, #7
 8003386:	4393      	bics	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	4b37      	ldr	r3, [pc, #220]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 8003390:	430a      	orrs	r2, r1
 8003392:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003394:	f7fd fec0 	bl	8001118 <HAL_GetTick>
 8003398:	0003      	movs	r3, r0
 800339a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339c:	e009      	b.n	80033b2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339e:	f7fd febb 	bl	8001118 <HAL_GetTick>
 80033a2:	0002      	movs	r2, r0
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003468 <HAL_RCC_ClockConfig+0x1f4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e054      	b.n	800345c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b2:	4b2e      	ldr	r3, [pc, #184]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2238      	movs	r2, #56	@ 0x38
 80033b8:	401a      	ands	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d1ec      	bne.n	800339e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033c4:	4b27      	ldr	r3, [pc, #156]	@ (8003464 <HAL_RCC_ClockConfig+0x1f0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2207      	movs	r2, #7
 80033ca:	4013      	ands	r3, r2
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d21e      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d2:	4b24      	ldr	r3, [pc, #144]	@ (8003464 <HAL_RCC_ClockConfig+0x1f0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2207      	movs	r2, #7
 80033d8:	4393      	bics	r3, r2
 80033da:	0019      	movs	r1, r3
 80033dc:	4b21      	ldr	r3, [pc, #132]	@ (8003464 <HAL_RCC_ClockConfig+0x1f0>)
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033e4:	f7fd fe98 	bl	8001118 <HAL_GetTick>
 80033e8:	0003      	movs	r3, r0
 80033ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033ec:	e009      	b.n	8003402 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ee:	f7fd fe93 	bl	8001118 <HAL_GetTick>
 80033f2:	0002      	movs	r2, r0
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003468 <HAL_RCC_ClockConfig+0x1f4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e02c      	b.n	800345c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003402:	4b18      	ldr	r3, [pc, #96]	@ (8003464 <HAL_RCC_ClockConfig+0x1f0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2207      	movs	r2, #7
 8003408:	4013      	ands	r3, r2
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d1ee      	bne.n	80033ee <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2204      	movs	r2, #4
 8003416:	4013      	ands	r3, r2
 8003418:	d009      	beq.n	800342e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800341a:	4b14      	ldr	r3, [pc, #80]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	4a15      	ldr	r2, [pc, #84]	@ (8003474 <HAL_RCC_ClockConfig+0x200>)
 8003420:	4013      	ands	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	4b10      	ldr	r3, [pc, #64]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800342e:	f000 f829 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003432:	0001      	movs	r1, r0
 8003434:	4b0d      	ldr	r3, [pc, #52]	@ (800346c <HAL_RCC_ClockConfig+0x1f8>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	220f      	movs	r2, #15
 800343c:	401a      	ands	r2, r3
 800343e:	4b0e      	ldr	r3, [pc, #56]	@ (8003478 <HAL_RCC_ClockConfig+0x204>)
 8003440:	0092      	lsls	r2, r2, #2
 8003442:	58d3      	ldr	r3, [r2, r3]
 8003444:	221f      	movs	r2, #31
 8003446:	4013      	ands	r3, r2
 8003448:	000a      	movs	r2, r1
 800344a:	40da      	lsrs	r2, r3
 800344c:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <HAL_RCC_ClockConfig+0x208>)
 800344e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003450:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <HAL_RCC_ClockConfig+0x20c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	0018      	movs	r0, r3
 8003456:	f7fd fe03 	bl	8001060 <HAL_InitTick>
 800345a:	0003      	movs	r3, r0
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b004      	add	sp, #16
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40022000 	.word	0x40022000
 8003468:	00001388 	.word	0x00001388
 800346c:	40021000 	.word	0x40021000
 8003470:	fffff0ff 	.word	0xfffff0ff
 8003474:	ffff8fff 	.word	0xffff8fff
 8003478:	08005c70 	.word	0x08005c70
 800347c:	20000000 	.word	0x20000000
 8003480:	20000004 	.word	0x20000004

08003484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348a:	4b3c      	ldr	r3, [pc, #240]	@ (800357c <HAL_RCC_GetSysClockFreq+0xf8>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2238      	movs	r2, #56	@ 0x38
 8003490:	4013      	ands	r3, r2
 8003492:	d10f      	bne.n	80034b4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003494:	4b39      	ldr	r3, [pc, #228]	@ (800357c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	0adb      	lsrs	r3, r3, #11
 800349a:	2207      	movs	r2, #7
 800349c:	4013      	ands	r3, r2
 800349e:	2201      	movs	r2, #1
 80034a0:	409a      	lsls	r2, r3
 80034a2:	0013      	movs	r3, r2
 80034a4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80034a6:	6839      	ldr	r1, [r7, #0]
 80034a8:	4835      	ldr	r0, [pc, #212]	@ (8003580 <HAL_RCC_GetSysClockFreq+0xfc>)
 80034aa:	f7fc fe2b 	bl	8000104 <__udivsi3>
 80034ae:	0003      	movs	r3, r0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	e05d      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b4:	4b31      	ldr	r3, [pc, #196]	@ (800357c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2238      	movs	r2, #56	@ 0x38
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d102      	bne.n	80034c6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034c0:	4b30      	ldr	r3, [pc, #192]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x100>)
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	e054      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c6:	4b2d      	ldr	r3, [pc, #180]	@ (800357c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2238      	movs	r2, #56	@ 0x38
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b10      	cmp	r3, #16
 80034d0:	d138      	bne.n	8003544 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80034d2:	4b2a      	ldr	r3, [pc, #168]	@ (800357c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2203      	movs	r2, #3
 80034d8:	4013      	ands	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034dc:	4b27      	ldr	r3, [pc, #156]	@ (800357c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	2207      	movs	r2, #7
 80034e4:	4013      	ands	r3, r2
 80034e6:	3301      	adds	r3, #1
 80034e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d10d      	bne.n	800350c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	4824      	ldr	r0, [pc, #144]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x100>)
 80034f4:	f7fc fe06 	bl	8000104 <__udivsi3>
 80034f8:	0003      	movs	r3, r0
 80034fa:	0019      	movs	r1, r3
 80034fc:	4b1f      	ldr	r3, [pc, #124]	@ (800357c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	227f      	movs	r2, #127	@ 0x7f
 8003504:	4013      	ands	r3, r2
 8003506:	434b      	muls	r3, r1
 8003508:	617b      	str	r3, [r7, #20]
        break;
 800350a:	e00d      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	481c      	ldr	r0, [pc, #112]	@ (8003580 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003510:	f7fc fdf8 	bl	8000104 <__udivsi3>
 8003514:	0003      	movs	r3, r0
 8003516:	0019      	movs	r1, r3
 8003518:	4b18      	ldr	r3, [pc, #96]	@ (800357c <HAL_RCC_GetSysClockFreq+0xf8>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	0a1b      	lsrs	r3, r3, #8
 800351e:	227f      	movs	r2, #127	@ 0x7f
 8003520:	4013      	ands	r3, r2
 8003522:	434b      	muls	r3, r1
 8003524:	617b      	str	r3, [r7, #20]
        break;
 8003526:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003528:	4b14      	ldr	r3, [pc, #80]	@ (800357c <HAL_RCC_GetSysClockFreq+0xf8>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	0f5b      	lsrs	r3, r3, #29
 800352e:	2207      	movs	r2, #7
 8003530:	4013      	ands	r3, r2
 8003532:	3301      	adds	r3, #1
 8003534:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	6978      	ldr	r0, [r7, #20]
 800353a:	f7fc fde3 	bl	8000104 <__udivsi3>
 800353e:	0003      	movs	r3, r0
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	e015      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003544:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2238      	movs	r2, #56	@ 0x38
 800354a:	4013      	ands	r3, r2
 800354c:	2b20      	cmp	r3, #32
 800354e:	d103      	bne.n	8003558 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003550:	2380      	movs	r3, #128	@ 0x80
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	e00b      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003558:	4b08      	ldr	r3, [pc, #32]	@ (800357c <HAL_RCC_GetSysClockFreq+0xf8>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2238      	movs	r2, #56	@ 0x38
 800355e:	4013      	ands	r3, r2
 8003560:	2b18      	cmp	r3, #24
 8003562:	d103      	bne.n	800356c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003564:	23fa      	movs	r3, #250	@ 0xfa
 8003566:	01db      	lsls	r3, r3, #7
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	e001      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003570:	693b      	ldr	r3, [r7, #16]
}
 8003572:	0018      	movs	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	b006      	add	sp, #24
 8003578:	bd80      	pop	{r7, pc}
 800357a:	46c0      	nop			@ (mov r8, r8)
 800357c:	40021000 	.word	0x40021000
 8003580:	00f42400 	.word	0x00f42400
 8003584:	007a1200 	.word	0x007a1200

08003588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003590:	2313      	movs	r3, #19
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003598:	2312      	movs	r3, #18
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	2380      	movs	r3, #128	@ 0x80
 80035a6:	029b      	lsls	r3, r3, #10
 80035a8:	4013      	ands	r3, r2
 80035aa:	d100      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80035ac:	e0a3      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ae:	2011      	movs	r0, #17
 80035b0:	183b      	adds	r3, r7, r0
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b6:	4ba5      	ldr	r3, [pc, #660]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035ba:	2380      	movs	r3, #128	@ 0x80
 80035bc:	055b      	lsls	r3, r3, #21
 80035be:	4013      	ands	r3, r2
 80035c0:	d110      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	4ba2      	ldr	r3, [pc, #648]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035c6:	4ba1      	ldr	r3, [pc, #644]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035c8:	2180      	movs	r1, #128	@ 0x80
 80035ca:	0549      	lsls	r1, r1, #21
 80035cc:	430a      	orrs	r2, r1
 80035ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035d0:	4b9e      	ldr	r3, [pc, #632]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035d4:	2380      	movs	r3, #128	@ 0x80
 80035d6:	055b      	lsls	r3, r3, #21
 80035d8:	4013      	ands	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035de:	183b      	adds	r3, r7, r0
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035e4:	4b9a      	ldr	r3, [pc, #616]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b99      	ldr	r3, [pc, #612]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80035ea:	2180      	movs	r1, #128	@ 0x80
 80035ec:	0049      	lsls	r1, r1, #1
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035f2:	f7fd fd91 	bl	8001118 <HAL_GetTick>
 80035f6:	0003      	movs	r3, r0
 80035f8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035fa:	e00b      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fc:	f7fd fd8c 	bl	8001118 <HAL_GetTick>
 8003600:	0002      	movs	r2, r0
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d904      	bls.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800360a:	2313      	movs	r3, #19
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	2203      	movs	r2, #3
 8003610:	701a      	strb	r2, [r3, #0]
        break;
 8003612:	e005      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003614:	4b8e      	ldr	r3, [pc, #568]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	2380      	movs	r3, #128	@ 0x80
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4013      	ands	r3, r2
 800361e:	d0ed      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003620:	2313      	movs	r3, #19
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d154      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800362a:	4b88      	ldr	r3, [pc, #544]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800362c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800362e:	23c0      	movs	r3, #192	@ 0xc0
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4013      	ands	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d019      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	429a      	cmp	r2, r3
 8003644:	d014      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003646:	4b81      	ldr	r3, [pc, #516]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364a:	4a82      	ldr	r2, [pc, #520]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800364c:	4013      	ands	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003650:	4b7e      	ldr	r3, [pc, #504]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003652:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003654:	4b7d      	ldr	r3, [pc, #500]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003656:	2180      	movs	r1, #128	@ 0x80
 8003658:	0249      	lsls	r1, r1, #9
 800365a:	430a      	orrs	r2, r1
 800365c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800365e:	4b7b      	ldr	r3, [pc, #492]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003660:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003662:	4b7a      	ldr	r3, [pc, #488]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003664:	497c      	ldr	r1, [pc, #496]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003666:	400a      	ands	r2, r1
 8003668:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800366a:	4b78      	ldr	r3, [pc, #480]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2201      	movs	r2, #1
 8003674:	4013      	ands	r3, r2
 8003676:	d016      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fd fd4e 	bl	8001118 <HAL_GetTick>
 800367c:	0003      	movs	r3, r0
 800367e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003680:	e00c      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fd fd49 	bl	8001118 <HAL_GetTick>
 8003686:	0002      	movs	r2, r0
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	4a73      	ldr	r2, [pc, #460]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d904      	bls.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003692:	2313      	movs	r3, #19
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	2203      	movs	r2, #3
 8003698:	701a      	strb	r2, [r3, #0]
            break;
 800369a:	e004      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369c:	4b6b      	ldr	r3, [pc, #428]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800369e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a0:	2202      	movs	r2, #2
 80036a2:	4013      	ands	r3, r2
 80036a4:	d0ed      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80036a6:	2313      	movs	r3, #19
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10a      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b0:	4b66      	ldr	r3, [pc, #408]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	4a67      	ldr	r2, [pc, #412]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	0019      	movs	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036be:	4b63      	ldr	r3, [pc, #396]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036c0:	430a      	orrs	r2, r1
 80036c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036c4:	e00c      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036c6:	2312      	movs	r3, #18
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	2213      	movs	r2, #19
 80036cc:	18ba      	adds	r2, r7, r2
 80036ce:	7812      	ldrb	r2, [r2, #0]
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e005      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d4:	2312      	movs	r3, #18
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	2213      	movs	r2, #19
 80036da:	18ba      	adds	r2, r7, r2
 80036dc:	7812      	ldrb	r2, [r2, #0]
 80036de:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036e0:	2311      	movs	r3, #17
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d105      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ea:	4b58      	ldr	r3, [pc, #352]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036ee:	4b57      	ldr	r3, [pc, #348]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036f0:	495b      	ldr	r1, [pc, #364]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036f2:	400a      	ands	r2, r1
 80036f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2201      	movs	r2, #1
 80036fc:	4013      	ands	r3, r2
 80036fe:	d009      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003700:	4b52      	ldr	r3, [pc, #328]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003704:	2203      	movs	r2, #3
 8003706:	4393      	bics	r3, r2
 8003708:	0019      	movs	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	4b4f      	ldr	r3, [pc, #316]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003710:	430a      	orrs	r2, r1
 8003712:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2210      	movs	r2, #16
 800371a:	4013      	ands	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800371e:	4b4b      	ldr	r3, [pc, #300]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003722:	4a50      	ldr	r2, [pc, #320]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003724:	4013      	ands	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	4b47      	ldr	r3, [pc, #284]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800372e:	430a      	orrs	r2, r1
 8003730:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4013      	ands	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800373e:	4b43      	ldr	r3, [pc, #268]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003742:	4a49      	ldr	r2, [pc, #292]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003744:	4013      	ands	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	4b3f      	ldr	r3, [pc, #252]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800374e:	430a      	orrs	r2, r1
 8003750:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	2380      	movs	r3, #128	@ 0x80
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4013      	ands	r3, r2
 800375c:	d009      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800375e:	4b3b      	ldr	r3, [pc, #236]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003762:	4a42      	ldr	r2, [pc, #264]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003764:	4013      	ands	r3, r2
 8003766:	0019      	movs	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	4b37      	ldr	r3, [pc, #220]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800376e:	430a      	orrs	r2, r1
 8003770:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2220      	movs	r2, #32
 8003778:	4013      	ands	r3, r2
 800377a:	d009      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800377c:	4b33      	ldr	r3, [pc, #204]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800377e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003780:	4a3b      	ldr	r2, [pc, #236]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003782:	4013      	ands	r3, r2
 8003784:	0019      	movs	r1, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	4b30      	ldr	r3, [pc, #192]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800378c:	430a      	orrs	r2, r1
 800378e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	2380      	movs	r3, #128	@ 0x80
 8003796:	01db      	lsls	r3, r3, #7
 8003798:	4013      	ands	r3, r2
 800379a:	d015      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800379c:	4b2b      	ldr	r3, [pc, #172]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800379e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	0899      	lsrs	r1, r3, #2
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69da      	ldr	r2, [r3, #28]
 80037a8:	4b28      	ldr	r3, [pc, #160]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037aa:	430a      	orrs	r2, r1
 80037ac:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	2380      	movs	r3, #128	@ 0x80
 80037b4:	05db      	lsls	r3, r3, #23
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d106      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80037ba:	4b24      	ldr	r3, [pc, #144]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	4b23      	ldr	r3, [pc, #140]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037c0:	2180      	movs	r1, #128	@ 0x80
 80037c2:	0249      	lsls	r1, r1, #9
 80037c4:	430a      	orrs	r2, r1
 80037c6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	2380      	movs	r3, #128	@ 0x80
 80037ce:	039b      	lsls	r3, r3, #14
 80037d0:	4013      	ands	r3, r2
 80037d2:	d016      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80037d4:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d8:	4a26      	ldr	r2, [pc, #152]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80037da:	4013      	ands	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1a      	ldr	r2, [r3, #32]
 80037e2:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037e4:	430a      	orrs	r2, r1
 80037e6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1a      	ldr	r2, [r3, #32]
 80037ec:	2380      	movs	r3, #128	@ 0x80
 80037ee:	03db      	lsls	r3, r3, #15
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d106      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80037f4:	4b15      	ldr	r3, [pc, #84]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	4b14      	ldr	r3, [pc, #80]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037fa:	2180      	movs	r1, #128	@ 0x80
 80037fc:	0449      	lsls	r1, r1, #17
 80037fe:	430a      	orrs	r2, r1
 8003800:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	2380      	movs	r3, #128	@ 0x80
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	4013      	ands	r3, r2
 800380c:	d016      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800380e:	4b0f      	ldr	r3, [pc, #60]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003812:	4a19      	ldr	r2, [pc, #100]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003814:	4013      	ands	r3, r2
 8003816:	0019      	movs	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	4b0b      	ldr	r3, [pc, #44]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800381e:	430a      	orrs	r2, r1
 8003820:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	2380      	movs	r3, #128	@ 0x80
 8003828:	01db      	lsls	r3, r3, #7
 800382a:	429a      	cmp	r2, r3
 800382c:	d106      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800382e:	4b07      	ldr	r3, [pc, #28]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003834:	2180      	movs	r1, #128	@ 0x80
 8003836:	0249      	lsls	r1, r1, #9
 8003838:	430a      	orrs	r2, r1
 800383a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800383c:	2312      	movs	r3, #18
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	781b      	ldrb	r3, [r3, #0]
}
 8003842:	0018      	movs	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	b006      	add	sp, #24
 8003848:	bd80      	pop	{r7, pc}
 800384a:	46c0      	nop			@ (mov r8, r8)
 800384c:	40021000 	.word	0x40021000
 8003850:	40007000 	.word	0x40007000
 8003854:	fffffcff 	.word	0xfffffcff
 8003858:	fffeffff 	.word	0xfffeffff
 800385c:	00001388 	.word	0x00001388
 8003860:	efffffff 	.word	0xefffffff
 8003864:	fffff3ff 	.word	0xfffff3ff
 8003868:	fff3ffff 	.word	0xfff3ffff
 800386c:	ffcfffff 	.word	0xffcfffff
 8003870:	ffffcfff 	.word	0xffffcfff
 8003874:	ffbfffff 	.word	0xffbfffff
 8003878:	ffff3fff 	.word	0xffff3fff

0800387c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e0a8      	b.n	80039e0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	2382      	movs	r3, #130	@ 0x82
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	429a      	cmp	r2, r3
 80038a0:	d009      	beq.n	80038b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	61da      	str	r2, [r3, #28]
 80038a8:	e005      	b.n	80038b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	225d      	movs	r2, #93	@ 0x5d
 80038c0:	5c9b      	ldrb	r3, [r3, r2]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d107      	bne.n	80038d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	225c      	movs	r2, #92	@ 0x5c
 80038cc:	2100      	movs	r1, #0
 80038ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7fc ffcc 	bl	8000870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	225d      	movs	r2, #93	@ 0x5d
 80038dc:	2102      	movs	r1, #2
 80038de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2140      	movs	r1, #64	@ 0x40
 80038ec:	438a      	bics	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	23e0      	movs	r3, #224	@ 0xe0
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d902      	bls.n	8003902 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e002      	b.n	8003908 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003902:	2380      	movs	r3, #128	@ 0x80
 8003904:	015b      	lsls	r3, r3, #5
 8003906:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	23f0      	movs	r3, #240	@ 0xf0
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	429a      	cmp	r2, r3
 8003912:	d008      	beq.n	8003926 <HAL_SPI_Init+0xaa>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	23e0      	movs	r3, #224	@ 0xe0
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	429a      	cmp	r2, r3
 800391e:	d002      	beq.n	8003926 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	2382      	movs	r3, #130	@ 0x82
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	401a      	ands	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6899      	ldr	r1, [r3, #8]
 8003934:	2384      	movs	r3, #132	@ 0x84
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	400b      	ands	r3, r1
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2102      	movs	r1, #2
 8003942:	400b      	ands	r3, r1
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	2101      	movs	r1, #1
 800394c:	400b      	ands	r3, r1
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6999      	ldr	r1, [r3, #24]
 8003954:	2380      	movs	r3, #128	@ 0x80
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	400b      	ands	r3, r1
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2138      	movs	r1, #56	@ 0x38
 8003962:	400b      	ands	r3, r1
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	2180      	movs	r1, #128	@ 0x80
 800396c:	400b      	ands	r3, r1
 800396e:	431a      	orrs	r2, r3
 8003970:	0011      	movs	r1, r2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003976:	2380      	movs	r3, #128	@ 0x80
 8003978:	019b      	lsls	r3, r3, #6
 800397a:	401a      	ands	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	2204      	movs	r2, #4
 800398c:	401a      	ands	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003992:	2110      	movs	r1, #16
 8003994:	400b      	ands	r3, r1
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800399c:	2108      	movs	r1, #8
 800399e:	400b      	ands	r3, r1
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68d9      	ldr	r1, [r3, #12]
 80039a6:	23f0      	movs	r3, #240	@ 0xf0
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	400b      	ands	r3, r1
 80039ac:	431a      	orrs	r2, r3
 80039ae:	0011      	movs	r1, r2
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	2380      	movs	r3, #128	@ 0x80
 80039b4:	015b      	lsls	r3, r3, #5
 80039b6:	401a      	ands	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69da      	ldr	r2, [r3, #28]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4907      	ldr	r1, [pc, #28]	@ (80039e8 <HAL_SPI_Init+0x16c>)
 80039cc:	400a      	ands	r2, r1
 80039ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	225d      	movs	r2, #93	@ 0x5d
 80039da:	2101      	movs	r1, #1
 80039dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b004      	add	sp, #16
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	fffff7ff 	.word	0xfffff7ff

080039ec <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	001a      	movs	r2, r3
 80039fa:	1cbb      	adds	r3, r7, #2
 80039fc:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039fe:	2317      	movs	r3, #23
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	225c      	movs	r2, #92	@ 0x5c
 8003a0a:	5c9b      	ldrb	r3, [r3, r2]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_SPI_TransmitReceive_DMA+0x28>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e17e      	b.n	8003d12 <HAL_SPI_TransmitReceive_DMA+0x326>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	225c      	movs	r2, #92	@ 0x5c
 8003a18:	2101      	movs	r1, #1
 8003a1a:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a1c:	2016      	movs	r0, #22
 8003a1e:	183b      	adds	r3, r7, r0
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	215d      	movs	r1, #93	@ 0x5d
 8003a24:	5c52      	ldrb	r2, [r2, r1]
 8003a26:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003a2e:	0001      	movs	r1, r0
 8003a30:	187b      	adds	r3, r7, r1
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d011      	beq.n	8003a5c <HAL_SPI_TransmitReceive_DMA+0x70>
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	2382      	movs	r3, #130	@ 0x82
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d107      	bne.n	8003a52 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <HAL_SPI_TransmitReceive_DMA+0x66>
 8003a4a:	187b      	adds	r3, r7, r1
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d004      	beq.n	8003a5c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8003a52:	2317      	movs	r3, #23
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	2202      	movs	r2, #2
 8003a58:	701a      	strb	r2, [r3, #0]
    goto error;
 8003a5a:	e153      	b.n	8003d04 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d006      	beq.n	8003a70 <HAL_SPI_TransmitReceive_DMA+0x84>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_SPI_TransmitReceive_DMA+0x84>
 8003a68:	1cbb      	adds	r3, r7, #2
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8003a70:	2317      	movs	r3, #23
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
    goto error;
 8003a78:	e144      	b.n	8003d04 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	225d      	movs	r2, #93	@ 0x5d
 8003a7e:	5c9b      	ldrb	r3, [r3, r2]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d003      	beq.n	8003a8e <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	225d      	movs	r2, #93	@ 0x5d
 8003a8a:	2105      	movs	r1, #5
 8003a8c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1cba      	adds	r2, r7, #2
 8003a9e:	8812      	ldrh	r2, [r2, #0]
 8003aa0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1cba      	adds	r2, r7, #2
 8003aa6:	8812      	ldrh	r2, [r2, #0]
 8003aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1cba      	adds	r2, r7, #2
 8003ab4:	2144      	movs	r1, #68	@ 0x44
 8003ab6:	8812      	ldrh	r2, [r2, #0]
 8003ab8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1cba      	adds	r2, r7, #2
 8003abe:	2146      	movs	r1, #70	@ 0x46
 8003ac0:	8812      	ldrh	r2, [r2, #0]
 8003ac2:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4990      	ldr	r1, [pc, #576]	@ (8003d1c <HAL_SPI_TransmitReceive_DMA+0x330>)
 8003adc:	400a      	ands	r2, r1
 8003ade:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	23e0      	movs	r3, #224	@ 0xe0
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d908      	bls.n	8003afe <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	498a      	ldr	r1, [pc, #552]	@ (8003d20 <HAL_SPI_TransmitReceive_DMA+0x334>)
 8003af8:	400a      	ands	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
 8003afc:	e074      	b.n	8003be8 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2180      	movs	r1, #128	@ 0x80
 8003b0a:	0149      	lsls	r1, r1, #5
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	2380      	movs	r3, #128	@ 0x80
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d127      	bne.n	8003b6e <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8003b22:	001a      	movs	r2, r3
 8003b24:	2301      	movs	r3, #1
 8003b26:	4013      	ands	r3, r2
 8003b28:	d10f      	bne.n	8003b4a <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	497b      	ldr	r1, [pc, #492]	@ (8003d24 <HAL_SPI_TransmitReceive_DMA+0x338>)
 8003b36:	400a      	ands	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b48:	e011      	b.n	8003b6e <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2180      	movs	r1, #128	@ 0x80
 8003b56:	01c9      	lsls	r1, r1, #7
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	2380      	movs	r3, #128	@ 0x80
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d135      	bne.n	8003be8 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4966      	ldr	r1, [pc, #408]	@ (8003d20 <HAL_SPI_TransmitReceive_DMA+0x334>)
 8003b88:	400a      	ands	r2, r1
 8003b8a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2246      	movs	r2, #70	@ 0x46
 8003b90:	5a9b      	ldrh	r3, [r3, r2]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	001a      	movs	r2, r3
 8003b96:	2301      	movs	r3, #1
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d111      	bne.n	8003bc0 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4960      	ldr	r1, [pc, #384]	@ (8003d28 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 8003ba8:	400a      	ands	r2, r1
 8003baa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2246      	movs	r2, #70	@ 0x46
 8003bb0:	5a9b      	ldrh	r3, [r3, r2]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	085b      	lsrs	r3, r3, #1
 8003bb6:	b299      	uxth	r1, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2246      	movs	r2, #70	@ 0x46
 8003bbc:	5299      	strh	r1, [r3, r2]
 8003bbe:	e013      	b.n	8003be8 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2180      	movs	r1, #128	@ 0x80
 8003bcc:	0189      	lsls	r1, r1, #6
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2246      	movs	r2, #70	@ 0x46
 8003bd6:	5a9b      	ldrh	r3, [r3, r2]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3301      	adds	r3, #1
 8003be0:	b299      	uxth	r1, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2246      	movs	r2, #70	@ 0x46
 8003be6:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	225d      	movs	r2, #93	@ 0x5d
 8003bec:	5c9b      	ldrb	r3, [r3, r2]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d108      	bne.n	8003c06 <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf8:	4a4c      	ldr	r2, [pc, #304]	@ (8003d2c <HAL_SPI_TransmitReceive_DMA+0x340>)
 8003bfa:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c00:	4a4b      	ldr	r2, [pc, #300]	@ (8003d30 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8003c02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c04:	e007      	b.n	8003c16 <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003d34 <HAL_SPI_TransmitReceive_DMA+0x348>)
 8003c0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c12:	4a49      	ldr	r2, [pc, #292]	@ (8003d38 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8003c14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1a:	4a48      	ldr	r2, [pc, #288]	@ (8003d3c <HAL_SPI_TransmitReceive_DMA+0x350>)
 8003c1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c22:	2200      	movs	r2, #0
 8003c24:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	0019      	movs	r1, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2246      	movs	r2, #70	@ 0x46
 8003c3c:	5a9b      	ldrh	r3, [r3, r2]
 8003c3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003c40:	0022      	movs	r2, r4
 8003c42:	f7fe fbc5 	bl	80023d0 <HAL_DMA_Start_IT>
 8003c46:	1e03      	subs	r3, r0, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_SPI_TransmitReceive_DMA+0x274>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4e:	2210      	movs	r2, #16
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003c56:	2317      	movs	r3, #23
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]

    goto error;
 8003c5e:	e051      	b.n	8003d04 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c84:	2200      	movs	r2, #0
 8003c86:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c98:	0019      	movs	r1, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ca6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003ca8:	f7fe fb92 	bl	80023d0 <HAL_DMA_Start_IT>
 8003cac:	1e03      	subs	r3, r0, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_SPI_TransmitReceive_DMA+0x2da>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003cbc:	2317      	movs	r3, #23
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	701a      	strb	r2, [r3, #0]

    goto error;
 8003cc4:	e01e      	b.n	8003d04 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2240      	movs	r2, #64	@ 0x40
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b40      	cmp	r3, #64	@ 0x40
 8003cd2:	d007      	beq.n	8003ce4 <HAL_SPI_TransmitReceive_DMA+0x2f8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2140      	movs	r1, #64	@ 0x40
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2120      	movs	r1, #32
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2102      	movs	r1, #2
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	225c      	movs	r2, #92	@ 0x5c
 8003d08:	2100      	movs	r1, #0
 8003d0a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003d0c:	2317      	movs	r3, #23
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	781b      	ldrb	r3, [r3, #0]
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b007      	add	sp, #28
 8003d18:	bd90      	pop	{r4, r7, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	ffff9fff 	.word	0xffff9fff
 8003d20:	ffffefff 	.word	0xffffefff
 8003d24:	ffffbfff 	.word	0xffffbfff
 8003d28:	ffffdfff 	.word	0xffffdfff
 8003d2c:	080040c3 	.word	0x080040c3
 8003d30:	08003f7d 	.word	0x08003f7d
 8003d34:	080040e1 	.word	0x080040e1
 8003d38:	0800402d 	.word	0x0800402d
 8003d3c:	080040ff 	.word	0x080040ff

08003d40 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	099b      	lsrs	r3, r3, #6
 8003d5c:	001a      	movs	r2, r3
 8003d5e:	2301      	movs	r3, #1
 8003d60:	4013      	ands	r3, r2
 8003d62:	d10f      	bne.n	8003d84 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2201      	movs	r2, #1
 8003d68:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d6a:	d00b      	beq.n	8003d84 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	099b      	lsrs	r3, r3, #6
 8003d70:	001a      	movs	r2, r3
 8003d72:	2301      	movs	r3, #1
 8003d74:	4013      	ands	r3, r2
 8003d76:	d005      	beq.n	8003d84 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	0010      	movs	r0, r2
 8003d80:	4798      	blx	r3
    return;
 8003d82:	e0d5      	b.n	8003f30 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	085b      	lsrs	r3, r3, #1
 8003d88:	001a      	movs	r2, r3
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <HAL_SPI_IRQHandler+0x68>
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	09db      	lsrs	r3, r3, #7
 8003d94:	001a      	movs	r2, r3
 8003d96:	2301      	movs	r3, #1
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d005      	beq.n	8003da8 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	0010      	movs	r0, r2
 8003da4:	4798      	blx	r3
    return;
 8003da6:	e0c3      	b.n	8003f30 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	001a      	movs	r2, r3
 8003dae:	2301      	movs	r3, #1
 8003db0:	4013      	ands	r3, r2
 8003db2:	d10c      	bne.n	8003dce <HAL_SPI_IRQHandler+0x8e>
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	001a      	movs	r2, r3
 8003dba:	2301      	movs	r3, #1
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d106      	bne.n	8003dce <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	001a      	movs	r2, r3
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d100      	bne.n	8003dce <HAL_SPI_IRQHandler+0x8e>
 8003dcc:	e0b0      	b.n	8003f30 <HAL_SPI_IRQHandler+0x1f0>
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	001a      	movs	r2, r3
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d100      	bne.n	8003ddc <HAL_SPI_IRQHandler+0x9c>
 8003dda:	e0a9      	b.n	8003f30 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	001a      	movs	r2, r3
 8003de2:	2301      	movs	r3, #1
 8003de4:	4013      	ands	r3, r2
 8003de6:	d023      	beq.n	8003e30 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	225d      	movs	r2, #93	@ 0x5d
 8003dec:	5c9b      	ldrb	r3, [r3, r2]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d011      	beq.n	8003e18 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df8:	2204      	movs	r2, #4
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	e00b      	b.n	8003e30 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	693b      	ldr	r3, [r7, #16]
        return;
 8003e2e:	e07f      	b.n	8003f30 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	001a      	movs	r2, r3
 8003e36:	2301      	movs	r3, #1
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d014      	beq.n	8003e66 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e40:	2201      	movs	r2, #1
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2140      	movs	r1, #64	@ 0x40
 8003e60:	438a      	bics	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	0a1b      	lsrs	r3, r3, #8
 8003e6a:	001a      	movs	r2, r3
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d00c      	beq.n	8003e8c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e76:	2208      	movs	r2, #8
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d04c      	beq.n	8003f2e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	21e0      	movs	r1, #224	@ 0xe0
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	225d      	movs	r2, #93	@ 0x5d
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d103      	bne.n	8003ebc <HAL_SPI_IRQHandler+0x17c>
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d032      	beq.n	8003f22 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2103      	movs	r1, #3
 8003ec8:	438a      	bics	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d010      	beq.n	8003ef6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed8:	4a17      	ldr	r2, [pc, #92]	@ (8003f38 <HAL_SPI_IRQHandler+0x1f8>)
 8003eda:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7fe fafb 	bl	80024dc <HAL_DMA_Abort_IT>
 8003ee6:	1e03      	subs	r3, r0, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eee:	2240      	movs	r2, #64	@ 0x40
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f02:	4a0d      	ldr	r2, [pc, #52]	@ (8003f38 <HAL_SPI_IRQHandler+0x1f8>)
 8003f04:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7fe fae6 	bl	80024dc <HAL_DMA_Abort_IT>
 8003f10:	1e03      	subs	r3, r0, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f18:	2240      	movs	r2, #64	@ 0x40
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003f20:	e004      	b.n	8003f2c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f000 f821 	bl	8003f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003f2a:	e000      	b.n	8003f2e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8003f2c:	46c0      	nop			@ (mov r8, r8)
    return;
 8003f2e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b008      	add	sp, #32
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	08004141 	.word	0x08004141

08003f3c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003f44:	46c0      	nop			@ (mov r8, r8)
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b002      	add	sp, #8
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003f54:	46c0      	nop			@ (mov r8, r8)
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b002      	add	sp, #8
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003f64:	46c0      	nop			@ (mov r8, r8)
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b002      	add	sp, #8
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f74:	46c0      	nop			@ (mov r8, r8)
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b002      	add	sp, #8
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f88:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f8a:	f7fd f8c5 	bl	8001118 <HAL_GetTick>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d03e      	beq.n	800401e <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2120      	movs	r1, #32
 8003fac:	438a      	bics	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10e      	bne.n	8003fd6 <SPI_DMAReceiveCplt+0x5a>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	2382      	movs	r3, #130	@ 0x82
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d108      	bne.n	8003fd6 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2103      	movs	r1, #3
 8003fd0:	438a      	bics	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
 8003fd4:	e007      	b.n	8003fe6 <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	438a      	bics	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2164      	movs	r1, #100	@ 0x64
 8003fec:	0018      	movs	r0, r3
 8003fee:	f000 f9ed 	bl	80043cc <SPI_EndRxTransaction>
 8003ff2:	1e03      	subs	r3, r0, #0
 8003ff4:	d002      	beq.n	8003ffc <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2246      	movs	r2, #70	@ 0x46
 8004000:	2100      	movs	r1, #0
 8004002:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	225d      	movs	r2, #93	@ 0x5d
 8004008:	2101      	movs	r1, #1
 800400a:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004010:	2b00      	cmp	r3, #0
 8004012:	d004      	beq.n	800401e <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	0018      	movs	r0, r3
 8004018:	f7ff ffa8 	bl	8003f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800401c:	e003      	b.n	8004026 <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	0018      	movs	r0, r3
 8004022:	f7ff ff8b 	bl	8003f3c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004026:	46bd      	mov	sp, r7
 8004028:	b004      	add	sp, #16
 800402a:	bd80      	pop	{r7, pc}

0800402c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004038:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800403a:	f7fd f86d 	bl	8001118 <HAL_GetTick>
 800403e:	0003      	movs	r3, r0
 8004040:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2220      	movs	r2, #32
 800404a:	4013      	ands	r3, r2
 800404c:	2b20      	cmp	r3, #32
 800404e:	d031      	beq.n	80040b4 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2120      	movs	r1, #32
 800405c:	438a      	bics	r2, r1
 800405e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2164      	movs	r1, #100	@ 0x64
 8004066:	0018      	movs	r0, r3
 8004068:	f000 fa0e 	bl	8004488 <SPI_EndRxTxTransaction>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d005      	beq.n	800407c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004074:	2220      	movs	r2, #32
 8004076:	431a      	orrs	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2103      	movs	r1, #3
 8004088:	438a      	bics	r2, r1
 800408a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2246      	movs	r2, #70	@ 0x46
 8004096:	2100      	movs	r1, #0
 8004098:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	225d      	movs	r2, #93	@ 0x5d
 800409e:	2101      	movs	r1, #1
 80040a0:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f7ff ff5d 	bl	8003f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80040b2:	e003      	b.n	80040bc <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7fc fcc2 	bl	8000a40 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040bc:	46bd      	mov	sp, r7
 80040be:	b004      	add	sp, #16
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	0018      	movs	r0, r3
 80040d4:	f7ff ff3a 	bl	8003f4c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040d8:	46c0      	nop			@ (mov r8, r8)
 80040da:	46bd      	mov	sp, r7
 80040dc:	b004      	add	sp, #16
 80040de:	bd80      	pop	{r7, pc}

080040e0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7ff ff33 	bl	8003f5c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040f6:	46c0      	nop			@ (mov r8, r8)
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b004      	add	sp, #16
 80040fc:	bd80      	pop	{r7, pc}

080040fe <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2103      	movs	r1, #3
 8004118:	438a      	bics	r2, r1
 800411a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004120:	2210      	movs	r2, #16
 8004122:	431a      	orrs	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	225d      	movs	r2, #93	@ 0x5d
 800412c:	2101      	movs	r1, #1
 800412e:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	0018      	movs	r0, r3
 8004134:	f7ff ff1a 	bl	8003f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004138:	46c0      	nop			@ (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b004      	add	sp, #16
 800413e:	bd80      	pop	{r7, pc}

08004140 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2246      	movs	r2, #70	@ 0x46
 8004152:	2100      	movs	r1, #0
 8004154:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	0018      	movs	r0, r3
 8004160:	f7ff ff04 	bl	8003f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004164:	46c0      	nop			@ (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	b004      	add	sp, #16
 800416a:	bd80      	pop	{r7, pc}

0800416c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	1dfb      	adds	r3, r7, #7
 800417a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800417c:	f7fc ffcc 	bl	8001118 <HAL_GetTick>
 8004180:	0002      	movs	r2, r0
 8004182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	18d3      	adds	r3, r2, r3
 800418a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800418c:	f7fc ffc4 	bl	8001118 <HAL_GetTick>
 8004190:	0003      	movs	r3, r0
 8004192:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004194:	4b3a      	ldr	r3, [pc, #232]	@ (8004280 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	015b      	lsls	r3, r3, #5
 800419a:	0d1b      	lsrs	r3, r3, #20
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	4353      	muls	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041a2:	e058      	b.n	8004256 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	3301      	adds	r3, #1
 80041a8:	d055      	beq.n	8004256 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041aa:	f7fc ffb5 	bl	8001118 <HAL_GetTick>
 80041ae:	0002      	movs	r2, r0
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d902      	bls.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d142      	bne.n	8004246 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	21e0      	movs	r1, #224	@ 0xe0
 80041cc:	438a      	bics	r2, r1
 80041ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	2382      	movs	r3, #130	@ 0x82
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	429a      	cmp	r2, r3
 80041da:	d113      	bne.n	8004204 <SPI_WaitFlagStateUntilTimeout+0x98>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	2380      	movs	r3, #128	@ 0x80
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d005      	beq.n	80041f4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	2380      	movs	r3, #128	@ 0x80
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d107      	bne.n	8004204 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2140      	movs	r1, #64	@ 0x40
 8004200:	438a      	bics	r2, r1
 8004202:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004208:	2380      	movs	r3, #128	@ 0x80
 800420a:	019b      	lsls	r3, r3, #6
 800420c:	429a      	cmp	r2, r3
 800420e:	d110      	bne.n	8004232 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	491a      	ldr	r1, [pc, #104]	@ (8004284 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800421c:	400a      	ands	r2, r1
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2180      	movs	r1, #128	@ 0x80
 800422c:	0189      	lsls	r1, r1, #6
 800422e:	430a      	orrs	r2, r1
 8004230:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	225d      	movs	r2, #93	@ 0x5d
 8004236:	2101      	movs	r1, #1
 8004238:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	225c      	movs	r2, #92	@ 0x5c
 800423e:	2100      	movs	r1, #0
 8004240:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e017      	b.n	8004276 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	3b01      	subs	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	4013      	ands	r3, r2
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	425a      	negs	r2, r3
 8004266:	4153      	adcs	r3, r2
 8004268:	b2db      	uxtb	r3, r3
 800426a:	001a      	movs	r2, r3
 800426c:	1dfb      	adds	r3, r7, #7
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d197      	bne.n	80041a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	0018      	movs	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	b008      	add	sp, #32
 800427c:	bd80      	pop	{r7, pc}
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	20000000 	.word	0x20000000
 8004284:	ffffdfff 	.word	0xffffdfff

08004288 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	@ 0x28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004296:	2317      	movs	r3, #23
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	2200      	movs	r2, #0
 800429c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800429e:	f7fc ff3b 	bl	8001118 <HAL_GetTick>
 80042a2:	0002      	movs	r2, r0
 80042a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	18d3      	adds	r3, r2, r3
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80042ae:	f7fc ff33 	bl	8001118 <HAL_GetTick>
 80042b2:	0003      	movs	r3, r0
 80042b4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	330c      	adds	r3, #12
 80042bc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80042be:	4b41      	ldr	r3, [pc, #260]	@ (80043c4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	0013      	movs	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	189b      	adds	r3, r3, r2
 80042c8:	00da      	lsls	r2, r3, #3
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	0d1b      	lsrs	r3, r3, #20
 80042ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d0:	4353      	muls	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80042d4:	e068      	b.n	80043a8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	23c0      	movs	r3, #192	@ 0xc0
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	429a      	cmp	r2, r3
 80042de:	d10a      	bne.n	80042f6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d107      	bne.n	80042f6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	2117      	movs	r1, #23
 80042ee:	187b      	adds	r3, r7, r1
 80042f0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80042f2:	187b      	adds	r3, r7, r1
 80042f4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	3301      	adds	r3, #1
 80042fa:	d055      	beq.n	80043a8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042fc:	f7fc ff0c 	bl	8001118 <HAL_GetTick>
 8004300:	0002      	movs	r2, r0
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004308:	429a      	cmp	r2, r3
 800430a:	d902      	bls.n	8004312 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	2b00      	cmp	r3, #0
 8004310:	d142      	bne.n	8004398 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	21e0      	movs	r1, #224	@ 0xe0
 800431e:	438a      	bics	r2, r1
 8004320:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	2382      	movs	r3, #130	@ 0x82
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	429a      	cmp	r2, r3
 800432c:	d113      	bne.n	8004356 <SPI_WaitFifoStateUntilTimeout+0xce>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	2380      	movs	r3, #128	@ 0x80
 8004334:	021b      	lsls	r3, r3, #8
 8004336:	429a      	cmp	r2, r3
 8004338:	d005      	beq.n	8004346 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	2380      	movs	r3, #128	@ 0x80
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	429a      	cmp	r2, r3
 8004344:	d107      	bne.n	8004356 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2140      	movs	r1, #64	@ 0x40
 8004352:	438a      	bics	r2, r1
 8004354:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800435a:	2380      	movs	r3, #128	@ 0x80
 800435c:	019b      	lsls	r3, r3, #6
 800435e:	429a      	cmp	r2, r3
 8004360:	d110      	bne.n	8004384 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4916      	ldr	r1, [pc, #88]	@ (80043c8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800436e:	400a      	ands	r2, r1
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2180      	movs	r1, #128	@ 0x80
 800437e:	0189      	lsls	r1, r1, #6
 8004380:	430a      	orrs	r2, r1
 8004382:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	225d      	movs	r2, #93	@ 0x5d
 8004388:	2101      	movs	r1, #1
 800438a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	225c      	movs	r2, #92	@ 0x5c
 8004390:	2100      	movs	r1, #0
 8004392:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e010      	b.n	80043ba <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	3b01      	subs	r3, #1
 80043a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	4013      	ands	r3, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d18e      	bne.n	80042d6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	0018      	movs	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	b00a      	add	sp, #40	@ 0x28
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	46c0      	nop			@ (mov r8, r8)
 80043c4:	20000000 	.word	0x20000000
 80043c8:	ffffdfff 	.word	0xffffdfff

080043cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	2382      	movs	r3, #130	@ 0x82
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d113      	bne.n	800440c <SPI_EndRxTransaction+0x40>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	2380      	movs	r3, #128	@ 0x80
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d005      	beq.n	80043fc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	2380      	movs	r3, #128	@ 0x80
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d107      	bne.n	800440c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2140      	movs	r1, #64	@ 0x40
 8004408:	438a      	bics	r2, r1
 800440a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	0013      	movs	r3, r2
 8004416:	2200      	movs	r2, #0
 8004418:	2180      	movs	r1, #128	@ 0x80
 800441a:	f7ff fea7 	bl	800416c <SPI_WaitFlagStateUntilTimeout>
 800441e:	1e03      	subs	r3, r0, #0
 8004420:	d007      	beq.n	8004432 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004426:	2220      	movs	r2, #32
 8004428:	431a      	orrs	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e026      	b.n	8004480 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	2382      	movs	r3, #130	@ 0x82
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	429a      	cmp	r2, r3
 800443c:	d11f      	bne.n	800447e <SPI_EndRxTransaction+0xb2>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	2380      	movs	r3, #128	@ 0x80
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	429a      	cmp	r2, r3
 8004448:	d005      	beq.n	8004456 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	2380      	movs	r3, #128	@ 0x80
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	429a      	cmp	r2, r3
 8004454:	d113      	bne.n	800447e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	23c0      	movs	r3, #192	@ 0xc0
 800445a:	00d9      	lsls	r1, r3, #3
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	0013      	movs	r3, r2
 8004464:	2200      	movs	r2, #0
 8004466:	f7ff ff0f 	bl	8004288 <SPI_WaitFifoStateUntilTimeout>
 800446a:	1e03      	subs	r3, r0, #0
 800446c:	d007      	beq.n	800447e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004472:	2220      	movs	r2, #32
 8004474:	431a      	orrs	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e000      	b.n	8004480 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	b004      	add	sp, #16
 8004486:	bd80      	pop	{r7, pc}

08004488 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	23c0      	movs	r3, #192	@ 0xc0
 8004498:	0159      	lsls	r1, r3, #5
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	0013      	movs	r3, r2
 80044a2:	2200      	movs	r2, #0
 80044a4:	f7ff fef0 	bl	8004288 <SPI_WaitFifoStateUntilTimeout>
 80044a8:	1e03      	subs	r3, r0, #0
 80044aa:	d007      	beq.n	80044bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b0:	2220      	movs	r2, #32
 80044b2:	431a      	orrs	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e027      	b.n	800450c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	0013      	movs	r3, r2
 80044c6:	2200      	movs	r2, #0
 80044c8:	2180      	movs	r1, #128	@ 0x80
 80044ca:	f7ff fe4f 	bl	800416c <SPI_WaitFlagStateUntilTimeout>
 80044ce:	1e03      	subs	r3, r0, #0
 80044d0:	d007      	beq.n	80044e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d6:	2220      	movs	r2, #32
 80044d8:	431a      	orrs	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e014      	b.n	800450c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	23c0      	movs	r3, #192	@ 0xc0
 80044e6:	00d9      	lsls	r1, r3, #3
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	0013      	movs	r3, r2
 80044f0:	2200      	movs	r2, #0
 80044f2:	f7ff fec9 	bl	8004288 <SPI_WaitFifoStateUntilTimeout>
 80044f6:	1e03      	subs	r3, r0, #0
 80044f8:	d007      	beq.n	800450a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044fe:	2220      	movs	r2, #32
 8004500:	431a      	orrs	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e000      	b.n	800450c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	0018      	movs	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	b004      	add	sp, #16
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e04a      	b.n	80045bc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	223d      	movs	r2, #61	@ 0x3d
 800452a:	5c9b      	ldrb	r3, [r3, r2]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d107      	bne.n	8004542 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	223c      	movs	r2, #60	@ 0x3c
 8004536:	2100      	movs	r1, #0
 8004538:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0018      	movs	r0, r3
 800453e:	f7fc fc41 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	223d      	movs	r2, #61	@ 0x3d
 8004546:	2102      	movs	r1, #2
 8004548:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	0019      	movs	r1, r3
 8004554:	0010      	movs	r0, r2
 8004556:	f000 fd95 	bl	8005084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2248      	movs	r2, #72	@ 0x48
 800455e:	2101      	movs	r1, #1
 8004560:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	223e      	movs	r2, #62	@ 0x3e
 8004566:	2101      	movs	r1, #1
 8004568:	5499      	strb	r1, [r3, r2]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	223f      	movs	r2, #63	@ 0x3f
 800456e:	2101      	movs	r1, #1
 8004570:	5499      	strb	r1, [r3, r2]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2240      	movs	r2, #64	@ 0x40
 8004576:	2101      	movs	r1, #1
 8004578:	5499      	strb	r1, [r3, r2]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2241      	movs	r2, #65	@ 0x41
 800457e:	2101      	movs	r1, #1
 8004580:	5499      	strb	r1, [r3, r2]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2242      	movs	r2, #66	@ 0x42
 8004586:	2101      	movs	r1, #1
 8004588:	5499      	strb	r1, [r3, r2]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2243      	movs	r2, #67	@ 0x43
 800458e:	2101      	movs	r1, #1
 8004590:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2244      	movs	r2, #68	@ 0x44
 8004596:	2101      	movs	r1, #1
 8004598:	5499      	strb	r1, [r3, r2]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2245      	movs	r2, #69	@ 0x45
 800459e:	2101      	movs	r1, #1
 80045a0:	5499      	strb	r1, [r3, r2]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2246      	movs	r2, #70	@ 0x46
 80045a6:	2101      	movs	r1, #1
 80045a8:	5499      	strb	r1, [r3, r2]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2247      	movs	r2, #71	@ 0x47
 80045ae:	2101      	movs	r1, #1
 80045b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	223d      	movs	r2, #61	@ 0x3d
 80045b6:	2101      	movs	r1, #1
 80045b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	0018      	movs	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	b002      	add	sp, #8
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e04a      	b.n	800466c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	223d      	movs	r2, #61	@ 0x3d
 80045da:	5c9b      	ldrb	r3, [r3, r2]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d107      	bne.n	80045f2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	223c      	movs	r2, #60	@ 0x3c
 80045e6:	2100      	movs	r1, #0
 80045e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	0018      	movs	r0, r3
 80045ee:	f000 f841 	bl	8004674 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	223d      	movs	r2, #61	@ 0x3d
 80045f6:	2102      	movs	r1, #2
 80045f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3304      	adds	r3, #4
 8004602:	0019      	movs	r1, r3
 8004604:	0010      	movs	r0, r2
 8004606:	f000 fd3d 	bl	8005084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2248      	movs	r2, #72	@ 0x48
 800460e:	2101      	movs	r1, #1
 8004610:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	223e      	movs	r2, #62	@ 0x3e
 8004616:	2101      	movs	r1, #1
 8004618:	5499      	strb	r1, [r3, r2]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	223f      	movs	r2, #63	@ 0x3f
 800461e:	2101      	movs	r1, #1
 8004620:	5499      	strb	r1, [r3, r2]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2240      	movs	r2, #64	@ 0x40
 8004626:	2101      	movs	r1, #1
 8004628:	5499      	strb	r1, [r3, r2]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2241      	movs	r2, #65	@ 0x41
 800462e:	2101      	movs	r1, #1
 8004630:	5499      	strb	r1, [r3, r2]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2242      	movs	r2, #66	@ 0x42
 8004636:	2101      	movs	r1, #1
 8004638:	5499      	strb	r1, [r3, r2]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2243      	movs	r2, #67	@ 0x43
 800463e:	2101      	movs	r1, #1
 8004640:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2244      	movs	r2, #68	@ 0x44
 8004646:	2101      	movs	r1, #1
 8004648:	5499      	strb	r1, [r3, r2]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2245      	movs	r2, #69	@ 0x45
 800464e:	2101      	movs	r1, #1
 8004650:	5499      	strb	r1, [r3, r2]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2246      	movs	r2, #70	@ 0x46
 8004656:	2101      	movs	r1, #1
 8004658:	5499      	strb	r1, [r3, r2]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2247      	movs	r2, #71	@ 0x47
 800465e:	2101      	movs	r1, #1
 8004660:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	223d      	movs	r2, #61	@ 0x3d
 8004666:	2101      	movs	r1, #1
 8004668:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	0018      	movs	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	b002      	add	sp, #8
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800467c:	46c0      	nop			@ (mov r8, r8)
 800467e:	46bd      	mov	sp, r7
 8004680:	b002      	add	sp, #8
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d108      	bne.n	80046a6 <HAL_TIM_PWM_Start+0x22>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	223e      	movs	r2, #62	@ 0x3e
 8004698:	5c9b      	ldrb	r3, [r3, r2]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	1e5a      	subs	r2, r3, #1
 80046a0:	4193      	sbcs	r3, r2
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	e037      	b.n	8004716 <HAL_TIM_PWM_Start+0x92>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d108      	bne.n	80046be <HAL_TIM_PWM_Start+0x3a>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	223f      	movs	r2, #63	@ 0x3f
 80046b0:	5c9b      	ldrb	r3, [r3, r2]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	1e5a      	subs	r2, r3, #1
 80046b8:	4193      	sbcs	r3, r2
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	e02b      	b.n	8004716 <HAL_TIM_PWM_Start+0x92>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d108      	bne.n	80046d6 <HAL_TIM_PWM_Start+0x52>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2240      	movs	r2, #64	@ 0x40
 80046c8:	5c9b      	ldrb	r3, [r3, r2]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	1e5a      	subs	r2, r3, #1
 80046d0:	4193      	sbcs	r3, r2
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	e01f      	b.n	8004716 <HAL_TIM_PWM_Start+0x92>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b0c      	cmp	r3, #12
 80046da:	d108      	bne.n	80046ee <HAL_TIM_PWM_Start+0x6a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2241      	movs	r2, #65	@ 0x41
 80046e0:	5c9b      	ldrb	r3, [r3, r2]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	1e5a      	subs	r2, r3, #1
 80046e8:	4193      	sbcs	r3, r2
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	e013      	b.n	8004716 <HAL_TIM_PWM_Start+0x92>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d108      	bne.n	8004706 <HAL_TIM_PWM_Start+0x82>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2242      	movs	r2, #66	@ 0x42
 80046f8:	5c9b      	ldrb	r3, [r3, r2]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	1e5a      	subs	r2, r3, #1
 8004700:	4193      	sbcs	r3, r2
 8004702:	b2db      	uxtb	r3, r3
 8004704:	e007      	b.n	8004716 <HAL_TIM_PWM_Start+0x92>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2243      	movs	r2, #67	@ 0x43
 800470a:	5c9b      	ldrb	r3, [r3, r2]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	1e5a      	subs	r2, r3, #1
 8004712:	4193      	sbcs	r3, r2
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e081      	b.n	8004822 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d104      	bne.n	800472e <HAL_TIM_PWM_Start+0xaa>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	223e      	movs	r2, #62	@ 0x3e
 8004728:	2102      	movs	r1, #2
 800472a:	5499      	strb	r1, [r3, r2]
 800472c:	e023      	b.n	8004776 <HAL_TIM_PWM_Start+0xf2>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b04      	cmp	r3, #4
 8004732:	d104      	bne.n	800473e <HAL_TIM_PWM_Start+0xba>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	223f      	movs	r2, #63	@ 0x3f
 8004738:	2102      	movs	r1, #2
 800473a:	5499      	strb	r1, [r3, r2]
 800473c:	e01b      	b.n	8004776 <HAL_TIM_PWM_Start+0xf2>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b08      	cmp	r3, #8
 8004742:	d104      	bne.n	800474e <HAL_TIM_PWM_Start+0xca>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2240      	movs	r2, #64	@ 0x40
 8004748:	2102      	movs	r1, #2
 800474a:	5499      	strb	r1, [r3, r2]
 800474c:	e013      	b.n	8004776 <HAL_TIM_PWM_Start+0xf2>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b0c      	cmp	r3, #12
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Start+0xda>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2241      	movs	r2, #65	@ 0x41
 8004758:	2102      	movs	r1, #2
 800475a:	5499      	strb	r1, [r3, r2]
 800475c:	e00b      	b.n	8004776 <HAL_TIM_PWM_Start+0xf2>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b10      	cmp	r3, #16
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Start+0xea>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2242      	movs	r2, #66	@ 0x42
 8004768:	2102      	movs	r1, #2
 800476a:	5499      	strb	r1, [r3, r2]
 800476c:	e003      	b.n	8004776 <HAL_TIM_PWM_Start+0xf2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2243      	movs	r2, #67	@ 0x43
 8004772:	2102      	movs	r1, #2
 8004774:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6839      	ldr	r1, [r7, #0]
 800477c:	2201      	movs	r2, #1
 800477e:	0018      	movs	r0, r3
 8004780:	f001 f83c 	bl	80057fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a28      	ldr	r2, [pc, #160]	@ (800482c <HAL_TIM_PWM_Start+0x1a8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d009      	beq.n	80047a2 <HAL_TIM_PWM_Start+0x11e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a27      	ldr	r2, [pc, #156]	@ (8004830 <HAL_TIM_PWM_Start+0x1ac>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d004      	beq.n	80047a2 <HAL_TIM_PWM_Start+0x11e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a25      	ldr	r2, [pc, #148]	@ (8004834 <HAL_TIM_PWM_Start+0x1b0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d101      	bne.n	80047a6 <HAL_TIM_PWM_Start+0x122>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <HAL_TIM_PWM_Start+0x124>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2180      	movs	r1, #128	@ 0x80
 80047b8:	0209      	lsls	r1, r1, #8
 80047ba:	430a      	orrs	r2, r1
 80047bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1a      	ldr	r2, [pc, #104]	@ (800482c <HAL_TIM_PWM_Start+0x1a8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00a      	beq.n	80047de <HAL_TIM_PWM_Start+0x15a>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	2380      	movs	r3, #128	@ 0x80
 80047ce:	05db      	lsls	r3, r3, #23
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d004      	beq.n	80047de <HAL_TIM_PWM_Start+0x15a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a17      	ldr	r2, [pc, #92]	@ (8004838 <HAL_TIM_PWM_Start+0x1b4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d116      	bne.n	800480c <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a15      	ldr	r2, [pc, #84]	@ (800483c <HAL_TIM_PWM_Start+0x1b8>)
 80047e6:	4013      	ands	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b06      	cmp	r3, #6
 80047ee:	d016      	beq.n	800481e <HAL_TIM_PWM_Start+0x19a>
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	2380      	movs	r3, #128	@ 0x80
 80047f4:	025b      	lsls	r3, r3, #9
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d011      	beq.n	800481e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2101      	movs	r1, #1
 8004806:	430a      	orrs	r2, r1
 8004808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480a:	e008      	b.n	800481e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2101      	movs	r1, #1
 8004818:	430a      	orrs	r2, r1
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e000      	b.n	8004820 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	0018      	movs	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	b004      	add	sp, #16
 8004828:	bd80      	pop	{r7, pc}
 800482a:	46c0      	nop			@ (mov r8, r8)
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40014400 	.word	0x40014400
 8004834:	40014800 	.word	0x40014800
 8004838:	40000400 	.word	0x40000400
 800483c:	00010007 	.word	0x00010007

08004840 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800484a:	230f      	movs	r3, #15
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d108      	bne.n	800486a <HAL_TIM_PWM_Start_IT+0x2a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	223e      	movs	r2, #62	@ 0x3e
 800485c:	5c9b      	ldrb	r3, [r3, r2]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	1e5a      	subs	r2, r3, #1
 8004864:	4193      	sbcs	r3, r2
 8004866:	b2db      	uxtb	r3, r3
 8004868:	e037      	b.n	80048da <HAL_TIM_PWM_Start_IT+0x9a>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b04      	cmp	r3, #4
 800486e:	d108      	bne.n	8004882 <HAL_TIM_PWM_Start_IT+0x42>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	223f      	movs	r2, #63	@ 0x3f
 8004874:	5c9b      	ldrb	r3, [r3, r2]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	1e5a      	subs	r2, r3, #1
 800487c:	4193      	sbcs	r3, r2
 800487e:	b2db      	uxtb	r3, r3
 8004880:	e02b      	b.n	80048da <HAL_TIM_PWM_Start_IT+0x9a>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d108      	bne.n	800489a <HAL_TIM_PWM_Start_IT+0x5a>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2240      	movs	r2, #64	@ 0x40
 800488c:	5c9b      	ldrb	r3, [r3, r2]
 800488e:	b2db      	uxtb	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	1e5a      	subs	r2, r3, #1
 8004894:	4193      	sbcs	r3, r2
 8004896:	b2db      	uxtb	r3, r3
 8004898:	e01f      	b.n	80048da <HAL_TIM_PWM_Start_IT+0x9a>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b0c      	cmp	r3, #12
 800489e:	d108      	bne.n	80048b2 <HAL_TIM_PWM_Start_IT+0x72>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2241      	movs	r2, #65	@ 0x41
 80048a4:	5c9b      	ldrb	r3, [r3, r2]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	1e5a      	subs	r2, r3, #1
 80048ac:	4193      	sbcs	r3, r2
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	e013      	b.n	80048da <HAL_TIM_PWM_Start_IT+0x9a>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d108      	bne.n	80048ca <HAL_TIM_PWM_Start_IT+0x8a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2242      	movs	r2, #66	@ 0x42
 80048bc:	5c9b      	ldrb	r3, [r3, r2]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	1e5a      	subs	r2, r3, #1
 80048c4:	4193      	sbcs	r3, r2
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	e007      	b.n	80048da <HAL_TIM_PWM_Start_IT+0x9a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2243      	movs	r2, #67	@ 0x43
 80048ce:	5c9b      	ldrb	r3, [r3, r2]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	1e5a      	subs	r2, r3, #1
 80048d6:	4193      	sbcs	r3, r2
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_TIM_PWM_Start_IT+0xa2>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e0c4      	b.n	8004a6c <HAL_TIM_PWM_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d104      	bne.n	80048f2 <HAL_TIM_PWM_Start_IT+0xb2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	223e      	movs	r2, #62	@ 0x3e
 80048ec:	2102      	movs	r1, #2
 80048ee:	5499      	strb	r1, [r3, r2]
 80048f0:	e023      	b.n	800493a <HAL_TIM_PWM_Start_IT+0xfa>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d104      	bne.n	8004902 <HAL_TIM_PWM_Start_IT+0xc2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	223f      	movs	r2, #63	@ 0x3f
 80048fc:	2102      	movs	r1, #2
 80048fe:	5499      	strb	r1, [r3, r2]
 8004900:	e01b      	b.n	800493a <HAL_TIM_PWM_Start_IT+0xfa>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b08      	cmp	r3, #8
 8004906:	d104      	bne.n	8004912 <HAL_TIM_PWM_Start_IT+0xd2>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2240      	movs	r2, #64	@ 0x40
 800490c:	2102      	movs	r1, #2
 800490e:	5499      	strb	r1, [r3, r2]
 8004910:	e013      	b.n	800493a <HAL_TIM_PWM_Start_IT+0xfa>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b0c      	cmp	r3, #12
 8004916:	d104      	bne.n	8004922 <HAL_TIM_PWM_Start_IT+0xe2>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2241      	movs	r2, #65	@ 0x41
 800491c:	2102      	movs	r1, #2
 800491e:	5499      	strb	r1, [r3, r2]
 8004920:	e00b      	b.n	800493a <HAL_TIM_PWM_Start_IT+0xfa>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b10      	cmp	r3, #16
 8004926:	d104      	bne.n	8004932 <HAL_TIM_PWM_Start_IT+0xf2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2242      	movs	r2, #66	@ 0x42
 800492c:	2102      	movs	r1, #2
 800492e:	5499      	strb	r1, [r3, r2]
 8004930:	e003      	b.n	800493a <HAL_TIM_PWM_Start_IT+0xfa>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2243      	movs	r2, #67	@ 0x43
 8004936:	2102      	movs	r1, #2
 8004938:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b0c      	cmp	r3, #12
 800493e:	d02a      	beq.n	8004996 <HAL_TIM_PWM_Start_IT+0x156>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b0c      	cmp	r3, #12
 8004944:	d830      	bhi.n	80049a8 <HAL_TIM_PWM_Start_IT+0x168>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b08      	cmp	r3, #8
 800494a:	d01b      	beq.n	8004984 <HAL_TIM_PWM_Start_IT+0x144>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b08      	cmp	r3, #8
 8004950:	d82a      	bhi.n	80049a8 <HAL_TIM_PWM_Start_IT+0x168>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_TIM_PWM_Start_IT+0x120>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b04      	cmp	r3, #4
 800495c:	d009      	beq.n	8004972 <HAL_TIM_PWM_Start_IT+0x132>
 800495e:	e023      	b.n	80049a8 <HAL_TIM_PWM_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2102      	movs	r1, #2
 800496c:	430a      	orrs	r2, r1
 800496e:	60da      	str	r2, [r3, #12]
      break;
 8004970:	e01f      	b.n	80049b2 <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2104      	movs	r1, #4
 800497e:	430a      	orrs	r2, r1
 8004980:	60da      	str	r2, [r3, #12]
      break;
 8004982:	e016      	b.n	80049b2 <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2108      	movs	r1, #8
 8004990:	430a      	orrs	r2, r1
 8004992:	60da      	str	r2, [r3, #12]
      break;
 8004994:	e00d      	b.n	80049b2 <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2110      	movs	r1, #16
 80049a2:	430a      	orrs	r2, r1
 80049a4:	60da      	str	r2, [r3, #12]
      break;
 80049a6:	e004      	b.n	80049b2 <HAL_TIM_PWM_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 80049a8:	230f      	movs	r3, #15
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	2201      	movs	r2, #1
 80049ae:	701a      	strb	r2, [r3, #0]
      break;
 80049b0:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80049b2:	230f      	movs	r3, #15
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d154      	bne.n	8004a66 <HAL_TIM_PWM_Start_IT+0x226>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	2201      	movs	r2, #1
 80049c4:	0018      	movs	r0, r3
 80049c6:	f000 ff19 	bl	80057fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a29      	ldr	r2, [pc, #164]	@ (8004a74 <HAL_TIM_PWM_Start_IT+0x234>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d009      	beq.n	80049e8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a27      	ldr	r2, [pc, #156]	@ (8004a78 <HAL_TIM_PWM_Start_IT+0x238>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a26      	ldr	r2, [pc, #152]	@ (8004a7c <HAL_TIM_PWM_Start_IT+0x23c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d101      	bne.n	80049ec <HAL_TIM_PWM_Start_IT+0x1ac>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <HAL_TIM_PWM_Start_IT+0x1ae>
 80049ec:	2300      	movs	r3, #0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_TIM_PWM_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2180      	movs	r1, #128	@ 0x80
 80049fe:	0209      	lsls	r1, r1, #8
 8004a00:	430a      	orrs	r2, r1
 8004a02:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1a      	ldr	r2, [pc, #104]	@ (8004a74 <HAL_TIM_PWM_Start_IT+0x234>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00a      	beq.n	8004a24 <HAL_TIM_PWM_Start_IT+0x1e4>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	2380      	movs	r3, #128	@ 0x80
 8004a14:	05db      	lsls	r3, r3, #23
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d004      	beq.n	8004a24 <HAL_TIM_PWM_Start_IT+0x1e4>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a18      	ldr	r2, [pc, #96]	@ (8004a80 <HAL_TIM_PWM_Start_IT+0x240>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d116      	bne.n	8004a52 <HAL_TIM_PWM_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	4a16      	ldr	r2, [pc, #88]	@ (8004a84 <HAL_TIM_PWM_Start_IT+0x244>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b06      	cmp	r3, #6
 8004a34:	d016      	beq.n	8004a64 <HAL_TIM_PWM_Start_IT+0x224>
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	2380      	movs	r3, #128	@ 0x80
 8004a3a:	025b      	lsls	r3, r3, #9
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d011      	beq.n	8004a64 <HAL_TIM_PWM_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a50:	e008      	b.n	8004a64 <HAL_TIM_PWM_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	e000      	b.n	8004a66 <HAL_TIM_PWM_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a64:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8004a66:	230f      	movs	r3, #15
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	781b      	ldrb	r3, [r3, #0]
}
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b004      	add	sp, #16
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40012c00 	.word	0x40012c00
 8004a78:	40014400 	.word	0x40014400
 8004a7c:	40014800 	.word	0x40014800
 8004a80:	40000400 	.word	0x40000400
 8004a84:	00010007 	.word	0x00010007

08004a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d021      	beq.n	8004aec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	4013      	ands	r3, r2
 8004aae:	d01d      	beq.n	8004aec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	4252      	negs	r2, r2
 8004ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f000 fac0 	bl	8005054 <HAL_TIM_IC_CaptureCallback>
 8004ad4:	e007      	b.n	8004ae6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f7fc fa49 	bl	8000f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f000 fabf 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2204      	movs	r2, #4
 8004af0:	4013      	ands	r3, r2
 8004af2:	d022      	beq.n	8004b3a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2204      	movs	r2, #4
 8004af8:	4013      	ands	r3, r2
 8004afa:	d01e      	beq.n	8004b3a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2205      	movs	r2, #5
 8004b02:	4252      	negs	r2, r2
 8004b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2202      	movs	r2, #2
 8004b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	23c0      	movs	r3, #192	@ 0xc0
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4013      	ands	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f000 fa99 	bl	8005054 <HAL_TIM_IC_CaptureCallback>
 8004b22:	e007      	b.n	8004b34 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	0018      	movs	r0, r3
 8004b28:	f7fc fa22 	bl	8000f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f000 fa98 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d021      	beq.n	8004b86 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2208      	movs	r2, #8
 8004b46:	4013      	ands	r3, r2
 8004b48:	d01d      	beq.n	8004b86 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2209      	movs	r2, #9
 8004b50:	4252      	negs	r2, r2
 8004b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2204      	movs	r2, #4
 8004b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	2203      	movs	r2, #3
 8004b62:	4013      	ands	r3, r2
 8004b64:	d004      	beq.n	8004b70 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f000 fa73 	bl	8005054 <HAL_TIM_IC_CaptureCallback>
 8004b6e:	e007      	b.n	8004b80 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	0018      	movs	r0, r3
 8004b74:	f7fc f9fc 	bl	8000f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f000 fa72 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2210      	movs	r2, #16
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d022      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2210      	movs	r2, #16
 8004b92:	4013      	ands	r3, r2
 8004b94:	d01e      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2211      	movs	r2, #17
 8004b9c:	4252      	negs	r2, r2
 8004b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	23c0      	movs	r3, #192	@ 0xc0
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f000 fa4c 	bl	8005054 <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e007      	b.n	8004bce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f7fc f9d5 	bl	8000f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f000 fa4b 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d00c      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2201      	movs	r2, #1
 8004be0:	4013      	ands	r3, r2
 8004be2:	d008      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2202      	movs	r2, #2
 8004bea:	4252      	negs	r2, r2
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f000 fa27 	bl	8005044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2280      	movs	r2, #128	@ 0x80
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d104      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	2380      	movs	r3, #128	@ 0x80
 8004c02:	019b      	lsls	r3, r3, #6
 8004c04:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c06:	d00b      	beq.n	8004c20 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2280      	movs	r2, #128	@ 0x80
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d007      	beq.n	8004c20 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1e      	ldr	r2, [pc, #120]	@ (8004c90 <HAL_TIM_IRQHandler+0x208>)
 8004c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f000 ffbc 	bl	8005b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	2380      	movs	r3, #128	@ 0x80
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	4013      	ands	r3, r2
 8004c28:	d00b      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2280      	movs	r2, #128	@ 0x80
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d007      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a17      	ldr	r2, [pc, #92]	@ (8004c94 <HAL_TIM_IRQHandler+0x20c>)
 8004c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f000 ffb3 	bl	8005ba8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2240      	movs	r2, #64	@ 0x40
 8004c46:	4013      	ands	r3, r2
 8004c48:	d00c      	beq.n	8004c64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2240      	movs	r2, #64	@ 0x40
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d008      	beq.n	8004c64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2241      	movs	r2, #65	@ 0x41
 8004c58:	4252      	negs	r2, r2
 8004c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f000 fa08 	bl	8005074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2220      	movs	r2, #32
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d00c      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	4013      	ands	r3, r2
 8004c72:	d008      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2221      	movs	r2, #33	@ 0x21
 8004c7a:	4252      	negs	r2, r2
 8004c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	0018      	movs	r0, r3
 8004c82:	f000 ff81 	bl	8005b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c86:	46c0      	nop			@ (mov r8, r8)
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b004      	add	sp, #16
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	46c0      	nop			@ (mov r8, r8)
 8004c90:	ffffdf7f 	.word	0xffffdf7f
 8004c94:	fffffeff 	.word	0xfffffeff

08004c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca4:	2317      	movs	r3, #23
 8004ca6:	18fb      	adds	r3, r7, r3
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	223c      	movs	r2, #60	@ 0x3c
 8004cb0:	5c9b      	ldrb	r3, [r3, r2]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_TIM_PWM_ConfigChannel+0x22>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e0e5      	b.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	223c      	movs	r2, #60	@ 0x3c
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b14      	cmp	r3, #20
 8004cc6:	d900      	bls.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x32>
 8004cc8:	e0d1      	b.n	8004e6e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	009a      	lsls	r2, r3, #2
 8004cce:	4b70      	ldr	r3, [pc, #448]	@ (8004e90 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004cd0:	18d3      	adds	r3, r2, r3
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	0011      	movs	r1, r2
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f000 fa54 	bl	800518c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2108      	movs	r1, #8
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2104      	movs	r1, #4
 8004d00:	438a      	bics	r2, r1
 8004d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6999      	ldr	r1, [r3, #24]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	619a      	str	r2, [r3, #24]
      break;
 8004d16:	e0af      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	0011      	movs	r1, r2
 8004d20:	0018      	movs	r0, r3
 8004d22:	f000 fab3 	bl	800528c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2180      	movs	r1, #128	@ 0x80
 8004d32:	0109      	lsls	r1, r1, #4
 8004d34:	430a      	orrs	r2, r1
 8004d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4954      	ldr	r1, [pc, #336]	@ (8004e94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004d44:	400a      	ands	r2, r1
 8004d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6999      	ldr	r1, [r3, #24]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	021a      	lsls	r2, r3, #8
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	619a      	str	r2, [r3, #24]
      break;
 8004d5c:	e08c      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	0011      	movs	r1, r2
 8004d66:	0018      	movs	r0, r3
 8004d68:	f000 fb0e 	bl	8005388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69da      	ldr	r2, [r3, #28]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2108      	movs	r1, #8
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2104      	movs	r1, #4
 8004d88:	438a      	bics	r2, r1
 8004d8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69d9      	ldr	r1, [r3, #28]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	61da      	str	r2, [r3, #28]
      break;
 8004d9e:	e06b      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	0011      	movs	r1, r2
 8004da8:	0018      	movs	r0, r3
 8004daa:	f000 fb6f 	bl	800548c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69da      	ldr	r2, [r3, #28]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2180      	movs	r1, #128	@ 0x80
 8004dba:	0109      	lsls	r1, r1, #4
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4932      	ldr	r1, [pc, #200]	@ (8004e94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004dcc:	400a      	ands	r2, r1
 8004dce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69d9      	ldr	r1, [r3, #28]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	021a      	lsls	r2, r3, #8
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	61da      	str	r2, [r3, #28]
      break;
 8004de4:	e048      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	0011      	movs	r1, r2
 8004dee:	0018      	movs	r0, r3
 8004df0:	f000 fbb0 	bl	8005554 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2108      	movs	r1, #8
 8004e00:	430a      	orrs	r2, r1
 8004e02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2104      	movs	r1, #4
 8004e10:	438a      	bics	r2, r1
 8004e12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e26:	e027      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	0011      	movs	r1, r2
 8004e30:	0018      	movs	r0, r3
 8004e32:	f000 fbe9 	bl	8005608 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2180      	movs	r1, #128	@ 0x80
 8004e42:	0109      	lsls	r1, r1, #4
 8004e44:	430a      	orrs	r2, r1
 8004e46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4910      	ldr	r1, [pc, #64]	@ (8004e94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004e54:	400a      	ands	r2, r1
 8004e56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	021a      	lsls	r2, r3, #8
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e6c:	e004      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004e6e:	2317      	movs	r3, #23
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	2201      	movs	r2, #1
 8004e74:	701a      	strb	r2, [r3, #0]
      break;
 8004e76:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	223c      	movs	r2, #60	@ 0x3c
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	5499      	strb	r1, [r3, r2]

  return status;
 8004e80:	2317      	movs	r3, #23
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	781b      	ldrb	r3, [r3, #0]
}
 8004e86:	0018      	movs	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b006      	add	sp, #24
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	46c0      	nop			@ (mov r8, r8)
 8004e90:	08005cb0 	.word	0x08005cb0
 8004e94:	fffffbff 	.word	0xfffffbff

08004e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea2:	230f      	movs	r3, #15
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	223c      	movs	r2, #60	@ 0x3c
 8004eae:	5c9b      	ldrb	r3, [r3, r2]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_TIM_ConfigClockSource+0x20>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e0bc      	b.n	8005032 <HAL_TIM_ConfigClockSource+0x19a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	223c      	movs	r2, #60	@ 0x3c
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	223d      	movs	r2, #61	@ 0x3d
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4a5a      	ldr	r2, [pc, #360]	@ (800503c <HAL_TIM_ConfigClockSource+0x1a4>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4a59      	ldr	r2, [pc, #356]	@ (8005040 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2280      	movs	r2, #128	@ 0x80
 8004eee:	0192      	lsls	r2, r2, #6
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d040      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0xde>
 8004ef4:	2280      	movs	r2, #128	@ 0x80
 8004ef6:	0192      	lsls	r2, r2, #6
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d900      	bls.n	8004efe <HAL_TIM_ConfigClockSource+0x66>
 8004efc:	e088      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x178>
 8004efe:	2280      	movs	r2, #128	@ 0x80
 8004f00:	0152      	lsls	r2, r2, #5
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d100      	bne.n	8004f08 <HAL_TIM_ConfigClockSource+0x70>
 8004f06:	e088      	b.n	800501a <HAL_TIM_ConfigClockSource+0x182>
 8004f08:	2280      	movs	r2, #128	@ 0x80
 8004f0a:	0152      	lsls	r2, r2, #5
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d900      	bls.n	8004f12 <HAL_TIM_ConfigClockSource+0x7a>
 8004f10:	e07e      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x178>
 8004f12:	2b70      	cmp	r3, #112	@ 0x70
 8004f14:	d018      	beq.n	8004f48 <HAL_TIM_ConfigClockSource+0xb0>
 8004f16:	d900      	bls.n	8004f1a <HAL_TIM_ConfigClockSource+0x82>
 8004f18:	e07a      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x178>
 8004f1a:	2b60      	cmp	r3, #96	@ 0x60
 8004f1c:	d04f      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x126>
 8004f1e:	d900      	bls.n	8004f22 <HAL_TIM_ConfigClockSource+0x8a>
 8004f20:	e076      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x178>
 8004f22:	2b50      	cmp	r3, #80	@ 0x50
 8004f24:	d03b      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x106>
 8004f26:	d900      	bls.n	8004f2a <HAL_TIM_ConfigClockSource+0x92>
 8004f28:	e072      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x178>
 8004f2a:	2b40      	cmp	r3, #64	@ 0x40
 8004f2c:	d057      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x146>
 8004f2e:	d900      	bls.n	8004f32 <HAL_TIM_ConfigClockSource+0x9a>
 8004f30:	e06e      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x178>
 8004f32:	2b30      	cmp	r3, #48	@ 0x30
 8004f34:	d063      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x166>
 8004f36:	d86b      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x178>
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	d060      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x166>
 8004f3c:	d868      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x178>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d05d      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x166>
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d05b      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x166>
 8004f46:	e063      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f58:	f000 fc30 	bl	80057bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2277      	movs	r2, #119	@ 0x77
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	609a      	str	r2, [r3, #8]
      break;
 8004f74:	e052      	b.n	800501c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f86:	f000 fc19 	bl	80057bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2180      	movs	r1, #128	@ 0x80
 8004f96:	01c9      	lsls	r1, r1, #7
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	609a      	str	r2, [r3, #8]
      break;
 8004f9c:	e03e      	b.n	800501c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004faa:	001a      	movs	r2, r3
 8004fac:	f000 fb8a 	bl	80056c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2150      	movs	r1, #80	@ 0x50
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f000 fbe4 	bl	8005784 <TIM_ITRx_SetConfig>
      break;
 8004fbc:	e02e      	b.n	800501c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fca:	001a      	movs	r2, r3
 8004fcc:	f000 fba8 	bl	8005720 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2160      	movs	r1, #96	@ 0x60
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f000 fbd4 	bl	8005784 <TIM_ITRx_SetConfig>
      break;
 8004fdc:	e01e      	b.n	800501c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fea:	001a      	movs	r2, r3
 8004fec:	f000 fb6a 	bl	80056c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2140      	movs	r1, #64	@ 0x40
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f000 fbc4 	bl	8005784 <TIM_ITRx_SetConfig>
      break;
 8004ffc:	e00e      	b.n	800501c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	0019      	movs	r1, r3
 8005008:	0010      	movs	r0, r2
 800500a:	f000 fbbb 	bl	8005784 <TIM_ITRx_SetConfig>
      break;
 800500e:	e005      	b.n	800501c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005010:	230f      	movs	r3, #15
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
      break;
 8005018:	e000      	b.n	800501c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800501a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	223d      	movs	r2, #61	@ 0x3d
 8005020:	2101      	movs	r1, #1
 8005022:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	223c      	movs	r2, #60	@ 0x3c
 8005028:	2100      	movs	r1, #0
 800502a:	5499      	strb	r1, [r3, r2]

  return status;
 800502c:	230f      	movs	r3, #15
 800502e:	18fb      	adds	r3, r7, r3
 8005030:	781b      	ldrb	r3, [r3, #0]
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b004      	add	sp, #16
 8005038:	bd80      	pop	{r7, pc}
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	ffceff88 	.word	0xffceff88
 8005040:	ffff00ff 	.word	0xffff00ff

08005044 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800504c:	46c0      	nop			@ (mov r8, r8)
 800504e:	46bd      	mov	sp, r7
 8005050:	b002      	add	sp, #8
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800505c:	46c0      	nop			@ (mov r8, r8)
 800505e:	46bd      	mov	sp, r7
 8005060:	b002      	add	sp, #8
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800506c:	46c0      	nop			@ (mov r8, r8)
 800506e:	46bd      	mov	sp, r7
 8005070:	b002      	add	sp, #8
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800507c:	46c0      	nop			@ (mov r8, r8)
 800507e:	46bd      	mov	sp, r7
 8005080:	b002      	add	sp, #8
 8005082:	bd80      	pop	{r7, pc}

08005084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a37      	ldr	r2, [pc, #220]	@ (8005174 <TIM_Base_SetConfig+0xf0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d008      	beq.n	80050ae <TIM_Base_SetConfig+0x2a>
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	2380      	movs	r3, #128	@ 0x80
 80050a0:	05db      	lsls	r3, r3, #23
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d003      	beq.n	80050ae <TIM_Base_SetConfig+0x2a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a33      	ldr	r2, [pc, #204]	@ (8005178 <TIM_Base_SetConfig+0xf4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d108      	bne.n	80050c0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2270      	movs	r2, #112	@ 0x70
 80050b2:	4393      	bics	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005174 <TIM_Base_SetConfig+0xf0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d014      	beq.n	80050f2 <TIM_Base_SetConfig+0x6e>
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	2380      	movs	r3, #128	@ 0x80
 80050cc:	05db      	lsls	r3, r3, #23
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d00f      	beq.n	80050f2 <TIM_Base_SetConfig+0x6e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a28      	ldr	r2, [pc, #160]	@ (8005178 <TIM_Base_SetConfig+0xf4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <TIM_Base_SetConfig+0x6e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a27      	ldr	r2, [pc, #156]	@ (800517c <TIM_Base_SetConfig+0xf8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d007      	beq.n	80050f2 <TIM_Base_SetConfig+0x6e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a26      	ldr	r2, [pc, #152]	@ (8005180 <TIM_Base_SetConfig+0xfc>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_Base_SetConfig+0x6e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a25      	ldr	r2, [pc, #148]	@ (8005184 <TIM_Base_SetConfig+0x100>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d108      	bne.n	8005104 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4a24      	ldr	r2, [pc, #144]	@ (8005188 <TIM_Base_SetConfig+0x104>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2280      	movs	r2, #128	@ 0x80
 8005108:	4393      	bics	r3, r2
 800510a:	001a      	movs	r2, r3
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a11      	ldr	r2, [pc, #68]	@ (8005174 <TIM_Base_SetConfig+0xf0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d007      	beq.n	8005142 <TIM_Base_SetConfig+0xbe>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a12      	ldr	r2, [pc, #72]	@ (8005180 <TIM_Base_SetConfig+0xfc>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d003      	beq.n	8005142 <TIM_Base_SetConfig+0xbe>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a11      	ldr	r2, [pc, #68]	@ (8005184 <TIM_Base_SetConfig+0x100>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d103      	bne.n	800514a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	2201      	movs	r2, #1
 8005156:	4013      	ands	r3, r2
 8005158:	2b01      	cmp	r3, #1
 800515a:	d106      	bne.n	800516a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2201      	movs	r2, #1
 8005162:	4393      	bics	r3, r2
 8005164:	001a      	movs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	611a      	str	r2, [r3, #16]
  }
}
 800516a:	46c0      	nop			@ (mov r8, r8)
 800516c:	46bd      	mov	sp, r7
 800516e:	b004      	add	sp, #16
 8005170:	bd80      	pop	{r7, pc}
 8005172:	46c0      	nop			@ (mov r8, r8)
 8005174:	40012c00 	.word	0x40012c00
 8005178:	40000400 	.word	0x40000400
 800517c:	40002000 	.word	0x40002000
 8005180:	40014400 	.word	0x40014400
 8005184:	40014800 	.word	0x40014800
 8005188:	fffffcff 	.word	0xfffffcff

0800518c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	2201      	movs	r2, #1
 80051a2:	4393      	bics	r3, r2
 80051a4:	001a      	movs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005274 <TIM_OC1_SetConfig+0xe8>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2203      	movs	r2, #3
 80051c2:	4393      	bics	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2202      	movs	r2, #2
 80051d4:	4393      	bics	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a24      	ldr	r2, [pc, #144]	@ (8005278 <TIM_OC1_SetConfig+0xec>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d007      	beq.n	80051fa <TIM_OC1_SetConfig+0x6e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a23      	ldr	r2, [pc, #140]	@ (800527c <TIM_OC1_SetConfig+0xf0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <TIM_OC1_SetConfig+0x6e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a22      	ldr	r2, [pc, #136]	@ (8005280 <TIM_OC1_SetConfig+0xf4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d10c      	bne.n	8005214 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2208      	movs	r2, #8
 80051fe:	4393      	bics	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2204      	movs	r2, #4
 8005210:	4393      	bics	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a18      	ldr	r2, [pc, #96]	@ (8005278 <TIM_OC1_SetConfig+0xec>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d007      	beq.n	800522c <TIM_OC1_SetConfig+0xa0>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a17      	ldr	r2, [pc, #92]	@ (800527c <TIM_OC1_SetConfig+0xf0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_OC1_SetConfig+0xa0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a16      	ldr	r2, [pc, #88]	@ (8005280 <TIM_OC1_SetConfig+0xf4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d111      	bne.n	8005250 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4a15      	ldr	r2, [pc, #84]	@ (8005284 <TIM_OC1_SetConfig+0xf8>)
 8005230:	4013      	ands	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4a14      	ldr	r2, [pc, #80]	@ (8005288 <TIM_OC1_SetConfig+0xfc>)
 8005238:	4013      	ands	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	46c0      	nop			@ (mov r8, r8)
 800526c:	46bd      	mov	sp, r7
 800526e:	b006      	add	sp, #24
 8005270:	bd80      	pop	{r7, pc}
 8005272:	46c0      	nop			@ (mov r8, r8)
 8005274:	fffeff8f 	.word	0xfffeff8f
 8005278:	40012c00 	.word	0x40012c00
 800527c:	40014400 	.word	0x40014400
 8005280:	40014800 	.word	0x40014800
 8005284:	fffffeff 	.word	0xfffffeff
 8005288:	fffffdff 	.word	0xfffffdff

0800528c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	2210      	movs	r2, #16
 80052a2:	4393      	bics	r3, r2
 80052a4:	001a      	movs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a2c      	ldr	r2, [pc, #176]	@ (800536c <TIM_OC2_SetConfig+0xe0>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005370 <TIM_OC2_SetConfig+0xe4>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2220      	movs	r2, #32
 80052d6:	4393      	bics	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a22      	ldr	r2, [pc, #136]	@ (8005374 <TIM_OC2_SetConfig+0xe8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d10d      	bne.n	800530a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2280      	movs	r2, #128	@ 0x80
 80052f2:	4393      	bics	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2240      	movs	r2, #64	@ 0x40
 8005306:	4393      	bics	r3, r2
 8005308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a19      	ldr	r2, [pc, #100]	@ (8005374 <TIM_OC2_SetConfig+0xe8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d007      	beq.n	8005322 <TIM_OC2_SetConfig+0x96>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a18      	ldr	r2, [pc, #96]	@ (8005378 <TIM_OC2_SetConfig+0xec>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d003      	beq.n	8005322 <TIM_OC2_SetConfig+0x96>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a17      	ldr	r2, [pc, #92]	@ (800537c <TIM_OC2_SetConfig+0xf0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d113      	bne.n	800534a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4a16      	ldr	r2, [pc, #88]	@ (8005380 <TIM_OC2_SetConfig+0xf4>)
 8005326:	4013      	ands	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4a15      	ldr	r2, [pc, #84]	@ (8005384 <TIM_OC2_SetConfig+0xf8>)
 800532e:	4013      	ands	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	621a      	str	r2, [r3, #32]
}
 8005364:	46c0      	nop			@ (mov r8, r8)
 8005366:	46bd      	mov	sp, r7
 8005368:	b006      	add	sp, #24
 800536a:	bd80      	pop	{r7, pc}
 800536c:	feff8fff 	.word	0xfeff8fff
 8005370:	fffffcff 	.word	0xfffffcff
 8005374:	40012c00 	.word	0x40012c00
 8005378:	40014400 	.word	0x40014400
 800537c:	40014800 	.word	0x40014800
 8005380:	fffffbff 	.word	0xfffffbff
 8005384:	fffff7ff 	.word	0xfffff7ff

08005388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	4a31      	ldr	r2, [pc, #196]	@ (8005464 <TIM_OC3_SetConfig+0xdc>)
 800539e:	401a      	ands	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005468 <TIM_OC3_SetConfig+0xe0>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2203      	movs	r2, #3
 80053bc:	4393      	bics	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	4a27      	ldr	r2, [pc, #156]	@ (800546c <TIM_OC3_SetConfig+0xe4>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a23      	ldr	r2, [pc, #140]	@ (8005470 <TIM_OC3_SetConfig+0xe8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10d      	bne.n	8005402 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	4a22      	ldr	r2, [pc, #136]	@ (8005474 <TIM_OC3_SetConfig+0xec>)
 80053ea:	4013      	ands	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005478 <TIM_OC3_SetConfig+0xf0>)
 80053fe:	4013      	ands	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a1a      	ldr	r2, [pc, #104]	@ (8005470 <TIM_OC3_SetConfig+0xe8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <TIM_OC3_SetConfig+0x92>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a1b      	ldr	r2, [pc, #108]	@ (800547c <TIM_OC3_SetConfig+0xf4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_OC3_SetConfig+0x92>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a1a      	ldr	r2, [pc, #104]	@ (8005480 <TIM_OC3_SetConfig+0xf8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d113      	bne.n	8005442 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	4a19      	ldr	r2, [pc, #100]	@ (8005484 <TIM_OC3_SetConfig+0xfc>)
 800541e:	4013      	ands	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	4a18      	ldr	r2, [pc, #96]	@ (8005488 <TIM_OC3_SetConfig+0x100>)
 8005426:	4013      	ands	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	621a      	str	r2, [r3, #32]
}
 800545c:	46c0      	nop			@ (mov r8, r8)
 800545e:	46bd      	mov	sp, r7
 8005460:	b006      	add	sp, #24
 8005462:	bd80      	pop	{r7, pc}
 8005464:	fffffeff 	.word	0xfffffeff
 8005468:	fffeff8f 	.word	0xfffeff8f
 800546c:	fffffdff 	.word	0xfffffdff
 8005470:	40012c00 	.word	0x40012c00
 8005474:	fffff7ff 	.word	0xfffff7ff
 8005478:	fffffbff 	.word	0xfffffbff
 800547c:	40014400 	.word	0x40014400
 8005480:	40014800 	.word	0x40014800
 8005484:	ffffefff 	.word	0xffffefff
 8005488:	ffffdfff 	.word	0xffffdfff

0800548c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	4a24      	ldr	r2, [pc, #144]	@ (8005534 <TIM_OC4_SetConfig+0xa8>)
 80054a2:	401a      	ands	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4a20      	ldr	r2, [pc, #128]	@ (8005538 <TIM_OC4_SetConfig+0xac>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a1f      	ldr	r2, [pc, #124]	@ (800553c <TIM_OC4_SetConfig+0xb0>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005540 <TIM_OC4_SetConfig+0xb4>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	031b      	lsls	r3, r3, #12
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a17      	ldr	r2, [pc, #92]	@ (8005544 <TIM_OC4_SetConfig+0xb8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d007      	beq.n	80054fc <TIM_OC4_SetConfig+0x70>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a16      	ldr	r2, [pc, #88]	@ (8005548 <TIM_OC4_SetConfig+0xbc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d003      	beq.n	80054fc <TIM_OC4_SetConfig+0x70>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a15      	ldr	r2, [pc, #84]	@ (800554c <TIM_OC4_SetConfig+0xc0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d109      	bne.n	8005510 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	4a14      	ldr	r2, [pc, #80]	@ (8005550 <TIM_OC4_SetConfig+0xc4>)
 8005500:	4013      	ands	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	019b      	lsls	r3, r3, #6
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	46c0      	nop			@ (mov r8, r8)
 800552c:	46bd      	mov	sp, r7
 800552e:	b006      	add	sp, #24
 8005530:	bd80      	pop	{r7, pc}
 8005532:	46c0      	nop			@ (mov r8, r8)
 8005534:	ffffefff 	.word	0xffffefff
 8005538:	feff8fff 	.word	0xfeff8fff
 800553c:	fffffcff 	.word	0xfffffcff
 8005540:	ffffdfff 	.word	0xffffdfff
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800
 8005550:	ffffbfff 	.word	0xffffbfff

08005554 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	4a21      	ldr	r2, [pc, #132]	@ (80055f0 <TIM_OC5_SetConfig+0x9c>)
 800556a:	401a      	ands	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4a1d      	ldr	r2, [pc, #116]	@ (80055f4 <TIM_OC5_SetConfig+0xa0>)
 8005580:	4013      	ands	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4a19      	ldr	r2, [pc, #100]	@ (80055f8 <TIM_OC5_SetConfig+0xa4>)
 8005592:	4013      	ands	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	041b      	lsls	r3, r3, #16
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a15      	ldr	r2, [pc, #84]	@ (80055fc <TIM_OC5_SetConfig+0xa8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d007      	beq.n	80055ba <TIM_OC5_SetConfig+0x66>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a14      	ldr	r2, [pc, #80]	@ (8005600 <TIM_OC5_SetConfig+0xac>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d003      	beq.n	80055ba <TIM_OC5_SetConfig+0x66>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a13      	ldr	r2, [pc, #76]	@ (8005604 <TIM_OC5_SetConfig+0xb0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d109      	bne.n	80055ce <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	4a0c      	ldr	r2, [pc, #48]	@ (80055f0 <TIM_OC5_SetConfig+0x9c>)
 80055be:	4013      	ands	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	621a      	str	r2, [r3, #32]
}
 80055e8:	46c0      	nop			@ (mov r8, r8)
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b006      	add	sp, #24
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	fffeffff 	.word	0xfffeffff
 80055f4:	fffeff8f 	.word	0xfffeff8f
 80055f8:	fffdffff 	.word	0xfffdffff
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40014400 	.word	0x40014400
 8005604:	40014800 	.word	0x40014800

08005608 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	4a22      	ldr	r2, [pc, #136]	@ (80056a8 <TIM_OC6_SetConfig+0xa0>)
 800561e:	401a      	ands	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4a1e      	ldr	r2, [pc, #120]	@ (80056ac <TIM_OC6_SetConfig+0xa4>)
 8005634:	4013      	ands	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4a1a      	ldr	r2, [pc, #104]	@ (80056b0 <TIM_OC6_SetConfig+0xa8>)
 8005648:	4013      	ands	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	051b      	lsls	r3, r3, #20
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a16      	ldr	r2, [pc, #88]	@ (80056b4 <TIM_OC6_SetConfig+0xac>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <TIM_OC6_SetConfig+0x68>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a15      	ldr	r2, [pc, #84]	@ (80056b8 <TIM_OC6_SetConfig+0xb0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_OC6_SetConfig+0x68>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a14      	ldr	r2, [pc, #80]	@ (80056bc <TIM_OC6_SetConfig+0xb4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d109      	bne.n	8005684 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	4a13      	ldr	r2, [pc, #76]	@ (80056c0 <TIM_OC6_SetConfig+0xb8>)
 8005674:	4013      	ands	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	029b      	lsls	r3, r3, #10
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	46c0      	nop			@ (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b006      	add	sp, #24
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	46c0      	nop			@ (mov r8, r8)
 80056a8:	ffefffff 	.word	0xffefffff
 80056ac:	feff8fff 	.word	0xfeff8fff
 80056b0:	ffdfffff 	.word	0xffdfffff
 80056b4:	40012c00 	.word	0x40012c00
 80056b8:	40014400 	.word	0x40014400
 80056bc:	40014800 	.word	0x40014800
 80056c0:	fffbffff 	.word	0xfffbffff

080056c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	2201      	movs	r2, #1
 80056dc:	4393      	bics	r3, r2
 80056de:	001a      	movs	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	22f0      	movs	r2, #240	@ 0xf0
 80056ee:	4393      	bics	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	220a      	movs	r2, #10
 8005700:	4393      	bics	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	621a      	str	r2, [r3, #32]
}
 8005718:	46c0      	nop			@ (mov r8, r8)
 800571a:	46bd      	mov	sp, r7
 800571c:	b006      	add	sp, #24
 800571e:	bd80      	pop	{r7, pc}

08005720 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	2210      	movs	r2, #16
 8005738:	4393      	bics	r3, r2
 800573a:	001a      	movs	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	4a0d      	ldr	r2, [pc, #52]	@ (8005780 <TIM_TI2_ConfigInputStage+0x60>)
 800574a:	4013      	ands	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	031b      	lsls	r3, r3, #12
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	22a0      	movs	r2, #160	@ 0xa0
 800575c:	4393      	bics	r3, r2
 800575e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	46bd      	mov	sp, r7
 800577a:	b006      	add	sp, #24
 800577c:	bd80      	pop	{r7, pc}
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	ffff0fff 	.word	0xffff0fff

08005784 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4a08      	ldr	r2, [pc, #32]	@ (80057b8 <TIM_ITRx_SetConfig+0x34>)
 8005798:	4013      	ands	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	2207      	movs	r2, #7
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	609a      	str	r2, [r3, #8]
}
 80057ae:	46c0      	nop			@ (mov r8, r8)
 80057b0:	46bd      	mov	sp, r7
 80057b2:	b004      	add	sp, #16
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	46c0      	nop			@ (mov r8, r8)
 80057b8:	ffcfff8f 	.word	0xffcfff8f

080057bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	4a09      	ldr	r2, [pc, #36]	@ (80057f8 <TIM_ETR_SetConfig+0x3c>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	021a      	lsls	r2, r3, #8
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	431a      	orrs	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	609a      	str	r2, [r3, #8]
}
 80057f0:	46c0      	nop			@ (mov r8, r8)
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b006      	add	sp, #24
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	ffff00ff 	.word	0xffff00ff

080057fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	221f      	movs	r2, #31
 800580c:	4013      	ands	r3, r2
 800580e:	2201      	movs	r2, #1
 8005810:	409a      	lsls	r2, r3
 8005812:	0013      	movs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	43d2      	mvns	r2, r2
 800581e:	401a      	ands	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	211f      	movs	r1, #31
 800582c:	400b      	ands	r3, r1
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4099      	lsls	r1, r3
 8005832:	000b      	movs	r3, r1
 8005834:	431a      	orrs	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	46c0      	nop			@ (mov r8, r8)
 800583c:	46bd      	mov	sp, r7
 800583e:	b006      	add	sp, #24
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d108      	bne.n	8005866 <HAL_TIMEx_PWMN_Start+0x22>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2244      	movs	r2, #68	@ 0x44
 8005858:	5c9b      	ldrb	r3, [r3, r2]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	1e5a      	subs	r2, r3, #1
 8005860:	4193      	sbcs	r3, r2
 8005862:	b2db      	uxtb	r3, r3
 8005864:	e01f      	b.n	80058a6 <HAL_TIMEx_PWMN_Start+0x62>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b04      	cmp	r3, #4
 800586a:	d108      	bne.n	800587e <HAL_TIMEx_PWMN_Start+0x3a>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2245      	movs	r2, #69	@ 0x45
 8005870:	5c9b      	ldrb	r3, [r3, r2]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	1e5a      	subs	r2, r3, #1
 8005878:	4193      	sbcs	r3, r2
 800587a:	b2db      	uxtb	r3, r3
 800587c:	e013      	b.n	80058a6 <HAL_TIMEx_PWMN_Start+0x62>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b08      	cmp	r3, #8
 8005882:	d108      	bne.n	8005896 <HAL_TIMEx_PWMN_Start+0x52>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2246      	movs	r2, #70	@ 0x46
 8005888:	5c9b      	ldrb	r3, [r3, r2]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	1e5a      	subs	r2, r3, #1
 8005890:	4193      	sbcs	r3, r2
 8005892:	b2db      	uxtb	r3, r3
 8005894:	e007      	b.n	80058a6 <HAL_TIMEx_PWMN_Start+0x62>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2247      	movs	r2, #71	@ 0x47
 800589a:	5c9b      	ldrb	r3, [r3, r2]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	3b01      	subs	r3, #1
 80058a0:	1e5a      	subs	r2, r3, #1
 80058a2:	4193      	sbcs	r3, r2
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e05d      	b.n	800596a <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d104      	bne.n	80058be <HAL_TIMEx_PWMN_Start+0x7a>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2244      	movs	r2, #68	@ 0x44
 80058b8:	2102      	movs	r1, #2
 80058ba:	5499      	strb	r1, [r3, r2]
 80058bc:	e013      	b.n	80058e6 <HAL_TIMEx_PWMN_Start+0xa2>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d104      	bne.n	80058ce <HAL_TIMEx_PWMN_Start+0x8a>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2245      	movs	r2, #69	@ 0x45
 80058c8:	2102      	movs	r1, #2
 80058ca:	5499      	strb	r1, [r3, r2]
 80058cc:	e00b      	b.n	80058e6 <HAL_TIMEx_PWMN_Start+0xa2>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d104      	bne.n	80058de <HAL_TIMEx_PWMN_Start+0x9a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2246      	movs	r2, #70	@ 0x46
 80058d8:	2102      	movs	r1, #2
 80058da:	5499      	strb	r1, [r3, r2]
 80058dc:	e003      	b.n	80058e6 <HAL_TIMEx_PWMN_Start+0xa2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2247      	movs	r2, #71	@ 0x47
 80058e2:	2102      	movs	r1, #2
 80058e4:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	2204      	movs	r2, #4
 80058ee:	0018      	movs	r0, r3
 80058f0:	f000 f962 	bl	8005bb8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2180      	movs	r1, #128	@ 0x80
 8005900:	0209      	lsls	r1, r1, #8
 8005902:	430a      	orrs	r2, r1
 8005904:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1a      	ldr	r2, [pc, #104]	@ (8005974 <HAL_TIMEx_PWMN_Start+0x130>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00a      	beq.n	8005926 <HAL_TIMEx_PWMN_Start+0xe2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	2380      	movs	r3, #128	@ 0x80
 8005916:	05db      	lsls	r3, r3, #23
 8005918:	429a      	cmp	r2, r3
 800591a:	d004      	beq.n	8005926 <HAL_TIMEx_PWMN_Start+0xe2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a15      	ldr	r2, [pc, #84]	@ (8005978 <HAL_TIMEx_PWMN_Start+0x134>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d116      	bne.n	8005954 <HAL_TIMEx_PWMN_Start+0x110>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4a13      	ldr	r2, [pc, #76]	@ (800597c <HAL_TIMEx_PWMN_Start+0x138>)
 800592e:	4013      	ands	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b06      	cmp	r3, #6
 8005936:	d016      	beq.n	8005966 <HAL_TIMEx_PWMN_Start+0x122>
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	2380      	movs	r3, #128	@ 0x80
 800593c:	025b      	lsls	r3, r3, #9
 800593e:	429a      	cmp	r2, r3
 8005940:	d011      	beq.n	8005966 <HAL_TIMEx_PWMN_Start+0x122>
    {
      __HAL_TIM_ENABLE(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2101      	movs	r1, #1
 800594e:	430a      	orrs	r2, r1
 8005950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005952:	e008      	b.n	8005966 <HAL_TIMEx_PWMN_Start+0x122>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2101      	movs	r1, #1
 8005960:	430a      	orrs	r2, r1
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	e000      	b.n	8005968 <HAL_TIMEx_PWMN_Start+0x124>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005966:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	0018      	movs	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	b004      	add	sp, #16
 8005970:	bd80      	pop	{r7, pc}
 8005972:	46c0      	nop			@ (mov r8, r8)
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40000400 	.word	0x40000400
 800597c:	00010007 	.word	0x00010007

08005980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	223c      	movs	r2, #60	@ 0x3c
 800598e:	5c9b      	ldrb	r3, [r3, r2]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005994:	2302      	movs	r3, #2
 8005996:	e050      	b.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	223c      	movs	r2, #60	@ 0x3c
 800599c:	2101      	movs	r1, #1
 800599e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	223d      	movs	r2, #61	@ 0x3d
 80059a4:	2102      	movs	r1, #2
 80059a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a21      	ldr	r2, [pc, #132]	@ (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d108      	bne.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4a20      	ldr	r2, [pc, #128]	@ (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2270      	movs	r2, #112	@ 0x70
 80059d8:	4393      	bics	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a14      	ldr	r2, [pc, #80]	@ (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00a      	beq.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	2380      	movs	r3, #128	@ 0x80
 80059fe:	05db      	lsls	r3, r3, #23
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d004      	beq.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a10      	ldr	r2, [pc, #64]	@ (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d10c      	bne.n	8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2280      	movs	r2, #128	@ 0x80
 8005a12:	4393      	bics	r3, r2
 8005a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	223d      	movs	r2, #61	@ 0x3d
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	223c      	movs	r2, #60	@ 0x3c
 8005a34:	2100      	movs	r1, #0
 8005a36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b004      	add	sp, #16
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	46c0      	nop			@ (mov r8, r8)
 8005a44:	40012c00 	.word	0x40012c00
 8005a48:	ff0fffff 	.word	0xff0fffff
 8005a4c:	40000400 	.word	0x40000400

08005a50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	223c      	movs	r2, #60	@ 0x3c
 8005a62:	5c9b      	ldrb	r3, [r3, r2]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e06f      	b.n	8005b4c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	223c      	movs	r2, #60	@ 0x3c
 8005a70:	2101      	movs	r1, #1
 8005a72:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	22ff      	movs	r2, #255	@ 0xff
 8005a78:	4393      	bics	r3, r2
 8005a7a:	001a      	movs	r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4a33      	ldr	r2, [pc, #204]	@ (8005b54 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005a88:	401a      	ands	r2, r3
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4a30      	ldr	r2, [pc, #192]	@ (8005b58 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005a96:	401a      	ands	r2, r3
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a2e      	ldr	r2, [pc, #184]	@ (8005b5c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005aa4:	401a      	ands	r2, r3
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4a2b      	ldr	r2, [pc, #172]	@ (8005b60 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005ab2:	401a      	ands	r2, r3
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4a29      	ldr	r2, [pc, #164]	@ (8005b64 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005ac0:	401a      	ands	r2, r3
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4a26      	ldr	r2, [pc, #152]	@ (8005b68 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005ace:	401a      	ands	r2, r3
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4a24      	ldr	r2, [pc, #144]	@ (8005b6c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005adc:	401a      	ands	r2, r3
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	041b      	lsls	r3, r3, #16
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4a21      	ldr	r2, [pc, #132]	@ (8005b70 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005aec:	401a      	ands	r2, r3
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a1e      	ldr	r2, [pc, #120]	@ (8005b74 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d11c      	bne.n	8005b3a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4a1d      	ldr	r2, [pc, #116]	@ (8005b78 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005b04:	401a      	ands	r2, r3
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0a:	051b      	lsls	r3, r3, #20
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4a1a      	ldr	r2, [pc, #104]	@ (8005b7c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005b14:	401a      	ands	r2, r3
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4a17      	ldr	r2, [pc, #92]	@ (8005b80 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005b22:	401a      	ands	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a15      	ldr	r2, [pc, #84]	@ (8005b84 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005b30:	401a      	ands	r2, r3
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	223c      	movs	r2, #60	@ 0x3c
 8005b46:	2100      	movs	r1, #0
 8005b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	b004      	add	sp, #16
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	fffffcff 	.word	0xfffffcff
 8005b58:	fffffbff 	.word	0xfffffbff
 8005b5c:	fffff7ff 	.word	0xfffff7ff
 8005b60:	ffffefff 	.word	0xffffefff
 8005b64:	ffffdfff 	.word	0xffffdfff
 8005b68:	ffffbfff 	.word	0xffffbfff
 8005b6c:	fff0ffff 	.word	0xfff0ffff
 8005b70:	efffffff 	.word	0xefffffff
 8005b74:	40012c00 	.word	0x40012c00
 8005b78:	ff0fffff 	.word	0xff0fffff
 8005b7c:	feffffff 	.word	0xfeffffff
 8005b80:	fdffffff 	.word	0xfdffffff
 8005b84:	dfffffff 	.word	0xdfffffff

08005b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b90:	46c0      	nop			@ (mov r8, r8)
 8005b92:	46bd      	mov	sp, r7
 8005b94:	b002      	add	sp, #8
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ba0:	46c0      	nop			@ (mov r8, r8)
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b002      	add	sp, #8
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bb0:	46c0      	nop			@ (mov r8, r8)
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b002      	add	sp, #8
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	220f      	movs	r2, #15
 8005bc8:	4013      	ands	r3, r2
 8005bca:	2204      	movs	r2, #4
 8005bcc:	409a      	lsls	r2, r3
 8005bce:	0013      	movs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	43d2      	mvns	r2, r2
 8005bda:	401a      	ands	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a1a      	ldr	r2, [r3, #32]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	210f      	movs	r1, #15
 8005be8:	400b      	ands	r3, r1
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	4099      	lsls	r1, r3
 8005bee:	000b      	movs	r3, r1
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	46c0      	nop			@ (mov r8, r8)
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	b006      	add	sp, #24
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <memset>:
 8005bfe:	0003      	movs	r3, r0
 8005c00:	1882      	adds	r2, r0, r2
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d100      	bne.n	8005c08 <memset+0xa>
 8005c06:	4770      	bx	lr
 8005c08:	7019      	strb	r1, [r3, #0]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	e7f9      	b.n	8005c02 <memset+0x4>
	...

08005c10 <__libc_init_array>:
 8005c10:	b570      	push	{r4, r5, r6, lr}
 8005c12:	2600      	movs	r6, #0
 8005c14:	4c0c      	ldr	r4, [pc, #48]	@ (8005c48 <__libc_init_array+0x38>)
 8005c16:	4d0d      	ldr	r5, [pc, #52]	@ (8005c4c <__libc_init_array+0x3c>)
 8005c18:	1b64      	subs	r4, r4, r5
 8005c1a:	10a4      	asrs	r4, r4, #2
 8005c1c:	42a6      	cmp	r6, r4
 8005c1e:	d109      	bne.n	8005c34 <__libc_init_array+0x24>
 8005c20:	2600      	movs	r6, #0
 8005c22:	f000 f819 	bl	8005c58 <_init>
 8005c26:	4c0a      	ldr	r4, [pc, #40]	@ (8005c50 <__libc_init_array+0x40>)
 8005c28:	4d0a      	ldr	r5, [pc, #40]	@ (8005c54 <__libc_init_array+0x44>)
 8005c2a:	1b64      	subs	r4, r4, r5
 8005c2c:	10a4      	asrs	r4, r4, #2
 8005c2e:	42a6      	cmp	r6, r4
 8005c30:	d105      	bne.n	8005c3e <__libc_init_array+0x2e>
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	00b3      	lsls	r3, r6, #2
 8005c36:	58eb      	ldr	r3, [r5, r3]
 8005c38:	4798      	blx	r3
 8005c3a:	3601      	adds	r6, #1
 8005c3c:	e7ee      	b.n	8005c1c <__libc_init_array+0xc>
 8005c3e:	00b3      	lsls	r3, r6, #2
 8005c40:	58eb      	ldr	r3, [r5, r3]
 8005c42:	4798      	blx	r3
 8005c44:	3601      	adds	r6, #1
 8005c46:	e7f2      	b.n	8005c2e <__libc_init_array+0x1e>
 8005c48:	08005d04 	.word	0x08005d04
 8005c4c:	08005d04 	.word	0x08005d04
 8005c50:	08005d08 	.word	0x08005d08
 8005c54:	08005d04 	.word	0x08005d04

08005c58 <_init>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	46c0      	nop			@ (mov r8, r8)
 8005c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5e:	bc08      	pop	{r3}
 8005c60:	469e      	mov	lr, r3
 8005c62:	4770      	bx	lr

08005c64 <_fini>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	46c0      	nop			@ (mov r8, r8)
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr
