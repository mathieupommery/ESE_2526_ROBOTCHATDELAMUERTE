
TEST_FOC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005e6c  08005e6c  00006e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f00  08005f00  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005f00  08005f00  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005f00  08005f00  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f00  08005f00  00006f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f04  08005f04  00006f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005f08  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000000c  08005f14  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08005f14  000072f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012142  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e23  00000000  00000000  00019176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d31  00000000  00000000  0001d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000eafc  00000000  00000000  0001ddf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00005178  00000000  00000000  0002c8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00031a6d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003cd4  00000000  00000000  00031ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000083  00000000  00000000  00035784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005e54 	.word	0x08005e54

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005e54 	.word	0x08005e54

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <cs_low>:
#include <math.h>
#include "MA330.h"



static void cs_low(MA330_t *encd) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	6858      	ldr	r0, [r3, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	891b      	ldrh	r3, [r3, #8]
 800022c:	2200      	movs	r2, #0
 800022e:	0019      	movs	r1, r3
 8000230:	f002 fda6 	bl	8002d80 <HAL_GPIO_WritePin>
}
 8000234:	46c0      	nop			@ (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}

0800023c <cs_high>:

static void cs_high(MA330_t *encd) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	6858      	ldr	r0, [r3, #4]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	891b      	ldrh	r3, [r3, #8]
 800024c:	2201      	movs	r2, #1
 800024e:	0019      	movs	r1, r3
 8000250:	f002 fd96 	bl	8002d80 <HAL_GPIO_WritePin>
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <MA330_Init>:




//attention 20ms minimum apres une ecriture de registre
int MA330_Init(MA330_t *encd, SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin,uint8_t FW){
 800025c:	b580      	push	{r7, lr}
 800025e:	b088      	sub	sp, #32
 8000260:	af02      	add	r7, sp, #8
 8000262:	60f8      	str	r0, [r7, #12]
 8000264:	60b9      	str	r1, [r7, #8]
 8000266:	607a      	str	r2, [r7, #4]
 8000268:	001a      	movs	r2, r3
 800026a:	1cbb      	adds	r3, r7, #2
 800026c:	801a      	strh	r2, [r3, #0]
    if (encd == NULL || hspi == NULL || cs_port == NULL || cs_pin == 0) {
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d009      	beq.n	8000288 <MA330_Init+0x2c>
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d006      	beq.n	8000288 <MA330_Init+0x2c>
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d003      	beq.n	8000288 <MA330_Init+0x2c>
 8000280:	1cbb      	adds	r3, r7, #2
 8000282:	881b      	ldrh	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d101      	bne.n	800028c <MA330_Init+0x30>
        return 0;
 8000288:	2300      	movs	r3, #0
 800028a:	e0b5      	b.n	80003f8 <MA330_Init+0x19c>
    }

    encd->MA330_spi = hspi;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	601a      	str	r2, [r3, #0]
    encd->MA330_cs_port = cs_port;
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	605a      	str	r2, [r3, #4]
    encd->MA330_cs_pin = cs_pin;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	1cba      	adds	r2, r7, #2
 800029c:	8812      	ldrh	r2, [r2, #0]
 800029e:	811a      	strh	r2, [r3, #8]
    
    cs_high(encd);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	0018      	movs	r0, r3
 80002a4:	f7ff ffca 	bl	800023c <cs_high>
    
    HAL_Delay(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f001 f881 	bl	80013b0 <HAL_Delay>

    if(FW>0){
 80002ae:	2320      	movs	r3, #32
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d100      	bne.n	80002ba <MA330_Init+0x5e>
 80002b8:	e09d      	b.n	80003f6 <MA330_Init+0x19a>
    cs_low(encd);
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	0018      	movs	r0, r3
 80002be:	f7ff ffad 	bl	800021c <cs_low>
    uint8_t receive_buffer[2];
    uint8_t send_buffer[]={0x4E,0x00};
 80002c2:	2110      	movs	r1, #16
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	224e      	movs	r2, #78	@ 0x4e
 80002c8:	801a      	strh	r2, [r3, #0]

	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	6818      	ldr	r0, [r3, #0]
 80002ce:	2314      	movs	r3, #20
 80002d0:	18fa      	adds	r2, r7, r3
 80002d2:	1879      	adds	r1, r7, r1
 80002d4:	23fa      	movs	r3, #250	@ 0xfa
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2302      	movs	r3, #2
 80002dc:	f003 fcc8 	bl	8003c70 <HAL_SPI_TransmitReceive>
 80002e0:	1e03      	subs	r3, r0, #0
 80002e2:	d005      	beq.n	80002f0 <MA330_Init+0x94>
		cs_high(encd);
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	0018      	movs	r0, r3
 80002e8:	f7ff ffa8 	bl	800023c <cs_high>
        return 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	e083      	b.n	80003f8 <MA330_Init+0x19c>
    }
	cs_high(encd);
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	0018      	movs	r0, r3
 80002f4:	f7ff ffa2 	bl	800023c <cs_high>
	HAL_Delay(1);
 80002f8:	2001      	movs	r0, #1
 80002fa:	f001 f859 	bl	80013b0 <HAL_Delay>
	cs_low(encd);
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	0018      	movs	r0, r3
 8000302:	f7ff ff8b 	bl	800021c <cs_low>

	send_buffer[0]=0x00;
 8000306:	2110      	movs	r1, #16
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
	send_buffer[1]=0x00;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	705a      	strb	r2, [r3, #1]
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	6818      	ldr	r0, [r3, #0]
 8000318:	2314      	movs	r3, #20
 800031a:	18fa      	adds	r2, r7, r3
 800031c:	1879      	adds	r1, r7, r1
 800031e:	23fa      	movs	r3, #250	@ 0xfa
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	2302      	movs	r3, #2
 8000326:	f003 fca3 	bl	8003c70 <HAL_SPI_TransmitReceive>
 800032a:	1e03      	subs	r3, r0, #0
 800032c:	d005      	beq.n	800033a <MA330_Init+0xde>
		cs_high(encd);
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f7ff ff83 	bl	800023c <cs_high>
        return 0;
 8000336:	2300      	movs	r3, #0
 8000338:	e05e      	b.n	80003f8 <MA330_Init+0x19c>
    }
	//uint8_t actualfw=receive_buffer[0];
	cs_high(encd);
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	0018      	movs	r0, r3
 800033e:	f7ff ff7d 	bl	800023c <cs_high>
	HAL_Delay(1);
 8000342:	2001      	movs	r0, #1
 8000344:	f001 f834 	bl	80013b0 <HAL_Delay>
	cs_low(encd);
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	0018      	movs	r0, r3
 800034c:	f7ff ff66 	bl	800021c <cs_low>

	send_buffer[0]=0x8E;
 8000350:	2110      	movs	r1, #16
 8000352:	187b      	adds	r3, r7, r1
 8000354:	228e      	movs	r2, #142	@ 0x8e
 8000356:	701a      	strb	r2, [r3, #0]
	send_buffer[1]=FW;
 8000358:	187a      	adds	r2, r7, r1
 800035a:	2320      	movs	r3, #32
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	7053      	strb	r3, [r2, #1]

	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	6818      	ldr	r0, [r3, #0]
 8000366:	2314      	movs	r3, #20
 8000368:	18fa      	adds	r2, r7, r3
 800036a:	1879      	adds	r1, r7, r1
 800036c:	23fa      	movs	r3, #250	@ 0xfa
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	2302      	movs	r3, #2
 8000374:	f003 fc7c 	bl	8003c70 <HAL_SPI_TransmitReceive>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d005      	beq.n	8000388 <MA330_Init+0x12c>
		cs_high(encd);
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	0018      	movs	r0, r3
 8000380:	f7ff ff5c 	bl	800023c <cs_high>
        return 0;
 8000384:	2300      	movs	r3, #0
 8000386:	e037      	b.n	80003f8 <MA330_Init+0x19c>
    }

	cs_high(encd);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	0018      	movs	r0, r3
 800038c:	f7ff ff56 	bl	800023c <cs_high>
	HAL_Delay(25);
 8000390:	2019      	movs	r0, #25
 8000392:	f001 f80d 	bl	80013b0 <HAL_Delay>
	cs_low(encd);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	0018      	movs	r0, r3
 800039a:	f7ff ff3f 	bl	800021c <cs_low>

	send_buffer[0]=0x00;
 800039e:	2110      	movs	r1, #16
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
	send_buffer[1]=0x00;
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2200      	movs	r2, #0
 80003aa:	705a      	strb	r2, [r3, #1]

	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	6818      	ldr	r0, [r3, #0]
 80003b0:	2314      	movs	r3, #20
 80003b2:	18fa      	adds	r2, r7, r3
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	23fa      	movs	r3, #250	@ 0xfa
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	2302      	movs	r3, #2
 80003be:	f003 fc57 	bl	8003c70 <HAL_SPI_TransmitReceive>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d005      	beq.n	80003d2 <MA330_Init+0x176>
		cs_high(encd);
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	0018      	movs	r0, r3
 80003ca:	f7ff ff37 	bl	800023c <cs_high>
        return 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	e012      	b.n	80003f8 <MA330_Init+0x19c>
    }

	if(receive_buffer[0]!=FW){
 80003d2:	2314      	movs	r3, #20
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	781a      	ldrb	r2, [r3, #0]
 80003d8:	2320      	movs	r3, #32
 80003da:	18fb      	adds	r3, r7, r3
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	4293      	cmp	r3, r2
 80003e0:	d005      	beq.n	80003ee <MA330_Init+0x192>
		cs_high(encd);
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	0018      	movs	r0, r3
 80003e6:	f7ff ff29 	bl	800023c <cs_high>

		return 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	e004      	b.n	80003f8 <MA330_Init+0x19c>
	}
	cs_high(encd);
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	0018      	movs	r0, r3
 80003f2:	f7ff ff23 	bl	800023c <cs_high>

    }
    return 1;
 80003f6:	2301      	movs	r3, #1
}
 80003f8:	0018      	movs	r0, r3
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b006      	add	sp, #24
 80003fe:	bd80      	pop	{r7, pc}

08000400 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	0018      	movs	r0, r3
 800040a:	230c      	movs	r3, #12
 800040c:	001a      	movs	r2, r3
 800040e:	2100      	movs	r1, #0
 8000410:	f005 fcf4 	bl	8005dfc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000414:	4b4f      	ldr	r3, [pc, #316]	@ (8000554 <MX_ADC1_Init+0x154>)
 8000416:	4a50      	ldr	r2, [pc, #320]	@ (8000558 <MX_ADC1_Init+0x158>)
 8000418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800041a:	4b4e      	ldr	r3, [pc, #312]	@ (8000554 <MX_ADC1_Init+0x154>)
 800041c:	2280      	movs	r2, #128	@ 0x80
 800041e:	05d2      	lsls	r2, r2, #23
 8000420:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000422:	4b4c      	ldr	r3, [pc, #304]	@ (8000554 <MX_ADC1_Init+0x154>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000428:	4b4a      	ldr	r3, [pc, #296]	@ (8000554 <MX_ADC1_Init+0x154>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800042e:	4b49      	ldr	r3, [pc, #292]	@ (8000554 <MX_ADC1_Init+0x154>)
 8000430:	2280      	movs	r2, #128	@ 0x80
 8000432:	0392      	lsls	r2, r2, #14
 8000434:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000436:	4b47      	ldr	r3, [pc, #284]	@ (8000554 <MX_ADC1_Init+0x154>)
 8000438:	2208      	movs	r2, #8
 800043a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800043c:	4b45      	ldr	r3, [pc, #276]	@ (8000554 <MX_ADC1_Init+0x154>)
 800043e:	2200      	movs	r2, #0
 8000440:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000442:	4b44      	ldr	r3, [pc, #272]	@ (8000554 <MX_ADC1_Init+0x154>)
 8000444:	2200      	movs	r2, #0
 8000446:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000448:	4b42      	ldr	r3, [pc, #264]	@ (8000554 <MX_ADC1_Init+0x154>)
 800044a:	2200      	movs	r2, #0
 800044c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 800044e:	4b41      	ldr	r3, [pc, #260]	@ (8000554 <MX_ADC1_Init+0x154>)
 8000450:	2205      	movs	r2, #5
 8000452:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000454:	4b3f      	ldr	r3, [pc, #252]	@ (8000554 <MX_ADC1_Init+0x154>)
 8000456:	2220      	movs	r2, #32
 8000458:	2100      	movs	r1, #0
 800045a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC4;
 800045c:	4b3d      	ldr	r3, [pc, #244]	@ (8000554 <MX_ADC1_Init+0x154>)
 800045e:	2288      	movs	r2, #136	@ 0x88
 8000460:	00d2      	lsls	r2, r2, #3
 8000462:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000464:	4b3b      	ldr	r3, [pc, #236]	@ (8000554 <MX_ADC1_Init+0x154>)
 8000466:	2280      	movs	r2, #128	@ 0x80
 8000468:	0112      	lsls	r2, r2, #4
 800046a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800046c:	4b39      	ldr	r3, [pc, #228]	@ (8000554 <MX_ADC1_Init+0x154>)
 800046e:	222c      	movs	r2, #44	@ 0x2c
 8000470:	2101      	movs	r1, #1
 8000472:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000474:	4b37      	ldr	r3, [pc, #220]	@ (8000554 <MX_ADC1_Init+0x154>)
 8000476:	2280      	movs	r2, #128	@ 0x80
 8000478:	0152      	lsls	r2, r2, #5
 800047a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 800047c:	4b35      	ldr	r3, [pc, #212]	@ (8000554 <MX_ADC1_Init+0x154>)
 800047e:	2202      	movs	r2, #2
 8000480:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000482:	4b34      	ldr	r3, [pc, #208]	@ (8000554 <MX_ADC1_Init+0x154>)
 8000484:	2200      	movs	r2, #0
 8000486:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000488:	4b32      	ldr	r3, [pc, #200]	@ (8000554 <MX_ADC1_Init+0x154>)
 800048a:	223c      	movs	r2, #60	@ 0x3c
 800048c:	2100      	movs	r1, #0
 800048e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000490:	4b30      	ldr	r3, [pc, #192]	@ (8000554 <MX_ADC1_Init+0x154>)
 8000492:	2200      	movs	r2, #0
 8000494:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000496:	4b2f      	ldr	r3, [pc, #188]	@ (8000554 <MX_ADC1_Init+0x154>)
 8000498:	0018      	movs	r0, r3
 800049a:	f001 f901 	bl	80016a0 <HAL_ADC_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80004a2:	f000 faad 	bl	8000a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4a2c      	ldr	r2, [pc, #176]	@ (800055c <MX_ADC1_Init+0x15c>)
 80004aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b8:	1d3a      	adds	r2, r7, #4
 80004ba:	4b26      	ldr	r3, [pc, #152]	@ (8000554 <MX_ADC1_Init+0x154>)
 80004bc:	0011      	movs	r1, r2
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 fc54 	bl	8001d6c <HAL_ADC_ConfigChannel>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80004c8:	f000 fa9a 	bl	8000a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	4a24      	ldr	r2, [pc, #144]	@ (8000560 <MX_ADC1_Init+0x160>)
 80004d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2204      	movs	r2, #4
 80004d6:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004d8:	1d3a      	adds	r2, r7, #4
 80004da:	4b1e      	ldr	r3, [pc, #120]	@ (8000554 <MX_ADC1_Init+0x154>)
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 fc44 	bl	8001d6c <HAL_ADC_ConfigChannel>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80004e8:	f000 fa8a 	bl	8000a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000564 <MX_ADC1_Init+0x164>)
 80004f0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2208      	movs	r2, #8
 80004f6:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004f8:	1d3a      	adds	r2, r7, #4
 80004fa:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <MX_ADC1_Init+0x154>)
 80004fc:	0011      	movs	r1, r2
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 fc34 	bl	8001d6c <HAL_ADC_ConfigChannel>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000508:	f000 fa7a 	bl	8000a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	4a16      	ldr	r2, [pc, #88]	@ (8000568 <MX_ADC1_Init+0x168>)
 8000510:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	220c      	movs	r2, #12
 8000516:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000518:	1d3a      	adds	r2, r7, #4
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <MX_ADC1_Init+0x154>)
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f001 fc24 	bl	8001d6c <HAL_ADC_ConfigChannel>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8000528:	f000 fa6a 	bl	8000a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4a0f      	ldr	r2, [pc, #60]	@ (800056c <MX_ADC1_Init+0x16c>)
 8000530:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2210      	movs	r2, #16
 8000536:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000538:	1d3a      	adds	r2, r7, #4
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <MX_ADC1_Init+0x154>)
 800053c:	0011      	movs	r1, r2
 800053e:	0018      	movs	r0, r3
 8000540:	f001 fc14 	bl	8001d6c <HAL_ADC_ConfigChannel>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 8000548:	f000 fa5a 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800054c:	46c0      	nop			@ (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b004      	add	sp, #16
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000028 	.word	0x20000028
 8000558:	40012400 	.word	0x40012400
 800055c:	18000040 	.word	0x18000040
 8000560:	1c000080 	.word	0x1c000080
 8000564:	24000200 	.word	0x24000200
 8000568:	14000020 	.word	0x14000020
 800056c:	b4002000 	.word	0xb4002000

08000570 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b08b      	sub	sp, #44	@ 0x2c
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	2414      	movs	r4, #20
 800057a:	193b      	adds	r3, r7, r4
 800057c:	0018      	movs	r0, r3
 800057e:	2314      	movs	r3, #20
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f005 fc3a 	bl	8005dfc <memset>
  if(adcHandle->Instance==ADC1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a3f      	ldr	r2, [pc, #252]	@ (800068c <HAL_ADC_MspInit+0x11c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d177      	bne.n	8000682 <HAL_ADC_MspInit+0x112>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000592:	4b3f      	ldr	r3, [pc, #252]	@ (8000690 <HAL_ADC_MspInit+0x120>)
 8000594:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000596:	4b3e      	ldr	r3, [pc, #248]	@ (8000690 <HAL_ADC_MspInit+0x120>)
 8000598:	2180      	movs	r1, #128	@ 0x80
 800059a:	0349      	lsls	r1, r1, #13
 800059c:	430a      	orrs	r2, r1
 800059e:	641a      	str	r2, [r3, #64]	@ 0x40
 80005a0:	4b3b      	ldr	r3, [pc, #236]	@ (8000690 <HAL_ADC_MspInit+0x120>)
 80005a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	035b      	lsls	r3, r3, #13
 80005a8:	4013      	ands	r3, r2
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b38      	ldr	r3, [pc, #224]	@ (8000690 <HAL_ADC_MspInit+0x120>)
 80005b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005b2:	4b37      	ldr	r3, [pc, #220]	@ (8000690 <HAL_ADC_MspInit+0x120>)
 80005b4:	2101      	movs	r1, #1
 80005b6:	430a      	orrs	r2, r1
 80005b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ba:	4b35      	ldr	r3, [pc, #212]	@ (8000690 <HAL_ADC_MspInit+0x120>)
 80005bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005be:	2201      	movs	r2, #1
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b32      	ldr	r3, [pc, #200]	@ (8000690 <HAL_ADC_MspInit+0x120>)
 80005c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ca:	4b31      	ldr	r3, [pc, #196]	@ (8000690 <HAL_ADC_MspInit+0x120>)
 80005cc:	2102      	movs	r1, #2
 80005ce:	430a      	orrs	r2, r1
 80005d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000690 <HAL_ADC_MspInit+0x120>)
 80005d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005d6:	2202      	movs	r2, #2
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	22e0      	movs	r2, #224	@ 0xe0
 80005e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2203      	movs	r2, #3
 80005e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	193a      	adds	r2, r7, r4
 80005f2:	23a0      	movs	r3, #160	@ 0xa0
 80005f4:	05db      	lsls	r3, r3, #23
 80005f6:	0011      	movs	r1, r2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f002 fa5d 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	2202      	movs	r2, #2
 8000602:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000604:	193b      	adds	r3, r7, r4
 8000606:	2203      	movs	r2, #3
 8000608:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	193b      	adds	r3, r7, r4
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000610:	193b      	adds	r3, r7, r4
 8000612:	4a20      	ldr	r2, [pc, #128]	@ (8000694 <HAL_ADC_MspInit+0x124>)
 8000614:	0019      	movs	r1, r3
 8000616:	0010      	movs	r0, r2
 8000618:	f002 fa4e 	bl	8002ab8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <HAL_ADC_MspInit+0x128>)
 800061e:	4a1f      	ldr	r2, [pc, #124]	@ (800069c <HAL_ADC_MspInit+0x12c>)
 8000620:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000622:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <HAL_ADC_MspInit+0x128>)
 8000624:	2205      	movs	r2, #5
 8000626:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <HAL_ADC_MspInit+0x128>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800062e:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <HAL_ADC_MspInit+0x128>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <HAL_ADC_MspInit+0x128>)
 8000636:	2280      	movs	r2, #128	@ 0x80
 8000638:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800063a:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <HAL_ADC_MspInit+0x128>)
 800063c:	2280      	movs	r2, #128	@ 0x80
 800063e:	0052      	lsls	r2, r2, #1
 8000640:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000642:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <HAL_ADC_MspInit+0x128>)
 8000644:	2280      	movs	r2, #128	@ 0x80
 8000646:	00d2      	lsls	r2, r2, #3
 8000648:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800064a:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <HAL_ADC_MspInit+0x128>)
 800064c:	2220      	movs	r2, #32
 800064e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <HAL_ADC_MspInit+0x128>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <HAL_ADC_MspInit+0x128>)
 8000658:	0018      	movs	r0, r3
 800065a:	f001 ff71 	bl	8002540 <HAL_DMA_Init>
 800065e:	1e03      	subs	r3, r0, #0
 8000660:	d001      	beq.n	8000666 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8000662:	f000 f9cd 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a0b      	ldr	r2, [pc, #44]	@ (8000698 <HAL_ADC_MspInit+0x128>)
 800066a:	651a      	str	r2, [r3, #80]	@ 0x50
 800066c:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <HAL_ADC_MspInit+0x128>)
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	200c      	movs	r0, #12
 8000678:	f001 ff30 	bl	80024dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800067c:	200c      	movs	r0, #12
 800067e:	f001 ff42 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b00b      	add	sp, #44	@ 0x2c
 8000688:	bd90      	pop	{r4, r7, pc}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	40012400 	.word	0x40012400
 8000690:	40021000 	.word	0x40021000
 8000694:	50000400 	.word	0x50000400
 8000698:	2000008c 	.word	0x2000008c
 800069c:	40020008 	.word	0x40020008

080006a0 <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,0);

	//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
	//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
	tps_tot=(uint32_t ) (TIM2->CNT-tps1);
 80006a8:	2380      	movs	r3, #128	@ 0x80
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006ae:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <HAL_ADC_ConvCpltCallback+0x20>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	1ad2      	subs	r2, r2, r3
 80006b4:	4b03      	ldr	r3, [pc, #12]	@ (80006c4 <HAL_ADC_ConvCpltCallback+0x24>)
 80006b6:	601a      	str	r2, [r3, #0]





}
 80006b8:	46c0      	nop			@ (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000130 	.word	0x20000130
 80006c4:	20000134 	.word	0x20000134

080006c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_DMA_Init+0x48>)
 80006d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_DMA_Init+0x48>)
 80006d4:	2101      	movs	r1, #1
 80006d6:	430a      	orrs	r2, r1
 80006d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <MX_DMA_Init+0x48>)
 80006dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006de:	2201      	movs	r2, #1
 80006e0:	4013      	ands	r3, r2
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2009      	movs	r0, #9
 80006ec:	f001 fef6 	bl	80024dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006f0:	2009      	movs	r0, #9
 80006f2:	f001 ff08 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	200a      	movs	r0, #10
 80006fc:	f001 feee 	bl	80024dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000700:	200a      	movs	r0, #10
 8000702:	f001 ff00 	bl	8002506 <HAL_NVIC_EnableIRQ>

}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b002      	add	sp, #8
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	40021000 	.word	0x40021000

08000714 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b089      	sub	sp, #36	@ 0x24
 8000718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	240c      	movs	r4, #12
 800071c:	193b      	adds	r3, r7, r4
 800071e:	0018      	movs	r0, r3
 8000720:	2314      	movs	r3, #20
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f005 fb69 	bl	8005dfc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800072a:	4b44      	ldr	r3, [pc, #272]	@ (800083c <MX_GPIO_Init+0x128>)
 800072c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800072e:	4b43      	ldr	r3, [pc, #268]	@ (800083c <MX_GPIO_Init+0x128>)
 8000730:	2120      	movs	r1, #32
 8000732:	430a      	orrs	r2, r1
 8000734:	635a      	str	r2, [r3, #52]	@ 0x34
 8000736:	4b41      	ldr	r3, [pc, #260]	@ (800083c <MX_GPIO_Init+0x128>)
 8000738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800073a:	2220      	movs	r2, #32
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b3e      	ldr	r3, [pc, #248]	@ (800083c <MX_GPIO_Init+0x128>)
 8000744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000746:	4b3d      	ldr	r3, [pc, #244]	@ (800083c <MX_GPIO_Init+0x128>)
 8000748:	2101      	movs	r1, #1
 800074a:	430a      	orrs	r2, r1
 800074c:	635a      	str	r2, [r3, #52]	@ 0x34
 800074e:	4b3b      	ldr	r3, [pc, #236]	@ (800083c <MX_GPIO_Init+0x128>)
 8000750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000752:	2201      	movs	r2, #1
 8000754:	4013      	ands	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b38      	ldr	r3, [pc, #224]	@ (800083c <MX_GPIO_Init+0x128>)
 800075c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800075e:	4b37      	ldr	r3, [pc, #220]	@ (800083c <MX_GPIO_Init+0x128>)
 8000760:	2102      	movs	r1, #2
 8000762:	430a      	orrs	r2, r1
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34
 8000766:	4b35      	ldr	r3, [pc, #212]	@ (800083c <MX_GPIO_Init+0x128>)
 8000768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800076a:	2202      	movs	r2, #2
 800076c:	4013      	ands	r3, r2
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000772:	4b33      	ldr	r3, [pc, #204]	@ (8000840 <MX_GPIO_Init+0x12c>)
 8000774:	2200      	movs	r2, #0
 8000776:	2101      	movs	r1, #1
 8000778:	0018      	movs	r0, r3
 800077a:	f002 fb01 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|HALL_CS_Pin, GPIO_PIN_RESET);
 800077e:	4931      	ldr	r1, [pc, #196]	@ (8000844 <MX_GPIO_Init+0x130>)
 8000780:	23a0      	movs	r3, #160	@ 0xa0
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	2200      	movs	r2, #0
 8000786:	0018      	movs	r0, r3
 8000788:	f002 fafa 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2201      	movs	r2, #1
 8000790:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2201      	movs	r2, #1
 8000796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	4a26      	ldr	r2, [pc, #152]	@ (8000840 <MX_GPIO_Init+0x12c>)
 80007a8:	0019      	movs	r1, r3
 80007aa:	0010      	movs	r0, r2
 80007ac:	f002 f984 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	220c      	movs	r2, #12
 80007b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2201      	movs	r2, #1
 80007ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2202      	movs	r2, #2
 80007c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	193a      	adds	r2, r7, r4
 80007ca:	23a0      	movs	r3, #160	@ 0xa0
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	0011      	movs	r1, r2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f002 f971 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	0152      	lsls	r2, r2, #5
 80007dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2288      	movs	r2, #136	@ 0x88
 80007e2:	0352      	lsls	r2, r2, #13
 80007e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	193a      	adds	r2, r7, r4
 80007ee:	23a0      	movs	r3, #160	@ 0xa0
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f002 f95f 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_CS_Pin */
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 80007fa:	0021      	movs	r1, r4
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	0212      	lsls	r2, r2, #8
 8000802:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2201      	movs	r2, #1
 8000808:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 8000816:	187a      	adds	r2, r7, r1
 8000818:	23a0      	movs	r3, #160	@ 0xa0
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	0011      	movs	r1, r2
 800081e:	0018      	movs	r0, r3
 8000820:	f002 f94a 	bl	8002ab8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2007      	movs	r0, #7
 800082a:	f001 fe57 	bl	80024dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800082e:	2007      	movs	r0, #7
 8000830:	f001 fe69 	bl	8002506 <HAL_NVIC_EnableIRQ>

}
 8000834:	46c0      	nop			@ (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b009      	add	sp, #36	@ 0x24
 800083a:	bd90      	pop	{r4, r7, pc}
 800083c:	40021000 	.word	0x40021000
 8000840:	50001400 	.word	0x50001400
 8000844:	0000800c 	.word	0x0000800c

08000848 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	0002      	movs	r2, r0
 8000850:	1dbb      	adds	r3, r7, #6
 8000852:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_0);
 8000854:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <HAL_GPIO_EXTI_Rising_Callback+0x20>)
 8000856:	2101      	movs	r1, #1
 8000858:	0018      	movs	r0, r3
 800085a:	f002 faae 	bl	8002dba <HAL_GPIO_TogglePin>


}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	50001400 	.word	0x50001400

0800086c <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	0002      	movs	r2, r0
 8000874:	1dbb      	adds	r3, r7, #6
 8000876:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_0);
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <HAL_GPIO_EXTI_Falling_Callback+0x20>)
 800087a:	2101      	movs	r1, #1
 800087c:	0018      	movs	r0, r3
 800087e:	f002 fa9c 	bl	8002dba <HAL_GPIO_TogglePin>



}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	50001400 	.word	0x50001400

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b083      	sub	sp, #12
 8000894:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000896:	f000 fd05 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089a:	f000 f853 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089e:	f7ff ff39 	bl	8000714 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a2:	f7ff ff11 	bl	80006c8 <MX_DMA_Init>
  MX_ADC1_Init();
 80008a6:	f7ff fdab 	bl	8000400 <MX_ADC1_Init>
  MX_SPI2_Init();
 80008aa:	f000 f8af 	bl	8000a0c <MX_SPI2_Init>
  MX_TIM1_Init();
 80008ae:	f000 fa63 	bl	8000d78 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008b2:	f000 fb7d 	bl	8000fb0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  MA330_Init(&ma330data, &hspi2, HALL_CS_GPIO_Port, HALL_CS_Pin,NORMAL_FW);
 80008b6:	2380      	movs	r3, #128	@ 0x80
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	22a0      	movs	r2, #160	@ 0xa0
 80008bc:	05d2      	lsls	r2, r2, #23
 80008be:	491b      	ldr	r1, [pc, #108]	@ (800092c <main+0x9c>)
 80008c0:	481b      	ldr	r0, [pc, #108]	@ (8000930 <main+0xa0>)
 80008c2:	2466      	movs	r4, #102	@ 0x66
 80008c4:	9400      	str	r4, [sp, #0]
 80008c6:	f7ff fcc9 	bl	800025c <MA330_Init>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <main+0xa4>)
 80008cc:	2100      	movs	r1, #0
 80008ce:	0018      	movs	r0, r3
 80008d0:	f003 ff46 	bl	8004760 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80008d4:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <main+0xa4>)
 80008d6:	2100      	movs	r1, #0
 80008d8:	0018      	movs	r0, r3
 80008da:	f005 f821 	bl	8005920 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80008de:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <main+0xa4>)
 80008e0:	2104      	movs	r1, #4
 80008e2:	0018      	movs	r0, r3
 80008e4:	f003 ff3c 	bl	8004760 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <main+0xa4>)
 80008ea:	2104      	movs	r1, #4
 80008ec:	0018      	movs	r0, r3
 80008ee:	f005 f817 	bl	8005920 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <main+0xa4>)
 80008f4:	2108      	movs	r1, #8
 80008f6:	0018      	movs	r0, r3
 80008f8:	f003 ff32 	bl	8004760 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 80008fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <main+0xa4>)
 80008fe:	2108      	movs	r1, #8
 8000900:	0018      	movs	r0, r3
 8000902:	f005 f80d 	bl	8005920 <HAL_TIMEx_PWMN_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 5);
 8000906:	490c      	ldr	r1, [pc, #48]	@ (8000938 <main+0xa8>)
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <main+0xac>)
 800090a:	2205      	movs	r2, #5
 800090c:	0018      	movs	r0, r3
 800090e:	f001 f86f 	bl	80019f0 <HAL_ADC_Start_DMA>


	//__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <main+0xa4>)
 8000914:	210c      	movs	r1, #12
 8000916:	0018      	movs	r0, r3
 8000918:	f004 f800 	bl	800491c <HAL_TIM_PWM_Start_IT>

	HAL_TIM_Base_Start(&htim2);
 800091c:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <main+0xb0>)
 800091e:	0018      	movs	r0, r3
 8000920:	f003 fe72 	bl	8004608 <HAL_TIM_Base_Start>
	while (1)
	{

		//HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_0);

		HAL_Delay(100);
 8000924:	2064      	movs	r0, #100	@ 0x64
 8000926:	f000 fd43 	bl	80013b0 <HAL_Delay>
 800092a:	e7fb      	b.n	8000924 <main+0x94>
 800092c:	20000138 	.word	0x20000138
 8000930:	200000f4 	.word	0x200000f4
 8000934:	20000254 	.word	0x20000254
 8000938:	200000e8 	.word	0x200000e8
 800093c:	20000028 	.word	0x20000028
 8000940:	200002a0 	.word	0x200002a0

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b093      	sub	sp, #76	@ 0x4c
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	2410      	movs	r4, #16
 800094c:	193b      	adds	r3, r7, r4
 800094e:	0018      	movs	r0, r3
 8000950:	2338      	movs	r3, #56	@ 0x38
 8000952:	001a      	movs	r2, r3
 8000954:	2100      	movs	r1, #0
 8000956:	f005 fa51 	bl	8005dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095a:	003b      	movs	r3, r7
 800095c:	0018      	movs	r0, r3
 800095e:	2310      	movs	r3, #16
 8000960:	001a      	movs	r2, r3
 8000962:	2100      	movs	r1, #0
 8000964:	f005 fa4a 	bl	8005dfc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	2380      	movs	r3, #128	@ 0x80
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	0018      	movs	r0, r3
 800096e:	f002 fa69 	bl	8002e44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000972:	193b      	adds	r3, r7, r4
 8000974:	2202      	movs	r2, #2
 8000976:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2280      	movs	r2, #128	@ 0x80
 800097c:	0052      	lsls	r2, r2, #1
 800097e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000980:	0021      	movs	r1, r4
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2240      	movs	r2, #64	@ 0x40
 800098c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2202      	movs	r2, #2
 8000992:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2202      	movs	r2, #2
 8000998:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2200      	movs	r2, #0
 800099e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2210      	movs	r2, #16
 80009a4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	22e0      	movs	r2, #224	@ 0xe0
 80009aa:	0312      	lsls	r2, r2, #12
 80009ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2280      	movs	r2, #128	@ 0x80
 80009b2:	0492      	lsls	r2, r2, #18
 80009b4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	22c0      	movs	r2, #192	@ 0xc0
 80009ba:	05d2      	lsls	r2, r2, #23
 80009bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	0018      	movs	r0, r3
 80009c2:	f002 fa7f 	bl	8002ec4 <HAL_RCC_OscConfig>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009ca:	f000 f819 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ce:	003b      	movs	r3, r7
 80009d0:	2207      	movs	r2, #7
 80009d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d4:	003b      	movs	r3, r7
 80009d6:	2202      	movs	r2, #2
 80009d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009da:	003b      	movs	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e0:	003b      	movs	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e6:	003b      	movs	r3, r7
 80009e8:	2102      	movs	r1, #2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f002 fd84 	bl	80034f8 <HAL_RCC_ClockConfig>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009f4:	f000 f804 	bl	8000a00 <Error_Handler>
  }
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b013      	add	sp, #76	@ 0x4c
 80009fe:	bd90      	pop	{r4, r7, pc}

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a12:	4a1c      	ldr	r2, [pc, #112]	@ (8000a84 <MX_SPI2_Init+0x78>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a18:	2282      	movs	r2, #130	@ 0x82
 8000a1a:	0052      	lsls	r2, r2, #1
 8000a1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a24:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a26:	22e0      	movs	r2, #224	@ 0xe0
 8000a28:	00d2      	lsls	r2, r2, #3
 8000a2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a32:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a3a:	2280      	movs	r2, #128	@ 0x80
 8000a3c:	0092      	lsls	r2, r2, #2
 8000a3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a42:	2210      	movs	r2, #16
 8000a44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a66:	2208      	movs	r2, #8
 8000a68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a6a:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f003 f847 	bl	8003b00 <HAL_SPI_Init>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a76:	f7ff ffc3 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000138 	.word	0x20000138
 8000a84:	40003800 	.word	0x40003800

08000a88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b08b      	sub	sp, #44	@ 0x2c
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	2414      	movs	r4, #20
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	0018      	movs	r0, r3
 8000a96:	2314      	movs	r3, #20
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f005 f9ae 	bl	8005dfc <memset>
  if(spiHandle->Instance==SPI2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a65      	ldr	r2, [pc, #404]	@ (8000c3c <HAL_SPI_MspInit+0x1b4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d000      	beq.n	8000aac <HAL_SPI_MspInit+0x24>
 8000aaa:	e0c2      	b.n	8000c32 <HAL_SPI_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aac:	4b64      	ldr	r3, [pc, #400]	@ (8000c40 <HAL_SPI_MspInit+0x1b8>)
 8000aae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ab0:	4b63      	ldr	r3, [pc, #396]	@ (8000c40 <HAL_SPI_MspInit+0x1b8>)
 8000ab2:	2180      	movs	r1, #128	@ 0x80
 8000ab4:	01c9      	lsls	r1, r1, #7
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000aba:	4b61      	ldr	r3, [pc, #388]	@ (8000c40 <HAL_SPI_MspInit+0x1b8>)
 8000abc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000abe:	2380      	movs	r3, #128	@ 0x80
 8000ac0:	01db      	lsls	r3, r3, #7
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b5d      	ldr	r3, [pc, #372]	@ (8000c40 <HAL_SPI_MspInit+0x1b8>)
 8000aca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000acc:	4b5c      	ldr	r3, [pc, #368]	@ (8000c40 <HAL_SPI_MspInit+0x1b8>)
 8000ace:	2101      	movs	r1, #1
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ad4:	4b5a      	ldr	r3, [pc, #360]	@ (8000c40 <HAL_SPI_MspInit+0x1b8>)
 8000ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4013      	ands	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b57      	ldr	r3, [pc, #348]	@ (8000c40 <HAL_SPI_MspInit+0x1b8>)
 8000ae2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ae4:	4b56      	ldr	r3, [pc, #344]	@ (8000c40 <HAL_SPI_MspInit+0x1b8>)
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aec:	4b54      	ldr	r3, [pc, #336]	@ (8000c40 <HAL_SPI_MspInit+0x1b8>)
 8000aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af0:	2202      	movs	r2, #2
 8000af2:	4013      	ands	r3, r2
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2202      	movs	r2, #2
 8000b02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000b10:	193b      	adds	r3, r7, r4
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	193a      	adds	r2, r7, r4
 8000b18:	23a0      	movs	r3, #160	@ 0xa0
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f001 ffca 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	2240      	movs	r2, #64	@ 0x40
 8000b28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	2204      	movs	r2, #4
 8000b40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	4a3f      	ldr	r2, [pc, #252]	@ (8000c44 <HAL_SPI_MspInit+0x1bc>)
 8000b46:	0019      	movs	r1, r3
 8000b48:	0010      	movs	r0, r2
 8000b4a:	f001 ffb5 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b4e:	0021      	movs	r1, r4
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2280      	movs	r2, #128	@ 0x80
 8000b54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2202      	movs	r2, #2
 8000b5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	4a34      	ldr	r2, [pc, #208]	@ (8000c44 <HAL_SPI_MspInit+0x1bc>)
 8000b72:	0019      	movs	r1, r3
 8000b74:	0010      	movs	r0, r2
 8000b76:	f001 ff9f 	bl	8002ab8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8000b7a:	4b33      	ldr	r3, [pc, #204]	@ (8000c48 <HAL_SPI_MspInit+0x1c0>)
 8000b7c:	4a33      	ldr	r2, [pc, #204]	@ (8000c4c <HAL_SPI_MspInit+0x1c4>)
 8000b7e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8000b80:	4b31      	ldr	r3, [pc, #196]	@ (8000c48 <HAL_SPI_MspInit+0x1c0>)
 8000b82:	2212      	movs	r2, #18
 8000b84:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b86:	4b30      	ldr	r3, [pc, #192]	@ (8000c48 <HAL_SPI_MspInit+0x1c0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c48 <HAL_SPI_MspInit+0x1c0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b92:	4b2d      	ldr	r3, [pc, #180]	@ (8000c48 <HAL_SPI_MspInit+0x1c0>)
 8000b94:	2280      	movs	r2, #128	@ 0x80
 8000b96:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b98:	4b2b      	ldr	r3, [pc, #172]	@ (8000c48 <HAL_SPI_MspInit+0x1c0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c48 <HAL_SPI_MspInit+0x1c0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000ba4:	4b28      	ldr	r3, [pc, #160]	@ (8000c48 <HAL_SPI_MspInit+0x1c0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000baa:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <HAL_SPI_MspInit+0x1c0>)
 8000bac:	2280      	movs	r2, #128	@ 0x80
 8000bae:	0152      	lsls	r2, r2, #5
 8000bb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000bb2:	4b25      	ldr	r3, [pc, #148]	@ (8000c48 <HAL_SPI_MspInit+0x1c0>)
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f001 fcc3 	bl	8002540 <HAL_DMA_Init>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_SPI_MspInit+0x13a>
    {
      Error_Handler();
 8000bbe:	f7ff ff1f 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a20      	ldr	r2, [pc, #128]	@ (8000c48 <HAL_SPI_MspInit+0x1c0>)
 8000bc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <HAL_SPI_MspInit+0x1c0>)
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <HAL_SPI_MspInit+0x1c8>)
 8000bd0:	4a20      	ldr	r2, [pc, #128]	@ (8000c54 <HAL_SPI_MspInit+0x1cc>)
 8000bd2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <HAL_SPI_MspInit+0x1c8>)
 8000bd6:	2213      	movs	r2, #19
 8000bd8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bda:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <HAL_SPI_MspInit+0x1c8>)
 8000bdc:	2210      	movs	r2, #16
 8000bde:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <HAL_SPI_MspInit+0x1c8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <HAL_SPI_MspInit+0x1c8>)
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <HAL_SPI_MspInit+0x1c8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <HAL_SPI_MspInit+0x1c8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_SPI_MspInit+0x1c8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <HAL_SPI_MspInit+0x1c8>)
 8000c00:	2280      	movs	r2, #128	@ 0x80
 8000c02:	0152      	lsls	r2, r2, #5
 8000c04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000c06:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <HAL_SPI_MspInit+0x1c8>)
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f001 fc99 	bl	8002540 <HAL_DMA_Init>
 8000c0e:	1e03      	subs	r3, r0, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_SPI_MspInit+0x18e>
    {
      Error_Handler();
 8000c12:	f7ff fef5 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <HAL_SPI_MspInit+0x1c8>)
 8000c1a:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <HAL_SPI_MspInit+0x1c8>)
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	201a      	movs	r0, #26
 8000c28:	f001 fc58 	bl	80024dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000c2c:	201a      	movs	r0, #26
 8000c2e:	f001 fc6a 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b00b      	add	sp, #44	@ 0x2c
 8000c38:	bd90      	pop	{r4, r7, pc}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	40003800 	.word	0x40003800
 8000c40:	40021000 	.word	0x40021000
 8000c44:	50000400 	.word	0x50000400
 8000c48:	2000019c 	.word	0x2000019c
 8000c4c:	4002001c 	.word	0x4002001c
 8000c50:	200001f8 	.word	0x200001f8
 8000c54:	40020030 	.word	0x40020030

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c64:	2101      	movs	r1, #1
 8000c66:	430a      	orrs	r2, r1
 8000c68:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4013      	ands	r3, r2
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c7a:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	0549      	lsls	r1, r1, #21
 8000c80:	430a      	orrs	r2, r1
 8000c82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c88:	2380      	movs	r3, #128	@ 0x80
 8000c8a:	055b      	lsls	r3, r3, #21
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca4:	46c0      	nop			@ (mov r8, r8)
 8000ca6:	e7fd      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	e7fd      	b.n	8000cac <HardFault_Handler+0x4>

08000cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 fb56 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	46c0      	nop			@ (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000cd6:	2380      	movs	r3, #128	@ 0x80
 8000cd8:	015b      	lsls	r3, r3, #5
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f002 f888 	bl	8002df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000ce0:	46c0      	nop			@ (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <DMA1_Channel1_IRQHandler+0x14>)
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 fda0 	bl	8002834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	2000008c 	.word	0x2000008c

08000d00 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f001 fd94 	bl	8002834 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d0c:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f001 fd90 	bl	8002834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000d14:	46c0      	nop			@ (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	2000019c 	.word	0x2000019c
 8000d20:	200001f8 	.word	0x200001f8

08000d24 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d28:	4b03      	ldr	r3, [pc, #12]	@ (8000d38 <ADC1_IRQHandler+0x14>)
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 feee 	bl	8001b0c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	20000028 	.word	0x20000028

08000d3c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <TIM1_CC_IRQHandler+0x14>)
 8000d42:	0018      	movs	r0, r3
 8000d44:	f003 ff0e 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d48:	46c0      	nop			@ (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	20000254 	.word	0x20000254

08000d54 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000d58:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <SPI2_IRQHandler+0x14>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f003 f96a 	bl	8004034 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	20000138 	.word	0x20000138

08000d6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	46c0      	nop			@ (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b09e      	sub	sp, #120	@ 0x78
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7e:	2368      	movs	r3, #104	@ 0x68
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	0018      	movs	r0, r3
 8000d84:	2310      	movs	r3, #16
 8000d86:	001a      	movs	r2, r3
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f005 f837 	bl	8005dfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8e:	235c      	movs	r3, #92	@ 0x5c
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	0018      	movs	r0, r3
 8000d94:	230c      	movs	r3, #12
 8000d96:	001a      	movs	r2, r3
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f005 f82f 	bl	8005dfc <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000d9e:	2350      	movs	r3, #80	@ 0x50
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	0018      	movs	r0, r3
 8000da4:	230c      	movs	r3, #12
 8000da6:	001a      	movs	r2, r3
 8000da8:	2100      	movs	r1, #0
 8000daa:	f005 f827 	bl	8005dfc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dae:	2334      	movs	r3, #52	@ 0x34
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	0018      	movs	r0, r3
 8000db4:	231c      	movs	r3, #28
 8000db6:	001a      	movs	r2, r3
 8000db8:	2100      	movs	r1, #0
 8000dba:	f005 f81f 	bl	8005dfc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dbe:	003b      	movs	r3, r7
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	2334      	movs	r3, #52	@ 0x34
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	f005 f818 	bl	8005dfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dcc:	4b74      	ldr	r3, [pc, #464]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000dce:	4a75      	ldr	r2, [pc, #468]	@ (8000fa4 <MX_TIM1_Init+0x22c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dd2:	4b73      	ldr	r3, [pc, #460]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000dd8:	4b71      	ldr	r3, [pc, #452]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000dda:	2220      	movs	r2, #32
 8000ddc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3200;
 8000dde:	4b70      	ldr	r3, [pc, #448]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000de0:	22c8      	movs	r2, #200	@ 0xc8
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de6:	4b6e      	ldr	r3, [pc, #440]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dec:	4b6c      	ldr	r3, [pc, #432]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df2:	4b6b      	ldr	r3, [pc, #428]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000df8:	4b69      	ldr	r3, [pc, #420]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f003 fbac 	bl	8004558 <HAL_TIM_Base_Init>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e04:	f7ff fdfc 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e08:	2168      	movs	r1, #104	@ 0x68
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2280      	movs	r2, #128	@ 0x80
 8000e0e:	0152      	lsls	r2, r2, #5
 8000e10:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e12:	187a      	adds	r2, r7, r1
 8000e14:	4b62      	ldr	r3, [pc, #392]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f004 f8ab 	bl	8004f74 <HAL_TIM_ConfigClockSource>
 8000e1e:	1e03      	subs	r3, r0, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000e22:	f7ff fded 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e26:	4b5e      	ldr	r3, [pc, #376]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f003 fc39 	bl	80046a0 <HAL_TIM_PWM_Init>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000e32:	f7ff fde5 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e36:	215c      	movs	r1, #92	@ 0x5c
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC4REF;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	22e0      	movs	r2, #224	@ 0xe0
 8000e42:	03d2      	lsls	r2, r2, #15
 8000e44:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e4c:	187a      	adds	r2, r7, r1
 8000e4e:	4b54      	ldr	r3, [pc, #336]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000e50:	0011      	movs	r1, r2
 8000e52:	0018      	movs	r0, r3
 8000e54:	f004 fe02 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8000e5c:	f7ff fdd0 	bl	8000a00 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000e60:	2150      	movs	r1, #80	@ 0x50
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000e74:	187a      	adds	r2, r7, r1
 8000e76:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f004 fef2 	bl	8005c64 <HAL_TIMEx_ConfigBreakInput>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000e84:	f7ff fdbc 	bl	8000a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	2134      	movs	r1, #52	@ 0x34
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2260      	movs	r2, #96	@ 0x60
 8000e8e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 800;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	22c8      	movs	r2, #200	@ 0xc8
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb6:	1879      	adds	r1, r7, r1
 8000eb8:	4b39      	ldr	r3, [pc, #228]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f003 ff59 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000ec6:	f7ff fd9b 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eca:	2334      	movs	r3, #52	@ 0x34
 8000ecc:	18f9      	adds	r1, r7, r3
 8000ece:	4b34      	ldr	r3, [pc, #208]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f003 ff4e 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000edc:	f7ff fd90 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ee0:	2334      	movs	r3, #52	@ 0x34
 8000ee2:	18f9      	adds	r1, r7, r3
 8000ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f003 ff43 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 8000ef2:	f7ff fd85 	bl	8000a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000ef6:	2134      	movs	r1, #52	@ 0x34
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	2270      	movs	r2, #112	@ 0x70
 8000efc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 3200-1;
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	4a29      	ldr	r2, [pc, #164]	@ (8000fa8 <MX_TIM1_Init+0x230>)
 8000f02:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f04:	1879      	adds	r1, r7, r1
 8000f06:	4b26      	ldr	r3, [pc, #152]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000f08:	220c      	movs	r2, #12
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f003 ff32 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
 8000f10:	1e03      	subs	r3, r0, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 8000f14:	f7ff fd74 	bl	8000a00 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8000f18:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	69da      	ldr	r2, [r3, #28]
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4922      	ldr	r1, [pc, #136]	@ (8000fac <MX_TIM1_Init+0x234>)
 8000f24:	400a      	ands	r2, r1
 8000f26:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f28:	003b      	movs	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f2e:	003b      	movs	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f34:	003b      	movs	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 52;
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	2234      	movs	r2, #52	@ 0x34
 8000f3e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000f40:	003b      	movs	r3, r7
 8000f42:	2280      	movs	r2, #128	@ 0x80
 8000f44:	0152      	lsls	r2, r2, #5
 8000f46:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f48:	003b      	movs	r3, r7
 8000f4a:	2280      	movs	r2, #128	@ 0x80
 8000f4c:	0192      	lsls	r2, r2, #6
 8000f4e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 3;
 8000f50:	003b      	movs	r3, r7
 8000f52:	2203      	movs	r2, #3
 8000f54:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f56:	003b      	movs	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f5c:	003b      	movs	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f62:	003b      	movs	r3, r7
 8000f64:	2280      	movs	r2, #128	@ 0x80
 8000f66:	0492      	lsls	r2, r2, #18
 8000f68:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f6a:	003b      	movs	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f70:	003b      	movs	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f76:	003b      	movs	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f7c:	003a      	movs	r2, r7
 8000f7e:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000f80:	0011      	movs	r1, r2
 8000f82:	0018      	movs	r0, r3
 8000f84:	f004 fdd2 	bl	8005b2c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM1_Init+0x218>
  {
    Error_Handler();
 8000f8c:	f7ff fd38 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f90:	4b03      	ldr	r3, [pc, #12]	@ (8000fa0 <MX_TIM1_Init+0x228>)
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 f8e0 	bl	8001158 <HAL_TIM_MspPostInit>

}
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b01e      	add	sp, #120	@ 0x78
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000254 	.word	0x20000254
 8000fa4:	40012c00 	.word	0x40012c00
 8000fa8:	00000c7f 	.word	0x00000c7f
 8000fac:	fffff7ff 	.word	0xfffff7ff

08000fb0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb6:	2310      	movs	r3, #16
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	0018      	movs	r0, r3
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	f004 ff1b 	bl	8005dfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	0018      	movs	r0, r3
 8000fca:	230c      	movs	r3, #12
 8000fcc:	001a      	movs	r2, r3
 8000fce:	2100      	movs	r1, #0
 8000fd0:	f004 ff14 	bl	8005dfc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <MX_TIM2_Init+0xa4>)
 8000fd6:	2280      	movs	r2, #128	@ 0x80
 8000fd8:	05d2      	lsls	r2, r2, #23
 8000fda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <MX_TIM2_Init+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_TIM2_Init+0xa4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_TIM2_Init+0xa4>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	4252      	negs	r2, r2
 8000fee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_TIM2_Init+0xa4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <MX_TIM2_Init+0xa4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ffc:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <MX_TIM2_Init+0xa4>)
 8000ffe:	0018      	movs	r0, r3
 8001000:	f003 faaa 	bl	8004558 <HAL_TIM_Base_Init>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d001      	beq.n	800100c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001008:	f7ff fcfa 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100c:	2110      	movs	r1, #16
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2280      	movs	r2, #128	@ 0x80
 8001012:	0152      	lsls	r2, r2, #5
 8001014:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001016:	187a      	adds	r2, r7, r1
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_TIM2_Init+0xa4>)
 800101a:	0011      	movs	r1, r2
 800101c:	0018      	movs	r0, r3
 800101e:	f003 ffa9 	bl	8004f74 <HAL_TIM_ConfigClockSource>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d001      	beq.n	800102a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001026:	f7ff fceb 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001036:	1d3a      	adds	r2, r7, #4
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_TIM2_Init+0xa4>)
 800103a:	0011      	movs	r1, r2
 800103c:	0018      	movs	r0, r3
 800103e:	f004 fd0d 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d001      	beq.n	800104a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001046:	f7ff fcdb 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b008      	add	sp, #32
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	200002a0 	.word	0x200002a0

08001058 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b095      	sub	sp, #84	@ 0x54
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	233c      	movs	r3, #60	@ 0x3c
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	0018      	movs	r0, r3
 8001066:	2314      	movs	r3, #20
 8001068:	001a      	movs	r2, r3
 800106a:	2100      	movs	r1, #0
 800106c:	f004 fec6 	bl	8005dfc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	2414      	movs	r4, #20
 8001072:	193b      	adds	r3, r7, r4
 8001074:	0018      	movs	r0, r3
 8001076:	2328      	movs	r3, #40	@ 0x28
 8001078:	001a      	movs	r2, r3
 800107a:	2100      	movs	r1, #0
 800107c:	f004 febe 	bl	8005dfc <memset>
  if(tim_baseHandle->Instance==TIM1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a31      	ldr	r2, [pc, #196]	@ (800114c <HAL_TIM_Base_MspInit+0xf4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d149      	bne.n	800111e <HAL_TIM_Base_MspInit+0xc6>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2280      	movs	r2, #128	@ 0x80
 800108e:	0392      	lsls	r2, r2, #14
 8001090:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 8001092:	193b      	adds	r3, r7, r4
 8001094:	2280      	movs	r2, #128	@ 0x80
 8001096:	03d2      	lsls	r2, r2, #15
 8001098:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109a:	193b      	adds	r3, r7, r4
 800109c:	0018      	movs	r0, r3
 800109e:	f002 fbb5 	bl	800380c <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d001      	beq.n	80010aa <HAL_TIM_Base_MspInit+0x52>
    {
      Error_Handler();
 80010a6:	f7ff fcab 	bl	8000a00 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010aa:	4b29      	ldr	r3, [pc, #164]	@ (8001150 <HAL_TIM_Base_MspInit+0xf8>)
 80010ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010ae:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <HAL_TIM_Base_MspInit+0xf8>)
 80010b0:	2180      	movs	r1, #128	@ 0x80
 80010b2:	0109      	lsls	r1, r1, #4
 80010b4:	430a      	orrs	r2, r1
 80010b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80010b8:	4b25      	ldr	r3, [pc, #148]	@ (8001150 <HAL_TIM_Base_MspInit+0xf8>)
 80010ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010bc:	2380      	movs	r3, #128	@ 0x80
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <HAL_TIM_Base_MspInit+0xf8>)
 80010c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_TIM_Base_MspInit+0xf8>)
 80010cc:	2102      	movs	r1, #2
 80010ce:	430a      	orrs	r2, r1
 80010d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <HAL_TIM_Base_MspInit+0xf8>)
 80010d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010d6:	2202      	movs	r2, #2
 80010d8:	4013      	ands	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010de:	213c      	movs	r1, #60	@ 0x3c
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	0152      	lsls	r2, r2, #5
 80010e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2212      	movs	r2, #18
 80010ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2201      	movs	r2, #1
 80010f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2202      	movs	r2, #2
 80010fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	187b      	adds	r3, r7, r1
 8001102:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <HAL_TIM_Base_MspInit+0xfc>)
 8001104:	0019      	movs	r1, r3
 8001106:	0010      	movs	r0, r2
 8001108:	f001 fcd6 	bl	8002ab8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	200e      	movs	r0, #14
 8001112:	f001 f9e3 	bl	80024dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001116:	200e      	movs	r0, #14
 8001118:	f001 f9f5 	bl	8002506 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800111c:	e011      	b.n	8001142 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	2380      	movs	r3, #128	@ 0x80
 8001124:	05db      	lsls	r3, r3, #23
 8001126:	429a      	cmp	r2, r3
 8001128:	d10b      	bne.n	8001142 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112a:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <HAL_TIM_Base_MspInit+0xf8>)
 800112c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_TIM_Base_MspInit+0xf8>)
 8001130:	2101      	movs	r1, #1
 8001132:	430a      	orrs	r2, r1
 8001134:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_TIM_Base_MspInit+0xf8>)
 8001138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800113a:	2201      	movs	r2, #1
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b015      	add	sp, #84	@ 0x54
 8001148:	bd90      	pop	{r4, r7, pc}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	40012c00 	.word	0x40012c00
 8001150:	40021000 	.word	0x40021000
 8001154:	50000400 	.word	0x50000400

08001158 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b08b      	sub	sp, #44	@ 0x2c
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	2414      	movs	r4, #20
 8001162:	193b      	adds	r3, r7, r4
 8001164:	0018      	movs	r0, r3
 8001166:	2314      	movs	r3, #20
 8001168:	001a      	movs	r2, r3
 800116a:	2100      	movs	r1, #0
 800116c:	f004 fe46 	bl	8005dfc <memset>
  if(timHandle->Instance==TIM1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a26      	ldr	r2, [pc, #152]	@ (8001210 <HAL_TIM_MspPostInit+0xb8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d145      	bne.n	8001206 <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <HAL_TIM_MspPostInit+0xbc>)
 800117c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800117e:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <HAL_TIM_MspPostInit+0xbc>)
 8001180:	2102      	movs	r1, #2
 8001182:	430a      	orrs	r2, r1
 8001184:	635a      	str	r2, [r3, #52]	@ 0x34
 8001186:	4b23      	ldr	r3, [pc, #140]	@ (8001214 <HAL_TIM_MspPostInit+0xbc>)
 8001188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800118a:	2202      	movs	r2, #2
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <HAL_TIM_MspPostInit+0xbc>)
 8001194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001196:	4b1f      	ldr	r3, [pc, #124]	@ (8001214 <HAL_TIM_MspPostInit+0xbc>)
 8001198:	2101      	movs	r1, #1
 800119a:	430a      	orrs	r2, r1
 800119c:	635a      	str	r2, [r3, #52]	@ 0x34
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <HAL_TIM_MspPostInit+0xbc>)
 80011a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011a2:	2201      	movs	r2, #1
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011aa:	193b      	adds	r3, r7, r4
 80011ac:	22e0      	movs	r2, #224	@ 0xe0
 80011ae:	0212      	lsls	r2, r2, #8
 80011b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	2202      	movs	r2, #2
 80011b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	2202      	movs	r2, #2
 80011c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <HAL_TIM_MspPostInit+0xc0>)
 80011ce:	0019      	movs	r1, r3
 80011d0:	0010      	movs	r0, r2
 80011d2:	f001 fc71 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80011d6:	0021      	movs	r1, r4
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	22e0      	movs	r2, #224	@ 0xe0
 80011dc:	00d2      	lsls	r2, r2, #3
 80011de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	2202      	movs	r2, #2
 80011e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2202      	movs	r2, #2
 80011f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	187a      	adds	r2, r7, r1
 80011fa:	23a0      	movs	r3, #160	@ 0xa0
 80011fc:	05db      	lsls	r3, r3, #23
 80011fe:	0011      	movs	r1, r2
 8001200:	0018      	movs	r0, r3
 8001202:	f001 fc59 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b00b      	add	sp, #44	@ 0x2c
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	40012c00 	.word	0x40012c00
 8001214:	40021000 	.word	0x40021000
 8001218:	50000400 	.word	0x50000400

0800121c <HAL_TIM_OC_DelayElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a07      	ldr	r2, [pc, #28]	@ (8001248 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d108      	bne.n	8001240 <HAL_TIM_OC_DelayElapsedCallback+0x24>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7f1b      	ldrb	r3, [r3, #28]
 8001232:	2b08      	cmp	r3, #8
 8001234:	d104      	bne.n	8001240 <HAL_TIM_OC_DelayElapsedCallback+0x24>

        //if ((TIM1->CR1 & TIM_CR1_DIR) == 0) {      // DIR=0 = comptage montant
            tps1=TIM2->CNT;       // set HIGH instantanément
 8001236:	2380      	movs	r3, #128	@ 0x80
 8001238:	05db      	lsls	r3, r3, #23
 800123a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 800123e:	601a      	str	r2, [r3, #0]
        //}
    }
}
 8001240:	46c0      	nop			@ (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b002      	add	sp, #8
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40012c00 	.word	0x40012c00
 800124c:	20000130 	.word	0x20000130

08001250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001250:	480d      	ldr	r0, [pc, #52]	@ (8001288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001252:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001254:	f7ff fd8a 	bl	8000d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <LoopForever+0x6>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	@ (8001290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <LoopForever+0xe>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	@ (800129c <LoopForever+0x16>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800127e:	f004 fdc5 	bl	8005e0c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001282:	f7ff fb05 	bl	8000890 <main>

08001286 <LoopForever>:

LoopForever:
  b LoopForever
 8001286:	e7fe      	b.n	8001286 <LoopForever>
  ldr   r0, =_estack
 8001288:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001294:	08005f08 	.word	0x08005f08
  ldr r2, =_sbss
 8001298:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800129c:	200002f0 	.word	0x200002f0

080012a0 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_Init+0x3c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <HAL_Init+0x3c>)
 80012b6:	2180      	movs	r1, #128	@ 0x80
 80012b8:	0049      	lsls	r1, r1, #1
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012be:	2003      	movs	r0, #3
 80012c0:	f000 f810 	bl	80012e4 <HAL_InitTick>
 80012c4:	1e03      	subs	r3, r0, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80012c8:	1dfb      	adds	r3, r7, #7
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	e001      	b.n	80012d4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff fcc2 	bl	8000c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	781b      	ldrb	r3, [r3, #0]
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40022000 	.word	0x40022000

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012ec:	230f      	movs	r3, #15
 80012ee:	18fb      	adds	r3, r7, r3
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80012f4:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <HAL_InitTick+0x88>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d02b      	beq.n	8001354 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <HAL_InitTick+0x8c>)
 80012fe:	681c      	ldr	r4, [r3, #0]
 8001300:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <HAL_InitTick+0x88>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	0019      	movs	r1, r3
 8001306:	23fa      	movs	r3, #250	@ 0xfa
 8001308:	0098      	lsls	r0, r3, #2
 800130a:	f7fe fefb 	bl	8000104 <__udivsi3>
 800130e:	0003      	movs	r3, r0
 8001310:	0019      	movs	r1, r3
 8001312:	0020      	movs	r0, r4
 8001314:	f7fe fef6 	bl	8000104 <__udivsi3>
 8001318:	0003      	movs	r3, r0
 800131a:	0018      	movs	r0, r3
 800131c:	f001 f903 	bl	8002526 <HAL_SYSTICK_Config>
 8001320:	1e03      	subs	r3, r0, #0
 8001322:	d112      	bne.n	800134a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d80a      	bhi.n	8001340 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	2301      	movs	r3, #1
 800132e:	425b      	negs	r3, r3
 8001330:	2200      	movs	r2, #0
 8001332:	0018      	movs	r0, r3
 8001334:	f001 f8d2 	bl	80024dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <HAL_InitTick+0x90>)
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	e00d      	b.n	800135c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001340:	230f      	movs	r3, #15
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	e008      	b.n	800135c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800134a:	230f      	movs	r3, #15
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e003      	b.n	800135c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001354:	230f      	movs	r3, #15
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800135c:	230f      	movs	r3, #15
 800135e:	18fb      	adds	r3, r7, r3
 8001360:	781b      	ldrb	r3, [r3, #0]
}
 8001362:	0018      	movs	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	b005      	add	sp, #20
 8001368:	bd90      	pop	{r4, r7, pc}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	20000008 	.word	0x20000008
 8001370:	20000000 	.word	0x20000000
 8001374:	20000004 	.word	0x20000004

08001378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <HAL_IncTick+0x1c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	001a      	movs	r2, r3
 8001382:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <HAL_IncTick+0x20>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	18d2      	adds	r2, r2, r3
 8001388:	4b03      	ldr	r3, [pc, #12]	@ (8001398 <HAL_IncTick+0x20>)
 800138a:	601a      	str	r2, [r3, #0]
}
 800138c:	46c0      	nop			@ (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	20000008 	.word	0x20000008
 8001398:	200002ec 	.word	0x200002ec

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b02      	ldr	r3, [pc, #8]	@ (80013ac <HAL_GetTick+0x10>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	200002ec 	.word	0x200002ec

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff fff0 	bl	800139c <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3301      	adds	r3, #1
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <HAL_Delay+0x44>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	001a      	movs	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	189b      	adds	r3, r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	f7ff ffe0 	bl	800139c <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	46c0      	nop			@ (mov r8, r8)
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b004      	add	sp, #16
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	20000008 	.word	0x20000008

080013f8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001408:	401a      	ands	r2, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	601a      	str	r2, [r3, #0]
}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b002      	add	sp, #8
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	fe3fffff 	.word	0xfe3fffff

08001420 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	23e0      	movs	r3, #224	@ 0xe0
 800142e:	045b      	lsls	r3, r3, #17
 8001430:	4013      	ands	r3, r2
}
 8001432:	0018      	movs	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}

0800143a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b084      	sub	sp, #16
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	2104      	movs	r1, #4
 800144e:	400a      	ands	r2, r1
 8001450:	2107      	movs	r1, #7
 8001452:	4091      	lsls	r1, r2
 8001454:	000a      	movs	r2, r1
 8001456:	43d2      	mvns	r2, r2
 8001458:	401a      	ands	r2, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2104      	movs	r1, #4
 800145e:	400b      	ands	r3, r1
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	4099      	lsls	r1, r3
 8001464:	000b      	movs	r3, r1
 8001466:	431a      	orrs	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800146c:	46c0      	nop			@ (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b004      	add	sp, #16
 8001472:	bd80      	pop	{r7, pc}

08001474 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	2104      	movs	r1, #4
 8001486:	400a      	ands	r2, r1
 8001488:	2107      	movs	r1, #7
 800148a:	4091      	lsls	r1, r2
 800148c:	000a      	movs	r2, r1
 800148e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2104      	movs	r1, #4
 8001494:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001496:	40da      	lsrs	r2, r3
 8001498:	0013      	movs	r3, r2
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	23c0      	movs	r3, #192	@ 0xc0
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	4013      	ands	r3, r2
 80014b4:	d101      	bne.n	80014ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b002      	add	sp, #8
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	211f      	movs	r1, #31
 80014d8:	400a      	ands	r2, r1
 80014da:	210f      	movs	r1, #15
 80014dc:	4091      	lsls	r1, r2
 80014de:	000a      	movs	r2, r1
 80014e0:	43d2      	mvns	r2, r2
 80014e2:	401a      	ands	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	0e9b      	lsrs	r3, r3, #26
 80014e8:	210f      	movs	r1, #15
 80014ea:	4019      	ands	r1, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	201f      	movs	r0, #31
 80014f0:	4003      	ands	r3, r0
 80014f2:	4099      	lsls	r1, r3
 80014f4:	000b      	movs	r3, r1
 80014f6:	431a      	orrs	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014fc:	46c0      	nop			@ (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b004      	add	sp, #16
 8001502:	bd80      	pop	{r7, pc}

08001504 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	035b      	lsls	r3, r3, #13
 8001516:	0b5b      	lsrs	r3, r3, #13
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b002      	add	sp, #8
 8001524:	bd80      	pop	{r7, pc}

08001526 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	0352      	lsls	r2, r2, #13
 8001538:	0b52      	lsrs	r2, r2, #13
 800153a:	43d2      	mvns	r2, r2
 800153c:	401a      	ands	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	b002      	add	sp, #8
 8001548:	bd80      	pop	{r7, pc}

0800154a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2203      	movs	r2, #3
 8001558:	4013      	ands	r3, r2
}
 800155a:	0018      	movs	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	b002      	add	sp, #8
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	0212      	lsls	r2, r2, #8
 8001578:	43d2      	mvns	r2, r2
 800157a:	401a      	ands	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	400b      	ands	r3, r1
 8001584:	4904      	ldr	r1, [pc, #16]	@ (8001598 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001586:	400b      	ands	r3, r1
 8001588:	431a      	orrs	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800158e:	46c0      	nop			@ (mov r8, r8)
 8001590:	46bd      	mov	sp, r7
 8001592:	b004      	add	sp, #16
 8001594:	bd80      	pop	{r7, pc}
 8001596:	46c0      	nop			@ (mov r8, r8)
 8001598:	07ffff00 	.word	0x07ffff00

0800159c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4a05      	ldr	r2, [pc, #20]	@ (80015c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	2280      	movs	r2, #128	@ 0x80
 80015ae:	0552      	lsls	r2, r2, #21
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b002      	add	sp, #8
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			@ (mov r8, r8)
 80015c0:	6fffffe8 	.word	0x6fffffe8

080015c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	055b      	lsls	r3, r3, #21
 80015d4:	401a      	ands	r2, r3
 80015d6:	2380      	movs	r3, #128	@ 0x80
 80015d8:	055b      	lsls	r3, r3, #21
 80015da:	429a      	cmp	r2, r3
 80015dc:	d101      	bne.n	80015e2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}

080015ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a04      	ldr	r2, [pc, #16]	@ (800160c <LL_ADC_Enable+0x20>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	2201      	movs	r2, #1
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001604:	46c0      	nop			@ (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b002      	add	sp, #8
 800160a:	bd80      	pop	{r7, pc}
 800160c:	7fffffe8 	.word	0x7fffffe8

08001610 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <LL_ADC_Disable+0x20>)
 800161e:	4013      	ands	r3, r2
 8001620:	2202      	movs	r2, #2
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001628:	46c0      	nop			@ (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b002      	add	sp, #8
 800162e:	bd80      	pop	{r7, pc}
 8001630:	7fffffe8 	.word	0x7fffffe8

08001634 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2201      	movs	r2, #1
 8001642:	4013      	ands	r3, r2
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <LL_ADC_IsEnabled+0x18>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <LL_ADC_IsEnabled+0x1a>
 800164c:	2300      	movs	r3, #0
}
 800164e:	0018      	movs	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	b002      	add	sp, #8
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <LL_ADC_REG_StartConversion+0x20>)
 8001666:	4013      	ands	r3, r2
 8001668:	2204      	movs	r2, #4
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001670:	46c0      	nop			@ (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b002      	add	sp, #8
 8001676:	bd80      	pop	{r7, pc}
 8001678:	7fffffe8 	.word	0x7fffffe8

0800167c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2204      	movs	r2, #4
 800168a:	4013      	ands	r3, r2
 800168c:	2b04      	cmp	r3, #4
 800168e:	d101      	bne.n	8001694 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001694:	2300      	movs	r3, #0
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a8:	231f      	movs	r3, #31
 80016aa:	18fb      	adds	r3, r7, r3
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e17f      	b.n	80019c6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10a      	bne.n	80016e4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7fe ff4d 	bl	8000570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2254      	movs	r2, #84	@ 0x54
 80016e0:	2100      	movs	r1, #0
 80016e2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	0018      	movs	r0, r3
 80016ea:	f7ff ff6b 	bl	80015c4 <LL_ADC_IsInternalRegulatorEnabled>
 80016ee:	1e03      	subs	r3, r0, #0
 80016f0:	d115      	bne.n	800171e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	0018      	movs	r0, r3
 80016f8:	f7ff ff50 	bl	800159c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016fc:	4bb4      	ldr	r3, [pc, #720]	@ (80019d0 <HAL_ADC_Init+0x330>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	49b4      	ldr	r1, [pc, #720]	@ (80019d4 <HAL_ADC_Init+0x334>)
 8001702:	0018      	movs	r0, r3
 8001704:	f7fe fcfe 	bl	8000104 <__udivsi3>
 8001708:	0003      	movs	r3, r0
 800170a:	3301      	adds	r3, #1
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001710:	e002      	b.n	8001718 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3b01      	subs	r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f9      	bne.n	8001712 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0018      	movs	r0, r3
 8001724:	f7ff ff4e 	bl	80015c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001728:	1e03      	subs	r3, r0, #0
 800172a:	d10f      	bne.n	800174c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001730:	2210      	movs	r2, #16
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173c:	2201      	movs	r2, #1
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001744:	231f      	movs	r3, #31
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff ff93 	bl	800167c <LL_ADC_REG_IsConversionOngoing>
 8001756:	0003      	movs	r3, r0
 8001758:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175e:	2210      	movs	r2, #16
 8001760:	4013      	ands	r3, r2
 8001762:	d000      	beq.n	8001766 <HAL_ADC_Init+0xc6>
 8001764:	e122      	b.n	80019ac <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d000      	beq.n	800176e <HAL_ADC_Init+0xce>
 800176c:	e11e      	b.n	80019ac <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001772:	4a99      	ldr	r2, [pc, #612]	@ (80019d8 <HAL_ADC_Init+0x338>)
 8001774:	4013      	ands	r3, r2
 8001776:	2202      	movs	r2, #2
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	0018      	movs	r0, r3
 8001784:	f7ff ff56 	bl	8001634 <LL_ADC_IsEnabled>
 8001788:	1e03      	subs	r3, r0, #0
 800178a:	d000      	beq.n	800178e <HAL_ADC_Init+0xee>
 800178c:	e0ad      	b.n	80018ea <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7e1b      	ldrb	r3, [r3, #24]
 8001796:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001798:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7e5b      	ldrb	r3, [r3, #25]
 800179e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80017a0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7e9b      	ldrb	r3, [r3, #26]
 80017a6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80017a8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <HAL_ADC_Init+0x118>
 80017b2:	2380      	movs	r3, #128	@ 0x80
 80017b4:	015b      	lsls	r3, r3, #5
 80017b6:	e000      	b.n	80017ba <HAL_ADC_Init+0x11a>
 80017b8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80017ba:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80017c0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	da04      	bge.n	80017d4 <HAL_ADC_Init+0x134>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	e001      	b.n	80017d8 <HAL_ADC_Init+0x138>
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80017d8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	212c      	movs	r1, #44	@ 0x2c
 80017de:	5c5b      	ldrb	r3, [r3, r1]
 80017e0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80017e2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2220      	movs	r2, #32
 80017ee:	5c9b      	ldrb	r3, [r3, r2]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d115      	bne.n	8001820 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7e9b      	ldrb	r3, [r3, #26]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2280      	movs	r2, #128	@ 0x80
 8001800:	0252      	lsls	r2, r2, #9
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	e00b      	b.n	8001820 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180c:	2220      	movs	r2, #32
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001818:	2201      	movs	r2, #1
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00a      	beq.n	800183e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800182c:	23e0      	movs	r3, #224	@ 0xe0
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001836:	4313      	orrs	r3, r2
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4a65      	ldr	r2, [pc, #404]	@ (80019dc <HAL_ADC_Init+0x33c>)
 8001846:	4013      	ands	r3, r2
 8001848:	0019      	movs	r1, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	430a      	orrs	r2, r1
 8001852:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	0f9b      	lsrs	r3, r3, #30
 800185a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001860:	4313      	orrs	r3, r2
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4313      	orrs	r3, r2
 8001866:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	223c      	movs	r2, #60	@ 0x3c
 800186c:	5c9b      	ldrb	r3, [r3, r2]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d111      	bne.n	8001896 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	0f9b      	lsrs	r3, r3, #30
 8001878:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800187e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001884:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800188a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	4313      	orrs	r3, r2
 8001890:	2201      	movs	r2, #1
 8001892:	4313      	orrs	r3, r2
 8001894:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	4a50      	ldr	r2, [pc, #320]	@ (80019e0 <HAL_ADC_Init+0x340>)
 800189e:	4013      	ands	r3, r2
 80018a0:	0019      	movs	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	23c0      	movs	r3, #192	@ 0xc0
 80018b2:	061b      	lsls	r3, r3, #24
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d018      	beq.n	80018ea <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80018bc:	2380      	movs	r3, #128	@ 0x80
 80018be:	05db      	lsls	r3, r3, #23
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d012      	beq.n	80018ea <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80018c8:	2380      	movs	r3, #128	@ 0x80
 80018ca:	061b      	lsls	r3, r3, #24
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d00c      	beq.n	80018ea <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80018d0:	4b44      	ldr	r3, [pc, #272]	@ (80019e4 <HAL_ADC_Init+0x344>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a44      	ldr	r2, [pc, #272]	@ (80019e8 <HAL_ADC_Init+0x348>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	0019      	movs	r1, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	23f0      	movs	r3, #240	@ 0xf0
 80018e0:	039b      	lsls	r3, r3, #14
 80018e2:	401a      	ands	r2, r3
 80018e4:	4b3f      	ldr	r3, [pc, #252]	@ (80019e4 <HAL_ADC_Init+0x344>)
 80018e6:	430a      	orrs	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018f2:	001a      	movs	r2, r3
 80018f4:	2100      	movs	r1, #0
 80018f6:	f7ff fda0 	bl	800143a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001902:	493a      	ldr	r1, [pc, #232]	@ (80019ec <HAL_ADC_Init+0x34c>)
 8001904:	001a      	movs	r2, r3
 8001906:	f7ff fd98 	bl	800143a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2110      	movs	r1, #16
 800191e:	4249      	negs	r1, r1
 8001920:	430a      	orrs	r2, r1
 8001922:	629a      	str	r2, [r3, #40]	@ 0x28
 8001924:	e018      	b.n	8001958 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	2380      	movs	r3, #128	@ 0x80
 800192c:	039b      	lsls	r3, r3, #14
 800192e:	429a      	cmp	r2, r3
 8001930:	d112      	bne.n	8001958 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	3b01      	subs	r3, #1
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	221c      	movs	r2, #28
 8001942:	4013      	ands	r3, r2
 8001944:	2210      	movs	r2, #16
 8001946:	4252      	negs	r2, r2
 8001948:	409a      	lsls	r2, r3
 800194a:	0011      	movs	r1, r2
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2100      	movs	r1, #0
 800195e:	0018      	movs	r0, r3
 8001960:	f7ff fd88 	bl	8001474 <LL_ADC_GetSamplingTimeCommonChannels>
 8001964:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800196a:	429a      	cmp	r2, r3
 800196c:	d10b      	bne.n	8001986 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001978:	2203      	movs	r2, #3
 800197a:	4393      	bics	r3, r2
 800197c:	2201      	movs	r2, #1
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001984:	e01c      	b.n	80019c0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198a:	2212      	movs	r2, #18
 800198c:	4393      	bics	r3, r2
 800198e:	2210      	movs	r2, #16
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800199a:	2201      	movs	r2, #1
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80019a2:	231f      	movs	r3, #31
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019aa:	e009      	b.n	80019c0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b0:	2210      	movs	r2, #16
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019b8:	231f      	movs	r3, #31
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80019c0:	231f      	movs	r3, #31
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	781b      	ldrb	r3, [r3, #0]
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b008      	add	sp, #32
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	20000000 	.word	0x20000000
 80019d4:	00030d40 	.word	0x00030d40
 80019d8:	fffffefd 	.word	0xfffffefd
 80019dc:	ffde0201 	.word	0xffde0201
 80019e0:	1ffffc02 	.word	0x1ffffc02
 80019e4:	40012708 	.word	0x40012708
 80019e8:	ffc3ffff 	.word	0xffc3ffff
 80019ec:	07ffff04 	.word	0x07ffff04

080019f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff fe3b 	bl	800167c <LL_ADC_REG_IsConversionOngoing>
 8001a06:	1e03      	subs	r3, r0, #0
 8001a08:	d16c      	bne.n	8001ae4 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2254      	movs	r2, #84	@ 0x54
 8001a0e:	5c9b      	ldrb	r3, [r3, r2]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_Start_DMA+0x28>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e06c      	b.n	8001af2 <HAL_ADC_Start_DMA+0x102>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2254      	movs	r2, #84	@ 0x54
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d113      	bne.n	8001a54 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff fdff 	bl	8001634 <LL_ADC_IsEnabled>
 8001a36:	1e03      	subs	r3, r0, #0
 8001a38:	d004      	beq.n	8001a44 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f7ff fde6 	bl	8001610 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2101      	movs	r1, #1
 8001a50:	430a      	orrs	r2, r1
 8001a52:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a54:	2517      	movs	r5, #23
 8001a56:	197c      	adds	r4, r7, r5
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 fb5e 	bl	800211c <ADC_Enable>
 8001a60:	0003      	movs	r3, r0
 8001a62:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a64:	002c      	movs	r4, r5
 8001a66:	193b      	adds	r3, r7, r4
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d13e      	bne.n	8001aec <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a72:	4a22      	ldr	r2, [pc, #136]	@ (8001afc <HAL_ADC_Start_DMA+0x10c>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	2280      	movs	r2, #128	@ 0x80
 8001a78:	0052      	lsls	r2, r2, #1
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001b00 <HAL_ADC_Start_DMA+0x110>)
 8001a8c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a92:	4a1c      	ldr	r2, [pc, #112]	@ (8001b04 <HAL_ADC_Start_DMA+0x114>)
 8001a94:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001b08 <HAL_ADC_Start_DMA+0x118>)
 8001a9c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	221c      	movs	r2, #28
 8001aa4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2254      	movs	r2, #84	@ 0x54
 8001aaa:	2100      	movs	r1, #0
 8001aac:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2110      	movs	r1, #16
 8001aba:	430a      	orrs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3340      	adds	r3, #64	@ 0x40
 8001ac8:	0019      	movs	r1, r3
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	193c      	adds	r4, r7, r4
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f000 fdc0 	bl	8002654 <HAL_DMA_Start_IT>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7ff fdbb 	bl	8001658 <LL_ADC_REG_StartConversion>
 8001ae2:	e003      	b.n	8001aec <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ae4:	2317      	movs	r3, #23
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	2202      	movs	r2, #2
 8001aea:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001aec:	2317      	movs	r3, #23
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	781b      	ldrb	r3, [r3, #0]
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b006      	add	sp, #24
 8001af8:	bdb0      	pop	{r4, r5, r7, pc}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	fffff0fe 	.word	0xfffff0fe
 8001b00:	08002229 	.word	0x08002229
 8001b04:	080022f1 	.word	0x080022f1
 8001b08:	0800230f 	.word	0x0800230f

08001b0c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d017      	beq.n	8001b60 <HAL_ADC_IRQHandler+0x54>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2202      	movs	r2, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	d013      	beq.n	8001b60 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d106      	bne.n	8001b50 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b46:	2280      	movs	r2, #128	@ 0x80
 8001b48:	0112      	lsls	r2, r2, #4
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	0018      	movs	r0, r3
 8001b54:	f000 fc06 	bl	8002364 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	2204      	movs	r2, #4
 8001b64:	4013      	ands	r3, r2
 8001b66:	d003      	beq.n	8001b70 <HAL_ADC_IRQHandler+0x64>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d107      	bne.n	8001b80 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2208      	movs	r2, #8
 8001b74:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b76:	d04d      	beq.n	8001c14 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d049      	beq.n	8001c14 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b84:	2210      	movs	r2, #16
 8001b86:	4013      	ands	r3, r2
 8001b88:	d106      	bne.n	8001b98 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8e:	2280      	movs	r2, #128	@ 0x80
 8001b90:	0092      	lsls	r2, r2, #2
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff fc80 	bl	80014a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ba2:	1e03      	subs	r3, r0, #0
 8001ba4:	d02e      	beq.n	8001c04 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7e9b      	ldrb	r3, [r3, #26]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d12a      	bne.n	8001c04 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d123      	bne.n	8001c04 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff fd5b 	bl	800167c <LL_ADC_REG_IsConversionOngoing>
 8001bc6:	1e03      	subs	r3, r0, #0
 8001bc8:	d110      	bne.n	8001bec <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	210c      	movs	r1, #12
 8001bd6:	438a      	bics	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bde:	4a56      	ldr	r2, [pc, #344]	@ (8001d38 <HAL_ADC_IRQHandler+0x22c>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	2201      	movs	r2, #1
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bea:	e00b      	b.n	8001c04 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7fe fd4a 	bl	80006a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	220c      	movs	r2, #12
 8001c12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	2280      	movs	r2, #128	@ 0x80
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d012      	beq.n	8001c42 <HAL_ADC_IRQHandler+0x136>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2280      	movs	r2, #128	@ 0x80
 8001c20:	4013      	ands	r3, r2
 8001c22:	d00e      	beq.n	8001c42 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c28:	2280      	movs	r2, #128	@ 0x80
 8001c2a:	0252      	lsls	r2, r2, #9
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	0018      	movs	r0, r3
 8001c36:	f000 f889 	bl	8001d4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2280      	movs	r2, #128	@ 0x80
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	2380      	movs	r3, #128	@ 0x80
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d014      	beq.n	8001c76 <HAL_ADC_IRQHandler+0x16a>
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	2380      	movs	r3, #128	@ 0x80
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	d00f      	beq.n	8001c76 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5a:	2280      	movs	r2, #128	@ 0x80
 8001c5c:	0292      	lsls	r2, r2, #10
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 fb6c 	bl	8002344 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2280      	movs	r2, #128	@ 0x80
 8001c72:	0052      	lsls	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	2380      	movs	r3, #128	@ 0x80
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d014      	beq.n	8001caa <HAL_ADC_IRQHandler+0x19e>
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	2380      	movs	r3, #128	@ 0x80
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4013      	ands	r3, r2
 8001c88:	d00f      	beq.n	8001caa <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8e:	2280      	movs	r2, #128	@ 0x80
 8001c90:	02d2      	lsls	r2, r2, #11
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f000 fb5a 	bl	8002354 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2280      	movs	r2, #128	@ 0x80
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2210      	movs	r2, #16
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d02b      	beq.n	8001d0a <HAL_ADC_IRQHandler+0x1fe>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d027      	beq.n	8001d0a <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e008      	b.n	8001cda <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f7ff fc3c 	bl	800154a <LL_ADC_REG_GetDMATransfer>
 8001cd2:	1e03      	subs	r3, r0, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d110      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce4:	2280      	movs	r2, #128	@ 0x80
 8001ce6:	00d2      	lsls	r2, r2, #3
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f000 f82d 	bl	8001d5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2210      	movs	r2, #16
 8001d08:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	2380      	movs	r3, #128	@ 0x80
 8001d0e:	019b      	lsls	r3, r3, #6
 8001d10:	4013      	ands	r3, r2
 8001d12:	d00d      	beq.n	8001d30 <HAL_ADC_IRQHandler+0x224>
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	2380      	movs	r3, #128	@ 0x80
 8001d18:	019b      	lsls	r3, r3, #6
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d008      	beq.n	8001d30 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 fb27 	bl	8002374 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2280      	movs	r2, #128	@ 0x80
 8001d2c:	0192      	lsls	r2, r2, #6
 8001d2e:	601a      	str	r2, [r3, #0]
  }
}
 8001d30:	46c0      	nop			@ (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b006      	add	sp, #24
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	fffffefe 	.word	0xfffffefe

08001d3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d44:	46c0      	nop			@ (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d54:	46c0      	nop			@ (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d64:	46c0      	nop			@ (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d76:	2317      	movs	r3, #23
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2254      	movs	r2, #84	@ 0x54
 8001d86:	5c9b      	ldrb	r3, [r3, r2]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x24>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e1c0      	b.n	8002112 <HAL_ADC_ConfigChannel+0x3a6>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2254      	movs	r2, #84	@ 0x54
 8001d94:	2101      	movs	r1, #1
 8001d96:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f7ff fc6d 	bl	800167c <LL_ADC_REG_IsConversionOngoing>
 8001da2:	1e03      	subs	r3, r0, #0
 8001da4:	d000      	beq.n	8001da8 <HAL_ADC_ConfigChannel+0x3c>
 8001da6:	e1a3      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d100      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x46>
 8001db0:	e143      	b.n	800203a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	2380      	movs	r3, #128	@ 0x80
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d004      	beq.n	8001dc8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dc2:	4ac1      	ldr	r2, [pc, #772]	@ (80020c8 <HAL_ADC_ConfigChannel+0x35c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d108      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	0010      	movs	r0, r2
 8001dd4:	f7ff fb96 	bl	8001504 <LL_ADC_REG_SetSequencerChAdd>
 8001dd8:	e0c9      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	211f      	movs	r1, #31
 8001de4:	400b      	ands	r3, r1
 8001de6:	210f      	movs	r1, #15
 8001de8:	4099      	lsls	r1, r3
 8001dea:	000b      	movs	r3, r1
 8001dec:	43db      	mvns	r3, r3
 8001dee:	4013      	ands	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	035b      	lsls	r3, r3, #13
 8001df8:	0b5b      	lsrs	r3, r3, #13
 8001dfa:	d105      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x9c>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	0e9b      	lsrs	r3, r3, #26
 8001e02:	221f      	movs	r2, #31
 8001e04:	4013      	ands	r3, r2
 8001e06:	e098      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d000      	beq.n	8001e14 <HAL_ADC_ConfigChannel+0xa8>
 8001e12:	e091      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x1cc>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d000      	beq.n	8001e20 <HAL_ADC_ConfigChannel+0xb4>
 8001e1e:	e089      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x1c8>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2204      	movs	r2, #4
 8001e26:	4013      	ands	r3, r2
 8001e28:	d000      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xc0>
 8001e2a:	e081      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x1c4>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2208      	movs	r2, #8
 8001e32:	4013      	ands	r3, r2
 8001e34:	d000      	beq.n	8001e38 <HAL_ADC_ConfigChannel+0xcc>
 8001e36:	e079      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x1c0>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2210      	movs	r2, #16
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d000      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0xd8>
 8001e42:	e071      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x1bc>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d000      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0xe4>
 8001e4e:	e069      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x1b8>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2240      	movs	r2, #64	@ 0x40
 8001e56:	4013      	ands	r3, r2
 8001e58:	d000      	beq.n	8001e5c <HAL_ADC_ConfigChannel+0xf0>
 8001e5a:	e061      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x1b4>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2280      	movs	r2, #128	@ 0x80
 8001e62:	4013      	ands	r3, r2
 8001e64:	d000      	beq.n	8001e68 <HAL_ADC_ConfigChannel+0xfc>
 8001e66:	e059      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x1b0>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	d151      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x1ac>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d149      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1a8>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2380      	movs	r3, #128	@ 0x80
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d141      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1a4>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	@ 0x80
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	4013      	ands	r3, r2
 8001e96:	d139      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x1a0>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2380      	movs	r3, #128	@ 0x80
 8001e9e:	015b      	lsls	r3, r3, #5
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d131      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x19c>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	019b      	lsls	r3, r3, #6
 8001eac:	4013      	ands	r3, r2
 8001eae:	d129      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x198>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	01db      	lsls	r3, r3, #7
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d121      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x194>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d119      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x190>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	025b      	lsls	r3, r3, #9
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d111      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x18c>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	029b      	lsls	r3, r3, #10
 8001edc:	4013      	ands	r3, r2
 8001ede:	d109      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x188>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	02db      	lsls	r3, r3, #11
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d001      	beq.n	8001ef0 <HAL_ADC_ConfigChannel+0x184>
 8001eec:	2312      	movs	r3, #18
 8001eee:	e024      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e022      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001ef4:	2311      	movs	r3, #17
 8001ef6:	e020      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001ef8:	2310      	movs	r3, #16
 8001efa:	e01e      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001efc:	230f      	movs	r3, #15
 8001efe:	e01c      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f00:	230e      	movs	r3, #14
 8001f02:	e01a      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f04:	230d      	movs	r3, #13
 8001f06:	e018      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f08:	230c      	movs	r3, #12
 8001f0a:	e016      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f0c:	230b      	movs	r3, #11
 8001f0e:	e014      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f10:	230a      	movs	r3, #10
 8001f12:	e012      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f14:	2309      	movs	r3, #9
 8001f16:	e010      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f18:	2308      	movs	r3, #8
 8001f1a:	e00e      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	e00c      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f20:	2306      	movs	r3, #6
 8001f22:	e00a      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f24:	2305      	movs	r3, #5
 8001f26:	e008      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f28:	2304      	movs	r3, #4
 8001f2a:	e006      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e004      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e002      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1ce>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	6852      	ldr	r2, [r2, #4]
 8001f3e:	201f      	movs	r0, #31
 8001f40:	4002      	ands	r2, r0
 8001f42:	4093      	lsls	r3, r2
 8001f44:	000a      	movs	r2, r1
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d808      	bhi.n	8001f6e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6859      	ldr	r1, [r3, #4]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	001a      	movs	r2, r3
 8001f6a:	f7ff faab 	bl	80014c4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	001a      	movs	r2, r3
 8001f7c:	f7ff faf2 	bl	8001564 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	db00      	blt.n	8001f8a <HAL_ADC_ConfigChannel+0x21e>
 8001f88:	e0bc      	b.n	8002104 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f8a:	4b50      	ldr	r3, [pc, #320]	@ (80020cc <HAL_ADC_ConfigChannel+0x360>)
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7ff fa47 	bl	8001420 <LL_ADC_GetCommonPathInternalCh>
 8001f92:	0003      	movs	r3, r0
 8001f94:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a4d      	ldr	r2, [pc, #308]	@ (80020d0 <HAL_ADC_ConfigChannel+0x364>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d122      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	2380      	movs	r3, #128	@ 0x80
 8001fa4:	041b      	lsls	r3, r3, #16
 8001fa6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fa8:	d11d      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2280      	movs	r2, #128	@ 0x80
 8001fae:	0412      	lsls	r2, r2, #16
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	4a46      	ldr	r2, [pc, #280]	@ (80020cc <HAL_ADC_ConfigChannel+0x360>)
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	0010      	movs	r0, r2
 8001fb8:	f7ff fa1e 	bl	80013f8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fbc:	4b45      	ldr	r3, [pc, #276]	@ (80020d4 <HAL_ADC_ConfigChannel+0x368>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4945      	ldr	r1, [pc, #276]	@ (80020d8 <HAL_ADC_ConfigChannel+0x36c>)
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f7fe f89e 	bl	8000104 <__udivsi3>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	0013      	movs	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	189b      	adds	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fd6:	e002      	b.n	8001fde <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f9      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fe4:	e08e      	b.n	8002104 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a3c      	ldr	r2, [pc, #240]	@ (80020dc <HAL_ADC_ConfigChannel+0x370>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d10e      	bne.n	800200e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	045b      	lsls	r3, r3, #17
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d109      	bne.n	800200e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2280      	movs	r2, #128	@ 0x80
 8001ffe:	0452      	lsls	r2, r2, #17
 8002000:	4313      	orrs	r3, r2
 8002002:	4a32      	ldr	r2, [pc, #200]	@ (80020cc <HAL_ADC_ConfigChannel+0x360>)
 8002004:	0019      	movs	r1, r3
 8002006:	0010      	movs	r0, r2
 8002008:	f7ff f9f6 	bl	80013f8 <LL_ADC_SetCommonPathInternalCh>
 800200c:	e07a      	b.n	8002104 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a33      	ldr	r2, [pc, #204]	@ (80020e0 <HAL_ADC_ConfigChannel+0x374>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d000      	beq.n	800201a <HAL_ADC_ConfigChannel+0x2ae>
 8002018:	e074      	b.n	8002104 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	03db      	lsls	r3, r3, #15
 8002020:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002022:	d000      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x2ba>
 8002024:	e06e      	b.n	8002104 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2280      	movs	r2, #128	@ 0x80
 800202a:	03d2      	lsls	r2, r2, #15
 800202c:	4313      	orrs	r3, r2
 800202e:	4a27      	ldr	r2, [pc, #156]	@ (80020cc <HAL_ADC_ConfigChannel+0x360>)
 8002030:	0019      	movs	r1, r3
 8002032:	0010      	movs	r0, r2
 8002034:	f7ff f9e0 	bl	80013f8 <LL_ADC_SetCommonPathInternalCh>
 8002038:	e064      	b.n	8002104 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	2380      	movs	r3, #128	@ 0x80
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	429a      	cmp	r2, r3
 8002044:	d004      	beq.n	8002050 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800204a:	4a1f      	ldr	r2, [pc, #124]	@ (80020c8 <HAL_ADC_ConfigChannel+0x35c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d107      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	0019      	movs	r1, r3
 800205a:	0010      	movs	r0, r2
 800205c:	f7ff fa63 	bl	8001526 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	da4d      	bge.n	8002104 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002068:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <HAL_ADC_ConfigChannel+0x360>)
 800206a:	0018      	movs	r0, r3
 800206c:	f7ff f9d8 	bl	8001420 <LL_ADC_GetCommonPathInternalCh>
 8002070:	0003      	movs	r3, r0
 8002072:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a15      	ldr	r2, [pc, #84]	@ (80020d0 <HAL_ADC_ConfigChannel+0x364>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d108      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4a18      	ldr	r2, [pc, #96]	@ (80020e4 <HAL_ADC_ConfigChannel+0x378>)
 8002082:	4013      	ands	r3, r2
 8002084:	4a11      	ldr	r2, [pc, #68]	@ (80020cc <HAL_ADC_ConfigChannel+0x360>)
 8002086:	0019      	movs	r1, r3
 8002088:	0010      	movs	r0, r2
 800208a:	f7ff f9b5 	bl	80013f8 <LL_ADC_SetCommonPathInternalCh>
 800208e:	e039      	b.n	8002104 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a11      	ldr	r2, [pc, #68]	@ (80020dc <HAL_ADC_ConfigChannel+0x370>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d108      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4a12      	ldr	r2, [pc, #72]	@ (80020e8 <HAL_ADC_ConfigChannel+0x37c>)
 800209e:	4013      	ands	r3, r2
 80020a0:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <HAL_ADC_ConfigChannel+0x360>)
 80020a2:	0019      	movs	r1, r3
 80020a4:	0010      	movs	r0, r2
 80020a6:	f7ff f9a7 	bl	80013f8 <LL_ADC_SetCommonPathInternalCh>
 80020aa:	e02b      	b.n	8002104 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0b      	ldr	r2, [pc, #44]	@ (80020e0 <HAL_ADC_ConfigChannel+0x374>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d126      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4a0c      	ldr	r2, [pc, #48]	@ (80020ec <HAL_ADC_ConfigChannel+0x380>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	4a03      	ldr	r2, [pc, #12]	@ (80020cc <HAL_ADC_ConfigChannel+0x360>)
 80020be:	0019      	movs	r1, r3
 80020c0:	0010      	movs	r0, r2
 80020c2:	f7ff f999 	bl	80013f8 <LL_ADC_SetCommonPathInternalCh>
 80020c6:	e01d      	b.n	8002104 <HAL_ADC_ConfigChannel+0x398>
 80020c8:	80000004 	.word	0x80000004
 80020cc:	40012708 	.word	0x40012708
 80020d0:	b0001000 	.word	0xb0001000
 80020d4:	20000000 	.word	0x20000000
 80020d8:	00030d40 	.word	0x00030d40
 80020dc:	b8004000 	.word	0xb8004000
 80020e0:	b4002000 	.word	0xb4002000
 80020e4:	ff7fffff 	.word	0xff7fffff
 80020e8:	feffffff 	.word	0xfeffffff
 80020ec:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f4:	2220      	movs	r2, #32
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80020fc:	2317      	movs	r3, #23
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2254      	movs	r2, #84	@ 0x54
 8002108:	2100      	movs	r1, #0
 800210a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800210c:	2317      	movs	r3, #23
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	781b      	ldrb	r3, [r3, #0]
}
 8002112:	0018      	movs	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	b006      	add	sp, #24
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			@ (mov r8, r8)

0800211c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0018      	movs	r0, r3
 800212e:	f7ff fa81 	bl	8001634 <LL_ADC_IsEnabled>
 8002132:	1e03      	subs	r3, r0, #0
 8002134:	d000      	beq.n	8002138 <ADC_Enable+0x1c>
 8002136:	e069      	b.n	800220c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4a36      	ldr	r2, [pc, #216]	@ (8002218 <ADC_Enable+0xfc>)
 8002140:	4013      	ands	r3, r2
 8002142:	d00d      	beq.n	8002160 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002148:	2210      	movs	r2, #16
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002154:	2201      	movs	r2, #1
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e056      	b.n	800220e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	0018      	movs	r0, r3
 8002166:	f7ff fa41 	bl	80015ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800216a:	4b2c      	ldr	r3, [pc, #176]	@ (800221c <ADC_Enable+0x100>)
 800216c:	0018      	movs	r0, r3
 800216e:	f7ff f957 	bl	8001420 <LL_ADC_GetCommonPathInternalCh>
 8002172:	0002      	movs	r2, r0
 8002174:	2380      	movs	r3, #128	@ 0x80
 8002176:	041b      	lsls	r3, r3, #16
 8002178:	4013      	ands	r3, r2
 800217a:	d00f      	beq.n	800219c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800217c:	4b28      	ldr	r3, [pc, #160]	@ (8002220 <ADC_Enable+0x104>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4928      	ldr	r1, [pc, #160]	@ (8002224 <ADC_Enable+0x108>)
 8002182:	0018      	movs	r0, r3
 8002184:	f7fd ffbe 	bl	8000104 <__udivsi3>
 8002188:	0003      	movs	r3, r0
 800218a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800218c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800218e:	e002      	b.n	8002196 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	3b01      	subs	r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f9      	bne.n	8002190 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7e5b      	ldrb	r3, [r3, #25]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d033      	beq.n	800220c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80021a4:	f7ff f8fa 	bl	800139c <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021ac:	e027      	b.n	80021fe <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f7ff fa3e 	bl	8001634 <LL_ADC_IsEnabled>
 80021b8:	1e03      	subs	r3, r0, #0
 80021ba:	d104      	bne.n	80021c6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7ff fa13 	bl	80015ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021c6:	f7ff f8e9 	bl	800139c <HAL_GetTick>
 80021ca:	0002      	movs	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d914      	bls.n	80021fe <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2201      	movs	r2, #1
 80021dc:	4013      	ands	r3, r2
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d00d      	beq.n	80021fe <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e6:	2210      	movs	r2, #16
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f2:	2201      	movs	r2, #1
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e007      	b.n	800220e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2201      	movs	r2, #1
 8002206:	4013      	ands	r3, r2
 8002208:	2b01      	cmp	r3, #1
 800220a:	d1d0      	bne.n	80021ae <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	0018      	movs	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	b004      	add	sp, #16
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	80000017 	.word	0x80000017
 800221c:	40012708 	.word	0x40012708
 8002220:	20000000 	.word	0x20000000
 8002224:	00030d40 	.word	0x00030d40

08002228 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002234:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	2250      	movs	r2, #80	@ 0x50
 800223c:	4013      	ands	r3, r2
 800223e:	d141      	bne.n	80022c4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	2280      	movs	r2, #128	@ 0x80
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	431a      	orrs	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0018      	movs	r0, r3
 8002254:	f7ff f925 	bl	80014a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002258:	1e03      	subs	r3, r0, #0
 800225a:	d02e      	beq.n	80022ba <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	7e9b      	ldrb	r3, [r3, #26]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d12a      	bne.n	80022ba <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2208      	movs	r2, #8
 800226c:	4013      	ands	r3, r2
 800226e:	2b08      	cmp	r3, #8
 8002270:	d123      	bne.n	80022ba <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0018      	movs	r0, r3
 8002278:	f7ff fa00 	bl	800167c <LL_ADC_REG_IsConversionOngoing>
 800227c:	1e03      	subs	r3, r0, #0
 800227e:	d110      	bne.n	80022a2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	210c      	movs	r1, #12
 800228c:	438a      	bics	r2, r1
 800228e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002294:	4a15      	ldr	r2, [pc, #84]	@ (80022ec <ADC_DMAConvCplt+0xc4>)
 8002296:	4013      	ands	r3, r2
 8002298:	2201      	movs	r2, #1
 800229a:	431a      	orrs	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	659a      	str	r2, [r3, #88]	@ 0x58
 80022a0:	e00b      	b.n	80022ba <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a6:	2220      	movs	r2, #32
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	2201      	movs	r2, #1
 80022b4:	431a      	orrs	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	0018      	movs	r0, r3
 80022be:	f7fe f9ef 	bl	80006a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022c2:	e00f      	b.n	80022e4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c8:	2210      	movs	r2, #16
 80022ca:	4013      	ands	r3, r2
 80022cc:	d004      	beq.n	80022d8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7ff fd43 	bl	8001d5c <HAL_ADC_ErrorCallback>
}
 80022d6:	e005      	b.n	80022e4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	0010      	movs	r0, r2
 80022e2:	4798      	blx	r3
}
 80022e4:	46c0      	nop			@ (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b004      	add	sp, #16
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	fffffefe 	.word	0xfffffefe

080022f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	0018      	movs	r0, r3
 8002302:	f7ff fd1b 	bl	8001d3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002306:	46c0      	nop			@ (mov r8, r8)
 8002308:	46bd      	mov	sp, r7
 800230a:	b004      	add	sp, #16
 800230c:	bd80      	pop	{r7, pc}

0800230e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002320:	2240      	movs	r2, #64	@ 0x40
 8002322:	431a      	orrs	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	2204      	movs	r2, #4
 800232e:	431a      	orrs	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	0018      	movs	r0, r3
 8002338:	f7ff fd10 	bl	8001d5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800233c:	46c0      	nop			@ (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b004      	add	sp, #16
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800234c:	46c0      	nop			@ (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800235c:	46c0      	nop			@ (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	b002      	add	sp, #8
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800236c:	46c0      	nop			@ (mov r8, r8)
 800236e:	46bd      	mov	sp, r7
 8002370:	b002      	add	sp, #8
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 800237c:	46c0      	nop			@ (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}

08002384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	0002      	movs	r2, r0
 800238c:	1dfb      	adds	r3, r7, #7
 800238e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002390:	1dfb      	adds	r3, r7, #7
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b7f      	cmp	r3, #127	@ 0x7f
 8002396:	d809      	bhi.n	80023ac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002398:	1dfb      	adds	r3, r7, #7
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	001a      	movs	r2, r3
 800239e:	231f      	movs	r3, #31
 80023a0:	401a      	ands	r2, r3
 80023a2:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <__NVIC_EnableIRQ+0x30>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	4091      	lsls	r1, r2
 80023a8:	000a      	movs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80023ac:	46c0      	nop			@ (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b002      	add	sp, #8
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	0002      	movs	r2, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023c6:	1dfb      	adds	r3, r7, #7
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80023cc:	d828      	bhi.n	8002420 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023ce:	4a2f      	ldr	r2, [pc, #188]	@ (800248c <__NVIC_SetPriority+0xd4>)
 80023d0:	1dfb      	adds	r3, r7, #7
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	33c0      	adds	r3, #192	@ 0xc0
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	589b      	ldr	r3, [r3, r2]
 80023de:	1dfa      	adds	r2, r7, #7
 80023e0:	7812      	ldrb	r2, [r2, #0]
 80023e2:	0011      	movs	r1, r2
 80023e4:	2203      	movs	r2, #3
 80023e6:	400a      	ands	r2, r1
 80023e8:	00d2      	lsls	r2, r2, #3
 80023ea:	21ff      	movs	r1, #255	@ 0xff
 80023ec:	4091      	lsls	r1, r2
 80023ee:	000a      	movs	r2, r1
 80023f0:	43d2      	mvns	r2, r2
 80023f2:	401a      	ands	r2, r3
 80023f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	019b      	lsls	r3, r3, #6
 80023fa:	22ff      	movs	r2, #255	@ 0xff
 80023fc:	401a      	ands	r2, r3
 80023fe:	1dfb      	adds	r3, r7, #7
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	0018      	movs	r0, r3
 8002404:	2303      	movs	r3, #3
 8002406:	4003      	ands	r3, r0
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800240c:	481f      	ldr	r0, [pc, #124]	@ (800248c <__NVIC_SetPriority+0xd4>)
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b25b      	sxtb	r3, r3
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	430a      	orrs	r2, r1
 8002418:	33c0      	adds	r3, #192	@ 0xc0
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800241e:	e031      	b.n	8002484 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002420:	4a1b      	ldr	r2, [pc, #108]	@ (8002490 <__NVIC_SetPriority+0xd8>)
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	0019      	movs	r1, r3
 8002428:	230f      	movs	r3, #15
 800242a:	400b      	ands	r3, r1
 800242c:	3b08      	subs	r3, #8
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3306      	adds	r3, #6
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	18d3      	adds	r3, r2, r3
 8002436:	3304      	adds	r3, #4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	1dfa      	adds	r2, r7, #7
 800243c:	7812      	ldrb	r2, [r2, #0]
 800243e:	0011      	movs	r1, r2
 8002440:	2203      	movs	r2, #3
 8002442:	400a      	ands	r2, r1
 8002444:	00d2      	lsls	r2, r2, #3
 8002446:	21ff      	movs	r1, #255	@ 0xff
 8002448:	4091      	lsls	r1, r2
 800244a:	000a      	movs	r2, r1
 800244c:	43d2      	mvns	r2, r2
 800244e:	401a      	ands	r2, r3
 8002450:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	019b      	lsls	r3, r3, #6
 8002456:	22ff      	movs	r2, #255	@ 0xff
 8002458:	401a      	ands	r2, r3
 800245a:	1dfb      	adds	r3, r7, #7
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	0018      	movs	r0, r3
 8002460:	2303      	movs	r3, #3
 8002462:	4003      	ands	r3, r0
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002468:	4809      	ldr	r0, [pc, #36]	@ (8002490 <__NVIC_SetPriority+0xd8>)
 800246a:	1dfb      	adds	r3, r7, #7
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	001c      	movs	r4, r3
 8002470:	230f      	movs	r3, #15
 8002472:	4023      	ands	r3, r4
 8002474:	3b08      	subs	r3, #8
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	430a      	orrs	r2, r1
 800247a:	3306      	adds	r3, #6
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	18c3      	adds	r3, r0, r3
 8002480:	3304      	adds	r3, #4
 8002482:	601a      	str	r2, [r3, #0]
}
 8002484:	46c0      	nop			@ (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b003      	add	sp, #12
 800248a:	bd90      	pop	{r4, r7, pc}
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	1e5a      	subs	r2, r3, #1
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	045b      	lsls	r3, r3, #17
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d301      	bcc.n	80024ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a8:	2301      	movs	r3, #1
 80024aa:	e010      	b.n	80024ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ac:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <SysTick_Config+0x44>)
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	3a01      	subs	r2, #1
 80024b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b4:	2301      	movs	r3, #1
 80024b6:	425b      	negs	r3, r3
 80024b8:	2103      	movs	r1, #3
 80024ba:	0018      	movs	r0, r3
 80024bc:	f7ff ff7c 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c0:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <SysTick_Config+0x44>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c6:	4b04      	ldr	r3, [pc, #16]	@ (80024d8 <SysTick_Config+0x44>)
 80024c8:	2207      	movs	r2, #7
 80024ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b002      	add	sp, #8
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	e000e010 	.word	0xe000e010

080024dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	210f      	movs	r1, #15
 80024e8:	187b      	adds	r3, r7, r1
 80024ea:	1c02      	adds	r2, r0, #0
 80024ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b25b      	sxtb	r3, r3
 80024f6:	0011      	movs	r1, r2
 80024f8:	0018      	movs	r0, r3
 80024fa:	f7ff ff5d 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b004      	add	sp, #16
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	0002      	movs	r2, r0
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b25b      	sxtb	r3, r3
 8002518:	0018      	movs	r0, r3
 800251a:	f7ff ff33 	bl	8002384 <__NVIC_EnableIRQ>
}
 800251e:	46c0      	nop			@ (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b002      	add	sp, #8
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f7ff ffaf 	bl	8002494 <SysTick_Config>
 8002536:	0003      	movs	r3, r0
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e077      	b.n	8002642 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a3d      	ldr	r2, [pc, #244]	@ (800264c <HAL_DMA_Init+0x10c>)
 8002558:	4694      	mov	ip, r2
 800255a:	4463      	add	r3, ip
 800255c:	2114      	movs	r1, #20
 800255e:	0018      	movs	r0, r3
 8002560:	f7fd fdd0 	bl	8000104 <__udivsi3>
 8002564:	0003      	movs	r3, r0
 8002566:	009a      	lsls	r2, r3, #2
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2225      	movs	r2, #37	@ 0x25
 8002570:	2102      	movs	r1, #2
 8002572:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4934      	ldr	r1, [pc, #208]	@ (8002650 <HAL_DMA_Init+0x110>)
 8002580:	400a      	ands	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 fa2b 	bl	8002a18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	2380      	movs	r3, #128	@ 0x80
 80025c8:	01db      	lsls	r3, r3, #7
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d102      	bne.n	80025d4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025dc:	213f      	movs	r1, #63	@ 0x3f
 80025de:	400a      	ands	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025ea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d011      	beq.n	8002618 <HAL_DMA_Init+0xd8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d80d      	bhi.n	8002618 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 fa36 	bl	8002a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	e008      	b.n	800262a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2225      	movs	r2, #37	@ 0x25
 8002634:	2101      	movs	r1, #1
 8002636:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	@ 0x24
 800263c:	2100      	movs	r1, #0
 800263e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	0018      	movs	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	b002      	add	sp, #8
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	bffdfff8 	.word	0xbffdfff8
 8002650:	ffff800f 	.word	0xffff800f

08002654 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002662:	2317      	movs	r3, #23
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2224      	movs	r2, #36	@ 0x24
 800266e:	5c9b      	ldrb	r3, [r3, r2]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_DMA_Start_IT+0x24>
 8002674:	2302      	movs	r3, #2
 8002676:	e06f      	b.n	8002758 <HAL_DMA_Start_IT+0x104>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2224      	movs	r2, #36	@ 0x24
 800267c:	2101      	movs	r1, #1
 800267e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2225      	movs	r2, #37	@ 0x25
 8002684:	5c9b      	ldrb	r3, [r3, r2]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d157      	bne.n	800273c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2225      	movs	r2, #37	@ 0x25
 8002690:	2102      	movs	r1, #2
 8002692:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	438a      	bics	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f971 	bl	8002998 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	210e      	movs	r1, #14
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e00f      	b.n	80026f0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2104      	movs	r1, #4
 80026dc:	438a      	bics	r2, r1
 80026de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	210a      	movs	r1, #10
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	2380      	movs	r3, #128	@ 0x80
 80026f8:	025b      	lsls	r3, r3, #9
 80026fa:	4013      	ands	r3, r2
 80026fc:	d008      	beq.n	8002710 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002708:	2180      	movs	r1, #128	@ 0x80
 800270a:	0049      	lsls	r1, r1, #1
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002722:	2180      	movs	r1, #128	@ 0x80
 8002724:	0049      	lsls	r1, r1, #1
 8002726:	430a      	orrs	r2, r1
 8002728:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	e00a      	b.n	8002752 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2280      	movs	r2, #128	@ 0x80
 8002740:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2224      	movs	r2, #36	@ 0x24
 8002746:	2100      	movs	r1, #0
 8002748:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800274a:	2317      	movs	r3, #23
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002752:	2317      	movs	r3, #23
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	781b      	ldrb	r3, [r3, #0]
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b006      	add	sp, #24
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002768:	210f      	movs	r1, #15
 800276a:	187b      	adds	r3, r7, r1
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2225      	movs	r2, #37	@ 0x25
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d006      	beq.n	800278a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2204      	movs	r2, #4
 8002780:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002782:	187b      	adds	r3, r7, r1
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e049      	b.n	800281e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	210e      	movs	r1, #14
 8002796:	438a      	bics	r2, r1
 8002798:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	438a      	bics	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b4:	491d      	ldr	r1, [pc, #116]	@ (800282c <HAL_DMA_Abort_IT+0xcc>)
 80027b6:	400a      	ands	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80027ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <HAL_DMA_Abort_IT+0xd0>)
 80027bc:	6859      	ldr	r1, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	221c      	movs	r2, #28
 80027c4:	4013      	ands	r3, r2
 80027c6:	2201      	movs	r2, #1
 80027c8:	409a      	lsls	r2, r3
 80027ca:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <HAL_DMA_Abort_IT+0xd0>)
 80027cc:	430a      	orrs	r2, r1
 80027ce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80027d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00c      	beq.n	80027fc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ec:	490f      	ldr	r1, [pc, #60]	@ (800282c <HAL_DMA_Abort_IT+0xcc>)
 80027ee:	400a      	ands	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80027fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2225      	movs	r2, #37	@ 0x25
 8002800:	2101      	movs	r1, #1
 8002802:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2224      	movs	r2, #36	@ 0x24
 8002808:	2100      	movs	r1, #0
 800280a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	0010      	movs	r0, r2
 800281c:	4798      	blx	r3
    }
  }
  return status;
 800281e:	230f      	movs	r3, #15
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	781b      	ldrb	r3, [r3, #0]
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b004      	add	sp, #16
 800282a:	bd80      	pop	{r7, pc}
 800282c:	fffffeff 	.word	0xfffffeff
 8002830:	40020000 	.word	0x40020000

08002834 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800283c:	4b55      	ldr	r3, [pc, #340]	@ (8002994 <HAL_DMA_IRQHandler+0x160>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	221c      	movs	r2, #28
 8002850:	4013      	ands	r3, r2
 8002852:	2204      	movs	r2, #4
 8002854:	409a      	lsls	r2, r3
 8002856:	0013      	movs	r3, r2
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4013      	ands	r3, r2
 800285c:	d027      	beq.n	80028ae <HAL_DMA_IRQHandler+0x7a>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2204      	movs	r2, #4
 8002862:	4013      	ands	r3, r2
 8002864:	d023      	beq.n	80028ae <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2220      	movs	r2, #32
 800286e:	4013      	ands	r3, r2
 8002870:	d107      	bne.n	8002882 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2104      	movs	r1, #4
 800287e:	438a      	bics	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002882:	4b44      	ldr	r3, [pc, #272]	@ (8002994 <HAL_DMA_IRQHandler+0x160>)
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	221c      	movs	r2, #28
 800288c:	4013      	ands	r3, r2
 800288e:	2204      	movs	r2, #4
 8002890:	409a      	lsls	r2, r3
 8002892:	4b40      	ldr	r3, [pc, #256]	@ (8002994 <HAL_DMA_IRQHandler+0x160>)
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	2b00      	cmp	r3, #0
 800289e:	d100      	bne.n	80028a2 <HAL_DMA_IRQHandler+0x6e>
 80028a0:	e073      	b.n	800298a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	0010      	movs	r0, r2
 80028aa:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80028ac:	e06d      	b.n	800298a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	221c      	movs	r2, #28
 80028b4:	4013      	ands	r3, r2
 80028b6:	2202      	movs	r2, #2
 80028b8:	409a      	lsls	r2, r3
 80028ba:	0013      	movs	r3, r2
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4013      	ands	r3, r2
 80028c0:	d02e      	beq.n	8002920 <HAL_DMA_IRQHandler+0xec>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2202      	movs	r2, #2
 80028c6:	4013      	ands	r3, r2
 80028c8:	d02a      	beq.n	8002920 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2220      	movs	r2, #32
 80028d2:	4013      	ands	r3, r2
 80028d4:	d10b      	bne.n	80028ee <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	210a      	movs	r1, #10
 80028e2:	438a      	bics	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2225      	movs	r2, #37	@ 0x25
 80028ea:	2101      	movs	r1, #1
 80028ec:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80028ee:	4b29      	ldr	r3, [pc, #164]	@ (8002994 <HAL_DMA_IRQHandler+0x160>)
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	221c      	movs	r2, #28
 80028f8:	4013      	ands	r3, r2
 80028fa:	2202      	movs	r2, #2
 80028fc:	409a      	lsls	r2, r3
 80028fe:	4b25      	ldr	r3, [pc, #148]	@ (8002994 <HAL_DMA_IRQHandler+0x160>)
 8002900:	430a      	orrs	r2, r1
 8002902:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	@ 0x24
 8002908:	2100      	movs	r1, #0
 800290a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d03a      	beq.n	800298a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	0010      	movs	r0, r2
 800291c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800291e:	e034      	b.n	800298a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	221c      	movs	r2, #28
 8002926:	4013      	ands	r3, r2
 8002928:	2208      	movs	r2, #8
 800292a:	409a      	lsls	r2, r3
 800292c:	0013      	movs	r3, r2
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4013      	ands	r3, r2
 8002932:	d02b      	beq.n	800298c <HAL_DMA_IRQHandler+0x158>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2208      	movs	r2, #8
 8002938:	4013      	ands	r3, r2
 800293a:	d027      	beq.n	800298c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	210e      	movs	r1, #14
 8002948:	438a      	bics	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800294c:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <HAL_DMA_IRQHandler+0x160>)
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	221c      	movs	r2, #28
 8002956:	4013      	ands	r3, r2
 8002958:	2201      	movs	r2, #1
 800295a:	409a      	lsls	r2, r3
 800295c:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <HAL_DMA_IRQHandler+0x160>)
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2225      	movs	r2, #37	@ 0x25
 800296c:	2101      	movs	r1, #1
 800296e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2224      	movs	r2, #36	@ 0x24
 8002974:	2100      	movs	r1, #0
 8002976:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	0010      	movs	r0, r2
 8002988:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	46c0      	nop			@ (mov r8, r8)
}
 800298e:	46bd      	mov	sp, r7
 8002990:	b004      	add	sp, #16
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40020000 	.word	0x40020000

08002998 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80029ae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d004      	beq.n	80029c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80029c0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80029c2:	4b14      	ldr	r3, [pc, #80]	@ (8002a14 <DMA_SetConfig+0x7c>)
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	221c      	movs	r2, #28
 80029cc:	4013      	ands	r3, r2
 80029ce:	2201      	movs	r2, #1
 80029d0:	409a      	lsls	r2, r3
 80029d2:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <DMA_SetConfig+0x7c>)
 80029d4:	430a      	orrs	r2, r1
 80029d6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	d108      	bne.n	80029fa <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029f8:	e007      	b.n	8002a0a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	60da      	str	r2, [r3, #12]
}
 8002a0a:	46c0      	nop			@ (mov r8, r8)
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b004      	add	sp, #16
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	40020000 	.word	0x40020000

08002a18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	4a10      	ldr	r2, [pc, #64]	@ (8002a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002a28:	4694      	mov	ip, r2
 8002a2a:	4463      	add	r3, ip
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	001a      	movs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	001a      	movs	r2, r3
 8002a3a:	23ff      	movs	r3, #255	@ 0xff
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	3b08      	subs	r3, #8
 8002a40:	2114      	movs	r1, #20
 8002a42:	0018      	movs	r0, r3
 8002a44:	f7fd fb5e 	bl	8000104 <__udivsi3>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a07      	ldr	r2, [pc, #28]	@ (8002a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002a50:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	221f      	movs	r2, #31
 8002a56:	4013      	ands	r3, r2
 8002a58:	2201      	movs	r2, #1
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002a60:	46c0      	nop			@ (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b004      	add	sp, #16
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	10008200 	.word	0x10008200
 8002a6c:	40020880 	.word	0x40020880

08002a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	223f      	movs	r2, #63	@ 0x3f
 8002a7e:	4013      	ands	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a86:	4694      	mov	ip, r2
 8002a88:	4463      	add	r3, ip
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	001a      	movs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a07      	ldr	r2, [pc, #28]	@ (8002ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002aa8:	46c0      	nop			@ (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b004      	add	sp, #16
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	1000823f 	.word	0x1000823f
 8002ab4:	40020940 	.word	0x40020940

08002ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac6:	e147      	b.n	8002d58 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2101      	movs	r1, #1
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4091      	lsls	r1, r2
 8002ad2:	000a      	movs	r2, r1
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d100      	bne.n	8002ae0 <HAL_GPIO_Init+0x28>
 8002ade:	e138      	b.n	8002d52 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d005      	beq.n	8002af8 <HAL_GPIO_Init+0x40>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2203      	movs	r2, #3
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d130      	bne.n	8002b5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	409a      	lsls	r2, r3
 8002b06:	0013      	movs	r3, r2
 8002b08:	43da      	mvns	r2, r3
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	0013      	movs	r3, r2
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b2e:	2201      	movs	r2, #1
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	409a      	lsls	r2, r3
 8002b34:	0013      	movs	r3, r2
 8002b36:	43da      	mvns	r2, r3
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	2201      	movs	r2, #1
 8002b46:	401a      	ands	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	0013      	movs	r3, r2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2203      	movs	r2, #3
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d017      	beq.n	8002b96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	2203      	movs	r2, #3
 8002b72:	409a      	lsls	r2, r3
 8002b74:	0013      	movs	r3, r2
 8002b76:	43da      	mvns	r2, r3
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	409a      	lsls	r2, r3
 8002b88:	0013      	movs	r3, r2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d123      	bne.n	8002bea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	08da      	lsrs	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3208      	adds	r2, #8
 8002baa:	0092      	lsls	r2, r2, #2
 8002bac:	58d3      	ldr	r3, [r2, r3]
 8002bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2207      	movs	r2, #7
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	0013      	movs	r3, r2
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2107      	movs	r1, #7
 8002bce:	400b      	ands	r3, r1
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	0013      	movs	r3, r2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	08da      	lsrs	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3208      	adds	r2, #8
 8002be4:	0092      	lsls	r2, r2, #2
 8002be6:	6939      	ldr	r1, [r7, #16]
 8002be8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	0013      	movs	r3, r2
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2203      	movs	r2, #3
 8002c08:	401a      	ands	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	23c0      	movs	r3, #192	@ 0xc0
 8002c24:	029b      	lsls	r3, r3, #10
 8002c26:	4013      	ands	r3, r2
 8002c28:	d100      	bne.n	8002c2c <HAL_GPIO_Init+0x174>
 8002c2a:	e092      	b.n	8002d52 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002c2c:	4a50      	ldr	r2, [pc, #320]	@ (8002d70 <HAL_GPIO_Init+0x2b8>)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	3318      	adds	r3, #24
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	589b      	ldr	r3, [r3, r2]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	4013      	ands	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	220f      	movs	r2, #15
 8002c44:	409a      	lsls	r2, r3
 8002c46:	0013      	movs	r3, r2
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	23a0      	movs	r3, #160	@ 0xa0
 8002c54:	05db      	lsls	r3, r3, #23
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d013      	beq.n	8002c82 <HAL_GPIO_Init+0x1ca>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a45      	ldr	r2, [pc, #276]	@ (8002d74 <HAL_GPIO_Init+0x2bc>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00d      	beq.n	8002c7e <HAL_GPIO_Init+0x1c6>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a44      	ldr	r2, [pc, #272]	@ (8002d78 <HAL_GPIO_Init+0x2c0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x1c2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a43      	ldr	r2, [pc, #268]	@ (8002d7c <HAL_GPIO_Init+0x2c4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_GPIO_Init+0x1be>
 8002c72:	2303      	movs	r3, #3
 8002c74:	e006      	b.n	8002c84 <HAL_GPIO_Init+0x1cc>
 8002c76:	2305      	movs	r3, #5
 8002c78:	e004      	b.n	8002c84 <HAL_GPIO_Init+0x1cc>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e002      	b.n	8002c84 <HAL_GPIO_Init+0x1cc>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_GPIO_Init+0x1cc>
 8002c82:	2300      	movs	r3, #0
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	2103      	movs	r1, #3
 8002c88:	400a      	ands	r2, r1
 8002c8a:	00d2      	lsls	r2, r2, #3
 8002c8c:	4093      	lsls	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002c94:	4936      	ldr	r1, [pc, #216]	@ (8002d70 <HAL_GPIO_Init+0x2b8>)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3318      	adds	r3, #24
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ca2:	4b33      	ldr	r3, [pc, #204]	@ (8002d70 <HAL_GPIO_Init+0x2b8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	43da      	mvns	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	2380      	movs	r3, #128	@ 0x80
 8002cb8:	035b      	lsls	r3, r3, #13
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d70 <HAL_GPIO_Init+0x2b8>)
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002ccc:	4b28      	ldr	r3, [pc, #160]	@ (8002d70 <HAL_GPIO_Init+0x2b8>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	43da      	mvns	r2, r3
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	2380      	movs	r3, #128	@ 0x80
 8002ce2:	039b      	lsls	r3, r3, #14
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d70 <HAL_GPIO_Init+0x2b8>)
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d70 <HAL_GPIO_Init+0x2b8>)
 8002cf8:	2384      	movs	r3, #132	@ 0x84
 8002cfa:	58d3      	ldr	r3, [r2, r3]
 8002cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	43da      	mvns	r2, r3
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	029b      	lsls	r3, r3, #10
 8002d10:	4013      	ands	r3, r2
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d1c:	4914      	ldr	r1, [pc, #80]	@ (8002d70 <HAL_GPIO_Init+0x2b8>)
 8002d1e:	2284      	movs	r2, #132	@ 0x84
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002d24:	4a12      	ldr	r2, [pc, #72]	@ (8002d70 <HAL_GPIO_Init+0x2b8>)
 8002d26:	2380      	movs	r3, #128	@ 0x80
 8002d28:	58d3      	ldr	r3, [r2, r3]
 8002d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	2380      	movs	r3, #128	@ 0x80
 8002d3c:	025b      	lsls	r3, r3, #9
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d4a:	4909      	ldr	r1, [pc, #36]	@ (8002d70 <HAL_GPIO_Init+0x2b8>)
 8002d4c:	2280      	movs	r2, #128	@ 0x80
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	3301      	adds	r3, #1
 8002d56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	40da      	lsrs	r2, r3
 8002d60:	1e13      	subs	r3, r2, #0
 8002d62:	d000      	beq.n	8002d66 <HAL_GPIO_Init+0x2ae>
 8002d64:	e6b0      	b.n	8002ac8 <HAL_GPIO_Init+0x10>
  }
}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	46c0      	nop			@ (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b006      	add	sp, #24
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021800 	.word	0x40021800
 8002d74:	50000400 	.word	0x50000400
 8002d78:	50000800 	.word	0x50000800
 8002d7c:	50000c00 	.word	0x50000c00

08002d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	0008      	movs	r0, r1
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	1cbb      	adds	r3, r7, #2
 8002d8e:	1c02      	adds	r2, r0, #0
 8002d90:	801a      	strh	r2, [r3, #0]
 8002d92:	1c7b      	adds	r3, r7, #1
 8002d94:	1c0a      	adds	r2, r1, #0
 8002d96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d98:	1c7b      	adds	r3, r7, #1
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d004      	beq.n	8002daa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002da0:	1cbb      	adds	r3, r7, #2
 8002da2:	881a      	ldrh	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002da8:	e003      	b.n	8002db2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002daa:	1cbb      	adds	r3, r7, #2
 8002dac:	881a      	ldrh	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b002      	add	sp, #8
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	000a      	movs	r2, r1
 8002dc4:	1cbb      	adds	r3, r7, #2
 8002dc6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dce:	1cbb      	adds	r3, r7, #2
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	041a      	lsls	r2, r3, #16
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	1cb9      	adds	r1, r7, #2
 8002dde:	8809      	ldrh	r1, [r1, #0]
 8002de0:	400b      	ands	r3, r1
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	619a      	str	r2, [r3, #24]
}
 8002de8:	46c0      	nop			@ (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b004      	add	sp, #16
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	0002      	movs	r2, r0
 8002df8:	1dbb      	adds	r3, r7, #6
 8002dfa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002dfc:	4b10      	ldr	r3, [pc, #64]	@ (8002e40 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	1dba      	adds	r2, r7, #6
 8002e02:	8812      	ldrh	r2, [r2, #0]
 8002e04:	4013      	ands	r3, r2
 8002e06:	d008      	beq.n	8002e1a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002e08:	4b0d      	ldr	r3, [pc, #52]	@ (8002e40 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e0a:	1dba      	adds	r2, r7, #6
 8002e0c:	8812      	ldrh	r2, [r2, #0]
 8002e0e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002e10:	1dbb      	adds	r3, r7, #6
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7fd fd17 	bl	8000848 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002e1a:	4b09      	ldr	r3, [pc, #36]	@ (8002e40 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	1dba      	adds	r2, r7, #6
 8002e20:	8812      	ldrh	r2, [r2, #0]
 8002e22:	4013      	ands	r3, r2
 8002e24:	d008      	beq.n	8002e38 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002e26:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e28:	1dba      	adds	r2, r7, #6
 8002e2a:	8812      	ldrh	r2, [r2, #0]
 8002e2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002e2e:	1dbb      	adds	r3, r7, #6
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7fd fd1a 	bl	800086c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002e38:	46c0      	nop			@ (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021800 	.word	0x40021800

08002e44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	@ (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a19      	ldr	r2, [pc, #100]	@ (8002eb8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	4b17      	ldr	r3, [pc, #92]	@ (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	2380      	movs	r3, #128	@ 0x80
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d11f      	bne.n	8002ea8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002e68:	4b14      	ldr	r3, [pc, #80]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	0013      	movs	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	189b      	adds	r3, r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4912      	ldr	r1, [pc, #72]	@ (8002ec0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002e76:	0018      	movs	r0, r3
 8002e78:	f7fd f944 	bl	8000104 <__udivsi3>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	3301      	adds	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e82:	e008      	b.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e001      	b.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e009      	b.n	8002eaa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e96:	4b07      	ldr	r3, [pc, #28]	@ (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	2380      	movs	r3, #128	@ 0x80
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	2380      	movs	r3, #128	@ 0x80
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d0ed      	beq.n	8002e84 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b004      	add	sp, #16
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	fffff9ff 	.word	0xfffff9ff
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	000f4240 	.word	0x000f4240

08002ec4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e2fe      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2201      	movs	r2, #1
 8002edc:	4013      	ands	r3, r2
 8002ede:	d100      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x1e>
 8002ee0:	e07c      	b.n	8002fdc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee2:	4bc3      	ldr	r3, [pc, #780]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2238      	movs	r2, #56	@ 0x38
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eec:	4bc0      	ldr	r3, [pc, #768]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d102      	bne.n	8002f02 <HAL_RCC_OscConfig+0x3e>
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d002      	beq.n	8002f08 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d10b      	bne.n	8002f20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f08:	4bb9      	ldr	r3, [pc, #740]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	2380      	movs	r3, #128	@ 0x80
 8002f0e:	029b      	lsls	r3, r3, #10
 8002f10:	4013      	ands	r3, r2
 8002f12:	d062      	beq.n	8002fda <HAL_RCC_OscConfig+0x116>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d15e      	bne.n	8002fda <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e2d9      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	2380      	movs	r3, #128	@ 0x80
 8002f26:	025b      	lsls	r3, r3, #9
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_OscConfig+0x78>
 8002f2c:	4bb0      	ldr	r3, [pc, #704]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4baf      	ldr	r3, [pc, #700]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002f32:	2180      	movs	r1, #128	@ 0x80
 8002f34:	0249      	lsls	r1, r1, #9
 8002f36:	430a      	orrs	r2, r1
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e020      	b.n	8002f7e <HAL_RCC_OscConfig+0xba>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	23a0      	movs	r3, #160	@ 0xa0
 8002f42:	02db      	lsls	r3, r3, #11
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d10e      	bne.n	8002f66 <HAL_RCC_OscConfig+0xa2>
 8002f48:	4ba9      	ldr	r3, [pc, #676]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4ba8      	ldr	r3, [pc, #672]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002f4e:	2180      	movs	r1, #128	@ 0x80
 8002f50:	02c9      	lsls	r1, r1, #11
 8002f52:	430a      	orrs	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	4ba6      	ldr	r3, [pc, #664]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4ba5      	ldr	r3, [pc, #660]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002f5c:	2180      	movs	r1, #128	@ 0x80
 8002f5e:	0249      	lsls	r1, r1, #9
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e00b      	b.n	8002f7e <HAL_RCC_OscConfig+0xba>
 8002f66:	4ba2      	ldr	r3, [pc, #648]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	4ba1      	ldr	r3, [pc, #644]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002f6c:	49a1      	ldr	r1, [pc, #644]	@ (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002f6e:	400a      	ands	r2, r1
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	4b9f      	ldr	r3, [pc, #636]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4b9e      	ldr	r3, [pc, #632]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002f78:	499f      	ldr	r1, [pc, #636]	@ (80031f8 <HAL_RCC_OscConfig+0x334>)
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d014      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fe fa09 	bl	800139c <HAL_GetTick>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe fa04 	bl	800139c <HAL_GetTick>
 8002f94:	0002      	movs	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	@ 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e298      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa2:	4b93      	ldr	r3, [pc, #588]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	2380      	movs	r3, #128	@ 0x80
 8002fa8:	029b      	lsls	r3, r3, #10
 8002faa:	4013      	ands	r3, r2
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0xcc>
 8002fae:	e015      	b.n	8002fdc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe f9f4 	bl	800139c <HAL_GetTick>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fba:	f7fe f9ef 	bl	800139c <HAL_GetTick>
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b64      	cmp	r3, #100	@ 0x64
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e283      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fcc:	4b88      	ldr	r3, [pc, #544]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	2380      	movs	r3, #128	@ 0x80
 8002fd2:	029b      	lsls	r3, r3, #10
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCC_OscConfig+0xf6>
 8002fd8:	e000      	b.n	8002fdc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fda:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d100      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x124>
 8002fe6:	e099      	b.n	800311c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe8:	4b81      	ldr	r3, [pc, #516]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2238      	movs	r2, #56	@ 0x38
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff2:	4b7f      	ldr	r3, [pc, #508]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d102      	bne.n	8003008 <HAL_RCC_OscConfig+0x144>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d002      	beq.n	800300e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d135      	bne.n	800307a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800300e:	4b78      	ldr	r3, [pc, #480]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	2380      	movs	r3, #128	@ 0x80
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4013      	ands	r3, r2
 8003018:	d005      	beq.n	8003026 <HAL_RCC_OscConfig+0x162>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e256      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003026:	4b72      	ldr	r3, [pc, #456]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4a74      	ldr	r2, [pc, #464]	@ (80031fc <HAL_RCC_OscConfig+0x338>)
 800302c:	4013      	ands	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	021a      	lsls	r2, r3, #8
 8003036:	4b6e      	ldr	r3, [pc, #440]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8003038:	430a      	orrs	r2, r1
 800303a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d112      	bne.n	8003068 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003042:	4b6b      	ldr	r3, [pc, #428]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a6e      	ldr	r2, [pc, #440]	@ (8003200 <HAL_RCC_OscConfig+0x33c>)
 8003048:	4013      	ands	r3, r2
 800304a:	0019      	movs	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	4b67      	ldr	r3, [pc, #412]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8003052:	430a      	orrs	r2, r1
 8003054:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003056:	4b66      	ldr	r3, [pc, #408]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	0adb      	lsrs	r3, r3, #11
 800305c:	2207      	movs	r2, #7
 800305e:	4013      	ands	r3, r2
 8003060:	4a68      	ldr	r2, [pc, #416]	@ (8003204 <HAL_RCC_OscConfig+0x340>)
 8003062:	40da      	lsrs	r2, r3
 8003064:	4b68      	ldr	r3, [pc, #416]	@ (8003208 <HAL_RCC_OscConfig+0x344>)
 8003066:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003068:	4b68      	ldr	r3, [pc, #416]	@ (800320c <HAL_RCC_OscConfig+0x348>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	0018      	movs	r0, r3
 800306e:	f7fe f939 	bl	80012e4 <HAL_InitTick>
 8003072:	1e03      	subs	r3, r0, #0
 8003074:	d051      	beq.n	800311a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e22c      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d030      	beq.n	80030e4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003082:	4b5b      	ldr	r3, [pc, #364]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a5e      	ldr	r2, [pc, #376]	@ (8003200 <HAL_RCC_OscConfig+0x33c>)
 8003088:	4013      	ands	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	4b57      	ldr	r3, [pc, #348]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8003092:	430a      	orrs	r2, r1
 8003094:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003096:	4b56      	ldr	r3, [pc, #344]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4b55      	ldr	r3, [pc, #340]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 800309c:	2180      	movs	r1, #128	@ 0x80
 800309e:	0049      	lsls	r1, r1, #1
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fe f97a 	bl	800139c <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ae:	f7fe f975 	bl	800139c <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e209      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c0:	4b4b      	ldr	r3, [pc, #300]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	2380      	movs	r3, #128	@ 0x80
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4013      	ands	r3, r2
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030cc:	4b48      	ldr	r3, [pc, #288]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4a4a      	ldr	r2, [pc, #296]	@ (80031fc <HAL_RCC_OscConfig+0x338>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	0019      	movs	r1, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	021a      	lsls	r2, r3, #8
 80030dc:	4b44      	ldr	r3, [pc, #272]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	e01b      	b.n	800311c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80030e4:	4b42      	ldr	r3, [pc, #264]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b41      	ldr	r3, [pc, #260]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 80030ea:	4949      	ldr	r1, [pc, #292]	@ (8003210 <HAL_RCC_OscConfig+0x34c>)
 80030ec:	400a      	ands	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe f954 	bl	800139c <HAL_GetTick>
 80030f4:	0003      	movs	r3, r0
 80030f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fe f94f 	bl	800139c <HAL_GetTick>
 80030fe:	0002      	movs	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e1e3      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800310c:	4b38      	ldr	r3, [pc, #224]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4013      	ands	r3, r2
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x236>
 8003118:	e000      	b.n	800311c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800311a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2208      	movs	r2, #8
 8003122:	4013      	ands	r3, r2
 8003124:	d047      	beq.n	80031b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003126:	4b32      	ldr	r3, [pc, #200]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2238      	movs	r2, #56	@ 0x38
 800312c:	4013      	ands	r3, r2
 800312e:	2b18      	cmp	r3, #24
 8003130:	d10a      	bne.n	8003148 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003132:	4b2f      	ldr	r3, [pc, #188]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8003134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003136:	2202      	movs	r2, #2
 8003138:	4013      	ands	r3, r2
 800313a:	d03c      	beq.n	80031b6 <HAL_RCC_OscConfig+0x2f2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d138      	bne.n	80031b6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e1c5      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d019      	beq.n	8003184 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003150:	4b27      	ldr	r3, [pc, #156]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8003152:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003154:	4b26      	ldr	r3, [pc, #152]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8003156:	2101      	movs	r1, #1
 8003158:	430a      	orrs	r2, r1
 800315a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe f91e 	bl	800139c <HAL_GetTick>
 8003160:	0003      	movs	r3, r0
 8003162:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003166:	f7fe f919 	bl	800139c <HAL_GetTick>
 800316a:	0002      	movs	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e1ad      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003178:	4b1d      	ldr	r3, [pc, #116]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 800317a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317c:	2202      	movs	r2, #2
 800317e:	4013      	ands	r3, r2
 8003180:	d0f1      	beq.n	8003166 <HAL_RCC_OscConfig+0x2a2>
 8003182:	e018      	b.n	80031b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003184:	4b1a      	ldr	r3, [pc, #104]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 8003186:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003188:	4b19      	ldr	r3, [pc, #100]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 800318a:	2101      	movs	r1, #1
 800318c:	438a      	bics	r2, r1
 800318e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7fe f904 	bl	800139c <HAL_GetTick>
 8003194:	0003      	movs	r3, r0
 8003196:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319a:	f7fe f8ff 	bl	800139c <HAL_GetTick>
 800319e:	0002      	movs	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e193      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031ac:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 80031ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b0:	2202      	movs	r2, #2
 80031b2:	4013      	ands	r3, r2
 80031b4:	d1f1      	bne.n	800319a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2204      	movs	r2, #4
 80031bc:	4013      	ands	r3, r2
 80031be:	d100      	bne.n	80031c2 <HAL_RCC_OscConfig+0x2fe>
 80031c0:	e0c6      	b.n	8003350 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c2:	231f      	movs	r3, #31
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80031ca:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2238      	movs	r2, #56	@ 0x38
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d11e      	bne.n	8003214 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80031d6:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <HAL_RCC_OscConfig+0x32c>)
 80031d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031da:	2202      	movs	r2, #2
 80031dc:	4013      	ands	r3, r2
 80031de:	d100      	bne.n	80031e2 <HAL_RCC_OscConfig+0x31e>
 80031e0:	e0b6      	b.n	8003350 <HAL_RCC_OscConfig+0x48c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d000      	beq.n	80031ec <HAL_RCC_OscConfig+0x328>
 80031ea:	e0b1      	b.n	8003350 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e171      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
 80031f0:	40021000 	.word	0x40021000
 80031f4:	fffeffff 	.word	0xfffeffff
 80031f8:	fffbffff 	.word	0xfffbffff
 80031fc:	ffff80ff 	.word	0xffff80ff
 8003200:	ffffc7ff 	.word	0xffffc7ff
 8003204:	00f42400 	.word	0x00f42400
 8003208:	20000000 	.word	0x20000000
 800320c:	20000004 	.word	0x20000004
 8003210:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003214:	4bb1      	ldr	r3, [pc, #708]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 8003216:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	055b      	lsls	r3, r3, #21
 800321c:	4013      	ands	r3, r2
 800321e:	d101      	bne.n	8003224 <HAL_RCC_OscConfig+0x360>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x362>
 8003224:	2300      	movs	r3, #0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d011      	beq.n	800324e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	4bac      	ldr	r3, [pc, #688]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 800322c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800322e:	4bab      	ldr	r3, [pc, #684]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 8003230:	2180      	movs	r1, #128	@ 0x80
 8003232:	0549      	lsls	r1, r1, #21
 8003234:	430a      	orrs	r2, r1
 8003236:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003238:	4ba8      	ldr	r3, [pc, #672]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 800323a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800323c:	2380      	movs	r3, #128	@ 0x80
 800323e:	055b      	lsls	r3, r3, #21
 8003240:	4013      	ands	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003246:	231f      	movs	r3, #31
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324e:	4ba4      	ldr	r3, [pc, #656]	@ (80034e0 <HAL_RCC_OscConfig+0x61c>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	2380      	movs	r3, #128	@ 0x80
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4013      	ands	r3, r2
 8003258:	d11a      	bne.n	8003290 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800325a:	4ba1      	ldr	r3, [pc, #644]	@ (80034e0 <HAL_RCC_OscConfig+0x61c>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4ba0      	ldr	r3, [pc, #640]	@ (80034e0 <HAL_RCC_OscConfig+0x61c>)
 8003260:	2180      	movs	r1, #128	@ 0x80
 8003262:	0049      	lsls	r1, r1, #1
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003268:	f7fe f898 	bl	800139c <HAL_GetTick>
 800326c:	0003      	movs	r3, r0
 800326e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003272:	f7fe f893 	bl	800139c <HAL_GetTick>
 8003276:	0002      	movs	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e127      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003284:	4b96      	ldr	r3, [pc, #600]	@ (80034e0 <HAL_RCC_OscConfig+0x61c>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	2380      	movs	r3, #128	@ 0x80
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4013      	ands	r3, r2
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d106      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3e2>
 8003298:	4b90      	ldr	r3, [pc, #576]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 800329a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800329c:	4b8f      	ldr	r3, [pc, #572]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 800329e:	2101      	movs	r1, #1
 80032a0:	430a      	orrs	r2, r1
 80032a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032a4:	e01c      	b.n	80032e0 <HAL_RCC_OscConfig+0x41c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b05      	cmp	r3, #5
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x404>
 80032ae:	4b8b      	ldr	r3, [pc, #556]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 80032b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032b2:	4b8a      	ldr	r3, [pc, #552]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 80032b4:	2104      	movs	r1, #4
 80032b6:	430a      	orrs	r2, r1
 80032b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032ba:	4b88      	ldr	r3, [pc, #544]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 80032bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032be:	4b87      	ldr	r3, [pc, #540]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 80032c0:	2101      	movs	r1, #1
 80032c2:	430a      	orrs	r2, r1
 80032c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032c6:	e00b      	b.n	80032e0 <HAL_RCC_OscConfig+0x41c>
 80032c8:	4b84      	ldr	r3, [pc, #528]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 80032ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032cc:	4b83      	ldr	r3, [pc, #524]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 80032ce:	2101      	movs	r1, #1
 80032d0:	438a      	bics	r2, r1
 80032d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032d4:	4b81      	ldr	r3, [pc, #516]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 80032d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032d8:	4b80      	ldr	r3, [pc, #512]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 80032da:	2104      	movs	r1, #4
 80032dc:	438a      	bics	r2, r1
 80032de:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d014      	beq.n	8003312 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fe f858 	bl	800139c <HAL_GetTick>
 80032ec:	0003      	movs	r3, r0
 80032ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f0:	e009      	b.n	8003306 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f2:	f7fe f853 	bl	800139c <HAL_GetTick>
 80032f6:	0002      	movs	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	4a79      	ldr	r2, [pc, #484]	@ (80034e4 <HAL_RCC_OscConfig+0x620>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e0e6      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003306:	4b75      	ldr	r3, [pc, #468]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 8003308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330a:	2202      	movs	r2, #2
 800330c:	4013      	ands	r3, r2
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x42e>
 8003310:	e013      	b.n	800333a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003312:	f7fe f843 	bl	800139c <HAL_GetTick>
 8003316:	0003      	movs	r3, r0
 8003318:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800331a:	e009      	b.n	8003330 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331c:	f7fe f83e 	bl	800139c <HAL_GetTick>
 8003320:	0002      	movs	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	4a6f      	ldr	r2, [pc, #444]	@ (80034e4 <HAL_RCC_OscConfig+0x620>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e0d1      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003330:	4b6a      	ldr	r3, [pc, #424]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 8003332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003334:	2202      	movs	r2, #2
 8003336:	4013      	ands	r3, r2
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800333a:	231f      	movs	r3, #31
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d105      	bne.n	8003350 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003344:	4b65      	ldr	r3, [pc, #404]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 8003346:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003348:	4b64      	ldr	r3, [pc, #400]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 800334a:	4967      	ldr	r1, [pc, #412]	@ (80034e8 <HAL_RCC_OscConfig+0x624>)
 800334c:	400a      	ands	r2, r1
 800334e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d100      	bne.n	800335a <HAL_RCC_OscConfig+0x496>
 8003358:	e0bb      	b.n	80034d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800335a:	4b60      	ldr	r3, [pc, #384]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2238      	movs	r2, #56	@ 0x38
 8003360:	4013      	ands	r3, r2
 8003362:	2b10      	cmp	r3, #16
 8003364:	d100      	bne.n	8003368 <HAL_RCC_OscConfig+0x4a4>
 8003366:	e07b      	b.n	8003460 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d156      	bne.n	800341e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003370:	4b5a      	ldr	r3, [pc, #360]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b59      	ldr	r3, [pc, #356]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 8003376:	495d      	ldr	r1, [pc, #372]	@ (80034ec <HAL_RCC_OscConfig+0x628>)
 8003378:	400a      	ands	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe f80e 	bl	800139c <HAL_GetTick>
 8003380:	0003      	movs	r3, r0
 8003382:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003386:	f7fe f809 	bl	800139c <HAL_GetTick>
 800338a:	0002      	movs	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e09d      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003398:	4b50      	ldr	r3, [pc, #320]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2380      	movs	r3, #128	@ 0x80
 800339e:	049b      	lsls	r3, r3, #18
 80033a0:	4013      	ands	r3, r2
 80033a2:	d1f0      	bne.n	8003386 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033a4:	4b4d      	ldr	r3, [pc, #308]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a51      	ldr	r2, [pc, #324]	@ (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	0019      	movs	r1, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1a      	ldr	r2, [r3, #32]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d0:	431a      	orrs	r2, r3
 80033d2:	4b42      	ldr	r3, [pc, #264]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 80033d4:	430a      	orrs	r2, r1
 80033d6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d8:	4b40      	ldr	r3, [pc, #256]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b3f      	ldr	r3, [pc, #252]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 80033de:	2180      	movs	r1, #128	@ 0x80
 80033e0:	0449      	lsls	r1, r1, #17
 80033e2:	430a      	orrs	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80033e6:	4b3d      	ldr	r3, [pc, #244]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	4b3c      	ldr	r3, [pc, #240]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 80033ec:	2180      	movs	r1, #128	@ 0x80
 80033ee:	0549      	lsls	r1, r1, #21
 80033f0:	430a      	orrs	r2, r1
 80033f2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fd ffd2 	bl	800139c <HAL_GetTick>
 80033f8:	0003      	movs	r3, r0
 80033fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fe:	f7fd ffcd 	bl	800139c <HAL_GetTick>
 8003402:	0002      	movs	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e061      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003410:	4b32      	ldr	r3, [pc, #200]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2380      	movs	r3, #128	@ 0x80
 8003416:	049b      	lsls	r3, r3, #18
 8003418:	4013      	ands	r3, r2
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x53a>
 800341c:	e059      	b.n	80034d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341e:	4b2f      	ldr	r3, [pc, #188]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	4b2e      	ldr	r3, [pc, #184]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 8003424:	4931      	ldr	r1, [pc, #196]	@ (80034ec <HAL_RCC_OscConfig+0x628>)
 8003426:	400a      	ands	r2, r1
 8003428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fd ffb7 	bl	800139c <HAL_GetTick>
 800342e:	0003      	movs	r3, r0
 8003430:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7fd ffb2 	bl	800139c <HAL_GetTick>
 8003438:	0002      	movs	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e046      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003446:	4b25      	ldr	r3, [pc, #148]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	2380      	movs	r3, #128	@ 0x80
 800344c:	049b      	lsls	r3, r3, #18
 800344e:	4013      	ands	r3, r2
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003452:	4b22      	ldr	r3, [pc, #136]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	4b21      	ldr	r3, [pc, #132]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 8003458:	4926      	ldr	r1, [pc, #152]	@ (80034f4 <HAL_RCC_OscConfig+0x630>)
 800345a:	400a      	ands	r2, r1
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	e038      	b.n	80034d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e033      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800346c:	4b1b      	ldr	r3, [pc, #108]	@ (80034dc <HAL_RCC_OscConfig+0x618>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2203      	movs	r2, #3
 8003476:	401a      	ands	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	429a      	cmp	r2, r3
 800347e:	d126      	bne.n	80034ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2270      	movs	r2, #112	@ 0x70
 8003484:	401a      	ands	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d11f      	bne.n	80034ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	23fe      	movs	r3, #254	@ 0xfe
 8003492:	01db      	lsls	r3, r3, #7
 8003494:	401a      	ands	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d116      	bne.n	80034ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	23f8      	movs	r3, #248	@ 0xf8
 80034a4:	039b      	lsls	r3, r3, #14
 80034a6:	401a      	ands	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d10e      	bne.n	80034ce <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	23e0      	movs	r3, #224	@ 0xe0
 80034b4:	051b      	lsls	r3, r3, #20
 80034b6:	401a      	ands	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	0f5b      	lsrs	r3, r3, #29
 80034c4:	075a      	lsls	r2, r3, #29
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d001      	beq.n	80034d2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b008      	add	sp, #32
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40007000 	.word	0x40007000
 80034e4:	00001388 	.word	0x00001388
 80034e8:	efffffff 	.word	0xefffffff
 80034ec:	feffffff 	.word	0xfeffffff
 80034f0:	11c1808c 	.word	0x11c1808c
 80034f4:	eefefffc 	.word	0xeefefffc

080034f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0e9      	b.n	80036e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800350c:	4b76      	ldr	r3, [pc, #472]	@ (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2207      	movs	r2, #7
 8003512:	4013      	ands	r3, r2
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d91e      	bls.n	8003558 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b73      	ldr	r3, [pc, #460]	@ (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2207      	movs	r2, #7
 8003520:	4393      	bics	r3, r2
 8003522:	0019      	movs	r1, r3
 8003524:	4b70      	ldr	r3, [pc, #448]	@ (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800352c:	f7fd ff36 	bl	800139c <HAL_GetTick>
 8003530:	0003      	movs	r3, r0
 8003532:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003534:	e009      	b.n	800354a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003536:	f7fd ff31 	bl	800139c <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	4a6a      	ldr	r2, [pc, #424]	@ (80036ec <HAL_RCC_ClockConfig+0x1f4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e0ca      	b.n	80036e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800354a:	4b67      	ldr	r3, [pc, #412]	@ (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2207      	movs	r2, #7
 8003550:	4013      	ands	r3, r2
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d1ee      	bne.n	8003536 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2202      	movs	r2, #2
 800355e:	4013      	ands	r3, r2
 8003560:	d015      	beq.n	800358e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2204      	movs	r2, #4
 8003568:	4013      	ands	r3, r2
 800356a:	d006      	beq.n	800357a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800356c:	4b60      	ldr	r3, [pc, #384]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	4b5f      	ldr	r3, [pc, #380]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 8003572:	21e0      	movs	r1, #224	@ 0xe0
 8003574:	01c9      	lsls	r1, r1, #7
 8003576:	430a      	orrs	r2, r1
 8003578:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800357a:	4b5d      	ldr	r3, [pc, #372]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	4a5d      	ldr	r2, [pc, #372]	@ (80036f4 <HAL_RCC_ClockConfig+0x1fc>)
 8003580:	4013      	ands	r3, r2
 8003582:	0019      	movs	r1, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	4b59      	ldr	r3, [pc, #356]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 800358a:	430a      	orrs	r2, r1
 800358c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2201      	movs	r2, #1
 8003594:	4013      	ands	r3, r2
 8003596:	d057      	beq.n	8003648 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a0:	4b53      	ldr	r3, [pc, #332]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	2380      	movs	r3, #128	@ 0x80
 80035a6:	029b      	lsls	r3, r3, #10
 80035a8:	4013      	ands	r3, r2
 80035aa:	d12b      	bne.n	8003604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e097      	b.n	80036e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b8:	4b4d      	ldr	r3, [pc, #308]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	2380      	movs	r3, #128	@ 0x80
 80035be:	049b      	lsls	r3, r3, #18
 80035c0:	4013      	ands	r3, r2
 80035c2:	d11f      	bne.n	8003604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e08b      	b.n	80036e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d0:	4b47      	ldr	r3, [pc, #284]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	2380      	movs	r3, #128	@ 0x80
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4013      	ands	r3, r2
 80035da:	d113      	bne.n	8003604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e07f      	b.n	80036e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035e8:	4b41      	ldr	r3, [pc, #260]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 80035ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ec:	2202      	movs	r2, #2
 80035ee:	4013      	ands	r3, r2
 80035f0:	d108      	bne.n	8003604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e074      	b.n	80036e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f6:	4b3e      	ldr	r3, [pc, #248]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 80035f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fa:	2202      	movs	r2, #2
 80035fc:	4013      	ands	r3, r2
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e06d      	b.n	80036e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003604:	4b3a      	ldr	r3, [pc, #232]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2207      	movs	r2, #7
 800360a:	4393      	bics	r3, r2
 800360c:	0019      	movs	r1, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	4b37      	ldr	r3, [pc, #220]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 8003614:	430a      	orrs	r2, r1
 8003616:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003618:	f7fd fec0 	bl	800139c <HAL_GetTick>
 800361c:	0003      	movs	r3, r0
 800361e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003620:	e009      	b.n	8003636 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003622:	f7fd febb 	bl	800139c <HAL_GetTick>
 8003626:	0002      	movs	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	4a2f      	ldr	r2, [pc, #188]	@ (80036ec <HAL_RCC_ClockConfig+0x1f4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e054      	b.n	80036e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	4b2e      	ldr	r3, [pc, #184]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2238      	movs	r2, #56	@ 0x38
 800363c:	401a      	ands	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	429a      	cmp	r2, r3
 8003646:	d1ec      	bne.n	8003622 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003648:	4b27      	ldr	r3, [pc, #156]	@ (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2207      	movs	r2, #7
 800364e:	4013      	ands	r3, r2
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d21e      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b24      	ldr	r3, [pc, #144]	@ (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2207      	movs	r2, #7
 800365c:	4393      	bics	r3, r2
 800365e:	0019      	movs	r1, r3
 8003660:	4b21      	ldr	r3, [pc, #132]	@ (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003668:	f7fd fe98 	bl	800139c <HAL_GetTick>
 800366c:	0003      	movs	r3, r0
 800366e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003670:	e009      	b.n	8003686 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003672:	f7fd fe93 	bl	800139c <HAL_GetTick>
 8003676:	0002      	movs	r2, r0
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	4a1b      	ldr	r2, [pc, #108]	@ (80036ec <HAL_RCC_ClockConfig+0x1f4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e02c      	b.n	80036e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003686:	4b18      	ldr	r3, [pc, #96]	@ (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2207      	movs	r2, #7
 800368c:	4013      	ands	r3, r2
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d1ee      	bne.n	8003672 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2204      	movs	r2, #4
 800369a:	4013      	ands	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800369e:	4b14      	ldr	r3, [pc, #80]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	4a15      	ldr	r2, [pc, #84]	@ (80036f8 <HAL_RCC_ClockConfig+0x200>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	0019      	movs	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	4b10      	ldr	r3, [pc, #64]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 80036ae:	430a      	orrs	r2, r1
 80036b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80036b2:	f000 f829 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 80036b6:	0001      	movs	r1, r0
 80036b8:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	0a1b      	lsrs	r3, r3, #8
 80036be:	220f      	movs	r2, #15
 80036c0:	401a      	ands	r2, r3
 80036c2:	4b0e      	ldr	r3, [pc, #56]	@ (80036fc <HAL_RCC_ClockConfig+0x204>)
 80036c4:	0092      	lsls	r2, r2, #2
 80036c6:	58d3      	ldr	r3, [r2, r3]
 80036c8:	221f      	movs	r2, #31
 80036ca:	4013      	ands	r3, r2
 80036cc:	000a      	movs	r2, r1
 80036ce:	40da      	lsrs	r2, r3
 80036d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <HAL_RCC_ClockConfig+0x208>)
 80036d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <HAL_RCC_ClockConfig+0x20c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	0018      	movs	r0, r3
 80036da:	f7fd fe03 	bl	80012e4 <HAL_InitTick>
 80036de:	0003      	movs	r3, r0
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b004      	add	sp, #16
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40022000 	.word	0x40022000
 80036ec:	00001388 	.word	0x00001388
 80036f0:	40021000 	.word	0x40021000
 80036f4:	fffff0ff 	.word	0xfffff0ff
 80036f8:	ffff8fff 	.word	0xffff8fff
 80036fc:	08005e6c 	.word	0x08005e6c
 8003700:	20000000 	.word	0x20000000
 8003704:	20000004 	.word	0x20000004

08003708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800370e:	4b3c      	ldr	r3, [pc, #240]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2238      	movs	r2, #56	@ 0x38
 8003714:	4013      	ands	r3, r2
 8003716:	d10f      	bne.n	8003738 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003718:	4b39      	ldr	r3, [pc, #228]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xf8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	0adb      	lsrs	r3, r3, #11
 800371e:	2207      	movs	r2, #7
 8003720:	4013      	ands	r3, r2
 8003722:	2201      	movs	r2, #1
 8003724:	409a      	lsls	r2, r3
 8003726:	0013      	movs	r3, r2
 8003728:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800372a:	6839      	ldr	r1, [r7, #0]
 800372c:	4835      	ldr	r0, [pc, #212]	@ (8003804 <HAL_RCC_GetSysClockFreq+0xfc>)
 800372e:	f7fc fce9 	bl	8000104 <__udivsi3>
 8003732:	0003      	movs	r3, r0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	e05d      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003738:	4b31      	ldr	r3, [pc, #196]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xf8>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2238      	movs	r2, #56	@ 0x38
 800373e:	4013      	ands	r3, r2
 8003740:	2b08      	cmp	r3, #8
 8003742:	d102      	bne.n	800374a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003744:	4b30      	ldr	r3, [pc, #192]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x100>)
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	e054      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800374a:	4b2d      	ldr	r3, [pc, #180]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xf8>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2238      	movs	r2, #56	@ 0x38
 8003750:	4013      	ands	r3, r2
 8003752:	2b10      	cmp	r3, #16
 8003754:	d138      	bne.n	80037c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003756:	4b2a      	ldr	r3, [pc, #168]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2203      	movs	r2, #3
 800375c:	4013      	ands	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003760:	4b27      	ldr	r3, [pc, #156]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	2207      	movs	r2, #7
 8003768:	4013      	ands	r3, r2
 800376a:	3301      	adds	r3, #1
 800376c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d10d      	bne.n	8003790 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	4824      	ldr	r0, [pc, #144]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x100>)
 8003778:	f7fc fcc4 	bl	8000104 <__udivsi3>
 800377c:	0003      	movs	r3, r0
 800377e:	0019      	movs	r1, r3
 8003780:	4b1f      	ldr	r3, [pc, #124]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	0a1b      	lsrs	r3, r3, #8
 8003786:	227f      	movs	r2, #127	@ 0x7f
 8003788:	4013      	ands	r3, r2
 800378a:	434b      	muls	r3, r1
 800378c:	617b      	str	r3, [r7, #20]
        break;
 800378e:	e00d      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	481c      	ldr	r0, [pc, #112]	@ (8003804 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003794:	f7fc fcb6 	bl	8000104 <__udivsi3>
 8003798:	0003      	movs	r3, r0
 800379a:	0019      	movs	r1, r3
 800379c:	4b18      	ldr	r3, [pc, #96]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xf8>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	227f      	movs	r2, #127	@ 0x7f
 80037a4:	4013      	ands	r3, r2
 80037a6:	434b      	muls	r3, r1
 80037a8:	617b      	str	r3, [r7, #20]
        break;
 80037aa:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80037ac:	4b14      	ldr	r3, [pc, #80]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	0f5b      	lsrs	r3, r3, #29
 80037b2:	2207      	movs	r2, #7
 80037b4:	4013      	ands	r3, r2
 80037b6:	3301      	adds	r3, #1
 80037b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	6978      	ldr	r0, [r7, #20]
 80037be:	f7fc fca1 	bl	8000104 <__udivsi3>
 80037c2:	0003      	movs	r3, r0
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	e015      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80037c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2238      	movs	r2, #56	@ 0x38
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d103      	bne.n	80037dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80037d4:	2380      	movs	r3, #128	@ 0x80
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	e00b      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80037dc:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2238      	movs	r2, #56	@ 0x38
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b18      	cmp	r3, #24
 80037e6:	d103      	bne.n	80037f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80037e8:	23fa      	movs	r3, #250	@ 0xfa
 80037ea:	01db      	lsls	r3, r3, #7
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	e001      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037f4:	693b      	ldr	r3, [r7, #16]
}
 80037f6:	0018      	movs	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b006      	add	sp, #24
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	46c0      	nop			@ (mov r8, r8)
 8003800:	40021000 	.word	0x40021000
 8003804:	00f42400 	.word	0x00f42400
 8003808:	007a1200 	.word	0x007a1200

0800380c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003814:	2313      	movs	r3, #19
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800381c:	2312      	movs	r3, #18
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	2380      	movs	r3, #128	@ 0x80
 800382a:	029b      	lsls	r3, r3, #10
 800382c:	4013      	ands	r3, r2
 800382e:	d100      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003830:	e0a3      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003832:	2011      	movs	r0, #17
 8003834:	183b      	adds	r3, r7, r0
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383a:	4ba5      	ldr	r3, [pc, #660]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800383c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800383e:	2380      	movs	r3, #128	@ 0x80
 8003840:	055b      	lsls	r3, r3, #21
 8003842:	4013      	ands	r3, r2
 8003844:	d110      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	4ba2      	ldr	r3, [pc, #648]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003848:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800384a:	4ba1      	ldr	r3, [pc, #644]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800384c:	2180      	movs	r1, #128	@ 0x80
 800384e:	0549      	lsls	r1, r1, #21
 8003850:	430a      	orrs	r2, r1
 8003852:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003854:	4b9e      	ldr	r3, [pc, #632]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003856:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003858:	2380      	movs	r3, #128	@ 0x80
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	4013      	ands	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003862:	183b      	adds	r3, r7, r0
 8003864:	2201      	movs	r2, #1
 8003866:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003868:	4b9a      	ldr	r3, [pc, #616]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b99      	ldr	r3, [pc, #612]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800386e:	2180      	movs	r1, #128	@ 0x80
 8003870:	0049      	lsls	r1, r1, #1
 8003872:	430a      	orrs	r2, r1
 8003874:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003876:	f7fd fd91 	bl	800139c <HAL_GetTick>
 800387a:	0003      	movs	r3, r0
 800387c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800387e:	e00b      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003880:	f7fd fd8c 	bl	800139c <HAL_GetTick>
 8003884:	0002      	movs	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d904      	bls.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800388e:	2313      	movs	r3, #19
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	2203      	movs	r2, #3
 8003894:	701a      	strb	r2, [r3, #0]
        break;
 8003896:	e005      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003898:	4b8e      	ldr	r3, [pc, #568]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	2380      	movs	r3, #128	@ 0x80
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4013      	ands	r3, r2
 80038a2:	d0ed      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80038a4:	2313      	movs	r3, #19
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d154      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038ae:	4b88      	ldr	r3, [pc, #544]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038b2:	23c0      	movs	r3, #192	@ 0xc0
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4013      	ands	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d019      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d014      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038ca:	4b81      	ldr	r3, [pc, #516]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ce:	4a82      	ldr	r2, [pc, #520]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038d4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038d8:	4b7d      	ldr	r3, [pc, #500]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038da:	2180      	movs	r1, #128	@ 0x80
 80038dc:	0249      	lsls	r1, r1, #9
 80038de:	430a      	orrs	r2, r1
 80038e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038e2:	4b7b      	ldr	r3, [pc, #492]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038e6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038e8:	497c      	ldr	r1, [pc, #496]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80038ea:	400a      	ands	r2, r1
 80038ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038ee:	4b78      	ldr	r3, [pc, #480]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2201      	movs	r2, #1
 80038f8:	4013      	ands	r3, r2
 80038fa:	d016      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd fd4e 	bl	800139c <HAL_GetTick>
 8003900:	0003      	movs	r3, r0
 8003902:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003904:	e00c      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003906:	f7fd fd49 	bl	800139c <HAL_GetTick>
 800390a:	0002      	movs	r2, r0
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	4a73      	ldr	r2, [pc, #460]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d904      	bls.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003916:	2313      	movs	r3, #19
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	2203      	movs	r2, #3
 800391c:	701a      	strb	r2, [r3, #0]
            break;
 800391e:	e004      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003920:	4b6b      	ldr	r3, [pc, #428]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003924:	2202      	movs	r2, #2
 8003926:	4013      	ands	r3, r2
 8003928:	d0ed      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800392a:	2313      	movs	r3, #19
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003934:	4b66      	ldr	r3, [pc, #408]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003938:	4a67      	ldr	r2, [pc, #412]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800393a:	4013      	ands	r3, r2
 800393c:	0019      	movs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003942:	4b63      	ldr	r3, [pc, #396]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003944:	430a      	orrs	r2, r1
 8003946:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003948:	e00c      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800394a:	2312      	movs	r3, #18
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	2213      	movs	r2, #19
 8003950:	18ba      	adds	r2, r7, r2
 8003952:	7812      	ldrb	r2, [r2, #0]
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e005      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	2312      	movs	r3, #18
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	2213      	movs	r2, #19
 800395e:	18ba      	adds	r2, r7, r2
 8003960:	7812      	ldrb	r2, [r2, #0]
 8003962:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003964:	2311      	movs	r3, #17
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d105      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396e:	4b58      	ldr	r3, [pc, #352]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003970:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003972:	4b57      	ldr	r3, [pc, #348]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003974:	495b      	ldr	r1, [pc, #364]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003976:	400a      	ands	r2, r1
 8003978:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2201      	movs	r2, #1
 8003980:	4013      	ands	r3, r2
 8003982:	d009      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003984:	4b52      	ldr	r3, [pc, #328]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003988:	2203      	movs	r2, #3
 800398a:	4393      	bics	r3, r2
 800398c:	0019      	movs	r1, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	4b4f      	ldr	r3, [pc, #316]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003994:	430a      	orrs	r2, r1
 8003996:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2210      	movs	r2, #16
 800399e:	4013      	ands	r3, r2
 80039a0:	d009      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039a2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a6:	4a50      	ldr	r2, [pc, #320]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	0019      	movs	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	4b47      	ldr	r3, [pc, #284]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039b2:	430a      	orrs	r2, r1
 80039b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	2380      	movs	r3, #128	@ 0x80
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4013      	ands	r3, r2
 80039c0:	d009      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039c2:	4b43      	ldr	r3, [pc, #268]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c6:	4a49      	ldr	r2, [pc, #292]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	0019      	movs	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039d2:	430a      	orrs	r2, r1
 80039d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	2380      	movs	r3, #128	@ 0x80
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4013      	ands	r3, r2
 80039e0:	d009      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039e2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e6:	4a42      	ldr	r2, [pc, #264]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	4b37      	ldr	r3, [pc, #220]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039f2:	430a      	orrs	r2, r1
 80039f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2220      	movs	r2, #32
 80039fc:	4013      	ands	r3, r2
 80039fe:	d009      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a00:	4b33      	ldr	r3, [pc, #204]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a04:	4a3b      	ldr	r2, [pc, #236]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	4b30      	ldr	r3, [pc, #192]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a10:	430a      	orrs	r2, r1
 8003a12:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	2380      	movs	r3, #128	@ 0x80
 8003a1a:	01db      	lsls	r3, r3, #7
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d015      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a20:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	0899      	lsrs	r1, r3, #2
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	4b28      	ldr	r3, [pc, #160]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	2380      	movs	r3, #128	@ 0x80
 8003a38:	05db      	lsls	r3, r3, #23
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d106      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a3e:	4b24      	ldr	r3, [pc, #144]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	4b23      	ldr	r3, [pc, #140]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a44:	2180      	movs	r1, #128	@ 0x80
 8003a46:	0249      	lsls	r1, r1, #9
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2380      	movs	r3, #128	@ 0x80
 8003a52:	039b      	lsls	r3, r3, #14
 8003a54:	4013      	ands	r3, r2
 8003a56:	d016      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5c:	4a26      	ldr	r2, [pc, #152]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	0019      	movs	r1, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1a      	ldr	r2, [r3, #32]
 8003a66:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1a      	ldr	r2, [r3, #32]
 8003a70:	2380      	movs	r3, #128	@ 0x80
 8003a72:	03db      	lsls	r3, r3, #15
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d106      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003a78:	4b15      	ldr	r3, [pc, #84]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a7e:	2180      	movs	r1, #128	@ 0x80
 8003a80:	0449      	lsls	r1, r1, #17
 8003a82:	430a      	orrs	r2, r1
 8003a84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	2380      	movs	r3, #128	@ 0x80
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d016      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003a92:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a96:	4a19      	ldr	r2, [pc, #100]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	2380      	movs	r3, #128	@ 0x80
 8003aac:	01db      	lsls	r3, r3, #7
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d106      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003ab2:	4b07      	ldr	r3, [pc, #28]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ab8:	2180      	movs	r1, #128	@ 0x80
 8003aba:	0249      	lsls	r1, r1, #9
 8003abc:	430a      	orrs	r2, r1
 8003abe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003ac0:	2312      	movs	r3, #18
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	781b      	ldrb	r3, [r3, #0]
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b006      	add	sp, #24
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			@ (mov r8, r8)
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40007000 	.word	0x40007000
 8003ad8:	fffffcff 	.word	0xfffffcff
 8003adc:	fffeffff 	.word	0xfffeffff
 8003ae0:	00001388 	.word	0x00001388
 8003ae4:	efffffff 	.word	0xefffffff
 8003ae8:	fffff3ff 	.word	0xfffff3ff
 8003aec:	fff3ffff 	.word	0xfff3ffff
 8003af0:	ffcfffff 	.word	0xffcfffff
 8003af4:	ffffcfff 	.word	0xffffcfff
 8003af8:	ffbfffff 	.word	0xffbfffff
 8003afc:	ffff3fff 	.word	0xffff3fff

08003b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0a8      	b.n	8003c64 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	2382      	movs	r3, #130	@ 0x82
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d009      	beq.n	8003b3a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	61da      	str	r2, [r3, #28]
 8003b2c:	e005      	b.n	8003b3a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	225d      	movs	r2, #93	@ 0x5d
 8003b44:	5c9b      	ldrb	r3, [r3, r2]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d107      	bne.n	8003b5c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	225c      	movs	r2, #92	@ 0x5c
 8003b50:	2100      	movs	r1, #0
 8003b52:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	0018      	movs	r0, r3
 8003b58:	f7fc ff96 	bl	8000a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	225d      	movs	r2, #93	@ 0x5d
 8003b60:	2102      	movs	r1, #2
 8003b62:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2140      	movs	r1, #64	@ 0x40
 8003b70:	438a      	bics	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	23e0      	movs	r3, #224	@ 0xe0
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d902      	bls.n	8003b86 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e002      	b.n	8003b8c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b86:	2380      	movs	r3, #128	@ 0x80
 8003b88:	015b      	lsls	r3, r3, #5
 8003b8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	23f0      	movs	r3, #240	@ 0xf0
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d008      	beq.n	8003baa <HAL_SPI_Init+0xaa>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	23e0      	movs	r3, #224	@ 0xe0
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d002      	beq.n	8003baa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	2382      	movs	r3, #130	@ 0x82
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6899      	ldr	r1, [r3, #8]
 8003bb8:	2384      	movs	r3, #132	@ 0x84
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	400b      	ands	r3, r1
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	400b      	ands	r3, r1
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	2101      	movs	r1, #1
 8003bd0:	400b      	ands	r3, r1
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6999      	ldr	r1, [r3, #24]
 8003bd8:	2380      	movs	r3, #128	@ 0x80
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	400b      	ands	r3, r1
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	2138      	movs	r1, #56	@ 0x38
 8003be6:	400b      	ands	r3, r1
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	2180      	movs	r1, #128	@ 0x80
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bfa:	2380      	movs	r3, #128	@ 0x80
 8003bfc:	019b      	lsls	r3, r3, #6
 8003bfe:	401a      	ands	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	2204      	movs	r2, #4
 8003c10:	401a      	ands	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	2110      	movs	r1, #16
 8003c18:	400b      	ands	r3, r1
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c20:	2108      	movs	r1, #8
 8003c22:	400b      	ands	r3, r1
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68d9      	ldr	r1, [r3, #12]
 8003c2a:	23f0      	movs	r3, #240	@ 0xf0
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	400b      	ands	r3, r1
 8003c30:	431a      	orrs	r2, r3
 8003c32:	0011      	movs	r1, r2
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	2380      	movs	r3, #128	@ 0x80
 8003c38:	015b      	lsls	r3, r3, #5
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4907      	ldr	r1, [pc, #28]	@ (8003c6c <HAL_SPI_Init+0x16c>)
 8003c50:	400a      	ands	r2, r1
 8003c52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	225d      	movs	r2, #93	@ 0x5d
 8003c5e:	2101      	movs	r1, #1
 8003c60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b004      	add	sp, #16
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	fffff7ff 	.word	0xfffff7ff

08003c70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	@ 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	001a      	movs	r2, r3
 8003c7e:	1cbb      	adds	r3, r7, #2
 8003c80:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c82:	2301      	movs	r3, #1
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c86:	2323      	movs	r3, #35	@ 0x23
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	225c      	movs	r2, #92	@ 0x5c
 8003c92:	5c9b      	ldrb	r3, [r3, r2]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_SPI_TransmitReceive+0x2c>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e1c4      	b.n	8004026 <HAL_SPI_TransmitReceive+0x3b6>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	225c      	movs	r2, #92	@ 0x5c
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ca4:	f7fd fb7a 	bl	800139c <HAL_GetTick>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cac:	201b      	movs	r0, #27
 8003cae:	183b      	adds	r3, r7, r0
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	215d      	movs	r1, #93	@ 0x5d
 8003cb4:	5c52      	ldrb	r2, [r2, r1]
 8003cb6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003cbe:	2312      	movs	r3, #18
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	1cba      	adds	r2, r7, #2
 8003cc4:	8812      	ldrh	r2, [r2, #0]
 8003cc6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cc8:	183b      	adds	r3, r7, r0
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d011      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x84>
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	2382      	movs	r3, #130	@ 0x82
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d107      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x7a>
 8003ce2:	183b      	adds	r3, r7, r0
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d004      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003cea:	2323      	movs	r3, #35	@ 0x23
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	2202      	movs	r2, #2
 8003cf0:	701a      	strb	r2, [r3, #0]
    goto error;
 8003cf2:	e191      	b.n	8004018 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d006      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x98>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x98>
 8003d00:	1cbb      	adds	r3, r7, #2
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003d08:	2323      	movs	r3, #35	@ 0x23
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d10:	e182      	b.n	8004018 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	225d      	movs	r2, #93	@ 0x5d
 8003d16:	5c9b      	ldrb	r3, [r3, r2]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d003      	beq.n	8003d26 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	225d      	movs	r2, #93	@ 0x5d
 8003d22:	2105      	movs	r1, #5
 8003d24:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1cba      	adds	r2, r7, #2
 8003d36:	2146      	movs	r1, #70	@ 0x46
 8003d38:	8812      	ldrh	r2, [r2, #0]
 8003d3a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1cba      	adds	r2, r7, #2
 8003d40:	2144      	movs	r1, #68	@ 0x44
 8003d42:	8812      	ldrh	r2, [r2, #0]
 8003d44:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1cba      	adds	r2, r7, #2
 8003d50:	8812      	ldrh	r2, [r2, #0]
 8003d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1cba      	adds	r2, r7, #2
 8003d58:	8812      	ldrh	r2, [r2, #0]
 8003d5a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	23e0      	movs	r3, #224	@ 0xe0
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d908      	bls.n	8003d86 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	49ac      	ldr	r1, [pc, #688]	@ (8004030 <HAL_SPI_TransmitReceive+0x3c0>)
 8003d80:	400a      	ands	r2, r1
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	e008      	b.n	8003d98 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2180      	movs	r1, #128	@ 0x80
 8003d92:	0149      	lsls	r1, r1, #5
 8003d94:	430a      	orrs	r2, r1
 8003d96:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2240      	movs	r2, #64	@ 0x40
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b40      	cmp	r3, #64	@ 0x40
 8003da4:	d007      	beq.n	8003db6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2140      	movs	r1, #64	@ 0x40
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	23e0      	movs	r3, #224	@ 0xe0
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d800      	bhi.n	8003dc4 <HAL_SPI_TransmitReceive+0x154>
 8003dc2:	e083      	b.n	8003ecc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_SPI_TransmitReceive+0x168>
 8003dcc:	2312      	movs	r3, #18
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d000      	beq.n	8003dd8 <HAL_SPI_TransmitReceive+0x168>
 8003dd6:	e06d      	b.n	8003eb4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ddc:	881a      	ldrh	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de8:	1c9a      	adds	r2, r3, #2
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dfc:	e05a      	b.n	8003eb4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2202      	movs	r2, #2
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d11b      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x1d4>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d016      	beq.n	8003e44 <HAL_SPI_TransmitReceive+0x1d4>
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d113      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e20:	881a      	ldrh	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	1c9a      	adds	r2, r3, #2
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d11c      	bne.n	8003e8c <HAL_SPI_TransmitReceive+0x21c>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2246      	movs	r2, #70	@ 0x46
 8003e56:	5a9b      	ldrh	r3, [r3, r2]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d016      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	b292      	uxth	r2, r2
 8003e6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	1c9a      	adds	r2, r3, #2
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2246      	movs	r2, #70	@ 0x46
 8003e7a:	5a9b      	ldrh	r3, [r3, r2]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b299      	uxth	r1, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2246      	movs	r2, #70	@ 0x46
 8003e86:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e8c:	f7fd fa86 	bl	800139c <HAL_GetTick>
 8003e90:	0002      	movs	r2, r0
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d80b      	bhi.n	8003eb4 <HAL_SPI_TransmitReceive+0x244>
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	d008      	beq.n	8003eb4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003ea2:	2323      	movs	r3, #35	@ 0x23
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	225d      	movs	r2, #93	@ 0x5d
 8003eae:	2101      	movs	r1, #1
 8003eb0:	5499      	strb	r1, [r3, r2]
        goto error;
 8003eb2:	e0b1      	b.n	8004018 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d19f      	bne.n	8003dfe <HAL_SPI_TransmitReceive+0x18e>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2246      	movs	r2, #70	@ 0x46
 8003ec2:	5a9b      	ldrh	r3, [r3, r2]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d199      	bne.n	8003dfe <HAL_SPI_TransmitReceive+0x18e>
 8003eca:	e089      	b.n	8003fe0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_SPI_TransmitReceive+0x270>
 8003ed4:	2312      	movs	r3, #18
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d000      	beq.n	8003ee0 <HAL_SPI_TransmitReceive+0x270>
 8003ede:	e074      	b.n	8003fca <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	7812      	ldrb	r2, [r2, #0]
 8003eec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f06:	e060      	b.n	8003fca <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d11c      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x2e0>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d017      	beq.n	8003f50 <HAL_SPI_TransmitReceive+0x2e0>
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d114      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	7812      	ldrb	r2, [r2, #0]
 8003f32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2201      	movs	r2, #1
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d11e      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x32c>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2246      	movs	r2, #70	@ 0x46
 8003f62:	5a9b      	ldrh	r3, [r3, r2]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d018      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	001a      	movs	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	7812      	ldrb	r2, [r2, #0]
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2246      	movs	r2, #70	@ 0x46
 8003f8a:	5a9b      	ldrh	r3, [r3, r2]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b299      	uxth	r1, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2246      	movs	r2, #70	@ 0x46
 8003f96:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f9c:	f7fd f9fe 	bl	800139c <HAL_GetTick>
 8003fa0:	0002      	movs	r2, r0
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d802      	bhi.n	8003fb2 <HAL_SPI_TransmitReceive+0x342>
 8003fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fae:	3301      	adds	r3, #1
 8003fb0:	d102      	bne.n	8003fb8 <HAL_SPI_TransmitReceive+0x348>
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d108      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003fb8:	2323      	movs	r3, #35	@ 0x23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	225d      	movs	r2, #93	@ 0x5d
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	5499      	strb	r1, [r3, r2]
        goto error;
 8003fc8:	e026      	b.n	8004018 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d199      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x298>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2246      	movs	r2, #70	@ 0x46
 8003fd8:	5a9b      	ldrh	r3, [r3, r2]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d193      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 fa70 	bl	80044cc <SPI_EndRxTxTransaction>
 8003fec:	1e03      	subs	r3, r0, #0
 8003fee:	d006      	beq.n	8003ffe <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003ff0:	2323      	movs	r3, #35	@ 0x23
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8004006:	2323      	movs	r3, #35	@ 0x23
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	2201      	movs	r2, #1
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e003      	b.n	8004018 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	225d      	movs	r2, #93	@ 0x5d
 8004014:	2101      	movs	r1, #1
 8004016:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	225c      	movs	r2, #92	@ 0x5c
 800401c:	2100      	movs	r1, #0
 800401e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004020:	2323      	movs	r3, #35	@ 0x23
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	781b      	ldrb	r3, [r3, #0]
}
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	b00a      	add	sp, #40	@ 0x28
 800402c:	bd80      	pop	{r7, pc}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	ffffefff 	.word	0xffffefff

08004034 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	099b      	lsrs	r3, r3, #6
 8004050:	001a      	movs	r2, r3
 8004052:	2301      	movs	r3, #1
 8004054:	4013      	ands	r3, r2
 8004056:	d10f      	bne.n	8004078 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2201      	movs	r2, #1
 800405c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800405e:	d00b      	beq.n	8004078 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	099b      	lsrs	r3, r3, #6
 8004064:	001a      	movs	r2, r3
 8004066:	2301      	movs	r3, #1
 8004068:	4013      	ands	r3, r2
 800406a:	d005      	beq.n	8004078 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	0010      	movs	r0, r2
 8004074:	4798      	blx	r3
    return;
 8004076:	e0d5      	b.n	8004224 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	001a      	movs	r2, r3
 800407e:	2301      	movs	r3, #1
 8004080:	4013      	ands	r3, r2
 8004082:	d00b      	beq.n	800409c <HAL_SPI_IRQHandler+0x68>
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	09db      	lsrs	r3, r3, #7
 8004088:	001a      	movs	r2, r3
 800408a:	2301      	movs	r3, #1
 800408c:	4013      	ands	r3, r2
 800408e:	d005      	beq.n	800409c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	0010      	movs	r0, r2
 8004098:	4798      	blx	r3
    return;
 800409a:	e0c3      	b.n	8004224 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	001a      	movs	r2, r3
 80040a2:	2301      	movs	r3, #1
 80040a4:	4013      	ands	r3, r2
 80040a6:	d10c      	bne.n	80040c2 <HAL_SPI_IRQHandler+0x8e>
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	099b      	lsrs	r3, r3, #6
 80040ac:	001a      	movs	r2, r3
 80040ae:	2301      	movs	r3, #1
 80040b0:	4013      	ands	r3, r2
 80040b2:	d106      	bne.n	80040c2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	001a      	movs	r2, r3
 80040ba:	2301      	movs	r3, #1
 80040bc:	4013      	ands	r3, r2
 80040be:	d100      	bne.n	80040c2 <HAL_SPI_IRQHandler+0x8e>
 80040c0:	e0b0      	b.n	8004224 <HAL_SPI_IRQHandler+0x1f0>
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	001a      	movs	r2, r3
 80040c8:	2301      	movs	r3, #1
 80040ca:	4013      	ands	r3, r2
 80040cc:	d100      	bne.n	80040d0 <HAL_SPI_IRQHandler+0x9c>
 80040ce:	e0a9      	b.n	8004224 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	099b      	lsrs	r3, r3, #6
 80040d4:	001a      	movs	r2, r3
 80040d6:	2301      	movs	r3, #1
 80040d8:	4013      	ands	r3, r2
 80040da:	d023      	beq.n	8004124 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	225d      	movs	r2, #93	@ 0x5d
 80040e0:	5c9b      	ldrb	r3, [r3, r2]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d011      	beq.n	800410c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ec:	2204      	movs	r2, #4
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	e00b      	b.n	8004124 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	693b      	ldr	r3, [r7, #16]
        return;
 8004122:	e07f      	b.n	8004224 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	001a      	movs	r2, r3
 800412a:	2301      	movs	r3, #1
 800412c:	4013      	ands	r3, r2
 800412e:	d014      	beq.n	800415a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004134:	2201      	movs	r2, #1
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2140      	movs	r1, #64	@ 0x40
 8004154:	438a      	bics	r2, r1
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	001a      	movs	r2, r3
 8004160:	2301      	movs	r3, #1
 8004162:	4013      	ands	r3, r2
 8004164:	d00c      	beq.n	8004180 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800416a:	2208      	movs	r2, #8
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004184:	2b00      	cmp	r3, #0
 8004186:	d04c      	beq.n	8004222 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	21e0      	movs	r1, #224	@ 0xe0
 8004194:	438a      	bics	r2, r1
 8004196:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	225d      	movs	r2, #93	@ 0x5d
 800419c:	2101      	movs	r1, #1
 800419e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2202      	movs	r2, #2
 80041a4:	4013      	ands	r3, r2
 80041a6:	d103      	bne.n	80041b0 <HAL_SPI_IRQHandler+0x17c>
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	2201      	movs	r2, #1
 80041ac:	4013      	ands	r3, r2
 80041ae:	d032      	beq.n	8004216 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2103      	movs	r1, #3
 80041bc:	438a      	bics	r2, r1
 80041be:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d010      	beq.n	80041ea <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041cc:	4a17      	ldr	r2, [pc, #92]	@ (800422c <HAL_SPI_IRQHandler+0x1f8>)
 80041ce:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d4:	0018      	movs	r0, r3
 80041d6:	f7fe fac3 	bl	8002760 <HAL_DMA_Abort_IT>
 80041da:	1e03      	subs	r3, r0, #0
 80041dc:	d005      	beq.n	80041ea <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e2:	2240      	movs	r2, #64	@ 0x40
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d016      	beq.n	8004220 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f6:	4a0d      	ldr	r2, [pc, #52]	@ (800422c <HAL_SPI_IRQHandler+0x1f8>)
 80041f8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fe:	0018      	movs	r0, r3
 8004200:	f7fe faae 	bl	8002760 <HAL_DMA_Abort_IT>
 8004204:	1e03      	subs	r3, r0, #0
 8004206:	d00b      	beq.n	8004220 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800420c:	2240      	movs	r2, #64	@ 0x40
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004214:	e004      	b.n	8004220 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0018      	movs	r0, r3
 800421a:	f000 f809 	bl	8004230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800421e:	e000      	b.n	8004222 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8004220:	46c0      	nop			@ (mov r8, r8)
    return;
 8004222:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004224:	46bd      	mov	sp, r7
 8004226:	b008      	add	sp, #32
 8004228:	bd80      	pop	{r7, pc}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	08004241 	.word	0x08004241

08004230 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004238:	46c0      	nop			@ (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b002      	add	sp, #8
 800423e:	bd80      	pop	{r7, pc}

08004240 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2246      	movs	r2, #70	@ 0x46
 8004252:	2100      	movs	r1, #0
 8004254:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	0018      	movs	r0, r3
 8004260:	f7ff ffe6 	bl	8004230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004264:	46c0      	nop			@ (mov r8, r8)
 8004266:	46bd      	mov	sp, r7
 8004268:	b004      	add	sp, #16
 800426a:	bd80      	pop	{r7, pc}

0800426c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	1dfb      	adds	r3, r7, #7
 800427a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800427c:	f7fd f88e 	bl	800139c <HAL_GetTick>
 8004280:	0002      	movs	r2, r0
 8004282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	18d3      	adds	r3, r2, r3
 800428a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800428c:	f7fd f886 	bl	800139c <HAL_GetTick>
 8004290:	0003      	movs	r3, r0
 8004292:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004294:	4b3a      	ldr	r3, [pc, #232]	@ (8004380 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	015b      	lsls	r3, r3, #5
 800429a:	0d1b      	lsrs	r3, r3, #20
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	4353      	muls	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042a2:	e058      	b.n	8004356 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	3301      	adds	r3, #1
 80042a8:	d055      	beq.n	8004356 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042aa:	f7fd f877 	bl	800139c <HAL_GetTick>
 80042ae:	0002      	movs	r2, r0
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d902      	bls.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d142      	bne.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	21e0      	movs	r1, #224	@ 0xe0
 80042cc:	438a      	bics	r2, r1
 80042ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	2382      	movs	r3, #130	@ 0x82
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	429a      	cmp	r2, r3
 80042da:	d113      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0x98>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	2380      	movs	r3, #128	@ 0x80
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d005      	beq.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d107      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2140      	movs	r1, #64	@ 0x40
 8004300:	438a      	bics	r2, r1
 8004302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004308:	2380      	movs	r3, #128	@ 0x80
 800430a:	019b      	lsls	r3, r3, #6
 800430c:	429a      	cmp	r2, r3
 800430e:	d110      	bne.n	8004332 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	491a      	ldr	r1, [pc, #104]	@ (8004384 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800431c:	400a      	ands	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2180      	movs	r1, #128	@ 0x80
 800432c:	0189      	lsls	r1, r1, #6
 800432e:	430a      	orrs	r2, r1
 8004330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	225d      	movs	r2, #93	@ 0x5d
 8004336:	2101      	movs	r1, #1
 8004338:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	225c      	movs	r2, #92	@ 0x5c
 800433e:	2100      	movs	r1, #0
 8004340:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e017      	b.n	8004376 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	3b01      	subs	r3, #1
 8004354:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	4013      	ands	r3, r2
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	425a      	negs	r2, r3
 8004366:	4153      	adcs	r3, r2
 8004368:	b2db      	uxtb	r3, r3
 800436a:	001a      	movs	r2, r3
 800436c:	1dfb      	adds	r3, r7, #7
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d197      	bne.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	0018      	movs	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	b008      	add	sp, #32
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			@ (mov r8, r8)
 8004380:	20000000 	.word	0x20000000
 8004384:	ffffdfff 	.word	0xffffdfff

08004388 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08a      	sub	sp, #40	@ 0x28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004396:	2317      	movs	r3, #23
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800439e:	f7fc fffd 	bl	800139c <HAL_GetTick>
 80043a2:	0002      	movs	r2, r0
 80043a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	18d3      	adds	r3, r2, r3
 80043ac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80043ae:	f7fc fff5 	bl	800139c <HAL_GetTick>
 80043b2:	0003      	movs	r3, r0
 80043b4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	330c      	adds	r3, #12
 80043bc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043be:	4b41      	ldr	r3, [pc, #260]	@ (80044c4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	0013      	movs	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	00da      	lsls	r2, r3, #3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	0d1b      	lsrs	r3, r3, #20
 80043ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d0:	4353      	muls	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043d4:	e068      	b.n	80044a8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	23c0      	movs	r3, #192	@ 0xc0
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	429a      	cmp	r2, r3
 80043de:	d10a      	bne.n	80043f6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d107      	bne.n	80043f6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	2117      	movs	r1, #23
 80043ee:	187b      	adds	r3, r7, r1
 80043f0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043f2:	187b      	adds	r3, r7, r1
 80043f4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	3301      	adds	r3, #1
 80043fa:	d055      	beq.n	80044a8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043fc:	f7fc ffce 	bl	800139c <HAL_GetTick>
 8004400:	0002      	movs	r2, r0
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004408:	429a      	cmp	r2, r3
 800440a:	d902      	bls.n	8004412 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800440c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440e:	2b00      	cmp	r3, #0
 8004410:	d142      	bne.n	8004498 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	21e0      	movs	r1, #224	@ 0xe0
 800441e:	438a      	bics	r2, r1
 8004420:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	2382      	movs	r3, #130	@ 0x82
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	429a      	cmp	r2, r3
 800442c:	d113      	bne.n	8004456 <SPI_WaitFifoStateUntilTimeout+0xce>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	2380      	movs	r3, #128	@ 0x80
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	429a      	cmp	r2, r3
 8004438:	d005      	beq.n	8004446 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	2380      	movs	r3, #128	@ 0x80
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	429a      	cmp	r2, r3
 8004444:	d107      	bne.n	8004456 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2140      	movs	r1, #64	@ 0x40
 8004452:	438a      	bics	r2, r1
 8004454:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800445a:	2380      	movs	r3, #128	@ 0x80
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	429a      	cmp	r2, r3
 8004460:	d110      	bne.n	8004484 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4916      	ldr	r1, [pc, #88]	@ (80044c8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800446e:	400a      	ands	r2, r1
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2180      	movs	r1, #128	@ 0x80
 800447e:	0189      	lsls	r1, r1, #6
 8004480:	430a      	orrs	r2, r1
 8004482:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	225d      	movs	r2, #93	@ 0x5d
 8004488:	2101      	movs	r1, #1
 800448a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	225c      	movs	r2, #92	@ 0x5c
 8004490:	2100      	movs	r1, #0
 8004492:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e010      	b.n	80044ba <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	4013      	ands	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d18e      	bne.n	80043d6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b00a      	add	sp, #40	@ 0x28
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	20000000 	.word	0x20000000
 80044c8:	ffffdfff 	.word	0xffffdfff

080044cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	23c0      	movs	r3, #192	@ 0xc0
 80044dc:	0159      	lsls	r1, r3, #5
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	0013      	movs	r3, r2
 80044e6:	2200      	movs	r2, #0
 80044e8:	f7ff ff4e 	bl	8004388 <SPI_WaitFifoStateUntilTimeout>
 80044ec:	1e03      	subs	r3, r0, #0
 80044ee:	d007      	beq.n	8004500 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f4:	2220      	movs	r2, #32
 80044f6:	431a      	orrs	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e027      	b.n	8004550 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	0013      	movs	r3, r2
 800450a:	2200      	movs	r2, #0
 800450c:	2180      	movs	r1, #128	@ 0x80
 800450e:	f7ff fead 	bl	800426c <SPI_WaitFlagStateUntilTimeout>
 8004512:	1e03      	subs	r3, r0, #0
 8004514:	d007      	beq.n	8004526 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451a:	2220      	movs	r2, #32
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e014      	b.n	8004550 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	23c0      	movs	r3, #192	@ 0xc0
 800452a:	00d9      	lsls	r1, r3, #3
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	0013      	movs	r3, r2
 8004534:	2200      	movs	r2, #0
 8004536:	f7ff ff27 	bl	8004388 <SPI_WaitFifoStateUntilTimeout>
 800453a:	1e03      	subs	r3, r0, #0
 800453c:	d007      	beq.n	800454e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004542:	2220      	movs	r2, #32
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e000      	b.n	8004550 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	b004      	add	sp, #16
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e04a      	b.n	8004600 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	223d      	movs	r2, #61	@ 0x3d
 800456e:	5c9b      	ldrb	r3, [r3, r2]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d107      	bne.n	8004586 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	223c      	movs	r2, #60	@ 0x3c
 800457a:	2100      	movs	r1, #0
 800457c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0018      	movs	r0, r3
 8004582:	f7fc fd69 	bl	8001058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	223d      	movs	r2, #61	@ 0x3d
 800458a:	2102      	movs	r1, #2
 800458c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3304      	adds	r3, #4
 8004596:	0019      	movs	r1, r3
 8004598:	0010      	movs	r0, r2
 800459a:	f000 fde1 	bl	8005160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2248      	movs	r2, #72	@ 0x48
 80045a2:	2101      	movs	r1, #1
 80045a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	223e      	movs	r2, #62	@ 0x3e
 80045aa:	2101      	movs	r1, #1
 80045ac:	5499      	strb	r1, [r3, r2]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	223f      	movs	r2, #63	@ 0x3f
 80045b2:	2101      	movs	r1, #1
 80045b4:	5499      	strb	r1, [r3, r2]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2240      	movs	r2, #64	@ 0x40
 80045ba:	2101      	movs	r1, #1
 80045bc:	5499      	strb	r1, [r3, r2]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2241      	movs	r2, #65	@ 0x41
 80045c2:	2101      	movs	r1, #1
 80045c4:	5499      	strb	r1, [r3, r2]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2242      	movs	r2, #66	@ 0x42
 80045ca:	2101      	movs	r1, #1
 80045cc:	5499      	strb	r1, [r3, r2]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2243      	movs	r2, #67	@ 0x43
 80045d2:	2101      	movs	r1, #1
 80045d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2244      	movs	r2, #68	@ 0x44
 80045da:	2101      	movs	r1, #1
 80045dc:	5499      	strb	r1, [r3, r2]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2245      	movs	r2, #69	@ 0x45
 80045e2:	2101      	movs	r1, #1
 80045e4:	5499      	strb	r1, [r3, r2]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2246      	movs	r2, #70	@ 0x46
 80045ea:	2101      	movs	r1, #1
 80045ec:	5499      	strb	r1, [r3, r2]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2247      	movs	r2, #71	@ 0x47
 80045f2:	2101      	movs	r1, #1
 80045f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	223d      	movs	r2, #61	@ 0x3d
 80045fa:	2101      	movs	r1, #1
 80045fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b002      	add	sp, #8
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	223d      	movs	r2, #61	@ 0x3d
 8004614:	5c9b      	ldrb	r3, [r3, r2]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d001      	beq.n	8004620 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e035      	b.n	800468c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	223d      	movs	r2, #61	@ 0x3d
 8004624:	2102      	movs	r1, #2
 8004626:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a19      	ldr	r2, [pc, #100]	@ (8004694 <HAL_TIM_Base_Start+0x8c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00a      	beq.n	8004648 <HAL_TIM_Base_Start+0x40>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	2380      	movs	r3, #128	@ 0x80
 8004638:	05db      	lsls	r3, r3, #23
 800463a:	429a      	cmp	r2, r3
 800463c:	d004      	beq.n	8004648 <HAL_TIM_Base_Start+0x40>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a15      	ldr	r2, [pc, #84]	@ (8004698 <HAL_TIM_Base_Start+0x90>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d116      	bne.n	8004676 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	4a13      	ldr	r2, [pc, #76]	@ (800469c <HAL_TIM_Base_Start+0x94>)
 8004650:	4013      	ands	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b06      	cmp	r3, #6
 8004658:	d016      	beq.n	8004688 <HAL_TIM_Base_Start+0x80>
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	2380      	movs	r3, #128	@ 0x80
 800465e:	025b      	lsls	r3, r3, #9
 8004660:	429a      	cmp	r2, r3
 8004662:	d011      	beq.n	8004688 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2101      	movs	r1, #1
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004674:	e008      	b.n	8004688 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2101      	movs	r1, #1
 8004682:	430a      	orrs	r2, r1
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e000      	b.n	800468a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004688:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	0018      	movs	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	b004      	add	sp, #16
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40000400 	.word	0x40000400
 800469c:	00010007 	.word	0x00010007

080046a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e04a      	b.n	8004748 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	223d      	movs	r2, #61	@ 0x3d
 80046b6:	5c9b      	ldrb	r3, [r3, r2]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d107      	bne.n	80046ce <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	223c      	movs	r2, #60	@ 0x3c
 80046c2:	2100      	movs	r1, #0
 80046c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f000 f841 	bl	8004750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	223d      	movs	r2, #61	@ 0x3d
 80046d2:	2102      	movs	r1, #2
 80046d4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	0019      	movs	r1, r3
 80046e0:	0010      	movs	r0, r2
 80046e2:	f000 fd3d 	bl	8005160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2248      	movs	r2, #72	@ 0x48
 80046ea:	2101      	movs	r1, #1
 80046ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	223e      	movs	r2, #62	@ 0x3e
 80046f2:	2101      	movs	r1, #1
 80046f4:	5499      	strb	r1, [r3, r2]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	223f      	movs	r2, #63	@ 0x3f
 80046fa:	2101      	movs	r1, #1
 80046fc:	5499      	strb	r1, [r3, r2]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2240      	movs	r2, #64	@ 0x40
 8004702:	2101      	movs	r1, #1
 8004704:	5499      	strb	r1, [r3, r2]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2241      	movs	r2, #65	@ 0x41
 800470a:	2101      	movs	r1, #1
 800470c:	5499      	strb	r1, [r3, r2]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2242      	movs	r2, #66	@ 0x42
 8004712:	2101      	movs	r1, #1
 8004714:	5499      	strb	r1, [r3, r2]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2243      	movs	r2, #67	@ 0x43
 800471a:	2101      	movs	r1, #1
 800471c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2244      	movs	r2, #68	@ 0x44
 8004722:	2101      	movs	r1, #1
 8004724:	5499      	strb	r1, [r3, r2]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2245      	movs	r2, #69	@ 0x45
 800472a:	2101      	movs	r1, #1
 800472c:	5499      	strb	r1, [r3, r2]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2246      	movs	r2, #70	@ 0x46
 8004732:	2101      	movs	r1, #1
 8004734:	5499      	strb	r1, [r3, r2]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2247      	movs	r2, #71	@ 0x47
 800473a:	2101      	movs	r1, #1
 800473c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	223d      	movs	r2, #61	@ 0x3d
 8004742:	2101      	movs	r1, #1
 8004744:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	0018      	movs	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	b002      	add	sp, #8
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004758:	46c0      	nop			@ (mov r8, r8)
 800475a:	46bd      	mov	sp, r7
 800475c:	b002      	add	sp, #8
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d108      	bne.n	8004782 <HAL_TIM_PWM_Start+0x22>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	223e      	movs	r2, #62	@ 0x3e
 8004774:	5c9b      	ldrb	r3, [r3, r2]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	1e5a      	subs	r2, r3, #1
 800477c:	4193      	sbcs	r3, r2
 800477e:	b2db      	uxtb	r3, r3
 8004780:	e037      	b.n	80047f2 <HAL_TIM_PWM_Start+0x92>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d108      	bne.n	800479a <HAL_TIM_PWM_Start+0x3a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	223f      	movs	r2, #63	@ 0x3f
 800478c:	5c9b      	ldrb	r3, [r3, r2]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	1e5a      	subs	r2, r3, #1
 8004794:	4193      	sbcs	r3, r2
 8004796:	b2db      	uxtb	r3, r3
 8004798:	e02b      	b.n	80047f2 <HAL_TIM_PWM_Start+0x92>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d108      	bne.n	80047b2 <HAL_TIM_PWM_Start+0x52>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2240      	movs	r2, #64	@ 0x40
 80047a4:	5c9b      	ldrb	r3, [r3, r2]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	1e5a      	subs	r2, r3, #1
 80047ac:	4193      	sbcs	r3, r2
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	e01f      	b.n	80047f2 <HAL_TIM_PWM_Start+0x92>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b0c      	cmp	r3, #12
 80047b6:	d108      	bne.n	80047ca <HAL_TIM_PWM_Start+0x6a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2241      	movs	r2, #65	@ 0x41
 80047bc:	5c9b      	ldrb	r3, [r3, r2]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	1e5a      	subs	r2, r3, #1
 80047c4:	4193      	sbcs	r3, r2
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	e013      	b.n	80047f2 <HAL_TIM_PWM_Start+0x92>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d108      	bne.n	80047e2 <HAL_TIM_PWM_Start+0x82>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2242      	movs	r2, #66	@ 0x42
 80047d4:	5c9b      	ldrb	r3, [r3, r2]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	1e5a      	subs	r2, r3, #1
 80047dc:	4193      	sbcs	r3, r2
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	e007      	b.n	80047f2 <HAL_TIM_PWM_Start+0x92>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2243      	movs	r2, #67	@ 0x43
 80047e6:	5c9b      	ldrb	r3, [r3, r2]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	1e5a      	subs	r2, r3, #1
 80047ee:	4193      	sbcs	r3, r2
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e081      	b.n	80048fe <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <HAL_TIM_PWM_Start+0xaa>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	223e      	movs	r2, #62	@ 0x3e
 8004804:	2102      	movs	r1, #2
 8004806:	5499      	strb	r1, [r3, r2]
 8004808:	e023      	b.n	8004852 <HAL_TIM_PWM_Start+0xf2>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d104      	bne.n	800481a <HAL_TIM_PWM_Start+0xba>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	223f      	movs	r2, #63	@ 0x3f
 8004814:	2102      	movs	r1, #2
 8004816:	5499      	strb	r1, [r3, r2]
 8004818:	e01b      	b.n	8004852 <HAL_TIM_PWM_Start+0xf2>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0xca>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2240      	movs	r2, #64	@ 0x40
 8004824:	2102      	movs	r1, #2
 8004826:	5499      	strb	r1, [r3, r2]
 8004828:	e013      	b.n	8004852 <HAL_TIM_PWM_Start+0xf2>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b0c      	cmp	r3, #12
 800482e:	d104      	bne.n	800483a <HAL_TIM_PWM_Start+0xda>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2241      	movs	r2, #65	@ 0x41
 8004834:	2102      	movs	r1, #2
 8004836:	5499      	strb	r1, [r3, r2]
 8004838:	e00b      	b.n	8004852 <HAL_TIM_PWM_Start+0xf2>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b10      	cmp	r3, #16
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Start+0xea>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2242      	movs	r2, #66	@ 0x42
 8004844:	2102      	movs	r1, #2
 8004846:	5499      	strb	r1, [r3, r2]
 8004848:	e003      	b.n	8004852 <HAL_TIM_PWM_Start+0xf2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2243      	movs	r2, #67	@ 0x43
 800484e:	2102      	movs	r1, #2
 8004850:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6839      	ldr	r1, [r7, #0]
 8004858:	2201      	movs	r2, #1
 800485a:	0018      	movs	r0, r3
 800485c:	f001 f83c 	bl	80058d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a28      	ldr	r2, [pc, #160]	@ (8004908 <HAL_TIM_PWM_Start+0x1a8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d009      	beq.n	800487e <HAL_TIM_PWM_Start+0x11e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a27      	ldr	r2, [pc, #156]	@ (800490c <HAL_TIM_PWM_Start+0x1ac>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_TIM_PWM_Start+0x11e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a25      	ldr	r2, [pc, #148]	@ (8004910 <HAL_TIM_PWM_Start+0x1b0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d101      	bne.n	8004882 <HAL_TIM_PWM_Start+0x122>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_TIM_PWM_Start+0x124>
 8004882:	2300      	movs	r3, #0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2180      	movs	r1, #128	@ 0x80
 8004894:	0209      	lsls	r1, r1, #8
 8004896:	430a      	orrs	r2, r1
 8004898:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1a      	ldr	r2, [pc, #104]	@ (8004908 <HAL_TIM_PWM_Start+0x1a8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00a      	beq.n	80048ba <HAL_TIM_PWM_Start+0x15a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	2380      	movs	r3, #128	@ 0x80
 80048aa:	05db      	lsls	r3, r3, #23
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d004      	beq.n	80048ba <HAL_TIM_PWM_Start+0x15a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a17      	ldr	r2, [pc, #92]	@ (8004914 <HAL_TIM_PWM_Start+0x1b4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d116      	bne.n	80048e8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4a15      	ldr	r2, [pc, #84]	@ (8004918 <HAL_TIM_PWM_Start+0x1b8>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b06      	cmp	r3, #6
 80048ca:	d016      	beq.n	80048fa <HAL_TIM_PWM_Start+0x19a>
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	2380      	movs	r3, #128	@ 0x80
 80048d0:	025b      	lsls	r3, r3, #9
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d011      	beq.n	80048fa <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2101      	movs	r1, #1
 80048e2:	430a      	orrs	r2, r1
 80048e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e6:	e008      	b.n	80048fa <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2101      	movs	r1, #1
 80048f4:	430a      	orrs	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	e000      	b.n	80048fc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fa:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	0018      	movs	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	b004      	add	sp, #16
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			@ (mov r8, r8)
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40014400 	.word	0x40014400
 8004910:	40014800 	.word	0x40014800
 8004914:	40000400 	.word	0x40000400
 8004918:	00010007 	.word	0x00010007

0800491c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004926:	230f      	movs	r3, #15
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	2200      	movs	r2, #0
 800492c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d108      	bne.n	8004946 <HAL_TIM_PWM_Start_IT+0x2a>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	223e      	movs	r2, #62	@ 0x3e
 8004938:	5c9b      	ldrb	r3, [r3, r2]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	1e5a      	subs	r2, r3, #1
 8004940:	4193      	sbcs	r3, r2
 8004942:	b2db      	uxtb	r3, r3
 8004944:	e037      	b.n	80049b6 <HAL_TIM_PWM_Start_IT+0x9a>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b04      	cmp	r3, #4
 800494a:	d108      	bne.n	800495e <HAL_TIM_PWM_Start_IT+0x42>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	223f      	movs	r2, #63	@ 0x3f
 8004950:	5c9b      	ldrb	r3, [r3, r2]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	1e5a      	subs	r2, r3, #1
 8004958:	4193      	sbcs	r3, r2
 800495a:	b2db      	uxtb	r3, r3
 800495c:	e02b      	b.n	80049b6 <HAL_TIM_PWM_Start_IT+0x9a>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d108      	bne.n	8004976 <HAL_TIM_PWM_Start_IT+0x5a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2240      	movs	r2, #64	@ 0x40
 8004968:	5c9b      	ldrb	r3, [r3, r2]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	1e5a      	subs	r2, r3, #1
 8004970:	4193      	sbcs	r3, r2
 8004972:	b2db      	uxtb	r3, r3
 8004974:	e01f      	b.n	80049b6 <HAL_TIM_PWM_Start_IT+0x9a>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b0c      	cmp	r3, #12
 800497a:	d108      	bne.n	800498e <HAL_TIM_PWM_Start_IT+0x72>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2241      	movs	r2, #65	@ 0x41
 8004980:	5c9b      	ldrb	r3, [r3, r2]
 8004982:	b2db      	uxtb	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	1e5a      	subs	r2, r3, #1
 8004988:	4193      	sbcs	r3, r2
 800498a:	b2db      	uxtb	r3, r3
 800498c:	e013      	b.n	80049b6 <HAL_TIM_PWM_Start_IT+0x9a>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b10      	cmp	r3, #16
 8004992:	d108      	bne.n	80049a6 <HAL_TIM_PWM_Start_IT+0x8a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2242      	movs	r2, #66	@ 0x42
 8004998:	5c9b      	ldrb	r3, [r3, r2]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	1e5a      	subs	r2, r3, #1
 80049a0:	4193      	sbcs	r3, r2
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	e007      	b.n	80049b6 <HAL_TIM_PWM_Start_IT+0x9a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2243      	movs	r2, #67	@ 0x43
 80049aa:	5c9b      	ldrb	r3, [r3, r2]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	1e5a      	subs	r2, r3, #1
 80049b2:	4193      	sbcs	r3, r2
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_TIM_PWM_Start_IT+0xa2>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e0c4      	b.n	8004b48 <HAL_TIM_PWM_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d104      	bne.n	80049ce <HAL_TIM_PWM_Start_IT+0xb2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	223e      	movs	r2, #62	@ 0x3e
 80049c8:	2102      	movs	r1, #2
 80049ca:	5499      	strb	r1, [r3, r2]
 80049cc:	e023      	b.n	8004a16 <HAL_TIM_PWM_Start_IT+0xfa>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d104      	bne.n	80049de <HAL_TIM_PWM_Start_IT+0xc2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	223f      	movs	r2, #63	@ 0x3f
 80049d8:	2102      	movs	r1, #2
 80049da:	5499      	strb	r1, [r3, r2]
 80049dc:	e01b      	b.n	8004a16 <HAL_TIM_PWM_Start_IT+0xfa>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_PWM_Start_IT+0xd2>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2240      	movs	r2, #64	@ 0x40
 80049e8:	2102      	movs	r1, #2
 80049ea:	5499      	strb	r1, [r3, r2]
 80049ec:	e013      	b.n	8004a16 <HAL_TIM_PWM_Start_IT+0xfa>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b0c      	cmp	r3, #12
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_PWM_Start_IT+0xe2>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2241      	movs	r2, #65	@ 0x41
 80049f8:	2102      	movs	r1, #2
 80049fa:	5499      	strb	r1, [r3, r2]
 80049fc:	e00b      	b.n	8004a16 <HAL_TIM_PWM_Start_IT+0xfa>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Start_IT+0xf2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2242      	movs	r2, #66	@ 0x42
 8004a08:	2102      	movs	r1, #2
 8004a0a:	5499      	strb	r1, [r3, r2]
 8004a0c:	e003      	b.n	8004a16 <HAL_TIM_PWM_Start_IT+0xfa>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2243      	movs	r2, #67	@ 0x43
 8004a12:	2102      	movs	r1, #2
 8004a14:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b0c      	cmp	r3, #12
 8004a1a:	d02a      	beq.n	8004a72 <HAL_TIM_PWM_Start_IT+0x156>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	d830      	bhi.n	8004a84 <HAL_TIM_PWM_Start_IT+0x168>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d01b      	beq.n	8004a60 <HAL_TIM_PWM_Start_IT+0x144>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d82a      	bhi.n	8004a84 <HAL_TIM_PWM_Start_IT+0x168>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_TIM_PWM_Start_IT+0x120>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d009      	beq.n	8004a4e <HAL_TIM_PWM_Start_IT+0x132>
 8004a3a:	e023      	b.n	8004a84 <HAL_TIM_PWM_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2102      	movs	r1, #2
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	60da      	str	r2, [r3, #12]
      break;
 8004a4c:	e01f      	b.n	8004a8e <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2104      	movs	r1, #4
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	60da      	str	r2, [r3, #12]
      break;
 8004a5e:	e016      	b.n	8004a8e <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2108      	movs	r1, #8
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	60da      	str	r2, [r3, #12]
      break;
 8004a70:	e00d      	b.n	8004a8e <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2110      	movs	r1, #16
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	60da      	str	r2, [r3, #12]
      break;
 8004a82:	e004      	b.n	8004a8e <HAL_TIM_PWM_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a84:	230f      	movs	r3, #15
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	2201      	movs	r2, #1
 8004a8a:	701a      	strb	r2, [r3, #0]
      break;
 8004a8c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8004a8e:	230f      	movs	r3, #15
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d154      	bne.n	8004b42 <HAL_TIM_PWM_Start_IT+0x226>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6839      	ldr	r1, [r7, #0]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f000 ff19 	bl	80058d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a29      	ldr	r2, [pc, #164]	@ (8004b50 <HAL_TIM_PWM_Start_IT+0x234>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d009      	beq.n	8004ac4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a27      	ldr	r2, [pc, #156]	@ (8004b54 <HAL_TIM_PWM_Start_IT+0x238>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a26      	ldr	r2, [pc, #152]	@ (8004b58 <HAL_TIM_PWM_Start_IT+0x23c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIM_PWM_Start_IT+0x1ac>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <HAL_TIM_PWM_Start_IT+0x1ae>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_TIM_PWM_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2180      	movs	r1, #128	@ 0x80
 8004ada:	0209      	lsls	r1, r1, #8
 8004adc:	430a      	orrs	r2, r1
 8004ade:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b50 <HAL_TIM_PWM_Start_IT+0x234>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00a      	beq.n	8004b00 <HAL_TIM_PWM_Start_IT+0x1e4>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	2380      	movs	r3, #128	@ 0x80
 8004af0:	05db      	lsls	r3, r3, #23
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d004      	beq.n	8004b00 <HAL_TIM_PWM_Start_IT+0x1e4>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a18      	ldr	r2, [pc, #96]	@ (8004b5c <HAL_TIM_PWM_Start_IT+0x240>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d116      	bne.n	8004b2e <HAL_TIM_PWM_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	4a16      	ldr	r2, [pc, #88]	@ (8004b60 <HAL_TIM_PWM_Start_IT+0x244>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b06      	cmp	r3, #6
 8004b10:	d016      	beq.n	8004b40 <HAL_TIM_PWM_Start_IT+0x224>
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	2380      	movs	r3, #128	@ 0x80
 8004b16:	025b      	lsls	r3, r3, #9
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d011      	beq.n	8004b40 <HAL_TIM_PWM_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2101      	movs	r1, #1
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2c:	e008      	b.n	8004b40 <HAL_TIM_PWM_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e000      	b.n	8004b42 <HAL_TIM_PWM_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b40:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8004b42:	230f      	movs	r3, #15
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	781b      	ldrb	r3, [r3, #0]
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b004      	add	sp, #16
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	00010007 	.word	0x00010007

08004b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	4013      	ands	r3, r2
 8004b82:	d021      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2202      	movs	r2, #2
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d01d      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2203      	movs	r2, #3
 8004b92:	4252      	negs	r2, r2
 8004b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2203      	movs	r2, #3
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d004      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	0018      	movs	r0, r3
 8004bac:	f000 fac0 	bl	8005130 <HAL_TIM_IC_CaptureCallback>
 8004bb0:	e007      	b.n	8004bc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7fc fb31 	bl	800121c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 fabf 	bl	8005140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2204      	movs	r2, #4
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d022      	beq.n	8004c16 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d01e      	beq.n	8004c16 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2205      	movs	r2, #5
 8004bde:	4252      	negs	r2, r2
 8004be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	23c0      	movs	r3, #192	@ 0xc0
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d004      	beq.n	8004c00 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f000 fa99 	bl	8005130 <HAL_TIM_IC_CaptureCallback>
 8004bfe:	e007      	b.n	8004c10 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	0018      	movs	r0, r3
 8004c04:	f7fc fb0a 	bl	800121c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 fa98 	bl	8005140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2208      	movs	r2, #8
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d021      	beq.n	8004c62 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2208      	movs	r2, #8
 8004c22:	4013      	ands	r3, r2
 8004c24:	d01d      	beq.n	8004c62 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2209      	movs	r2, #9
 8004c2c:	4252      	negs	r2, r2
 8004c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2204      	movs	r2, #4
 8004c34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d004      	beq.n	8004c4c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	0018      	movs	r0, r3
 8004c46:	f000 fa73 	bl	8005130 <HAL_TIM_IC_CaptureCallback>
 8004c4a:	e007      	b.n	8004c5c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f7fc fae4 	bl	800121c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	0018      	movs	r0, r3
 8004c58:	f000 fa72 	bl	8005140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2210      	movs	r2, #16
 8004c66:	4013      	ands	r3, r2
 8004c68:	d022      	beq.n	8004cb0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2210      	movs	r2, #16
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d01e      	beq.n	8004cb0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2211      	movs	r2, #17
 8004c78:	4252      	negs	r2, r2
 8004c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2208      	movs	r2, #8
 8004c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	23c0      	movs	r3, #192	@ 0xc0
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d004      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	0018      	movs	r0, r3
 8004c94:	f000 fa4c 	bl	8005130 <HAL_TIM_IC_CaptureCallback>
 8004c98:	e007      	b.n	8004caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f7fc fabd 	bl	800121c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f000 fa4b 	bl	8005140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d00c      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d008      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	4252      	negs	r2, r2
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f000 fa27 	bl	8005120 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2280      	movs	r2, #128	@ 0x80
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d104      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	2380      	movs	r3, #128	@ 0x80
 8004cde:	019b      	lsls	r3, r3, #6
 8004ce0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ce2:	d00b      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2280      	movs	r2, #128	@ 0x80
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d007      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8004d6c <HAL_TIM_IRQHandler+0x208>)
 8004cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f001 f84d 	bl	8005d96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	2380      	movs	r3, #128	@ 0x80
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	4013      	ands	r3, r2
 8004d04:	d00b      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2280      	movs	r2, #128	@ 0x80
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d007      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a17      	ldr	r2, [pc, #92]	@ (8004d70 <HAL_TIM_IRQHandler+0x20c>)
 8004d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f001 f844 	bl	8005da6 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2240      	movs	r2, #64	@ 0x40
 8004d22:	4013      	ands	r3, r2
 8004d24:	d00c      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2240      	movs	r2, #64	@ 0x40
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d008      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2241      	movs	r2, #65	@ 0x41
 8004d34:	4252      	negs	r2, r2
 8004d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f000 fa08 	bl	8005150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2220      	movs	r2, #32
 8004d44:	4013      	ands	r3, r2
 8004d46:	d00c      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d008      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2221      	movs	r2, #33	@ 0x21
 8004d56:	4252      	negs	r2, r2
 8004d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f001 f812 	bl	8005d86 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d62:	46c0      	nop			@ (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			@ (mov r8, r8)
 8004d6c:	ffffdf7f 	.word	0xffffdf7f
 8004d70:	fffffeff 	.word	0xfffffeff

08004d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d80:	2317      	movs	r3, #23
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	223c      	movs	r2, #60	@ 0x3c
 8004d8c:	5c9b      	ldrb	r3, [r3, r2]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e0e5      	b.n	8004f62 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	223c      	movs	r2, #60	@ 0x3c
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b14      	cmp	r3, #20
 8004da2:	d900      	bls.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004da4:	e0d1      	b.n	8004f4a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	009a      	lsls	r2, r3, #2
 8004daa:	4b70      	ldr	r3, [pc, #448]	@ (8004f6c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004dac:	18d3      	adds	r3, r2, r3
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	0011      	movs	r1, r2
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f000 fa54 	bl	8005268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2108      	movs	r1, #8
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2104      	movs	r1, #4
 8004ddc:	438a      	bics	r2, r1
 8004dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6999      	ldr	r1, [r3, #24]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	619a      	str	r2, [r3, #24]
      break;
 8004df2:	e0af      	b.n	8004f54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	0011      	movs	r1, r2
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f000 fab3 	bl	8005368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2180      	movs	r1, #128	@ 0x80
 8004e0e:	0109      	lsls	r1, r1, #4
 8004e10:	430a      	orrs	r2, r1
 8004e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4954      	ldr	r1, [pc, #336]	@ (8004f70 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004e20:	400a      	ands	r2, r1
 8004e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6999      	ldr	r1, [r3, #24]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	021a      	lsls	r2, r3, #8
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	619a      	str	r2, [r3, #24]
      break;
 8004e38:	e08c      	b.n	8004f54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	0011      	movs	r1, r2
 8004e42:	0018      	movs	r0, r3
 8004e44:	f000 fb0e 	bl	8005464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69da      	ldr	r2, [r3, #28]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2108      	movs	r1, #8
 8004e54:	430a      	orrs	r2, r1
 8004e56:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69da      	ldr	r2, [r3, #28]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2104      	movs	r1, #4
 8004e64:	438a      	bics	r2, r1
 8004e66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69d9      	ldr	r1, [r3, #28]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	61da      	str	r2, [r3, #28]
      break;
 8004e7a:	e06b      	b.n	8004f54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	0011      	movs	r1, r2
 8004e84:	0018      	movs	r0, r3
 8004e86:	f000 fb6f 	bl	8005568 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2180      	movs	r1, #128	@ 0x80
 8004e96:	0109      	lsls	r1, r1, #4
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69da      	ldr	r2, [r3, #28]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4932      	ldr	r1, [pc, #200]	@ (8004f70 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004ea8:	400a      	ands	r2, r1
 8004eaa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69d9      	ldr	r1, [r3, #28]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	021a      	lsls	r2, r3, #8
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	61da      	str	r2, [r3, #28]
      break;
 8004ec0:	e048      	b.n	8004f54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	0011      	movs	r1, r2
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f000 fbb0 	bl	8005630 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2108      	movs	r1, #8
 8004edc:	430a      	orrs	r2, r1
 8004ede:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2104      	movs	r1, #4
 8004eec:	438a      	bics	r2, r1
 8004eee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f02:	e027      	b.n	8004f54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	0011      	movs	r1, r2
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f000 fbe9 	bl	80056e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2180      	movs	r1, #128	@ 0x80
 8004f1e:	0109      	lsls	r1, r1, #4
 8004f20:	430a      	orrs	r2, r1
 8004f22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4910      	ldr	r1, [pc, #64]	@ (8004f70 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004f30:	400a      	ands	r2, r1
 8004f32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	021a      	lsls	r2, r3, #8
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f48:	e004      	b.n	8004f54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004f4a:	2317      	movs	r3, #23
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	2201      	movs	r2, #1
 8004f50:	701a      	strb	r2, [r3, #0]
      break;
 8004f52:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	223c      	movs	r2, #60	@ 0x3c
 8004f58:	2100      	movs	r1, #0
 8004f5a:	5499      	strb	r1, [r3, r2]

  return status;
 8004f5c:	2317      	movs	r3, #23
 8004f5e:	18fb      	adds	r3, r7, r3
 8004f60:	781b      	ldrb	r3, [r3, #0]
}
 8004f62:	0018      	movs	r0, r3
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b006      	add	sp, #24
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	08005eac 	.word	0x08005eac
 8004f70:	fffffbff 	.word	0xfffffbff

08004f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	230f      	movs	r3, #15
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	223c      	movs	r2, #60	@ 0x3c
 8004f8a:	5c9b      	ldrb	r3, [r3, r2]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_TIM_ConfigClockSource+0x20>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e0bc      	b.n	800510e <HAL_TIM_ConfigClockSource+0x19a>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	223c      	movs	r2, #60	@ 0x3c
 8004f98:	2101      	movs	r1, #1
 8004f9a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	223d      	movs	r2, #61	@ 0x3d
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4a5a      	ldr	r2, [pc, #360]	@ (8005118 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4a59      	ldr	r2, [pc, #356]	@ (800511c <HAL_TIM_ConfigClockSource+0x1a8>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2280      	movs	r2, #128	@ 0x80
 8004fca:	0192      	lsls	r2, r2, #6
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d040      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0xde>
 8004fd0:	2280      	movs	r2, #128	@ 0x80
 8004fd2:	0192      	lsls	r2, r2, #6
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d900      	bls.n	8004fda <HAL_TIM_ConfigClockSource+0x66>
 8004fd8:	e088      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x178>
 8004fda:	2280      	movs	r2, #128	@ 0x80
 8004fdc:	0152      	lsls	r2, r2, #5
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d100      	bne.n	8004fe4 <HAL_TIM_ConfigClockSource+0x70>
 8004fe2:	e088      	b.n	80050f6 <HAL_TIM_ConfigClockSource+0x182>
 8004fe4:	2280      	movs	r2, #128	@ 0x80
 8004fe6:	0152      	lsls	r2, r2, #5
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d900      	bls.n	8004fee <HAL_TIM_ConfigClockSource+0x7a>
 8004fec:	e07e      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x178>
 8004fee:	2b70      	cmp	r3, #112	@ 0x70
 8004ff0:	d018      	beq.n	8005024 <HAL_TIM_ConfigClockSource+0xb0>
 8004ff2:	d900      	bls.n	8004ff6 <HAL_TIM_ConfigClockSource+0x82>
 8004ff4:	e07a      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x178>
 8004ff6:	2b60      	cmp	r3, #96	@ 0x60
 8004ff8:	d04f      	beq.n	800509a <HAL_TIM_ConfigClockSource+0x126>
 8004ffa:	d900      	bls.n	8004ffe <HAL_TIM_ConfigClockSource+0x8a>
 8004ffc:	e076      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x178>
 8004ffe:	2b50      	cmp	r3, #80	@ 0x50
 8005000:	d03b      	beq.n	800507a <HAL_TIM_ConfigClockSource+0x106>
 8005002:	d900      	bls.n	8005006 <HAL_TIM_ConfigClockSource+0x92>
 8005004:	e072      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x178>
 8005006:	2b40      	cmp	r3, #64	@ 0x40
 8005008:	d057      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x146>
 800500a:	d900      	bls.n	800500e <HAL_TIM_ConfigClockSource+0x9a>
 800500c:	e06e      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x178>
 800500e:	2b30      	cmp	r3, #48	@ 0x30
 8005010:	d063      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x166>
 8005012:	d86b      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x178>
 8005014:	2b20      	cmp	r3, #32
 8005016:	d060      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x166>
 8005018:	d868      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x178>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d05d      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x166>
 800501e:	2b10      	cmp	r3, #16
 8005020:	d05b      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x166>
 8005022:	e063      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005034:	f000 fc30 	bl	8005898 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2277      	movs	r2, #119	@ 0x77
 8005044:	4313      	orrs	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	609a      	str	r2, [r3, #8]
      break;
 8005050:	e052      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005062:	f000 fc19 	bl	8005898 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2180      	movs	r1, #128	@ 0x80
 8005072:	01c9      	lsls	r1, r1, #7
 8005074:	430a      	orrs	r2, r1
 8005076:	609a      	str	r2, [r3, #8]
      break;
 8005078:	e03e      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005086:	001a      	movs	r2, r3
 8005088:	f000 fb8a 	bl	80057a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2150      	movs	r1, #80	@ 0x50
 8005092:	0018      	movs	r0, r3
 8005094:	f000 fbe4 	bl	8005860 <TIM_ITRx_SetConfig>
      break;
 8005098:	e02e      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050a6:	001a      	movs	r2, r3
 80050a8:	f000 fba8 	bl	80057fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2160      	movs	r1, #96	@ 0x60
 80050b2:	0018      	movs	r0, r3
 80050b4:	f000 fbd4 	bl	8005860 <TIM_ITRx_SetConfig>
      break;
 80050b8:	e01e      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c6:	001a      	movs	r2, r3
 80050c8:	f000 fb6a 	bl	80057a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2140      	movs	r1, #64	@ 0x40
 80050d2:	0018      	movs	r0, r3
 80050d4:	f000 fbc4 	bl	8005860 <TIM_ITRx_SetConfig>
      break;
 80050d8:	e00e      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	0019      	movs	r1, r3
 80050e4:	0010      	movs	r0, r2
 80050e6:	f000 fbbb 	bl	8005860 <TIM_ITRx_SetConfig>
      break;
 80050ea:	e005      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80050ec:	230f      	movs	r3, #15
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	2201      	movs	r2, #1
 80050f2:	701a      	strb	r2, [r3, #0]
      break;
 80050f4:	e000      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80050f6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	223d      	movs	r2, #61	@ 0x3d
 80050fc:	2101      	movs	r1, #1
 80050fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	223c      	movs	r2, #60	@ 0x3c
 8005104:	2100      	movs	r1, #0
 8005106:	5499      	strb	r1, [r3, r2]

  return status;
 8005108:	230f      	movs	r3, #15
 800510a:	18fb      	adds	r3, r7, r3
 800510c:	781b      	ldrb	r3, [r3, #0]
}
 800510e:	0018      	movs	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	b004      	add	sp, #16
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			@ (mov r8, r8)
 8005118:	ffceff88 	.word	0xffceff88
 800511c:	ffff00ff 	.word	0xffff00ff

08005120 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005128:	46c0      	nop			@ (mov r8, r8)
 800512a:	46bd      	mov	sp, r7
 800512c:	b002      	add	sp, #8
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005138:	46c0      	nop			@ (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	b002      	add	sp, #8
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005148:	46c0      	nop			@ (mov r8, r8)
 800514a:	46bd      	mov	sp, r7
 800514c:	b002      	add	sp, #8
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005158:	46c0      	nop			@ (mov r8, r8)
 800515a:	46bd      	mov	sp, r7
 800515c:	b002      	add	sp, #8
 800515e:	bd80      	pop	{r7, pc}

08005160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a37      	ldr	r2, [pc, #220]	@ (8005250 <TIM_Base_SetConfig+0xf0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d008      	beq.n	800518a <TIM_Base_SetConfig+0x2a>
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	2380      	movs	r3, #128	@ 0x80
 800517c:	05db      	lsls	r3, r3, #23
 800517e:	429a      	cmp	r2, r3
 8005180:	d003      	beq.n	800518a <TIM_Base_SetConfig+0x2a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a33      	ldr	r2, [pc, #204]	@ (8005254 <TIM_Base_SetConfig+0xf4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d108      	bne.n	800519c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2270      	movs	r2, #112	@ 0x70
 800518e:	4393      	bics	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a2c      	ldr	r2, [pc, #176]	@ (8005250 <TIM_Base_SetConfig+0xf0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d014      	beq.n	80051ce <TIM_Base_SetConfig+0x6e>
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	2380      	movs	r3, #128	@ 0x80
 80051a8:	05db      	lsls	r3, r3, #23
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d00f      	beq.n	80051ce <TIM_Base_SetConfig+0x6e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a28      	ldr	r2, [pc, #160]	@ (8005254 <TIM_Base_SetConfig+0xf4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00b      	beq.n	80051ce <TIM_Base_SetConfig+0x6e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a27      	ldr	r2, [pc, #156]	@ (8005258 <TIM_Base_SetConfig+0xf8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d007      	beq.n	80051ce <TIM_Base_SetConfig+0x6e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a26      	ldr	r2, [pc, #152]	@ (800525c <TIM_Base_SetConfig+0xfc>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d003      	beq.n	80051ce <TIM_Base_SetConfig+0x6e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a25      	ldr	r2, [pc, #148]	@ (8005260 <TIM_Base_SetConfig+0x100>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d108      	bne.n	80051e0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4a24      	ldr	r2, [pc, #144]	@ (8005264 <TIM_Base_SetConfig+0x104>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2280      	movs	r2, #128	@ 0x80
 80051e4:	4393      	bics	r3, r2
 80051e6:	001a      	movs	r2, r3
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a11      	ldr	r2, [pc, #68]	@ (8005250 <TIM_Base_SetConfig+0xf0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d007      	beq.n	800521e <TIM_Base_SetConfig+0xbe>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a12      	ldr	r2, [pc, #72]	@ (800525c <TIM_Base_SetConfig+0xfc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_Base_SetConfig+0xbe>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a11      	ldr	r2, [pc, #68]	@ (8005260 <TIM_Base_SetConfig+0x100>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d103      	bne.n	8005226 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2201      	movs	r2, #1
 8005232:	4013      	ands	r3, r2
 8005234:	2b01      	cmp	r3, #1
 8005236:	d106      	bne.n	8005246 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2201      	movs	r2, #1
 800523e:	4393      	bics	r3, r2
 8005240:	001a      	movs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	611a      	str	r2, [r3, #16]
  }
}
 8005246:	46c0      	nop			@ (mov r8, r8)
 8005248:	46bd      	mov	sp, r7
 800524a:	b004      	add	sp, #16
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			@ (mov r8, r8)
 8005250:	40012c00 	.word	0x40012c00
 8005254:	40000400 	.word	0x40000400
 8005258:	40002000 	.word	0x40002000
 800525c:	40014400 	.word	0x40014400
 8005260:	40014800 	.word	0x40014800
 8005264:	fffffcff 	.word	0xfffffcff

08005268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	2201      	movs	r2, #1
 800527e:	4393      	bics	r3, r2
 8005280:	001a      	movs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4a2e      	ldr	r2, [pc, #184]	@ (8005350 <TIM_OC1_SetConfig+0xe8>)
 8005296:	4013      	ands	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2203      	movs	r2, #3
 800529e:	4393      	bics	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2202      	movs	r2, #2
 80052b0:	4393      	bics	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a24      	ldr	r2, [pc, #144]	@ (8005354 <TIM_OC1_SetConfig+0xec>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d007      	beq.n	80052d6 <TIM_OC1_SetConfig+0x6e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a23      	ldr	r2, [pc, #140]	@ (8005358 <TIM_OC1_SetConfig+0xf0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d003      	beq.n	80052d6 <TIM_OC1_SetConfig+0x6e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a22      	ldr	r2, [pc, #136]	@ (800535c <TIM_OC1_SetConfig+0xf4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d10c      	bne.n	80052f0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2208      	movs	r2, #8
 80052da:	4393      	bics	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2204      	movs	r2, #4
 80052ec:	4393      	bics	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a18      	ldr	r2, [pc, #96]	@ (8005354 <TIM_OC1_SetConfig+0xec>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d007      	beq.n	8005308 <TIM_OC1_SetConfig+0xa0>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a17      	ldr	r2, [pc, #92]	@ (8005358 <TIM_OC1_SetConfig+0xf0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d003      	beq.n	8005308 <TIM_OC1_SetConfig+0xa0>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a16      	ldr	r2, [pc, #88]	@ (800535c <TIM_OC1_SetConfig+0xf4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d111      	bne.n	800532c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4a15      	ldr	r2, [pc, #84]	@ (8005360 <TIM_OC1_SetConfig+0xf8>)
 800530c:	4013      	ands	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4a14      	ldr	r2, [pc, #80]	@ (8005364 <TIM_OC1_SetConfig+0xfc>)
 8005314:	4013      	ands	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	621a      	str	r2, [r3, #32]
}
 8005346:	46c0      	nop			@ (mov r8, r8)
 8005348:	46bd      	mov	sp, r7
 800534a:	b006      	add	sp, #24
 800534c:	bd80      	pop	{r7, pc}
 800534e:	46c0      	nop			@ (mov r8, r8)
 8005350:	fffeff8f 	.word	0xfffeff8f
 8005354:	40012c00 	.word	0x40012c00
 8005358:	40014400 	.word	0x40014400
 800535c:	40014800 	.word	0x40014800
 8005360:	fffffeff 	.word	0xfffffeff
 8005364:	fffffdff 	.word	0xfffffdff

08005368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	2210      	movs	r2, #16
 800537e:	4393      	bics	r3, r2
 8005380:	001a      	movs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4a2c      	ldr	r2, [pc, #176]	@ (8005448 <TIM_OC2_SetConfig+0xe0>)
 8005396:	4013      	ands	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4a2b      	ldr	r2, [pc, #172]	@ (800544c <TIM_OC2_SetConfig+0xe4>)
 800539e:	4013      	ands	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2220      	movs	r2, #32
 80053b2:	4393      	bics	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a22      	ldr	r2, [pc, #136]	@ (8005450 <TIM_OC2_SetConfig+0xe8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d10d      	bne.n	80053e6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2280      	movs	r2, #128	@ 0x80
 80053ce:	4393      	bics	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2240      	movs	r2, #64	@ 0x40
 80053e2:	4393      	bics	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a19      	ldr	r2, [pc, #100]	@ (8005450 <TIM_OC2_SetConfig+0xe8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d007      	beq.n	80053fe <TIM_OC2_SetConfig+0x96>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a18      	ldr	r2, [pc, #96]	@ (8005454 <TIM_OC2_SetConfig+0xec>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_OC2_SetConfig+0x96>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a17      	ldr	r2, [pc, #92]	@ (8005458 <TIM_OC2_SetConfig+0xf0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d113      	bne.n	8005426 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	4a16      	ldr	r2, [pc, #88]	@ (800545c <TIM_OC2_SetConfig+0xf4>)
 8005402:	4013      	ands	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	4a15      	ldr	r2, [pc, #84]	@ (8005460 <TIM_OC2_SetConfig+0xf8>)
 800540a:	4013      	ands	r3, r2
 800540c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	621a      	str	r2, [r3, #32]
}
 8005440:	46c0      	nop			@ (mov r8, r8)
 8005442:	46bd      	mov	sp, r7
 8005444:	b006      	add	sp, #24
 8005446:	bd80      	pop	{r7, pc}
 8005448:	feff8fff 	.word	0xfeff8fff
 800544c:	fffffcff 	.word	0xfffffcff
 8005450:	40012c00 	.word	0x40012c00
 8005454:	40014400 	.word	0x40014400
 8005458:	40014800 	.word	0x40014800
 800545c:	fffffbff 	.word	0xfffffbff
 8005460:	fffff7ff 	.word	0xfffff7ff

08005464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	4a31      	ldr	r2, [pc, #196]	@ (8005540 <TIM_OC3_SetConfig+0xdc>)
 800547a:	401a      	ands	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4a2d      	ldr	r2, [pc, #180]	@ (8005544 <TIM_OC3_SetConfig+0xe0>)
 8005490:	4013      	ands	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2203      	movs	r2, #3
 8005498:	4393      	bics	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	4a27      	ldr	r2, [pc, #156]	@ (8005548 <TIM_OC3_SetConfig+0xe4>)
 80054aa:	4013      	ands	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a23      	ldr	r2, [pc, #140]	@ (800554c <TIM_OC3_SetConfig+0xe8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d10d      	bne.n	80054de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	4a22      	ldr	r2, [pc, #136]	@ (8005550 <TIM_OC3_SetConfig+0xec>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005554 <TIM_OC3_SetConfig+0xf0>)
 80054da:	4013      	ands	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a1a      	ldr	r2, [pc, #104]	@ (800554c <TIM_OC3_SetConfig+0xe8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <TIM_OC3_SetConfig+0x92>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005558 <TIM_OC3_SetConfig+0xf4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d003      	beq.n	80054f6 <TIM_OC3_SetConfig+0x92>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1a      	ldr	r2, [pc, #104]	@ (800555c <TIM_OC3_SetConfig+0xf8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d113      	bne.n	800551e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4a19      	ldr	r2, [pc, #100]	@ (8005560 <TIM_OC3_SetConfig+0xfc>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4a18      	ldr	r2, [pc, #96]	@ (8005564 <TIM_OC3_SetConfig+0x100>)
 8005502:	4013      	ands	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	621a      	str	r2, [r3, #32]
}
 8005538:	46c0      	nop			@ (mov r8, r8)
 800553a:	46bd      	mov	sp, r7
 800553c:	b006      	add	sp, #24
 800553e:	bd80      	pop	{r7, pc}
 8005540:	fffffeff 	.word	0xfffffeff
 8005544:	fffeff8f 	.word	0xfffeff8f
 8005548:	fffffdff 	.word	0xfffffdff
 800554c:	40012c00 	.word	0x40012c00
 8005550:	fffff7ff 	.word	0xfffff7ff
 8005554:	fffffbff 	.word	0xfffffbff
 8005558:	40014400 	.word	0x40014400
 800555c:	40014800 	.word	0x40014800
 8005560:	ffffefff 	.word	0xffffefff
 8005564:	ffffdfff 	.word	0xffffdfff

08005568 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	4a24      	ldr	r2, [pc, #144]	@ (8005610 <TIM_OC4_SetConfig+0xa8>)
 800557e:	401a      	ands	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a20      	ldr	r2, [pc, #128]	@ (8005614 <TIM_OC4_SetConfig+0xac>)
 8005594:	4013      	ands	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4a1f      	ldr	r2, [pc, #124]	@ (8005618 <TIM_OC4_SetConfig+0xb0>)
 800559c:	4013      	ands	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	021b      	lsls	r3, r3, #8
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	4a1b      	ldr	r2, [pc, #108]	@ (800561c <TIM_OC4_SetConfig+0xb4>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	031b      	lsls	r3, r3, #12
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a17      	ldr	r2, [pc, #92]	@ (8005620 <TIM_OC4_SetConfig+0xb8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d007      	beq.n	80055d8 <TIM_OC4_SetConfig+0x70>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a16      	ldr	r2, [pc, #88]	@ (8005624 <TIM_OC4_SetConfig+0xbc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <TIM_OC4_SetConfig+0x70>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a15      	ldr	r2, [pc, #84]	@ (8005628 <TIM_OC4_SetConfig+0xc0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d109      	bne.n	80055ec <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	4a14      	ldr	r2, [pc, #80]	@ (800562c <TIM_OC4_SetConfig+0xc4>)
 80055dc:	4013      	ands	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	019b      	lsls	r3, r3, #6
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	621a      	str	r2, [r3, #32]
}
 8005606:	46c0      	nop			@ (mov r8, r8)
 8005608:	46bd      	mov	sp, r7
 800560a:	b006      	add	sp, #24
 800560c:	bd80      	pop	{r7, pc}
 800560e:	46c0      	nop			@ (mov r8, r8)
 8005610:	ffffefff 	.word	0xffffefff
 8005614:	feff8fff 	.word	0xfeff8fff
 8005618:	fffffcff 	.word	0xfffffcff
 800561c:	ffffdfff 	.word	0xffffdfff
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40014400 	.word	0x40014400
 8005628:	40014800 	.word	0x40014800
 800562c:	ffffbfff 	.word	0xffffbfff

08005630 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	4a21      	ldr	r2, [pc, #132]	@ (80056cc <TIM_OC5_SetConfig+0x9c>)
 8005646:	401a      	ands	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4a1d      	ldr	r2, [pc, #116]	@ (80056d0 <TIM_OC5_SetConfig+0xa0>)
 800565c:	4013      	ands	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4a19      	ldr	r2, [pc, #100]	@ (80056d4 <TIM_OC5_SetConfig+0xa4>)
 800566e:	4013      	ands	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	041b      	lsls	r3, r3, #16
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a15      	ldr	r2, [pc, #84]	@ (80056d8 <TIM_OC5_SetConfig+0xa8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d007      	beq.n	8005696 <TIM_OC5_SetConfig+0x66>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a14      	ldr	r2, [pc, #80]	@ (80056dc <TIM_OC5_SetConfig+0xac>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d003      	beq.n	8005696 <TIM_OC5_SetConfig+0x66>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a13      	ldr	r2, [pc, #76]	@ (80056e0 <TIM_OC5_SetConfig+0xb0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d109      	bne.n	80056aa <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	4a0c      	ldr	r2, [pc, #48]	@ (80056cc <TIM_OC5_SetConfig+0x9c>)
 800569a:	4013      	ands	r3, r2
 800569c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	621a      	str	r2, [r3, #32]
}
 80056c4:	46c0      	nop			@ (mov r8, r8)
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b006      	add	sp, #24
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	fffeffff 	.word	0xfffeffff
 80056d0:	fffeff8f 	.word	0xfffeff8f
 80056d4:	fffdffff 	.word	0xfffdffff
 80056d8:	40012c00 	.word	0x40012c00
 80056dc:	40014400 	.word	0x40014400
 80056e0:	40014800 	.word	0x40014800

080056e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	4a22      	ldr	r2, [pc, #136]	@ (8005784 <TIM_OC6_SetConfig+0xa0>)
 80056fa:	401a      	ands	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4a1e      	ldr	r2, [pc, #120]	@ (8005788 <TIM_OC6_SetConfig+0xa4>)
 8005710:	4013      	ands	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	021b      	lsls	r3, r3, #8
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4a1a      	ldr	r2, [pc, #104]	@ (800578c <TIM_OC6_SetConfig+0xa8>)
 8005724:	4013      	ands	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	051b      	lsls	r3, r3, #20
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a16      	ldr	r2, [pc, #88]	@ (8005790 <TIM_OC6_SetConfig+0xac>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d007      	beq.n	800574c <TIM_OC6_SetConfig+0x68>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a15      	ldr	r2, [pc, #84]	@ (8005794 <TIM_OC6_SetConfig+0xb0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_OC6_SetConfig+0x68>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a14      	ldr	r2, [pc, #80]	@ (8005798 <TIM_OC6_SetConfig+0xb4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d109      	bne.n	8005760 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	4a13      	ldr	r2, [pc, #76]	@ (800579c <TIM_OC6_SetConfig+0xb8>)
 8005750:	4013      	ands	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	029b      	lsls	r3, r3, #10
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	621a      	str	r2, [r3, #32]
}
 800577a:	46c0      	nop			@ (mov r8, r8)
 800577c:	46bd      	mov	sp, r7
 800577e:	b006      	add	sp, #24
 8005780:	bd80      	pop	{r7, pc}
 8005782:	46c0      	nop			@ (mov r8, r8)
 8005784:	ffefffff 	.word	0xffefffff
 8005788:	feff8fff 	.word	0xfeff8fff
 800578c:	ffdfffff 	.word	0xffdfffff
 8005790:	40012c00 	.word	0x40012c00
 8005794:	40014400 	.word	0x40014400
 8005798:	40014800 	.word	0x40014800
 800579c:	fffbffff 	.word	0xfffbffff

080057a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	2201      	movs	r2, #1
 80057b8:	4393      	bics	r3, r2
 80057ba:	001a      	movs	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	22f0      	movs	r2, #240	@ 0xf0
 80057ca:	4393      	bics	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	220a      	movs	r2, #10
 80057dc:	4393      	bics	r3, r2
 80057de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	621a      	str	r2, [r3, #32]
}
 80057f4:	46c0      	nop			@ (mov r8, r8)
 80057f6:	46bd      	mov	sp, r7
 80057f8:	b006      	add	sp, #24
 80057fa:	bd80      	pop	{r7, pc}

080057fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	2210      	movs	r2, #16
 8005814:	4393      	bics	r3, r2
 8005816:	001a      	movs	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	4a0d      	ldr	r2, [pc, #52]	@ (800585c <TIM_TI2_ConfigInputStage+0x60>)
 8005826:	4013      	ands	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	031b      	lsls	r3, r3, #12
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	22a0      	movs	r2, #160	@ 0xa0
 8005838:	4393      	bics	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	46c0      	nop			@ (mov r8, r8)
 8005854:	46bd      	mov	sp, r7
 8005856:	b006      	add	sp, #24
 8005858:	bd80      	pop	{r7, pc}
 800585a:	46c0      	nop			@ (mov r8, r8)
 800585c:	ffff0fff 	.word	0xffff0fff

08005860 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a08      	ldr	r2, [pc, #32]	@ (8005894 <TIM_ITRx_SetConfig+0x34>)
 8005874:	4013      	ands	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	2207      	movs	r2, #7
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	609a      	str	r2, [r3, #8]
}
 800588a:	46c0      	nop			@ (mov r8, r8)
 800588c:	46bd      	mov	sp, r7
 800588e:	b004      	add	sp, #16
 8005890:	bd80      	pop	{r7, pc}
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	ffcfff8f 	.word	0xffcfff8f

08005898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4a09      	ldr	r2, [pc, #36]	@ (80058d4 <TIM_ETR_SetConfig+0x3c>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	021a      	lsls	r2, r3, #8
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4313      	orrs	r3, r2
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	609a      	str	r2, [r3, #8]
}
 80058cc:	46c0      	nop			@ (mov r8, r8)
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b006      	add	sp, #24
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	ffff00ff 	.word	0xffff00ff

080058d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	221f      	movs	r2, #31
 80058e8:	4013      	ands	r3, r2
 80058ea:	2201      	movs	r2, #1
 80058ec:	409a      	lsls	r2, r3
 80058ee:	0013      	movs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	43d2      	mvns	r2, r2
 80058fa:	401a      	ands	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a1a      	ldr	r2, [r3, #32]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	211f      	movs	r1, #31
 8005908:	400b      	ands	r3, r1
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	4099      	lsls	r1, r3
 800590e:	000b      	movs	r3, r1
 8005910:	431a      	orrs	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	621a      	str	r2, [r3, #32]
}
 8005916:	46c0      	nop			@ (mov r8, r8)
 8005918:	46bd      	mov	sp, r7
 800591a:	b006      	add	sp, #24
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d108      	bne.n	8005942 <HAL_TIMEx_PWMN_Start+0x22>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2244      	movs	r2, #68	@ 0x44
 8005934:	5c9b      	ldrb	r3, [r3, r2]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	1e5a      	subs	r2, r3, #1
 800593c:	4193      	sbcs	r3, r2
 800593e:	b2db      	uxtb	r3, r3
 8005940:	e01f      	b.n	8005982 <HAL_TIMEx_PWMN_Start+0x62>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b04      	cmp	r3, #4
 8005946:	d108      	bne.n	800595a <HAL_TIMEx_PWMN_Start+0x3a>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2245      	movs	r2, #69	@ 0x45
 800594c:	5c9b      	ldrb	r3, [r3, r2]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	1e5a      	subs	r2, r3, #1
 8005954:	4193      	sbcs	r3, r2
 8005956:	b2db      	uxtb	r3, r3
 8005958:	e013      	b.n	8005982 <HAL_TIMEx_PWMN_Start+0x62>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d108      	bne.n	8005972 <HAL_TIMEx_PWMN_Start+0x52>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2246      	movs	r2, #70	@ 0x46
 8005964:	5c9b      	ldrb	r3, [r3, r2]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	1e5a      	subs	r2, r3, #1
 800596c:	4193      	sbcs	r3, r2
 800596e:	b2db      	uxtb	r3, r3
 8005970:	e007      	b.n	8005982 <HAL_TIMEx_PWMN_Start+0x62>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2247      	movs	r2, #71	@ 0x47
 8005976:	5c9b      	ldrb	r3, [r3, r2]
 8005978:	b2db      	uxtb	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	1e5a      	subs	r2, r3, #1
 800597e:	4193      	sbcs	r3, r2
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e05d      	b.n	8005a46 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d104      	bne.n	800599a <HAL_TIMEx_PWMN_Start+0x7a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2244      	movs	r2, #68	@ 0x44
 8005994:	2102      	movs	r1, #2
 8005996:	5499      	strb	r1, [r3, r2]
 8005998:	e013      	b.n	80059c2 <HAL_TIMEx_PWMN_Start+0xa2>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b04      	cmp	r3, #4
 800599e:	d104      	bne.n	80059aa <HAL_TIMEx_PWMN_Start+0x8a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2245      	movs	r2, #69	@ 0x45
 80059a4:	2102      	movs	r1, #2
 80059a6:	5499      	strb	r1, [r3, r2]
 80059a8:	e00b      	b.n	80059c2 <HAL_TIMEx_PWMN_Start+0xa2>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d104      	bne.n	80059ba <HAL_TIMEx_PWMN_Start+0x9a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2246      	movs	r2, #70	@ 0x46
 80059b4:	2102      	movs	r1, #2
 80059b6:	5499      	strb	r1, [r3, r2]
 80059b8:	e003      	b.n	80059c2 <HAL_TIMEx_PWMN_Start+0xa2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2247      	movs	r2, #71	@ 0x47
 80059be:	2102      	movs	r1, #2
 80059c0:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6839      	ldr	r1, [r7, #0]
 80059c8:	2204      	movs	r2, #4
 80059ca:	0018      	movs	r0, r3
 80059cc:	f000 f9f3 	bl	8005db6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2180      	movs	r1, #128	@ 0x80
 80059dc:	0209      	lsls	r1, r1, #8
 80059de:	430a      	orrs	r2, r1
 80059e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005a50 <HAL_TIMEx_PWMN_Start+0x130>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00a      	beq.n	8005a02 <HAL_TIMEx_PWMN_Start+0xe2>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	2380      	movs	r3, #128	@ 0x80
 80059f2:	05db      	lsls	r3, r3, #23
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d004      	beq.n	8005a02 <HAL_TIMEx_PWMN_Start+0xe2>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a15      	ldr	r2, [pc, #84]	@ (8005a54 <HAL_TIMEx_PWMN_Start+0x134>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d116      	bne.n	8005a30 <HAL_TIMEx_PWMN_Start+0x110>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4a13      	ldr	r2, [pc, #76]	@ (8005a58 <HAL_TIMEx_PWMN_Start+0x138>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b06      	cmp	r3, #6
 8005a12:	d016      	beq.n	8005a42 <HAL_TIMEx_PWMN_Start+0x122>
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	2380      	movs	r3, #128	@ 0x80
 8005a18:	025b      	lsls	r3, r3, #9
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d011      	beq.n	8005a42 <HAL_TIMEx_PWMN_Start+0x122>
    {
      __HAL_TIM_ENABLE(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2101      	movs	r1, #1
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2e:	e008      	b.n	8005a42 <HAL_TIMEx_PWMN_Start+0x122>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	e000      	b.n	8005a44 <HAL_TIMEx_PWMN_Start+0x124>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a42:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	0018      	movs	r0, r3
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	b004      	add	sp, #16
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	46c0      	nop			@ (mov r8, r8)
 8005a50:	40012c00 	.word	0x40012c00
 8005a54:	40000400 	.word	0x40000400
 8005a58:	00010007 	.word	0x00010007

08005a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	223c      	movs	r2, #60	@ 0x3c
 8005a6a:	5c9b      	ldrb	r3, [r3, r2]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e050      	b.n	8005b16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	223c      	movs	r2, #60	@ 0x3c
 8005a78:	2101      	movs	r1, #1
 8005a7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	223d      	movs	r2, #61	@ 0x3d
 8005a80:	2102      	movs	r1, #2
 8005a82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a21      	ldr	r2, [pc, #132]	@ (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d108      	bne.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a20      	ldr	r2, [pc, #128]	@ (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2270      	movs	r2, #112	@ 0x70
 8005ab4:	4393      	bics	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a14      	ldr	r2, [pc, #80]	@ (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00a      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	2380      	movs	r3, #128	@ 0x80
 8005ada:	05db      	lsls	r3, r3, #23
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d004      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a10      	ldr	r2, [pc, #64]	@ (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d10c      	bne.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2280      	movs	r2, #128	@ 0x80
 8005aee:	4393      	bics	r3, r2
 8005af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	223d      	movs	r2, #61	@ 0x3d
 8005b08:	2101      	movs	r1, #1
 8005b0a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	223c      	movs	r2, #60	@ 0x3c
 8005b10:	2100      	movs	r1, #0
 8005b12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	0018      	movs	r0, r3
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	b004      	add	sp, #16
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	46c0      	nop			@ (mov r8, r8)
 8005b20:	40012c00 	.word	0x40012c00
 8005b24:	ff0fffff 	.word	0xff0fffff
 8005b28:	40000400 	.word	0x40000400

08005b2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	223c      	movs	r2, #60	@ 0x3c
 8005b3e:	5c9b      	ldrb	r3, [r3, r2]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e06f      	b.n	8005c28 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	223c      	movs	r2, #60	@ 0x3c
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	22ff      	movs	r2, #255	@ 0xff
 8005b54:	4393      	bics	r3, r2
 8005b56:	001a      	movs	r2, r3
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4a33      	ldr	r2, [pc, #204]	@ (8005c30 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005b64:	401a      	ands	r2, r3
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4a30      	ldr	r2, [pc, #192]	@ (8005c34 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005b72:	401a      	ands	r2, r3
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4a2e      	ldr	r2, [pc, #184]	@ (8005c38 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005b80:	401a      	ands	r2, r3
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8005c3c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005b8e:	401a      	ands	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4a29      	ldr	r2, [pc, #164]	@ (8005c40 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005b9c:	401a      	ands	r2, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a26      	ldr	r2, [pc, #152]	@ (8005c44 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005baa:	401a      	ands	r2, r3
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4a24      	ldr	r2, [pc, #144]	@ (8005c48 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005bb8:	401a      	ands	r2, r3
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4a21      	ldr	r2, [pc, #132]	@ (8005c4c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005bc8:	401a      	ands	r2, r3
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c50 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d11c      	bne.n	8005c16 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4a1d      	ldr	r2, [pc, #116]	@ (8005c54 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005be0:	401a      	ands	r2, r3
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be6:	051b      	lsls	r3, r3, #20
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4a1a      	ldr	r2, [pc, #104]	@ (8005c58 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005bf0:	401a      	ands	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4a17      	ldr	r2, [pc, #92]	@ (8005c5c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005bfe:	401a      	ands	r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a15      	ldr	r2, [pc, #84]	@ (8005c60 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005c0c:	401a      	ands	r2, r3
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	223c      	movs	r2, #60	@ 0x3c
 8005c22:	2100      	movs	r1, #0
 8005c24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	0018      	movs	r0, r3
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	b004      	add	sp, #16
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	fffffcff 	.word	0xfffffcff
 8005c34:	fffffbff 	.word	0xfffffbff
 8005c38:	fffff7ff 	.word	0xfffff7ff
 8005c3c:	ffffefff 	.word	0xffffefff
 8005c40:	ffffdfff 	.word	0xffffdfff
 8005c44:	ffffbfff 	.word	0xffffbfff
 8005c48:	fff0ffff 	.word	0xfff0ffff
 8005c4c:	efffffff 	.word	0xefffffff
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	ff0fffff 	.word	0xff0fffff
 8005c58:	feffffff 	.word	0xfeffffff
 8005c5c:	fdffffff 	.word	0xfdffffff
 8005c60:	dfffffff 	.word	0xdfffffff

08005c64 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08a      	sub	sp, #40	@ 0x28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c70:	2327      	movs	r3, #39	@ 0x27
 8005c72:	18fb      	adds	r3, r7, r3
 8005c74:	2200      	movs	r2, #0
 8005c76:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	223c      	movs	r2, #60	@ 0x3c
 8005c7c:	5c9b      	ldrb	r3, [r3, r2]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <HAL_TIMEx_ConfigBreakInput+0x22>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e07b      	b.n	8005d7e <HAL_TIMEx_ConfigBreakInput+0x11a>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	223c      	movs	r2, #60	@ 0x3c
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d109      	bne.n	8005caa <HAL_TIMEx_ConfigBreakInput+0x46>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8005c96:	2301      	movs	r3, #1
 8005c98:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8005c9e:	2380      	movs	r3, #128	@ 0x80
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8005ca4:	2309      	movs	r3, #9
 8005ca6:	617b      	str	r3, [r7, #20]
      break;
 8005ca8:	e008      	b.n	8005cbc <HAL_TIMEx_ConfigBreakInput+0x58>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
      break;
 8005cba:	46c0      	nop			@ (mov r8, r8)
    }
  }

  switch (BreakInput)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d003      	beq.n	8005cca <HAL_TIMEx_ConfigBreakInput+0x66>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d027      	beq.n	8005d18 <HAL_TIMEx_ConfigBreakInput+0xb4>
 8005cc8:	e04d      	b.n	8005d66 <HAL_TIMEx_ConfigBreakInput+0x102>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cd0:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	43da      	mvns	r2, r3
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	409a      	lsls	r2, r3
 8005ce4:	0013      	movs	r3, r2
 8005ce6:	6a3a      	ldr	r2, [r7, #32]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	43da      	mvns	r2, r3
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	409a      	lsls	r2, r3
 8005d02:	0013      	movs	r3, r2
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	4013      	ands	r3, r2
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8005d16:	e02b      	b.n	8005d70 <HAL_TIMEx_ConfigBreakInput+0x10c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d1e:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	43da      	mvns	r2, r3
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	4013      	ands	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	409a      	lsls	r2, r3
 8005d32:	0013      	movs	r3, r2
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	4013      	ands	r3, r2
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	43da      	mvns	r2, r3
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4013      	ands	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	409a      	lsls	r2, r3
 8005d50:	0013      	movs	r3, r2
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	4013      	ands	r3, r2
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8005d64:	e004      	b.n	8005d70 <HAL_TIMEx_ConfigBreakInput+0x10c>
    }
    default:
      status = HAL_ERROR;
 8005d66:	2327      	movs	r3, #39	@ 0x27
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	701a      	strb	r2, [r3, #0]
      break;
 8005d6e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	223c      	movs	r2, #60	@ 0x3c
 8005d74:	2100      	movs	r1, #0
 8005d76:	5499      	strb	r1, [r3, r2]

  return status;
 8005d78:	2327      	movs	r3, #39	@ 0x27
 8005d7a:	18fb      	adds	r3, r7, r3
 8005d7c:	781b      	ldrb	r3, [r3, #0]
}
 8005d7e:	0018      	movs	r0, r3
 8005d80:	46bd      	mov	sp, r7
 8005d82:	b00a      	add	sp, #40	@ 0x28
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	46bd      	mov	sp, r7
 8005d92:	b002      	add	sp, #8
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b082      	sub	sp, #8
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d9e:	46c0      	nop			@ (mov r8, r8)
 8005da0:	46bd      	mov	sp, r7
 8005da2:	b002      	add	sp, #8
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b082      	sub	sp, #8
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dae:	46c0      	nop			@ (mov r8, r8)
 8005db0:	46bd      	mov	sp, r7
 8005db2:	b002      	add	sp, #8
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b086      	sub	sp, #24
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	220f      	movs	r2, #15
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	2204      	movs	r2, #4
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	0013      	movs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	43d2      	mvns	r2, r2
 8005dd8:	401a      	ands	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1a      	ldr	r2, [r3, #32]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	210f      	movs	r1, #15
 8005de6:	400b      	ands	r3, r1
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	4099      	lsls	r1, r3
 8005dec:	000b      	movs	r3, r1
 8005dee:	431a      	orrs	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	621a      	str	r2, [r3, #32]
}
 8005df4:	46c0      	nop			@ (mov r8, r8)
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b006      	add	sp, #24
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <memset>:
 8005dfc:	0003      	movs	r3, r0
 8005dfe:	1882      	adds	r2, r0, r2
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d100      	bne.n	8005e06 <memset+0xa>
 8005e04:	4770      	bx	lr
 8005e06:	7019      	strb	r1, [r3, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	e7f9      	b.n	8005e00 <memset+0x4>

08005e0c <__libc_init_array>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	2600      	movs	r6, #0
 8005e10:	4c0c      	ldr	r4, [pc, #48]	@ (8005e44 <__libc_init_array+0x38>)
 8005e12:	4d0d      	ldr	r5, [pc, #52]	@ (8005e48 <__libc_init_array+0x3c>)
 8005e14:	1b64      	subs	r4, r4, r5
 8005e16:	10a4      	asrs	r4, r4, #2
 8005e18:	42a6      	cmp	r6, r4
 8005e1a:	d109      	bne.n	8005e30 <__libc_init_array+0x24>
 8005e1c:	2600      	movs	r6, #0
 8005e1e:	f000 f819 	bl	8005e54 <_init>
 8005e22:	4c0a      	ldr	r4, [pc, #40]	@ (8005e4c <__libc_init_array+0x40>)
 8005e24:	4d0a      	ldr	r5, [pc, #40]	@ (8005e50 <__libc_init_array+0x44>)
 8005e26:	1b64      	subs	r4, r4, r5
 8005e28:	10a4      	asrs	r4, r4, #2
 8005e2a:	42a6      	cmp	r6, r4
 8005e2c:	d105      	bne.n	8005e3a <__libc_init_array+0x2e>
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
 8005e30:	00b3      	lsls	r3, r6, #2
 8005e32:	58eb      	ldr	r3, [r5, r3]
 8005e34:	4798      	blx	r3
 8005e36:	3601      	adds	r6, #1
 8005e38:	e7ee      	b.n	8005e18 <__libc_init_array+0xc>
 8005e3a:	00b3      	lsls	r3, r6, #2
 8005e3c:	58eb      	ldr	r3, [r5, r3]
 8005e3e:	4798      	blx	r3
 8005e40:	3601      	adds	r6, #1
 8005e42:	e7f2      	b.n	8005e2a <__libc_init_array+0x1e>
 8005e44:	08005f00 	.word	0x08005f00
 8005e48:	08005f00 	.word	0x08005f00
 8005e4c:	08005f04 	.word	0x08005f04
 8005e50:	08005f00 	.word	0x08005f00

08005e54 <_init>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	46c0      	nop			@ (mov r8, r8)
 8005e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	469e      	mov	lr, r3
 8005e5e:	4770      	bx	lr

08005e60 <_fini>:
 8005e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e62:	46c0      	nop			@ (mov r8, r8)
 8005e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e66:	bc08      	pop	{r3}
 8005e68:	469e      	mov	lr, r3
 8005e6a:	4770      	bx	lr
