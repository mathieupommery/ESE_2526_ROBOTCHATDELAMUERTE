
TEST_FOC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005020  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080050dc  080050dc  000060dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005270  08005270  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005270  08005270  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005270  08005270  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005270  08005270  00006270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005274  08005274  00006274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005278  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000000c  08005284  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08005284  00007300  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ec5  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a39  00000000  00000000  0001def9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00009f53  00000000  00000000  00021932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  0002b888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000148a  00000000  00000000  0002c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012731  00000000  00000000  0002da9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000051f4  00000000  00000000  000401cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000453bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b4  00000000  00000000  00045404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000478b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080050c4 	.word	0x080050c4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080050c4 	.word	0x080050c4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_fdiv>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	4646      	mov	r6, r8
 8000220:	464f      	mov	r7, r9
 8000222:	46d6      	mov	lr, sl
 8000224:	0245      	lsls	r5, r0, #9
 8000226:	b5c0      	push	{r6, r7, lr}
 8000228:	0fc3      	lsrs	r3, r0, #31
 800022a:	0047      	lsls	r7, r0, #1
 800022c:	4698      	mov	r8, r3
 800022e:	1c0e      	adds	r6, r1, #0
 8000230:	0a6d      	lsrs	r5, r5, #9
 8000232:	0e3f      	lsrs	r7, r7, #24
 8000234:	d05b      	beq.n	80002ee <__aeabi_fdiv+0xd2>
 8000236:	2fff      	cmp	r7, #255	@ 0xff
 8000238:	d021      	beq.n	800027e <__aeabi_fdiv+0x62>
 800023a:	2380      	movs	r3, #128	@ 0x80
 800023c:	00ed      	lsls	r5, r5, #3
 800023e:	04db      	lsls	r3, r3, #19
 8000240:	431d      	orrs	r5, r3
 8000242:	2300      	movs	r3, #0
 8000244:	4699      	mov	r9, r3
 8000246:	469a      	mov	sl, r3
 8000248:	3f7f      	subs	r7, #127	@ 0x7f
 800024a:	0274      	lsls	r4, r6, #9
 800024c:	0073      	lsls	r3, r6, #1
 800024e:	0a64      	lsrs	r4, r4, #9
 8000250:	0e1b      	lsrs	r3, r3, #24
 8000252:	0ff6      	lsrs	r6, r6, #31
 8000254:	2b00      	cmp	r3, #0
 8000256:	d020      	beq.n	800029a <__aeabi_fdiv+0x7e>
 8000258:	2bff      	cmp	r3, #255	@ 0xff
 800025a:	d043      	beq.n	80002e4 <__aeabi_fdiv+0xc8>
 800025c:	2280      	movs	r2, #128	@ 0x80
 800025e:	2000      	movs	r0, #0
 8000260:	00e4      	lsls	r4, r4, #3
 8000262:	04d2      	lsls	r2, r2, #19
 8000264:	4314      	orrs	r4, r2
 8000266:	3b7f      	subs	r3, #127	@ 0x7f
 8000268:	4642      	mov	r2, r8
 800026a:	1aff      	subs	r7, r7, r3
 800026c:	464b      	mov	r3, r9
 800026e:	4072      	eors	r2, r6
 8000270:	2b0f      	cmp	r3, #15
 8000272:	d900      	bls.n	8000276 <__aeabi_fdiv+0x5a>
 8000274:	e09d      	b.n	80003b2 <__aeabi_fdiv+0x196>
 8000276:	4971      	ldr	r1, [pc, #452]	@ (800043c <__aeabi_fdiv+0x220>)
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	58cb      	ldr	r3, [r1, r3]
 800027c:	469f      	mov	pc, r3
 800027e:	2d00      	cmp	r5, #0
 8000280:	d15a      	bne.n	8000338 <__aeabi_fdiv+0x11c>
 8000282:	2308      	movs	r3, #8
 8000284:	4699      	mov	r9, r3
 8000286:	3b06      	subs	r3, #6
 8000288:	0274      	lsls	r4, r6, #9
 800028a:	469a      	mov	sl, r3
 800028c:	0073      	lsls	r3, r6, #1
 800028e:	27ff      	movs	r7, #255	@ 0xff
 8000290:	0a64      	lsrs	r4, r4, #9
 8000292:	0e1b      	lsrs	r3, r3, #24
 8000294:	0ff6      	lsrs	r6, r6, #31
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1de      	bne.n	8000258 <__aeabi_fdiv+0x3c>
 800029a:	2c00      	cmp	r4, #0
 800029c:	d13b      	bne.n	8000316 <__aeabi_fdiv+0xfa>
 800029e:	2301      	movs	r3, #1
 80002a0:	4642      	mov	r2, r8
 80002a2:	4649      	mov	r1, r9
 80002a4:	4072      	eors	r2, r6
 80002a6:	4319      	orrs	r1, r3
 80002a8:	290e      	cmp	r1, #14
 80002aa:	d818      	bhi.n	80002de <__aeabi_fdiv+0xc2>
 80002ac:	4864      	ldr	r0, [pc, #400]	@ (8000440 <__aeabi_fdiv+0x224>)
 80002ae:	0089      	lsls	r1, r1, #2
 80002b0:	5841      	ldr	r1, [r0, r1]
 80002b2:	468f      	mov	pc, r1
 80002b4:	4653      	mov	r3, sl
 80002b6:	2b02      	cmp	r3, #2
 80002b8:	d100      	bne.n	80002bc <__aeabi_fdiv+0xa0>
 80002ba:	e0b8      	b.n	800042e <__aeabi_fdiv+0x212>
 80002bc:	2b03      	cmp	r3, #3
 80002be:	d06e      	beq.n	800039e <__aeabi_fdiv+0x182>
 80002c0:	4642      	mov	r2, r8
 80002c2:	002c      	movs	r4, r5
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d140      	bne.n	800034a <__aeabi_fdiv+0x12e>
 80002c8:	2000      	movs	r0, #0
 80002ca:	2400      	movs	r4, #0
 80002cc:	05c0      	lsls	r0, r0, #23
 80002ce:	4320      	orrs	r0, r4
 80002d0:	07d2      	lsls	r2, r2, #31
 80002d2:	4310      	orrs	r0, r2
 80002d4:	bce0      	pop	{r5, r6, r7}
 80002d6:	46ba      	mov	sl, r7
 80002d8:	46b1      	mov	r9, r6
 80002da:	46a8      	mov	r8, r5
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	20ff      	movs	r0, #255	@ 0xff
 80002e0:	2400      	movs	r4, #0
 80002e2:	e7f3      	b.n	80002cc <__aeabi_fdiv+0xb0>
 80002e4:	2c00      	cmp	r4, #0
 80002e6:	d120      	bne.n	800032a <__aeabi_fdiv+0x10e>
 80002e8:	2302      	movs	r3, #2
 80002ea:	3fff      	subs	r7, #255	@ 0xff
 80002ec:	e7d8      	b.n	80002a0 <__aeabi_fdiv+0x84>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d105      	bne.n	80002fe <__aeabi_fdiv+0xe2>
 80002f2:	2304      	movs	r3, #4
 80002f4:	4699      	mov	r9, r3
 80002f6:	3b03      	subs	r3, #3
 80002f8:	2700      	movs	r7, #0
 80002fa:	469a      	mov	sl, r3
 80002fc:	e7a5      	b.n	800024a <__aeabi_fdiv+0x2e>
 80002fe:	0028      	movs	r0, r5
 8000300:	f001 fd70 	bl	8001de4 <__clzsi2>
 8000304:	2776      	movs	r7, #118	@ 0x76
 8000306:	1f43      	subs	r3, r0, #5
 8000308:	409d      	lsls	r5, r3
 800030a:	2300      	movs	r3, #0
 800030c:	427f      	negs	r7, r7
 800030e:	4699      	mov	r9, r3
 8000310:	469a      	mov	sl, r3
 8000312:	1a3f      	subs	r7, r7, r0
 8000314:	e799      	b.n	800024a <__aeabi_fdiv+0x2e>
 8000316:	0020      	movs	r0, r4
 8000318:	f001 fd64 	bl	8001de4 <__clzsi2>
 800031c:	1f43      	subs	r3, r0, #5
 800031e:	409c      	lsls	r4, r3
 8000320:	2376      	movs	r3, #118	@ 0x76
 8000322:	425b      	negs	r3, r3
 8000324:	1a1b      	subs	r3, r3, r0
 8000326:	2000      	movs	r0, #0
 8000328:	e79e      	b.n	8000268 <__aeabi_fdiv+0x4c>
 800032a:	2303      	movs	r3, #3
 800032c:	464a      	mov	r2, r9
 800032e:	431a      	orrs	r2, r3
 8000330:	4691      	mov	r9, r2
 8000332:	2003      	movs	r0, #3
 8000334:	33fc      	adds	r3, #252	@ 0xfc
 8000336:	e797      	b.n	8000268 <__aeabi_fdiv+0x4c>
 8000338:	230c      	movs	r3, #12
 800033a:	4699      	mov	r9, r3
 800033c:	3b09      	subs	r3, #9
 800033e:	27ff      	movs	r7, #255	@ 0xff
 8000340:	469a      	mov	sl, r3
 8000342:	e782      	b.n	800024a <__aeabi_fdiv+0x2e>
 8000344:	2803      	cmp	r0, #3
 8000346:	d02c      	beq.n	80003a2 <__aeabi_fdiv+0x186>
 8000348:	0032      	movs	r2, r6
 800034a:	0038      	movs	r0, r7
 800034c:	307f      	adds	r0, #127	@ 0x7f
 800034e:	2800      	cmp	r0, #0
 8000350:	dd47      	ble.n	80003e2 <__aeabi_fdiv+0x1c6>
 8000352:	0763      	lsls	r3, r4, #29
 8000354:	d004      	beq.n	8000360 <__aeabi_fdiv+0x144>
 8000356:	230f      	movs	r3, #15
 8000358:	4023      	ands	r3, r4
 800035a:	2b04      	cmp	r3, #4
 800035c:	d000      	beq.n	8000360 <__aeabi_fdiv+0x144>
 800035e:	3404      	adds	r4, #4
 8000360:	0123      	lsls	r3, r4, #4
 8000362:	d503      	bpl.n	800036c <__aeabi_fdiv+0x150>
 8000364:	0038      	movs	r0, r7
 8000366:	4b37      	ldr	r3, [pc, #220]	@ (8000444 <__aeabi_fdiv+0x228>)
 8000368:	3080      	adds	r0, #128	@ 0x80
 800036a:	401c      	ands	r4, r3
 800036c:	28fe      	cmp	r0, #254	@ 0xfe
 800036e:	dcb6      	bgt.n	80002de <__aeabi_fdiv+0xc2>
 8000370:	01a4      	lsls	r4, r4, #6
 8000372:	0a64      	lsrs	r4, r4, #9
 8000374:	b2c0      	uxtb	r0, r0
 8000376:	e7a9      	b.n	80002cc <__aeabi_fdiv+0xb0>
 8000378:	2480      	movs	r4, #128	@ 0x80
 800037a:	2200      	movs	r2, #0
 800037c:	20ff      	movs	r0, #255	@ 0xff
 800037e:	03e4      	lsls	r4, r4, #15
 8000380:	e7a4      	b.n	80002cc <__aeabi_fdiv+0xb0>
 8000382:	2380      	movs	r3, #128	@ 0x80
 8000384:	03db      	lsls	r3, r3, #15
 8000386:	421d      	tst	r5, r3
 8000388:	d001      	beq.n	800038e <__aeabi_fdiv+0x172>
 800038a:	421c      	tst	r4, r3
 800038c:	d00b      	beq.n	80003a6 <__aeabi_fdiv+0x18a>
 800038e:	2480      	movs	r4, #128	@ 0x80
 8000390:	03e4      	lsls	r4, r4, #15
 8000392:	432c      	orrs	r4, r5
 8000394:	0264      	lsls	r4, r4, #9
 8000396:	4642      	mov	r2, r8
 8000398:	20ff      	movs	r0, #255	@ 0xff
 800039a:	0a64      	lsrs	r4, r4, #9
 800039c:	e796      	b.n	80002cc <__aeabi_fdiv+0xb0>
 800039e:	4646      	mov	r6, r8
 80003a0:	002c      	movs	r4, r5
 80003a2:	2380      	movs	r3, #128	@ 0x80
 80003a4:	03db      	lsls	r3, r3, #15
 80003a6:	431c      	orrs	r4, r3
 80003a8:	0264      	lsls	r4, r4, #9
 80003aa:	0032      	movs	r2, r6
 80003ac:	20ff      	movs	r0, #255	@ 0xff
 80003ae:	0a64      	lsrs	r4, r4, #9
 80003b0:	e78c      	b.n	80002cc <__aeabi_fdiv+0xb0>
 80003b2:	016d      	lsls	r5, r5, #5
 80003b4:	0160      	lsls	r0, r4, #5
 80003b6:	4285      	cmp	r5, r0
 80003b8:	d22d      	bcs.n	8000416 <__aeabi_fdiv+0x1fa>
 80003ba:	231b      	movs	r3, #27
 80003bc:	2400      	movs	r4, #0
 80003be:	3f01      	subs	r7, #1
 80003c0:	2601      	movs	r6, #1
 80003c2:	0029      	movs	r1, r5
 80003c4:	0064      	lsls	r4, r4, #1
 80003c6:	006d      	lsls	r5, r5, #1
 80003c8:	2900      	cmp	r1, #0
 80003ca:	db01      	blt.n	80003d0 <__aeabi_fdiv+0x1b4>
 80003cc:	4285      	cmp	r5, r0
 80003ce:	d301      	bcc.n	80003d4 <__aeabi_fdiv+0x1b8>
 80003d0:	1a2d      	subs	r5, r5, r0
 80003d2:	4334      	orrs	r4, r6
 80003d4:	3b01      	subs	r3, #1
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d1f3      	bne.n	80003c2 <__aeabi_fdiv+0x1a6>
 80003da:	1e6b      	subs	r3, r5, #1
 80003dc:	419d      	sbcs	r5, r3
 80003de:	432c      	orrs	r4, r5
 80003e0:	e7b3      	b.n	800034a <__aeabi_fdiv+0x12e>
 80003e2:	2301      	movs	r3, #1
 80003e4:	1a1b      	subs	r3, r3, r0
 80003e6:	2b1b      	cmp	r3, #27
 80003e8:	dd00      	ble.n	80003ec <__aeabi_fdiv+0x1d0>
 80003ea:	e76d      	b.n	80002c8 <__aeabi_fdiv+0xac>
 80003ec:	0021      	movs	r1, r4
 80003ee:	379e      	adds	r7, #158	@ 0x9e
 80003f0:	40d9      	lsrs	r1, r3
 80003f2:	40bc      	lsls	r4, r7
 80003f4:	000b      	movs	r3, r1
 80003f6:	1e61      	subs	r1, r4, #1
 80003f8:	418c      	sbcs	r4, r1
 80003fa:	4323      	orrs	r3, r4
 80003fc:	0759      	lsls	r1, r3, #29
 80003fe:	d004      	beq.n	800040a <__aeabi_fdiv+0x1ee>
 8000400:	210f      	movs	r1, #15
 8000402:	4019      	ands	r1, r3
 8000404:	2904      	cmp	r1, #4
 8000406:	d000      	beq.n	800040a <__aeabi_fdiv+0x1ee>
 8000408:	3304      	adds	r3, #4
 800040a:	0159      	lsls	r1, r3, #5
 800040c:	d413      	bmi.n	8000436 <__aeabi_fdiv+0x21a>
 800040e:	019b      	lsls	r3, r3, #6
 8000410:	2000      	movs	r0, #0
 8000412:	0a5c      	lsrs	r4, r3, #9
 8000414:	e75a      	b.n	80002cc <__aeabi_fdiv+0xb0>
 8000416:	231a      	movs	r3, #26
 8000418:	2401      	movs	r4, #1
 800041a:	1a2d      	subs	r5, r5, r0
 800041c:	e7d0      	b.n	80003c0 <__aeabi_fdiv+0x1a4>
 800041e:	1e98      	subs	r0, r3, #2
 8000420:	4243      	negs	r3, r0
 8000422:	4158      	adcs	r0, r3
 8000424:	4240      	negs	r0, r0
 8000426:	0032      	movs	r2, r6
 8000428:	2400      	movs	r4, #0
 800042a:	b2c0      	uxtb	r0, r0
 800042c:	e74e      	b.n	80002cc <__aeabi_fdiv+0xb0>
 800042e:	4642      	mov	r2, r8
 8000430:	20ff      	movs	r0, #255	@ 0xff
 8000432:	2400      	movs	r4, #0
 8000434:	e74a      	b.n	80002cc <__aeabi_fdiv+0xb0>
 8000436:	2001      	movs	r0, #1
 8000438:	2400      	movs	r4, #0
 800043a:	e747      	b.n	80002cc <__aeabi_fdiv+0xb0>
 800043c:	080050dc 	.word	0x080050dc
 8000440:	0800511c 	.word	0x0800511c
 8000444:	f7ffffff 	.word	0xf7ffffff

08000448 <__aeabi_fmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	464f      	mov	r7, r9
 800044c:	4646      	mov	r6, r8
 800044e:	46d6      	mov	lr, sl
 8000450:	0044      	lsls	r4, r0, #1
 8000452:	b5c0      	push	{r6, r7, lr}
 8000454:	0246      	lsls	r6, r0, #9
 8000456:	1c0f      	adds	r7, r1, #0
 8000458:	0a76      	lsrs	r6, r6, #9
 800045a:	0e24      	lsrs	r4, r4, #24
 800045c:	0fc5      	lsrs	r5, r0, #31
 800045e:	2c00      	cmp	r4, #0
 8000460:	d100      	bne.n	8000464 <__aeabi_fmul+0x1c>
 8000462:	e0da      	b.n	800061a <__aeabi_fmul+0x1d2>
 8000464:	2cff      	cmp	r4, #255	@ 0xff
 8000466:	d074      	beq.n	8000552 <__aeabi_fmul+0x10a>
 8000468:	2380      	movs	r3, #128	@ 0x80
 800046a:	00f6      	lsls	r6, r6, #3
 800046c:	04db      	lsls	r3, r3, #19
 800046e:	431e      	orrs	r6, r3
 8000470:	2300      	movs	r3, #0
 8000472:	4699      	mov	r9, r3
 8000474:	469a      	mov	sl, r3
 8000476:	3c7f      	subs	r4, #127	@ 0x7f
 8000478:	027b      	lsls	r3, r7, #9
 800047a:	0a5b      	lsrs	r3, r3, #9
 800047c:	4698      	mov	r8, r3
 800047e:	007b      	lsls	r3, r7, #1
 8000480:	0e1b      	lsrs	r3, r3, #24
 8000482:	0fff      	lsrs	r7, r7, #31
 8000484:	2b00      	cmp	r3, #0
 8000486:	d074      	beq.n	8000572 <__aeabi_fmul+0x12a>
 8000488:	2bff      	cmp	r3, #255	@ 0xff
 800048a:	d100      	bne.n	800048e <__aeabi_fmul+0x46>
 800048c:	e08e      	b.n	80005ac <__aeabi_fmul+0x164>
 800048e:	4642      	mov	r2, r8
 8000490:	2180      	movs	r1, #128	@ 0x80
 8000492:	00d2      	lsls	r2, r2, #3
 8000494:	04c9      	lsls	r1, r1, #19
 8000496:	4311      	orrs	r1, r2
 8000498:	3b7f      	subs	r3, #127	@ 0x7f
 800049a:	002a      	movs	r2, r5
 800049c:	18e4      	adds	r4, r4, r3
 800049e:	464b      	mov	r3, r9
 80004a0:	407a      	eors	r2, r7
 80004a2:	4688      	mov	r8, r1
 80004a4:	b2d2      	uxtb	r2, r2
 80004a6:	2b0a      	cmp	r3, #10
 80004a8:	dc75      	bgt.n	8000596 <__aeabi_fmul+0x14e>
 80004aa:	464b      	mov	r3, r9
 80004ac:	2000      	movs	r0, #0
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	dd0f      	ble.n	80004d2 <__aeabi_fmul+0x8a>
 80004b2:	4649      	mov	r1, r9
 80004b4:	2301      	movs	r3, #1
 80004b6:	408b      	lsls	r3, r1
 80004b8:	21a6      	movs	r1, #166	@ 0xa6
 80004ba:	00c9      	lsls	r1, r1, #3
 80004bc:	420b      	tst	r3, r1
 80004be:	d169      	bne.n	8000594 <__aeabi_fmul+0x14c>
 80004c0:	2190      	movs	r1, #144	@ 0x90
 80004c2:	0089      	lsls	r1, r1, #2
 80004c4:	420b      	tst	r3, r1
 80004c6:	d000      	beq.n	80004ca <__aeabi_fmul+0x82>
 80004c8:	e100      	b.n	80006cc <__aeabi_fmul+0x284>
 80004ca:	2188      	movs	r1, #136	@ 0x88
 80004cc:	4219      	tst	r1, r3
 80004ce:	d000      	beq.n	80004d2 <__aeabi_fmul+0x8a>
 80004d0:	e0f5      	b.n	80006be <__aeabi_fmul+0x276>
 80004d2:	4641      	mov	r1, r8
 80004d4:	0409      	lsls	r1, r1, #16
 80004d6:	0c09      	lsrs	r1, r1, #16
 80004d8:	4643      	mov	r3, r8
 80004da:	0008      	movs	r0, r1
 80004dc:	0c35      	lsrs	r5, r6, #16
 80004de:	0436      	lsls	r6, r6, #16
 80004e0:	0c1b      	lsrs	r3, r3, #16
 80004e2:	0c36      	lsrs	r6, r6, #16
 80004e4:	4370      	muls	r0, r6
 80004e6:	4369      	muls	r1, r5
 80004e8:	435e      	muls	r6, r3
 80004ea:	435d      	muls	r5, r3
 80004ec:	1876      	adds	r6, r6, r1
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	199b      	adds	r3, r3, r6
 80004f2:	4299      	cmp	r1, r3
 80004f4:	d903      	bls.n	80004fe <__aeabi_fmul+0xb6>
 80004f6:	2180      	movs	r1, #128	@ 0x80
 80004f8:	0249      	lsls	r1, r1, #9
 80004fa:	468c      	mov	ip, r1
 80004fc:	4465      	add	r5, ip
 80004fe:	0400      	lsls	r0, r0, #16
 8000500:	0419      	lsls	r1, r3, #16
 8000502:	0c00      	lsrs	r0, r0, #16
 8000504:	1809      	adds	r1, r1, r0
 8000506:	018e      	lsls	r6, r1, #6
 8000508:	1e70      	subs	r0, r6, #1
 800050a:	4186      	sbcs	r6, r0
 800050c:	0c1b      	lsrs	r3, r3, #16
 800050e:	0e89      	lsrs	r1, r1, #26
 8000510:	195b      	adds	r3, r3, r5
 8000512:	430e      	orrs	r6, r1
 8000514:	019b      	lsls	r3, r3, #6
 8000516:	431e      	orrs	r6, r3
 8000518:	011b      	lsls	r3, r3, #4
 800051a:	d46c      	bmi.n	80005f6 <__aeabi_fmul+0x1ae>
 800051c:	0023      	movs	r3, r4
 800051e:	337f      	adds	r3, #127	@ 0x7f
 8000520:	2b00      	cmp	r3, #0
 8000522:	dc00      	bgt.n	8000526 <__aeabi_fmul+0xde>
 8000524:	e0b1      	b.n	800068a <__aeabi_fmul+0x242>
 8000526:	0015      	movs	r5, r2
 8000528:	0771      	lsls	r1, r6, #29
 800052a:	d00b      	beq.n	8000544 <__aeabi_fmul+0xfc>
 800052c:	200f      	movs	r0, #15
 800052e:	0021      	movs	r1, r4
 8000530:	4030      	ands	r0, r6
 8000532:	2804      	cmp	r0, #4
 8000534:	d006      	beq.n	8000544 <__aeabi_fmul+0xfc>
 8000536:	3604      	adds	r6, #4
 8000538:	0132      	lsls	r2, r6, #4
 800053a:	d503      	bpl.n	8000544 <__aeabi_fmul+0xfc>
 800053c:	4b6e      	ldr	r3, [pc, #440]	@ (80006f8 <__aeabi_fmul+0x2b0>)
 800053e:	401e      	ands	r6, r3
 8000540:	000b      	movs	r3, r1
 8000542:	3380      	adds	r3, #128	@ 0x80
 8000544:	2bfe      	cmp	r3, #254	@ 0xfe
 8000546:	dd00      	ble.n	800054a <__aeabi_fmul+0x102>
 8000548:	e0bd      	b.n	80006c6 <__aeabi_fmul+0x27e>
 800054a:	01b2      	lsls	r2, r6, #6
 800054c:	0a52      	lsrs	r2, r2, #9
 800054e:	b2db      	uxtb	r3, r3
 8000550:	e048      	b.n	80005e4 <__aeabi_fmul+0x19c>
 8000552:	2e00      	cmp	r6, #0
 8000554:	d000      	beq.n	8000558 <__aeabi_fmul+0x110>
 8000556:	e092      	b.n	800067e <__aeabi_fmul+0x236>
 8000558:	2308      	movs	r3, #8
 800055a:	4699      	mov	r9, r3
 800055c:	3b06      	subs	r3, #6
 800055e:	469a      	mov	sl, r3
 8000560:	027b      	lsls	r3, r7, #9
 8000562:	0a5b      	lsrs	r3, r3, #9
 8000564:	4698      	mov	r8, r3
 8000566:	007b      	lsls	r3, r7, #1
 8000568:	24ff      	movs	r4, #255	@ 0xff
 800056a:	0e1b      	lsrs	r3, r3, #24
 800056c:	0fff      	lsrs	r7, r7, #31
 800056e:	2b00      	cmp	r3, #0
 8000570:	d18a      	bne.n	8000488 <__aeabi_fmul+0x40>
 8000572:	4642      	mov	r2, r8
 8000574:	2a00      	cmp	r2, #0
 8000576:	d164      	bne.n	8000642 <__aeabi_fmul+0x1fa>
 8000578:	4649      	mov	r1, r9
 800057a:	3201      	adds	r2, #1
 800057c:	4311      	orrs	r1, r2
 800057e:	4689      	mov	r9, r1
 8000580:	290a      	cmp	r1, #10
 8000582:	dc08      	bgt.n	8000596 <__aeabi_fmul+0x14e>
 8000584:	407d      	eors	r5, r7
 8000586:	2001      	movs	r0, #1
 8000588:	b2ea      	uxtb	r2, r5
 800058a:	2902      	cmp	r1, #2
 800058c:	dc91      	bgt.n	80004b2 <__aeabi_fmul+0x6a>
 800058e:	0015      	movs	r5, r2
 8000590:	2200      	movs	r2, #0
 8000592:	e027      	b.n	80005e4 <__aeabi_fmul+0x19c>
 8000594:	0015      	movs	r5, r2
 8000596:	4653      	mov	r3, sl
 8000598:	2b02      	cmp	r3, #2
 800059a:	d100      	bne.n	800059e <__aeabi_fmul+0x156>
 800059c:	e093      	b.n	80006c6 <__aeabi_fmul+0x27e>
 800059e:	2b03      	cmp	r3, #3
 80005a0:	d01a      	beq.n	80005d8 <__aeabi_fmul+0x190>
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d12c      	bne.n	8000600 <__aeabi_fmul+0x1b8>
 80005a6:	2300      	movs	r3, #0
 80005a8:	2200      	movs	r2, #0
 80005aa:	e01b      	b.n	80005e4 <__aeabi_fmul+0x19c>
 80005ac:	4643      	mov	r3, r8
 80005ae:	34ff      	adds	r4, #255	@ 0xff
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d055      	beq.n	8000660 <__aeabi_fmul+0x218>
 80005b4:	2103      	movs	r1, #3
 80005b6:	464b      	mov	r3, r9
 80005b8:	430b      	orrs	r3, r1
 80005ba:	0019      	movs	r1, r3
 80005bc:	2b0a      	cmp	r3, #10
 80005be:	dc00      	bgt.n	80005c2 <__aeabi_fmul+0x17a>
 80005c0:	e092      	b.n	80006e8 <__aeabi_fmul+0x2a0>
 80005c2:	2b0f      	cmp	r3, #15
 80005c4:	d000      	beq.n	80005c8 <__aeabi_fmul+0x180>
 80005c6:	e08c      	b.n	80006e2 <__aeabi_fmul+0x29a>
 80005c8:	2280      	movs	r2, #128	@ 0x80
 80005ca:	03d2      	lsls	r2, r2, #15
 80005cc:	4216      	tst	r6, r2
 80005ce:	d003      	beq.n	80005d8 <__aeabi_fmul+0x190>
 80005d0:	4643      	mov	r3, r8
 80005d2:	4213      	tst	r3, r2
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fmul+0x190>
 80005d6:	e07d      	b.n	80006d4 <__aeabi_fmul+0x28c>
 80005d8:	2280      	movs	r2, #128	@ 0x80
 80005da:	03d2      	lsls	r2, r2, #15
 80005dc:	4332      	orrs	r2, r6
 80005de:	0252      	lsls	r2, r2, #9
 80005e0:	0a52      	lsrs	r2, r2, #9
 80005e2:	23ff      	movs	r3, #255	@ 0xff
 80005e4:	05d8      	lsls	r0, r3, #23
 80005e6:	07ed      	lsls	r5, r5, #31
 80005e8:	4310      	orrs	r0, r2
 80005ea:	4328      	orrs	r0, r5
 80005ec:	bce0      	pop	{r5, r6, r7}
 80005ee:	46ba      	mov	sl, r7
 80005f0:	46b1      	mov	r9, r6
 80005f2:	46a8      	mov	r8, r5
 80005f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f6:	2301      	movs	r3, #1
 80005f8:	0015      	movs	r5, r2
 80005fa:	0871      	lsrs	r1, r6, #1
 80005fc:	401e      	ands	r6, r3
 80005fe:	430e      	orrs	r6, r1
 8000600:	0023      	movs	r3, r4
 8000602:	3380      	adds	r3, #128	@ 0x80
 8000604:	1c61      	adds	r1, r4, #1
 8000606:	2b00      	cmp	r3, #0
 8000608:	dd41      	ble.n	800068e <__aeabi_fmul+0x246>
 800060a:	0772      	lsls	r2, r6, #29
 800060c:	d094      	beq.n	8000538 <__aeabi_fmul+0xf0>
 800060e:	220f      	movs	r2, #15
 8000610:	4032      	ands	r2, r6
 8000612:	2a04      	cmp	r2, #4
 8000614:	d000      	beq.n	8000618 <__aeabi_fmul+0x1d0>
 8000616:	e78e      	b.n	8000536 <__aeabi_fmul+0xee>
 8000618:	e78e      	b.n	8000538 <__aeabi_fmul+0xf0>
 800061a:	2e00      	cmp	r6, #0
 800061c:	d105      	bne.n	800062a <__aeabi_fmul+0x1e2>
 800061e:	2304      	movs	r3, #4
 8000620:	4699      	mov	r9, r3
 8000622:	3b03      	subs	r3, #3
 8000624:	2400      	movs	r4, #0
 8000626:	469a      	mov	sl, r3
 8000628:	e726      	b.n	8000478 <__aeabi_fmul+0x30>
 800062a:	0030      	movs	r0, r6
 800062c:	f001 fbda 	bl	8001de4 <__clzsi2>
 8000630:	2476      	movs	r4, #118	@ 0x76
 8000632:	1f43      	subs	r3, r0, #5
 8000634:	409e      	lsls	r6, r3
 8000636:	2300      	movs	r3, #0
 8000638:	4264      	negs	r4, r4
 800063a:	4699      	mov	r9, r3
 800063c:	469a      	mov	sl, r3
 800063e:	1a24      	subs	r4, r4, r0
 8000640:	e71a      	b.n	8000478 <__aeabi_fmul+0x30>
 8000642:	4640      	mov	r0, r8
 8000644:	f001 fbce 	bl	8001de4 <__clzsi2>
 8000648:	464b      	mov	r3, r9
 800064a:	1a24      	subs	r4, r4, r0
 800064c:	3c76      	subs	r4, #118	@ 0x76
 800064e:	2b0a      	cmp	r3, #10
 8000650:	dca1      	bgt.n	8000596 <__aeabi_fmul+0x14e>
 8000652:	4643      	mov	r3, r8
 8000654:	3805      	subs	r0, #5
 8000656:	4083      	lsls	r3, r0
 8000658:	407d      	eors	r5, r7
 800065a:	4698      	mov	r8, r3
 800065c:	b2ea      	uxtb	r2, r5
 800065e:	e724      	b.n	80004aa <__aeabi_fmul+0x62>
 8000660:	464a      	mov	r2, r9
 8000662:	3302      	adds	r3, #2
 8000664:	4313      	orrs	r3, r2
 8000666:	002a      	movs	r2, r5
 8000668:	407a      	eors	r2, r7
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	2b0a      	cmp	r3, #10
 800066e:	dc92      	bgt.n	8000596 <__aeabi_fmul+0x14e>
 8000670:	4649      	mov	r1, r9
 8000672:	0015      	movs	r5, r2
 8000674:	2900      	cmp	r1, #0
 8000676:	d026      	beq.n	80006c6 <__aeabi_fmul+0x27e>
 8000678:	4699      	mov	r9, r3
 800067a:	2002      	movs	r0, #2
 800067c:	e719      	b.n	80004b2 <__aeabi_fmul+0x6a>
 800067e:	230c      	movs	r3, #12
 8000680:	4699      	mov	r9, r3
 8000682:	3b09      	subs	r3, #9
 8000684:	24ff      	movs	r4, #255	@ 0xff
 8000686:	469a      	mov	sl, r3
 8000688:	e6f6      	b.n	8000478 <__aeabi_fmul+0x30>
 800068a:	0015      	movs	r5, r2
 800068c:	0021      	movs	r1, r4
 800068e:	2201      	movs	r2, #1
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	2b1b      	cmp	r3, #27
 8000694:	dd00      	ble.n	8000698 <__aeabi_fmul+0x250>
 8000696:	e786      	b.n	80005a6 <__aeabi_fmul+0x15e>
 8000698:	319e      	adds	r1, #158	@ 0x9e
 800069a:	0032      	movs	r2, r6
 800069c:	408e      	lsls	r6, r1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	1e73      	subs	r3, r6, #1
 80006a2:	419e      	sbcs	r6, r3
 80006a4:	4332      	orrs	r2, r6
 80006a6:	0753      	lsls	r3, r2, #29
 80006a8:	d004      	beq.n	80006b4 <__aeabi_fmul+0x26c>
 80006aa:	230f      	movs	r3, #15
 80006ac:	4013      	ands	r3, r2
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	d000      	beq.n	80006b4 <__aeabi_fmul+0x26c>
 80006b2:	3204      	adds	r2, #4
 80006b4:	0153      	lsls	r3, r2, #5
 80006b6:	d510      	bpl.n	80006da <__aeabi_fmul+0x292>
 80006b8:	2301      	movs	r3, #1
 80006ba:	2200      	movs	r2, #0
 80006bc:	e792      	b.n	80005e4 <__aeabi_fmul+0x19c>
 80006be:	003d      	movs	r5, r7
 80006c0:	4646      	mov	r6, r8
 80006c2:	4682      	mov	sl, r0
 80006c4:	e767      	b.n	8000596 <__aeabi_fmul+0x14e>
 80006c6:	23ff      	movs	r3, #255	@ 0xff
 80006c8:	2200      	movs	r2, #0
 80006ca:	e78b      	b.n	80005e4 <__aeabi_fmul+0x19c>
 80006cc:	2280      	movs	r2, #128	@ 0x80
 80006ce:	2500      	movs	r5, #0
 80006d0:	03d2      	lsls	r2, r2, #15
 80006d2:	e786      	b.n	80005e2 <__aeabi_fmul+0x19a>
 80006d4:	003d      	movs	r5, r7
 80006d6:	431a      	orrs	r2, r3
 80006d8:	e783      	b.n	80005e2 <__aeabi_fmul+0x19a>
 80006da:	0192      	lsls	r2, r2, #6
 80006dc:	2300      	movs	r3, #0
 80006de:	0a52      	lsrs	r2, r2, #9
 80006e0:	e780      	b.n	80005e4 <__aeabi_fmul+0x19c>
 80006e2:	003d      	movs	r5, r7
 80006e4:	4646      	mov	r6, r8
 80006e6:	e777      	b.n	80005d8 <__aeabi_fmul+0x190>
 80006e8:	002a      	movs	r2, r5
 80006ea:	2301      	movs	r3, #1
 80006ec:	407a      	eors	r2, r7
 80006ee:	408b      	lsls	r3, r1
 80006f0:	2003      	movs	r0, #3
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	e6e9      	b.n	80004ca <__aeabi_fmul+0x82>
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	f7ffffff 	.word	0xf7ffffff

080006fc <__aeabi_i2f>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	2800      	cmp	r0, #0
 8000700:	d012      	beq.n	8000728 <__aeabi_i2f+0x2c>
 8000702:	17c3      	asrs	r3, r0, #31
 8000704:	18c5      	adds	r5, r0, r3
 8000706:	405d      	eors	r5, r3
 8000708:	0fc4      	lsrs	r4, r0, #31
 800070a:	0028      	movs	r0, r5
 800070c:	f001 fb6a 	bl	8001de4 <__clzsi2>
 8000710:	239e      	movs	r3, #158	@ 0x9e
 8000712:	1a1b      	subs	r3, r3, r0
 8000714:	2b96      	cmp	r3, #150	@ 0x96
 8000716:	dc0f      	bgt.n	8000738 <__aeabi_i2f+0x3c>
 8000718:	2808      	cmp	r0, #8
 800071a:	d038      	beq.n	800078e <__aeabi_i2f+0x92>
 800071c:	3808      	subs	r0, #8
 800071e:	4085      	lsls	r5, r0
 8000720:	026d      	lsls	r5, r5, #9
 8000722:	0a6d      	lsrs	r5, r5, #9
 8000724:	b2d8      	uxtb	r0, r3
 8000726:	e002      	b.n	800072e <__aeabi_i2f+0x32>
 8000728:	2400      	movs	r4, #0
 800072a:	2000      	movs	r0, #0
 800072c:	2500      	movs	r5, #0
 800072e:	05c0      	lsls	r0, r0, #23
 8000730:	4328      	orrs	r0, r5
 8000732:	07e4      	lsls	r4, r4, #31
 8000734:	4320      	orrs	r0, r4
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	2b99      	cmp	r3, #153	@ 0x99
 800073a:	dc14      	bgt.n	8000766 <__aeabi_i2f+0x6a>
 800073c:	1f42      	subs	r2, r0, #5
 800073e:	4095      	lsls	r5, r2
 8000740:	002a      	movs	r2, r5
 8000742:	4915      	ldr	r1, [pc, #84]	@ (8000798 <__aeabi_i2f+0x9c>)
 8000744:	4011      	ands	r1, r2
 8000746:	0755      	lsls	r5, r2, #29
 8000748:	d01c      	beq.n	8000784 <__aeabi_i2f+0x88>
 800074a:	250f      	movs	r5, #15
 800074c:	402a      	ands	r2, r5
 800074e:	2a04      	cmp	r2, #4
 8000750:	d018      	beq.n	8000784 <__aeabi_i2f+0x88>
 8000752:	3104      	adds	r1, #4
 8000754:	08ca      	lsrs	r2, r1, #3
 8000756:	0149      	lsls	r1, r1, #5
 8000758:	d515      	bpl.n	8000786 <__aeabi_i2f+0x8a>
 800075a:	239f      	movs	r3, #159	@ 0x9f
 800075c:	0252      	lsls	r2, r2, #9
 800075e:	1a18      	subs	r0, r3, r0
 8000760:	0a55      	lsrs	r5, r2, #9
 8000762:	b2c0      	uxtb	r0, r0
 8000764:	e7e3      	b.n	800072e <__aeabi_i2f+0x32>
 8000766:	2205      	movs	r2, #5
 8000768:	0029      	movs	r1, r5
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	40d1      	lsrs	r1, r2
 800076e:	0002      	movs	r2, r0
 8000770:	321b      	adds	r2, #27
 8000772:	4095      	lsls	r5, r2
 8000774:	002a      	movs	r2, r5
 8000776:	1e55      	subs	r5, r2, #1
 8000778:	41aa      	sbcs	r2, r5
 800077a:	430a      	orrs	r2, r1
 800077c:	4906      	ldr	r1, [pc, #24]	@ (8000798 <__aeabi_i2f+0x9c>)
 800077e:	4011      	ands	r1, r2
 8000780:	0755      	lsls	r5, r2, #29
 8000782:	d1e2      	bne.n	800074a <__aeabi_i2f+0x4e>
 8000784:	08ca      	lsrs	r2, r1, #3
 8000786:	0252      	lsls	r2, r2, #9
 8000788:	0a55      	lsrs	r5, r2, #9
 800078a:	b2d8      	uxtb	r0, r3
 800078c:	e7cf      	b.n	800072e <__aeabi_i2f+0x32>
 800078e:	026d      	lsls	r5, r5, #9
 8000790:	0a6d      	lsrs	r5, r5, #9
 8000792:	308e      	adds	r0, #142	@ 0x8e
 8000794:	e7cb      	b.n	800072e <__aeabi_i2f+0x32>
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	fbffffff 	.word	0xfbffffff

0800079c <__aeabi_ddiv>:
 800079c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800079e:	46de      	mov	lr, fp
 80007a0:	4645      	mov	r5, r8
 80007a2:	4657      	mov	r7, sl
 80007a4:	464e      	mov	r6, r9
 80007a6:	b5e0      	push	{r5, r6, r7, lr}
 80007a8:	b087      	sub	sp, #28
 80007aa:	9200      	str	r2, [sp, #0]
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	030b      	lsls	r3, r1, #12
 80007b0:	0b1b      	lsrs	r3, r3, #12
 80007b2:	469b      	mov	fp, r3
 80007b4:	0fca      	lsrs	r2, r1, #31
 80007b6:	004b      	lsls	r3, r1, #1
 80007b8:	0004      	movs	r4, r0
 80007ba:	4680      	mov	r8, r0
 80007bc:	0d5b      	lsrs	r3, r3, #21
 80007be:	9202      	str	r2, [sp, #8]
 80007c0:	d100      	bne.n	80007c4 <__aeabi_ddiv+0x28>
 80007c2:	e098      	b.n	80008f6 <__aeabi_ddiv+0x15a>
 80007c4:	4a7c      	ldr	r2, [pc, #496]	@ (80009b8 <__aeabi_ddiv+0x21c>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d037      	beq.n	800083a <__aeabi_ddiv+0x9e>
 80007ca:	4659      	mov	r1, fp
 80007cc:	0f42      	lsrs	r2, r0, #29
 80007ce:	00c9      	lsls	r1, r1, #3
 80007d0:	430a      	orrs	r2, r1
 80007d2:	2180      	movs	r1, #128	@ 0x80
 80007d4:	0409      	lsls	r1, r1, #16
 80007d6:	4311      	orrs	r1, r2
 80007d8:	00c2      	lsls	r2, r0, #3
 80007da:	4690      	mov	r8, r2
 80007dc:	4a77      	ldr	r2, [pc, #476]	@ (80009bc <__aeabi_ddiv+0x220>)
 80007de:	4689      	mov	r9, r1
 80007e0:	4692      	mov	sl, r2
 80007e2:	449a      	add	sl, r3
 80007e4:	2300      	movs	r3, #0
 80007e6:	2400      	movs	r4, #0
 80007e8:	9303      	str	r3, [sp, #12]
 80007ea:	9e00      	ldr	r6, [sp, #0]
 80007ec:	9f01      	ldr	r7, [sp, #4]
 80007ee:	033b      	lsls	r3, r7, #12
 80007f0:	0b1b      	lsrs	r3, r3, #12
 80007f2:	469b      	mov	fp, r3
 80007f4:	007b      	lsls	r3, r7, #1
 80007f6:	0030      	movs	r0, r6
 80007f8:	0d5b      	lsrs	r3, r3, #21
 80007fa:	0ffd      	lsrs	r5, r7, #31
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d059      	beq.n	80008b4 <__aeabi_ddiv+0x118>
 8000800:	4a6d      	ldr	r2, [pc, #436]	@ (80009b8 <__aeabi_ddiv+0x21c>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d048      	beq.n	8000898 <__aeabi_ddiv+0xfc>
 8000806:	4659      	mov	r1, fp
 8000808:	0f72      	lsrs	r2, r6, #29
 800080a:	00c9      	lsls	r1, r1, #3
 800080c:	430a      	orrs	r2, r1
 800080e:	2180      	movs	r1, #128	@ 0x80
 8000810:	0409      	lsls	r1, r1, #16
 8000812:	4311      	orrs	r1, r2
 8000814:	468b      	mov	fp, r1
 8000816:	4969      	ldr	r1, [pc, #420]	@ (80009bc <__aeabi_ddiv+0x220>)
 8000818:	00f2      	lsls	r2, r6, #3
 800081a:	468c      	mov	ip, r1
 800081c:	4651      	mov	r1, sl
 800081e:	4463      	add	r3, ip
 8000820:	1acb      	subs	r3, r1, r3
 8000822:	469a      	mov	sl, r3
 8000824:	2100      	movs	r1, #0
 8000826:	9e02      	ldr	r6, [sp, #8]
 8000828:	406e      	eors	r6, r5
 800082a:	b2f6      	uxtb	r6, r6
 800082c:	2c0f      	cmp	r4, #15
 800082e:	d900      	bls.n	8000832 <__aeabi_ddiv+0x96>
 8000830:	e0ce      	b.n	80009d0 <__aeabi_ddiv+0x234>
 8000832:	4b63      	ldr	r3, [pc, #396]	@ (80009c0 <__aeabi_ddiv+0x224>)
 8000834:	00a4      	lsls	r4, r4, #2
 8000836:	591b      	ldr	r3, [r3, r4]
 8000838:	469f      	mov	pc, r3
 800083a:	465a      	mov	r2, fp
 800083c:	4302      	orrs	r2, r0
 800083e:	4691      	mov	r9, r2
 8000840:	d000      	beq.n	8000844 <__aeabi_ddiv+0xa8>
 8000842:	e090      	b.n	8000966 <__aeabi_ddiv+0x1ca>
 8000844:	469a      	mov	sl, r3
 8000846:	2302      	movs	r3, #2
 8000848:	4690      	mov	r8, r2
 800084a:	2408      	movs	r4, #8
 800084c:	9303      	str	r3, [sp, #12]
 800084e:	e7cc      	b.n	80007ea <__aeabi_ddiv+0x4e>
 8000850:	46cb      	mov	fp, r9
 8000852:	4642      	mov	r2, r8
 8000854:	9d02      	ldr	r5, [sp, #8]
 8000856:	9903      	ldr	r1, [sp, #12]
 8000858:	2902      	cmp	r1, #2
 800085a:	d100      	bne.n	800085e <__aeabi_ddiv+0xc2>
 800085c:	e1de      	b.n	8000c1c <__aeabi_ddiv+0x480>
 800085e:	2903      	cmp	r1, #3
 8000860:	d100      	bne.n	8000864 <__aeabi_ddiv+0xc8>
 8000862:	e08d      	b.n	8000980 <__aeabi_ddiv+0x1e4>
 8000864:	2901      	cmp	r1, #1
 8000866:	d000      	beq.n	800086a <__aeabi_ddiv+0xce>
 8000868:	e179      	b.n	8000b5e <__aeabi_ddiv+0x3c2>
 800086a:	002e      	movs	r6, r5
 800086c:	2200      	movs	r2, #0
 800086e:	2300      	movs	r3, #0
 8000870:	2400      	movs	r4, #0
 8000872:	4690      	mov	r8, r2
 8000874:	051b      	lsls	r3, r3, #20
 8000876:	4323      	orrs	r3, r4
 8000878:	07f6      	lsls	r6, r6, #31
 800087a:	4333      	orrs	r3, r6
 800087c:	4640      	mov	r0, r8
 800087e:	0019      	movs	r1, r3
 8000880:	b007      	add	sp, #28
 8000882:	bcf0      	pop	{r4, r5, r6, r7}
 8000884:	46bb      	mov	fp, r7
 8000886:	46b2      	mov	sl, r6
 8000888:	46a9      	mov	r9, r5
 800088a:	46a0      	mov	r8, r4
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	2200      	movs	r2, #0
 8000890:	2400      	movs	r4, #0
 8000892:	4690      	mov	r8, r2
 8000894:	4b48      	ldr	r3, [pc, #288]	@ (80009b8 <__aeabi_ddiv+0x21c>)
 8000896:	e7ed      	b.n	8000874 <__aeabi_ddiv+0xd8>
 8000898:	465a      	mov	r2, fp
 800089a:	9b00      	ldr	r3, [sp, #0]
 800089c:	431a      	orrs	r2, r3
 800089e:	4b49      	ldr	r3, [pc, #292]	@ (80009c4 <__aeabi_ddiv+0x228>)
 80008a0:	469c      	mov	ip, r3
 80008a2:	44e2      	add	sl, ip
 80008a4:	2a00      	cmp	r2, #0
 80008a6:	d159      	bne.n	800095c <__aeabi_ddiv+0x1c0>
 80008a8:	2302      	movs	r3, #2
 80008aa:	431c      	orrs	r4, r3
 80008ac:	2300      	movs	r3, #0
 80008ae:	2102      	movs	r1, #2
 80008b0:	469b      	mov	fp, r3
 80008b2:	e7b8      	b.n	8000826 <__aeabi_ddiv+0x8a>
 80008b4:	465a      	mov	r2, fp
 80008b6:	9b00      	ldr	r3, [sp, #0]
 80008b8:	431a      	orrs	r2, r3
 80008ba:	d049      	beq.n	8000950 <__aeabi_ddiv+0x1b4>
 80008bc:	465b      	mov	r3, fp
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d100      	bne.n	80008c4 <__aeabi_ddiv+0x128>
 80008c2:	e19c      	b.n	8000bfe <__aeabi_ddiv+0x462>
 80008c4:	4658      	mov	r0, fp
 80008c6:	f001 fa8d 	bl	8001de4 <__clzsi2>
 80008ca:	0002      	movs	r2, r0
 80008cc:	0003      	movs	r3, r0
 80008ce:	3a0b      	subs	r2, #11
 80008d0:	271d      	movs	r7, #29
 80008d2:	9e00      	ldr	r6, [sp, #0]
 80008d4:	1aba      	subs	r2, r7, r2
 80008d6:	0019      	movs	r1, r3
 80008d8:	4658      	mov	r0, fp
 80008da:	40d6      	lsrs	r6, r2
 80008dc:	3908      	subs	r1, #8
 80008de:	4088      	lsls	r0, r1
 80008e0:	0032      	movs	r2, r6
 80008e2:	4302      	orrs	r2, r0
 80008e4:	4693      	mov	fp, r2
 80008e6:	9a00      	ldr	r2, [sp, #0]
 80008e8:	408a      	lsls	r2, r1
 80008ea:	4937      	ldr	r1, [pc, #220]	@ (80009c8 <__aeabi_ddiv+0x22c>)
 80008ec:	4453      	add	r3, sl
 80008ee:	468a      	mov	sl, r1
 80008f0:	2100      	movs	r1, #0
 80008f2:	449a      	add	sl, r3
 80008f4:	e797      	b.n	8000826 <__aeabi_ddiv+0x8a>
 80008f6:	465b      	mov	r3, fp
 80008f8:	4303      	orrs	r3, r0
 80008fa:	4699      	mov	r9, r3
 80008fc:	d021      	beq.n	8000942 <__aeabi_ddiv+0x1a6>
 80008fe:	465b      	mov	r3, fp
 8000900:	2b00      	cmp	r3, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_ddiv+0x16a>
 8000904:	e169      	b.n	8000bda <__aeabi_ddiv+0x43e>
 8000906:	4658      	mov	r0, fp
 8000908:	f001 fa6c 	bl	8001de4 <__clzsi2>
 800090c:	230b      	movs	r3, #11
 800090e:	425b      	negs	r3, r3
 8000910:	469c      	mov	ip, r3
 8000912:	0002      	movs	r2, r0
 8000914:	4484      	add	ip, r0
 8000916:	4666      	mov	r6, ip
 8000918:	231d      	movs	r3, #29
 800091a:	1b9b      	subs	r3, r3, r6
 800091c:	0026      	movs	r6, r4
 800091e:	0011      	movs	r1, r2
 8000920:	4658      	mov	r0, fp
 8000922:	40de      	lsrs	r6, r3
 8000924:	3908      	subs	r1, #8
 8000926:	4088      	lsls	r0, r1
 8000928:	0033      	movs	r3, r6
 800092a:	4303      	orrs	r3, r0
 800092c:	4699      	mov	r9, r3
 800092e:	0023      	movs	r3, r4
 8000930:	408b      	lsls	r3, r1
 8000932:	4698      	mov	r8, r3
 8000934:	4b25      	ldr	r3, [pc, #148]	@ (80009cc <__aeabi_ddiv+0x230>)
 8000936:	2400      	movs	r4, #0
 8000938:	1a9b      	subs	r3, r3, r2
 800093a:	469a      	mov	sl, r3
 800093c:	2300      	movs	r3, #0
 800093e:	9303      	str	r3, [sp, #12]
 8000940:	e753      	b.n	80007ea <__aeabi_ddiv+0x4e>
 8000942:	2300      	movs	r3, #0
 8000944:	4698      	mov	r8, r3
 8000946:	469a      	mov	sl, r3
 8000948:	3301      	adds	r3, #1
 800094a:	2404      	movs	r4, #4
 800094c:	9303      	str	r3, [sp, #12]
 800094e:	e74c      	b.n	80007ea <__aeabi_ddiv+0x4e>
 8000950:	2301      	movs	r3, #1
 8000952:	431c      	orrs	r4, r3
 8000954:	2300      	movs	r3, #0
 8000956:	2101      	movs	r1, #1
 8000958:	469b      	mov	fp, r3
 800095a:	e764      	b.n	8000826 <__aeabi_ddiv+0x8a>
 800095c:	2303      	movs	r3, #3
 800095e:	0032      	movs	r2, r6
 8000960:	2103      	movs	r1, #3
 8000962:	431c      	orrs	r4, r3
 8000964:	e75f      	b.n	8000826 <__aeabi_ddiv+0x8a>
 8000966:	469a      	mov	sl, r3
 8000968:	2303      	movs	r3, #3
 800096a:	46d9      	mov	r9, fp
 800096c:	240c      	movs	r4, #12
 800096e:	9303      	str	r3, [sp, #12]
 8000970:	e73b      	b.n	80007ea <__aeabi_ddiv+0x4e>
 8000972:	2300      	movs	r3, #0
 8000974:	2480      	movs	r4, #128	@ 0x80
 8000976:	4698      	mov	r8, r3
 8000978:	2600      	movs	r6, #0
 800097a:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <__aeabi_ddiv+0x21c>)
 800097c:	0324      	lsls	r4, r4, #12
 800097e:	e779      	b.n	8000874 <__aeabi_ddiv+0xd8>
 8000980:	2480      	movs	r4, #128	@ 0x80
 8000982:	465b      	mov	r3, fp
 8000984:	0324      	lsls	r4, r4, #12
 8000986:	431c      	orrs	r4, r3
 8000988:	0324      	lsls	r4, r4, #12
 800098a:	002e      	movs	r6, r5
 800098c:	4690      	mov	r8, r2
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <__aeabi_ddiv+0x21c>)
 8000990:	0b24      	lsrs	r4, r4, #12
 8000992:	e76f      	b.n	8000874 <__aeabi_ddiv+0xd8>
 8000994:	2480      	movs	r4, #128	@ 0x80
 8000996:	464b      	mov	r3, r9
 8000998:	0324      	lsls	r4, r4, #12
 800099a:	4223      	tst	r3, r4
 800099c:	d002      	beq.n	80009a4 <__aeabi_ddiv+0x208>
 800099e:	465b      	mov	r3, fp
 80009a0:	4223      	tst	r3, r4
 80009a2:	d0f0      	beq.n	8000986 <__aeabi_ddiv+0x1ea>
 80009a4:	2480      	movs	r4, #128	@ 0x80
 80009a6:	464b      	mov	r3, r9
 80009a8:	0324      	lsls	r4, r4, #12
 80009aa:	431c      	orrs	r4, r3
 80009ac:	0324      	lsls	r4, r4, #12
 80009ae:	9e02      	ldr	r6, [sp, #8]
 80009b0:	4b01      	ldr	r3, [pc, #4]	@ (80009b8 <__aeabi_ddiv+0x21c>)
 80009b2:	0b24      	lsrs	r4, r4, #12
 80009b4:	e75e      	b.n	8000874 <__aeabi_ddiv+0xd8>
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	000007ff 	.word	0x000007ff
 80009bc:	fffffc01 	.word	0xfffffc01
 80009c0:	08005158 	.word	0x08005158
 80009c4:	fffff801 	.word	0xfffff801
 80009c8:	000003f3 	.word	0x000003f3
 80009cc:	fffffc0d 	.word	0xfffffc0d
 80009d0:	45cb      	cmp	fp, r9
 80009d2:	d200      	bcs.n	80009d6 <__aeabi_ddiv+0x23a>
 80009d4:	e0f8      	b.n	8000bc8 <__aeabi_ddiv+0x42c>
 80009d6:	d100      	bne.n	80009da <__aeabi_ddiv+0x23e>
 80009d8:	e0f3      	b.n	8000bc2 <__aeabi_ddiv+0x426>
 80009da:	2301      	movs	r3, #1
 80009dc:	425b      	negs	r3, r3
 80009de:	469c      	mov	ip, r3
 80009e0:	4644      	mov	r4, r8
 80009e2:	4648      	mov	r0, r9
 80009e4:	2500      	movs	r5, #0
 80009e6:	44e2      	add	sl, ip
 80009e8:	465b      	mov	r3, fp
 80009ea:	0e17      	lsrs	r7, r2, #24
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	431f      	orrs	r7, r3
 80009f0:	0c19      	lsrs	r1, r3, #16
 80009f2:	043b      	lsls	r3, r7, #16
 80009f4:	0212      	lsls	r2, r2, #8
 80009f6:	9700      	str	r7, [sp, #0]
 80009f8:	0c1f      	lsrs	r7, r3, #16
 80009fa:	4691      	mov	r9, r2
 80009fc:	9102      	str	r1, [sp, #8]
 80009fe:	9703      	str	r7, [sp, #12]
 8000a00:	f7ff fc06 	bl	8000210 <__aeabi_uidivmod>
 8000a04:	0002      	movs	r2, r0
 8000a06:	437a      	muls	r2, r7
 8000a08:	040b      	lsls	r3, r1, #16
 8000a0a:	0c21      	lsrs	r1, r4, #16
 8000a0c:	4680      	mov	r8, r0
 8000a0e:	4319      	orrs	r1, r3
 8000a10:	428a      	cmp	r2, r1
 8000a12:	d909      	bls.n	8000a28 <__aeabi_ddiv+0x28c>
 8000a14:	9f00      	ldr	r7, [sp, #0]
 8000a16:	2301      	movs	r3, #1
 8000a18:	46bc      	mov	ip, r7
 8000a1a:	425b      	negs	r3, r3
 8000a1c:	4461      	add	r1, ip
 8000a1e:	469c      	mov	ip, r3
 8000a20:	44e0      	add	r8, ip
 8000a22:	428f      	cmp	r7, r1
 8000a24:	d800      	bhi.n	8000a28 <__aeabi_ddiv+0x28c>
 8000a26:	e15c      	b.n	8000ce2 <__aeabi_ddiv+0x546>
 8000a28:	1a88      	subs	r0, r1, r2
 8000a2a:	9902      	ldr	r1, [sp, #8]
 8000a2c:	f7ff fbf0 	bl	8000210 <__aeabi_uidivmod>
 8000a30:	9a03      	ldr	r2, [sp, #12]
 8000a32:	0424      	lsls	r4, r4, #16
 8000a34:	4342      	muls	r2, r0
 8000a36:	0409      	lsls	r1, r1, #16
 8000a38:	0c24      	lsrs	r4, r4, #16
 8000a3a:	0003      	movs	r3, r0
 8000a3c:	430c      	orrs	r4, r1
 8000a3e:	42a2      	cmp	r2, r4
 8000a40:	d906      	bls.n	8000a50 <__aeabi_ddiv+0x2b4>
 8000a42:	9900      	ldr	r1, [sp, #0]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	468c      	mov	ip, r1
 8000a48:	4464      	add	r4, ip
 8000a4a:	42a1      	cmp	r1, r4
 8000a4c:	d800      	bhi.n	8000a50 <__aeabi_ddiv+0x2b4>
 8000a4e:	e142      	b.n	8000cd6 <__aeabi_ddiv+0x53a>
 8000a50:	1aa0      	subs	r0, r4, r2
 8000a52:	4642      	mov	r2, r8
 8000a54:	0412      	lsls	r2, r2, #16
 8000a56:	431a      	orrs	r2, r3
 8000a58:	4693      	mov	fp, r2
 8000a5a:	464b      	mov	r3, r9
 8000a5c:	4659      	mov	r1, fp
 8000a5e:	0c1b      	lsrs	r3, r3, #16
 8000a60:	001f      	movs	r7, r3
 8000a62:	9304      	str	r3, [sp, #16]
 8000a64:	040b      	lsls	r3, r1, #16
 8000a66:	4649      	mov	r1, r9
 8000a68:	0409      	lsls	r1, r1, #16
 8000a6a:	0c09      	lsrs	r1, r1, #16
 8000a6c:	000c      	movs	r4, r1
 8000a6e:	0c1b      	lsrs	r3, r3, #16
 8000a70:	435c      	muls	r4, r3
 8000a72:	0c12      	lsrs	r2, r2, #16
 8000a74:	437b      	muls	r3, r7
 8000a76:	4688      	mov	r8, r1
 8000a78:	4351      	muls	r1, r2
 8000a7a:	437a      	muls	r2, r7
 8000a7c:	0c27      	lsrs	r7, r4, #16
 8000a7e:	46bc      	mov	ip, r7
 8000a80:	185b      	adds	r3, r3, r1
 8000a82:	4463      	add	r3, ip
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d903      	bls.n	8000a90 <__aeabi_ddiv+0x2f4>
 8000a88:	2180      	movs	r1, #128	@ 0x80
 8000a8a:	0249      	lsls	r1, r1, #9
 8000a8c:	468c      	mov	ip, r1
 8000a8e:	4462      	add	r2, ip
 8000a90:	0c19      	lsrs	r1, r3, #16
 8000a92:	0424      	lsls	r4, r4, #16
 8000a94:	041b      	lsls	r3, r3, #16
 8000a96:	0c24      	lsrs	r4, r4, #16
 8000a98:	188a      	adds	r2, r1, r2
 8000a9a:	191c      	adds	r4, r3, r4
 8000a9c:	4290      	cmp	r0, r2
 8000a9e:	d302      	bcc.n	8000aa6 <__aeabi_ddiv+0x30a>
 8000aa0:	d116      	bne.n	8000ad0 <__aeabi_ddiv+0x334>
 8000aa2:	42a5      	cmp	r5, r4
 8000aa4:	d214      	bcs.n	8000ad0 <__aeabi_ddiv+0x334>
 8000aa6:	465b      	mov	r3, fp
 8000aa8:	9f00      	ldr	r7, [sp, #0]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	444d      	add	r5, r9
 8000aae:	9305      	str	r3, [sp, #20]
 8000ab0:	454d      	cmp	r5, r9
 8000ab2:	419b      	sbcs	r3, r3
 8000ab4:	46bc      	mov	ip, r7
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	4463      	add	r3, ip
 8000aba:	18c0      	adds	r0, r0, r3
 8000abc:	4287      	cmp	r7, r0
 8000abe:	d300      	bcc.n	8000ac2 <__aeabi_ddiv+0x326>
 8000ac0:	e102      	b.n	8000cc8 <__aeabi_ddiv+0x52c>
 8000ac2:	4282      	cmp	r2, r0
 8000ac4:	d900      	bls.n	8000ac8 <__aeabi_ddiv+0x32c>
 8000ac6:	e129      	b.n	8000d1c <__aeabi_ddiv+0x580>
 8000ac8:	d100      	bne.n	8000acc <__aeabi_ddiv+0x330>
 8000aca:	e124      	b.n	8000d16 <__aeabi_ddiv+0x57a>
 8000acc:	9b05      	ldr	r3, [sp, #20]
 8000ace:	469b      	mov	fp, r3
 8000ad0:	1b2c      	subs	r4, r5, r4
 8000ad2:	42a5      	cmp	r5, r4
 8000ad4:	41ad      	sbcs	r5, r5
 8000ad6:	9b00      	ldr	r3, [sp, #0]
 8000ad8:	1a80      	subs	r0, r0, r2
 8000ada:	426d      	negs	r5, r5
 8000adc:	1b40      	subs	r0, r0, r5
 8000ade:	4283      	cmp	r3, r0
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_ddiv+0x348>
 8000ae2:	e10f      	b.n	8000d04 <__aeabi_ddiv+0x568>
 8000ae4:	9902      	ldr	r1, [sp, #8]
 8000ae6:	f7ff fb93 	bl	8000210 <__aeabi_uidivmod>
 8000aea:	9a03      	ldr	r2, [sp, #12]
 8000aec:	040b      	lsls	r3, r1, #16
 8000aee:	4342      	muls	r2, r0
 8000af0:	0c21      	lsrs	r1, r4, #16
 8000af2:	0005      	movs	r5, r0
 8000af4:	4319      	orrs	r1, r3
 8000af6:	428a      	cmp	r2, r1
 8000af8:	d900      	bls.n	8000afc <__aeabi_ddiv+0x360>
 8000afa:	e0cb      	b.n	8000c94 <__aeabi_ddiv+0x4f8>
 8000afc:	1a88      	subs	r0, r1, r2
 8000afe:	9902      	ldr	r1, [sp, #8]
 8000b00:	f7ff fb86 	bl	8000210 <__aeabi_uidivmod>
 8000b04:	9a03      	ldr	r2, [sp, #12]
 8000b06:	0424      	lsls	r4, r4, #16
 8000b08:	4342      	muls	r2, r0
 8000b0a:	0409      	lsls	r1, r1, #16
 8000b0c:	0c24      	lsrs	r4, r4, #16
 8000b0e:	0003      	movs	r3, r0
 8000b10:	430c      	orrs	r4, r1
 8000b12:	42a2      	cmp	r2, r4
 8000b14:	d900      	bls.n	8000b18 <__aeabi_ddiv+0x37c>
 8000b16:	e0ca      	b.n	8000cae <__aeabi_ddiv+0x512>
 8000b18:	4641      	mov	r1, r8
 8000b1a:	1aa4      	subs	r4, r4, r2
 8000b1c:	042a      	lsls	r2, r5, #16
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	9f04      	ldr	r7, [sp, #16]
 8000b22:	0413      	lsls	r3, r2, #16
 8000b24:	0c1b      	lsrs	r3, r3, #16
 8000b26:	4359      	muls	r1, r3
 8000b28:	4640      	mov	r0, r8
 8000b2a:	437b      	muls	r3, r7
 8000b2c:	469c      	mov	ip, r3
 8000b2e:	0c15      	lsrs	r5, r2, #16
 8000b30:	4368      	muls	r0, r5
 8000b32:	0c0b      	lsrs	r3, r1, #16
 8000b34:	4484      	add	ip, r0
 8000b36:	4463      	add	r3, ip
 8000b38:	437d      	muls	r5, r7
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d903      	bls.n	8000b46 <__aeabi_ddiv+0x3aa>
 8000b3e:	2080      	movs	r0, #128	@ 0x80
 8000b40:	0240      	lsls	r0, r0, #9
 8000b42:	4684      	mov	ip, r0
 8000b44:	4465      	add	r5, ip
 8000b46:	0c18      	lsrs	r0, r3, #16
 8000b48:	0409      	lsls	r1, r1, #16
 8000b4a:	041b      	lsls	r3, r3, #16
 8000b4c:	0c09      	lsrs	r1, r1, #16
 8000b4e:	1940      	adds	r0, r0, r5
 8000b50:	185b      	adds	r3, r3, r1
 8000b52:	4284      	cmp	r4, r0
 8000b54:	d327      	bcc.n	8000ba6 <__aeabi_ddiv+0x40a>
 8000b56:	d023      	beq.n	8000ba0 <__aeabi_ddiv+0x404>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	0035      	movs	r5, r6
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	4b94      	ldr	r3, [pc, #592]	@ (8000db0 <__aeabi_ddiv+0x614>)
 8000b60:	4453      	add	r3, sl
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dd60      	ble.n	8000c28 <__aeabi_ddiv+0x48c>
 8000b66:	0751      	lsls	r1, r2, #29
 8000b68:	d000      	beq.n	8000b6c <__aeabi_ddiv+0x3d0>
 8000b6a:	e086      	b.n	8000c7a <__aeabi_ddiv+0x4de>
 8000b6c:	002e      	movs	r6, r5
 8000b6e:	08d1      	lsrs	r1, r2, #3
 8000b70:	465a      	mov	r2, fp
 8000b72:	01d2      	lsls	r2, r2, #7
 8000b74:	d506      	bpl.n	8000b84 <__aeabi_ddiv+0x3e8>
 8000b76:	465a      	mov	r2, fp
 8000b78:	4b8e      	ldr	r3, [pc, #568]	@ (8000db4 <__aeabi_ddiv+0x618>)
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	2380      	movs	r3, #128	@ 0x80
 8000b7e:	4693      	mov	fp, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	4453      	add	r3, sl
 8000b84:	4a8c      	ldr	r2, [pc, #560]	@ (8000db8 <__aeabi_ddiv+0x61c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	dd00      	ble.n	8000b8c <__aeabi_ddiv+0x3f0>
 8000b8a:	e680      	b.n	800088e <__aeabi_ddiv+0xf2>
 8000b8c:	465a      	mov	r2, fp
 8000b8e:	0752      	lsls	r2, r2, #29
 8000b90:	430a      	orrs	r2, r1
 8000b92:	4690      	mov	r8, r2
 8000b94:	465a      	mov	r2, fp
 8000b96:	055b      	lsls	r3, r3, #21
 8000b98:	0254      	lsls	r4, r2, #9
 8000b9a:	0b24      	lsrs	r4, r4, #12
 8000b9c:	0d5b      	lsrs	r3, r3, #21
 8000b9e:	e669      	b.n	8000874 <__aeabi_ddiv+0xd8>
 8000ba0:	0035      	movs	r5, r6
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0db      	beq.n	8000b5e <__aeabi_ddiv+0x3c2>
 8000ba6:	9d00      	ldr	r5, [sp, #0]
 8000ba8:	1e51      	subs	r1, r2, #1
 8000baa:	46ac      	mov	ip, r5
 8000bac:	4464      	add	r4, ip
 8000bae:	42ac      	cmp	r4, r5
 8000bb0:	d200      	bcs.n	8000bb4 <__aeabi_ddiv+0x418>
 8000bb2:	e09e      	b.n	8000cf2 <__aeabi_ddiv+0x556>
 8000bb4:	4284      	cmp	r4, r0
 8000bb6:	d200      	bcs.n	8000bba <__aeabi_ddiv+0x41e>
 8000bb8:	e0e1      	b.n	8000d7e <__aeabi_ddiv+0x5e2>
 8000bba:	d100      	bne.n	8000bbe <__aeabi_ddiv+0x422>
 8000bbc:	e0ee      	b.n	8000d9c <__aeabi_ddiv+0x600>
 8000bbe:	000a      	movs	r2, r1
 8000bc0:	e7ca      	b.n	8000b58 <__aeabi_ddiv+0x3bc>
 8000bc2:	4542      	cmp	r2, r8
 8000bc4:	d900      	bls.n	8000bc8 <__aeabi_ddiv+0x42c>
 8000bc6:	e708      	b.n	80009da <__aeabi_ddiv+0x23e>
 8000bc8:	464b      	mov	r3, r9
 8000bca:	07dc      	lsls	r4, r3, #31
 8000bcc:	0858      	lsrs	r0, r3, #1
 8000bce:	4643      	mov	r3, r8
 8000bd0:	085b      	lsrs	r3, r3, #1
 8000bd2:	431c      	orrs	r4, r3
 8000bd4:	4643      	mov	r3, r8
 8000bd6:	07dd      	lsls	r5, r3, #31
 8000bd8:	e706      	b.n	80009e8 <__aeabi_ddiv+0x24c>
 8000bda:	f001 f903 	bl	8001de4 <__clzsi2>
 8000bde:	2315      	movs	r3, #21
 8000be0:	469c      	mov	ip, r3
 8000be2:	4484      	add	ip, r0
 8000be4:	0002      	movs	r2, r0
 8000be6:	4663      	mov	r3, ip
 8000be8:	3220      	adds	r2, #32
 8000bea:	2b1c      	cmp	r3, #28
 8000bec:	dc00      	bgt.n	8000bf0 <__aeabi_ddiv+0x454>
 8000bee:	e692      	b.n	8000916 <__aeabi_ddiv+0x17a>
 8000bf0:	0023      	movs	r3, r4
 8000bf2:	3808      	subs	r0, #8
 8000bf4:	4083      	lsls	r3, r0
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	4698      	mov	r8, r3
 8000bfc:	e69a      	b.n	8000934 <__aeabi_ddiv+0x198>
 8000bfe:	f001 f8f1 	bl	8001de4 <__clzsi2>
 8000c02:	0002      	movs	r2, r0
 8000c04:	0003      	movs	r3, r0
 8000c06:	3215      	adds	r2, #21
 8000c08:	3320      	adds	r3, #32
 8000c0a:	2a1c      	cmp	r2, #28
 8000c0c:	dc00      	bgt.n	8000c10 <__aeabi_ddiv+0x474>
 8000c0e:	e65f      	b.n	80008d0 <__aeabi_ddiv+0x134>
 8000c10:	9900      	ldr	r1, [sp, #0]
 8000c12:	3808      	subs	r0, #8
 8000c14:	4081      	lsls	r1, r0
 8000c16:	2200      	movs	r2, #0
 8000c18:	468b      	mov	fp, r1
 8000c1a:	e666      	b.n	80008ea <__aeabi_ddiv+0x14e>
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	002e      	movs	r6, r5
 8000c20:	2400      	movs	r4, #0
 8000c22:	4690      	mov	r8, r2
 8000c24:	4b65      	ldr	r3, [pc, #404]	@ (8000dbc <__aeabi_ddiv+0x620>)
 8000c26:	e625      	b.n	8000874 <__aeabi_ddiv+0xd8>
 8000c28:	002e      	movs	r6, r5
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	1ac9      	subs	r1, r1, r3
 8000c2e:	2938      	cmp	r1, #56	@ 0x38
 8000c30:	dd00      	ble.n	8000c34 <__aeabi_ddiv+0x498>
 8000c32:	e61b      	b.n	800086c <__aeabi_ddiv+0xd0>
 8000c34:	291f      	cmp	r1, #31
 8000c36:	dc7e      	bgt.n	8000d36 <__aeabi_ddiv+0x59a>
 8000c38:	4861      	ldr	r0, [pc, #388]	@ (8000dc0 <__aeabi_ddiv+0x624>)
 8000c3a:	0014      	movs	r4, r2
 8000c3c:	4450      	add	r0, sl
 8000c3e:	465b      	mov	r3, fp
 8000c40:	4082      	lsls	r2, r0
 8000c42:	4083      	lsls	r3, r0
 8000c44:	40cc      	lsrs	r4, r1
 8000c46:	1e50      	subs	r0, r2, #1
 8000c48:	4182      	sbcs	r2, r0
 8000c4a:	4323      	orrs	r3, r4
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	465b      	mov	r3, fp
 8000c50:	40cb      	lsrs	r3, r1
 8000c52:	0751      	lsls	r1, r2, #29
 8000c54:	d009      	beq.n	8000c6a <__aeabi_ddiv+0x4ce>
 8000c56:	210f      	movs	r1, #15
 8000c58:	4011      	ands	r1, r2
 8000c5a:	2904      	cmp	r1, #4
 8000c5c:	d005      	beq.n	8000c6a <__aeabi_ddiv+0x4ce>
 8000c5e:	1d11      	adds	r1, r2, #4
 8000c60:	4291      	cmp	r1, r2
 8000c62:	4192      	sbcs	r2, r2
 8000c64:	4252      	negs	r2, r2
 8000c66:	189b      	adds	r3, r3, r2
 8000c68:	000a      	movs	r2, r1
 8000c6a:	0219      	lsls	r1, r3, #8
 8000c6c:	d400      	bmi.n	8000c70 <__aeabi_ddiv+0x4d4>
 8000c6e:	e09b      	b.n	8000da8 <__aeabi_ddiv+0x60c>
 8000c70:	2200      	movs	r2, #0
 8000c72:	2301      	movs	r3, #1
 8000c74:	2400      	movs	r4, #0
 8000c76:	4690      	mov	r8, r2
 8000c78:	e5fc      	b.n	8000874 <__aeabi_ddiv+0xd8>
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	4011      	ands	r1, r2
 8000c7e:	2904      	cmp	r1, #4
 8000c80:	d100      	bne.n	8000c84 <__aeabi_ddiv+0x4e8>
 8000c82:	e773      	b.n	8000b6c <__aeabi_ddiv+0x3d0>
 8000c84:	1d11      	adds	r1, r2, #4
 8000c86:	4291      	cmp	r1, r2
 8000c88:	4192      	sbcs	r2, r2
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	002e      	movs	r6, r5
 8000c8e:	08c9      	lsrs	r1, r1, #3
 8000c90:	4493      	add	fp, r2
 8000c92:	e76d      	b.n	8000b70 <__aeabi_ddiv+0x3d4>
 8000c94:	9b00      	ldr	r3, [sp, #0]
 8000c96:	3d01      	subs	r5, #1
 8000c98:	469c      	mov	ip, r3
 8000c9a:	4461      	add	r1, ip
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d900      	bls.n	8000ca2 <__aeabi_ddiv+0x506>
 8000ca0:	e72c      	b.n	8000afc <__aeabi_ddiv+0x360>
 8000ca2:	428a      	cmp	r2, r1
 8000ca4:	d800      	bhi.n	8000ca8 <__aeabi_ddiv+0x50c>
 8000ca6:	e729      	b.n	8000afc <__aeabi_ddiv+0x360>
 8000ca8:	1e85      	subs	r5, r0, #2
 8000caa:	4461      	add	r1, ip
 8000cac:	e726      	b.n	8000afc <__aeabi_ddiv+0x360>
 8000cae:	9900      	ldr	r1, [sp, #0]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	468c      	mov	ip, r1
 8000cb4:	4464      	add	r4, ip
 8000cb6:	42a1      	cmp	r1, r4
 8000cb8:	d900      	bls.n	8000cbc <__aeabi_ddiv+0x520>
 8000cba:	e72d      	b.n	8000b18 <__aeabi_ddiv+0x37c>
 8000cbc:	42a2      	cmp	r2, r4
 8000cbe:	d800      	bhi.n	8000cc2 <__aeabi_ddiv+0x526>
 8000cc0:	e72a      	b.n	8000b18 <__aeabi_ddiv+0x37c>
 8000cc2:	1e83      	subs	r3, r0, #2
 8000cc4:	4464      	add	r4, ip
 8000cc6:	e727      	b.n	8000b18 <__aeabi_ddiv+0x37c>
 8000cc8:	4287      	cmp	r7, r0
 8000cca:	d000      	beq.n	8000cce <__aeabi_ddiv+0x532>
 8000ccc:	e6fe      	b.n	8000acc <__aeabi_ddiv+0x330>
 8000cce:	45a9      	cmp	r9, r5
 8000cd0:	d900      	bls.n	8000cd4 <__aeabi_ddiv+0x538>
 8000cd2:	e6fb      	b.n	8000acc <__aeabi_ddiv+0x330>
 8000cd4:	e6f5      	b.n	8000ac2 <__aeabi_ddiv+0x326>
 8000cd6:	42a2      	cmp	r2, r4
 8000cd8:	d800      	bhi.n	8000cdc <__aeabi_ddiv+0x540>
 8000cda:	e6b9      	b.n	8000a50 <__aeabi_ddiv+0x2b4>
 8000cdc:	1e83      	subs	r3, r0, #2
 8000cde:	4464      	add	r4, ip
 8000ce0:	e6b6      	b.n	8000a50 <__aeabi_ddiv+0x2b4>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	d800      	bhi.n	8000ce8 <__aeabi_ddiv+0x54c>
 8000ce6:	e69f      	b.n	8000a28 <__aeabi_ddiv+0x28c>
 8000ce8:	46bc      	mov	ip, r7
 8000cea:	1e83      	subs	r3, r0, #2
 8000cec:	4698      	mov	r8, r3
 8000cee:	4461      	add	r1, ip
 8000cf0:	e69a      	b.n	8000a28 <__aeabi_ddiv+0x28c>
 8000cf2:	000a      	movs	r2, r1
 8000cf4:	4284      	cmp	r4, r0
 8000cf6:	d000      	beq.n	8000cfa <__aeabi_ddiv+0x55e>
 8000cf8:	e72e      	b.n	8000b58 <__aeabi_ddiv+0x3bc>
 8000cfa:	454b      	cmp	r3, r9
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_ddiv+0x564>
 8000cfe:	e72b      	b.n	8000b58 <__aeabi_ddiv+0x3bc>
 8000d00:	0035      	movs	r5, r6
 8000d02:	e72c      	b.n	8000b5e <__aeabi_ddiv+0x3c2>
 8000d04:	4b2a      	ldr	r3, [pc, #168]	@ (8000db0 <__aeabi_ddiv+0x614>)
 8000d06:	4a2f      	ldr	r2, [pc, #188]	@ (8000dc4 <__aeabi_ddiv+0x628>)
 8000d08:	4453      	add	r3, sl
 8000d0a:	4592      	cmp	sl, r2
 8000d0c:	db43      	blt.n	8000d96 <__aeabi_ddiv+0x5fa>
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2100      	movs	r1, #0
 8000d12:	4493      	add	fp, r2
 8000d14:	e72c      	b.n	8000b70 <__aeabi_ddiv+0x3d4>
 8000d16:	42ac      	cmp	r4, r5
 8000d18:	d800      	bhi.n	8000d1c <__aeabi_ddiv+0x580>
 8000d1a:	e6d7      	b.n	8000acc <__aeabi_ddiv+0x330>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	425b      	negs	r3, r3
 8000d20:	469c      	mov	ip, r3
 8000d22:	9900      	ldr	r1, [sp, #0]
 8000d24:	444d      	add	r5, r9
 8000d26:	454d      	cmp	r5, r9
 8000d28:	419b      	sbcs	r3, r3
 8000d2a:	44e3      	add	fp, ip
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	425b      	negs	r3, r3
 8000d30:	4463      	add	r3, ip
 8000d32:	18c0      	adds	r0, r0, r3
 8000d34:	e6cc      	b.n	8000ad0 <__aeabi_ddiv+0x334>
 8000d36:	201f      	movs	r0, #31
 8000d38:	4240      	negs	r0, r0
 8000d3a:	1ac3      	subs	r3, r0, r3
 8000d3c:	4658      	mov	r0, fp
 8000d3e:	40d8      	lsrs	r0, r3
 8000d40:	2920      	cmp	r1, #32
 8000d42:	d004      	beq.n	8000d4e <__aeabi_ddiv+0x5b2>
 8000d44:	4659      	mov	r1, fp
 8000d46:	4b20      	ldr	r3, [pc, #128]	@ (8000dc8 <__aeabi_ddiv+0x62c>)
 8000d48:	4453      	add	r3, sl
 8000d4a:	4099      	lsls	r1, r3
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	1e53      	subs	r3, r2, #1
 8000d50:	419a      	sbcs	r2, r3
 8000d52:	2307      	movs	r3, #7
 8000d54:	0019      	movs	r1, r3
 8000d56:	4302      	orrs	r2, r0
 8000d58:	2400      	movs	r4, #0
 8000d5a:	4011      	ands	r1, r2
 8000d5c:	4213      	tst	r3, r2
 8000d5e:	d009      	beq.n	8000d74 <__aeabi_ddiv+0x5d8>
 8000d60:	3308      	adds	r3, #8
 8000d62:	4013      	ands	r3, r2
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d01d      	beq.n	8000da4 <__aeabi_ddiv+0x608>
 8000d68:	1d13      	adds	r3, r2, #4
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	4189      	sbcs	r1, r1
 8000d6e:	001a      	movs	r2, r3
 8000d70:	4249      	negs	r1, r1
 8000d72:	0749      	lsls	r1, r1, #29
 8000d74:	08d2      	lsrs	r2, r2, #3
 8000d76:	430a      	orrs	r2, r1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e57a      	b.n	8000874 <__aeabi_ddiv+0xd8>
 8000d7e:	4649      	mov	r1, r9
 8000d80:	9f00      	ldr	r7, [sp, #0]
 8000d82:	004d      	lsls	r5, r1, #1
 8000d84:	454d      	cmp	r5, r9
 8000d86:	4189      	sbcs	r1, r1
 8000d88:	46bc      	mov	ip, r7
 8000d8a:	4249      	negs	r1, r1
 8000d8c:	4461      	add	r1, ip
 8000d8e:	46a9      	mov	r9, r5
 8000d90:	3a02      	subs	r2, #2
 8000d92:	1864      	adds	r4, r4, r1
 8000d94:	e7ae      	b.n	8000cf4 <__aeabi_ddiv+0x558>
 8000d96:	2201      	movs	r2, #1
 8000d98:	4252      	negs	r2, r2
 8000d9a:	e746      	b.n	8000c2a <__aeabi_ddiv+0x48e>
 8000d9c:	4599      	cmp	r9, r3
 8000d9e:	d3ee      	bcc.n	8000d7e <__aeabi_ddiv+0x5e2>
 8000da0:	000a      	movs	r2, r1
 8000da2:	e7aa      	b.n	8000cfa <__aeabi_ddiv+0x55e>
 8000da4:	2100      	movs	r1, #0
 8000da6:	e7e5      	b.n	8000d74 <__aeabi_ddiv+0x5d8>
 8000da8:	0759      	lsls	r1, r3, #29
 8000daa:	025b      	lsls	r3, r3, #9
 8000dac:	0b1c      	lsrs	r4, r3, #12
 8000dae:	e7e1      	b.n	8000d74 <__aeabi_ddiv+0x5d8>
 8000db0:	000003ff 	.word	0x000003ff
 8000db4:	feffffff 	.word	0xfeffffff
 8000db8:	000007fe 	.word	0x000007fe
 8000dbc:	000007ff 	.word	0x000007ff
 8000dc0:	0000041e 	.word	0x0000041e
 8000dc4:	fffffc02 	.word	0xfffffc02
 8000dc8:	0000043e 	.word	0x0000043e

08000dcc <__aeabi_dmul>:
 8000dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dce:	4657      	mov	r7, sl
 8000dd0:	464e      	mov	r6, r9
 8000dd2:	46de      	mov	lr, fp
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	b5e0      	push	{r5, r6, r7, lr}
 8000dd8:	001f      	movs	r7, r3
 8000dda:	030b      	lsls	r3, r1, #12
 8000ddc:	0b1b      	lsrs	r3, r3, #12
 8000dde:	0016      	movs	r6, r2
 8000de0:	469a      	mov	sl, r3
 8000de2:	0fca      	lsrs	r2, r1, #31
 8000de4:	004b      	lsls	r3, r1, #1
 8000de6:	0004      	movs	r4, r0
 8000de8:	4691      	mov	r9, r2
 8000dea:	b085      	sub	sp, #20
 8000dec:	0d5b      	lsrs	r3, r3, #21
 8000dee:	d100      	bne.n	8000df2 <__aeabi_dmul+0x26>
 8000df0:	e1cf      	b.n	8001192 <__aeabi_dmul+0x3c6>
 8000df2:	4acd      	ldr	r2, [pc, #820]	@ (8001128 <__aeabi_dmul+0x35c>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d055      	beq.n	8000ea4 <__aeabi_dmul+0xd8>
 8000df8:	4651      	mov	r1, sl
 8000dfa:	0f42      	lsrs	r2, r0, #29
 8000dfc:	00c9      	lsls	r1, r1, #3
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	0409      	lsls	r1, r1, #16
 8000e04:	4311      	orrs	r1, r2
 8000e06:	00c2      	lsls	r2, r0, #3
 8000e08:	4690      	mov	r8, r2
 8000e0a:	4ac8      	ldr	r2, [pc, #800]	@ (800112c <__aeabi_dmul+0x360>)
 8000e0c:	468a      	mov	sl, r1
 8000e0e:	4693      	mov	fp, r2
 8000e10:	449b      	add	fp, r3
 8000e12:	2300      	movs	r3, #0
 8000e14:	2500      	movs	r5, #0
 8000e16:	9302      	str	r3, [sp, #8]
 8000e18:	033c      	lsls	r4, r7, #12
 8000e1a:	007b      	lsls	r3, r7, #1
 8000e1c:	0ffa      	lsrs	r2, r7, #31
 8000e1e:	9601      	str	r6, [sp, #4]
 8000e20:	0b24      	lsrs	r4, r4, #12
 8000e22:	0d5b      	lsrs	r3, r3, #21
 8000e24:	9200      	str	r2, [sp, #0]
 8000e26:	d100      	bne.n	8000e2a <__aeabi_dmul+0x5e>
 8000e28:	e188      	b.n	800113c <__aeabi_dmul+0x370>
 8000e2a:	4abf      	ldr	r2, [pc, #764]	@ (8001128 <__aeabi_dmul+0x35c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_dmul+0x66>
 8000e30:	e092      	b.n	8000f58 <__aeabi_dmul+0x18c>
 8000e32:	4abe      	ldr	r2, [pc, #760]	@ (800112c <__aeabi_dmul+0x360>)
 8000e34:	4694      	mov	ip, r2
 8000e36:	4463      	add	r3, ip
 8000e38:	449b      	add	fp, r3
 8000e3a:	2d0a      	cmp	r5, #10
 8000e3c:	dc42      	bgt.n	8000ec4 <__aeabi_dmul+0xf8>
 8000e3e:	00e4      	lsls	r4, r4, #3
 8000e40:	0f73      	lsrs	r3, r6, #29
 8000e42:	4323      	orrs	r3, r4
 8000e44:	2480      	movs	r4, #128	@ 0x80
 8000e46:	4649      	mov	r1, r9
 8000e48:	0424      	lsls	r4, r4, #16
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	00f3      	lsls	r3, r6, #3
 8000e4e:	9301      	str	r3, [sp, #4]
 8000e50:	9b00      	ldr	r3, [sp, #0]
 8000e52:	2000      	movs	r0, #0
 8000e54:	4059      	eors	r1, r3
 8000e56:	b2cb      	uxtb	r3, r1
 8000e58:	9303      	str	r3, [sp, #12]
 8000e5a:	2d02      	cmp	r5, #2
 8000e5c:	dc00      	bgt.n	8000e60 <__aeabi_dmul+0x94>
 8000e5e:	e094      	b.n	8000f8a <__aeabi_dmul+0x1be>
 8000e60:	2301      	movs	r3, #1
 8000e62:	40ab      	lsls	r3, r5
 8000e64:	001d      	movs	r5, r3
 8000e66:	23a6      	movs	r3, #166	@ 0xa6
 8000e68:	002a      	movs	r2, r5
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	421d      	tst	r5, r3
 8000e70:	d000      	beq.n	8000e74 <__aeabi_dmul+0xa8>
 8000e72:	e229      	b.n	80012c8 <__aeabi_dmul+0x4fc>
 8000e74:	2390      	movs	r3, #144	@ 0x90
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	421d      	tst	r5, r3
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_dmul+0xb2>
 8000e7c:	e24d      	b.n	800131a <__aeabi_dmul+0x54e>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	2480      	movs	r4, #128	@ 0x80
 8000e82:	4699      	mov	r9, r3
 8000e84:	0324      	lsls	r4, r4, #12
 8000e86:	4ba8      	ldr	r3, [pc, #672]	@ (8001128 <__aeabi_dmul+0x35c>)
 8000e88:	0010      	movs	r0, r2
 8000e8a:	464a      	mov	r2, r9
 8000e8c:	051b      	lsls	r3, r3, #20
 8000e8e:	4323      	orrs	r3, r4
 8000e90:	07d2      	lsls	r2, r2, #31
 8000e92:	4313      	orrs	r3, r2
 8000e94:	0019      	movs	r1, r3
 8000e96:	b005      	add	sp, #20
 8000e98:	bcf0      	pop	{r4, r5, r6, r7}
 8000e9a:	46bb      	mov	fp, r7
 8000e9c:	46b2      	mov	sl, r6
 8000e9e:	46a9      	mov	r9, r5
 8000ea0:	46a0      	mov	r8, r4
 8000ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ea4:	4652      	mov	r2, sl
 8000ea6:	4302      	orrs	r2, r0
 8000ea8:	4690      	mov	r8, r2
 8000eaa:	d000      	beq.n	8000eae <__aeabi_dmul+0xe2>
 8000eac:	e1ac      	b.n	8001208 <__aeabi_dmul+0x43c>
 8000eae:	469b      	mov	fp, r3
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	4692      	mov	sl, r2
 8000eb4:	2508      	movs	r5, #8
 8000eb6:	9302      	str	r3, [sp, #8]
 8000eb8:	e7ae      	b.n	8000e18 <__aeabi_dmul+0x4c>
 8000eba:	9b00      	ldr	r3, [sp, #0]
 8000ebc:	46a2      	mov	sl, r4
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9b01      	ldr	r3, [sp, #4]
 8000ec2:	4698      	mov	r8, r3
 8000ec4:	9b02      	ldr	r3, [sp, #8]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_dmul+0x100>
 8000eca:	e1ca      	b.n	8001262 <__aeabi_dmul+0x496>
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_dmul+0x106>
 8000ed0:	e192      	b.n	80011f8 <__aeabi_dmul+0x42c>
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d110      	bne.n	8000ef8 <__aeabi_dmul+0x12c>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	2400      	movs	r4, #0
 8000eda:	2200      	movs	r2, #0
 8000edc:	e7d4      	b.n	8000e88 <__aeabi_dmul+0xbc>
 8000ede:	2201      	movs	r2, #1
 8000ee0:	087b      	lsrs	r3, r7, #1
 8000ee2:	403a      	ands	r2, r7
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	4652      	mov	r2, sl
 8000ee8:	07d2      	lsls	r2, r2, #31
 8000eea:	4313      	orrs	r3, r2
 8000eec:	4698      	mov	r8, r3
 8000eee:	4653      	mov	r3, sl
 8000ef0:	085b      	lsrs	r3, r3, #1
 8000ef2:	469a      	mov	sl, r3
 8000ef4:	9b03      	ldr	r3, [sp, #12]
 8000ef6:	4699      	mov	r9, r3
 8000ef8:	465b      	mov	r3, fp
 8000efa:	1c58      	adds	r0, r3, #1
 8000efc:	2380      	movs	r3, #128	@ 0x80
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	445b      	add	r3, fp
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	dc00      	bgt.n	8000f08 <__aeabi_dmul+0x13c>
 8000f06:	e1b1      	b.n	800126c <__aeabi_dmul+0x4a0>
 8000f08:	4642      	mov	r2, r8
 8000f0a:	0752      	lsls	r2, r2, #29
 8000f0c:	d00b      	beq.n	8000f26 <__aeabi_dmul+0x15a>
 8000f0e:	220f      	movs	r2, #15
 8000f10:	4641      	mov	r1, r8
 8000f12:	400a      	ands	r2, r1
 8000f14:	2a04      	cmp	r2, #4
 8000f16:	d006      	beq.n	8000f26 <__aeabi_dmul+0x15a>
 8000f18:	4642      	mov	r2, r8
 8000f1a:	1d11      	adds	r1, r2, #4
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	4192      	sbcs	r2, r2
 8000f20:	4688      	mov	r8, r1
 8000f22:	4252      	negs	r2, r2
 8000f24:	4492      	add	sl, r2
 8000f26:	4652      	mov	r2, sl
 8000f28:	01d2      	lsls	r2, r2, #7
 8000f2a:	d506      	bpl.n	8000f3a <__aeabi_dmul+0x16e>
 8000f2c:	4652      	mov	r2, sl
 8000f2e:	4b80      	ldr	r3, [pc, #512]	@ (8001130 <__aeabi_dmul+0x364>)
 8000f30:	401a      	ands	r2, r3
 8000f32:	2380      	movs	r3, #128	@ 0x80
 8000f34:	4692      	mov	sl, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	18c3      	adds	r3, r0, r3
 8000f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8001134 <__aeabi_dmul+0x368>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	dd00      	ble.n	8000f42 <__aeabi_dmul+0x176>
 8000f40:	e18f      	b.n	8001262 <__aeabi_dmul+0x496>
 8000f42:	4642      	mov	r2, r8
 8000f44:	08d1      	lsrs	r1, r2, #3
 8000f46:	4652      	mov	r2, sl
 8000f48:	0752      	lsls	r2, r2, #29
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	4651      	mov	r1, sl
 8000f4e:	055b      	lsls	r3, r3, #21
 8000f50:	024c      	lsls	r4, r1, #9
 8000f52:	0b24      	lsrs	r4, r4, #12
 8000f54:	0d5b      	lsrs	r3, r3, #21
 8000f56:	e797      	b.n	8000e88 <__aeabi_dmul+0xbc>
 8000f58:	4b73      	ldr	r3, [pc, #460]	@ (8001128 <__aeabi_dmul+0x35c>)
 8000f5a:	4326      	orrs	r6, r4
 8000f5c:	469c      	mov	ip, r3
 8000f5e:	44e3      	add	fp, ip
 8000f60:	2e00      	cmp	r6, #0
 8000f62:	d100      	bne.n	8000f66 <__aeabi_dmul+0x19a>
 8000f64:	e16f      	b.n	8001246 <__aeabi_dmul+0x47a>
 8000f66:	2303      	movs	r3, #3
 8000f68:	4649      	mov	r1, r9
 8000f6a:	431d      	orrs	r5, r3
 8000f6c:	9b00      	ldr	r3, [sp, #0]
 8000f6e:	4059      	eors	r1, r3
 8000f70:	b2cb      	uxtb	r3, r1
 8000f72:	9303      	str	r3, [sp, #12]
 8000f74:	2d0a      	cmp	r5, #10
 8000f76:	dd00      	ble.n	8000f7a <__aeabi_dmul+0x1ae>
 8000f78:	e133      	b.n	80011e2 <__aeabi_dmul+0x416>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	40ab      	lsls	r3, r5
 8000f7e:	001d      	movs	r5, r3
 8000f80:	2303      	movs	r3, #3
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2288      	movs	r2, #136	@ 0x88
 8000f86:	422a      	tst	r2, r5
 8000f88:	d197      	bne.n	8000eba <__aeabi_dmul+0xee>
 8000f8a:	4642      	mov	r2, r8
 8000f8c:	4643      	mov	r3, r8
 8000f8e:	0412      	lsls	r2, r2, #16
 8000f90:	0c12      	lsrs	r2, r2, #16
 8000f92:	0016      	movs	r6, r2
 8000f94:	9801      	ldr	r0, [sp, #4]
 8000f96:	0c1d      	lsrs	r5, r3, #16
 8000f98:	0c03      	lsrs	r3, r0, #16
 8000f9a:	0400      	lsls	r0, r0, #16
 8000f9c:	0c00      	lsrs	r0, r0, #16
 8000f9e:	4346      	muls	r6, r0
 8000fa0:	46b4      	mov	ip, r6
 8000fa2:	001e      	movs	r6, r3
 8000fa4:	436e      	muls	r6, r5
 8000fa6:	9600      	str	r6, [sp, #0]
 8000fa8:	0016      	movs	r6, r2
 8000faa:	0007      	movs	r7, r0
 8000fac:	435e      	muls	r6, r3
 8000fae:	4661      	mov	r1, ip
 8000fb0:	46b0      	mov	r8, r6
 8000fb2:	436f      	muls	r7, r5
 8000fb4:	0c0e      	lsrs	r6, r1, #16
 8000fb6:	44b8      	add	r8, r7
 8000fb8:	4446      	add	r6, r8
 8000fba:	42b7      	cmp	r7, r6
 8000fbc:	d905      	bls.n	8000fca <__aeabi_dmul+0x1fe>
 8000fbe:	2180      	movs	r1, #128	@ 0x80
 8000fc0:	0249      	lsls	r1, r1, #9
 8000fc2:	4688      	mov	r8, r1
 8000fc4:	9f00      	ldr	r7, [sp, #0]
 8000fc6:	4447      	add	r7, r8
 8000fc8:	9700      	str	r7, [sp, #0]
 8000fca:	4661      	mov	r1, ip
 8000fcc:	0409      	lsls	r1, r1, #16
 8000fce:	0c09      	lsrs	r1, r1, #16
 8000fd0:	0c37      	lsrs	r7, r6, #16
 8000fd2:	0436      	lsls	r6, r6, #16
 8000fd4:	468c      	mov	ip, r1
 8000fd6:	0031      	movs	r1, r6
 8000fd8:	4461      	add	r1, ip
 8000fda:	9101      	str	r1, [sp, #4]
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0c26      	lsrs	r6, r4, #16
 8000fe0:	0424      	lsls	r4, r4, #16
 8000fe2:	0c24      	lsrs	r4, r4, #16
 8000fe4:	4361      	muls	r1, r4
 8000fe6:	468c      	mov	ip, r1
 8000fe8:	0021      	movs	r1, r4
 8000fea:	4369      	muls	r1, r5
 8000fec:	4689      	mov	r9, r1
 8000fee:	4661      	mov	r1, ip
 8000ff0:	0c09      	lsrs	r1, r1, #16
 8000ff2:	4688      	mov	r8, r1
 8000ff4:	4372      	muls	r2, r6
 8000ff6:	444a      	add	r2, r9
 8000ff8:	4442      	add	r2, r8
 8000ffa:	4375      	muls	r5, r6
 8000ffc:	4591      	cmp	r9, r2
 8000ffe:	d903      	bls.n	8001008 <__aeabi_dmul+0x23c>
 8001000:	2180      	movs	r1, #128	@ 0x80
 8001002:	0249      	lsls	r1, r1, #9
 8001004:	4688      	mov	r8, r1
 8001006:	4445      	add	r5, r8
 8001008:	0c11      	lsrs	r1, r2, #16
 800100a:	4688      	mov	r8, r1
 800100c:	4661      	mov	r1, ip
 800100e:	0409      	lsls	r1, r1, #16
 8001010:	0c09      	lsrs	r1, r1, #16
 8001012:	468c      	mov	ip, r1
 8001014:	0412      	lsls	r2, r2, #16
 8001016:	4462      	add	r2, ip
 8001018:	18b9      	adds	r1, r7, r2
 800101a:	9102      	str	r1, [sp, #8]
 800101c:	4651      	mov	r1, sl
 800101e:	0c09      	lsrs	r1, r1, #16
 8001020:	468c      	mov	ip, r1
 8001022:	4651      	mov	r1, sl
 8001024:	040f      	lsls	r7, r1, #16
 8001026:	0c3f      	lsrs	r7, r7, #16
 8001028:	0039      	movs	r1, r7
 800102a:	4341      	muls	r1, r0
 800102c:	4445      	add	r5, r8
 800102e:	4688      	mov	r8, r1
 8001030:	4661      	mov	r1, ip
 8001032:	4341      	muls	r1, r0
 8001034:	468a      	mov	sl, r1
 8001036:	4641      	mov	r1, r8
 8001038:	4660      	mov	r0, ip
 800103a:	0c09      	lsrs	r1, r1, #16
 800103c:	4689      	mov	r9, r1
 800103e:	4358      	muls	r0, r3
 8001040:	437b      	muls	r3, r7
 8001042:	4453      	add	r3, sl
 8001044:	444b      	add	r3, r9
 8001046:	459a      	cmp	sl, r3
 8001048:	d903      	bls.n	8001052 <__aeabi_dmul+0x286>
 800104a:	2180      	movs	r1, #128	@ 0x80
 800104c:	0249      	lsls	r1, r1, #9
 800104e:	4689      	mov	r9, r1
 8001050:	4448      	add	r0, r9
 8001052:	0c19      	lsrs	r1, r3, #16
 8001054:	4689      	mov	r9, r1
 8001056:	4641      	mov	r1, r8
 8001058:	0409      	lsls	r1, r1, #16
 800105a:	0c09      	lsrs	r1, r1, #16
 800105c:	4688      	mov	r8, r1
 800105e:	0039      	movs	r1, r7
 8001060:	4361      	muls	r1, r4
 8001062:	041b      	lsls	r3, r3, #16
 8001064:	4443      	add	r3, r8
 8001066:	4688      	mov	r8, r1
 8001068:	4661      	mov	r1, ip
 800106a:	434c      	muls	r4, r1
 800106c:	4371      	muls	r1, r6
 800106e:	468c      	mov	ip, r1
 8001070:	4641      	mov	r1, r8
 8001072:	4377      	muls	r7, r6
 8001074:	0c0e      	lsrs	r6, r1, #16
 8001076:	193f      	adds	r7, r7, r4
 8001078:	19f6      	adds	r6, r6, r7
 800107a:	4448      	add	r0, r9
 800107c:	42b4      	cmp	r4, r6
 800107e:	d903      	bls.n	8001088 <__aeabi_dmul+0x2bc>
 8001080:	2180      	movs	r1, #128	@ 0x80
 8001082:	0249      	lsls	r1, r1, #9
 8001084:	4689      	mov	r9, r1
 8001086:	44cc      	add	ip, r9
 8001088:	9902      	ldr	r1, [sp, #8]
 800108a:	9f00      	ldr	r7, [sp, #0]
 800108c:	4689      	mov	r9, r1
 800108e:	0431      	lsls	r1, r6, #16
 8001090:	444f      	add	r7, r9
 8001092:	4689      	mov	r9, r1
 8001094:	4641      	mov	r1, r8
 8001096:	4297      	cmp	r7, r2
 8001098:	4192      	sbcs	r2, r2
 800109a:	040c      	lsls	r4, r1, #16
 800109c:	0c24      	lsrs	r4, r4, #16
 800109e:	444c      	add	r4, r9
 80010a0:	18ff      	adds	r7, r7, r3
 80010a2:	4252      	negs	r2, r2
 80010a4:	1964      	adds	r4, r4, r5
 80010a6:	18a1      	adds	r1, r4, r2
 80010a8:	429f      	cmp	r7, r3
 80010aa:	419b      	sbcs	r3, r3
 80010ac:	4688      	mov	r8, r1
 80010ae:	4682      	mov	sl, r0
 80010b0:	425b      	negs	r3, r3
 80010b2:	4699      	mov	r9, r3
 80010b4:	4590      	cmp	r8, r2
 80010b6:	4192      	sbcs	r2, r2
 80010b8:	42ac      	cmp	r4, r5
 80010ba:	41a4      	sbcs	r4, r4
 80010bc:	44c2      	add	sl, r8
 80010be:	44d1      	add	r9, sl
 80010c0:	4252      	negs	r2, r2
 80010c2:	4264      	negs	r4, r4
 80010c4:	4314      	orrs	r4, r2
 80010c6:	4599      	cmp	r9, r3
 80010c8:	419b      	sbcs	r3, r3
 80010ca:	4582      	cmp	sl, r0
 80010cc:	4192      	sbcs	r2, r2
 80010ce:	425b      	negs	r3, r3
 80010d0:	4252      	negs	r2, r2
 80010d2:	4313      	orrs	r3, r2
 80010d4:	464a      	mov	r2, r9
 80010d6:	0c36      	lsrs	r6, r6, #16
 80010d8:	19a4      	adds	r4, r4, r6
 80010da:	18e3      	adds	r3, r4, r3
 80010dc:	4463      	add	r3, ip
 80010de:	025b      	lsls	r3, r3, #9
 80010e0:	0dd2      	lsrs	r2, r2, #23
 80010e2:	431a      	orrs	r2, r3
 80010e4:	9901      	ldr	r1, [sp, #4]
 80010e6:	4692      	mov	sl, r2
 80010e8:	027a      	lsls	r2, r7, #9
 80010ea:	430a      	orrs	r2, r1
 80010ec:	1e50      	subs	r0, r2, #1
 80010ee:	4182      	sbcs	r2, r0
 80010f0:	0dff      	lsrs	r7, r7, #23
 80010f2:	4317      	orrs	r7, r2
 80010f4:	464a      	mov	r2, r9
 80010f6:	0252      	lsls	r2, r2, #9
 80010f8:	4317      	orrs	r7, r2
 80010fa:	46b8      	mov	r8, r7
 80010fc:	01db      	lsls	r3, r3, #7
 80010fe:	d500      	bpl.n	8001102 <__aeabi_dmul+0x336>
 8001100:	e6ed      	b.n	8000ede <__aeabi_dmul+0x112>
 8001102:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <__aeabi_dmul+0x36c>)
 8001104:	9a03      	ldr	r2, [sp, #12]
 8001106:	445b      	add	r3, fp
 8001108:	4691      	mov	r9, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	dc00      	bgt.n	8001110 <__aeabi_dmul+0x344>
 800110e:	e0ac      	b.n	800126a <__aeabi_dmul+0x49e>
 8001110:	003a      	movs	r2, r7
 8001112:	0752      	lsls	r2, r2, #29
 8001114:	d100      	bne.n	8001118 <__aeabi_dmul+0x34c>
 8001116:	e710      	b.n	8000f3a <__aeabi_dmul+0x16e>
 8001118:	220f      	movs	r2, #15
 800111a:	4658      	mov	r0, fp
 800111c:	403a      	ands	r2, r7
 800111e:	2a04      	cmp	r2, #4
 8001120:	d000      	beq.n	8001124 <__aeabi_dmul+0x358>
 8001122:	e6f9      	b.n	8000f18 <__aeabi_dmul+0x14c>
 8001124:	e709      	b.n	8000f3a <__aeabi_dmul+0x16e>
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	000007ff 	.word	0x000007ff
 800112c:	fffffc01 	.word	0xfffffc01
 8001130:	feffffff 	.word	0xfeffffff
 8001134:	000007fe 	.word	0x000007fe
 8001138:	000003ff 	.word	0x000003ff
 800113c:	0022      	movs	r2, r4
 800113e:	4332      	orrs	r2, r6
 8001140:	d06f      	beq.n	8001222 <__aeabi_dmul+0x456>
 8001142:	2c00      	cmp	r4, #0
 8001144:	d100      	bne.n	8001148 <__aeabi_dmul+0x37c>
 8001146:	e0c2      	b.n	80012ce <__aeabi_dmul+0x502>
 8001148:	0020      	movs	r0, r4
 800114a:	f000 fe4b 	bl	8001de4 <__clzsi2>
 800114e:	0002      	movs	r2, r0
 8001150:	0003      	movs	r3, r0
 8001152:	3a0b      	subs	r2, #11
 8001154:	201d      	movs	r0, #29
 8001156:	1a82      	subs	r2, r0, r2
 8001158:	0030      	movs	r0, r6
 800115a:	0019      	movs	r1, r3
 800115c:	40d0      	lsrs	r0, r2
 800115e:	3908      	subs	r1, #8
 8001160:	408c      	lsls	r4, r1
 8001162:	0002      	movs	r2, r0
 8001164:	4322      	orrs	r2, r4
 8001166:	0034      	movs	r4, r6
 8001168:	408c      	lsls	r4, r1
 800116a:	4659      	mov	r1, fp
 800116c:	1acb      	subs	r3, r1, r3
 800116e:	4986      	ldr	r1, [pc, #536]	@ (8001388 <__aeabi_dmul+0x5bc>)
 8001170:	468b      	mov	fp, r1
 8001172:	449b      	add	fp, r3
 8001174:	2d0a      	cmp	r5, #10
 8001176:	dd00      	ble.n	800117a <__aeabi_dmul+0x3ae>
 8001178:	e6a4      	b.n	8000ec4 <__aeabi_dmul+0xf8>
 800117a:	4649      	mov	r1, r9
 800117c:	9b00      	ldr	r3, [sp, #0]
 800117e:	9401      	str	r4, [sp, #4]
 8001180:	4059      	eors	r1, r3
 8001182:	b2cb      	uxtb	r3, r1
 8001184:	0014      	movs	r4, r2
 8001186:	2000      	movs	r0, #0
 8001188:	9303      	str	r3, [sp, #12]
 800118a:	2d02      	cmp	r5, #2
 800118c:	dd00      	ble.n	8001190 <__aeabi_dmul+0x3c4>
 800118e:	e667      	b.n	8000e60 <__aeabi_dmul+0x94>
 8001190:	e6fb      	b.n	8000f8a <__aeabi_dmul+0x1be>
 8001192:	4653      	mov	r3, sl
 8001194:	4303      	orrs	r3, r0
 8001196:	4698      	mov	r8, r3
 8001198:	d03c      	beq.n	8001214 <__aeabi_dmul+0x448>
 800119a:	4653      	mov	r3, sl
 800119c:	2b00      	cmp	r3, #0
 800119e:	d100      	bne.n	80011a2 <__aeabi_dmul+0x3d6>
 80011a0:	e0a3      	b.n	80012ea <__aeabi_dmul+0x51e>
 80011a2:	4650      	mov	r0, sl
 80011a4:	f000 fe1e 	bl	8001de4 <__clzsi2>
 80011a8:	230b      	movs	r3, #11
 80011aa:	425b      	negs	r3, r3
 80011ac:	469c      	mov	ip, r3
 80011ae:	0002      	movs	r2, r0
 80011b0:	4484      	add	ip, r0
 80011b2:	0011      	movs	r1, r2
 80011b4:	4650      	mov	r0, sl
 80011b6:	3908      	subs	r1, #8
 80011b8:	4088      	lsls	r0, r1
 80011ba:	231d      	movs	r3, #29
 80011bc:	4680      	mov	r8, r0
 80011be:	4660      	mov	r0, ip
 80011c0:	1a1b      	subs	r3, r3, r0
 80011c2:	0020      	movs	r0, r4
 80011c4:	40d8      	lsrs	r0, r3
 80011c6:	0003      	movs	r3, r0
 80011c8:	4640      	mov	r0, r8
 80011ca:	4303      	orrs	r3, r0
 80011cc:	469a      	mov	sl, r3
 80011ce:	0023      	movs	r3, r4
 80011d0:	408b      	lsls	r3, r1
 80011d2:	4698      	mov	r8, r3
 80011d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001388 <__aeabi_dmul+0x5bc>)
 80011d6:	2500      	movs	r5, #0
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	469b      	mov	fp, r3
 80011dc:	2300      	movs	r3, #0
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	e61a      	b.n	8000e18 <__aeabi_dmul+0x4c>
 80011e2:	2d0f      	cmp	r5, #15
 80011e4:	d000      	beq.n	80011e8 <__aeabi_dmul+0x41c>
 80011e6:	e0c9      	b.n	800137c <__aeabi_dmul+0x5b0>
 80011e8:	2380      	movs	r3, #128	@ 0x80
 80011ea:	4652      	mov	r2, sl
 80011ec:	031b      	lsls	r3, r3, #12
 80011ee:	421a      	tst	r2, r3
 80011f0:	d002      	beq.n	80011f8 <__aeabi_dmul+0x42c>
 80011f2:	421c      	tst	r4, r3
 80011f4:	d100      	bne.n	80011f8 <__aeabi_dmul+0x42c>
 80011f6:	e092      	b.n	800131e <__aeabi_dmul+0x552>
 80011f8:	2480      	movs	r4, #128	@ 0x80
 80011fa:	4653      	mov	r3, sl
 80011fc:	0324      	lsls	r4, r4, #12
 80011fe:	431c      	orrs	r4, r3
 8001200:	0324      	lsls	r4, r4, #12
 8001202:	4642      	mov	r2, r8
 8001204:	0b24      	lsrs	r4, r4, #12
 8001206:	e63e      	b.n	8000e86 <__aeabi_dmul+0xba>
 8001208:	469b      	mov	fp, r3
 800120a:	2303      	movs	r3, #3
 800120c:	4680      	mov	r8, r0
 800120e:	250c      	movs	r5, #12
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	e601      	b.n	8000e18 <__aeabi_dmul+0x4c>
 8001214:	2300      	movs	r3, #0
 8001216:	469a      	mov	sl, r3
 8001218:	469b      	mov	fp, r3
 800121a:	3301      	adds	r3, #1
 800121c:	2504      	movs	r5, #4
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	e5fa      	b.n	8000e18 <__aeabi_dmul+0x4c>
 8001222:	2101      	movs	r1, #1
 8001224:	430d      	orrs	r5, r1
 8001226:	2d0a      	cmp	r5, #10
 8001228:	dd00      	ble.n	800122c <__aeabi_dmul+0x460>
 800122a:	e64b      	b.n	8000ec4 <__aeabi_dmul+0xf8>
 800122c:	4649      	mov	r1, r9
 800122e:	9800      	ldr	r0, [sp, #0]
 8001230:	4041      	eors	r1, r0
 8001232:	b2c9      	uxtb	r1, r1
 8001234:	9103      	str	r1, [sp, #12]
 8001236:	2d02      	cmp	r5, #2
 8001238:	dc00      	bgt.n	800123c <__aeabi_dmul+0x470>
 800123a:	e096      	b.n	800136a <__aeabi_dmul+0x59e>
 800123c:	2300      	movs	r3, #0
 800123e:	2400      	movs	r4, #0
 8001240:	2001      	movs	r0, #1
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	e60c      	b.n	8000e60 <__aeabi_dmul+0x94>
 8001246:	4649      	mov	r1, r9
 8001248:	2302      	movs	r3, #2
 800124a:	9a00      	ldr	r2, [sp, #0]
 800124c:	432b      	orrs	r3, r5
 800124e:	4051      	eors	r1, r2
 8001250:	b2ca      	uxtb	r2, r1
 8001252:	9203      	str	r2, [sp, #12]
 8001254:	2b0a      	cmp	r3, #10
 8001256:	dd00      	ble.n	800125a <__aeabi_dmul+0x48e>
 8001258:	e634      	b.n	8000ec4 <__aeabi_dmul+0xf8>
 800125a:	2d00      	cmp	r5, #0
 800125c:	d157      	bne.n	800130e <__aeabi_dmul+0x542>
 800125e:	9b03      	ldr	r3, [sp, #12]
 8001260:	4699      	mov	r9, r3
 8001262:	2400      	movs	r4, #0
 8001264:	2200      	movs	r2, #0
 8001266:	4b49      	ldr	r3, [pc, #292]	@ (800138c <__aeabi_dmul+0x5c0>)
 8001268:	e60e      	b.n	8000e88 <__aeabi_dmul+0xbc>
 800126a:	4658      	mov	r0, fp
 800126c:	2101      	movs	r1, #1
 800126e:	1ac9      	subs	r1, r1, r3
 8001270:	2938      	cmp	r1, #56	@ 0x38
 8001272:	dd00      	ble.n	8001276 <__aeabi_dmul+0x4aa>
 8001274:	e62f      	b.n	8000ed6 <__aeabi_dmul+0x10a>
 8001276:	291f      	cmp	r1, #31
 8001278:	dd56      	ble.n	8001328 <__aeabi_dmul+0x55c>
 800127a:	221f      	movs	r2, #31
 800127c:	4654      	mov	r4, sl
 800127e:	4252      	negs	r2, r2
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	40dc      	lsrs	r4, r3
 8001284:	2920      	cmp	r1, #32
 8001286:	d007      	beq.n	8001298 <__aeabi_dmul+0x4cc>
 8001288:	4b41      	ldr	r3, [pc, #260]	@ (8001390 <__aeabi_dmul+0x5c4>)
 800128a:	4642      	mov	r2, r8
 800128c:	469c      	mov	ip, r3
 800128e:	4653      	mov	r3, sl
 8001290:	4460      	add	r0, ip
 8001292:	4083      	lsls	r3, r0
 8001294:	431a      	orrs	r2, r3
 8001296:	4690      	mov	r8, r2
 8001298:	4642      	mov	r2, r8
 800129a:	2107      	movs	r1, #7
 800129c:	1e53      	subs	r3, r2, #1
 800129e:	419a      	sbcs	r2, r3
 80012a0:	000b      	movs	r3, r1
 80012a2:	4322      	orrs	r2, r4
 80012a4:	4013      	ands	r3, r2
 80012a6:	2400      	movs	r4, #0
 80012a8:	4211      	tst	r1, r2
 80012aa:	d009      	beq.n	80012c0 <__aeabi_dmul+0x4f4>
 80012ac:	230f      	movs	r3, #15
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b04      	cmp	r3, #4
 80012b2:	d05d      	beq.n	8001370 <__aeabi_dmul+0x5a4>
 80012b4:	1d11      	adds	r1, r2, #4
 80012b6:	4291      	cmp	r1, r2
 80012b8:	419b      	sbcs	r3, r3
 80012ba:	000a      	movs	r2, r1
 80012bc:	425b      	negs	r3, r3
 80012be:	075b      	lsls	r3, r3, #29
 80012c0:	08d2      	lsrs	r2, r2, #3
 80012c2:	431a      	orrs	r2, r3
 80012c4:	2300      	movs	r3, #0
 80012c6:	e5df      	b.n	8000e88 <__aeabi_dmul+0xbc>
 80012c8:	9b03      	ldr	r3, [sp, #12]
 80012ca:	4699      	mov	r9, r3
 80012cc:	e5fa      	b.n	8000ec4 <__aeabi_dmul+0xf8>
 80012ce:	9801      	ldr	r0, [sp, #4]
 80012d0:	f000 fd88 	bl	8001de4 <__clzsi2>
 80012d4:	0002      	movs	r2, r0
 80012d6:	0003      	movs	r3, r0
 80012d8:	3215      	adds	r2, #21
 80012da:	3320      	adds	r3, #32
 80012dc:	2a1c      	cmp	r2, #28
 80012de:	dc00      	bgt.n	80012e2 <__aeabi_dmul+0x516>
 80012e0:	e738      	b.n	8001154 <__aeabi_dmul+0x388>
 80012e2:	9a01      	ldr	r2, [sp, #4]
 80012e4:	3808      	subs	r0, #8
 80012e6:	4082      	lsls	r2, r0
 80012e8:	e73f      	b.n	800116a <__aeabi_dmul+0x39e>
 80012ea:	f000 fd7b 	bl	8001de4 <__clzsi2>
 80012ee:	2315      	movs	r3, #21
 80012f0:	469c      	mov	ip, r3
 80012f2:	4484      	add	ip, r0
 80012f4:	0002      	movs	r2, r0
 80012f6:	4663      	mov	r3, ip
 80012f8:	3220      	adds	r2, #32
 80012fa:	2b1c      	cmp	r3, #28
 80012fc:	dc00      	bgt.n	8001300 <__aeabi_dmul+0x534>
 80012fe:	e758      	b.n	80011b2 <__aeabi_dmul+0x3e6>
 8001300:	2300      	movs	r3, #0
 8001302:	4698      	mov	r8, r3
 8001304:	0023      	movs	r3, r4
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	469a      	mov	sl, r3
 800130c:	e762      	b.n	80011d4 <__aeabi_dmul+0x408>
 800130e:	001d      	movs	r5, r3
 8001310:	2300      	movs	r3, #0
 8001312:	2400      	movs	r4, #0
 8001314:	2002      	movs	r0, #2
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	e5a2      	b.n	8000e60 <__aeabi_dmul+0x94>
 800131a:	9002      	str	r0, [sp, #8]
 800131c:	e632      	b.n	8000f84 <__aeabi_dmul+0x1b8>
 800131e:	431c      	orrs	r4, r3
 8001320:	9b00      	ldr	r3, [sp, #0]
 8001322:	9a01      	ldr	r2, [sp, #4]
 8001324:	4699      	mov	r9, r3
 8001326:	e5ae      	b.n	8000e86 <__aeabi_dmul+0xba>
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <__aeabi_dmul+0x5c8>)
 800132a:	4652      	mov	r2, sl
 800132c:	18c3      	adds	r3, r0, r3
 800132e:	4640      	mov	r0, r8
 8001330:	409a      	lsls	r2, r3
 8001332:	40c8      	lsrs	r0, r1
 8001334:	4302      	orrs	r2, r0
 8001336:	4640      	mov	r0, r8
 8001338:	4098      	lsls	r0, r3
 800133a:	0003      	movs	r3, r0
 800133c:	1e58      	subs	r0, r3, #1
 800133e:	4183      	sbcs	r3, r0
 8001340:	4654      	mov	r4, sl
 8001342:	431a      	orrs	r2, r3
 8001344:	40cc      	lsrs	r4, r1
 8001346:	0753      	lsls	r3, r2, #29
 8001348:	d009      	beq.n	800135e <__aeabi_dmul+0x592>
 800134a:	230f      	movs	r3, #15
 800134c:	4013      	ands	r3, r2
 800134e:	2b04      	cmp	r3, #4
 8001350:	d005      	beq.n	800135e <__aeabi_dmul+0x592>
 8001352:	1d13      	adds	r3, r2, #4
 8001354:	4293      	cmp	r3, r2
 8001356:	4192      	sbcs	r2, r2
 8001358:	4252      	negs	r2, r2
 800135a:	18a4      	adds	r4, r4, r2
 800135c:	001a      	movs	r2, r3
 800135e:	0223      	lsls	r3, r4, #8
 8001360:	d508      	bpl.n	8001374 <__aeabi_dmul+0x5a8>
 8001362:	2301      	movs	r3, #1
 8001364:	2400      	movs	r4, #0
 8001366:	2200      	movs	r2, #0
 8001368:	e58e      	b.n	8000e88 <__aeabi_dmul+0xbc>
 800136a:	4689      	mov	r9, r1
 800136c:	2400      	movs	r4, #0
 800136e:	e58b      	b.n	8000e88 <__aeabi_dmul+0xbc>
 8001370:	2300      	movs	r3, #0
 8001372:	e7a5      	b.n	80012c0 <__aeabi_dmul+0x4f4>
 8001374:	0763      	lsls	r3, r4, #29
 8001376:	0264      	lsls	r4, r4, #9
 8001378:	0b24      	lsrs	r4, r4, #12
 800137a:	e7a1      	b.n	80012c0 <__aeabi_dmul+0x4f4>
 800137c:	9b00      	ldr	r3, [sp, #0]
 800137e:	46a2      	mov	sl, r4
 8001380:	4699      	mov	r9, r3
 8001382:	9b01      	ldr	r3, [sp, #4]
 8001384:	4698      	mov	r8, r3
 8001386:	e737      	b.n	80011f8 <__aeabi_dmul+0x42c>
 8001388:	fffffc0d 	.word	0xfffffc0d
 800138c:	000007ff 	.word	0x000007ff
 8001390:	0000043e 	.word	0x0000043e
 8001394:	0000041e 	.word	0x0000041e

08001398 <__aeabi_dsub>:
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	4657      	mov	r7, sl
 800139c:	464e      	mov	r6, r9
 800139e:	4645      	mov	r5, r8
 80013a0:	46de      	mov	lr, fp
 80013a2:	b5e0      	push	{r5, r6, r7, lr}
 80013a4:	b083      	sub	sp, #12
 80013a6:	9000      	str	r0, [sp, #0]
 80013a8:	9101      	str	r1, [sp, #4]
 80013aa:	030c      	lsls	r4, r1, #12
 80013ac:	004d      	lsls	r5, r1, #1
 80013ae:	0fce      	lsrs	r6, r1, #31
 80013b0:	0a61      	lsrs	r1, r4, #9
 80013b2:	9c00      	ldr	r4, [sp, #0]
 80013b4:	005f      	lsls	r7, r3, #1
 80013b6:	0f64      	lsrs	r4, r4, #29
 80013b8:	430c      	orrs	r4, r1
 80013ba:	9900      	ldr	r1, [sp, #0]
 80013bc:	9200      	str	r2, [sp, #0]
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	00c8      	lsls	r0, r1, #3
 80013c2:	0319      	lsls	r1, r3, #12
 80013c4:	0d7b      	lsrs	r3, r7, #21
 80013c6:	4699      	mov	r9, r3
 80013c8:	9b01      	ldr	r3, [sp, #4]
 80013ca:	4fcc      	ldr	r7, [pc, #816]	@ (80016fc <__aeabi_dsub+0x364>)
 80013cc:	0fdb      	lsrs	r3, r3, #31
 80013ce:	469c      	mov	ip, r3
 80013d0:	0a4b      	lsrs	r3, r1, #9
 80013d2:	9900      	ldr	r1, [sp, #0]
 80013d4:	4680      	mov	r8, r0
 80013d6:	0f49      	lsrs	r1, r1, #29
 80013d8:	4319      	orrs	r1, r3
 80013da:	9b00      	ldr	r3, [sp, #0]
 80013dc:	468b      	mov	fp, r1
 80013de:	00da      	lsls	r2, r3, #3
 80013e0:	4692      	mov	sl, r2
 80013e2:	0d6d      	lsrs	r5, r5, #21
 80013e4:	45b9      	cmp	r9, r7
 80013e6:	d100      	bne.n	80013ea <__aeabi_dsub+0x52>
 80013e8:	e0bf      	b.n	800156a <__aeabi_dsub+0x1d2>
 80013ea:	2301      	movs	r3, #1
 80013ec:	4661      	mov	r1, ip
 80013ee:	4059      	eors	r1, r3
 80013f0:	464b      	mov	r3, r9
 80013f2:	468c      	mov	ip, r1
 80013f4:	1aeb      	subs	r3, r5, r3
 80013f6:	428e      	cmp	r6, r1
 80013f8:	d075      	beq.n	80014e6 <__aeabi_dsub+0x14e>
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_dsub+0x68>
 80013fe:	e2a3      	b.n	8001948 <__aeabi_dsub+0x5b0>
 8001400:	4649      	mov	r1, r9
 8001402:	2900      	cmp	r1, #0
 8001404:	d100      	bne.n	8001408 <__aeabi_dsub+0x70>
 8001406:	e0ce      	b.n	80015a6 <__aeabi_dsub+0x20e>
 8001408:	42bd      	cmp	r5, r7
 800140a:	d100      	bne.n	800140e <__aeabi_dsub+0x76>
 800140c:	e200      	b.n	8001810 <__aeabi_dsub+0x478>
 800140e:	2701      	movs	r7, #1
 8001410:	2b38      	cmp	r3, #56	@ 0x38
 8001412:	dc19      	bgt.n	8001448 <__aeabi_dsub+0xb0>
 8001414:	2780      	movs	r7, #128	@ 0x80
 8001416:	4659      	mov	r1, fp
 8001418:	043f      	lsls	r7, r7, #16
 800141a:	4339      	orrs	r1, r7
 800141c:	468b      	mov	fp, r1
 800141e:	2b1f      	cmp	r3, #31
 8001420:	dd00      	ble.n	8001424 <__aeabi_dsub+0x8c>
 8001422:	e1fa      	b.n	800181a <__aeabi_dsub+0x482>
 8001424:	2720      	movs	r7, #32
 8001426:	1af9      	subs	r1, r7, r3
 8001428:	468c      	mov	ip, r1
 800142a:	4659      	mov	r1, fp
 800142c:	4667      	mov	r7, ip
 800142e:	40b9      	lsls	r1, r7
 8001430:	000f      	movs	r7, r1
 8001432:	0011      	movs	r1, r2
 8001434:	40d9      	lsrs	r1, r3
 8001436:	430f      	orrs	r7, r1
 8001438:	4661      	mov	r1, ip
 800143a:	408a      	lsls	r2, r1
 800143c:	1e51      	subs	r1, r2, #1
 800143e:	418a      	sbcs	r2, r1
 8001440:	4659      	mov	r1, fp
 8001442:	40d9      	lsrs	r1, r3
 8001444:	4317      	orrs	r7, r2
 8001446:	1a64      	subs	r4, r4, r1
 8001448:	1bc7      	subs	r7, r0, r7
 800144a:	42b8      	cmp	r0, r7
 800144c:	4180      	sbcs	r0, r0
 800144e:	4240      	negs	r0, r0
 8001450:	1a24      	subs	r4, r4, r0
 8001452:	0223      	lsls	r3, r4, #8
 8001454:	d400      	bmi.n	8001458 <__aeabi_dsub+0xc0>
 8001456:	e140      	b.n	80016da <__aeabi_dsub+0x342>
 8001458:	0264      	lsls	r4, r4, #9
 800145a:	0a64      	lsrs	r4, r4, #9
 800145c:	2c00      	cmp	r4, #0
 800145e:	d100      	bne.n	8001462 <__aeabi_dsub+0xca>
 8001460:	e154      	b.n	800170c <__aeabi_dsub+0x374>
 8001462:	0020      	movs	r0, r4
 8001464:	f000 fcbe 	bl	8001de4 <__clzsi2>
 8001468:	0003      	movs	r3, r0
 800146a:	3b08      	subs	r3, #8
 800146c:	2120      	movs	r1, #32
 800146e:	0038      	movs	r0, r7
 8001470:	1aca      	subs	r2, r1, r3
 8001472:	40d0      	lsrs	r0, r2
 8001474:	409c      	lsls	r4, r3
 8001476:	0002      	movs	r2, r0
 8001478:	409f      	lsls	r7, r3
 800147a:	4322      	orrs	r2, r4
 800147c:	429d      	cmp	r5, r3
 800147e:	dd00      	ble.n	8001482 <__aeabi_dsub+0xea>
 8001480:	e1a6      	b.n	80017d0 <__aeabi_dsub+0x438>
 8001482:	1b58      	subs	r0, r3, r5
 8001484:	3001      	adds	r0, #1
 8001486:	1a09      	subs	r1, r1, r0
 8001488:	003c      	movs	r4, r7
 800148a:	408f      	lsls	r7, r1
 800148c:	40c4      	lsrs	r4, r0
 800148e:	1e7b      	subs	r3, r7, #1
 8001490:	419f      	sbcs	r7, r3
 8001492:	0013      	movs	r3, r2
 8001494:	408b      	lsls	r3, r1
 8001496:	4327      	orrs	r7, r4
 8001498:	431f      	orrs	r7, r3
 800149a:	40c2      	lsrs	r2, r0
 800149c:	003b      	movs	r3, r7
 800149e:	0014      	movs	r4, r2
 80014a0:	2500      	movs	r5, #0
 80014a2:	4313      	orrs	r3, r2
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dsub+0x110>
 80014a6:	e1f7      	b.n	8001898 <__aeabi_dsub+0x500>
 80014a8:	077b      	lsls	r3, r7, #29
 80014aa:	d100      	bne.n	80014ae <__aeabi_dsub+0x116>
 80014ac:	e377      	b.n	8001b9e <__aeabi_dsub+0x806>
 80014ae:	230f      	movs	r3, #15
 80014b0:	0038      	movs	r0, r7
 80014b2:	403b      	ands	r3, r7
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d004      	beq.n	80014c2 <__aeabi_dsub+0x12a>
 80014b8:	1d38      	adds	r0, r7, #4
 80014ba:	42b8      	cmp	r0, r7
 80014bc:	41bf      	sbcs	r7, r7
 80014be:	427f      	negs	r7, r7
 80014c0:	19e4      	adds	r4, r4, r7
 80014c2:	0223      	lsls	r3, r4, #8
 80014c4:	d400      	bmi.n	80014c8 <__aeabi_dsub+0x130>
 80014c6:	e368      	b.n	8001b9a <__aeabi_dsub+0x802>
 80014c8:	4b8c      	ldr	r3, [pc, #560]	@ (80016fc <__aeabi_dsub+0x364>)
 80014ca:	3501      	adds	r5, #1
 80014cc:	429d      	cmp	r5, r3
 80014ce:	d100      	bne.n	80014d2 <__aeabi_dsub+0x13a>
 80014d0:	e0f4      	b.n	80016bc <__aeabi_dsub+0x324>
 80014d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001700 <__aeabi_dsub+0x368>)
 80014d4:	056d      	lsls	r5, r5, #21
 80014d6:	401c      	ands	r4, r3
 80014d8:	0d6d      	lsrs	r5, r5, #21
 80014da:	0767      	lsls	r7, r4, #29
 80014dc:	08c0      	lsrs	r0, r0, #3
 80014de:	0264      	lsls	r4, r4, #9
 80014e0:	4307      	orrs	r7, r0
 80014e2:	0b24      	lsrs	r4, r4, #12
 80014e4:	e0ec      	b.n	80016c0 <__aeabi_dsub+0x328>
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	dc00      	bgt.n	80014ec <__aeabi_dsub+0x154>
 80014ea:	e329      	b.n	8001b40 <__aeabi_dsub+0x7a8>
 80014ec:	4649      	mov	r1, r9
 80014ee:	2900      	cmp	r1, #0
 80014f0:	d000      	beq.n	80014f4 <__aeabi_dsub+0x15c>
 80014f2:	e0d6      	b.n	80016a2 <__aeabi_dsub+0x30a>
 80014f4:	4659      	mov	r1, fp
 80014f6:	4311      	orrs	r1, r2
 80014f8:	d100      	bne.n	80014fc <__aeabi_dsub+0x164>
 80014fa:	e12e      	b.n	800175a <__aeabi_dsub+0x3c2>
 80014fc:	1e59      	subs	r1, r3, #1
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d100      	bne.n	8001504 <__aeabi_dsub+0x16c>
 8001502:	e1e6      	b.n	80018d2 <__aeabi_dsub+0x53a>
 8001504:	42bb      	cmp	r3, r7
 8001506:	d100      	bne.n	800150a <__aeabi_dsub+0x172>
 8001508:	e182      	b.n	8001810 <__aeabi_dsub+0x478>
 800150a:	2701      	movs	r7, #1
 800150c:	000b      	movs	r3, r1
 800150e:	2938      	cmp	r1, #56	@ 0x38
 8001510:	dc14      	bgt.n	800153c <__aeabi_dsub+0x1a4>
 8001512:	2b1f      	cmp	r3, #31
 8001514:	dd00      	ble.n	8001518 <__aeabi_dsub+0x180>
 8001516:	e23c      	b.n	8001992 <__aeabi_dsub+0x5fa>
 8001518:	2720      	movs	r7, #32
 800151a:	1af9      	subs	r1, r7, r3
 800151c:	468c      	mov	ip, r1
 800151e:	4659      	mov	r1, fp
 8001520:	4667      	mov	r7, ip
 8001522:	40b9      	lsls	r1, r7
 8001524:	000f      	movs	r7, r1
 8001526:	0011      	movs	r1, r2
 8001528:	40d9      	lsrs	r1, r3
 800152a:	430f      	orrs	r7, r1
 800152c:	4661      	mov	r1, ip
 800152e:	408a      	lsls	r2, r1
 8001530:	1e51      	subs	r1, r2, #1
 8001532:	418a      	sbcs	r2, r1
 8001534:	4659      	mov	r1, fp
 8001536:	40d9      	lsrs	r1, r3
 8001538:	4317      	orrs	r7, r2
 800153a:	1864      	adds	r4, r4, r1
 800153c:	183f      	adds	r7, r7, r0
 800153e:	4287      	cmp	r7, r0
 8001540:	4180      	sbcs	r0, r0
 8001542:	4240      	negs	r0, r0
 8001544:	1824      	adds	r4, r4, r0
 8001546:	0223      	lsls	r3, r4, #8
 8001548:	d400      	bmi.n	800154c <__aeabi_dsub+0x1b4>
 800154a:	e0c6      	b.n	80016da <__aeabi_dsub+0x342>
 800154c:	4b6b      	ldr	r3, [pc, #428]	@ (80016fc <__aeabi_dsub+0x364>)
 800154e:	3501      	adds	r5, #1
 8001550:	429d      	cmp	r5, r3
 8001552:	d100      	bne.n	8001556 <__aeabi_dsub+0x1be>
 8001554:	e0b2      	b.n	80016bc <__aeabi_dsub+0x324>
 8001556:	2101      	movs	r1, #1
 8001558:	4b69      	ldr	r3, [pc, #420]	@ (8001700 <__aeabi_dsub+0x368>)
 800155a:	087a      	lsrs	r2, r7, #1
 800155c:	401c      	ands	r4, r3
 800155e:	4039      	ands	r1, r7
 8001560:	430a      	orrs	r2, r1
 8001562:	07e7      	lsls	r7, r4, #31
 8001564:	4317      	orrs	r7, r2
 8001566:	0864      	lsrs	r4, r4, #1
 8001568:	e79e      	b.n	80014a8 <__aeabi_dsub+0x110>
 800156a:	4b66      	ldr	r3, [pc, #408]	@ (8001704 <__aeabi_dsub+0x36c>)
 800156c:	4311      	orrs	r1, r2
 800156e:	468a      	mov	sl, r1
 8001570:	18eb      	adds	r3, r5, r3
 8001572:	2900      	cmp	r1, #0
 8001574:	d028      	beq.n	80015c8 <__aeabi_dsub+0x230>
 8001576:	4566      	cmp	r6, ip
 8001578:	d02c      	beq.n	80015d4 <__aeabi_dsub+0x23c>
 800157a:	2b00      	cmp	r3, #0
 800157c:	d05b      	beq.n	8001636 <__aeabi_dsub+0x29e>
 800157e:	2d00      	cmp	r5, #0
 8001580:	d100      	bne.n	8001584 <__aeabi_dsub+0x1ec>
 8001582:	e12c      	b.n	80017de <__aeabi_dsub+0x446>
 8001584:	465b      	mov	r3, fp
 8001586:	4666      	mov	r6, ip
 8001588:	075f      	lsls	r7, r3, #29
 800158a:	08d2      	lsrs	r2, r2, #3
 800158c:	4317      	orrs	r7, r2
 800158e:	08dd      	lsrs	r5, r3, #3
 8001590:	003b      	movs	r3, r7
 8001592:	432b      	orrs	r3, r5
 8001594:	d100      	bne.n	8001598 <__aeabi_dsub+0x200>
 8001596:	e0e2      	b.n	800175e <__aeabi_dsub+0x3c6>
 8001598:	2480      	movs	r4, #128	@ 0x80
 800159a:	0324      	lsls	r4, r4, #12
 800159c:	432c      	orrs	r4, r5
 800159e:	0324      	lsls	r4, r4, #12
 80015a0:	4d56      	ldr	r5, [pc, #344]	@ (80016fc <__aeabi_dsub+0x364>)
 80015a2:	0b24      	lsrs	r4, r4, #12
 80015a4:	e08c      	b.n	80016c0 <__aeabi_dsub+0x328>
 80015a6:	4659      	mov	r1, fp
 80015a8:	4311      	orrs	r1, r2
 80015aa:	d100      	bne.n	80015ae <__aeabi_dsub+0x216>
 80015ac:	e0d5      	b.n	800175a <__aeabi_dsub+0x3c2>
 80015ae:	1e59      	subs	r1, r3, #1
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dsub+0x21e>
 80015b4:	e1b9      	b.n	800192a <__aeabi_dsub+0x592>
 80015b6:	42bb      	cmp	r3, r7
 80015b8:	d100      	bne.n	80015bc <__aeabi_dsub+0x224>
 80015ba:	e1b1      	b.n	8001920 <__aeabi_dsub+0x588>
 80015bc:	2701      	movs	r7, #1
 80015be:	000b      	movs	r3, r1
 80015c0:	2938      	cmp	r1, #56	@ 0x38
 80015c2:	dd00      	ble.n	80015c6 <__aeabi_dsub+0x22e>
 80015c4:	e740      	b.n	8001448 <__aeabi_dsub+0xb0>
 80015c6:	e72a      	b.n	800141e <__aeabi_dsub+0x86>
 80015c8:	4661      	mov	r1, ip
 80015ca:	2701      	movs	r7, #1
 80015cc:	4079      	eors	r1, r7
 80015ce:	468c      	mov	ip, r1
 80015d0:	4566      	cmp	r6, ip
 80015d2:	d1d2      	bne.n	800157a <__aeabi_dsub+0x1e2>
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dsub+0x242>
 80015d8:	e0c5      	b.n	8001766 <__aeabi_dsub+0x3ce>
 80015da:	2d00      	cmp	r5, #0
 80015dc:	d000      	beq.n	80015e0 <__aeabi_dsub+0x248>
 80015de:	e155      	b.n	800188c <__aeabi_dsub+0x4f4>
 80015e0:	464b      	mov	r3, r9
 80015e2:	0025      	movs	r5, r4
 80015e4:	4305      	orrs	r5, r0
 80015e6:	d100      	bne.n	80015ea <__aeabi_dsub+0x252>
 80015e8:	e212      	b.n	8001a10 <__aeabi_dsub+0x678>
 80015ea:	1e59      	subs	r1, r3, #1
 80015ec:	468c      	mov	ip, r1
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d100      	bne.n	80015f4 <__aeabi_dsub+0x25c>
 80015f2:	e249      	b.n	8001a88 <__aeabi_dsub+0x6f0>
 80015f4:	4d41      	ldr	r5, [pc, #260]	@ (80016fc <__aeabi_dsub+0x364>)
 80015f6:	42ab      	cmp	r3, r5
 80015f8:	d100      	bne.n	80015fc <__aeabi_dsub+0x264>
 80015fa:	e28f      	b.n	8001b1c <__aeabi_dsub+0x784>
 80015fc:	2701      	movs	r7, #1
 80015fe:	2938      	cmp	r1, #56	@ 0x38
 8001600:	dc11      	bgt.n	8001626 <__aeabi_dsub+0x28e>
 8001602:	4663      	mov	r3, ip
 8001604:	2b1f      	cmp	r3, #31
 8001606:	dd00      	ble.n	800160a <__aeabi_dsub+0x272>
 8001608:	e25b      	b.n	8001ac2 <__aeabi_dsub+0x72a>
 800160a:	4661      	mov	r1, ip
 800160c:	2320      	movs	r3, #32
 800160e:	0027      	movs	r7, r4
 8001610:	1a5b      	subs	r3, r3, r1
 8001612:	0005      	movs	r5, r0
 8001614:	4098      	lsls	r0, r3
 8001616:	409f      	lsls	r7, r3
 8001618:	40cd      	lsrs	r5, r1
 800161a:	1e43      	subs	r3, r0, #1
 800161c:	4198      	sbcs	r0, r3
 800161e:	40cc      	lsrs	r4, r1
 8001620:	432f      	orrs	r7, r5
 8001622:	4307      	orrs	r7, r0
 8001624:	44a3      	add	fp, r4
 8001626:	18bf      	adds	r7, r7, r2
 8001628:	4297      	cmp	r7, r2
 800162a:	4192      	sbcs	r2, r2
 800162c:	4252      	negs	r2, r2
 800162e:	445a      	add	r2, fp
 8001630:	0014      	movs	r4, r2
 8001632:	464d      	mov	r5, r9
 8001634:	e787      	b.n	8001546 <__aeabi_dsub+0x1ae>
 8001636:	4f34      	ldr	r7, [pc, #208]	@ (8001708 <__aeabi_dsub+0x370>)
 8001638:	1c6b      	adds	r3, r5, #1
 800163a:	423b      	tst	r3, r7
 800163c:	d000      	beq.n	8001640 <__aeabi_dsub+0x2a8>
 800163e:	e0b6      	b.n	80017ae <__aeabi_dsub+0x416>
 8001640:	4659      	mov	r1, fp
 8001642:	0023      	movs	r3, r4
 8001644:	4311      	orrs	r1, r2
 8001646:	000f      	movs	r7, r1
 8001648:	4303      	orrs	r3, r0
 800164a:	2d00      	cmp	r5, #0
 800164c:	d000      	beq.n	8001650 <__aeabi_dsub+0x2b8>
 800164e:	e126      	b.n	800189e <__aeabi_dsub+0x506>
 8001650:	2b00      	cmp	r3, #0
 8001652:	d100      	bne.n	8001656 <__aeabi_dsub+0x2be>
 8001654:	e1c0      	b.n	80019d8 <__aeabi_dsub+0x640>
 8001656:	2900      	cmp	r1, #0
 8001658:	d100      	bne.n	800165c <__aeabi_dsub+0x2c4>
 800165a:	e0a1      	b.n	80017a0 <__aeabi_dsub+0x408>
 800165c:	1a83      	subs	r3, r0, r2
 800165e:	4698      	mov	r8, r3
 8001660:	465b      	mov	r3, fp
 8001662:	4540      	cmp	r0, r8
 8001664:	41ad      	sbcs	r5, r5
 8001666:	1ae3      	subs	r3, r4, r3
 8001668:	426d      	negs	r5, r5
 800166a:	1b5b      	subs	r3, r3, r5
 800166c:	2580      	movs	r5, #128	@ 0x80
 800166e:	042d      	lsls	r5, r5, #16
 8001670:	422b      	tst	r3, r5
 8001672:	d100      	bne.n	8001676 <__aeabi_dsub+0x2de>
 8001674:	e14b      	b.n	800190e <__aeabi_dsub+0x576>
 8001676:	465b      	mov	r3, fp
 8001678:	1a10      	subs	r0, r2, r0
 800167a:	4282      	cmp	r2, r0
 800167c:	4192      	sbcs	r2, r2
 800167e:	1b1c      	subs	r4, r3, r4
 8001680:	0007      	movs	r7, r0
 8001682:	2601      	movs	r6, #1
 8001684:	4663      	mov	r3, ip
 8001686:	4252      	negs	r2, r2
 8001688:	1aa4      	subs	r4, r4, r2
 800168a:	4327      	orrs	r7, r4
 800168c:	401e      	ands	r6, r3
 800168e:	2f00      	cmp	r7, #0
 8001690:	d100      	bne.n	8001694 <__aeabi_dsub+0x2fc>
 8001692:	e142      	b.n	800191a <__aeabi_dsub+0x582>
 8001694:	422c      	tst	r4, r5
 8001696:	d100      	bne.n	800169a <__aeabi_dsub+0x302>
 8001698:	e26d      	b.n	8001b76 <__aeabi_dsub+0x7de>
 800169a:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <__aeabi_dsub+0x368>)
 800169c:	2501      	movs	r5, #1
 800169e:	401c      	ands	r4, r3
 80016a0:	e71b      	b.n	80014da <__aeabi_dsub+0x142>
 80016a2:	42bd      	cmp	r5, r7
 80016a4:	d100      	bne.n	80016a8 <__aeabi_dsub+0x310>
 80016a6:	e13b      	b.n	8001920 <__aeabi_dsub+0x588>
 80016a8:	2701      	movs	r7, #1
 80016aa:	2b38      	cmp	r3, #56	@ 0x38
 80016ac:	dd00      	ble.n	80016b0 <__aeabi_dsub+0x318>
 80016ae:	e745      	b.n	800153c <__aeabi_dsub+0x1a4>
 80016b0:	2780      	movs	r7, #128	@ 0x80
 80016b2:	4659      	mov	r1, fp
 80016b4:	043f      	lsls	r7, r7, #16
 80016b6:	4339      	orrs	r1, r7
 80016b8:	468b      	mov	fp, r1
 80016ba:	e72a      	b.n	8001512 <__aeabi_dsub+0x17a>
 80016bc:	2400      	movs	r4, #0
 80016be:	2700      	movs	r7, #0
 80016c0:	052d      	lsls	r5, r5, #20
 80016c2:	4325      	orrs	r5, r4
 80016c4:	07f6      	lsls	r6, r6, #31
 80016c6:	4335      	orrs	r5, r6
 80016c8:	0038      	movs	r0, r7
 80016ca:	0029      	movs	r1, r5
 80016cc:	b003      	add	sp, #12
 80016ce:	bcf0      	pop	{r4, r5, r6, r7}
 80016d0:	46bb      	mov	fp, r7
 80016d2:	46b2      	mov	sl, r6
 80016d4:	46a9      	mov	r9, r5
 80016d6:	46a0      	mov	r8, r4
 80016d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016da:	077b      	lsls	r3, r7, #29
 80016dc:	d004      	beq.n	80016e8 <__aeabi_dsub+0x350>
 80016de:	230f      	movs	r3, #15
 80016e0:	403b      	ands	r3, r7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d000      	beq.n	80016e8 <__aeabi_dsub+0x350>
 80016e6:	e6e7      	b.n	80014b8 <__aeabi_dsub+0x120>
 80016e8:	002b      	movs	r3, r5
 80016ea:	08f8      	lsrs	r0, r7, #3
 80016ec:	4a03      	ldr	r2, [pc, #12]	@ (80016fc <__aeabi_dsub+0x364>)
 80016ee:	0767      	lsls	r7, r4, #29
 80016f0:	4307      	orrs	r7, r0
 80016f2:	08e5      	lsrs	r5, r4, #3
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d100      	bne.n	80016fa <__aeabi_dsub+0x362>
 80016f8:	e74a      	b.n	8001590 <__aeabi_dsub+0x1f8>
 80016fa:	e0a5      	b.n	8001848 <__aeabi_dsub+0x4b0>
 80016fc:	000007ff 	.word	0x000007ff
 8001700:	ff7fffff 	.word	0xff7fffff
 8001704:	fffff801 	.word	0xfffff801
 8001708:	000007fe 	.word	0x000007fe
 800170c:	0038      	movs	r0, r7
 800170e:	f000 fb69 	bl	8001de4 <__clzsi2>
 8001712:	0003      	movs	r3, r0
 8001714:	3318      	adds	r3, #24
 8001716:	2b1f      	cmp	r3, #31
 8001718:	dc00      	bgt.n	800171c <__aeabi_dsub+0x384>
 800171a:	e6a7      	b.n	800146c <__aeabi_dsub+0xd4>
 800171c:	003a      	movs	r2, r7
 800171e:	3808      	subs	r0, #8
 8001720:	4082      	lsls	r2, r0
 8001722:	429d      	cmp	r5, r3
 8001724:	dd00      	ble.n	8001728 <__aeabi_dsub+0x390>
 8001726:	e08a      	b.n	800183e <__aeabi_dsub+0x4a6>
 8001728:	1b5b      	subs	r3, r3, r5
 800172a:	1c58      	adds	r0, r3, #1
 800172c:	281f      	cmp	r0, #31
 800172e:	dc00      	bgt.n	8001732 <__aeabi_dsub+0x39a>
 8001730:	e1d8      	b.n	8001ae4 <__aeabi_dsub+0x74c>
 8001732:	0017      	movs	r7, r2
 8001734:	3b1f      	subs	r3, #31
 8001736:	40df      	lsrs	r7, r3
 8001738:	2820      	cmp	r0, #32
 800173a:	d005      	beq.n	8001748 <__aeabi_dsub+0x3b0>
 800173c:	2340      	movs	r3, #64	@ 0x40
 800173e:	1a1b      	subs	r3, r3, r0
 8001740:	409a      	lsls	r2, r3
 8001742:	1e53      	subs	r3, r2, #1
 8001744:	419a      	sbcs	r2, r3
 8001746:	4317      	orrs	r7, r2
 8001748:	2500      	movs	r5, #0
 800174a:	2f00      	cmp	r7, #0
 800174c:	d100      	bne.n	8001750 <__aeabi_dsub+0x3b8>
 800174e:	e0e5      	b.n	800191c <__aeabi_dsub+0x584>
 8001750:	077b      	lsls	r3, r7, #29
 8001752:	d000      	beq.n	8001756 <__aeabi_dsub+0x3be>
 8001754:	e6ab      	b.n	80014ae <__aeabi_dsub+0x116>
 8001756:	002c      	movs	r4, r5
 8001758:	e7c6      	b.n	80016e8 <__aeabi_dsub+0x350>
 800175a:	08c0      	lsrs	r0, r0, #3
 800175c:	e7c6      	b.n	80016ec <__aeabi_dsub+0x354>
 800175e:	2700      	movs	r7, #0
 8001760:	2400      	movs	r4, #0
 8001762:	4dd1      	ldr	r5, [pc, #836]	@ (8001aa8 <__aeabi_dsub+0x710>)
 8001764:	e7ac      	b.n	80016c0 <__aeabi_dsub+0x328>
 8001766:	4fd1      	ldr	r7, [pc, #836]	@ (8001aac <__aeabi_dsub+0x714>)
 8001768:	1c6b      	adds	r3, r5, #1
 800176a:	423b      	tst	r3, r7
 800176c:	d171      	bne.n	8001852 <__aeabi_dsub+0x4ba>
 800176e:	0023      	movs	r3, r4
 8001770:	4303      	orrs	r3, r0
 8001772:	2d00      	cmp	r5, #0
 8001774:	d000      	beq.n	8001778 <__aeabi_dsub+0x3e0>
 8001776:	e14e      	b.n	8001a16 <__aeabi_dsub+0x67e>
 8001778:	4657      	mov	r7, sl
 800177a:	2b00      	cmp	r3, #0
 800177c:	d100      	bne.n	8001780 <__aeabi_dsub+0x3e8>
 800177e:	e1b5      	b.n	8001aec <__aeabi_dsub+0x754>
 8001780:	2f00      	cmp	r7, #0
 8001782:	d00d      	beq.n	80017a0 <__aeabi_dsub+0x408>
 8001784:	1883      	adds	r3, r0, r2
 8001786:	4283      	cmp	r3, r0
 8001788:	4180      	sbcs	r0, r0
 800178a:	445c      	add	r4, fp
 800178c:	4240      	negs	r0, r0
 800178e:	1824      	adds	r4, r4, r0
 8001790:	0222      	lsls	r2, r4, #8
 8001792:	d500      	bpl.n	8001796 <__aeabi_dsub+0x3fe>
 8001794:	e1c8      	b.n	8001b28 <__aeabi_dsub+0x790>
 8001796:	001f      	movs	r7, r3
 8001798:	4698      	mov	r8, r3
 800179a:	4327      	orrs	r7, r4
 800179c:	d100      	bne.n	80017a0 <__aeabi_dsub+0x408>
 800179e:	e0bc      	b.n	800191a <__aeabi_dsub+0x582>
 80017a0:	4643      	mov	r3, r8
 80017a2:	0767      	lsls	r7, r4, #29
 80017a4:	08db      	lsrs	r3, r3, #3
 80017a6:	431f      	orrs	r7, r3
 80017a8:	08e5      	lsrs	r5, r4, #3
 80017aa:	2300      	movs	r3, #0
 80017ac:	e04c      	b.n	8001848 <__aeabi_dsub+0x4b0>
 80017ae:	1a83      	subs	r3, r0, r2
 80017b0:	4698      	mov	r8, r3
 80017b2:	465b      	mov	r3, fp
 80017b4:	4540      	cmp	r0, r8
 80017b6:	41bf      	sbcs	r7, r7
 80017b8:	1ae3      	subs	r3, r4, r3
 80017ba:	427f      	negs	r7, r7
 80017bc:	1bdb      	subs	r3, r3, r7
 80017be:	021f      	lsls	r7, r3, #8
 80017c0:	d47c      	bmi.n	80018bc <__aeabi_dsub+0x524>
 80017c2:	4647      	mov	r7, r8
 80017c4:	431f      	orrs	r7, r3
 80017c6:	d100      	bne.n	80017ca <__aeabi_dsub+0x432>
 80017c8:	e0a6      	b.n	8001918 <__aeabi_dsub+0x580>
 80017ca:	001c      	movs	r4, r3
 80017cc:	4647      	mov	r7, r8
 80017ce:	e645      	b.n	800145c <__aeabi_dsub+0xc4>
 80017d0:	4cb7      	ldr	r4, [pc, #732]	@ (8001ab0 <__aeabi_dsub+0x718>)
 80017d2:	1aed      	subs	r5, r5, r3
 80017d4:	4014      	ands	r4, r2
 80017d6:	077b      	lsls	r3, r7, #29
 80017d8:	d000      	beq.n	80017dc <__aeabi_dsub+0x444>
 80017da:	e780      	b.n	80016de <__aeabi_dsub+0x346>
 80017dc:	e784      	b.n	80016e8 <__aeabi_dsub+0x350>
 80017de:	464b      	mov	r3, r9
 80017e0:	0025      	movs	r5, r4
 80017e2:	4305      	orrs	r5, r0
 80017e4:	d066      	beq.n	80018b4 <__aeabi_dsub+0x51c>
 80017e6:	1e5f      	subs	r7, r3, #1
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d100      	bne.n	80017ee <__aeabi_dsub+0x456>
 80017ec:	e0fc      	b.n	80019e8 <__aeabi_dsub+0x650>
 80017ee:	4dae      	ldr	r5, [pc, #696]	@ (8001aa8 <__aeabi_dsub+0x710>)
 80017f0:	42ab      	cmp	r3, r5
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dsub+0x45e>
 80017f4:	e15e      	b.n	8001ab4 <__aeabi_dsub+0x71c>
 80017f6:	4666      	mov	r6, ip
 80017f8:	2f38      	cmp	r7, #56	@ 0x38
 80017fa:	dc00      	bgt.n	80017fe <__aeabi_dsub+0x466>
 80017fc:	e0b4      	b.n	8001968 <__aeabi_dsub+0x5d0>
 80017fe:	2001      	movs	r0, #1
 8001800:	1a17      	subs	r7, r2, r0
 8001802:	42ba      	cmp	r2, r7
 8001804:	4192      	sbcs	r2, r2
 8001806:	465b      	mov	r3, fp
 8001808:	4252      	negs	r2, r2
 800180a:	464d      	mov	r5, r9
 800180c:	1a9c      	subs	r4, r3, r2
 800180e:	e620      	b.n	8001452 <__aeabi_dsub+0xba>
 8001810:	0767      	lsls	r7, r4, #29
 8001812:	08c0      	lsrs	r0, r0, #3
 8001814:	4307      	orrs	r7, r0
 8001816:	08e5      	lsrs	r5, r4, #3
 8001818:	e6ba      	b.n	8001590 <__aeabi_dsub+0x1f8>
 800181a:	001f      	movs	r7, r3
 800181c:	4659      	mov	r1, fp
 800181e:	3f20      	subs	r7, #32
 8001820:	40f9      	lsrs	r1, r7
 8001822:	000f      	movs	r7, r1
 8001824:	2b20      	cmp	r3, #32
 8001826:	d005      	beq.n	8001834 <__aeabi_dsub+0x49c>
 8001828:	2140      	movs	r1, #64	@ 0x40
 800182a:	1acb      	subs	r3, r1, r3
 800182c:	4659      	mov	r1, fp
 800182e:	4099      	lsls	r1, r3
 8001830:	430a      	orrs	r2, r1
 8001832:	4692      	mov	sl, r2
 8001834:	4653      	mov	r3, sl
 8001836:	1e5a      	subs	r2, r3, #1
 8001838:	4193      	sbcs	r3, r2
 800183a:	431f      	orrs	r7, r3
 800183c:	e604      	b.n	8001448 <__aeabi_dsub+0xb0>
 800183e:	1aeb      	subs	r3, r5, r3
 8001840:	4d9b      	ldr	r5, [pc, #620]	@ (8001ab0 <__aeabi_dsub+0x718>)
 8001842:	4015      	ands	r5, r2
 8001844:	076f      	lsls	r7, r5, #29
 8001846:	08ed      	lsrs	r5, r5, #3
 8001848:	032c      	lsls	r4, r5, #12
 800184a:	055d      	lsls	r5, r3, #21
 800184c:	0b24      	lsrs	r4, r4, #12
 800184e:	0d6d      	lsrs	r5, r5, #21
 8001850:	e736      	b.n	80016c0 <__aeabi_dsub+0x328>
 8001852:	4d95      	ldr	r5, [pc, #596]	@ (8001aa8 <__aeabi_dsub+0x710>)
 8001854:	42ab      	cmp	r3, r5
 8001856:	d100      	bne.n	800185a <__aeabi_dsub+0x4c2>
 8001858:	e0d6      	b.n	8001a08 <__aeabi_dsub+0x670>
 800185a:	1882      	adds	r2, r0, r2
 800185c:	0021      	movs	r1, r4
 800185e:	4282      	cmp	r2, r0
 8001860:	4180      	sbcs	r0, r0
 8001862:	4459      	add	r1, fp
 8001864:	4240      	negs	r0, r0
 8001866:	1808      	adds	r0, r1, r0
 8001868:	07c7      	lsls	r7, r0, #31
 800186a:	0852      	lsrs	r2, r2, #1
 800186c:	4317      	orrs	r7, r2
 800186e:	0844      	lsrs	r4, r0, #1
 8001870:	0752      	lsls	r2, r2, #29
 8001872:	d400      	bmi.n	8001876 <__aeabi_dsub+0x4de>
 8001874:	e185      	b.n	8001b82 <__aeabi_dsub+0x7ea>
 8001876:	220f      	movs	r2, #15
 8001878:	001d      	movs	r5, r3
 800187a:	403a      	ands	r2, r7
 800187c:	2a04      	cmp	r2, #4
 800187e:	d000      	beq.n	8001882 <__aeabi_dsub+0x4ea>
 8001880:	e61a      	b.n	80014b8 <__aeabi_dsub+0x120>
 8001882:	08ff      	lsrs	r7, r7, #3
 8001884:	0764      	lsls	r4, r4, #29
 8001886:	4327      	orrs	r7, r4
 8001888:	0905      	lsrs	r5, r0, #4
 800188a:	e7dd      	b.n	8001848 <__aeabi_dsub+0x4b0>
 800188c:	465b      	mov	r3, fp
 800188e:	08d2      	lsrs	r2, r2, #3
 8001890:	075f      	lsls	r7, r3, #29
 8001892:	4317      	orrs	r7, r2
 8001894:	08dd      	lsrs	r5, r3, #3
 8001896:	e67b      	b.n	8001590 <__aeabi_dsub+0x1f8>
 8001898:	2700      	movs	r7, #0
 800189a:	2400      	movs	r4, #0
 800189c:	e710      	b.n	80016c0 <__aeabi_dsub+0x328>
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d000      	beq.n	80018a4 <__aeabi_dsub+0x50c>
 80018a2:	e0d6      	b.n	8001a52 <__aeabi_dsub+0x6ba>
 80018a4:	2900      	cmp	r1, #0
 80018a6:	d000      	beq.n	80018aa <__aeabi_dsub+0x512>
 80018a8:	e12f      	b.n	8001b0a <__aeabi_dsub+0x772>
 80018aa:	2480      	movs	r4, #128	@ 0x80
 80018ac:	2600      	movs	r6, #0
 80018ae:	4d7e      	ldr	r5, [pc, #504]	@ (8001aa8 <__aeabi_dsub+0x710>)
 80018b0:	0324      	lsls	r4, r4, #12
 80018b2:	e705      	b.n	80016c0 <__aeabi_dsub+0x328>
 80018b4:	4666      	mov	r6, ip
 80018b6:	465c      	mov	r4, fp
 80018b8:	08d0      	lsrs	r0, r2, #3
 80018ba:	e717      	b.n	80016ec <__aeabi_dsub+0x354>
 80018bc:	465b      	mov	r3, fp
 80018be:	1a17      	subs	r7, r2, r0
 80018c0:	42ba      	cmp	r2, r7
 80018c2:	4192      	sbcs	r2, r2
 80018c4:	1b1c      	subs	r4, r3, r4
 80018c6:	2601      	movs	r6, #1
 80018c8:	4663      	mov	r3, ip
 80018ca:	4252      	negs	r2, r2
 80018cc:	1aa4      	subs	r4, r4, r2
 80018ce:	401e      	ands	r6, r3
 80018d0:	e5c4      	b.n	800145c <__aeabi_dsub+0xc4>
 80018d2:	1883      	adds	r3, r0, r2
 80018d4:	4283      	cmp	r3, r0
 80018d6:	4180      	sbcs	r0, r0
 80018d8:	445c      	add	r4, fp
 80018da:	4240      	negs	r0, r0
 80018dc:	1825      	adds	r5, r4, r0
 80018de:	022a      	lsls	r2, r5, #8
 80018e0:	d400      	bmi.n	80018e4 <__aeabi_dsub+0x54c>
 80018e2:	e0da      	b.n	8001a9a <__aeabi_dsub+0x702>
 80018e4:	4a72      	ldr	r2, [pc, #456]	@ (8001ab0 <__aeabi_dsub+0x718>)
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	4015      	ands	r5, r2
 80018ea:	07ea      	lsls	r2, r5, #31
 80018ec:	431a      	orrs	r2, r3
 80018ee:	0869      	lsrs	r1, r5, #1
 80018f0:	075b      	lsls	r3, r3, #29
 80018f2:	d400      	bmi.n	80018f6 <__aeabi_dsub+0x55e>
 80018f4:	e14a      	b.n	8001b8c <__aeabi_dsub+0x7f4>
 80018f6:	230f      	movs	r3, #15
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d100      	bne.n	8001900 <__aeabi_dsub+0x568>
 80018fe:	e0fc      	b.n	8001afa <__aeabi_dsub+0x762>
 8001900:	1d17      	adds	r7, r2, #4
 8001902:	4297      	cmp	r7, r2
 8001904:	41a4      	sbcs	r4, r4
 8001906:	4264      	negs	r4, r4
 8001908:	2502      	movs	r5, #2
 800190a:	1864      	adds	r4, r4, r1
 800190c:	e6ec      	b.n	80016e8 <__aeabi_dsub+0x350>
 800190e:	4647      	mov	r7, r8
 8001910:	001c      	movs	r4, r3
 8001912:	431f      	orrs	r7, r3
 8001914:	d000      	beq.n	8001918 <__aeabi_dsub+0x580>
 8001916:	e743      	b.n	80017a0 <__aeabi_dsub+0x408>
 8001918:	2600      	movs	r6, #0
 800191a:	2500      	movs	r5, #0
 800191c:	2400      	movs	r4, #0
 800191e:	e6cf      	b.n	80016c0 <__aeabi_dsub+0x328>
 8001920:	08c0      	lsrs	r0, r0, #3
 8001922:	0767      	lsls	r7, r4, #29
 8001924:	4307      	orrs	r7, r0
 8001926:	08e5      	lsrs	r5, r4, #3
 8001928:	e632      	b.n	8001590 <__aeabi_dsub+0x1f8>
 800192a:	1a87      	subs	r7, r0, r2
 800192c:	465b      	mov	r3, fp
 800192e:	42b8      	cmp	r0, r7
 8001930:	4180      	sbcs	r0, r0
 8001932:	1ae4      	subs	r4, r4, r3
 8001934:	4240      	negs	r0, r0
 8001936:	1a24      	subs	r4, r4, r0
 8001938:	0223      	lsls	r3, r4, #8
 800193a:	d428      	bmi.n	800198e <__aeabi_dsub+0x5f6>
 800193c:	0763      	lsls	r3, r4, #29
 800193e:	08ff      	lsrs	r7, r7, #3
 8001940:	431f      	orrs	r7, r3
 8001942:	08e5      	lsrs	r5, r4, #3
 8001944:	2301      	movs	r3, #1
 8001946:	e77f      	b.n	8001848 <__aeabi_dsub+0x4b0>
 8001948:	2b00      	cmp	r3, #0
 800194a:	d100      	bne.n	800194e <__aeabi_dsub+0x5b6>
 800194c:	e673      	b.n	8001636 <__aeabi_dsub+0x29e>
 800194e:	464b      	mov	r3, r9
 8001950:	1b5f      	subs	r7, r3, r5
 8001952:	003b      	movs	r3, r7
 8001954:	2d00      	cmp	r5, #0
 8001956:	d100      	bne.n	800195a <__aeabi_dsub+0x5c2>
 8001958:	e742      	b.n	80017e0 <__aeabi_dsub+0x448>
 800195a:	2f38      	cmp	r7, #56	@ 0x38
 800195c:	dd00      	ble.n	8001960 <__aeabi_dsub+0x5c8>
 800195e:	e0ec      	b.n	8001b3a <__aeabi_dsub+0x7a2>
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	000e      	movs	r6, r1
 8001964:	041b      	lsls	r3, r3, #16
 8001966:	431c      	orrs	r4, r3
 8001968:	2f1f      	cmp	r7, #31
 800196a:	dc25      	bgt.n	80019b8 <__aeabi_dsub+0x620>
 800196c:	2520      	movs	r5, #32
 800196e:	0023      	movs	r3, r4
 8001970:	1bed      	subs	r5, r5, r7
 8001972:	0001      	movs	r1, r0
 8001974:	40a8      	lsls	r0, r5
 8001976:	40ab      	lsls	r3, r5
 8001978:	40f9      	lsrs	r1, r7
 800197a:	1e45      	subs	r5, r0, #1
 800197c:	41a8      	sbcs	r0, r5
 800197e:	430b      	orrs	r3, r1
 8001980:	40fc      	lsrs	r4, r7
 8001982:	4318      	orrs	r0, r3
 8001984:	465b      	mov	r3, fp
 8001986:	1b1b      	subs	r3, r3, r4
 8001988:	469b      	mov	fp, r3
 800198a:	e739      	b.n	8001800 <__aeabi_dsub+0x468>
 800198c:	4666      	mov	r6, ip
 800198e:	2501      	movs	r5, #1
 8001990:	e562      	b.n	8001458 <__aeabi_dsub+0xc0>
 8001992:	001f      	movs	r7, r3
 8001994:	4659      	mov	r1, fp
 8001996:	3f20      	subs	r7, #32
 8001998:	40f9      	lsrs	r1, r7
 800199a:	468c      	mov	ip, r1
 800199c:	2b20      	cmp	r3, #32
 800199e:	d005      	beq.n	80019ac <__aeabi_dsub+0x614>
 80019a0:	2740      	movs	r7, #64	@ 0x40
 80019a2:	4659      	mov	r1, fp
 80019a4:	1afb      	subs	r3, r7, r3
 80019a6:	4099      	lsls	r1, r3
 80019a8:	430a      	orrs	r2, r1
 80019aa:	4692      	mov	sl, r2
 80019ac:	4657      	mov	r7, sl
 80019ae:	1e7b      	subs	r3, r7, #1
 80019b0:	419f      	sbcs	r7, r3
 80019b2:	4663      	mov	r3, ip
 80019b4:	431f      	orrs	r7, r3
 80019b6:	e5c1      	b.n	800153c <__aeabi_dsub+0x1a4>
 80019b8:	003b      	movs	r3, r7
 80019ba:	0025      	movs	r5, r4
 80019bc:	3b20      	subs	r3, #32
 80019be:	40dd      	lsrs	r5, r3
 80019c0:	2f20      	cmp	r7, #32
 80019c2:	d004      	beq.n	80019ce <__aeabi_dsub+0x636>
 80019c4:	2340      	movs	r3, #64	@ 0x40
 80019c6:	1bdb      	subs	r3, r3, r7
 80019c8:	409c      	lsls	r4, r3
 80019ca:	4320      	orrs	r0, r4
 80019cc:	4680      	mov	r8, r0
 80019ce:	4640      	mov	r0, r8
 80019d0:	1e43      	subs	r3, r0, #1
 80019d2:	4198      	sbcs	r0, r3
 80019d4:	4328      	orrs	r0, r5
 80019d6:	e713      	b.n	8001800 <__aeabi_dsub+0x468>
 80019d8:	2900      	cmp	r1, #0
 80019da:	d09d      	beq.n	8001918 <__aeabi_dsub+0x580>
 80019dc:	2601      	movs	r6, #1
 80019de:	4663      	mov	r3, ip
 80019e0:	465c      	mov	r4, fp
 80019e2:	4690      	mov	r8, r2
 80019e4:	401e      	ands	r6, r3
 80019e6:	e6db      	b.n	80017a0 <__aeabi_dsub+0x408>
 80019e8:	1a17      	subs	r7, r2, r0
 80019ea:	465b      	mov	r3, fp
 80019ec:	42ba      	cmp	r2, r7
 80019ee:	4192      	sbcs	r2, r2
 80019f0:	1b1c      	subs	r4, r3, r4
 80019f2:	4252      	negs	r2, r2
 80019f4:	1aa4      	subs	r4, r4, r2
 80019f6:	0223      	lsls	r3, r4, #8
 80019f8:	d4c8      	bmi.n	800198c <__aeabi_dsub+0x5f4>
 80019fa:	0763      	lsls	r3, r4, #29
 80019fc:	08ff      	lsrs	r7, r7, #3
 80019fe:	431f      	orrs	r7, r3
 8001a00:	4666      	mov	r6, ip
 8001a02:	2301      	movs	r3, #1
 8001a04:	08e5      	lsrs	r5, r4, #3
 8001a06:	e71f      	b.n	8001848 <__aeabi_dsub+0x4b0>
 8001a08:	001d      	movs	r5, r3
 8001a0a:	2400      	movs	r4, #0
 8001a0c:	2700      	movs	r7, #0
 8001a0e:	e657      	b.n	80016c0 <__aeabi_dsub+0x328>
 8001a10:	465c      	mov	r4, fp
 8001a12:	08d0      	lsrs	r0, r2, #3
 8001a14:	e66a      	b.n	80016ec <__aeabi_dsub+0x354>
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dsub+0x684>
 8001a1a:	e737      	b.n	800188c <__aeabi_dsub+0x4f4>
 8001a1c:	4653      	mov	r3, sl
 8001a1e:	08c0      	lsrs	r0, r0, #3
 8001a20:	0767      	lsls	r7, r4, #29
 8001a22:	4307      	orrs	r7, r0
 8001a24:	08e5      	lsrs	r5, r4, #3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dsub+0x694>
 8001a2a:	e5b1      	b.n	8001590 <__aeabi_dsub+0x1f8>
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	031b      	lsls	r3, r3, #12
 8001a30:	421d      	tst	r5, r3
 8001a32:	d008      	beq.n	8001a46 <__aeabi_dsub+0x6ae>
 8001a34:	4659      	mov	r1, fp
 8001a36:	08c8      	lsrs	r0, r1, #3
 8001a38:	4218      	tst	r0, r3
 8001a3a:	d104      	bne.n	8001a46 <__aeabi_dsub+0x6ae>
 8001a3c:	08d2      	lsrs	r2, r2, #3
 8001a3e:	0749      	lsls	r1, r1, #29
 8001a40:	430a      	orrs	r2, r1
 8001a42:	0017      	movs	r7, r2
 8001a44:	0005      	movs	r5, r0
 8001a46:	0f7b      	lsrs	r3, r7, #29
 8001a48:	00ff      	lsls	r7, r7, #3
 8001a4a:	08ff      	lsrs	r7, r7, #3
 8001a4c:	075b      	lsls	r3, r3, #29
 8001a4e:	431f      	orrs	r7, r3
 8001a50:	e59e      	b.n	8001590 <__aeabi_dsub+0x1f8>
 8001a52:	08c0      	lsrs	r0, r0, #3
 8001a54:	0763      	lsls	r3, r4, #29
 8001a56:	4318      	orrs	r0, r3
 8001a58:	08e5      	lsrs	r5, r4, #3
 8001a5a:	2900      	cmp	r1, #0
 8001a5c:	d053      	beq.n	8001b06 <__aeabi_dsub+0x76e>
 8001a5e:	2380      	movs	r3, #128	@ 0x80
 8001a60:	031b      	lsls	r3, r3, #12
 8001a62:	421d      	tst	r5, r3
 8001a64:	d00a      	beq.n	8001a7c <__aeabi_dsub+0x6e4>
 8001a66:	4659      	mov	r1, fp
 8001a68:	08cc      	lsrs	r4, r1, #3
 8001a6a:	421c      	tst	r4, r3
 8001a6c:	d106      	bne.n	8001a7c <__aeabi_dsub+0x6e4>
 8001a6e:	2601      	movs	r6, #1
 8001a70:	4663      	mov	r3, ip
 8001a72:	0025      	movs	r5, r4
 8001a74:	08d0      	lsrs	r0, r2, #3
 8001a76:	0749      	lsls	r1, r1, #29
 8001a78:	4308      	orrs	r0, r1
 8001a7a:	401e      	ands	r6, r3
 8001a7c:	0f47      	lsrs	r7, r0, #29
 8001a7e:	00c0      	lsls	r0, r0, #3
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	077f      	lsls	r7, r7, #29
 8001a84:	4307      	orrs	r7, r0
 8001a86:	e583      	b.n	8001590 <__aeabi_dsub+0x1f8>
 8001a88:	1883      	adds	r3, r0, r2
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	4192      	sbcs	r2, r2
 8001a8e:	445c      	add	r4, fp
 8001a90:	4252      	negs	r2, r2
 8001a92:	18a5      	adds	r5, r4, r2
 8001a94:	022a      	lsls	r2, r5, #8
 8001a96:	d500      	bpl.n	8001a9a <__aeabi_dsub+0x702>
 8001a98:	e724      	b.n	80018e4 <__aeabi_dsub+0x54c>
 8001a9a:	076f      	lsls	r7, r5, #29
 8001a9c:	08db      	lsrs	r3, r3, #3
 8001a9e:	431f      	orrs	r7, r3
 8001aa0:	08ed      	lsrs	r5, r5, #3
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e6d0      	b.n	8001848 <__aeabi_dsub+0x4b0>
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	000007ff 	.word	0x000007ff
 8001aac:	000007fe 	.word	0x000007fe
 8001ab0:	ff7fffff 	.word	0xff7fffff
 8001ab4:	465b      	mov	r3, fp
 8001ab6:	08d2      	lsrs	r2, r2, #3
 8001ab8:	075f      	lsls	r7, r3, #29
 8001aba:	4666      	mov	r6, ip
 8001abc:	4317      	orrs	r7, r2
 8001abe:	08dd      	lsrs	r5, r3, #3
 8001ac0:	e566      	b.n	8001590 <__aeabi_dsub+0x1f8>
 8001ac2:	0025      	movs	r5, r4
 8001ac4:	3b20      	subs	r3, #32
 8001ac6:	40dd      	lsrs	r5, r3
 8001ac8:	4663      	mov	r3, ip
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d005      	beq.n	8001ada <__aeabi_dsub+0x742>
 8001ace:	2340      	movs	r3, #64	@ 0x40
 8001ad0:	4661      	mov	r1, ip
 8001ad2:	1a5b      	subs	r3, r3, r1
 8001ad4:	409c      	lsls	r4, r3
 8001ad6:	4320      	orrs	r0, r4
 8001ad8:	4680      	mov	r8, r0
 8001ada:	4647      	mov	r7, r8
 8001adc:	1e7b      	subs	r3, r7, #1
 8001ade:	419f      	sbcs	r7, r3
 8001ae0:	432f      	orrs	r7, r5
 8001ae2:	e5a0      	b.n	8001626 <__aeabi_dsub+0x28e>
 8001ae4:	2120      	movs	r1, #32
 8001ae6:	2700      	movs	r7, #0
 8001ae8:	1a09      	subs	r1, r1, r0
 8001aea:	e4d2      	b.n	8001492 <__aeabi_dsub+0xfa>
 8001aec:	2f00      	cmp	r7, #0
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dsub+0x75a>
 8001af0:	e713      	b.n	800191a <__aeabi_dsub+0x582>
 8001af2:	465c      	mov	r4, fp
 8001af4:	0017      	movs	r7, r2
 8001af6:	2500      	movs	r5, #0
 8001af8:	e5f6      	b.n	80016e8 <__aeabi_dsub+0x350>
 8001afa:	08d7      	lsrs	r7, r2, #3
 8001afc:	0749      	lsls	r1, r1, #29
 8001afe:	2302      	movs	r3, #2
 8001b00:	430f      	orrs	r7, r1
 8001b02:	092d      	lsrs	r5, r5, #4
 8001b04:	e6a0      	b.n	8001848 <__aeabi_dsub+0x4b0>
 8001b06:	0007      	movs	r7, r0
 8001b08:	e542      	b.n	8001590 <__aeabi_dsub+0x1f8>
 8001b0a:	465b      	mov	r3, fp
 8001b0c:	2601      	movs	r6, #1
 8001b0e:	075f      	lsls	r7, r3, #29
 8001b10:	08dd      	lsrs	r5, r3, #3
 8001b12:	4663      	mov	r3, ip
 8001b14:	08d2      	lsrs	r2, r2, #3
 8001b16:	4317      	orrs	r7, r2
 8001b18:	401e      	ands	r6, r3
 8001b1a:	e539      	b.n	8001590 <__aeabi_dsub+0x1f8>
 8001b1c:	465b      	mov	r3, fp
 8001b1e:	08d2      	lsrs	r2, r2, #3
 8001b20:	075f      	lsls	r7, r3, #29
 8001b22:	4317      	orrs	r7, r2
 8001b24:	08dd      	lsrs	r5, r3, #3
 8001b26:	e533      	b.n	8001590 <__aeabi_dsub+0x1f8>
 8001b28:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba4 <__aeabi_dsub+0x80c>)
 8001b2a:	08db      	lsrs	r3, r3, #3
 8001b2c:	4022      	ands	r2, r4
 8001b2e:	0757      	lsls	r7, r2, #29
 8001b30:	0252      	lsls	r2, r2, #9
 8001b32:	2501      	movs	r5, #1
 8001b34:	431f      	orrs	r7, r3
 8001b36:	0b14      	lsrs	r4, r2, #12
 8001b38:	e5c2      	b.n	80016c0 <__aeabi_dsub+0x328>
 8001b3a:	000e      	movs	r6, r1
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	e65f      	b.n	8001800 <__aeabi_dsub+0x468>
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00d      	beq.n	8001b60 <__aeabi_dsub+0x7c8>
 8001b44:	464b      	mov	r3, r9
 8001b46:	1b5b      	subs	r3, r3, r5
 8001b48:	469c      	mov	ip, r3
 8001b4a:	2d00      	cmp	r5, #0
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_dsub+0x7b8>
 8001b4e:	e548      	b.n	80015e2 <__aeabi_dsub+0x24a>
 8001b50:	2701      	movs	r7, #1
 8001b52:	2b38      	cmp	r3, #56	@ 0x38
 8001b54:	dd00      	ble.n	8001b58 <__aeabi_dsub+0x7c0>
 8001b56:	e566      	b.n	8001626 <__aeabi_dsub+0x28e>
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	041b      	lsls	r3, r3, #16
 8001b5c:	431c      	orrs	r4, r3
 8001b5e:	e550      	b.n	8001602 <__aeabi_dsub+0x26a>
 8001b60:	1c6b      	adds	r3, r5, #1
 8001b62:	4d11      	ldr	r5, [pc, #68]	@ (8001ba8 <__aeabi_dsub+0x810>)
 8001b64:	422b      	tst	r3, r5
 8001b66:	d000      	beq.n	8001b6a <__aeabi_dsub+0x7d2>
 8001b68:	e673      	b.n	8001852 <__aeabi_dsub+0x4ba>
 8001b6a:	4659      	mov	r1, fp
 8001b6c:	0023      	movs	r3, r4
 8001b6e:	4311      	orrs	r1, r2
 8001b70:	468a      	mov	sl, r1
 8001b72:	4303      	orrs	r3, r0
 8001b74:	e600      	b.n	8001778 <__aeabi_dsub+0x3e0>
 8001b76:	0767      	lsls	r7, r4, #29
 8001b78:	08c0      	lsrs	r0, r0, #3
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	4307      	orrs	r7, r0
 8001b7e:	08e5      	lsrs	r5, r4, #3
 8001b80:	e662      	b.n	8001848 <__aeabi_dsub+0x4b0>
 8001b82:	0764      	lsls	r4, r4, #29
 8001b84:	08ff      	lsrs	r7, r7, #3
 8001b86:	4327      	orrs	r7, r4
 8001b88:	0905      	lsrs	r5, r0, #4
 8001b8a:	e65d      	b.n	8001848 <__aeabi_dsub+0x4b0>
 8001b8c:	08d2      	lsrs	r2, r2, #3
 8001b8e:	0749      	lsls	r1, r1, #29
 8001b90:	4311      	orrs	r1, r2
 8001b92:	000f      	movs	r7, r1
 8001b94:	2302      	movs	r3, #2
 8001b96:	092d      	lsrs	r5, r5, #4
 8001b98:	e656      	b.n	8001848 <__aeabi_dsub+0x4b0>
 8001b9a:	0007      	movs	r7, r0
 8001b9c:	e5a4      	b.n	80016e8 <__aeabi_dsub+0x350>
 8001b9e:	0038      	movs	r0, r7
 8001ba0:	e48f      	b.n	80014c2 <__aeabi_dsub+0x12a>
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	ff7fffff 	.word	0xff7fffff
 8001ba8:	000007fe 	.word	0x000007fe

08001bac <__aeabi_i2d>:
 8001bac:	b570      	push	{r4, r5, r6, lr}
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	d016      	beq.n	8001be0 <__aeabi_i2d+0x34>
 8001bb2:	17c3      	asrs	r3, r0, #31
 8001bb4:	18c5      	adds	r5, r0, r3
 8001bb6:	405d      	eors	r5, r3
 8001bb8:	0fc4      	lsrs	r4, r0, #31
 8001bba:	0028      	movs	r0, r5
 8001bbc:	f000 f912 	bl	8001de4 <__clzsi2>
 8001bc0:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <__aeabi_i2d+0x58>)
 8001bc2:	1a1b      	subs	r3, r3, r0
 8001bc4:	055b      	lsls	r3, r3, #21
 8001bc6:	0d5b      	lsrs	r3, r3, #21
 8001bc8:	280a      	cmp	r0, #10
 8001bca:	dc14      	bgt.n	8001bf6 <__aeabi_i2d+0x4a>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	002e      	movs	r6, r5
 8001bd0:	3215      	adds	r2, #21
 8001bd2:	4096      	lsls	r6, r2
 8001bd4:	220b      	movs	r2, #11
 8001bd6:	1a12      	subs	r2, r2, r0
 8001bd8:	40d5      	lsrs	r5, r2
 8001bda:	032d      	lsls	r5, r5, #12
 8001bdc:	0b2d      	lsrs	r5, r5, #12
 8001bde:	e003      	b.n	8001be8 <__aeabi_i2d+0x3c>
 8001be0:	2400      	movs	r4, #0
 8001be2:	2300      	movs	r3, #0
 8001be4:	2500      	movs	r5, #0
 8001be6:	2600      	movs	r6, #0
 8001be8:	051b      	lsls	r3, r3, #20
 8001bea:	432b      	orrs	r3, r5
 8001bec:	07e4      	lsls	r4, r4, #31
 8001bee:	4323      	orrs	r3, r4
 8001bf0:	0030      	movs	r0, r6
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	bd70      	pop	{r4, r5, r6, pc}
 8001bf6:	380b      	subs	r0, #11
 8001bf8:	4085      	lsls	r5, r0
 8001bfa:	032d      	lsls	r5, r5, #12
 8001bfc:	2600      	movs	r6, #0
 8001bfe:	0b2d      	lsrs	r5, r5, #12
 8001c00:	e7f2      	b.n	8001be8 <__aeabi_i2d+0x3c>
 8001c02:	46c0      	nop			@ (mov r8, r8)
 8001c04:	0000041e 	.word	0x0000041e

08001c08 <__aeabi_ui2d>:
 8001c08:	b510      	push	{r4, lr}
 8001c0a:	1e04      	subs	r4, r0, #0
 8001c0c:	d010      	beq.n	8001c30 <__aeabi_ui2d+0x28>
 8001c0e:	f000 f8e9 	bl	8001de4 <__clzsi2>
 8001c12:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <__aeabi_ui2d+0x44>)
 8001c14:	1a1b      	subs	r3, r3, r0
 8001c16:	055b      	lsls	r3, r3, #21
 8001c18:	0d5b      	lsrs	r3, r3, #21
 8001c1a:	280a      	cmp	r0, #10
 8001c1c:	dc0f      	bgt.n	8001c3e <__aeabi_ui2d+0x36>
 8001c1e:	220b      	movs	r2, #11
 8001c20:	0021      	movs	r1, r4
 8001c22:	1a12      	subs	r2, r2, r0
 8001c24:	40d1      	lsrs	r1, r2
 8001c26:	3015      	adds	r0, #21
 8001c28:	030a      	lsls	r2, r1, #12
 8001c2a:	4084      	lsls	r4, r0
 8001c2c:	0b12      	lsrs	r2, r2, #12
 8001c2e:	e001      	b.n	8001c34 <__aeabi_ui2d+0x2c>
 8001c30:	2300      	movs	r3, #0
 8001c32:	2200      	movs	r2, #0
 8001c34:	051b      	lsls	r3, r3, #20
 8001c36:	4313      	orrs	r3, r2
 8001c38:	0020      	movs	r0, r4
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	bd10      	pop	{r4, pc}
 8001c3e:	0022      	movs	r2, r4
 8001c40:	380b      	subs	r0, #11
 8001c42:	4082      	lsls	r2, r0
 8001c44:	0312      	lsls	r2, r2, #12
 8001c46:	2400      	movs	r4, #0
 8001c48:	0b12      	lsrs	r2, r2, #12
 8001c4a:	e7f3      	b.n	8001c34 <__aeabi_ui2d+0x2c>
 8001c4c:	0000041e 	.word	0x0000041e

08001c50 <__aeabi_f2d>:
 8001c50:	b570      	push	{r4, r5, r6, lr}
 8001c52:	0242      	lsls	r2, r0, #9
 8001c54:	0043      	lsls	r3, r0, #1
 8001c56:	0fc4      	lsrs	r4, r0, #31
 8001c58:	20fe      	movs	r0, #254	@ 0xfe
 8001c5a:	0e1b      	lsrs	r3, r3, #24
 8001c5c:	1c59      	adds	r1, r3, #1
 8001c5e:	0a55      	lsrs	r5, r2, #9
 8001c60:	4208      	tst	r0, r1
 8001c62:	d00c      	beq.n	8001c7e <__aeabi_f2d+0x2e>
 8001c64:	21e0      	movs	r1, #224	@ 0xe0
 8001c66:	0089      	lsls	r1, r1, #2
 8001c68:	468c      	mov	ip, r1
 8001c6a:	076d      	lsls	r5, r5, #29
 8001c6c:	0b12      	lsrs	r2, r2, #12
 8001c6e:	4463      	add	r3, ip
 8001c70:	051b      	lsls	r3, r3, #20
 8001c72:	4313      	orrs	r3, r2
 8001c74:	07e4      	lsls	r4, r4, #31
 8001c76:	4323      	orrs	r3, r4
 8001c78:	0028      	movs	r0, r5
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	bd70      	pop	{r4, r5, r6, pc}
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d114      	bne.n	8001cac <__aeabi_f2d+0x5c>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d01b      	beq.n	8001cbe <__aeabi_f2d+0x6e>
 8001c86:	0028      	movs	r0, r5
 8001c88:	f000 f8ac 	bl	8001de4 <__clzsi2>
 8001c8c:	280a      	cmp	r0, #10
 8001c8e:	dc1c      	bgt.n	8001cca <__aeabi_f2d+0x7a>
 8001c90:	230b      	movs	r3, #11
 8001c92:	002a      	movs	r2, r5
 8001c94:	1a1b      	subs	r3, r3, r0
 8001c96:	40da      	lsrs	r2, r3
 8001c98:	0003      	movs	r3, r0
 8001c9a:	3315      	adds	r3, #21
 8001c9c:	409d      	lsls	r5, r3
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <__aeabi_f2d+0x88>)
 8001ca0:	0312      	lsls	r2, r2, #12
 8001ca2:	1a1b      	subs	r3, r3, r0
 8001ca4:	055b      	lsls	r3, r3, #21
 8001ca6:	0b12      	lsrs	r2, r2, #12
 8001ca8:	0d5b      	lsrs	r3, r3, #21
 8001caa:	e7e1      	b.n	8001c70 <__aeabi_f2d+0x20>
 8001cac:	2d00      	cmp	r5, #0
 8001cae:	d009      	beq.n	8001cc4 <__aeabi_f2d+0x74>
 8001cb0:	0b13      	lsrs	r3, r2, #12
 8001cb2:	2280      	movs	r2, #128	@ 0x80
 8001cb4:	0312      	lsls	r2, r2, #12
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	076d      	lsls	r5, r5, #29
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <__aeabi_f2d+0x8c>)
 8001cbc:	e7d8      	b.n	8001c70 <__aeabi_f2d+0x20>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	e7d5      	b.n	8001c70 <__aeabi_f2d+0x20>
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <__aeabi_f2d+0x8c>)
 8001cc8:	e7d2      	b.n	8001c70 <__aeabi_f2d+0x20>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	002a      	movs	r2, r5
 8001cce:	3b0b      	subs	r3, #11
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	2500      	movs	r5, #0
 8001cd4:	e7e3      	b.n	8001c9e <__aeabi_f2d+0x4e>
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	00000389 	.word	0x00000389
 8001cdc:	000007ff 	.word	0x000007ff

08001ce0 <__aeabi_d2f>:
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	004b      	lsls	r3, r1, #1
 8001ce4:	030f      	lsls	r7, r1, #12
 8001ce6:	0d5b      	lsrs	r3, r3, #21
 8001ce8:	4c3a      	ldr	r4, [pc, #232]	@ (8001dd4 <__aeabi_d2f+0xf4>)
 8001cea:	0f45      	lsrs	r5, r0, #29
 8001cec:	b083      	sub	sp, #12
 8001cee:	0a7f      	lsrs	r7, r7, #9
 8001cf0:	1c5e      	adds	r6, r3, #1
 8001cf2:	432f      	orrs	r7, r5
 8001cf4:	9000      	str	r0, [sp, #0]
 8001cf6:	9101      	str	r1, [sp, #4]
 8001cf8:	0fca      	lsrs	r2, r1, #31
 8001cfa:	00c5      	lsls	r5, r0, #3
 8001cfc:	4226      	tst	r6, r4
 8001cfe:	d00b      	beq.n	8001d18 <__aeabi_d2f+0x38>
 8001d00:	4935      	ldr	r1, [pc, #212]	@ (8001dd8 <__aeabi_d2f+0xf8>)
 8001d02:	185c      	adds	r4, r3, r1
 8001d04:	2cfe      	cmp	r4, #254	@ 0xfe
 8001d06:	dd13      	ble.n	8001d30 <__aeabi_d2f+0x50>
 8001d08:	20ff      	movs	r0, #255	@ 0xff
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	05c0      	lsls	r0, r0, #23
 8001d0e:	4318      	orrs	r0, r3
 8001d10:	07d2      	lsls	r2, r2, #31
 8001d12:	4310      	orrs	r0, r2
 8001d14:	b003      	add	sp, #12
 8001d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d18:	433d      	orrs	r5, r7
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <__aeabi_d2f+0x42>
 8001d1e:	2000      	movs	r0, #0
 8001d20:	e7f4      	b.n	8001d0c <__aeabi_d2f+0x2c>
 8001d22:	2d00      	cmp	r5, #0
 8001d24:	d0f0      	beq.n	8001d08 <__aeabi_d2f+0x28>
 8001d26:	2380      	movs	r3, #128	@ 0x80
 8001d28:	03db      	lsls	r3, r3, #15
 8001d2a:	20ff      	movs	r0, #255	@ 0xff
 8001d2c:	433b      	orrs	r3, r7
 8001d2e:	e7ed      	b.n	8001d0c <__aeabi_d2f+0x2c>
 8001d30:	2c00      	cmp	r4, #0
 8001d32:	dd0c      	ble.n	8001d4e <__aeabi_d2f+0x6e>
 8001d34:	9b00      	ldr	r3, [sp, #0]
 8001d36:	00ff      	lsls	r7, r7, #3
 8001d38:	019b      	lsls	r3, r3, #6
 8001d3a:	1e58      	subs	r0, r3, #1
 8001d3c:	4183      	sbcs	r3, r0
 8001d3e:	0f69      	lsrs	r1, r5, #29
 8001d40:	433b      	orrs	r3, r7
 8001d42:	430b      	orrs	r3, r1
 8001d44:	0759      	lsls	r1, r3, #29
 8001d46:	d127      	bne.n	8001d98 <__aeabi_d2f+0xb8>
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	b2e0      	uxtb	r0, r4
 8001d4c:	e7de      	b.n	8001d0c <__aeabi_d2f+0x2c>
 8001d4e:	0021      	movs	r1, r4
 8001d50:	3117      	adds	r1, #23
 8001d52:	db31      	blt.n	8001db8 <__aeabi_d2f+0xd8>
 8001d54:	2180      	movs	r1, #128	@ 0x80
 8001d56:	201e      	movs	r0, #30
 8001d58:	0409      	lsls	r1, r1, #16
 8001d5a:	4339      	orrs	r1, r7
 8001d5c:	1b00      	subs	r0, r0, r4
 8001d5e:	281f      	cmp	r0, #31
 8001d60:	dd2d      	ble.n	8001dbe <__aeabi_d2f+0xde>
 8001d62:	2602      	movs	r6, #2
 8001d64:	4276      	negs	r6, r6
 8001d66:	1b34      	subs	r4, r6, r4
 8001d68:	000e      	movs	r6, r1
 8001d6a:	40e6      	lsrs	r6, r4
 8001d6c:	0034      	movs	r4, r6
 8001d6e:	2820      	cmp	r0, #32
 8001d70:	d004      	beq.n	8001d7c <__aeabi_d2f+0x9c>
 8001d72:	481a      	ldr	r0, [pc, #104]	@ (8001ddc <__aeabi_d2f+0xfc>)
 8001d74:	4684      	mov	ip, r0
 8001d76:	4463      	add	r3, ip
 8001d78:	4099      	lsls	r1, r3
 8001d7a:	430d      	orrs	r5, r1
 8001d7c:	002b      	movs	r3, r5
 8001d7e:	1e59      	subs	r1, r3, #1
 8001d80:	418b      	sbcs	r3, r1
 8001d82:	4323      	orrs	r3, r4
 8001d84:	0759      	lsls	r1, r3, #29
 8001d86:	d003      	beq.n	8001d90 <__aeabi_d2f+0xb0>
 8001d88:	210f      	movs	r1, #15
 8001d8a:	4019      	ands	r1, r3
 8001d8c:	2904      	cmp	r1, #4
 8001d8e:	d10b      	bne.n	8001da8 <__aeabi_d2f+0xc8>
 8001d90:	019b      	lsls	r3, r3, #6
 8001d92:	2000      	movs	r0, #0
 8001d94:	0a5b      	lsrs	r3, r3, #9
 8001d96:	e7b9      	b.n	8001d0c <__aeabi_d2f+0x2c>
 8001d98:	210f      	movs	r1, #15
 8001d9a:	4019      	ands	r1, r3
 8001d9c:	2904      	cmp	r1, #4
 8001d9e:	d104      	bne.n	8001daa <__aeabi_d2f+0xca>
 8001da0:	019b      	lsls	r3, r3, #6
 8001da2:	0a5b      	lsrs	r3, r3, #9
 8001da4:	b2e0      	uxtb	r0, r4
 8001da6:	e7b1      	b.n	8001d0c <__aeabi_d2f+0x2c>
 8001da8:	2400      	movs	r4, #0
 8001daa:	3304      	adds	r3, #4
 8001dac:	0159      	lsls	r1, r3, #5
 8001dae:	d5f7      	bpl.n	8001da0 <__aeabi_d2f+0xc0>
 8001db0:	3401      	adds	r4, #1
 8001db2:	2300      	movs	r3, #0
 8001db4:	b2e0      	uxtb	r0, r4
 8001db6:	e7a9      	b.n	8001d0c <__aeabi_d2f+0x2c>
 8001db8:	2000      	movs	r0, #0
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e7a6      	b.n	8001d0c <__aeabi_d2f+0x2c>
 8001dbe:	4c08      	ldr	r4, [pc, #32]	@ (8001de0 <__aeabi_d2f+0x100>)
 8001dc0:	191c      	adds	r4, r3, r4
 8001dc2:	002b      	movs	r3, r5
 8001dc4:	40a5      	lsls	r5, r4
 8001dc6:	40c3      	lsrs	r3, r0
 8001dc8:	40a1      	lsls	r1, r4
 8001dca:	1e68      	subs	r0, r5, #1
 8001dcc:	4185      	sbcs	r5, r0
 8001dce:	4329      	orrs	r1, r5
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	e7d7      	b.n	8001d84 <__aeabi_d2f+0xa4>
 8001dd4:	000007fe 	.word	0x000007fe
 8001dd8:	fffffc80 	.word	0xfffffc80
 8001ddc:	fffffca2 	.word	0xfffffca2
 8001de0:	fffffc82 	.word	0xfffffc82

08001de4 <__clzsi2>:
 8001de4:	211c      	movs	r1, #28
 8001de6:	2301      	movs	r3, #1
 8001de8:	041b      	lsls	r3, r3, #16
 8001dea:	4298      	cmp	r0, r3
 8001dec:	d301      	bcc.n	8001df2 <__clzsi2+0xe>
 8001dee:	0c00      	lsrs	r0, r0, #16
 8001df0:	3910      	subs	r1, #16
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	4298      	cmp	r0, r3
 8001df6:	d301      	bcc.n	8001dfc <__clzsi2+0x18>
 8001df8:	0a00      	lsrs	r0, r0, #8
 8001dfa:	3908      	subs	r1, #8
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	4298      	cmp	r0, r3
 8001e00:	d301      	bcc.n	8001e06 <__clzsi2+0x22>
 8001e02:	0900      	lsrs	r0, r0, #4
 8001e04:	3904      	subs	r1, #4
 8001e06:	a202      	add	r2, pc, #8	@ (adr r2, 8001e10 <__clzsi2+0x2c>)
 8001e08:	5c10      	ldrb	r0, [r2, r0]
 8001e0a:	1840      	adds	r0, r0, r1
 8001e0c:	4770      	bx	lr
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	02020304 	.word	0x02020304
 8001e14:	01010101 	.word	0x01010101
	...

08001e20 <SPI2_FOC_DMA_LL_Init>:
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8001e20:	213f      	movs	r1, #63	@ 0x3f



/* ====== INIT DMA seule (post HAL) : ne touche pas SPI2/GPIO ====== */
void SPI2_FOC_DMA_LL_Init(MA330_t *encd)
{
 8001e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001e24:	2701      	movs	r7, #1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001e26:	2502      	movs	r5, #2
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8001e28:	4a27      	ldr	r2, [pc, #156]	@ (8001ec8 <SPI2_FOC_DMA_LL_Init+0xa8>)
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8001e2a:	4e28      	ldr	r6, [pc, #160]	@ (8001ecc <SPI2_FOC_DMA_LL_Init+0xac>)
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8001e2c:	6813      	ldr	r3, [r2, #0]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI2(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8001e2e:	4c28      	ldr	r4, [pc, #160]	@ (8001ed0 <SPI2_FOC_DMA_LL_Init+0xb0>)
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8001e30:	438b      	bics	r3, r1
 8001e32:	392c      	subs	r1, #44	@ 0x2c
 8001e34:	430b      	orrs	r3, r1
 8001e36:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001e38:	4b26      	ldr	r3, [pc, #152]	@ (8001ed4 <SPI2_FOC_DMA_LL_Init+0xb4>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	43ba      	bics	r2, r7
 8001e3e:	601a      	str	r2, [r3, #0]
    LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_SPI2_TX);

    /* RX: P->M, 8-bit, no inc, length=2 (préchargée) */
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_2, (uint32_t)&SPI2->DR);
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_2, (uint32_t)&encd->spi_rx_buffer);
 8001e40:	1d82      	adds	r2, r0, #6
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8001e42:	609e      	str	r6, [r3, #8]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8001e44:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	0c12      	lsrs	r2, r2, #16
 8001e4a:	0412      	lsls	r2, r2, #16
 8001e4c:	432a      	orrs	r2, r5
 8001e4e:	605a      	str	r2, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8001e50:	2210      	movs	r2, #16
 8001e52:	4694      	mov	ip, r2
 8001e54:	6062      	str	r2, [r4, #4]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8001e56:	3210      	adds	r2, #16
 8001e58:	6062      	str	r2, [r4, #4]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 8001e5a:	3260      	adds	r2, #96	@ 0x60
 8001e5c:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed8 <SPI2_FOC_DMA_LL_Init+0xb8>)
 8001e60:	6811      	ldr	r1, [r2, #0]
 8001e62:	43b9      	bics	r1, r7
 8001e64:	6011      	str	r1, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001e66:	6811      	ldr	r1, [r2, #0]
 8001e68:	4f1c      	ldr	r7, [pc, #112]	@ (8001edc <SPI2_FOC_DMA_LL_Init+0xbc>)
 8001e6a:	4039      	ands	r1, r7
 8001e6c:	4667      	mov	r7, ip
 8001e6e:	4339      	orrs	r1, r7
 8001e70:	6011      	str	r1, [r2, #0]

    /* TX: M->P, 8-bit, no inc, length=2 (préchargée) */
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t)&SPI2->DR);
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t)&encd->spi_tx_buffer);
 8001e72:	0001      	movs	r1, r0
 8001e74:	3108      	adds	r1, #8
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8001e76:	6096      	str	r6, [r2, #8]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8001e78:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001e7a:	6851      	ldr	r1, [r2, #4]
 8001e7c:	0c09      	lsrs	r1, r1, #16
 8001e7e:	0409      	lsls	r1, r1, #16
 8001e80:	4329      	orrs	r1, r5
 8001e82:	6051      	str	r1, [r2, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8001e84:	2280      	movs	r2, #128	@ 0x80
 8001e86:	0052      	lsls	r2, r2, #1
 8001e88:	6062      	str	r2, [r4, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8001e8a:	1892      	adds	r2, r2, r2
 8001e8c:	6062      	str	r2, [r4, #4]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE3(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 8001e8e:	2280      	movs	r2, #128	@ 0x80
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8001e90:	2108      	movs	r1, #8
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	6062      	str	r2, [r4, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8001e96:	681a      	ldr	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e98:	4c11      	ldr	r4, [pc, #68]	@ (8001ee0 <SPI2_FOC_DMA_LL_Init+0xc0>)
 8001e9a:	432a      	orrs	r2, r5
 8001e9c:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	21c2      	movs	r1, #194	@ 0xc2
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <SPI2_FOC_DMA_LL_Init+0xc4>)
 8001ea8:	0089      	lsls	r1, r1, #2
 8001eaa:	585a      	ldr	r2, [r3, r1]
 8001eac:	4022      	ands	r2, r4
 8001eae:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb0:	2280      	movs	r2, #128	@ 0x80
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	601a      	str	r2, [r3, #0]
    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_2);

    NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);    // mets une prio adaptée à ton FOC
    NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);

    encd->spi_tx_buffer[0]=0x00;
 8001eb6:	2300      	movs	r3, #0
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8001eb8:	8881      	ldrh	r1, [r0, #4]
    encd->spi_tx_buffer[0]=0x00;
 8001eba:	8103      	strh	r3, [r0, #8]
    encd->spi_tx_buffer[1]=0x00;


    encd->g_spi_done = 0;
 8001ebc:	7283      	strb	r3, [r0, #10]
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	6800      	ldr	r0, [r0, #0]
 8001ec2:	f001 fd77 	bl	80039b4 <HAL_GPIO_WritePin>
    cs_high(encd);


}
 8001ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ec8:	40020808 	.word	0x40020808
 8001ecc:	4000380c 	.word	0x4000380c
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	4002001c 	.word	0x4002001c
 8001ed8:	40020030 	.word	0x40020030
 8001edc:	ffffbfef 	.word	0xffffbfef
 8001ee0:	ff00ffff 	.word	0xff00ffff
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <Put_inside_DMA1_Channel2_3_IRQ>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8001ee8:	2220      	movs	r2, #32
 8001eea:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <Put_inside_DMA1_Channel2_3_IRQ+0x54>)
    return true;
}

/* ====== Handler d’IRQ DMA (RX fin) ====== */
void Put_inside_DMA1_Channel2_3_IRQ(MA330_t *encd)
{
 8001eec:	b510      	push	{r4, lr}
 8001eee:	6819      	ldr	r1, [r3, #0]
 8001ef0:	0004      	movs	r4, r0
 8001ef2:	420a      	tst	r2, r1
 8001ef4:	d018      	beq.n	8001f28 <Put_inside_DMA1_Channel2_3_IRQ+0x40>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableDMAReq_TX(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8001ef6:	2102      	movs	r1, #2
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <Put_inside_DMA1_Channel2_3_IRQ+0x58>)
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	438a      	bics	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8001f02:	2201      	movs	r2, #1
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	4391      	bics	r1, r2
 8001f08:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001f0a:	490e      	ldr	r1, [pc, #56]	@ (8001f44 <Put_inside_DMA1_Channel2_3_IRQ+0x5c>)
 8001f0c:	680b      	ldr	r3, [r1, #0]
 8001f0e:	4393      	bics	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
 8001f12:	490d      	ldr	r1, [pc, #52]	@ (8001f48 <Put_inside_DMA1_Channel2_3_IRQ+0x60>)
 8001f14:	680b      	ldr	r3, [r1, #0]
 8001f16:	4393      	bics	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]
        LL_SPI_DisableDMAReq_TX(SPI2);
        LL_SPI_DisableDMAReq_RX(SPI2);
        LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
        LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);

        encd->g_spi_done = 1;  // signal dispo (optionnel)
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	33ff      	adds	r3, #255	@ 0xff
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8001f1e:	8881      	ldrh	r1, [r0, #4]
        encd->g_spi_done = 1;  // signal dispo (optionnel)
 8001f20:	8143      	strh	r3, [r0, #10]
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8001f22:	6800      	ldr	r0, [r0, #0]
 8001f24:	f001 fd46 	bl	80039b4 <HAL_GPIO_WritePin>
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 8001f28:	2280      	movs	r2, #128	@ 0x80
 8001f2a:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <Put_inside_DMA1_Channel2_3_IRQ+0x54>)
 8001f2c:	6819      	ldr	r1, [r3, #0]
 8001f2e:	420a      	tst	r2, r1
 8001f30:	d002      	beq.n	8001f38 <Put_inside_DMA1_Channel2_3_IRQ+0x50>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 8001f32:	605a      	str	r2, [r3, #4]


    /* Option: erreurs */
    if (LL_DMA_IsActiveFlag_TE2(DMA1)) {
        LL_DMA_ClearFlag_TE2(DMA1);
        encd->g_spi_error=0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	72e3      	strb	r3, [r4, #11]
        // gérer l’erreur si besoin
    }

}
 8001f38:	bd10      	pop	{r4, pc}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40003800 	.word	0x40003800
 8001f44:	40020030 	.word	0x40020030
 8001f48:	4002001c 	.word	0x4002001c

08001f4c <SPI2_FOC_DMA_TxRx2B_Blocking>:

/* ====== Utilitaire bloquant court (polling) si tu en veux un) ====== */
bool SPI2_FOC_DMA_TxRx2B_Blocking(MA330_t * encd, uint8_t Byte1, uint8_t Byte2, uint32_t timeout_loops)
{
 8001f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4e:	464f      	mov	r7, r9
 8001f50:	4646      	mov	r6, r8
 8001f52:	46d6      	mov	lr, sl
 8001f54:	b5c0      	push	{r6, r7, lr}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001f56:	2780      	movs	r7, #128	@ 0x80
 8001f58:	0039      	movs	r1, r7
 8001f5a:	4e38      	ldr	r6, [pc, #224]	@ (800203c <SPI2_FOC_DMA_TxRx2B_Blocking+0xf0>)
 8001f5c:	4698      	mov	r8, r3
 8001f5e:	68b3      	ldr	r3, [r6, #8]
 8001f60:	0004      	movs	r4, r0
 8001f62:	4019      	ands	r1, r3
 8001f64:	4689      	mov	r9, r1
    if (!SPI2_FOC_DMA_KickTxRx2B(encd, Byte1, Byte2)) return false;
 8001f66:	2000      	movs	r0, #0
 8001f68:	421f      	tst	r7, r3
 8001f6a:	d161      	bne.n	8002030 <SPI2_FOC_DMA_TxRx2B_Blocking+0xe4>
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8001f6c:	88a1      	ldrh	r1, [r4, #4]
 8001f6e:	6820      	ldr	r0, [r4, #0]
    encd->spi_tx_buffer[0]=Byte2;
 8001f70:	7222      	strb	r2, [r4, #8]
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8001f72:	2200      	movs	r2, #0
 8001f74:	f001 fd1e 	bl	80039b4 <HAL_GPIO_WritePin>
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001f78:	2001      	movs	r0, #1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001f7a:	2502      	movs	r5, #2
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001f7c:	4930      	ldr	r1, [pc, #192]	@ (8002040 <SPI2_FOC_DMA_TxRx2B_Blocking+0xf4>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001f7e:	46ac      	mov	ip, r5
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001f80:	680b      	ldr	r3, [r1, #0]
 8001f82:	4383      	bics	r3, r0
 8001f84:	600b      	str	r3, [r1, #0]
 8001f86:	4b2f      	ldr	r3, [pc, #188]	@ (8002044 <SPI2_FOC_DMA_TxRx2B_Blocking+0xf8>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4382      	bics	r2, r0
 8001f8c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001f8e:	684a      	ldr	r2, [r1, #4]
 8001f90:	0c12      	lsrs	r2, r2, #16
 8001f92:	0412      	lsls	r2, r2, #16
 8001f94:	432a      	orrs	r2, r5
 8001f96:	604a      	str	r2, [r1, #4]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	0c12      	lsrs	r2, r2, #16
 8001f9c:	0412      	lsls	r2, r2, #16
 8001f9e:	432a      	orrs	r2, r5
 8001fa0:	605a      	str	r2, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8001fa2:	2210      	movs	r2, #16
 8001fa4:	4d28      	ldr	r5, [pc, #160]	@ (8002048 <SPI2_FOC_DMA_TxRx2B_Blocking+0xfc>)
 8001fa6:	606a      	str	r2, [r5, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8001fa8:	3210      	adds	r2, #16
 8001faa:	606a      	str	r2, [r5, #4]
 8001fac:	4692      	mov	sl, r2
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8001fae:	32e0      	adds	r2, #224	@ 0xe0
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 8001fb0:	606f      	str	r7, [r5, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8001fb2:	606a      	str	r2, [r5, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8001fb4:	3201      	adds	r2, #1
 8001fb6:	32ff      	adds	r2, #255	@ 0xff
 8001fb8:	606a      	str	r2, [r5, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 8001fba:	2280      	movs	r2, #128	@ 0x80
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	606a      	str	r2, [r5, #4]
    encd->g_spi_done = 0;
 8001fc0:	464a      	mov	r2, r9
 8001fc2:	72a2      	strb	r2, [r4, #10]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001fc4:	680a      	ldr	r2, [r1, #0]
 8001fc6:	4302      	orrs	r2, r0
 8001fc8:	600a      	str	r2, [r1, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4302      	orrs	r2, r0
 8001fce:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8001fd0:	4662      	mov	r2, ip
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8001fd2:	6873      	ldr	r3, [r6, #4]
 8001fd4:	4303      	orrs	r3, r0
 8001fd6:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8001fd8:	6873      	ldr	r3, [r6, #4]

    HAL_Delay(5);
 8001fda:	3004      	adds	r0, #4
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	6073      	str	r3, [r6, #4]
 8001fe0:	f000 fed6 	bl	8002d90 <HAL_Delay>
    uint8_t problem=0;

    //gerer les erreurs
    while (timeout_loops>10) {
 8001fe4:	4643      	mov	r3, r8
 8001fe6:	2b0a      	cmp	r3, #10
 8001fe8:	d90a      	bls.n	8002000 <SPI2_FOC_DMA_TxRx2B_Blocking+0xb4>
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8001fea:	4652      	mov	r2, sl
 8001fec:	682b      	ldr	r3, [r5, #0]
 8001fee:	421a      	tst	r2, r3
 8001ff0:	d106      	bne.n	8002000 <SPI2_FOC_DMA_TxRx2B_Blocking+0xb4>
 8001ff2:	2420      	movs	r4, #32
        if (LL_DMA_IsActiveFlag_TC2(DMA1)){
        	break;
        }
        HAL_Delay(1);
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f000 fecb 	bl	8002d90 <HAL_Delay>
 8001ffa:	682b      	ldr	r3, [r5, #0]
 8001ffc:	421c      	tst	r4, r3
 8001ffe:	d0f9      	beq.n	8001ff4 <SPI2_FOC_DMA_TxRx2B_Blocking+0xa8>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8002000:	2102      	movs	r1, #2
 8002002:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <SPI2_FOC_DMA_TxRx2B_Blocking+0xf0>)
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8002004:	2001      	movs	r0, #1
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	438a      	bics	r2, r1
 800200a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 800200c:	2201      	movs	r2, #1
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	4391      	bics	r1, r2
 8002012:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8002014:	490b      	ldr	r1, [pc, #44]	@ (8002044 <SPI2_FOC_DMA_TxRx2B_Blocking+0xf8>)
 8002016:	680b      	ldr	r3, [r1, #0]
 8002018:	4393      	bics	r3, r2
 800201a:	600b      	str	r3, [r1, #0]
 800201c:	4908      	ldr	r1, [pc, #32]	@ (8002040 <SPI2_FOC_DMA_TxRx2B_Blocking+0xf4>)
 800201e:	680b      	ldr	r3, [r1, #0]
 8002020:	4393      	bics	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <SPI2_FOC_DMA_TxRx2B_Blocking+0xfc>)
 8002026:	321f      	adds	r2, #31
 8002028:	605a      	str	r2, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 800202a:	32e1      	adds	r2, #225	@ 0xe1
 800202c:	32ff      	adds	r2, #255	@ 0xff
 800202e:	605a      	str	r2, [r3, #4]
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
    LL_DMA_ClearFlag_TC2(DMA1);
    LL_DMA_ClearFlag_TC3(DMA1);

    return true;
}
 8002030:	bce0      	pop	{r5, r6, r7}
 8002032:	46ba      	mov	sl, r7
 8002034:	46b1      	mov	r9, r6
 8002036:	46a8      	mov	r8, r5
 8002038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800203a:	46c0      	nop			@ (mov r8, r8)
 800203c:	40003800 	.word	0x40003800
 8002040:	4002001c 	.word	0x4002001c
 8002044:	40020030 	.word	0x40020030
 8002048:	40020000 	.word	0x40020000

0800204c <MA330_Init>:



//attention 20ms minimum apres une ecriture de registre
int MA330_Init(MA330_t *encd, GPIO_TypeDef *cs_port, uint16_t cs_pin,uint8_t FW){
 800204c:	b570      	push	{r4, r5, r6, lr}
 800204e:	0004      	movs	r4, r0
 8002050:	001d      	movs	r5, r3
    if (encd == NULL || cs_port == NULL || cs_pin == 0) {
 8002052:	2800      	cmp	r0, #0
 8002054:	d003      	beq.n	800205e <MA330_Init+0x12>
 8002056:	2900      	cmp	r1, #0
 8002058:	d001      	beq.n	800205e <MA330_Init+0x12>
 800205a:	2a00      	cmp	r2, #0
 800205c:	d101      	bne.n	8002062 <MA330_Init+0x16>
        return 0;
 800205e:	2000      	movs	r0, #0
 8002060:	e009      	b.n	8002076 <MA330_Init+0x2a>
    }

    encd->MA330_cs_port = cs_port;
 8002062:	6001      	str	r1, [r0, #0]
    encd->MA330_cs_pin = cs_pin;
 8002064:	8082      	strh	r2, [r0, #4]
    
    SPI2_FOC_DMA_LL_Init(encd);
 8002066:	f7ff fedb 	bl	8001e20 <SPI2_FOC_DMA_LL_Init>

    HAL_Delay(1);
 800206a:	2001      	movs	r0, #1
 800206c:	f000 fe90 	bl	8002d90 <HAL_Delay>

    if(FW>0){
 8002070:	2d00      	cmp	r5, #0
 8002072:	d101      	bne.n	8002078 <MA330_Init+0x2c>
		return 0;
	}
	cs_high(encd);

    }
    return 1;
 8002074:	2001      	movs	r0, #1
}
 8002076:	bd70      	pop	{r4, r5, r6, pc}
	if (SPI2_FOC_DMA_TxRx2B_Blocking(encd, 0x4E, 0x00, 1000) != true) {
 8002078:	23fa      	movs	r3, #250	@ 0xfa
 800207a:	2200      	movs	r2, #0
 800207c:	214e      	movs	r1, #78	@ 0x4e
 800207e:	0020      	movs	r0, r4
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	f7ff ff63 	bl	8001f4c <SPI2_FOC_DMA_TxRx2B_Blocking>
 8002086:	2800      	cmp	r0, #0
 8002088:	d02c      	beq.n	80020e4 <MA330_Init+0x98>
	HAL_Delay(1);
 800208a:	2001      	movs	r0, #1
 800208c:	f000 fe80 	bl	8002d90 <HAL_Delay>
	if (SPI2_FOC_DMA_TxRx2B_Blocking(encd, 0x00, 0x00, 1000) != true) {
 8002090:	23fa      	movs	r3, #250	@ 0xfa
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	0020      	movs	r0, r4
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	f7ff ff57 	bl	8001f4c <SPI2_FOC_DMA_TxRx2B_Blocking>
 800209e:	2800      	cmp	r0, #0
 80020a0:	d020      	beq.n	80020e4 <MA330_Init+0x98>
	HAL_Delay(1);
 80020a2:	2001      	movs	r0, #1
 80020a4:	f000 fe74 	bl	8002d90 <HAL_Delay>
	if (SPI2_FOC_DMA_TxRx2B_Blocking(encd, 0x8E,(uint8_t ) FW, 1000) != true) {
 80020a8:	23fa      	movs	r3, #250	@ 0xfa
 80020aa:	002a      	movs	r2, r5
 80020ac:	218e      	movs	r1, #142	@ 0x8e
 80020ae:	0020      	movs	r0, r4
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	f7ff ff4b 	bl	8001f4c <SPI2_FOC_DMA_TxRx2B_Blocking>
 80020b6:	2800      	cmp	r0, #0
 80020b8:	d014      	beq.n	80020e4 <MA330_Init+0x98>
	HAL_Delay(25);
 80020ba:	2019      	movs	r0, #25
 80020bc:	f000 fe68 	bl	8002d90 <HAL_Delay>
	if (SPI2_FOC_DMA_TxRx2B_Blocking(encd, 0x00, 0x00, 1000) != true) {
 80020c0:	23fa      	movs	r3, #250	@ 0xfa
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	0020      	movs	r0, r4
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	f7ff ff3f 	bl	8001f4c <SPI2_FOC_DMA_TxRx2B_Blocking>
 80020ce:	2800      	cmp	r0, #0
 80020d0:	d008      	beq.n	80020e4 <MA330_Init+0x98>
	if(encd->spi_rx_buffer[0]!=FW){
 80020d2:	79a3      	ldrb	r3, [r4, #6]
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 80020d4:	6820      	ldr	r0, [r4, #0]
 80020d6:	88a1      	ldrh	r1, [r4, #4]
	if(encd->spi_rx_buffer[0]!=FW){
 80020d8:	42ab      	cmp	r3, r5
 80020da:	d105      	bne.n	80020e8 <MA330_Init+0x9c>
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 80020dc:	2201      	movs	r2, #1
 80020de:	f001 fc69 	bl	80039b4 <HAL_GPIO_WritePin>
}
 80020e2:	e7c7      	b.n	8002074 <MA330_Init+0x28>
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 80020e4:	88a1      	ldrh	r1, [r4, #4]
 80020e6:	6820      	ldr	r0, [r4, #0]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f001 fc63 	bl	80039b4 <HAL_GPIO_WritePin>
        return 0;
 80020ee:	2000      	movs	r0, #0
 80020f0:	e7c1      	b.n	8002076 <MA330_Init+0x2a>
 80020f2:	46c0      	nop			@ (mov r8, r8)

080020f4 <MA330_start>:

//14 bit de donnee utile
int MA330_start(MA330_t *encd) {
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80020f6:	2280      	movs	r2, #128	@ 0x80
 80020f8:	46ce      	mov	lr, r9
 80020fa:	4647      	mov	r7, r8
 80020fc:	4d22      	ldr	r5, [pc, #136]	@ (8002188 <MA330_start+0x94>)
 80020fe:	0004      	movs	r4, r0
 8002100:	68ab      	ldr	r3, [r5, #8]
 8002102:	4691      	mov	r9, r2

	if (SPI2_FOC_DMA_KickTxRx2B(encd,0x00,0x00) != true) {
        return 0;
 8002104:	2600      	movs	r6, #0
int MA330_start(MA330_t *encd) {
 8002106:	b580      	push	{r7, lr}
 8002108:	421a      	tst	r2, r3
 800210a:	d138      	bne.n	800217e <MA330_start+0x8a>
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 800210c:	8881      	ldrh	r1, [r0, #4]
    encd->spi_tx_buffer[0]=Byte2;
 800210e:	7206      	strb	r6, [r0, #8]
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	6800      	ldr	r0, [r0, #0]
 8002114:	f001 fc4e 	bl	80039b4 <HAL_GPIO_WritePin>
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8002118:	2001      	movs	r0, #1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800211a:	2702      	movs	r7, #2
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800211c:	491b      	ldr	r1, [pc, #108]	@ (800218c <MA330_start+0x98>)
 800211e:	4a1c      	ldr	r2, [pc, #112]	@ (8002190 <MA330_start+0x9c>)
 8002120:	680b      	ldr	r3, [r1, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8002122:	46bc      	mov	ip, r7
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8002124:	4383      	bics	r3, r0
 8002126:	600b      	str	r3, [r1, #0]
 8002128:	6813      	ldr	r3, [r2, #0]
 800212a:	4383      	bics	r3, r0
 800212c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800212e:	684b      	ldr	r3, [r1, #4]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	041b      	lsls	r3, r3, #16
 8002134:	433b      	orrs	r3, r7
 8002136:	604b      	str	r3, [r1, #4]
 8002138:	6853      	ldr	r3, [r2, #4]
 800213a:	0c1b      	lsrs	r3, r3, #16
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	433b      	orrs	r3, r7
 8002140:	6053      	str	r3, [r2, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <MA330_start+0xa0>)
 8002144:	370e      	adds	r7, #14
 8002146:	605f      	str	r7, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8002148:	3710      	adds	r7, #16
 800214a:	605f      	str	r7, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 800214c:	464f      	mov	r7, r9
 800214e:	605f      	str	r7, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8002150:	3780      	adds	r7, #128	@ 0x80
 8002152:	605f      	str	r7, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8002154:	3701      	adds	r7, #1
 8002156:	37ff      	adds	r7, #255	@ 0xff
 8002158:	605f      	str	r7, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 800215a:	2780      	movs	r7, #128	@ 0x80
 800215c:	013f      	lsls	r7, r7, #4
 800215e:	605f      	str	r7, [r3, #4]
    encd->g_spi_done = 0;
 8002160:	72a6      	strb	r6, [r4, #10]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8002162:	680b      	ldr	r3, [r1, #0]
    }

	return 1;
 8002164:	3601      	adds	r6, #1
 8002166:	4303      	orrs	r3, r0
 8002168:	600b      	str	r3, [r1, #0]
 800216a:	6813      	ldr	r3, [r2, #0]
 800216c:	4303      	orrs	r3, r0
 800216e:	6013      	str	r3, [r2, #0]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8002170:	4662      	mov	r2, ip
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8002172:	686b      	ldr	r3, [r5, #4]
 8002174:	4303      	orrs	r3, r0
 8002176:	606b      	str	r3, [r5, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8002178:	686b      	ldr	r3, [r5, #4]
 800217a:	4313      	orrs	r3, r2
 800217c:	606b      	str	r3, [r5, #4]
}
 800217e:	0030      	movs	r0, r6
 8002180:	bcc0      	pop	{r6, r7}
 8002182:	46b9      	mov	r9, r7
 8002184:	46b0      	mov	r8, r6
 8002186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002188:	40003800 	.word	0x40003800
 800218c:	4002001c 	.word	0x4002001c
 8002190:	40020030 	.word	0x40020030
 8002194:	40020000 	.word	0x40020000

08002198 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002198:	b510      	push	{r4, lr}
 800219a:	b084      	sub	sp, #16

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800219c:	220c      	movs	r2, #12
 800219e:	2100      	movs	r1, #0
 80021a0:	a801      	add	r0, sp, #4
 80021a2:	f002 ff63 	bl	800506c <memset>
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80021a6:	2280      	movs	r2, #128	@ 0x80
  hadc1.Instance = ADC1;
 80021a8:	4c38      	ldr	r4, [pc, #224]	@ (800228c <MX_ADC1_Init+0xf4>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80021aa:	0392      	lsls	r2, r2, #14
 80021ac:	6122      	str	r2, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80021ae:	2208      	movs	r2, #8
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 5;
 80021b0:	2105      	movs	r1, #5
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80021b2:	6162      	str	r2, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80021b4:	2200      	movs	r2, #0
  hadc1.Init.NbrOfConversion = 5;
 80021b6:	61e1      	str	r1, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021b8:	311b      	adds	r1, #27
 80021ba:	5462      	strb	r2, [r4, r1]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 80021bc:	2180      	movs	r1, #128	@ 0x80
 80021be:	00c9      	lsls	r1, r1, #3
 80021c0:	6261      	str	r1, [r4, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80021c2:	2180      	movs	r1, #128	@ 0x80
 80021c4:	0109      	lsls	r1, r1, #4
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80021c6:	2001      	movs	r0, #1
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80021c8:	62a1      	str	r1, [r4, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80021ca:	212c      	movs	r1, #44	@ 0x2c
  hadc1.Instance = ADC1;
 80021cc:	4b30      	ldr	r3, [pc, #192]	@ (8002290 <MX_ADC1_Init+0xf8>)
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80021ce:	5460      	strb	r0, [r4, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80021d0:	2180      	movs	r1, #128	@ 0x80
  hadc1.Instance = ADC1;
 80021d2:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80021d4:	2380      	movs	r3, #128	@ 0x80
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80021d6:	0149      	lsls	r1, r1, #5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80021d8:	05db      	lsls	r3, r3, #23
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80021da:	6321      	str	r1, [r4, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 80021dc:	2102      	movs	r1, #2
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80021de:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021e0:	2300      	movs	r3, #0
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 80021e2:	6361      	str	r1, [r4, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.OversamplingMode = DISABLE;
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021e4:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 80021e6:	313a      	adds	r1, #58	@ 0x3a
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021e8:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021ea:	60e3      	str	r3, [r4, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80021ec:	8323      	strh	r3, [r4, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021ee:	76a2      	strb	r2, [r4, #26]
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80021f0:	63a3      	str	r3, [r4, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80021f2:	5462      	strb	r2, [r4, r1]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80021f4:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021f6:	f000 fddd 	bl	8002db4 <HAL_ADC_Init>
 80021fa:	2800      	cmp	r0, #0
 80021fc:	d134      	bne.n	8002268 <MX_ADC1_Init+0xd0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80021fe:	4b25      	ldr	r3, [pc, #148]	@ (8002294 <MX_ADC1_Init+0xfc>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002200:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_6;
 8002202:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002204:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002206:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002208:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800220a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800220c:	f000 ff46 	bl	800309c <HAL_ADC_ConfigChannel>
 8002210:	2800      	cmp	r0, #0
 8002212:	d138      	bne.n	8002286 <MX_ADC1_Init+0xee>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002214:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <MX_ADC1_Init+0x100>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002216:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_7;
 8002218:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800221a:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800221c:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800221e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002220:	f000 ff3c 	bl	800309c <HAL_ADC_ConfigChannel>
 8002224:	2800      	cmp	r0, #0
 8002226:	d12b      	bne.n	8002280 <MX_ADC1_Init+0xe8>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002228:	4b1c      	ldr	r3, [pc, #112]	@ (800229c <MX_ADC1_Init+0x104>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800222a:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 800222c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800222e:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002230:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002232:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002234:	f000 ff32 	bl	800309c <HAL_ADC_ConfigChannel>
 8002238:	2800      	cmp	r0, #0
 800223a:	d11e      	bne.n	800227a <MX_ADC1_Init+0xe2>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800223c:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <MX_ADC1_Init+0x108>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800223e:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 8002240:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002242:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002244:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002246:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002248:	f000 ff28 	bl	800309c <HAL_ADC_ConfigChannel>
 800224c:	2800      	cmp	r0, #0
 800224e:	d111      	bne.n	8002274 <MX_ADC1_Init+0xdc>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002250:	4b14      	ldr	r3, [pc, #80]	@ (80022a4 <MX_ADC1_Init+0x10c>)
  sConfig.Rank = ADC_REGULAR_RANK_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002252:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002254:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002256:	2310      	movs	r3, #16
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002258:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800225a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800225c:	f000 ff1e 	bl	800309c <HAL_ADC_ConfigChannel>
 8002260:	2800      	cmp	r0, #0
 8002262:	d104      	bne.n	800226e <MX_ADC1_Init+0xd6>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002264:	b004      	add	sp, #16
 8002266:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002268:	f000 fa3a 	bl	80026e0 <Error_Handler>
 800226c:	e7c7      	b.n	80021fe <MX_ADC1_Init+0x66>
    Error_Handler();
 800226e:	f000 fa37 	bl	80026e0 <Error_Handler>
}
 8002272:	e7f7      	b.n	8002264 <MX_ADC1_Init+0xcc>
    Error_Handler();
 8002274:	f000 fa34 	bl	80026e0 <Error_Handler>
 8002278:	e7ea      	b.n	8002250 <MX_ADC1_Init+0xb8>
    Error_Handler();
 800227a:	f000 fa31 	bl	80026e0 <Error_Handler>
 800227e:	e7dd      	b.n	800223c <MX_ADC1_Init+0xa4>
    Error_Handler();
 8002280:	f000 fa2e 	bl	80026e0 <Error_Handler>
 8002284:	e7d0      	b.n	8002228 <MX_ADC1_Init+0x90>
    Error_Handler();
 8002286:	f000 fa2b 	bl	80026e0 <Error_Handler>
 800228a:	e7c3      	b.n	8002214 <MX_ADC1_Init+0x7c>
 800228c:	20000084 	.word	0x20000084
 8002290:	40012400 	.word	0x40012400
 8002294:	18000040 	.word	0x18000040
 8002298:	1c000080 	.word	0x1c000080
 800229c:	24000200 	.word	0x24000200
 80022a0:	14000020 	.word	0x14000020
 80022a4:	b4002000 	.word	0xb4002000

080022a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	0004      	movs	r4, r0
 80022ac:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ae:	2214      	movs	r2, #20
 80022b0:	2100      	movs	r1, #0
 80022b2:	a804      	add	r0, sp, #16
 80022b4:	f002 feda 	bl	800506c <memset>
  if(adcHandle->Instance==ADC1)
 80022b8:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <HAL_ADC_MspInit+0xb0>)
 80022ba:	6822      	ldr	r2, [r4, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80022c0:	b00a      	add	sp, #40	@ 0x28
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 80022c4:	2180      	movs	r1, #128	@ 0x80
 80022c6:	4b25      	ldr	r3, [pc, #148]	@ (800235c <HAL_ADC_MspInit+0xb4>)
 80022c8:	0349      	lsls	r1, r1, #13
 80022ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022cc:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 80022ce:	430a      	orrs	r2, r1
 80022d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80022d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC_CLK_ENABLE();
 80022d6:	400a      	ands	r2, r1
 80022d8:	9201      	str	r2, [sp, #4]
 80022da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022dc:	2201      	movs	r2, #1
 80022de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	4311      	orrs	r1, r2
 80022e4:	6359      	str	r1, [r3, #52]	@ 0x34
 80022e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022e8:	400a      	ands	r2, r1
 80022ea:	9202      	str	r2, [sp, #8]
 80022ec:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	2202      	movs	r2, #2
 80022f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022f2:	4311      	orrs	r1, r2
 80022f4:	6359      	str	r1, [r3, #52]	@ 0x34
 80022f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	401a      	ands	r2, r3
 80022fc:	9203      	str	r2, [sp, #12]
 80022fe:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002300:	22e0      	movs	r2, #224	@ 0xe0
 8002302:	2303      	movs	r3, #3
 8002304:	9204      	str	r2, [sp, #16]
 8002306:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f001 fa54 	bl	80037b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800230c:	2303      	movs	r3, #3
 800230e:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002310:	4813      	ldr	r0, [pc, #76]	@ (8002360 <HAL_ADC_MspInit+0xb8>)
 8002312:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002314:	9204      	str	r2, [sp, #16]
 8002316:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231a:	f001 fa4b 	bl	80037b4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800231e:	4d11      	ldr	r5, [pc, #68]	@ (8002364 <HAL_ADC_MspInit+0xbc>)
 8002320:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <HAL_ADC_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002322:	0028      	movs	r0, r5
    hdma_adc1.Instance = DMA1_Channel1;
 8002324:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002326:	2305      	movs	r3, #5
 8002328:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800232a:	337b      	adds	r3, #123	@ 0x7b
 800232c:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800232e:	3380      	adds	r3, #128	@ 0x80
 8002330:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002332:	2380      	movs	r3, #128	@ 0x80
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002338:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800233a:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800233c:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800233e:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002340:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002342:	f001 f91d 	bl	8003580 <HAL_DMA_Init>
 8002346:	2800      	cmp	r0, #0
 8002348:	d102      	bne.n	8002350 <HAL_ADC_MspInit+0xa8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800234a:	6525      	str	r5, [r4, #80]	@ 0x50
 800234c:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 800234e:	e7b7      	b.n	80022c0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8002350:	f000 f9c6 	bl	80026e0 <Error_Handler>
 8002354:	e7f9      	b.n	800234a <HAL_ADC_MspInit+0xa2>
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	40012400 	.word	0x40012400
 800235c:	40021000 	.word	0x40021000
 8002360:	50000400 	.word	0x50000400
 8002364:	20000028 	.word	0x20000028
 8002368:	40020008 	.word	0x40020008

0800236c <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	46c6      	mov	lr, r8

	if (hadc->Instance == ADC1) {
 8002370:	4b35      	ldr	r3, [pc, #212]	@ (8002448 <HAL_ADC_ConvCpltCallback+0xdc>)
 8002372:	6802      	ldr	r2, [r0, #0]
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8002374:	b500      	push	{lr}
	if (hadc->Instance == ADC1) {
 8002376:	429a      	cmp	r2, r3
 8002378:	d002      	beq.n	8002380 <HAL_ADC_ConvCpltCallback+0x14>
      default:
      break;
    }
	}

}
 800237a:	bc80      	pop	{r7}
 800237c:	46b8      	mov	r8, r7
 800237e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    float VDDA=3.0 * VREFINT_CAL / adc_data[4];
 8002380:	4b32      	ldr	r3, [pc, #200]	@ (800244c <HAL_ADC_ConvCpltCallback+0xe0>)
 8002382:	8858      	ldrh	r0, [r3, #2]
 8002384:	881a      	ldrh	r2, [r3, #0]
 8002386:	0400      	lsls	r0, r0, #16
 8002388:	4310      	orrs	r0, r2
 800238a:	f7ff fc3d 	bl	8001c08 <__aeabi_ui2d>
 800238e:	2200      	movs	r2, #0
 8002390:	4b2f      	ldr	r3, [pc, #188]	@ (8002450 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002392:	f7fe fd1b 	bl	8000dcc <__aeabi_dmul>
 8002396:	4f2f      	ldr	r7, [pc, #188]	@ (8002454 <HAL_ADC_ConvCpltCallback+0xe8>)
 8002398:	0004      	movs	r4, r0
 800239a:	8938      	ldrh	r0, [r7, #8]
 800239c:	000d      	movs	r5, r1
 800239e:	f7ff fc05 	bl	8001bac <__aeabi_i2d>
 80023a2:	0002      	movs	r2, r0
 80023a4:	000b      	movs	r3, r1
 80023a6:	0020      	movs	r0, r4
 80023a8:	0029      	movs	r1, r5
 80023aa:	f7fe f9f7 	bl	800079c <__aeabi_ddiv>
 80023ae:	f7ff fc97 	bl	8001ce0 <__aeabi_d2f>
	hfoc.ia=(float) (RESISTOR * (((adc_data[0] * VDDA)/ 4095.0)-(VDDA/2))) ;
 80023b2:	21fc      	movs	r1, #252	@ 0xfc
 80023b4:	0589      	lsls	r1, r1, #22
    float VDDA=3.0 * VREFINT_CAL / adc_data[4];
 80023b6:	1c06      	adds	r6, r0, #0
	hfoc.ia=(float) (RESISTOR * (((adc_data[0] * VDDA)/ 4095.0)-(VDDA/2))) ;
 80023b8:	f7fe f846 	bl	8000448 <__aeabi_fmul>
 80023bc:	f7ff fc48 	bl	8001c50 <__aeabi_f2d>
 80023c0:	000d      	movs	r5, r1
 80023c2:	0004      	movs	r4, r0
	hfoc.ia=(float) (RESISTOR * (((adc_data[1] * VDDA)/ 4095.0)-(VDDA/2)));
 80023c4:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <HAL_ADC_ConvCpltCallback+0xec>)
 80023c6:	8878      	ldrh	r0, [r7, #2]
 80023c8:	4698      	mov	r8, r3
 80023ca:	f7fe f997 	bl	80006fc <__aeabi_i2f>
 80023ce:	1c31      	adds	r1, r6, #0
 80023d0:	f7fe f83a 	bl	8000448 <__aeabi_fmul>
 80023d4:	f7ff fc3c 	bl	8001c50 <__aeabi_f2d>
 80023d8:	2200      	movs	r2, #0
 80023da:	4b20      	ldr	r3, [pc, #128]	@ (800245c <HAL_ADC_ConvCpltCallback+0xf0>)
 80023dc:	f7fe f9de 	bl	800079c <__aeabi_ddiv>
 80023e0:	0022      	movs	r2, r4
 80023e2:	002b      	movs	r3, r5
 80023e4:	f7fe ffd8 	bl	8001398 <__aeabi_dsub>
 80023e8:	2280      	movs	r2, #128	@ 0x80
 80023ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002460 <HAL_ADC_ConvCpltCallback+0xf4>)
 80023ec:	05d2      	lsls	r2, r2, #23
 80023ee:	f7fe fced 	bl	8000dcc <__aeabi_dmul>
 80023f2:	f7ff fc75 	bl	8001ce0 <__aeabi_d2f>
 80023f6:	4643      	mov	r3, r8
 80023f8:	6598      	str	r0, [r3, #88]	@ 0x58
	hfoc.ic=(float) (RESISTOR * (((adc_data[2] * VDDA)/ 4095.0)-(VDDA/2)));
 80023fa:	88b8      	ldrh	r0, [r7, #4]
 80023fc:	f7fe f97e 	bl	80006fc <__aeabi_i2f>
 8002400:	1c31      	adds	r1, r6, #0
 8002402:	f7fe f821 	bl	8000448 <__aeabi_fmul>
 8002406:	f7ff fc23 	bl	8001c50 <__aeabi_f2d>
 800240a:	2200      	movs	r2, #0
 800240c:	4b13      	ldr	r3, [pc, #76]	@ (800245c <HAL_ADC_ConvCpltCallback+0xf0>)
 800240e:	f7fe f9c5 	bl	800079c <__aeabi_ddiv>
 8002412:	0022      	movs	r2, r4
 8002414:	002b      	movs	r3, r5
 8002416:	f7fe ffbf 	bl	8001398 <__aeabi_dsub>
 800241a:	2280      	movs	r2, #128	@ 0x80
 800241c:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <HAL_ADC_ConvCpltCallback+0xf4>)
 800241e:	05d2      	lsls	r2, r2, #23
 8002420:	f7fe fcd4 	bl	8000dcc <__aeabi_dmul>
 8002424:	f7ff fc5c 	bl	8001ce0 <__aeabi_d2f>
 8002428:	4643      	mov	r3, r8
 800242a:	6618      	str	r0, [r3, #96]	@ 0x60
	hfoc.v_bus=(float) (VBUSDIVIDER * adc_data[3] * VDDA) / 4095.0;
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	00d8      	lsls	r0, r3, #3
 8002430:	1ac0      	subs	r0, r0, r3
 8002432:	f7fe f963 	bl	80006fc <__aeabi_i2f>
 8002436:	1c31      	adds	r1, r6, #0
 8002438:	f7fe f806 	bl	8000448 <__aeabi_fmul>
 800243c:	4909      	ldr	r1, [pc, #36]	@ (8002464 <HAL_ADC_ConvCpltCallback+0xf8>)
 800243e:	f7fd feed 	bl	800021c <__aeabi_fdiv>
 8002442:	4643      	mov	r3, r8
 8002444:	6658      	str	r0, [r3, #100]	@ 0x64
}
 8002446:	e798      	b.n	800237a <HAL_ADC_ConvCpltCallback+0xe>
 8002448:	40012400 	.word	0x40012400
 800244c:	1fff75aa 	.word	0x1fff75aa
 8002450:	40080000 	.word	0x40080000
 8002454:	20000258 	.word	0x20000258
 8002458:	200000ec 	.word	0x200000ec
 800245c:	40affe00 	.word	0x40affe00
 8002460:	3f847ae1 	.word	0x3f847ae1
 8002464:	457ff000 	.word	0x457ff000

08002468 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002468:	2301      	movs	r3, #1
{
 800246a:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800246c:	4a0f      	ldr	r2, [pc, #60]	@ (80024ac <MX_DMA_Init+0x44>)
{
 800246e:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002470:	6b91      	ldr	r1, [r2, #56]	@ 0x38

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002472:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002474:	4319      	orrs	r1, r3
 8002476:	6391      	str	r1, [r2, #56]	@ 0x38
 8002478:	6b92      	ldr	r2, [r2, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800247a:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800247c:	4013      	ands	r3, r2
 800247e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002480:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002482:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002484:	f001 f80c 	bl	80034a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002488:	2009      	movs	r0, #9
 800248a:	f001 f833 	bl	80034f4 <HAL_NVIC_EnableIRQ>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800248e:	20c2      	movs	r0, #194	@ 0xc2
 8002490:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <MX_DMA_Init+0x48>)
 8002492:	0080      	lsls	r0, r0, #2
 8002494:	5819      	ldr	r1, [r3, r0]
 8002496:	4a07      	ldr	r2, [pc, #28]	@ (80024b4 <MX_DMA_Init+0x4c>)
 8002498:	4011      	ands	r1, r2
 800249a:	2280      	movs	r2, #128	@ 0x80
 800249c:	03d2      	lsls	r2, r2, #15
 800249e:	430a      	orrs	r2, r1
 80024a0:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	2280      	movs	r2, #128	@ 0x80
 80024a4:	00d2      	lsls	r2, r2, #3
 80024a6:	601a      	str	r2, [r3, #0]
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1);
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);

}
 80024a8:	b003      	add	sp, #12
 80024aa:	bd00      	pop	{pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	e000e100 	.word	0xe000e100
 80024b4:	ff00ffff 	.word	0xff00ffff

080024b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ba:	46c6      	mov	lr, r8
 80024bc:	b500      	push	{lr}
 80024be:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	2214      	movs	r2, #20
 80024c2:	2100      	movs	r1, #0
 80024c4:	a804      	add	r0, sp, #16
 80024c6:	f002 fdd1 	bl	800506c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ca:	2220      	movs	r2, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	2702      	movs	r7, #2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002580 <MX_GPIO_Init+0xc8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|HALL_CS_Pin, GPIO_PIN_RESET);
 80024d2:	26a0      	movs	r6, #160	@ 0xa0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024d8:	4311      	orrs	r1, r2
 80024da:	6359      	str	r1, [r3, #52]	@ 0x34
 80024dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|HALL_CS_Pin, GPIO_PIN_RESET);
 80024de:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024e0:	400a      	ands	r2, r1
 80024e2:	9201      	str	r2, [sp, #4]
 80024e4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80024e8:	2101      	movs	r1, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	432a      	orrs	r2, r5
 80024ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80024ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024f0:	402a      	ands	r2, r5
 80024f2:	9202      	str	r2, [sp, #8]
 80024f4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024f8:	433a      	orrs	r2, r7
 80024fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80024fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80024fe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002500:	403b      	ands	r3, r7
 8002502:	9303      	str	r3, [sp, #12]
 8002504:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8002506:	4b1f      	ldr	r3, [pc, #124]	@ (8002584 <MX_GPIO_Init+0xcc>)
 8002508:	4698      	mov	r8, r3
 800250a:	0018      	movs	r0, r3
 800250c:	f001 fa52 	bl	80039b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|HALL_CS_Pin, GPIO_PIN_RESET);
 8002510:	2200      	movs	r2, #0
 8002512:	0030      	movs	r0, r6
 8002514:	491c      	ldr	r1, [pc, #112]	@ (8002588 <MX_GPIO_Init+0xd0>)
 8002516:	f001 fa4d 	bl	80039b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800251a:	4640      	mov	r0, r8
 800251c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800251e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002520:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002526:	f001 f945 	bl	80037b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800252a:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	0030      	movs	r0, r6
 800252e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002530:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002532:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002536:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	f001 f93c 	bl	80037b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800253c:	2280      	movs	r2, #128	@ 0x80
 800253e:	2388      	movs	r3, #136	@ 0x88
 8002540:	0152      	lsls	r2, r2, #5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002544:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002548:	9204      	str	r2, [sp, #16]
 800254a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254e:	f001 f931 	bl	80037b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_CS_Pin */
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 8002552:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 8002554:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 8002556:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 8002558:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 800255a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002560:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 8002562:	f001 f927 	bl	80037b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	2103      	movs	r1, #3
 800256a:	2007      	movs	r0, #7
 800256c:	f000 ff98 	bl	80034a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002570:	2007      	movs	r0, #7
 8002572:	f000 ffbf 	bl	80034f4 <HAL_NVIC_EnableIRQ>

}
 8002576:	b00a      	add	sp, #40	@ 0x28
 8002578:	bc80      	pop	{r7}
 800257a:	46b8      	mov	r8, r7
 800257c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	40021000 	.word	0x40021000
 8002584:	50001400 	.word	0x50001400
 8002588:	0000800c 	.word	0x0000800c

0800258c <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 800258c:	b510      	push	{r4, lr}

	HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_0);
 800258e:	2101      	movs	r1, #1
 8002590:	4801      	ldr	r0, [pc, #4]	@ (8002598 <HAL_GPIO_EXTI_Rising_Callback+0xc>)
 8002592:	f001 fa15 	bl	80039c0 <HAL_GPIO_TogglePin>


}
 8002596:	bd10      	pop	{r4, pc}
 8002598:	50001400 	.word	0x50001400

0800259c <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 800259c:	b510      	push	{r4, lr}
 800259e:	2101      	movs	r1, #1
 80025a0:	4801      	ldr	r0, [pc, #4]	@ (80025a8 <HAL_GPIO_EXTI_Falling_Callback+0xc>)
 80025a2:	f001 fa0d 	bl	80039c0 <HAL_GPIO_TogglePin>
 80025a6:	bd10      	pop	{r4, pc}
 80025a8:	50001400 	.word	0x50001400

080025ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025ac:	b500      	push	{lr}
 80025ae:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025b0:	2238      	movs	r2, #56	@ 0x38
 80025b2:	2100      	movs	r1, #0
 80025b4:	a804      	add	r0, sp, #16
 80025b6:	f002 fd59 	bl	800506c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025ba:	2210      	movs	r2, #16
 80025bc:	2100      	movs	r1, #0
 80025be:	4668      	mov	r0, sp
 80025c0:	f002 fd54 	bl	800506c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025c4:	2080      	movs	r0, #128	@ 0x80
 80025c6:	0080      	lsls	r0, r0, #2
 80025c8:	f001 fa1c 	bl	8003a04 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025cc:	2302      	movs	r3, #2
 80025ce:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025d0:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025d2:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 16;
 80025d4:	330e      	adds	r3, #14
 80025d6:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80025d8:	23e0      	movs	r3, #224	@ 0xe0
 80025da:	031b      	lsls	r3, r3, #12
 80025dc:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80025de:	23e0      	movs	r3, #224	@ 0xe0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025e0:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80025e2:	051b      	lsls	r3, r3, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025e4:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80025e6:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80025e8:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025ea:	2140      	movs	r1, #64	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025ec:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80025ee:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80025f0:	05db      	lsls	r3, r3, #23
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f2:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80025f4:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025f6:	9109      	str	r1, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80025f8:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80025fa:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025fc:	f001 fa32 	bl	8003a64 <HAL_RCC_OscConfig>
 8002600:	2800      	cmp	r0, #0
 8002602:	d001      	beq.n	8002608 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002604:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002606:	e7fe      	b.n	8002606 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002608:	2207      	movs	r2, #7
 800260a:	2302      	movs	r3, #2
 800260c:	9200      	str	r2, [sp, #0]
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002614:	2102      	movs	r1, #2
 8002616:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002618:	9202      	str	r2, [sp, #8]
 800261a:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800261c:	f001 fcd8 	bl	8003fd0 <HAL_RCC_ClockConfig>
 8002620:	2800      	cmp	r0, #0
 8002622:	d001      	beq.n	8002628 <SystemClock_Config+0x7c>
 8002624:	b672      	cpsid	i
	while (1)
 8002626:	e7fe      	b.n	8002626 <SystemClock_Config+0x7a>
}
 8002628:	b013      	add	sp, #76	@ 0x4c
 800262a:	bd00      	pop	{pc}

0800262c <main>:
{
 800262c:	b510      	push	{r4, lr}
  HAL_Init();
 800262e:	f000 fb89 	bl	8002d44 <HAL_Init>
  SystemClock_Config();
 8002632:	f7ff ffbb 	bl	80025ac <SystemClock_Config>
  MX_GPIO_Init();
 8002636:	f7ff ff3f 	bl	80024b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800263a:	f7ff ff15 	bl	8002468 <MX_DMA_Init>
  MX_ADC1_Init();
 800263e:	f7ff fdab 	bl	8002198 <MX_ADC1_Init>
  MX_SPI2_Init();
 8002642:	f000 f84f 	bl	80026e4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002646:	f000 fa47 	bl	8002ad8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800264a:	f000 f96f 	bl	800292c <MX_TIM2_Init>
  MA330_Init(&ma330data, HALL_CS_GPIO_Port, HALL_CS_Pin,NORMAL_FW);
 800264e:	2280      	movs	r2, #128	@ 0x80
 8002650:	21a0      	movs	r1, #160	@ 0xa0
 8002652:	2366      	movs	r3, #102	@ 0x66
 8002654:	0212      	lsls	r2, r2, #8
 8002656:	05c9      	lsls	r1, r1, #23
 8002658:	481b      	ldr	r0, [pc, #108]	@ (80026c8 <main+0x9c>)
 800265a:	f7ff fcf7 	bl	800204c <MA330_Init>
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4 | TIM_IT_TRIGGER | TIM_IT_COM | TIM_IT_BREAK);
 800265e:	21ff      	movs	r1, #255	@ 0xff
 8002660:	4c1a      	ldr	r4, [pc, #104]	@ (80026cc <main+0xa0>)
 8002662:	6823      	ldr	r3, [r4, #0]
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002664:	0020      	movs	r0, r4
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4 | TIM_IT_TRIGGER | TIM_IT_COM | TIM_IT_BREAK);
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	438a      	bics	r2, r1
 800266a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4 | TIM_IT_TRIGGER | TIM_IT_COM | TIM_IT_BREAK);
 800266c:	4a18      	ldr	r2, [pc, #96]	@ (80026d0 <main+0xa4>)
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 800266e:	39fe      	subs	r1, #254	@ 0xfe
  __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4 | TIM_IT_TRIGGER | TIM_IT_COM | TIM_IT_BREAK);
 8002670:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	430a      	orrs	r2, r1
 8002676:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002678:	2100      	movs	r1, #0
 800267a:	f002 f811 	bl	80046a0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 800267e:	2100      	movs	r1, #0
 8002680:	0020      	movs	r0, r4
 8002682:	f002 fb57 	bl	8004d34 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8002686:	2104      	movs	r1, #4
 8002688:	0020      	movs	r0, r4
 800268a:	f002 f809 	bl	80046a0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 800268e:	2104      	movs	r1, #4
 8002690:	0020      	movs	r0, r4
 8002692:	f002 fb4f 	bl	8004d34 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8002696:	2108      	movs	r1, #8
 8002698:	0020      	movs	r0, r4
 800269a:	f002 f801 	bl	80046a0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 800269e:	2108      	movs	r1, #8
 80026a0:	0020      	movs	r0, r4
 80026a2:	f002 fb47 	bl	8004d34 <HAL_TIMEx_PWMN_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 5);
 80026a6:	2205      	movs	r2, #5
 80026a8:	490a      	ldr	r1, [pc, #40]	@ (80026d4 <main+0xa8>)
 80026aa:	480b      	ldr	r0, [pc, #44]	@ (80026d8 <main+0xac>)
 80026ac:	f000 fe9e 	bl	80033ec <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80026b0:	210c      	movs	r1, #12
 80026b2:	0020      	movs	r0, r4
 80026b4:	f001 fff4 	bl	80046a0 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim2);
 80026b8:	4808      	ldr	r0, [pc, #32]	@ (80026dc <main+0xb0>)
 80026ba:	f001 ff59 	bl	8004570 <HAL_TIM_Base_Start>
		HAL_Delay(5);
 80026be:	2005      	movs	r0, #5
 80026c0:	f000 fb66 	bl	8002d90 <HAL_Delay>
	while (1)
 80026c4:	e7fb      	b.n	80026be <main+0x92>
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	2000021c 	.word	0x2000021c
 80026cc:	200002b0 	.word	0x200002b0
 80026d0:	ffffff00 	.word	0xffffff00
 80026d4:	20000258 	.word	0x20000258
 80026d8:	20000084 	.word	0x20000084
 80026dc:	20000264 	.word	0x20000264

080026e0 <Error_Handler>:
 80026e0:	b672      	cpsid	i
	while (1)
 80026e2:	e7fe      	b.n	80026e2 <Error_Handler+0x2>

080026e4 <MX_SPI2_Init>:
extern MA330_t ma330data;
/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	46de      	mov	lr, fp
 80026e8:	4657      	mov	r7, sl
 80026ea:	464e      	mov	r6, r9
 80026ec:	4645      	mov	r5, r8
 80026ee:	b5e0      	push	{r5, r6, r7, lr}
 80026f0:	b095      	sub	sp, #84	@ 0x54

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80026f2:	2228      	movs	r2, #40	@ 0x28
 80026f4:	2100      	movs	r1, #0
 80026f6:	a80a      	add	r0, sp, #40	@ 0x28
 80026f8:	f002 fcb8 	bl	800506c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	2210      	movs	r2, #16
 80026fe:	2100      	movs	r1, #0
 8002700:	a806      	add	r0, sp, #24
 8002702:	f002 fcb3 	bl	800506c <memset>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8002706:	2180      	movs	r1, #128	@ 0x80
 8002708:	4b5b      	ldr	r3, [pc, #364]	@ (8002878 <MX_SPI2_Init+0x194>)
 800270a:	01c9      	lsls	r1, r1, #7
 800270c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270e:	20a0      	movs	r0, #160	@ 0xa0
 8002710:	430a      	orrs	r2, r1
 8002712:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8002714:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002716:	05c0      	lsls	r0, r0, #23
 8002718:	400a      	ands	r2, r1
 800271a:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800271c:	9a03      	ldr	r2, [sp, #12]
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800271e:	2201      	movs	r2, #1
 8002720:	6b59      	ldr	r1, [r3, #52]	@ 0x34

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002722:	2400      	movs	r4, #0
 8002724:	4311      	orrs	r1, r2
 8002726:	6359      	str	r1, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002728:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800272a:	2740      	movs	r7, #64	@ 0x40
 800272c:	400a      	ands	r2, r1
  SET_BIT(RCC->IOPENR, Periphs);
 800272e:	2102      	movs	r1, #2
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002730:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002732:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 8002734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002736:	4688      	mov	r8, r1
 8002738:	430a      	orrs	r2, r1
 800273a:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800273c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800273e:	2201      	movs	r2, #1
 8002740:	400b      	ands	r3, r1
 8002742:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002744:	9b01      	ldr	r3, [sp, #4]
 8002746:	2302      	movs	r3, #2
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002748:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800274a:	9204      	str	r2, [sp, #16]
 800274c:	9305      	str	r3, [sp, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f002 fbcb 	bl	8004ee8 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002752:	4643      	mov	r3, r8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002754:	2200      	movs	r2, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002756:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002758:	2304      	movs	r3, #4
 800275a:	9208      	str	r2, [sp, #32]
 800275c:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	4b47      	ldr	r3, [pc, #284]	@ (800287c <MX_SPI2_Init+0x198>)
 8002760:	a904      	add	r1, sp, #16
 8002762:	0018      	movs	r0, r3
 8002764:	4699      	mov	r9, r3
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002766:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002768:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800276a:	9704      	str	r7, [sp, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276c:	f002 fbbc 	bl	8004ee8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002770:	4643      	mov	r3, r8
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002772:	2680      	movs	r6, #128	@ 0x80
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002774:	2200      	movs	r2, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002776:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002778:	2301      	movs	r3, #1
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277a:	a904      	add	r1, sp, #16
 800277c:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800277e:	9208      	str	r2, [sp, #32]
 8002780:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002782:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002784:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002786:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002788:	f002 fbae 	bl	8004ee8 <LL_GPIO_Init>
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800278c:	213f      	movs	r1, #63	@ 0x3f
 800278e:	4a3c      	ldr	r2, [pc, #240]	@ (8002880 <MX_SPI2_Init+0x19c>)
 8002790:	468b      	mov	fp, r1
 8002792:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8002794:	483b      	ldr	r0, [pc, #236]	@ (8002884 <MX_SPI2_Init+0x1a0>)
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8002796:	438b      	bics	r3, r1
 8002798:	392d      	subs	r1, #45	@ 0x2d
 800279a:	430b      	orrs	r3, r1
 800279c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800279e:	4b3a      	ldr	r3, [pc, #232]	@ (8002888 <MX_SPI2_Init+0x1a4>)
 80027a0:	493a      	ldr	r1, [pc, #232]	@ (800288c <MX_SPI2_Init+0x1a8>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	468a      	mov	sl, r1
 80027a6:	400a      	ands	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4938      	ldr	r1, [pc, #224]	@ (8002890 <MX_SPI2_Init+0x1ac>)
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ae:	2510      	movs	r5, #16
 80027b0:	4689      	mov	r9, r1
 80027b2:	400a      	ands	r2, r1
 80027b4:	2180      	movs	r1, #128	@ 0x80
 80027b6:	0149      	lsls	r1, r1, #5
 80027b8:	468c      	mov	ip, r1
 80027ba:	430a      	orrs	r2, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80027bc:	2120      	movs	r1, #32
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80027be:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4688      	mov	r8, r1
 80027c4:	438a      	bics	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80027c8:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80027ca:	4932      	ldr	r1, [pc, #200]	@ (8002894 <MX_SPI2_Init+0x1b0>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80027cc:	43ba      	bics	r2, r7
 80027ce:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	43b2      	bics	r2, r6
 80027d4:	4332      	orrs	r2, r6
 80027d6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4002      	ands	r2, r0
 80027dc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	400a      	ands	r2, r1
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80027e2:	4659      	mov	r1, fp
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80027e4:	601a      	str	r2, [r3, #0]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80027e6:	4a2c      	ldr	r2, [pc, #176]	@ (8002898 <MX_SPI2_Init+0x1b4>)
 80027e8:	6813      	ldr	r3, [r2, #0]
 80027ea:	438b      	bics	r3, r1
 80027ec:	392c      	subs	r1, #44	@ 0x2c
 80027ee:	430b      	orrs	r3, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80027f0:	4651      	mov	r1, sl
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80027f2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80027f4:	4b29      	ldr	r3, [pc, #164]	@ (800289c <MX_SPI2_Init+0x1b8>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	400a      	ands	r2, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80027fa:	4649      	mov	r1, r9
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80027fc:	432a      	orrs	r2, r5
 80027fe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	400a      	ands	r2, r1
 8002804:	4661      	mov	r1, ip
 8002806:	430a      	orrs	r2, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8002808:	4641      	mov	r1, r8
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800280a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	438a      	bics	r2, r1
 8002810:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8002812:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8002814:	491f      	ldr	r1, [pc, #124]	@ (8002894 <MX_SPI2_Init+0x1b0>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8002816:	43ba      	bics	r2, r7
 8002818:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	43b2      	bics	r2, r6
 800281e:	4332      	orrs	r2, r6
 8002820:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8002822:	681a      	ldr	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002824:	3e78      	subs	r6, #120	@ 0x78
 8002826:	4002      	ands	r2, r0
 8002828:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	400a      	ands	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002830:	2382      	movs	r3, #130	@ 0x82
 8002832:	005b      	lsls	r3, r3, #1
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002834:	940a      	str	r4, [sp, #40]	@ 0x28
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002836:	930b      	str	r3, [sp, #44]	@ 0x2c
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002838:	23e0      	movs	r3, #224	@ 0xe0
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	930c      	str	r3, [sp, #48]	@ 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800283e:	2380      	movs	r3, #128	@ 0x80
 8002840:	009b      	lsls	r3, r3, #2
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002842:	2200      	movs	r2, #0
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002844:	930f      	str	r3, [sp, #60]	@ 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002846:	2307      	movs	r3, #7
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8002848:	940d      	str	r4, [sp, #52]	@ 0x34
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800284a:	940e      	str	r4, [sp, #56]	@ 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800284c:	9411      	str	r4, [sp, #68]	@ 0x44
  SPI_InitStruct.CRCPoly = 7;
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800284e:	4c14      	ldr	r4, [pc, #80]	@ (80028a0 <MX_SPI2_Init+0x1bc>)
 8002850:	a90a      	add	r1, sp, #40	@ 0x28
 8002852:	0020      	movs	r0, r4
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002854:	9212      	str	r2, [sp, #72]	@ 0x48
 8002856:	9313      	str	r3, [sp, #76]	@ 0x4c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002858:	9610      	str	r6, [sp, #64]	@ 0x40
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800285a:	f002 fbc7 	bl	8004fec <LL_SPI_Init>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800285e:	6863      	ldr	r3, [r4, #4]
 8002860:	43ab      	bics	r3, r5
 8002862:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002864:	6863      	ldr	r3, [r4, #4]
 8002866:	4333      	orrs	r3, r6
 8002868:	6063      	str	r3, [r4, #4]
  LL_SPI_EnableNSSPulseMgt(SPI2);
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800286a:	b015      	add	sp, #84	@ 0x54
 800286c:	bcf0      	pop	{r4, r5, r6, r7}
 800286e:	46bb      	mov	fp, r7
 8002870:	46b2      	mov	sl, r6
 8002872:	46a9      	mov	r9, r5
 8002874:	46a0      	mov	r8, r4
 8002876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	50000400 	.word	0x50000400
 8002880:	40020804 	.word	0x40020804
 8002884:	fffffcff 	.word	0xfffffcff
 8002888:	4002001c 	.word	0x4002001c
 800288c:	ffffbfef 	.word	0xffffbfef
 8002890:	ffffcfff 	.word	0xffffcfff
 8002894:	fffff3ff 	.word	0xfffff3ff
 8002898:	40020808 	.word	0x40020808
 800289c:	40020030 	.word	0x40020030
 80028a0:	40003800 	.word	0x40003800

080028a4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a4:	2201      	movs	r2, #1
 80028a6:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <HAL_MspInit+0x2c>)
{
 80028a8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028aa:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80028ac:	4311      	orrs	r1, r2
 80028ae:	6419      	str	r1, [r3, #64]	@ 0x40
 80028b0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80028b2:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80028b4:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b6:	9200      	str	r2, [sp, #0]
 80028b8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028bc:	0549      	lsls	r1, r1, #21
 80028be:	430a      	orrs	r2, r1
 80028c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c4:	400b      	ands	r3, r1
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ca:	b002      	add	sp, #8
 80028cc:	4770      	bx	lr
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	40021000 	.word	0x40021000

080028d4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028d4:	e7fe      	b.n	80028d4 <NMI_Handler>
 80028d6:	46c0      	nop			@ (mov r8, r8)

080028d8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <HardFault_Handler>
 80028da:	46c0      	nop			@ (mov r8, r8)

080028dc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80028dc:	4770      	bx	lr
 80028de:	46c0      	nop			@ (mov r8, r8)

080028e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80028e0:	4770      	bx	lr
 80028e2:	46c0      	nop			@ (mov r8, r8)

080028e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e6:	f000 fa41 	bl	8002d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ea:	bd10      	pop	{r4, pc}

080028ec <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80028ec:	2080      	movs	r0, #128	@ 0x80
{
 80028ee:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80028f0:	0140      	lsls	r0, r0, #5
 80028f2:	f001 f86d 	bl	80039d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80028f6:	bd10      	pop	{r4, pc}

080028f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028fa:	4802      	ldr	r0, [pc, #8]	@ (8002904 <DMA1_Channel1_IRQHandler+0xc>)
 80028fc:	f000 fefe 	bl	80036fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002900:	bd10      	pop	{r4, pc}
 8002902:	46c0      	nop			@ (mov r8, r8)
 8002904:	20000028 	.word	0x20000028

08002908 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002908:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
	Put_inside_DMA1_Channel2_3_IRQ(&ma330data);
 800290a:	4802      	ldr	r0, [pc, #8]	@ (8002914 <DMA1_Channel2_3_IRQHandler+0xc>)
 800290c:	f7ff faec 	bl	8001ee8 <Put_inside_DMA1_Channel2_3_IRQ>

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002910:	bd10      	pop	{r4, pc}
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	2000021c 	.word	0x2000021c

08002918 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002918:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800291a:	4802      	ldr	r0, [pc, #8]	@ (8002924 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 800291c:	f001 ff7e 	bl	800481c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002920:	bd10      	pop	{r4, pc}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	200002b0 	.word	0x200002b0

08002928 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002928:	4770      	bx	lr
 800292a:	46c0      	nop			@ (mov r8, r8)

0800292c <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800292c:	b510      	push	{r4, lr}
 800292e:	b088      	sub	sp, #32

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002930:	2210      	movs	r2, #16
 8002932:	2100      	movs	r1, #0
 8002934:	a804      	add	r0, sp, #16
 8002936:	f002 fb99 	bl	800506c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800293a:	220c      	movs	r2, #12
 800293c:	2100      	movs	r1, #0
 800293e:	a801      	add	r0, sp, #4
 8002940:	f002 fb94 	bl	800506c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	4c16      	ldr	r4, [pc, #88]	@ (80029a0 <MX_TIM2_Init+0x74>)
 8002948:	05db      	lsls	r3, r3, #23
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
 800294a:	2201      	movs	r2, #1
  htim2.Instance = TIM2;
 800294c:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 800294e:	2300      	movs	r3, #0
  htim2.Init.Period = 4294967295;
 8002950:	4252      	negs	r2, r2
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002952:	0020      	movs	r0, r4
  htim2.Init.Prescaler = 0;
 8002954:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002956:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 4294967295;
 8002958:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800295a:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800295e:	f002 f86d 	bl	8004a3c <HAL_TIM_Base_Init>
 8002962:	2800      	cmp	r0, #0
 8002964:	d113      	bne.n	800298e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002966:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002968:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800296a:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800296c:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800296e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002970:	f001 fe9a 	bl	80046a8 <HAL_TIM_ConfigClockSource>
 8002974:	2800      	cmp	r0, #0
 8002976:	d110      	bne.n	800299a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002978:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800297a:	0020      	movs	r0, r4
 800297c:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800297e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002980:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002982:	f002 f9db 	bl	8004d3c <HAL_TIMEx_MasterConfigSynchronization>
 8002986:	2800      	cmp	r0, #0
 8002988:	d104      	bne.n	8002994 <MX_TIM2_Init+0x68>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800298a:	b008      	add	sp, #32
 800298c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800298e:	f7ff fea7 	bl	80026e0 <Error_Handler>
 8002992:	e7e8      	b.n	8002966 <MX_TIM2_Init+0x3a>
    Error_Handler();
 8002994:	f7ff fea4 	bl	80026e0 <Error_Handler>
}
 8002998:	e7f7      	b.n	800298a <MX_TIM2_Init+0x5e>
    Error_Handler();
 800299a:	f7ff fea1 	bl	80026e0 <Error_Handler>
 800299e:	e7eb      	b.n	8002978 <MX_TIM2_Init+0x4c>
 80029a0:	20000264 	.word	0x20000264

080029a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029a4:	b510      	push	{r4, lr}
 80029a6:	0004      	movs	r4, r0
 80029a8:	b094      	sub	sp, #80	@ 0x50

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029aa:	2214      	movs	r2, #20
 80029ac:	2100      	movs	r1, #0
 80029ae:	a804      	add	r0, sp, #16
 80029b0:	f002 fb5c 	bl	800506c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029b4:	2228      	movs	r2, #40	@ 0x28
 80029b6:	2100      	movs	r1, #0
 80029b8:	a80a      	add	r0, sp, #40	@ 0x28
 80029ba:	f002 fb57 	bl	800506c <memset>
  if(tim_baseHandle->Instance==TIM1)
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	4a23      	ldr	r2, [pc, #140]	@ (8002a50 <HAL_TIM_Base_MspInit+0xac>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00f      	beq.n	80029e6 <HAL_TIM_Base_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 80029c6:	2280      	movs	r2, #128	@ 0x80
 80029c8:	05d2      	lsls	r2, r2, #23
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d001      	beq.n	80029d2 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80029ce:	b014      	add	sp, #80	@ 0x50
 80029d0:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029d2:	2301      	movs	r3, #1
 80029d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a54 <HAL_TIM_Base_MspInit+0xb0>)
 80029d6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80029d8:	4319      	orrs	r1, r3
 80029da:	63d1      	str	r1, [r2, #60]	@ 0x3c
 80029dc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029de:	4013      	ands	r3, r2
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	9b03      	ldr	r3, [sp, #12]
}
 80029e4:	e7f3      	b.n	80029ce <HAL_TIM_Base_MspInit+0x2a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80029e6:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029e8:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80029ea:	039b      	lsls	r3, r3, #14
 80029ec:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029ee:	f001 fbb7 	bl	8004160 <HAL_RCCEx_PeriphCLKConfig>
 80029f2:	2800      	cmp	r0, #0
 80029f4:	d128      	bne.n	8002a48 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029f6:	2180      	movs	r1, #128	@ 0x80
 80029f8:	4b16      	ldr	r3, [pc, #88]	@ (8002a54 <HAL_TIM_Base_MspInit+0xb0>)
 80029fa:	0109      	lsls	r1, r1, #4
 80029fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029fe:	2080      	movs	r0, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a00:	430a      	orrs	r2, r1
 8002a02:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a06:	0140      	lsls	r0, r0, #5
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a08:	400a      	ands	r2, r1
 8002a0a:	9201      	str	r2, [sp, #4]
 8002a0c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0e:	2202      	movs	r2, #2
 8002a10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a12:	4311      	orrs	r1, r2
 8002a14:	6359      	str	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a16:	2112      	movs	r1, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a1a:	9004      	str	r0, [sp, #16]
 8002a1c:	9105      	str	r1, [sp, #20]
 8002a1e:	2001      	movs	r0, #1
 8002a20:	2100      	movs	r1, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a22:	4013      	ands	r3, r2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a24:	9006      	str	r0, [sp, #24]
 8002a26:	9107      	str	r1, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a28:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2a:	a904      	add	r1, sp, #16
 8002a2c:	480a      	ldr	r0, [pc, #40]	@ (8002a58 <HAL_TIM_Base_MspInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002a30:	9208      	str	r2, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a32:	f000 febf 	bl	80037b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2100      	movs	r1, #0
 8002a3a:	200d      	movs	r0, #13
 8002a3c:	f000 fd30 	bl	80034a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002a40:	200d      	movs	r0, #13
 8002a42:	f000 fd57 	bl	80034f4 <HAL_NVIC_EnableIRQ>
 8002a46:	e7c2      	b.n	80029ce <HAL_TIM_Base_MspInit+0x2a>
      Error_Handler();
 8002a48:	f7ff fe4a 	bl	80026e0 <Error_Handler>
 8002a4c:	e7d3      	b.n	80029f6 <HAL_TIM_Base_MspInit+0x52>
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	40012c00 	.word	0x40012c00
 8002a54:	40021000 	.word	0x40021000
 8002a58:	50000400 	.word	0x50000400

08002a5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a5c:	b510      	push	{r4, lr}
 8002a5e:	0004      	movs	r4, r0
 8002a60:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a62:	2214      	movs	r2, #20
 8002a64:	2100      	movs	r1, #0
 8002a66:	a802      	add	r0, sp, #8
 8002a68:	f002 fb00 	bl	800506c <memset>
  if(timHandle->Instance==TIM1)
 8002a6c:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <HAL_TIM_MspPostInit+0x70>)
 8002a6e:	6822      	ldr	r2, [r4, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a74:	b008      	add	sp, #32
 8002a76:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a78:	2402      	movs	r4, #2
 8002a7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ad0 <HAL_TIM_MspPostInit+0x74>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7c:	4815      	ldr	r0, [pc, #84]	@ (8002ad4 <HAL_TIM_MspPostInit+0x78>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a80:	4322      	orrs	r2, r4
 8002a82:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a86:	4022      	ands	r2, r4
 8002a88:	9200      	str	r2, [sp, #0]
 8002a8a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a90:	4311      	orrs	r1, r2
 8002a92:	6359      	str	r1, [r3, #52]	@ 0x34
 8002a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a96:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a98:	401a      	ands	r2, r3
 8002a9a:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a9c:	22e0      	movs	r2, #224	@ 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	0212      	lsls	r2, r2, #8
 8002aa4:	9202      	str	r2, [sp, #8]
 8002aa6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002aa8:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aaa:	f000 fe83 	bl	80037b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002aae:	23e0      	movs	r3, #224	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab0:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	a902      	add	r1, sp, #8
 8002aba:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002ac2:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac4:	f000 fe76 	bl	80037b4 <HAL_GPIO_Init>
}
 8002ac8:	e7d4      	b.n	8002a74 <HAL_TIM_MspPostInit+0x18>
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	40012c00 	.word	0x40012c00
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	50000400 	.word	0x50000400

08002ad8 <MX_TIM1_Init>:
{
 8002ad8:	b510      	push	{r4, lr}
 8002ada:	b0a0      	sub	sp, #128	@ 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002adc:	2210      	movs	r2, #16
 8002ade:	2100      	movs	r1, #0
 8002ae0:	a808      	add	r0, sp, #32
 8002ae2:	f002 fac3 	bl	800506c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4668      	mov	r0, sp
 8002aec:	f002 fabe 	bl	800506c <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002af0:	220c      	movs	r2, #12
 8002af2:	2100      	movs	r1, #0
 8002af4:	a804      	add	r0, sp, #16
 8002af6:	f002 fab9 	bl	800506c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002afa:	221c      	movs	r2, #28
 8002afc:	2100      	movs	r1, #0
 8002afe:	a80c      	add	r0, sp, #48	@ 0x30
 8002b00:	f002 fab4 	bl	800506c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b04:	2234      	movs	r2, #52	@ 0x34
 8002b06:	2100      	movs	r1, #0
 8002b08:	a813      	add	r0, sp, #76	@ 0x4c
 8002b0a:	f002 faaf 	bl	800506c <memset>
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002b0e:	2220      	movs	r2, #32
  htim1.Instance = TIM1;
 8002b10:	4c55      	ldr	r4, [pc, #340]	@ (8002c68 <MX_TIM1_Init+0x190>)
 8002b12:	4b56      	ldr	r3, [pc, #344]	@ (8002c6c <MX_TIM1_Init+0x194>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002b14:	60a2      	str	r2, [r4, #8]
  htim1.Init.Period = 1600;
 8002b16:	22c8      	movs	r2, #200	@ 0xc8
  htim1.Instance = TIM1;
 8002b18:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
 8002b1a:	2300      	movs	r3, #0
  htim1.Init.Period = 1600;
 8002b1c:	00d2      	lsls	r2, r2, #3
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b1e:	0020      	movs	r0, r4
  htim1.Init.Prescaler = 0;
 8002b20:	6063      	str	r3, [r4, #4]
  htim1.Init.Period = 1600;
 8002b22:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b24:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b26:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b28:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b2a:	f001 ff87 	bl	8004a3c <HAL_TIM_Base_Init>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	d000      	beq.n	8002b34 <MX_TIM1_Init+0x5c>
 8002b32:	e07b      	b.n	8002c2c <MX_TIM1_Init+0x154>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b34:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b36:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b38:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b3a:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b3c:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b3e:	f001 fdb3 	bl	80046a8 <HAL_TIM_ConfigClockSource>
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d000      	beq.n	8002b48 <MX_TIM1_Init+0x70>
 8002b46:	e08c      	b.n	8002c62 <MX_TIM1_Init+0x18a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b48:	0020      	movs	r0, r4
 8002b4a:	f001 ffa7 	bl	8004a9c <HAL_TIM_PWM_Init>
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	d000      	beq.n	8002b54 <MX_TIM1_Init+0x7c>
 8002b52:	e083      	b.n	8002c5c <MX_TIM1_Init+0x184>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b54:	23e0      	movs	r3, #224	@ 0xe0
 8002b56:	2200      	movs	r2, #0
 8002b58:	03db      	lsls	r3, r3, #15
 8002b5a:	9200      	str	r2, [sp, #0]
 8002b5c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b5e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b60:	4669      	mov	r1, sp
 8002b62:	0020      	movs	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b64:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b66:	f002 f8e9 	bl	8004d3c <HAL_TIMEx_MasterConfigSynchronization>
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d000      	beq.n	8002b70 <MX_TIM1_Init+0x98>
 8002b6e:	e072      	b.n	8002c56 <MX_TIM1_Init+0x17e>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8002b70:	2201      	movs	r2, #1
 8002b72:	2301      	movs	r3, #1
 8002b74:	9204      	str	r2, [sp, #16]
 8002b76:	9305      	str	r3, [sp, #20]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002b78:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	0020      	movs	r0, r4
 8002b7e:	aa04      	add	r2, sp, #16
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002b80:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002b82:	f002 f973 	bl	8004e6c <HAL_TIMEx_ConfigBreakInput>
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d162      	bne.n	8002c50 <MX_TIM1_Init+0x178>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b8a:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002b8c:	2004      	movs	r0, #4
 8002b8e:	2100      	movs	r1, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b90:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002b92:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002b94:	9010      	str	r0, [sp, #64]	@ 0x40
 8002b96:	9111      	str	r1, [sp, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	0020      	movs	r0, r4
 8002b9c:	a90c      	add	r1, sp, #48	@ 0x30
  sConfigOC.Pulse = 0;
 8002b9e:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ba0:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ba2:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ba4:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ba6:	f001 ffe5 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d14d      	bne.n	8002c4a <MX_TIM1_Init+0x172>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bae:	2204      	movs	r2, #4
 8002bb0:	0020      	movs	r0, r4
 8002bb2:	a90c      	add	r1, sp, #48	@ 0x30
 8002bb4:	f001 ffde 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	d143      	bne.n	8002c44 <MX_TIM1_Init+0x16c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	0020      	movs	r0, r4
 8002bc0:	a90c      	add	r1, sp, #48	@ 0x30
 8002bc2:	f001 ffd7 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d139      	bne.n	8002c3e <MX_TIM1_Init+0x166>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002bca:	2270      	movs	r2, #112	@ 0x70
 8002bcc:	4b28      	ldr	r3, [pc, #160]	@ (8002c70 <MX_TIM1_Init+0x198>)
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bce:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002bd0:	920c      	str	r2, [sp, #48]	@ 0x30
 8002bd2:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bd4:	a90c      	add	r1, sp, #48	@ 0x30
 8002bd6:	3a64      	subs	r2, #100	@ 0x64
 8002bd8:	f001 ffcc 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d12b      	bne.n	8002c38 <MX_TIM1_Init+0x160>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002be0:	6822      	ldr	r2, [r4, #0]
 8002be2:	4924      	ldr	r1, [pc, #144]	@ (8002c74 <MX_TIM1_Init+0x19c>)
 8002be4:	69d3      	ldr	r3, [r2, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002be6:	0020      	movs	r0, r4
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002be8:	400b      	ands	r3, r1
 8002bea:	61d3      	str	r3, [r2, #28]
  sBreakDeadTimeConfig.DeadTime = 26;
 8002bec:	221a      	movs	r2, #26
 8002bee:	9216      	str	r2, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002bf0:	2280      	movs	r2, #128	@ 0x80
 8002bf2:	0152      	lsls	r2, r2, #5
 8002bf4:	9217      	str	r2, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bf6:	2280      	movs	r2, #128	@ 0x80
 8002bf8:	0192      	lsls	r2, r2, #6
 8002bfa:	9218      	str	r2, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.BreakFilter = 3;
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	9219      	str	r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c00:	2280      	movs	r2, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c02:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c04:	0492      	lsls	r2, r2, #18
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c06:	a913      	add	r1, sp, #76	@ 0x4c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c08:	9313      	str	r3, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c0a:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c0c:	9315      	str	r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002c0e:	931a      	str	r3, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c10:	931b      	str	r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c12:	921c      	str	r2, [sp, #112]	@ 0x70
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c14:	931d      	str	r3, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002c16:	931e      	str	r3, [sp, #120]	@ 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c18:	931f      	str	r3, [sp, #124]	@ 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c1a:	f002 f8c7 	bl	8004dac <HAL_TIMEx_ConfigBreakDeadTime>
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d107      	bne.n	8002c32 <MX_TIM1_Init+0x15a>
  HAL_TIM_MspPostInit(&htim1);
 8002c22:	0020      	movs	r0, r4
 8002c24:	f7ff ff1a 	bl	8002a5c <HAL_TIM_MspPostInit>
}
 8002c28:	b020      	add	sp, #128	@ 0x80
 8002c2a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002c2c:	f7ff fd58 	bl	80026e0 <Error_Handler>
 8002c30:	e780      	b.n	8002b34 <MX_TIM1_Init+0x5c>
    Error_Handler();
 8002c32:	f7ff fd55 	bl	80026e0 <Error_Handler>
 8002c36:	e7f4      	b.n	8002c22 <MX_TIM1_Init+0x14a>
    Error_Handler();
 8002c38:	f7ff fd52 	bl	80026e0 <Error_Handler>
 8002c3c:	e7d0      	b.n	8002be0 <MX_TIM1_Init+0x108>
    Error_Handler();
 8002c3e:	f7ff fd4f 	bl	80026e0 <Error_Handler>
 8002c42:	e7c2      	b.n	8002bca <MX_TIM1_Init+0xf2>
    Error_Handler();
 8002c44:	f7ff fd4c 	bl	80026e0 <Error_Handler>
 8002c48:	e7b8      	b.n	8002bbc <MX_TIM1_Init+0xe4>
    Error_Handler();
 8002c4a:	f7ff fd49 	bl	80026e0 <Error_Handler>
 8002c4e:	e7ae      	b.n	8002bae <MX_TIM1_Init+0xd6>
    Error_Handler();
 8002c50:	f7ff fd46 	bl	80026e0 <Error_Handler>
 8002c54:	e799      	b.n	8002b8a <MX_TIM1_Init+0xb2>
    Error_Handler();
 8002c56:	f7ff fd43 	bl	80026e0 <Error_Handler>
 8002c5a:	e789      	b.n	8002b70 <MX_TIM1_Init+0x98>
    Error_Handler();
 8002c5c:	f7ff fd40 	bl	80026e0 <Error_Handler>
 8002c60:	e778      	b.n	8002b54 <MX_TIM1_Init+0x7c>
    Error_Handler();
 8002c62:	f7ff fd3d 	bl	80026e0 <Error_Handler>
 8002c66:	e76f      	b.n	8002b48 <MX_TIM1_Init+0x70>
 8002c68:	200002b0 	.word	0x200002b0
 8002c6c:	40012c00 	.word	0x40012c00
 8002c70:	0000060d 	.word	0x0000060d
 8002c74:	fffff7ff 	.word	0xfffff7ff

08002c78 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance == TIM1) {
 8002c78:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c7a:	6802      	ldr	r2, [r0, #0]
{
 8002c7c:	b510      	push	{r4, lr}
    if (htim->Instance == TIM1) {
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d000      	beq.n	8002c84 <HAL_TIM_PeriodElapsedCallback+0xc>
    	tps1=TIM2->CNT;
    	MA330_start(&ma330data);
    }
}
 8002c82:	bd10      	pop	{r4, pc}
    	tps1=TIM2->CNT;
 8002c84:	2380      	movs	r3, #128	@ 0x80
 8002c86:	05db      	lsls	r3, r3, #23
 8002c88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c8a:	4b04      	ldr	r3, [pc, #16]	@ (8002c9c <HAL_TIM_PeriodElapsedCallback+0x24>)
    	MA330_start(&ma330data);
 8002c8c:	4804      	ldr	r0, [pc, #16]	@ (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x28>)
    	tps1=TIM2->CNT;
 8002c8e:	601a      	str	r2, [r3, #0]
    	MA330_start(&ma330data);
 8002c90:	f7ff fa30 	bl	80020f4 <MA330_start>
}
 8002c94:	e7f5      	b.n	8002c82 <HAL_TIM_PeriodElapsedCallback+0xa>
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	200000e8 	.word	0x200000e8
 8002ca0:	2000021c 	.word	0x2000021c

08002ca4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ca4:	480d      	ldr	r0, [pc, #52]	@ (8002cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ca6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ca8:	f7ff fe3e 	bl	8002928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cac:	480c      	ldr	r0, [pc, #48]	@ (8002ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cae:	490d      	ldr	r1, [pc, #52]	@ (8002ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce8 <LoopForever+0xe>)
  movs r3, #0
 8002cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb4:	e002      	b.n	8002cbc <LoopCopyDataInit>

08002cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cba:	3304      	adds	r3, #4

08002cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc0:	d3f9      	bcc.n	8002cb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8002cf0 <LoopForever+0x16>)
  movs r3, #0
 8002cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc8:	e001      	b.n	8002cce <LoopFillZerobss>

08002cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ccc:	3204      	adds	r2, #4

08002cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd0:	d3fb      	bcc.n	8002cca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cd2:	f002 f9d3 	bl	800507c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002cd6:	f7ff fca9 	bl	800262c <main>

08002cda <LoopForever>:

LoopForever:
  b LoopForever
 8002cda:	e7fe      	b.n	8002cda <LoopForever>
  ldr   r0, =_estack
 8002cdc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002ce8:	08005278 	.word	0x08005278
  ldr r2, =_sbss
 8002cec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002cf0:	20000300 	.word	0x20000300

08002cf4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cf4:	e7fe      	b.n	8002cf4 <ADC1_IRQHandler>
	...

08002cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002d38 <HAL_InitTick+0x40>)
{
 8002cfc:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8002cfe:	7819      	ldrb	r1, [r3, #0]
 8002d00:	2900      	cmp	r1, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d04:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002d08:	20fa      	movs	r0, #250	@ 0xfa
 8002d0a:	0080      	lsls	r0, r0, #2
 8002d0c:	f7fd f9fa 	bl	8000104 <__udivsi3>
 8002d10:	4d0a      	ldr	r5, [pc, #40]	@ (8002d3c <HAL_InitTick+0x44>)
 8002d12:	0001      	movs	r1, r0
 8002d14:	6828      	ldr	r0, [r5, #0]
 8002d16:	f7fd f9f5 	bl	8000104 <__udivsi3>
 8002d1a:	f000 fbf7 	bl	800350c <HAL_SYSTICK_Config>
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d22:	2c03      	cmp	r4, #3
 8002d24:	d8ee      	bhi.n	8002d04 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d26:	3801      	subs	r0, #1
 8002d28:	2200      	movs	r2, #0
 8002d2a:	0021      	movs	r1, r4
 8002d2c:	f000 fbb8 	bl	80034a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d30:	4b03      	ldr	r3, [pc, #12]	@ (8002d40 <HAL_InitTick+0x48>)
 8002d32:	2000      	movs	r0, #0
 8002d34:	601c      	str	r4, [r3, #0]
  return status;
 8002d36:	e7e6      	b.n	8002d06 <HAL_InitTick+0xe>
 8002d38:	20000004 	.word	0x20000004
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	20000008 	.word	0x20000008

08002d44 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	4a08      	ldr	r2, [pc, #32]	@ (8002d68 <HAL_Init+0x24>)
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	6811      	ldr	r1, [r2, #0]
{
 8002d4c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d4e:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d50:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d52:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d54:	f7ff ffd0 	bl	8002cf8 <HAL_InitTick>
 8002d58:	1e04      	subs	r4, r0, #0
 8002d5a:	d002      	beq.n	8002d62 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8002d5c:	2401      	movs	r4, #1
}
 8002d5e:	0020      	movs	r0, r4
 8002d60:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8002d62:	f7ff fd9f 	bl	80028a4 <HAL_MspInit>
 8002d66:	e7fa      	b.n	8002d5e <HAL_Init+0x1a>
 8002d68:	40022000 	.word	0x40022000

08002d6c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002d6c:	4a03      	ldr	r2, [pc, #12]	@ (8002d7c <HAL_IncTick+0x10>)
 8002d6e:	4b04      	ldr	r3, [pc, #16]	@ (8002d80 <HAL_IncTick+0x14>)
 8002d70:	6811      	ldr	r1, [r2, #0]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	185b      	adds	r3, r3, r1
 8002d76:	6013      	str	r3, [r2, #0]
}
 8002d78:	4770      	bx	lr
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	200002fc 	.word	0x200002fc
 8002d80:	20000004 	.word	0x20000004

08002d84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002d84:	4b01      	ldr	r3, [pc, #4]	@ (8002d8c <HAL_GetTick+0x8>)
 8002d86:	6818      	ldr	r0, [r3, #0]
}
 8002d88:	4770      	bx	lr
 8002d8a:	46c0      	nop			@ (mov r8, r8)
 8002d8c:	200002fc 	.word	0x200002fc

08002d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7ff fff6 	bl	8002d84 <HAL_GetTick>
 8002d98:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d9a:	1c63      	adds	r3, r4, #1
 8002d9c:	d002      	beq.n	8002da4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d9e:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <HAL_Delay+0x20>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002da4:	f7ff ffee 	bl	8002d84 <HAL_GetTick>
 8002da8:	1b40      	subs	r0, r0, r5
 8002daa:	42a0      	cmp	r0, r4
 8002dac:	d3fa      	bcc.n	8002da4 <HAL_Delay+0x14>
  {
  }
}
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	20000004 	.word	0x20000004

08002db4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db6:	46d6      	mov	lr, sl
 8002db8:	464f      	mov	r7, r9
 8002dba:	4646      	mov	r6, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002dbc:	2300      	movs	r3, #0
{
 8002dbe:	b5c0      	push	{r6, r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8002dc4:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002dc6:	d02c      	beq.n	8002e22 <HAL_ADC_Init+0x6e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dc8:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8002dca:	2d00      	cmp	r5, #0
 8002dcc:	d100      	bne.n	8002dd0 <HAL_ADC_Init+0x1c>
 8002dce:	e0cc      	b.n	8002f6a <HAL_ADC_Init+0x1b6>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dd0:	2380      	movs	r3, #128	@ 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dd2:	6825      	ldr	r5, [r4, #0]
 8002dd4:	055b      	lsls	r3, r3, #21
 8002dd6:	68aa      	ldr	r2, [r5, #8]
 8002dd8:	421a      	tst	r2, r3
 8002dda:	d115      	bne.n	8002e08 <HAL_ADC_Init+0x54>
  MODIFY_REG(ADCx->CR,
 8002ddc:	68aa      	ldr	r2, [r5, #8]
 8002dde:	497b      	ldr	r1, [pc, #492]	@ (8002fcc <HAL_ADC_Init+0x218>)
 8002de0:	400a      	ands	r2, r1
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002de6:	4b7a      	ldr	r3, [pc, #488]	@ (8002fd0 <HAL_ADC_Init+0x21c>)
 8002de8:	497a      	ldr	r1, [pc, #488]	@ (8002fd4 <HAL_ADC_Init+0x220>)
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	f7fd f98a 	bl	8000104 <__udivsi3>
 8002df0:	3001      	adds	r0, #1
 8002df2:	0040      	lsls	r0, r0, #1
 8002df4:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8002df6:	9b01      	ldr	r3, [sp, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_ADC_Init+0x54>
    {
      wait_loop_index--;
 8002dfc:	9b01      	ldr	r3, [sp, #4]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002e02:	9b01      	ldr	r3, [sp, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f9      	bne.n	8002dfc <HAL_ADC_Init+0x48>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e08:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	d400      	bmi.n	8002e12 <HAL_ADC_Init+0x5e>
 8002e10:	e09d      	b.n	8002f4e <HAL_ADC_Init+0x19a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e12:	68ab      	ldr	r3, [r5, #8]
 8002e14:	075b      	lsls	r3, r3, #29
 8002e16:	d50b      	bpl.n	8002e30 <HAL_ADC_Init+0x7c>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e18:	6da3      	ldr	r3, [r4, #88]	@ 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 8002e22:	2001      	movs	r0, #1

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8002e24:	b002      	add	sp, #8
 8002e26:	bce0      	pop	{r5, r6, r7}
 8002e28:	46ba      	mov	sl, r7
 8002e2a:	46b1      	mov	r9, r6
 8002e2c:	46a8      	mov	r8, r5
 8002e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e32:	06db      	lsls	r3, r3, #27
 8002e34:	d4f1      	bmi.n	8002e1a <HAL_ADC_Init+0x66>
    ADC_STATE_CLR_SET(hadc->State,
 8002e36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e38:	4a67      	ldr	r2, [pc, #412]	@ (8002fd8 <HAL_ADC_Init+0x224>)
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e3a:	6921      	ldr	r1, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	3206      	adds	r2, #6
 8002e40:	32ff      	adds	r2, #255	@ 0xff
 8002e42:	4313      	orrs	r3, r2
 8002e44:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e46:	68ab      	ldr	r3, [r5, #8]
 8002e48:	07db      	lsls	r3, r3, #31
 8002e4a:	d45c      	bmi.n	8002f06 <HAL_ADC_Init+0x152>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e4c:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8002e4e:	68a2      	ldr	r2, [r4, #8]
 8002e50:	1e7b      	subs	r3, r7, #1
 8002e52:	419f      	sbcs	r7, r3
 8002e54:	68e3      	ldr	r3, [r4, #12]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e56:	7ea6      	ldrb	r6, [r4, #26]
 8002e58:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e5a:	7e23      	ldrb	r3, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e5c:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e5e:	039b      	lsls	r3, r3, #14
 8002e60:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e62:	7e63      	ldrb	r3, [r4, #25]
 8002e64:	03db      	lsls	r3, r3, #15
 8002e66:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e68:	0373      	lsls	r3, r6, #13
 8002e6a:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e6c:	2900      	cmp	r1, #0
 8002e6e:	da00      	bge.n	8002e72 <HAL_ADC_Init+0xbe>
 8002e70:	e09b      	b.n	8002faa <HAL_ADC_Init+0x1f6>
 8002e72:	2380      	movs	r3, #128	@ 0x80
 8002e74:	039b      	lsls	r3, r3, #14
 8002e76:	469c      	mov	ip, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e78:	232c      	movs	r3, #44	@ 0x2c
 8002e7a:	5ce3      	ldrb	r3, [r4, r3]
 8002e7c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	433b      	orrs	r3, r7
 8002e82:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e84:	2720      	movs	r7, #32
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e86:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e88:	5de2      	ldrb	r2, [r4, r7]
 8002e8a:	2a01      	cmp	r2, #1
 8002e8c:	d100      	bne.n	8002e90 <HAL_ADC_Init+0xdc>
 8002e8e:	e090      	b.n	8002fb2 <HAL_ADC_Init+0x1fe>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e90:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002e92:	2a00      	cmp	r2, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_ADC_Init+0xee>
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002e96:	26e0      	movs	r6, #224	@ 0xe0
 8002e98:	0076      	lsls	r6, r6, #1
 8002e9a:	4032      	ands	r2, r6
 8002e9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002e9e:	4332      	orrs	r2, r6
 8002ea0:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 8002ea2:	273c      	movs	r7, #60	@ 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ea4:	68ea      	ldr	r2, [r5, #12]
 8002ea6:	4e4d      	ldr	r6, [pc, #308]	@ (8002fdc <HAL_ADC_Init+0x228>)
 8002ea8:	4032      	ands	r2, r6
 8002eaa:	4313      	orrs	r3, r2
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002eac:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 8002eae:	60eb      	str	r3, [r5, #12]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002eb0:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8002eb2:	5de7      	ldrb	r7, [r4, r7]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002eb4:	0fb3      	lsrs	r3, r6, #30
 8002eb6:	079b      	lsls	r3, r3, #30
 8002eb8:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8002eba:	46bc      	mov	ip, r7
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ebc:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8002ebe:	2f01      	cmp	r7, #1
 8002ec0:	d109      	bne.n	8002ed6 <HAL_ADC_Init+0x122>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002ec2:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 8002ec4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ec6:	433b      	orrs	r3, r7
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	4653      	mov	r3, sl
 8002ecc:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
 8002ece:	433a      	orrs	r2, r7
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	4663      	mov	r3, ip
 8002ed4:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 8002ed6:	692b      	ldr	r3, [r5, #16]
 8002ed8:	4f41      	ldr	r7, [pc, #260]	@ (8002fe0 <HAL_ADC_Init+0x22c>)
 8002eda:	403b      	ands	r3, r7
 8002edc:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002ede:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8002ee0:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002ee2:	0073      	lsls	r3, r6, #1
 8002ee4:	085b      	lsrs	r3, r3, #1
 8002ee6:	05d2      	lsls	r2, r2, #23
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00c      	beq.n	8002f06 <HAL_ADC_Init+0x152>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002eec:	2380      	movs	r3, #128	@ 0x80
 8002eee:	061b      	lsls	r3, r3, #24
 8002ef0:	429e      	cmp	r6, r3
 8002ef2:	d008      	beq.n	8002f06 <HAL_ADC_Init+0x152>
        MODIFY_REG(ADC1_COMMON->CCR,
 8002ef4:	4a3b      	ldr	r2, [pc, #236]	@ (8002fe4 <HAL_ADC_Init+0x230>)
 8002ef6:	4f3c      	ldr	r7, [pc, #240]	@ (8002fe8 <HAL_ADC_Init+0x234>)
 8002ef8:	6813      	ldr	r3, [r2, #0]
 8002efa:	403b      	ands	r3, r7
 8002efc:	27f0      	movs	r7, #240	@ 0xf0
 8002efe:	03bf      	lsls	r7, r7, #14
 8002f00:	403e      	ands	r6, r7
 8002f02:	4333      	orrs	r3, r6
 8002f04:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->SMPR,
 8002f06:	2607      	movs	r6, #7
 8002f08:	2770      	movs	r7, #112	@ 0x70
 8002f0a:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002f0c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002f0e:	43b3      	bics	r3, r6
 8002f10:	4313      	orrs	r3, r2
 8002f12:	616b      	str	r3, [r5, #20]
 8002f14:	696e      	ldr	r6, [r5, #20]
 8002f16:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002f18:	43be      	bics	r6, r7
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	4333      	orrs	r3, r6
 8002f1e:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002f20:	2900      	cmp	r1, #0
 8002f22:	d128      	bne.n	8002f76 <HAL_ADC_Init+0x1c2>
      SET_BIT(hadc->Instance->CHSELR,
 8002f24:	2310      	movs	r3, #16
 8002f26:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002f28:	425b      	negs	r3, r3
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002f2e:	2307      	movs	r3, #7
 8002f30:	6969      	ldr	r1, [r5, #20]
 8002f32:	400b      	ands	r3, r1
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d02f      	beq.n	8002f98 <HAL_ADC_Init+0x1e4>
      ADC_STATE_CLR_SET(hadc->State,
 8002f38:	2212      	movs	r2, #18
 8002f3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f3c:	4393      	bics	r3, r2
 8002f3e:	3a02      	subs	r2, #2
 8002f40:	4313      	orrs	r3, r2
 8002f42:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f44:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002f46:	3a0f      	subs	r2, #15
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      tmp_hal_status = HAL_ERROR;
 8002f4c:	e769      	b.n	8002e22 <HAL_ADC_Init+0x6e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4e:	2210      	movs	r2, #16
 8002f50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8002f52:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f54:	4313      	orrs	r3, r2
 8002f56:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f58:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002f5a:	3a0f      	subs	r2, #15
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f60:	68ab      	ldr	r3, [r5, #8]
 8002f62:	075b      	lsls	r3, r3, #29
 8002f64:	d400      	bmi.n	8002f68 <HAL_ADC_Init+0x1b4>
 8002f66:	e763      	b.n	8002e30 <HAL_ADC_Init+0x7c>
 8002f68:	e756      	b.n	8002e18 <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 8002f6a:	f7ff f99d 	bl	80022a8 <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 8002f6e:	2354      	movs	r3, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8002f70:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002f72:	54e5      	strb	r5, [r4, r3]
 8002f74:	e72c      	b.n	8002dd0 <HAL_ADC_Init+0x1c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f76:	2380      	movs	r3, #128	@ 0x80
 8002f78:	039b      	lsls	r3, r3, #14
 8002f7a:	4299      	cmp	r1, r3
 8002f7c:	d1d7      	bne.n	8002f2e <HAL_ADC_Init+0x17a>
      MODIFY_REG(hadc->Instance->CHSELR,
 8002f7e:	211c      	movs	r1, #28
 8002f80:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002f82:	69e3      	ldr	r3, [r4, #28]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4019      	ands	r1, r3
 8002f8a:	2310      	movs	r3, #16
 8002f8c:	425b      	negs	r3, r3
 8002f8e:	408b      	lsls	r3, r1
 8002f90:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002f92:	430b      	orrs	r3, r1
 8002f94:	62ab      	str	r3, [r5, #40]	@ 0x28
 8002f96:	e7ca      	b.n	8002f2e <HAL_ADC_Init+0x17a>
      ADC_CLEAR_ERRORCODE(hadc);
 8002f98:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002f9a:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002f9c:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002f9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002fa0:	4393      	bics	r3, r2
 8002fa2:	3a02      	subs	r2, #2
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002fa8:	e73c      	b.n	8002e24 <HAL_ADC_Init+0x70>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002faa:	004b      	lsls	r3, r1, #1
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	469c      	mov	ip, r3
 8002fb0:	e762      	b.n	8002e78 <HAL_ADC_Init+0xc4>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fb2:	2e00      	cmp	r6, #0
 8002fb4:	d103      	bne.n	8002fbe <HAL_ADC_Init+0x20a>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002fb6:	2280      	movs	r2, #128	@ 0x80
 8002fb8:	0252      	lsls	r2, r2, #9
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	e768      	b.n	8002e90 <HAL_ADC_Init+0xdc>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fbe:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 8002fc0:	433e      	orrs	r6, r7
 8002fc2:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc4:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
 8002fc6:	4332      	orrs	r2, r6
 8002fc8:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8002fca:	e761      	b.n	8002e90 <HAL_ADC_Init+0xdc>
 8002fcc:	6fffffe8 	.word	0x6fffffe8
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	00030d40 	.word	0x00030d40
 8002fd8:	fffffefd 	.word	0xfffffefd
 8002fdc:	ffde0201 	.word	0xffde0201
 8002fe0:	1ffffc02 	.word	0x1ffffc02
 8002fe4:	40012708 	.word	0x40012708
 8002fe8:	ffc3ffff 	.word	0xffc3ffff

08002fec <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8002fec:	4770      	bx	lr
 8002fee:	46c0      	nop			@ (mov r8, r8)

08002ff0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ff2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002ff4:	f7ff fffa 	bl	8002fec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ff8:	bd10      	pop	{r4, pc}
 8002ffa:	46c0      	nop			@ (mov r8, r8)

08002ffc <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002ffc:	4770      	bx	lr
 8002ffe:	46c0      	nop			@ (mov r8, r8)

08003000 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003000:	2240      	movs	r2, #64	@ 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003002:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8003004:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003006:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003008:	4313      	orrs	r3, r2
 800300a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800300c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800300e:	3a3c      	subs	r2, #60	@ 0x3c
 8003010:	4313      	orrs	r3, r2
 8003012:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003014:	f7ff fff2 	bl	8002ffc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003018:	bd10      	pop	{r4, pc}
 800301a:	46c0      	nop			@ (mov r8, r8)

0800301c <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800301c:	2150      	movs	r1, #80	@ 0x50
{
 800301e:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003020:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8003022:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003024:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003026:	4211      	tst	r1, r2
 8003028:	d10d      	bne.n	8003046 <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800302a:	2380      	movs	r3, #128	@ 0x80
 800302c:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4313      	orrs	r3, r2
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003032:	22c0      	movs	r2, #192	@ 0xc0
 8003034:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003036:	6803      	ldr	r3, [r0, #0]
 8003038:	0112      	lsls	r2, r2, #4
 800303a:	68d9      	ldr	r1, [r3, #12]
 800303c:	4211      	tst	r1, r2
 800303e:	d00a      	beq.n	8003056 <ADC_DMAConvCplt+0x3a>
    HAL_ADC_ConvCpltCallback(hadc);
 8003040:	f7ff f994 	bl	800236c <HAL_ADC_ConvCpltCallback>
}
 8003044:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003046:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003048:	06d2      	lsls	r2, r2, #27
 800304a:	d416      	bmi.n	800307a <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800304c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800304e:	0018      	movs	r0, r3
 8003050:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003052:	4790      	blx	r2
}
 8003054:	e7f6      	b.n	8003044 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003056:	7e82      	ldrb	r2, [r0, #26]
 8003058:	2a00      	cmp	r2, #0
 800305a:	d1f1      	bne.n	8003040 <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	0712      	lsls	r2, r2, #28
 8003060:	d5ee      	bpl.n	8003040 <ADC_DMAConvCplt+0x24>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	0752      	lsls	r2, r2, #29
 8003066:	d50b      	bpl.n	8003080 <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003068:	2220      	movs	r2, #32
 800306a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800306c:	4313      	orrs	r3, r2
 800306e:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003070:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003072:	3a1f      	subs	r2, #31
 8003074:	4313      	orrs	r3, r2
 8003076:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8003078:	e7e2      	b.n	8003040 <ADC_DMAConvCplt+0x24>
      HAL_ADC_ErrorCallback(hadc);
 800307a:	f7ff ffbf 	bl	8002ffc <HAL_ADC_ErrorCallback>
 800307e:	e7e1      	b.n	8003044 <ADC_DMAConvCplt+0x28>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003080:	210c      	movs	r1, #12
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	438a      	bics	r2, r1
 8003086:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003088:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800308a:	4a03      	ldr	r2, [pc, #12]	@ (8003098 <ADC_DMAConvCplt+0x7c>)
 800308c:	4013      	ands	r3, r2
 800308e:	3204      	adds	r2, #4
 8003090:	32ff      	adds	r2, #255	@ 0xff
 8003092:	4313      	orrs	r3, r2
 8003094:	6583      	str	r3, [r0, #88]	@ 0x58
 8003096:	e7d3      	b.n	8003040 <ADC_DMAConvCplt+0x24>
 8003098:	fffffefe 	.word	0xfffffefe

0800309c <HAL_ADC_ConfigChannel>:
{
 800309c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309e:	46de      	mov	lr, fp
 80030a0:	4657      	mov	r7, sl
 80030a2:	464e      	mov	r6, r9
 80030a4:	4645      	mov	r5, r8
  __IO uint32_t wait_loop_index = 0UL;
 80030a6:	2300      	movs	r3, #0
{
 80030a8:	0004      	movs	r4, r0
 80030aa:	b5e0      	push	{r5, r6, r7, lr}
 80030ac:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 80030ae:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 80030b0:	3354      	adds	r3, #84	@ 0x54
 80030b2:	5ce2      	ldrb	r2, [r4, r3]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030b4:	6900      	ldr	r0, [r0, #16]
  __HAL_LOCK(hadc);
 80030b6:	2a01      	cmp	r2, #1
 80030b8:	d100      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x20>
 80030ba:	e09a      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x156>
 80030bc:	2201      	movs	r2, #1
 80030be:	54e2      	strb	r2, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	3203      	adds	r2, #3
 80030c4:	689e      	ldr	r6, [r3, #8]
 80030c6:	4232      	tst	r2, r6
 80030c8:	d00e      	beq.n	80030e8 <HAL_ADC_ConfigChannel+0x4c>
    tmp_hal_status = HAL_ERROR;
 80030ca:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80030ce:	321c      	adds	r2, #28
 80030d0:	4313      	orrs	r3, r2
 80030d2:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80030d4:	2354      	movs	r3, #84	@ 0x54
 80030d6:	2200      	movs	r2, #0
 80030d8:	54e2      	strb	r2, [r4, r3]
}
 80030da:	b005      	add	sp, #20
 80030dc:	bcf0      	pop	{r4, r5, r6, r7}
 80030de:	46bb      	mov	fp, r7
 80030e0:	46b2      	mov	sl, r6
 80030e2:	46a9      	mov	r9, r5
 80030e4:	46a0      	mov	r8, r4
 80030e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 80030e8:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030ea:	4390      	bics	r0, r2
 80030ec:	4684      	mov	ip, r0
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80030ee:	6808      	ldr	r0, [r1, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 80030f0:	2e02      	cmp	r6, #2
 80030f2:	d05e      	beq.n	80031b2 <HAL_ADC_ConfigChannel+0x116>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030f4:	0347      	lsls	r7, r0, #13
 80030f6:	0b7d      	lsrs	r5, r7, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030f8:	2780      	movs	r7, #128	@ 0x80
 80030fa:	9500      	str	r5, [sp, #0]
 80030fc:	063f      	lsls	r7, r7, #24
 80030fe:	45bc      	cmp	ip, r7
 8003100:	d053      	beq.n	80031aa <HAL_ADC_ConfigChannel+0x10e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003102:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 8003104:	46bb      	mov	fp, r7
 8003106:	271f      	movs	r7, #31
 8003108:	46b8      	mov	r8, r7
 800310a:	4037      	ands	r7, r6
 800310c:	46ba      	mov	sl, r7
 800310e:	270f      	movs	r7, #15
 8003110:	4655      	mov	r5, sl
 8003112:	40af      	lsls	r7, r5
 8003114:	43fd      	mvns	r5, r7
 8003116:	46bc      	mov	ip, r7
 8003118:	9501      	str	r5, [sp, #4]
 800311a:	465f      	mov	r7, fp
 800311c:	4665      	mov	r5, ip
 800311e:	43af      	bics	r7, r5
 8003120:	9d00      	ldr	r5, [sp, #0]
 8003122:	46b9      	mov	r9, r7
 8003124:	2d00      	cmp	r5, #0
 8003126:	d166      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x15a>
 8003128:	4645      	mov	r5, r8
 800312a:	0e82      	lsrs	r2, r0, #26
 800312c:	4015      	ands	r5, r2
 800312e:	002a      	movs	r2, r5
 8003130:	4655      	mov	r5, sl
 8003132:	40aa      	lsls	r2, r5
 8003134:	464d      	mov	r5, r9
 8003136:	4315      	orrs	r5, r2
 8003138:	46a9      	mov	r9, r5
 800313a:	464a      	mov	r2, r9
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800313c:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800313e:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003140:	69e2      	ldr	r2, [r4, #28]
 8003142:	3601      	adds	r6, #1
 8003144:	4296      	cmp	r6, r2
 8003146:	d808      	bhi.n	800315a <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCx->CHSELR,
 8003148:	4656      	mov	r6, sl
 800314a:	0082      	lsls	r2, r0, #2
 800314c:	0f12      	lsrs	r2, r2, #28
 800314e:	40b2      	lsls	r2, r6
 8003150:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8003152:	9e01      	ldr	r6, [sp, #4]
 8003154:	4035      	ands	r5, r6
 8003156:	432a      	orrs	r2, r5
 8003158:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 800315a:	0205      	lsls	r5, r0, #8
 800315c:	688a      	ldr	r2, [r1, #8]
 800315e:	0029      	movs	r1, r5
 8003160:	695e      	ldr	r6, [r3, #20]
 8003162:	402a      	ands	r2, r5
 8003164:	4d66      	ldr	r5, [pc, #408]	@ (8003300 <HAL_ADC_ConfigChannel+0x264>)
 8003166:	438e      	bics	r6, r1
 8003168:	402a      	ands	r2, r5
 800316a:	4332      	orrs	r2, r6
 800316c:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800316e:	2800      	cmp	r0, #0
 8003170:	db01      	blt.n	8003176 <HAL_ADC_ConfigChannel+0xda>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003172:	2000      	movs	r0, #0
 8003174:	e7ae      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x38>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003176:	21e0      	movs	r1, #224	@ 0xe0
 8003178:	4d62      	ldr	r5, [pc, #392]	@ (8003304 <HAL_ADC_ConfigChannel+0x268>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800317a:	4a63      	ldr	r2, [pc, #396]	@ (8003308 <HAL_ADC_ConfigChannel+0x26c>)
 800317c:	682b      	ldr	r3, [r5, #0]
 800317e:	0449      	lsls	r1, r1, #17
 8003180:	4019      	ands	r1, r3
 8003182:	4290      	cmp	r0, r2
 8003184:	d04c      	beq.n	8003220 <HAL_ADC_ConfigChannel+0x184>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003186:	4a61      	ldr	r2, [pc, #388]	@ (800330c <HAL_ADC_ConfigChannel+0x270>)
 8003188:	4290      	cmp	r0, r2
 800318a:	d040      	beq.n	800320e <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800318c:	4a60      	ldr	r2, [pc, #384]	@ (8003310 <HAL_ADC_ConfigChannel+0x274>)
 800318e:	4290      	cmp	r0, r2
 8003190:	d1ef      	bne.n	8003172 <HAL_ADC_ConfigChannel+0xd6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003192:	2280      	movs	r2, #128	@ 0x80
 8003194:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003196:	4213      	tst	r3, r2
 8003198:	d1eb      	bne.n	8003172 <HAL_ADC_ConfigChannel+0xd6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800319a:	682b      	ldr	r3, [r5, #0]
 800319c:	485d      	ldr	r0, [pc, #372]	@ (8003314 <HAL_ADC_ConfigChannel+0x278>)
 800319e:	4003      	ands	r3, r0
 80031a0:	430b      	orrs	r3, r1
 80031a2:	431a      	orrs	r2, r3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a4:	2000      	movs	r0, #0
 80031a6:	602a      	str	r2, [r5, #0]
 80031a8:	e794      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x38>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80031aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031ac:	432a      	orrs	r2, r5
 80031ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031b0:	e7d3      	b.n	800315a <HAL_ADC_ConfigChannel+0xbe>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031b2:	2280      	movs	r2, #128	@ 0x80
 80031b4:	0612      	lsls	r2, r2, #24
 80031b6:	4594      	cmp	ip, r2
 80031b8:	d104      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x128>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80031ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031bc:	0341      	lsls	r1, r0, #13
 80031be:	0b49      	lsrs	r1, r1, #13
 80031c0:	438a      	bics	r2, r1
 80031c2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031c4:	2800      	cmp	r0, #0
 80031c6:	dad4      	bge.n	8003172 <HAL_ADC_ConfigChannel+0xd6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003304 <HAL_ADC_ConfigChannel+0x268>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031ca:	494f      	ldr	r1, [pc, #316]	@ (8003308 <HAL_ADC_ConfigChannel+0x26c>)
 80031cc:	6813      	ldr	r3, [r2, #0]
 80031ce:	4288      	cmp	r0, r1
 80031d0:	d023      	beq.n	800321a <HAL_ADC_ConfigChannel+0x17e>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80031d2:	494e      	ldr	r1, [pc, #312]	@ (800330c <HAL_ADC_ConfigChannel+0x270>)
 80031d4:	4288      	cmp	r0, r1
 80031d6:	d04a      	beq.n	800326e <HAL_ADC_ConfigChannel+0x1d2>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031d8:	494d      	ldr	r1, [pc, #308]	@ (8003310 <HAL_ADC_ConfigChannel+0x274>)
 80031da:	4288      	cmp	r0, r1
 80031dc:	d1c9      	bne.n	8003172 <HAL_ADC_ConfigChannel+0xd6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031de:	20c0      	movs	r0, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031e0:	6811      	ldr	r1, [r2, #0]
 80031e2:	0440      	lsls	r0, r0, #17
 80031e4:	4003      	ands	r3, r0
 80031e6:	484b      	ldr	r0, [pc, #300]	@ (8003314 <HAL_ADC_ConfigChannel+0x278>)
 80031e8:	4001      	ands	r1, r0
 80031ea:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ec:	2000      	movs	r0, #0
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	e770      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x38>
  __HAL_LOCK(hadc);
 80031f2:	2002      	movs	r0, #2
 80031f4:	e771      	b.n	80030da <HAL_ADC_ConfigChannel+0x3e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80031f6:	2501      	movs	r5, #1
 80031f8:	4205      	tst	r5, r0
 80031fa:	d19e      	bne.n	800313a <HAL_ADC_ConfigChannel+0x9e>
 80031fc:	2702      	movs	r7, #2
 80031fe:	4207      	tst	r7, r0
 8003200:	d02d      	beq.n	800325e <HAL_ADC_ConfigChannel+0x1c2>
 8003202:	4652      	mov	r2, sl
 8003204:	4095      	lsls	r5, r2
 8003206:	464a      	mov	r2, r9
 8003208:	432a      	orrs	r2, r5
 800320a:	4691      	mov	r9, r2
 800320c:	e795      	b.n	800313a <HAL_ADC_ConfigChannel+0x9e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800320e:	2280      	movs	r2, #128	@ 0x80
 8003210:	0452      	lsls	r2, r2, #17
 8003212:	4213      	tst	r3, r2
 8003214:	d0c1      	beq.n	800319a <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003216:	2000      	movs	r0, #0
 8003218:	e75c      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x38>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800321a:	20a0      	movs	r0, #160	@ 0xa0
 800321c:	6811      	ldr	r1, [r2, #0]
 800321e:	e7e0      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x146>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003220:	2280      	movs	r2, #128	@ 0x80
 8003222:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003224:	4213      	tst	r3, r2
 8003226:	d1a4      	bne.n	8003172 <HAL_ADC_ConfigChannel+0xd6>
 8003228:	682b      	ldr	r3, [r5, #0]
 800322a:	483a      	ldr	r0, [pc, #232]	@ (8003314 <HAL_ADC_ConfigChannel+0x278>)
 800322c:	4003      	ands	r3, r0
 800322e:	430b      	orrs	r3, r1
 8003230:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003232:	4b39      	ldr	r3, [pc, #228]	@ (8003318 <HAL_ADC_ConfigChannel+0x27c>)
 8003234:	602a      	str	r2, [r5, #0]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	4938      	ldr	r1, [pc, #224]	@ (800331c <HAL_ADC_ConfigChannel+0x280>)
 800323a:	f7fc ff63 	bl	8000104 <__udivsi3>
 800323e:	3001      	adds	r0, #1
 8003240:	0043      	lsls	r3, r0, #1
 8003242:	181b      	adds	r3, r3, r0
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8003248:	9b03      	ldr	r3, [sp, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d091      	beq.n	8003172 <HAL_ADC_ConfigChannel+0xd6>
            wait_loop_index--;
 800324e:	9b03      	ldr	r3, [sp, #12]
 8003250:	3b01      	subs	r3, #1
 8003252:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8003254:	9b03      	ldr	r3, [sp, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f9      	bne.n	800324e <HAL_ADC_ConfigChannel+0x1b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325a:	2000      	movs	r0, #0
 800325c:	e73a      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x38>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800325e:	4202      	tst	r2, r0
 8003260:	d009      	beq.n	8003276 <HAL_ADC_ConfigChannel+0x1da>
 8003262:	4652      	mov	r2, sl
 8003264:	4097      	lsls	r7, r2
 8003266:	464a      	mov	r2, r9
 8003268:	433a      	orrs	r2, r7
 800326a:	4691      	mov	r9, r2
 800326c:	e765      	b.n	800313a <HAL_ADC_ConfigChannel+0x9e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800326e:	20c0      	movs	r0, #192	@ 0xc0
 8003270:	6811      	ldr	r1, [r2, #0]
 8003272:	0400      	lsls	r0, r0, #16
 8003274:	e7b6      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x148>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003276:	0702      	lsls	r2, r0, #28
 8003278:	d501      	bpl.n	800327e <HAL_ADC_ConfigChannel+0x1e2>
 800327a:	2203      	movs	r2, #3
 800327c:	e758      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 800327e:	06c2      	lsls	r2, r0, #27
 8003280:	d501      	bpl.n	8003286 <HAL_ADC_ConfigChannel+0x1ea>
 8003282:	2204      	movs	r2, #4
 8003284:	e754      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 8003286:	0682      	lsls	r2, r0, #26
 8003288:	d501      	bpl.n	800328e <HAL_ADC_ConfigChannel+0x1f2>
 800328a:	2205      	movs	r2, #5
 800328c:	e750      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 800328e:	0642      	lsls	r2, r0, #25
 8003290:	d501      	bpl.n	8003296 <HAL_ADC_ConfigChannel+0x1fa>
 8003292:	2206      	movs	r2, #6
 8003294:	e74c      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 8003296:	0602      	lsls	r2, r0, #24
 8003298:	d501      	bpl.n	800329e <HAL_ADC_ConfigChannel+0x202>
 800329a:	2207      	movs	r2, #7
 800329c:	e748      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 800329e:	05c2      	lsls	r2, r0, #23
 80032a0:	d501      	bpl.n	80032a6 <HAL_ADC_ConfigChannel+0x20a>
 80032a2:	2208      	movs	r2, #8
 80032a4:	e744      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 80032a6:	0582      	lsls	r2, r0, #22
 80032a8:	d501      	bpl.n	80032ae <HAL_ADC_ConfigChannel+0x212>
 80032aa:	2209      	movs	r2, #9
 80032ac:	e740      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 80032ae:	0542      	lsls	r2, r0, #21
 80032b0:	d501      	bpl.n	80032b6 <HAL_ADC_ConfigChannel+0x21a>
 80032b2:	220a      	movs	r2, #10
 80032b4:	e73c      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 80032b6:	0502      	lsls	r2, r0, #20
 80032b8:	d501      	bpl.n	80032be <HAL_ADC_ConfigChannel+0x222>
 80032ba:	220b      	movs	r2, #11
 80032bc:	e738      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 80032be:	04c2      	lsls	r2, r0, #19
 80032c0:	d501      	bpl.n	80032c6 <HAL_ADC_ConfigChannel+0x22a>
 80032c2:	220c      	movs	r2, #12
 80032c4:	e734      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 80032c6:	0482      	lsls	r2, r0, #18
 80032c8:	d501      	bpl.n	80032ce <HAL_ADC_ConfigChannel+0x232>
 80032ca:	220d      	movs	r2, #13
 80032cc:	e730      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 80032ce:	0442      	lsls	r2, r0, #17
 80032d0:	d501      	bpl.n	80032d6 <HAL_ADC_ConfigChannel+0x23a>
 80032d2:	220e      	movs	r2, #14
 80032d4:	e72c      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 80032d6:	0402      	lsls	r2, r0, #16
 80032d8:	d504      	bpl.n	80032e4 <HAL_ADC_ConfigChannel+0x248>
 80032da:	465a      	mov	r2, fp
 80032dc:	4665      	mov	r5, ip
 80032de:	432a      	orrs	r2, r5
 80032e0:	4691      	mov	r9, r2
 80032e2:	e72a      	b.n	800313a <HAL_ADC_ConfigChannel+0x9e>
 80032e4:	03c2      	lsls	r2, r0, #15
 80032e6:	d501      	bpl.n	80032ec <HAL_ADC_ConfigChannel+0x250>
 80032e8:	2210      	movs	r2, #16
 80032ea:	e721      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 80032ec:	0382      	lsls	r2, r0, #14
 80032ee:	d501      	bpl.n	80032f4 <HAL_ADC_ConfigChannel+0x258>
 80032f0:	2211      	movs	r2, #17
 80032f2:	e71d      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 80032f4:	0342      	lsls	r2, r0, #13
 80032f6:	d400      	bmi.n	80032fa <HAL_ADC_ConfigChannel+0x25e>
 80032f8:	e71f      	b.n	800313a <HAL_ADC_ConfigChannel+0x9e>
 80032fa:	2212      	movs	r2, #18
 80032fc:	e718      	b.n	8003130 <HAL_ADC_ConfigChannel+0x94>
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	07ffff00 	.word	0x07ffff00
 8003304:	40012708 	.word	0x40012708
 8003308:	b0001000 	.word	0xb0001000
 800330c:	b8004000 	.word	0xb8004000
 8003310:	b4002000 	.word	0xb4002000
 8003314:	fe3fffff 	.word	0xfe3fffff
 8003318:	20000000 	.word	0x20000000
 800331c:	00030d40 	.word	0x00030d40

08003320 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8003320:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003322:	2201      	movs	r2, #1
{
 8003324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003326:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003328:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800332a:	6803      	ldr	r3, [r0, #0]
{
 800332c:	0004      	movs	r4, r0
 800332e:	6899      	ldr	r1, [r3, #8]
 8003330:	420a      	tst	r2, r1
 8003332:	d11f      	bne.n	8003374 <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003334:	6898      	ldr	r0, [r3, #8]
 8003336:	4928      	ldr	r1, [pc, #160]	@ (80033d8 <ADC_Enable+0xb8>)
 8003338:	4208      	tst	r0, r1
 800333a:	d11e      	bne.n	800337a <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 800333c:	6899      	ldr	r1, [r3, #8]
 800333e:	4827      	ldr	r0, [pc, #156]	@ (80033dc <ADC_Enable+0xbc>)
 8003340:	4001      	ands	r1, r0
 8003342:	430a      	orrs	r2, r1
 8003344:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003346:	4b26      	ldr	r3, [pc, #152]	@ (80033e0 <ADC_Enable+0xc0>)
 8003348:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	d50f      	bpl.n	800336e <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800334e:	4b25      	ldr	r3, [pc, #148]	@ (80033e4 <ADC_Enable+0xc4>)
 8003350:	4925      	ldr	r1, [pc, #148]	@ (80033e8 <ADC_Enable+0xc8>)
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	f7fc fed6 	bl	8000104 <__udivsi3>
 8003358:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800335a:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 800335c:	9b01      	ldr	r3, [sp, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <ADC_Enable+0x4e>
        wait_loop_index--;
 8003362:	9b01      	ldr	r3, [sp, #4]
 8003364:	3b01      	subs	r3, #1
 8003366:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003368:	9b01      	ldr	r3, [sp, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f9      	bne.n	8003362 <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800336e:	7e63      	ldrb	r3, [r4, #25]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d10b      	bne.n	800338c <ADC_Enable+0x6c>
  return HAL_OK;
 8003374:	2000      	movs	r0, #0
}
 8003376:	b003      	add	sp, #12
 8003378:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337a:	2110      	movs	r1, #16
 800337c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 800337e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003380:	430b      	orrs	r3, r1
 8003382:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003384:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003386:	4313      	orrs	r3, r2
 8003388:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 800338a:	e7f4      	b.n	8003376 <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 800338c:	f7ff fcfa 	bl	8002d84 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003390:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8003392:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	07d2      	lsls	r2, r2, #31
 8003398:	d4ec      	bmi.n	8003374 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800339a:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 800339c:	4f0f      	ldr	r7, [pc, #60]	@ (80033dc <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	4215      	tst	r5, r2
 80033a2:	d103      	bne.n	80033ac <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	403a      	ands	r2, r7
 80033a8:	432a      	orrs	r2, r5
 80033aa:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033ac:	f7ff fcea 	bl	8002d84 <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033b0:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033b2:	1b80      	subs	r0, r0, r6
 80033b4:	2802      	cmp	r0, #2
 80033b6:	d902      	bls.n	80033be <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4215      	tst	r5, r2
 80033bc:	d003      	beq.n	80033c6 <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4215      	tst	r5, r2
 80033c2:	d0ec      	beq.n	800339e <ADC_Enable+0x7e>
 80033c4:	e7d6      	b.n	8003374 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c6:	2210      	movs	r2, #16
 80033c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 80033ca:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033cc:	4313      	orrs	r3, r2
 80033ce:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80033d2:	432b      	orrs	r3, r5
 80033d4:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 80033d6:	e7ce      	b.n	8003376 <ADC_Enable+0x56>
 80033d8:	80000017 	.word	0x80000017
 80033dc:	7fffffe8 	.word	0x7fffffe8
 80033e0:	40012708 	.word	0x40012708
 80033e4:	20000000 	.word	0x20000000
 80033e8:	00030d40 	.word	0x00030d40

080033ec <HAL_ADC_Start_DMA>:
{
 80033ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ee:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f0:	6805      	ldr	r5, [r0, #0]
{
 80033f2:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033f4:	68ae      	ldr	r6, [r5, #8]
 80033f6:	4688      	mov	r8, r1
 80033f8:	0017      	movs	r7, r2
    __HAL_LOCK(hadc);
 80033fa:	2002      	movs	r0, #2
{
 80033fc:	b500      	push	{lr}
 80033fe:	0776      	lsls	r6, r6, #29
 8003400:	d414      	bmi.n	800342c <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 8003402:	2254      	movs	r2, #84	@ 0x54
 8003404:	5ca3      	ldrb	r3, [r4, r2]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d010      	beq.n	800342c <HAL_ADC_Start_DMA+0x40>
 800340a:	2301      	movs	r3, #1
 800340c:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800340e:	68ea      	ldr	r2, [r5, #12]
 8003410:	4213      	tst	r3, r2
 8003412:	d106      	bne.n	8003422 <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003414:	68aa      	ldr	r2, [r5, #8]
 8003416:	4213      	tst	r3, r2
 8003418:	d131      	bne.n	800347e <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800341a:	2201      	movs	r2, #1
 800341c:	68eb      	ldr	r3, [r5, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8003422:	0020      	movs	r0, r4
 8003424:	f7ff ff7c 	bl	8003320 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003428:	2800      	cmp	r0, #0
 800342a:	d002      	beq.n	8003432 <HAL_ADC_Start_DMA+0x46>
}
 800342c:	bc80      	pop	{r7}
 800342e:	46b8      	mov	r8, r7
 8003430:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8003432:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003434:	4b15      	ldr	r3, [pc, #84]	@ (800348c <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003436:	6d25      	ldr	r5, [r4, #80]	@ 0x50
      ADC_STATE_CLR_SET(hadc->State,
 8003438:	401a      	ands	r2, r3
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4313      	orrs	r3, r2
 8003440:	65a3      	str	r3, [r4, #88]	@ 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003442:	4b13      	ldr	r3, [pc, #76]	@ (8003490 <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 8003444:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003446:	62eb      	str	r3, [r5, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003448:	4b12      	ldr	r3, [pc, #72]	@ (8003494 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800344a:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800344c:	632b      	str	r3, [r5, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800344e:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003450:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003452:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003454:	231c      	movs	r3, #28
 8003456:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 8003458:	3338      	adds	r3, #56	@ 0x38
 800345a:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800345c:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800345e:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003460:	4313      	orrs	r3, r2
 8003462:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003464:	4642      	mov	r2, r8
 8003466:	003b      	movs	r3, r7
 8003468:	3140      	adds	r1, #64	@ 0x40
 800346a:	f000 f8ff 	bl	800366c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 800346e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003470:	490a      	ldr	r1, [pc, #40]	@ (800349c <HAL_ADC_Start_DMA+0xb0>)
 8003472:	6893      	ldr	r3, [r2, #8]
 8003474:	400b      	ands	r3, r1
 8003476:	2104      	movs	r1, #4
 8003478:	430b      	orrs	r3, r1
 800347a:	6093      	str	r3, [r2, #8]
}
 800347c:	e7d6      	b.n	800342c <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 800347e:	68ab      	ldr	r3, [r5, #8]
 8003480:	4a06      	ldr	r2, [pc, #24]	@ (800349c <HAL_ADC_Start_DMA+0xb0>)
 8003482:	4013      	ands	r3, r2
 8003484:	4303      	orrs	r3, r0
 8003486:	60ab      	str	r3, [r5, #8]
}
 8003488:	e7c7      	b.n	800341a <HAL_ADC_Start_DMA+0x2e>
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	fffff0fe 	.word	0xfffff0fe
 8003490:	0800301d 	.word	0x0800301d
 8003494:	08002ff1 	.word	0x08002ff1
 8003498:	08003001 	.word	0x08003001
 800349c:	7fffffe8 	.word	0x7fffffe8

080034a0 <HAL_NVIC_SetPriority>:
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034a0:	22ff      	movs	r2, #255	@ 0xff
 80034a2:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a4:	b510      	push	{r4, lr}
 80034a6:	0014      	movs	r4, r2
 80034a8:	4003      	ands	r3, r0
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034ae:	0189      	lsls	r1, r1, #6
 80034b0:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b2:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034b4:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 80034b6:	2800      	cmp	r0, #0
 80034b8:	db0b      	blt.n	80034d2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034ba:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <HAL_NVIC_SetPriority+0x4c>)
 80034bc:	21c0      	movs	r1, #192	@ 0xc0
 80034be:	469c      	mov	ip, r3
 80034c0:	0880      	lsrs	r0, r0, #2
 80034c2:	0080      	lsls	r0, r0, #2
 80034c4:	4460      	add	r0, ip
 80034c6:	0089      	lsls	r1, r1, #2
 80034c8:	5843      	ldr	r3, [r0, r1]
 80034ca:	4023      	ands	r3, r4
 80034cc:	4313      	orrs	r3, r2
 80034ce:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80034d0:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034d2:	230f      	movs	r3, #15
 80034d4:	4906      	ldr	r1, [pc, #24]	@ (80034f0 <HAL_NVIC_SetPriority+0x50>)
 80034d6:	4003      	ands	r3, r0
 80034d8:	468c      	mov	ip, r1
 80034da:	3b08      	subs	r3, #8
 80034dc:	089b      	lsrs	r3, r3, #2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4463      	add	r3, ip
 80034e2:	69d9      	ldr	r1, [r3, #28]
 80034e4:	400c      	ands	r4, r1
 80034e6:	4314      	orrs	r4, r2
 80034e8:	61dc      	str	r4, [r3, #28]
 80034ea:	e7f1      	b.n	80034d0 <HAL_NVIC_SetPriority+0x30>
 80034ec:	e000e100 	.word	0xe000e100
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80034f4:	2800      	cmp	r0, #0
 80034f6:	db05      	blt.n	8003504 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034f8:	221f      	movs	r2, #31
 80034fa:	2301      	movs	r3, #1
 80034fc:	4002      	ands	r2, r0
 80034fe:	4093      	lsls	r3, r2
 8003500:	4a01      	ldr	r2, [pc, #4]	@ (8003508 <HAL_NVIC_EnableIRQ+0x14>)
 8003502:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003504:	4770      	bx	lr
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	e000e100 	.word	0xe000e100

0800350c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800350c:	2280      	movs	r2, #128	@ 0x80
 800350e:	1e43      	subs	r3, r0, #1
 8003510:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8003512:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003514:	4293      	cmp	r3, r2
 8003516:	d20e      	bcs.n	8003536 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003518:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351a:	4a07      	ldr	r2, [pc, #28]	@ (8003538 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800351c:	4807      	ldr	r0, [pc, #28]	@ (800353c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003520:	6a03      	ldr	r3, [r0, #32]
 8003522:	0609      	lsls	r1, r1, #24
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	430b      	orrs	r3, r1
 800352a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800352c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800352e:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003530:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003532:	3307      	adds	r3, #7
 8003534:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8003536:	4770      	bx	lr
 8003538:	e000e010 	.word	0xe000e010
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003540:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003542:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8003544:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8003546:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003548:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 800354a:	2c00      	cmp	r4, #0
 800354c:	d002      	beq.n	8003554 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800354e:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8003550:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8003552:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003554:	241c      	movs	r4, #28
 8003556:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8003558:	4e08      	ldr	r6, [pc, #32]	@ (800357c <DMA_SetConfig+0x3c>)
 800355a:	4025      	ands	r5, r4
 800355c:	3c1b      	subs	r4, #27
 800355e:	40ac      	lsls	r4, r5
 8003560:	6877      	ldr	r7, [r6, #4]
 8003562:	433c      	orrs	r4, r7
 8003564:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003566:	6804      	ldr	r4, [r0, #0]
 8003568:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800356a:	6883      	ldr	r3, [r0, #8]
 800356c:	2b10      	cmp	r3, #16
 800356e:	d002      	beq.n	8003576 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003570:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003572:	60e2      	str	r2, [r4, #12]
  }
}
 8003574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8003576:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003578:	60e1      	str	r1, [r4, #12]
 800357a:	e7fb      	b.n	8003574 <DMA_SetConfig+0x34>
 800357c:	40020000 	.word	0x40020000

08003580 <HAL_DMA_Init>:
{
 8003580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003582:	46c6      	mov	lr, r8
 8003584:	0004      	movs	r4, r0
 8003586:	b500      	push	{lr}
  if (hdma == NULL)
 8003588:	2800      	cmp	r0, #0
 800358a:	d060      	beq.n	800364e <HAL_DMA_Init+0xce>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800358c:	6805      	ldr	r5, [r0, #0]
 800358e:	4b31      	ldr	r3, [pc, #196]	@ (8003654 <HAL_DMA_Init+0xd4>)
 8003590:	2114      	movs	r1, #20
 8003592:	18e8      	adds	r0, r5, r3
 8003594:	f7fc fdb6 	bl	8000104 <__udivsi3>
 8003598:	0083      	lsls	r3, r0, #2
 800359a:	6423      	str	r3, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800359c:	2202      	movs	r2, #2
 800359e:	2325      	movs	r3, #37	@ 0x25
 80035a0:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035a2:	682b      	ldr	r3, [r5, #0]
 80035a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003658 <HAL_DMA_Init+0xd8>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80035a6:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035a8:	4013      	ands	r3, r2
 80035aa:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80035ac:	68e3      	ldr	r3, [r4, #12]
 80035ae:	6921      	ldr	r1, [r4, #16]
 80035b0:	4333      	orrs	r3, r6
 80035b2:	430b      	orrs	r3, r1
 80035b4:	6961      	ldr	r1, [r4, #20]
 80035b6:	682a      	ldr	r2, [r5, #0]
 80035b8:	430b      	orrs	r3, r1
 80035ba:	69a1      	ldr	r1, [r4, #24]
 80035bc:	430b      	orrs	r3, r1
 80035be:	69e1      	ldr	r1, [r4, #28]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6a21      	ldr	r1, [r4, #32]
 80035c4:	430b      	orrs	r3, r1
 80035c6:	4313      	orrs	r3, r2
 80035c8:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80035ca:	4b24      	ldr	r3, [pc, #144]	@ (800365c <HAL_DMA_Init+0xdc>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80035cc:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80035ce:	469c      	mov	ip, r3
 80035d0:	4460      	add	r0, ip
 80035d2:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80035d4:	20ff      	movs	r0, #255	@ 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035d6:	4b22      	ldr	r3, [pc, #136]	@ (8003660 <HAL_DMA_Init+0xe0>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80035d8:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035da:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80035dc:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80035de:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035e0:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80035e2:	f7fc fd8f 	bl	8000104 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80035e6:	231f      	movs	r3, #31
 80035e8:	2201      	movs	r2, #1
 80035ea:	4003      	ands	r3, r0
 80035ec:	0010      	movs	r0, r2
 80035ee:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035f0:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80035f2:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035f4:	01db      	lsls	r3, r3, #7
 80035f6:	429e      	cmp	r6, r3
 80035f8:	d01f      	beq.n	800363a <HAL_DMA_Init+0xba>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035fa:	233f      	movs	r3, #63	@ 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035fc:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035fe:	6861      	ldr	r1, [r4, #4]
 8003600:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003602:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003604:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003606:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003608:	2903      	cmp	r1, #3
 800360a:	d81b      	bhi.n	8003644 <HAL_DMA_Init+0xc4>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800360c:	4915      	ldr	r1, [pc, #84]	@ (8003664 <HAL_DMA_Init+0xe4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800360e:	4816      	ldr	r0, [pc, #88]	@ (8003668 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003610:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003612:	3b01      	subs	r3, #1
 8003614:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003616:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003618:	0089      	lsls	r1, r1, #2
 800361a:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800361c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800361e:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003620:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003622:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003624:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003626:	2225      	movs	r2, #37	@ 0x25
 8003628:	2101      	movs	r1, #1
  return HAL_OK;
 800362a:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800362c:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800362e:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8003630:	3a01      	subs	r2, #1
 8003632:	54a3      	strb	r3, [r4, r2]
}
 8003634:	bc80      	pop	{r7}
 8003636:	46b8      	mov	r8, r7
 8003638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800363a:	2300      	movs	r3, #0
 800363c:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800363e:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003640:	4643      	mov	r3, r8
 8003642:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003648:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800364a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800364c:	e7ea      	b.n	8003624 <HAL_DMA_Init+0xa4>
    return HAL_ERROR;
 800364e:	2001      	movs	r0, #1
 8003650:	e7f0      	b.n	8003634 <HAL_DMA_Init+0xb4>
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	bffdfff8 	.word	0xbffdfff8
 8003658:	ffff800f 	.word	0xffff800f
 800365c:	10008200 	.word	0x10008200
 8003660:	40020880 	.word	0x40020880
 8003664:	1000823f 	.word	0x1000823f
 8003668:	40020940 	.word	0x40020940

0800366c <HAL_DMA_Start_IT>:
{
 800366c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003670:	2024      	movs	r0, #36	@ 0x24
 8003672:	5c25      	ldrb	r5, [r4, r0]
 8003674:	2d01      	cmp	r5, #1
 8003676:	d035      	beq.n	80036e4 <HAL_DMA_Start_IT+0x78>
 8003678:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 800367a:	2625      	movs	r6, #37	@ 0x25
  __HAL_LOCK(hdma);
 800367c:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 800367e:	5da5      	ldrb	r5, [r4, r6]
 8003680:	b2ef      	uxtb	r7, r5
 8003682:	2d01      	cmp	r5, #1
 8003684:	d005      	beq.n	8003692 <HAL_DMA_Start_IT+0x26>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003686:	2380      	movs	r3, #128	@ 0x80
 8003688:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800368a:	2300      	movs	r3, #0
 800368c:	5423      	strb	r3, [r4, r0]
    status = HAL_ERROR;
 800368e:	2001      	movs	r0, #1
}
 8003690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003692:	3822      	subs	r0, #34	@ 0x22
 8003694:	55a0      	strb	r0, [r4, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003696:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8003698:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800369a:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 800369c:	6828      	ldr	r0, [r5, #0]
 800369e:	43b8      	bics	r0, r7
 80036a0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036a2:	0020      	movs	r0, r4
 80036a4:	f7ff ff4c 	bl	8003540 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80036a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01c      	beq.n	80036e8 <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ae:	220e      	movs	r2, #14
 80036b0:	682b      	ldr	r3, [r5, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036b6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80036b8:	6813      	ldr	r3, [r2, #0]
 80036ba:	03db      	lsls	r3, r3, #15
 80036bc:	d504      	bpl.n	80036c8 <HAL_DMA_Start_IT+0x5c>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	6811      	ldr	r1, [r2, #0]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	430b      	orrs	r3, r1
 80036c6:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80036c8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d004      	beq.n	80036d8 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036ce:	2280      	movs	r2, #128	@ 0x80
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	0052      	lsls	r2, r2, #1
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80036d8:	2201      	movs	r2, #1
 80036da:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036dc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80036de:	4313      	orrs	r3, r2
 80036e0:	602b      	str	r3, [r5, #0]
 80036e2:	e7d5      	b.n	8003690 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80036e4:	2002      	movs	r0, #2
 80036e6:	e7d3      	b.n	8003690 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036e8:	2204      	movs	r2, #4
 80036ea:	682b      	ldr	r3, [r5, #0]
 80036ec:	4393      	bics	r3, r2
 80036ee:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	3206      	adds	r2, #6
 80036f4:	4313      	orrs	r3, r2
 80036f6:	602b      	str	r3, [r5, #0]
 80036f8:	e7dd      	b.n	80036b6 <HAL_DMA_Start_IT+0x4a>
 80036fa:	46c0      	nop			@ (mov r8, r8)

080036fc <HAL_DMA_IRQHandler>:
{
 80036fc:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036fe:	211c      	movs	r1, #28
 8003700:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8003702:	4b2b      	ldr	r3, [pc, #172]	@ (80037b0 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8003704:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 8003706:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003708:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800370a:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800370c:	400b      	ands	r3, r1
 800370e:	0021      	movs	r1, r4
 8003710:	4099      	lsls	r1, r3
 8003712:	420a      	tst	r2, r1
 8003714:	d010      	beq.n	8003738 <HAL_DMA_IRQHandler+0x3c>
 8003716:	422c      	tst	r4, r5
 8003718:	d00e      	beq.n	8003738 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800371a:	6833      	ldr	r3, [r6, #0]
 800371c:	069b      	lsls	r3, r3, #26
 800371e:	d402      	bmi.n	8003726 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003720:	6833      	ldr	r3, [r6, #0]
 8003722:	43a3      	bics	r3, r4
 8003724:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003726:	4b22      	ldr	r3, [pc, #136]	@ (80037b0 <HAL_DMA_IRQHandler+0xb4>)
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	4311      	orrs	r1, r2
 800372c:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800372e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003730:	2b00      	cmp	r3, #0
 8003732:	d000      	beq.n	8003736 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8003734:	4798      	blx	r3
}
 8003736:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003738:	2402      	movs	r4, #2
 800373a:	0021      	movs	r1, r4
 800373c:	4099      	lsls	r1, r3
 800373e:	420a      	tst	r2, r1
 8003740:	d017      	beq.n	8003772 <HAL_DMA_IRQHandler+0x76>
 8003742:	422c      	tst	r4, r5
 8003744:	d015      	beq.n	8003772 <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003746:	6833      	ldr	r3, [r6, #0]
 8003748:	069b      	lsls	r3, r3, #26
 800374a:	d406      	bmi.n	800375a <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800374c:	220a      	movs	r2, #10
 800374e:	6833      	ldr	r3, [r6, #0]
 8003750:	4393      	bics	r3, r2
 8003752:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003754:	2325      	movs	r3, #37	@ 0x25
 8003756:	3a09      	subs	r2, #9
 8003758:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800375a:	4b15      	ldr	r3, [pc, #84]	@ (80037b0 <HAL_DMA_IRQHandler+0xb4>)
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	4311      	orrs	r1, r2
 8003760:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8003762:	2200      	movs	r2, #0
 8003764:	2324      	movs	r3, #36	@ 0x24
 8003766:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8003768:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0e3      	beq.n	8003736 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 800376e:	4798      	blx	r3
  return;
 8003770:	e7e1      	b.n	8003736 <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003772:	2108      	movs	r1, #8
 8003774:	000c      	movs	r4, r1
 8003776:	409c      	lsls	r4, r3
 8003778:	4222      	tst	r2, r4
 800377a:	d0dc      	beq.n	8003736 <HAL_DMA_IRQHandler+0x3a>
 800377c:	4229      	tst	r1, r5
 800377e:	d0da      	beq.n	8003736 <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003780:	6832      	ldr	r2, [r6, #0]
 8003782:	3106      	adds	r1, #6
 8003784:	438a      	bics	r2, r1
 8003786:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003788:	2201      	movs	r2, #1
 800378a:	0015      	movs	r5, r2
 800378c:	409d      	lsls	r5, r3
 800378e:	002b      	movs	r3, r5
 8003790:	4907      	ldr	r1, [pc, #28]	@ (80037b0 <HAL_DMA_IRQHandler+0xb4>)
 8003792:	684c      	ldr	r4, [r1, #4]
 8003794:	4323      	orrs	r3, r4
 8003796:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003798:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800379a:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800379c:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800379e:	2200      	movs	r2, #0
 80037a0:	3b01      	subs	r3, #1
 80037a2:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80037a4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0c5      	beq.n	8003736 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80037aa:	4798      	blx	r3
  return;
 80037ac:	e7c3      	b.n	8003736 <HAL_DMA_IRQHandler+0x3a>
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	40020000 	.word	0x40020000

080037b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b6:	46de      	mov	lr, fp
 80037b8:	4657      	mov	r7, sl
 80037ba:	464e      	mov	r6, r9
 80037bc:	4645      	mov	r5, r8
 80037be:	b5e0      	push	{r5, r6, r7, lr}
 80037c0:	468b      	mov	fp, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c2:	6809      	ldr	r1, [r1, #0]
  uint32_t position = 0x00u;
 80037c4:	2300      	movs	r3, #0
{
 80037c6:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c8:	2900      	cmp	r1, #0
 80037ca:	d067      	beq.n	800389c <HAL_GPIO_Init+0xe8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037cc:	2201      	movs	r2, #1
 80037ce:	409a      	lsls	r2, r3
 80037d0:	4694      	mov	ip, r2
 80037d2:	400a      	ands	r2, r1
 80037d4:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 80037d6:	4662      	mov	r2, ip
 80037d8:	4211      	tst	r1, r2
 80037da:	d05b      	beq.n	8003894 <HAL_GPIO_Init+0xe0>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037dc:	2503      	movs	r5, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037de:	465a      	mov	r2, fp
 80037e0:	005e      	lsls	r6, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037e2:	40b5      	lsls	r5, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037e4:	6854      	ldr	r4, [r2, #4]
 80037e6:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037e8:	43ed      	mvns	r5, r5
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037ea:	4022      	ands	r2, r4
 80037ec:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037ee:	9500      	str	r5, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037f0:	2f01      	cmp	r7, #1
 80037f2:	d95a      	bls.n	80038aa <HAL_GPIO_Init+0xf6>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037f4:	2a03      	cmp	r2, #3
 80037f6:	d000      	beq.n	80037fa <HAL_GPIO_Init+0x46>
 80037f8:	e0c6      	b.n	8003988 <HAL_GPIO_Init+0x1d4>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037fa:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 80037fc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037fe:	9d00      	ldr	r5, [sp, #0]
 8003800:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003802:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8003804:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003806:	22c0      	movs	r2, #192	@ 0xc0
 8003808:	0292      	lsls	r2, r2, #10
 800380a:	4214      	tst	r4, r2
 800380c:	d042      	beq.n	8003894 <HAL_GPIO_Init+0xe0>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800380e:	2603      	movs	r6, #3
 8003810:	270f      	movs	r7, #15
 8003812:	4d64      	ldr	r5, [pc, #400]	@ (80039a4 <HAL_GPIO_Init+0x1f0>)
 8003814:	401e      	ands	r6, r3
 8003816:	46ac      	mov	ip, r5
 8003818:	00f6      	lsls	r6, r6, #3
 800381a:	40b7      	lsls	r7, r6
        temp = EXTI->EXTICR[position >> 2u];
 800381c:	089a      	lsrs	r2, r3, #2
 800381e:	0092      	lsls	r2, r2, #2
 8003820:	4462      	add	r2, ip
 8003822:	6e15      	ldr	r5, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003824:	43bd      	bics	r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003826:	27a0      	movs	r7, #160	@ 0xa0
 8003828:	05ff      	lsls	r7, r7, #23
 800382a:	42b8      	cmp	r0, r7
 800382c:	d00e      	beq.n	800384c <HAL_GPIO_Init+0x98>
 800382e:	4f5e      	ldr	r7, [pc, #376]	@ (80039a8 <HAL_GPIO_Init+0x1f4>)
 8003830:	42b8      	cmp	r0, r7
 8003832:	d100      	bne.n	8003836 <HAL_GPIO_Init+0x82>
 8003834:	e0a0      	b.n	8003978 <HAL_GPIO_Init+0x1c4>
 8003836:	4f5d      	ldr	r7, [pc, #372]	@ (80039ac <HAL_GPIO_Init+0x1f8>)
 8003838:	42b8      	cmp	r0, r7
 800383a:	d100      	bne.n	800383e <HAL_GPIO_Init+0x8a>
 800383c:	e0a0      	b.n	8003980 <HAL_GPIO_Init+0x1cc>
 800383e:	4f5c      	ldr	r7, [pc, #368]	@ (80039b0 <HAL_GPIO_Init+0x1fc>)
 8003840:	42b8      	cmp	r0, r7
 8003842:	d100      	bne.n	8003846 <HAL_GPIO_Init+0x92>
 8003844:	e094      	b.n	8003970 <HAL_GPIO_Init+0x1bc>
 8003846:	2705      	movs	r7, #5
 8003848:	40b7      	lsls	r7, r6
 800384a:	433d      	orrs	r5, r7
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800384c:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 800384e:	6615      	str	r5, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 8003850:	4655      	mov	r5, sl
        temp = EXTI->RTSR1;
 8003852:	4a54      	ldr	r2, [pc, #336]	@ (80039a4 <HAL_GPIO_Init+0x1f0>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003854:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8003856:	43ed      	mvns	r5, r5
        temp = EXTI->RTSR1;
 8003858:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800385a:	4234      	tst	r4, r6
 800385c:	d16a      	bne.n	8003934 <HAL_GPIO_Init+0x180>
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800385e:	4e51      	ldr	r6, [pc, #324]	@ (80039a4 <HAL_GPIO_Init+0x1f0>)
        temp &= ~(iocurrent);
 8003860:	402a      	ands	r2, r5
        EXTI->RTSR1 = temp;
 8003862:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 8003864:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003866:	2680      	movs	r6, #128	@ 0x80
 8003868:	03b6      	lsls	r6, r6, #14
 800386a:	4234      	tst	r4, r6
 800386c:	d16b      	bne.n	8003946 <HAL_GPIO_Init+0x192>
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800386e:	4e4d      	ldr	r6, [pc, #308]	@ (80039a4 <HAL_GPIO_Init+0x1f0>)
        temp &= ~(iocurrent);
 8003870:	402a      	ands	r2, r5
        EXTI->FTSR1 = temp;
 8003872:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003874:	2284      	movs	r2, #132	@ 0x84
 8003876:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003878:	03a6      	lsls	r6, r4, #14
 800387a:	d46c      	bmi.n	8003956 <HAL_GPIO_Init+0x1a2>
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 800387c:	2684      	movs	r6, #132	@ 0x84
 800387e:	4f49      	ldr	r7, [pc, #292]	@ (80039a4 <HAL_GPIO_Init+0x1f0>)
        temp &= ~(iocurrent);
 8003880:	402a      	ands	r2, r5
        EXTI->EMR1 = temp;
 8003882:	51ba      	str	r2, [r7, r6]

        temp = EXTI->IMR1;
 8003884:	2280      	movs	r2, #128	@ 0x80
 8003886:	58ba      	ldr	r2, [r7, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003888:	03e4      	lsls	r4, r4, #15
 800388a:	d46d      	bmi.n	8003968 <HAL_GPIO_Init+0x1b4>
        temp &= ~(iocurrent);
 800388c:	402a      	ands	r2, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800388e:	2480      	movs	r4, #128	@ 0x80
 8003890:	4d44      	ldr	r5, [pc, #272]	@ (80039a4 <HAL_GPIO_Init+0x1f0>)
 8003892:	512a      	str	r2, [r5, r4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003894:	000a      	movs	r2, r1
      }
    }

    position++;
 8003896:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003898:	40da      	lsrs	r2, r3
 800389a:	d197      	bne.n	80037cc <HAL_GPIO_Init+0x18>
  }
}
 800389c:	b003      	add	sp, #12
 800389e:	bcf0      	pop	{r4, r5, r6, r7}
 80038a0:	46bb      	mov	fp, r7
 80038a2:	46b2      	mov	sl, r6
 80038a4:	46a9      	mov	r9, r5
 80038a6:	46a0      	mov	r8, r4
 80038a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80038aa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038ac:	402f      	ands	r7, r5
 80038ae:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038b0:	465f      	mov	r7, fp
 80038b2:	68ff      	ldr	r7, [r7, #12]
 80038b4:	40b7      	lsls	r7, r6
 80038b6:	46b8      	mov	r8, r7
 80038b8:	464f      	mov	r7, r9
 80038ba:	4645      	mov	r5, r8
 80038bc:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80038be:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80038c0:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038c2:	002f      	movs	r7, r5
 80038c4:	4665      	mov	r5, ip
 80038c6:	43af      	bics	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c8:	0925      	lsrs	r5, r4, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038ca:	46b8      	mov	r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038cc:	002f      	movs	r7, r5
 80038ce:	2501      	movs	r5, #1
 80038d0:	402f      	ands	r7, r5
 80038d2:	409f      	lsls	r7, r3
 80038d4:	46bc      	mov	ip, r7
 80038d6:	4647      	mov	r7, r8
 80038d8:	4665      	mov	r5, ip
 80038da:	432f      	orrs	r7, r5
        GPIOx->OTYPER = temp;
 80038dc:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80038de:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038e0:	002f      	movs	r7, r5
 80038e2:	9d00      	ldr	r5, [sp, #0]
 80038e4:	402f      	ands	r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038e6:	465d      	mov	r5, fp
 80038e8:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038ea:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038ec:	002f      	movs	r7, r5
 80038ee:	40b7      	lsls	r7, r6
 80038f0:	46bc      	mov	ip, r7
 80038f2:	4647      	mov	r7, r8
 80038f4:	4665      	mov	r5, ip
 80038f6:	432f      	orrs	r7, r5
        GPIOx->PUPDR = temp;
 80038f8:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038fa:	2a02      	cmp	r2, #2
 80038fc:	d000      	beq.n	8003900 <HAL_GPIO_Init+0x14c>
 80038fe:	e77c      	b.n	80037fa <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8003900:	08dd      	lsrs	r5, r3, #3
 8003902:	00ad      	lsls	r5, r5, #2
 8003904:	46ac      	mov	ip, r5
 8003906:	4484      	add	ip, r0
 8003908:	4665      	mov	r5, ip
 800390a:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800390c:	2507      	movs	r5, #7
 800390e:	401d      	ands	r5, r3
 8003910:	00ad      	lsls	r5, r5, #2
 8003912:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8003914:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003916:	250f      	movs	r5, #15
 8003918:	4647      	mov	r7, r8
 800391a:	40bd      	lsls	r5, r7
 800391c:	9f01      	ldr	r7, [sp, #4]
 800391e:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003920:	465d      	mov	r5, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003922:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003924:	4647      	mov	r7, r8
 8003926:	692d      	ldr	r5, [r5, #16]
 8003928:	40bd      	lsls	r5, r7
 800392a:	9f01      	ldr	r7, [sp, #4]
 800392c:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 800392e:	4665      	mov	r5, ip
 8003930:	622f      	str	r7, [r5, #32]
 8003932:	e762      	b.n	80037fa <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8003934:	4656      	mov	r6, sl
 8003936:	4332      	orrs	r2, r6
        EXTI->RTSR1 = temp;
 8003938:	4e1a      	ldr	r6, [pc, #104]	@ (80039a4 <HAL_GPIO_Init+0x1f0>)
 800393a:	6032      	str	r2, [r6, #0]
        temp = EXTI->FTSR1;
 800393c:	6872      	ldr	r2, [r6, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800393e:	2680      	movs	r6, #128	@ 0x80
 8003940:	03b6      	lsls	r6, r6, #14
 8003942:	4234      	tst	r4, r6
 8003944:	d093      	beq.n	800386e <HAL_GPIO_Init+0xba>
          temp |= iocurrent;
 8003946:	4656      	mov	r6, sl
 8003948:	4332      	orrs	r2, r6
        EXTI->FTSR1 = temp;
 800394a:	4e16      	ldr	r6, [pc, #88]	@ (80039a4 <HAL_GPIO_Init+0x1f0>)
 800394c:	6072      	str	r2, [r6, #4]
        temp = EXTI->EMR1;
 800394e:	2284      	movs	r2, #132	@ 0x84
 8003950:	58b2      	ldr	r2, [r6, r2]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003952:	03a6      	lsls	r6, r4, #14
 8003954:	d592      	bpl.n	800387c <HAL_GPIO_Init+0xc8>
          temp |= iocurrent;
 8003956:	4656      	mov	r6, sl
 8003958:	4332      	orrs	r2, r6
        EXTI->EMR1 = temp;
 800395a:	2684      	movs	r6, #132	@ 0x84
 800395c:	4f11      	ldr	r7, [pc, #68]	@ (80039a4 <HAL_GPIO_Init+0x1f0>)
 800395e:	51ba      	str	r2, [r7, r6]
        temp = EXTI->IMR1;
 8003960:	2280      	movs	r2, #128	@ 0x80
 8003962:	58ba      	ldr	r2, [r7, r2]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003964:	03e4      	lsls	r4, r4, #15
 8003966:	d591      	bpl.n	800388c <HAL_GPIO_Init+0xd8>
          temp |= iocurrent;
 8003968:	4654      	mov	r4, sl
 800396a:	4314      	orrs	r4, r2
 800396c:	0022      	movs	r2, r4
 800396e:	e78e      	b.n	800388e <HAL_GPIO_Init+0xda>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003970:	2703      	movs	r7, #3
 8003972:	40b7      	lsls	r7, r6
 8003974:	433d      	orrs	r5, r7
 8003976:	e769      	b.n	800384c <HAL_GPIO_Init+0x98>
 8003978:	2701      	movs	r7, #1
 800397a:	40b7      	lsls	r7, r6
 800397c:	433d      	orrs	r5, r7
 800397e:	e765      	b.n	800384c <HAL_GPIO_Init+0x98>
 8003980:	2702      	movs	r7, #2
 8003982:	40b7      	lsls	r7, r6
 8003984:	433d      	orrs	r5, r7
 8003986:	e761      	b.n	800384c <HAL_GPIO_Init+0x98>
        temp = GPIOx->PUPDR;
 8003988:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800398a:	9f00      	ldr	r7, [sp, #0]
 800398c:	403d      	ands	r5, r7
 800398e:	46a8      	mov	r8, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003990:	465d      	mov	r5, fp
 8003992:	68ad      	ldr	r5, [r5, #8]
 8003994:	40b5      	lsls	r5, r6
 8003996:	46ac      	mov	ip, r5
 8003998:	4645      	mov	r5, r8
 800399a:	4667      	mov	r7, ip
 800399c:	433d      	orrs	r5, r7
        GPIOx->PUPDR = temp;
 800399e:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a0:	e72b      	b.n	80037fa <HAL_GPIO_Init+0x46>
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	40021800 	.word	0x40021800
 80039a8:	50000400 	.word	0x50000400
 80039ac:	50000800 	.word	0x50000800
 80039b0:	50000c00 	.word	0x50000c00

080039b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039b4:	2a00      	cmp	r2, #0
 80039b6:	d001      	beq.n	80039bc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039b8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039ba:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039bc:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80039be:	e7fc      	b.n	80039ba <HAL_GPIO_WritePin+0x6>

080039c0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039c0:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039c2:	0013      	movs	r3, r2
 80039c4:	400b      	ands	r3, r1
 80039c6:	041b      	lsls	r3, r3, #16
 80039c8:	4391      	bics	r1, r2
 80039ca:	430b      	orrs	r3, r1
 80039cc:	6183      	str	r3, [r0, #24]
}
 80039ce:	4770      	bx	lr

080039d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80039d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a00 <HAL_GPIO_EXTI_IRQHandler+0x30>)
{
 80039d2:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80039d4:	68da      	ldr	r2, [r3, #12]
{
 80039d6:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80039d8:	4210      	tst	r0, r2
 80039da:	d104      	bne.n	80039e6 <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80039dc:	4b08      	ldr	r3, [pc, #32]	@ (8003a00 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	4222      	tst	r2, r4
 80039e2:	d107      	bne.n	80039f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 80039e4:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80039e6:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80039e8:	f7fe fdd0 	bl	800258c <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80039ec:	4b04      	ldr	r3, [pc, #16]	@ (8003a00 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	4222      	tst	r2, r4
 80039f2:	d0f7      	beq.n	80039e4 <HAL_GPIO_EXTI_IRQHandler+0x14>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80039f4:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80039f6:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80039f8:	f7fe fdd0 	bl	800259c <HAL_GPIO_EXTI_Falling_Callback>
}
 80039fc:	e7f2      	b.n	80039e4 <HAL_GPIO_EXTI_IRQHandler+0x14>
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	40021800 	.word	0x40021800

08003a04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a04:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a06:	4c13      	ldr	r4, [pc, #76]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8003a08:	4a13      	ldr	r2, [pc, #76]	@ (8003a58 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8003a0a:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003a0c:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a0e:	4013      	ands	r3, r2
 8003a10:	4303      	orrs	r3, r0
 8003a12:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a14:	2380      	movs	r3, #128	@ 0x80
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4298      	cmp	r0, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8003a1c:	0028      	movs	r0, r5
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003a20:	4b0e      	ldr	r3, [pc, #56]	@ (8003a5c <HAL_PWREx_ControlVoltageScaling+0x58>)
 8003a22:	490f      	ldr	r1, [pc, #60]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	0058      	lsls	r0, r3, #1
 8003a28:	18c0      	adds	r0, r0, r3
 8003a2a:	0040      	lsls	r0, r0, #1
 8003a2c:	f7fc fb6a 	bl	8000104 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a30:	2280      	movs	r2, #128	@ 0x80
 8003a32:	6963      	ldr	r3, [r4, #20]
 8003a34:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003a36:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a38:	4213      	tst	r3, r2
 8003a3a:	d102      	bne.n	8003a42 <HAL_PWREx_ControlVoltageScaling+0x3e>
 8003a3c:	e7ee      	b.n	8003a1c <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a42:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8003a44:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a46:	4213      	tst	r3, r2
 8003a48:	d1f9      	bne.n	8003a3e <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8003a4a:	2500      	movs	r5, #0
 8003a4c:	e7e6      	b.n	8003a1c <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8003a4e:	2503      	movs	r5, #3
 8003a50:	e7e4      	b.n	8003a1c <HAL_PWREx_ControlVoltageScaling+0x18>
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	40007000 	.word	0x40007000
 8003a58:	fffff9ff 	.word	0xfffff9ff
 8003a5c:	20000000 	.word	0x20000000
 8003a60:	000f4240 	.word	0x000f4240

08003a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a66:	46ce      	mov	lr, r9
 8003a68:	4647      	mov	r7, r8
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	0004      	movs	r4, r0
 8003a6e:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d027      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a74:	6803      	ldr	r3, [r0, #0]
 8003a76:	07da      	lsls	r2, r3, #31
 8003a78:	d511      	bpl.n	8003a9e <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a7a:	2238      	movs	r2, #56	@ 0x38
 8003a7c:	49c0      	ldr	r1, [pc, #768]	@ (8003d80 <HAL_RCC_OscConfig+0x31c>)
 8003a7e:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a80:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a82:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003a84:	2a10      	cmp	r2, #16
 8003a86:	d100      	bne.n	8003a8a <HAL_RCC_OscConfig+0x26>
 8003a88:	e0cc      	b.n	8003c24 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003a8a:	2a08      	cmp	r2, #8
 8003a8c:	d000      	beq.n	8003a90 <HAL_RCC_OscConfig+0x2c>
 8003a8e:	e0cd      	b.n	8003c2c <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	4abb      	ldr	r2, [pc, #748]	@ (8003d80 <HAL_RCC_OscConfig+0x31c>)
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	0392      	lsls	r2, r2, #14
 8003a96:	d502      	bpl.n	8003a9e <HAL_RCC_OscConfig+0x3a>
 8003a98:	6862      	ldr	r2, [r4, #4]
 8003a9a:	2a00      	cmp	r2, #0
 8003a9c:	d012      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9e:	079a      	lsls	r2, r3, #30
 8003aa0:	d532      	bpl.n	8003b08 <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aa2:	2338      	movs	r3, #56	@ 0x38
 8003aa4:	4ab6      	ldr	r2, [pc, #728]	@ (8003d80 <HAL_RCC_OscConfig+0x31c>)
 8003aa6:	6891      	ldr	r1, [r2, #8]
 8003aa8:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aaa:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d100      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x4e>
 8003ab0:	e10b      	b.n	8003cca <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d000      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x54>
 8003ab6:	e10d      	b.n	8003cd4 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab8:	6813      	ldr	r3, [r2, #0]
 8003aba:	055b      	lsls	r3, r3, #21
 8003abc:	d508      	bpl.n	8003ad0 <HAL_RCC_OscConfig+0x6c>
 8003abe:	68e3      	ldr	r3, [r4, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8003ac4:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8003ac6:	b003      	add	sp, #12
 8003ac8:	bcc0      	pop	{r6, r7}
 8003aca:	46b9      	mov	r9, r7
 8003acc:	46b0      	mov	r8, r6
 8003ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad0:	6851      	ldr	r1, [r2, #4]
 8003ad2:	6963      	ldr	r3, [r4, #20]
 8003ad4:	48ab      	ldr	r0, [pc, #684]	@ (8003d84 <HAL_RCC_OscConfig+0x320>)
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	4001      	ands	r1, r0
 8003ada:	430b      	orrs	r3, r1
 8003adc:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ade:	4aa8      	ldr	r2, [pc, #672]	@ (8003d80 <HAL_RCC_OscConfig+0x31c>)
 8003ae0:	49a9      	ldr	r1, [pc, #676]	@ (8003d88 <HAL_RCC_OscConfig+0x324>)
 8003ae2:	6813      	ldr	r3, [r2, #0]
 8003ae4:	400b      	ands	r3, r1
 8003ae6:	6921      	ldr	r1, [r4, #16]
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003aec:	6813      	ldr	r3, [r2, #0]
 8003aee:	4aa7      	ldr	r2, [pc, #668]	@ (8003d8c <HAL_RCC_OscConfig+0x328>)
 8003af0:	049b      	lsls	r3, r3, #18
 8003af2:	0f5b      	lsrs	r3, r3, #29
 8003af4:	40da      	lsrs	r2, r3
 8003af6:	49a6      	ldr	r1, [pc, #664]	@ (8003d90 <HAL_RCC_OscConfig+0x32c>)
 8003af8:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003afa:	4ba6      	ldr	r3, [pc, #664]	@ (8003d94 <HAL_RCC_OscConfig+0x330>)
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	f7ff f8fb 	bl	8002cf8 <HAL_InitTick>
 8003b02:	2800      	cmp	r0, #0
 8003b04:	d1de      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	071a      	lsls	r2, r3, #28
 8003b0a:	d46d      	bmi.n	8003be8 <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0c:	075b      	lsls	r3, r3, #29
 8003b0e:	d545      	bpl.n	8003b9c <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b10:	2338      	movs	r3, #56	@ 0x38
 8003b12:	4a9b      	ldr	r2, [pc, #620]	@ (8003d80 <HAL_RCC_OscConfig+0x31c>)
 8003b14:	6891      	ldr	r1, [r2, #8]
 8003b16:	400b      	ands	r3, r1
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d100      	bne.n	8003b1e <HAL_RCC_OscConfig+0xba>
 8003b1c:	e0cc      	b.n	8003cb8 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b1e:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003b20:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b22:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003b24:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003b26:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b28:	4219      	tst	r1, r3
 8003b2a:	d108      	bne.n	8003b3e <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 8003b2c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003b2e:	4319      	orrs	r1, r3
 8003b30:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8003b32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b34:	4013      	ands	r3, r2
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b3e:	2780      	movs	r7, #128	@ 0x80
 8003b40:	4e95      	ldr	r6, [pc, #596]	@ (8003d98 <HAL_RCC_OscConfig+0x334>)
 8003b42:	007f      	lsls	r7, r7, #1
 8003b44:	6833      	ldr	r3, [r6, #0]
 8003b46:	423b      	tst	r3, r7
 8003b48:	d100      	bne.n	8003b4c <HAL_RCC_OscConfig+0xe8>
 8003b4a:	e0ff      	b.n	8003d4c <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4c:	68a3      	ldr	r3, [r4, #8]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d100      	bne.n	8003b54 <HAL_RCC_OscConfig+0xf0>
 8003b52:	e0e5      	b.n	8003d20 <HAL_RCC_OscConfig+0x2bc>
 8003b54:	2b05      	cmp	r3, #5
 8003b56:	d100      	bne.n	8003b5a <HAL_RCC_OscConfig+0xf6>
 8003b58:	e1d1      	b.n	8003efe <HAL_RCC_OscConfig+0x49a>
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	4e88      	ldr	r6, [pc, #544]	@ (8003d80 <HAL_RCC_OscConfig+0x31c>)
 8003b5e:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8003b60:	438a      	bics	r2, r1
 8003b62:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8003b64:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8003b66:	3103      	adds	r1, #3
 8003b68:	438a      	bics	r2, r1
 8003b6a:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d000      	beq.n	8003b72 <HAL_RCC_OscConfig+0x10e>
 8003b70:	e0da      	b.n	8003d28 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8003b72:	f7ff f907 	bl	8002d84 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b76:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8003b78:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b7a:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	4d87      	ldr	r5, [pc, #540]	@ (8003d9c <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b7e:	e005      	b.n	8003b8c <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7ff f900 	bl	8002d84 <HAL_GetTick>
 8003b84:	1bc0      	subs	r0, r0, r7
 8003b86:	42a8      	cmp	r0, r5
 8003b88:	d900      	bls.n	8003b8c <HAL_RCC_OscConfig+0x128>
 8003b8a:	e0ee      	b.n	8003d6a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8003b90:	421a      	tst	r2, r3
 8003b92:	d1f5      	bne.n	8003b80 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 8003b94:	464b      	mov	r3, r9
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d100      	bne.n	8003b9c <HAL_RCC_OscConfig+0x138>
 8003b9a:	e16a      	b.n	8003e72 <HAL_RCC_OscConfig+0x40e>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b9c:	69e3      	ldr	r3, [r4, #28]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d020      	beq.n	8003be4 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ba2:	2238      	movs	r2, #56	@ 0x38
 8003ba4:	4d76      	ldr	r5, [pc, #472]	@ (8003d80 <HAL_RCC_OscConfig+0x31c>)
 8003ba6:	68a9      	ldr	r1, [r5, #8]
 8003ba8:	400a      	ands	r2, r1
 8003baa:	2a10      	cmp	r2, #16
 8003bac:	d100      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x14c>
 8003bae:	e11d      	b.n	8003dec <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d100      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x152>
 8003bb4:	e163      	b.n	8003e7e <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_PLL_DISABLE();
 8003bb6:	682b      	ldr	r3, [r5, #0]
 8003bb8:	4a79      	ldr	r2, [pc, #484]	@ (8003da0 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bba:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003bc0:	f7ff f8e0 	bl	8002d84 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc4:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8003bc6:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc8:	e005      	b.n	8003bd6 <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bca:	f7ff f8db 	bl	8002d84 <HAL_GetTick>
 8003bce:	1b00      	subs	r0, r0, r4
 8003bd0:	2802      	cmp	r0, #2
 8003bd2:	d900      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x172>
 8003bd4:	e0c9      	b.n	8003d6a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd6:	682b      	ldr	r3, [r5, #0]
 8003bd8:	4233      	tst	r3, r6
 8003bda:	d1f6      	bne.n	8003bca <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003bdc:	68eb      	ldr	r3, [r5, #12]
 8003bde:	4a71      	ldr	r2, [pc, #452]	@ (8003da4 <HAL_RCC_OscConfig+0x340>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8003be4:	2000      	movs	r0, #0
 8003be6:	e76e      	b.n	8003ac6 <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003be8:	2238      	movs	r2, #56	@ 0x38
 8003bea:	4d65      	ldr	r5, [pc, #404]	@ (8003d80 <HAL_RCC_OscConfig+0x31c>)
 8003bec:	68a9      	ldr	r1, [r5, #8]
 8003bee:	400a      	ands	r2, r1
 8003bf0:	2a18      	cmp	r2, #24
 8003bf2:	d043      	beq.n	8003c7c <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bf4:	69a3      	ldr	r3, [r4, #24]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d100      	bne.n	8003bfc <HAL_RCC_OscConfig+0x198>
 8003bfa:	e0b8      	b.n	8003d6e <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c00:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8003c02:	4313      	orrs	r3, r2
 8003c04:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003c06:	f7ff f8bd 	bl	8002d84 <HAL_GetTick>
 8003c0a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c0c:	e005      	b.n	8003c1a <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0e:	f7ff f8b9 	bl	8002d84 <HAL_GetTick>
 8003c12:	1b80      	subs	r0, r0, r6
 8003c14:	2802      	cmp	r0, #2
 8003c16:	d900      	bls.n	8003c1a <HAL_RCC_OscConfig+0x1b6>
 8003c18:	e0a7      	b.n	8003d6a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c1a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003c1c:	421f      	tst	r7, r3
 8003c1e:	d0f6      	beq.n	8003c0e <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	e773      	b.n	8003b0c <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c24:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003c26:	0789      	lsls	r1, r1, #30
 8003c28:	d100      	bne.n	8003c2c <HAL_RCC_OscConfig+0x1c8>
 8003c2a:	e731      	b.n	8003a90 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2c:	2280      	movs	r2, #128	@ 0x80
 8003c2e:	6863      	ldr	r3, [r4, #4]
 8003c30:	0252      	lsls	r2, r2, #9
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d02b      	beq.n	8003c8e <HAL_RCC_OscConfig+0x22a>
 8003c36:	21a0      	movs	r1, #160	@ 0xa0
 8003c38:	02c9      	lsls	r1, r1, #11
 8003c3a:	428b      	cmp	r3, r1
 8003c3c:	d100      	bne.n	8003c40 <HAL_RCC_OscConfig+0x1dc>
 8003c3e:	e103      	b.n	8003e48 <HAL_RCC_OscConfig+0x3e4>
 8003c40:	4d4f      	ldr	r5, [pc, #316]	@ (8003d80 <HAL_RCC_OscConfig+0x31c>)
 8003c42:	4959      	ldr	r1, [pc, #356]	@ (8003da8 <HAL_RCC_OscConfig+0x344>)
 8003c44:	682a      	ldr	r2, [r5, #0]
 8003c46:	400a      	ands	r2, r1
 8003c48:	602a      	str	r2, [r5, #0]
 8003c4a:	682a      	ldr	r2, [r5, #0]
 8003c4c:	4957      	ldr	r1, [pc, #348]	@ (8003dac <HAL_RCC_OscConfig+0x348>)
 8003c4e:	400a      	ands	r2, r1
 8003c50:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d11f      	bne.n	8003c96 <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 8003c56:	f7ff f895 	bl	8002d84 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c5a:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003c5c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c5e:	02bf      	lsls	r7, r7, #10
 8003c60:	e004      	b.n	8003c6c <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c62:	f7ff f88f 	bl	8002d84 <HAL_GetTick>
 8003c66:	1b80      	subs	r0, r0, r6
 8003c68:	2864      	cmp	r0, #100	@ 0x64
 8003c6a:	d87e      	bhi.n	8003d6a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	423b      	tst	r3, r7
 8003c70:	d1f7      	bne.n	8003c62 <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	079a      	lsls	r2, r3, #30
 8003c76:	d400      	bmi.n	8003c7a <HAL_RCC_OscConfig+0x216>
 8003c78:	e746      	b.n	8003b08 <HAL_RCC_OscConfig+0xa4>
 8003c7a:	e712      	b.n	8003aa2 <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c7c:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8003c7e:	0792      	lsls	r2, r2, #30
 8003c80:	d400      	bmi.n	8003c84 <HAL_RCC_OscConfig+0x220>
 8003c82:	e743      	b.n	8003b0c <HAL_RCC_OscConfig+0xa8>
 8003c84:	69a2      	ldr	r2, [r4, #24]
 8003c86:	2a00      	cmp	r2, #0
 8003c88:	d000      	beq.n	8003c8c <HAL_RCC_OscConfig+0x228>
 8003c8a:	e73f      	b.n	8003b0c <HAL_RCC_OscConfig+0xa8>
 8003c8c:	e71a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8e:	4a3c      	ldr	r2, [pc, #240]	@ (8003d80 <HAL_RCC_OscConfig+0x31c>)
 8003c90:	6811      	ldr	r1, [r2, #0]
 8003c92:	430b      	orrs	r3, r1
 8003c94:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c96:	f7ff f875 	bl	8002d84 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c9a:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003c9c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c9e:	4f38      	ldr	r7, [pc, #224]	@ (8003d80 <HAL_RCC_OscConfig+0x31c>)
 8003ca0:	02b6      	lsls	r6, r6, #10
 8003ca2:	e004      	b.n	8003cae <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca4:	f7ff f86e 	bl	8002d84 <HAL_GetTick>
 8003ca8:	1b40      	subs	r0, r0, r5
 8003caa:	2864      	cmp	r0, #100	@ 0x64
 8003cac:	d85d      	bhi.n	8003d6a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	4233      	tst	r3, r6
 8003cb2:	d0f7      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	e7dd      	b.n	8003c74 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003cb8:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8003cba:	079b      	lsls	r3, r3, #30
 8003cbc:	d400      	bmi.n	8003cc0 <HAL_RCC_OscConfig+0x25c>
 8003cbe:	e76d      	b.n	8003b9c <HAL_RCC_OscConfig+0x138>
 8003cc0:	68a3      	ldr	r3, [r4, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d000      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x264>
 8003cc6:	e769      	b.n	8003b9c <HAL_RCC_OscConfig+0x138>
 8003cc8:	e6fc      	b.n	8003ac4 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cca:	3b0d      	subs	r3, #13
 8003ccc:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d100      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x270>
 8003cd2:	e0c3      	b.n	8003e5c <HAL_RCC_OscConfig+0x3f8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cd4:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003cd6:	4d2a      	ldr	r5, [pc, #168]	@ (8003d80 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d073      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	4a2a      	ldr	r2, [pc, #168]	@ (8003d88 <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce0:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce6:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8003cec:	2380      	movs	r3, #128	@ 0x80
 8003cee:	682a      	ldr	r2, [r5, #0]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003cf6:	f7ff f845 	bl	8002d84 <HAL_GetTick>
 8003cfa:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cfc:	e004      	b.n	8003d08 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfe:	f7ff f841 	bl	8002d84 <HAL_GetTick>
 8003d02:	1b80      	subs	r0, r0, r6
 8003d04:	2802      	cmp	r0, #2
 8003d06:	d830      	bhi.n	8003d6a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	423b      	tst	r3, r7
 8003d0c:	d0f7      	beq.n	8003cfe <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0e:	686a      	ldr	r2, [r5, #4]
 8003d10:	6963      	ldr	r3, [r4, #20]
 8003d12:	491c      	ldr	r1, [pc, #112]	@ (8003d84 <HAL_RCC_OscConfig+0x320>)
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	400a      	ands	r2, r1
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	e6f3      	b.n	8003b08 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d20:	4917      	ldr	r1, [pc, #92]	@ (8003d80 <HAL_RCC_OscConfig+0x31c>)
 8003d22:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8003d24:	4313      	orrs	r3, r2
 8003d26:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8003d28:	f7ff f82c 	bl	8002d84 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d2c:	4b14      	ldr	r3, [pc, #80]	@ (8003d80 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8003d2e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d30:	4698      	mov	r8, r3
 8003d32:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	4d19      	ldr	r5, [pc, #100]	@ (8003d9c <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d36:	e004      	b.n	8003d42 <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7ff f824 	bl	8002d84 <HAL_GetTick>
 8003d3c:	1b80      	subs	r0, r0, r6
 8003d3e:	42a8      	cmp	r0, r5
 8003d40:	d813      	bhi.n	8003d6a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d42:	4643      	mov	r3, r8
 8003d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d46:	421f      	tst	r7, r3
 8003d48:	d0f6      	beq.n	8003d38 <HAL_RCC_OscConfig+0x2d4>
 8003d4a:	e723      	b.n	8003b94 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d4c:	6833      	ldr	r3, [r6, #0]
 8003d4e:	433b      	orrs	r3, r7
 8003d50:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003d52:	f7ff f817 	bl	8002d84 <HAL_GetTick>
 8003d56:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d58:	6833      	ldr	r3, [r6, #0]
 8003d5a:	423b      	tst	r3, r7
 8003d5c:	d000      	beq.n	8003d60 <HAL_RCC_OscConfig+0x2fc>
 8003d5e:	e6f5      	b.n	8003b4c <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d60:	f7ff f810 	bl	8002d84 <HAL_GetTick>
 8003d64:	1b40      	subs	r0, r0, r5
 8003d66:	2802      	cmp	r0, #2
 8003d68:	d9f6      	bls.n	8003d58 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 8003d6a:	2003      	movs	r0, #3
 8003d6c:	e6ab      	b.n	8003ac6 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 8003d6e:	2201      	movs	r2, #1
 8003d70:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d72:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8003d74:	4393      	bics	r3, r2
 8003d76:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003d78:	f7ff f804 	bl	8002d84 <HAL_GetTick>
 8003d7c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d7e:	e01c      	b.n	8003dba <HAL_RCC_OscConfig+0x356>
 8003d80:	40021000 	.word	0x40021000
 8003d84:	ffff80ff 	.word	0xffff80ff
 8003d88:	ffffc7ff 	.word	0xffffc7ff
 8003d8c:	00f42400 	.word	0x00f42400
 8003d90:	20000000 	.word	0x20000000
 8003d94:	20000008 	.word	0x20000008
 8003d98:	40007000 	.word	0x40007000
 8003d9c:	00001388 	.word	0x00001388
 8003da0:	feffffff 	.word	0xfeffffff
 8003da4:	eefefffc 	.word	0xeefefffc
 8003da8:	fffeffff 	.word	0xfffeffff
 8003dac:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db0:	f7fe ffe8 	bl	8002d84 <HAL_GetTick>
 8003db4:	1b80      	subs	r0, r0, r6
 8003db6:	2802      	cmp	r0, #2
 8003db8:	d8d7      	bhi.n	8003d6a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dba:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003dbc:	421f      	tst	r7, r3
 8003dbe:	d1f7      	bne.n	8003db0 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	e6a3      	b.n	8003b0c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	4a55      	ldr	r2, [pc, #340]	@ (8003f1c <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dc8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8003dca:	4013      	ands	r3, r2
 8003dcc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003dce:	f7fe ffd9 	bl	8002d84 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dd2:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8003dd4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dd6:	e004      	b.n	8003de2 <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd8:	f7fe ffd4 	bl	8002d84 <HAL_GetTick>
 8003ddc:	1b80      	subs	r0, r0, r6
 8003dde:	2802      	cmp	r0, #2
 8003de0:	d8c3      	bhi.n	8003d6a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003de2:	682b      	ldr	r3, [r5, #0]
 8003de4:	423b      	tst	r3, r7
 8003de6:	d1f7      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	e68d      	b.n	8003b08 <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d100      	bne.n	8003df2 <HAL_RCC_OscConfig+0x38e>
 8003df0:	e668      	b.n	8003ac4 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df2:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8003df4:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	6a21      	ldr	r1, [r4, #32]
 8003df8:	4002      	ands	r2, r0
 8003dfa:	428a      	cmp	r2, r1
 8003dfc:	d000      	beq.n	8003e00 <HAL_RCC_OscConfig+0x39c>
 8003dfe:	e661      	b.n	8003ac4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e00:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e04:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	428a      	cmp	r2, r1
 8003e08:	d000      	beq.n	8003e0c <HAL_RCC_OscConfig+0x3a8>
 8003e0a:	e65b      	b.n	8003ac4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e0c:	21fe      	movs	r1, #254	@ 0xfe
 8003e0e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003e10:	01c9      	lsls	r1, r1, #7
 8003e12:	4001      	ands	r1, r0
 8003e14:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e16:	4291      	cmp	r1, r2
 8003e18:	d000      	beq.n	8003e1c <HAL_RCC_OscConfig+0x3b8>
 8003e1a:	e653      	b.n	8003ac4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e1c:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e1e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e20:	0392      	lsls	r2, r2, #14
 8003e22:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e24:	428a      	cmp	r2, r1
 8003e26:	d000      	beq.n	8003e2a <HAL_RCC_OscConfig+0x3c6>
 8003e28:	e64c      	b.n	8003ac4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e2a:	22e0      	movs	r2, #224	@ 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e2c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e2e:	0512      	lsls	r2, r2, #20
 8003e30:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e32:	428a      	cmp	r2, r1
 8003e34:	d000      	beq.n	8003e38 <HAL_RCC_OscConfig+0x3d4>
 8003e36:	e645      	b.n	8003ac4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003e3a:	0f40      	lsrs	r0, r0, #29
 8003e3c:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e3e:	1ac0      	subs	r0, r0, r3
 8003e40:	1e43      	subs	r3, r0, #1
 8003e42:	4198      	sbcs	r0, r3
 8003e44:	b2c0      	uxtb	r0, r0
 8003e46:	e63e      	b.n	8003ac6 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e48:	2180      	movs	r1, #128	@ 0x80
 8003e4a:	4b35      	ldr	r3, [pc, #212]	@ (8003f20 <HAL_RCC_OscConfig+0x4bc>)
 8003e4c:	02c9      	lsls	r1, r1, #11
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	4301      	orrs	r1, r0
 8003e52:	6019      	str	r1, [r3, #0]
 8003e54:	6819      	ldr	r1, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e5a:	e71c      	b.n	8003c96 <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e5c:	6813      	ldr	r3, [r2, #0]
 8003e5e:	055b      	lsls	r3, r3, #21
 8003e60:	d457      	bmi.n	8003f12 <HAL_RCC_OscConfig+0x4ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e62:	6851      	ldr	r1, [r2, #4]
 8003e64:	6963      	ldr	r3, [r4, #20]
 8003e66:	482f      	ldr	r0, [pc, #188]	@ (8003f24 <HAL_RCC_OscConfig+0x4c0>)
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	4001      	ands	r1, r0
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e70:	e643      	b.n	8003afa <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e72:	4a2b      	ldr	r2, [pc, #172]	@ (8003f20 <HAL_RCC_OscConfig+0x4bc>)
 8003e74:	492c      	ldr	r1, [pc, #176]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003e76:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8003e78:	400b      	ands	r3, r1
 8003e7a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003e7c:	e68e      	b.n	8003b9c <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 8003e7e:	682b      	ldr	r3, [r5, #0]
 8003e80:	4a2a      	ldr	r2, [pc, #168]	@ (8003f2c <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e82:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003e84:	4013      	ands	r3, r2
 8003e86:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e88:	f7fe ff7c 	bl	8002d84 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e8c:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8003e8e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e90:	e005      	b.n	8003e9e <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e92:	f7fe ff77 	bl	8002d84 <HAL_GetTick>
 8003e96:	1b80      	subs	r0, r0, r6
 8003e98:	2802      	cmp	r0, #2
 8003e9a:	d900      	bls.n	8003e9e <HAL_RCC_OscConfig+0x43a>
 8003e9c:	e765      	b.n	8003d6a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9e:	682b      	ldr	r3, [r5, #0]
 8003ea0:	423b      	tst	r3, r7
 8003ea2:	d1f6      	bne.n	8003e92 <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003ea6:	6a23      	ldr	r3, [r4, #32]
 8003ea8:	68ea      	ldr	r2, [r5, #12]
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	4920      	ldr	r1, [pc, #128]	@ (8003f30 <HAL_RCC_OscConfig+0x4cc>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eae:	4e1c      	ldr	r6, [pc, #112]	@ (8003f20 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eb0:	400a      	ands	r2, r1
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003ec2:	0212      	lsls	r2, r2, #8
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8003ec8:	2380      	movs	r3, #128	@ 0x80
 8003eca:	682a      	ldr	r2, [r5, #0]
 8003ecc:	045b      	lsls	r3, r3, #17
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003ed2:	2380      	movs	r3, #128	@ 0x80
 8003ed4:	68ea      	ldr	r2, [r5, #12]
 8003ed6:	055b      	lsls	r3, r3, #21
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8003edc:	f7fe ff52 	bl	8002d84 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee0:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003ee2:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee4:	04ad      	lsls	r5, r5, #18
 8003ee6:	e005      	b.n	8003ef4 <HAL_RCC_OscConfig+0x490>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fe ff4c 	bl	8002d84 <HAL_GetTick>
 8003eec:	1b00      	subs	r0, r0, r4
 8003eee:	2802      	cmp	r0, #2
 8003ef0:	d900      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x490>
 8003ef2:	e73a      	b.n	8003d6a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef4:	6833      	ldr	r3, [r6, #0]
 8003ef6:	422b      	tst	r3, r5
 8003ef8:	d0f6      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x484>
  return HAL_OK;
 8003efa:	2000      	movs	r0, #0
 8003efc:	e5e3      	b.n	8003ac6 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003efe:	2104      	movs	r1, #4
 8003f00:	4b07      	ldr	r3, [pc, #28]	@ (8003f20 <HAL_RCC_OscConfig+0x4bc>)
 8003f02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f04:	430a      	orrs	r2, r1
 8003f06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f0a:	3903      	subs	r1, #3
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f10:	e70a      	b.n	8003d28 <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f12:	68e3      	ldr	r3, [r4, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1a4      	bne.n	8003e62 <HAL_RCC_OscConfig+0x3fe>
 8003f18:	e5d4      	b.n	8003ac4 <HAL_RCC_OscConfig+0x60>
 8003f1a:	46c0      	nop			@ (mov r8, r8)
 8003f1c:	fffffeff 	.word	0xfffffeff
 8003f20:	40021000 	.word	0x40021000
 8003f24:	ffff80ff 	.word	0xffff80ff
 8003f28:	efffffff 	.word	0xefffffff
 8003f2c:	feffffff 	.word	0xfeffffff
 8003f30:	11c1808c 	.word	0x11c1808c

08003f34 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f34:	2338      	movs	r3, #56	@ 0x38
 8003f36:	4a22      	ldr	r2, [pc, #136]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 8003f38:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f3a:	6891      	ldr	r1, [r2, #8]
 8003f3c:	420b      	tst	r3, r1
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003f40:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003f42:	4820      	ldr	r0, [pc, #128]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003f44:	049b      	lsls	r3, r3, #18
 8003f46:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003f48:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8003f4a:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f4c:	6891      	ldr	r1, [r2, #8]
 8003f4e:	4019      	ands	r1, r3
 8003f50:	2908      	cmp	r1, #8
 8003f52:	d014      	beq.n	8003f7e <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f54:	6891      	ldr	r1, [r2, #8]
 8003f56:	4019      	ands	r1, r3
 8003f58:	2910      	cmp	r1, #16
 8003f5a:	d012      	beq.n	8003f82 <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f5c:	6891      	ldr	r1, [r2, #8]
 8003f5e:	4019      	ands	r1, r3
 8003f60:	2920      	cmp	r1, #32
 8003f62:	d024      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f64:	6890      	ldr	r0, [r2, #8]
 8003f66:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8003f68:	3818      	subs	r0, #24
 8003f6a:	1e43      	subs	r3, r0, #1
 8003f6c:	4198      	sbcs	r0, r3
 8003f6e:	4b16      	ldr	r3, [pc, #88]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f70:	4240      	negs	r0, r0
 8003f72:	4018      	ands	r0, r3
 8003f74:	23fa      	movs	r3, #250	@ 0xfa
 8003f76:	01db      	lsls	r3, r3, #7
 8003f78:	469c      	mov	ip, r3
 8003f7a:	4460      	add	r0, ip
 8003f7c:	e7e5      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8003f7e:	4813      	ldr	r0, [pc, #76]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8003f80:	e7e3      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003f82:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f84:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003f86:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003f88:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f8a:	0649      	lsls	r1, r1, #25
 8003f8c:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003f8e:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f90:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003f92:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8003f94:	079b      	lsls	r3, r3, #30
 8003f96:	d00d      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003f98:	480a      	ldr	r0, [pc, #40]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x90>)
 8003f9a:	f7fc f8b3 	bl	8000104 <__udivsi3>
 8003f9e:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003fa0:	4b07      	ldr	r3, [pc, #28]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003fa2:	68d9      	ldr	r1, [r3, #12]
 8003fa4:	0f49      	lsrs	r1, r1, #29
 8003fa6:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8003fa8:	f7fc f8ac 	bl	8000104 <__udivsi3>
 8003fac:	e7cd      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8003fae:	2080      	movs	r0, #128	@ 0x80
 8003fb0:	0200      	lsls	r0, r0, #8
 8003fb2:	e7ca      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fb4:	4805      	ldr	r0, [pc, #20]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8003fb6:	f7fc f8a5 	bl	8000104 <__udivsi3>
 8003fba:	4360      	muls	r0, r4
        break;
 8003fbc:	e7f0      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x6c>
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	00f42400 	.word	0x00f42400
 8003fc8:	ffff8300 	.word	0xffff8300
 8003fcc:	007a1200 	.word	0x007a1200

08003fd0 <HAL_RCC_ClockConfig>:
{
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	46ce      	mov	lr, r9
 8003fd4:	4647      	mov	r7, r8
 8003fd6:	0005      	movs	r5, r0
 8003fd8:	000c      	movs	r4, r1
 8003fda:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d026      	beq.n	800402e <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	4e57      	ldr	r6, [pc, #348]	@ (8004140 <HAL_RCC_ClockConfig+0x170>)
 8003fe4:	6833      	ldr	r3, [r6, #0]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	428b      	cmp	r3, r1
 8003fea:	d35e      	bcc.n	80040aa <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	079a      	lsls	r2, r3, #30
 8003ff0:	d50e      	bpl.n	8004010 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff2:	075a      	lsls	r2, r3, #29
 8003ff4:	d505      	bpl.n	8004002 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ff6:	22e0      	movs	r2, #224	@ 0xe0
 8003ff8:	4952      	ldr	r1, [pc, #328]	@ (8004144 <HAL_RCC_ClockConfig+0x174>)
 8003ffa:	01d2      	lsls	r2, r2, #7
 8003ffc:	6888      	ldr	r0, [r1, #8]
 8003ffe:	4302      	orrs	r2, r0
 8004000:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004002:	4950      	ldr	r1, [pc, #320]	@ (8004144 <HAL_RCC_ClockConfig+0x174>)
 8004004:	4850      	ldr	r0, [pc, #320]	@ (8004148 <HAL_RCC_ClockConfig+0x178>)
 8004006:	688a      	ldr	r2, [r1, #8]
 8004008:	4002      	ands	r2, r0
 800400a:	68a8      	ldr	r0, [r5, #8]
 800400c:	4302      	orrs	r2, r0
 800400e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004010:	07db      	lsls	r3, r3, #31
 8004012:	d52b      	bpl.n	800406c <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004014:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004016:	4a4b      	ldr	r2, [pc, #300]	@ (8004144 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004018:	2b01      	cmp	r3, #1
 800401a:	d100      	bne.n	800401e <HAL_RCC_ClockConfig+0x4e>
 800401c:	e07c      	b.n	8004118 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800401e:	2b02      	cmp	r3, #2
 8004020:	d007      	beq.n	8004032 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004022:	2b00      	cmp	r3, #0
 8004024:	d000      	beq.n	8004028 <HAL_RCC_ClockConfig+0x58>
 8004026:	e07d      	b.n	8004124 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	0552      	lsls	r2, r2, #21
 800402c:	d404      	bmi.n	8004038 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800402e:	2001      	movs	r0, #1
 8004030:	e037      	b.n	80040a2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	0192      	lsls	r2, r2, #6
 8004036:	d5fa      	bpl.n	800402e <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004038:	2107      	movs	r1, #7
 800403a:	4e42      	ldr	r6, [pc, #264]	@ (8004144 <HAL_RCC_ClockConfig+0x174>)
 800403c:	68b2      	ldr	r2, [r6, #8]
 800403e:	438a      	bics	r2, r1
 8004040:	4313      	orrs	r3, r2
 8004042:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004044:	f7fe fe9e 	bl	8002d84 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004048:	2338      	movs	r3, #56	@ 0x38
 800404a:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404c:	4b3f      	ldr	r3, [pc, #252]	@ (800414c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800404e:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004050:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004052:	e004      	b.n	800405e <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004054:	f7fe fe96 	bl	8002d84 <HAL_GetTick>
 8004058:	1bc0      	subs	r0, r0, r7
 800405a:	4548      	cmp	r0, r9
 800405c:	d83b      	bhi.n	80040d6 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	4643      	mov	r3, r8
 8004060:	68b2      	ldr	r2, [r6, #8]
 8004062:	401a      	ands	r2, r3
 8004064:	686b      	ldr	r3, [r5, #4]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	429a      	cmp	r2, r3
 800406a:	d1f3      	bne.n	8004054 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800406c:	2207      	movs	r2, #7
 800406e:	4e34      	ldr	r6, [pc, #208]	@ (8004140 <HAL_RCC_ClockConfig+0x170>)
 8004070:	6833      	ldr	r3, [r6, #0]
 8004072:	4013      	ands	r3, r2
 8004074:	42a3      	cmp	r3, r4
 8004076:	d838      	bhi.n	80040ea <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	075b      	lsls	r3, r3, #29
 800407c:	d42d      	bmi.n	80040da <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800407e:	f7ff ff59 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8004082:	4b30      	ldr	r3, [pc, #192]	@ (8004144 <HAL_RCC_ClockConfig+0x174>)
 8004084:	4a32      	ldr	r2, [pc, #200]	@ (8004150 <HAL_RCC_ClockConfig+0x180>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4932      	ldr	r1, [pc, #200]	@ (8004154 <HAL_RCC_ClockConfig+0x184>)
 800408a:	051b      	lsls	r3, r3, #20
 800408c:	0f1b      	lsrs	r3, r3, #28
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	589b      	ldr	r3, [r3, r2]
 8004092:	221f      	movs	r2, #31
 8004094:	4013      	ands	r3, r2
 8004096:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8004098:	4b2f      	ldr	r3, [pc, #188]	@ (8004158 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800409a:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	f7fe fe2b 	bl	8002cf8 <HAL_InitTick>
}
 80040a2:	bcc0      	pop	{r6, r7}
 80040a4:	46b9      	mov	r9, r7
 80040a6:	46b0      	mov	r8, r6
 80040a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040aa:	6833      	ldr	r3, [r6, #0]
 80040ac:	4393      	bics	r3, r2
 80040ae:	430b      	orrs	r3, r1
 80040b0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80040b2:	f7fe fe67 	bl	8002d84 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040b6:	2307      	movs	r3, #7
 80040b8:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ba:	4b24      	ldr	r3, [pc, #144]	@ (800414c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80040bc:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040be:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040c0:	4642      	mov	r2, r8
 80040c2:	6833      	ldr	r3, [r6, #0]
 80040c4:	4013      	ands	r3, r2
 80040c6:	42a3      	cmp	r3, r4
 80040c8:	d100      	bne.n	80040cc <HAL_RCC_ClockConfig+0xfc>
 80040ca:	e78f      	b.n	8003fec <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040cc:	f7fe fe5a 	bl	8002d84 <HAL_GetTick>
 80040d0:	1bc0      	subs	r0, r0, r7
 80040d2:	4548      	cmp	r0, r9
 80040d4:	d9f4      	bls.n	80040c0 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 80040d6:	2003      	movs	r0, #3
 80040d8:	e7e3      	b.n	80040a2 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040da:	4a1a      	ldr	r2, [pc, #104]	@ (8004144 <HAL_RCC_ClockConfig+0x174>)
 80040dc:	491f      	ldr	r1, [pc, #124]	@ (800415c <HAL_RCC_ClockConfig+0x18c>)
 80040de:	6893      	ldr	r3, [r2, #8]
 80040e0:	400b      	ands	r3, r1
 80040e2:	68e9      	ldr	r1, [r5, #12]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6093      	str	r3, [r2, #8]
 80040e8:	e7c9      	b.n	800407e <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	6833      	ldr	r3, [r6, #0]
 80040ec:	4393      	bics	r3, r2
 80040ee:	4323      	orrs	r3, r4
 80040f0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80040f2:	f7fe fe47 	bl	8002d84 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040f6:	2307      	movs	r3, #7
 80040f8:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fa:	4b14      	ldr	r3, [pc, #80]	@ (800414c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80040fc:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fe:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004100:	4642      	mov	r2, r8
 8004102:	6833      	ldr	r3, [r6, #0]
 8004104:	4013      	ands	r3, r2
 8004106:	42a3      	cmp	r3, r4
 8004108:	d0b6      	beq.n	8004078 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410a:	f7fe fe3b 	bl	8002d84 <HAL_GetTick>
 800410e:	1bc0      	subs	r0, r0, r7
 8004110:	4548      	cmp	r0, r9
 8004112:	d9f5      	bls.n	8004100 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8004114:	2003      	movs	r0, #3
 8004116:	e7c4      	b.n	80040a2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004118:	6812      	ldr	r2, [r2, #0]
 800411a:	0392      	lsls	r2, r2, #14
 800411c:	d500      	bpl.n	8004120 <HAL_RCC_ClockConfig+0x150>
 800411e:	e78b      	b.n	8004038 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8004120:	2001      	movs	r0, #1
 8004122:	e7be      	b.n	80040a2 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004124:	2b03      	cmp	r3, #3
 8004126:	d005      	beq.n	8004134 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004128:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800412a:	0792      	lsls	r2, r2, #30
 800412c:	d500      	bpl.n	8004130 <HAL_RCC_ClockConfig+0x160>
 800412e:	e783      	b.n	8004038 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8004130:	2001      	movs	r0, #1
 8004132:	e7b6      	b.n	80040a2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004134:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8004136:	0792      	lsls	r2, r2, #30
 8004138:	d500      	bpl.n	800413c <HAL_RCC_ClockConfig+0x16c>
 800413a:	e77d      	b.n	8004038 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800413c:	2001      	movs	r0, #1
 800413e:	e7b0      	b.n	80040a2 <HAL_RCC_ClockConfig+0xd2>
 8004140:	40022000 	.word	0x40022000
 8004144:	40021000 	.word	0x40021000
 8004148:	fffff0ff 	.word	0xfffff0ff
 800414c:	00001388 	.word	0x00001388
 8004150:	08005198 	.word	0x08005198
 8004154:	20000000 	.word	0x20000000
 8004158:	20000008 	.word	0x20000008
 800415c:	ffff8fff 	.word	0xffff8fff

08004160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004162:	46d6      	mov	lr, sl
 8004164:	464f      	mov	r7, r9
 8004166:	4646      	mov	r6, r8
 8004168:	b5c0      	push	{r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800416a:	6803      	ldr	r3, [r0, #0]
{
 800416c:	0004      	movs	r4, r0
 800416e:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004170:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004172:	039a      	lsls	r2, r3, #14
 8004174:	d543      	bpl.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x9e>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004176:	2280      	movs	r2, #128	@ 0x80
 8004178:	4b68      	ldr	r3, [pc, #416]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800417a:	0552      	lsls	r2, r2, #21
 800417c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800417e:	4682      	mov	sl, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004180:	4211      	tst	r1, r2
 8004182:	d100      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004184:	e095      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004186:	2780      	movs	r7, #128	@ 0x80
 8004188:	4d65      	ldr	r5, [pc, #404]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800418a:	007f      	lsls	r7, r7, #1
 800418c:	682b      	ldr	r3, [r5, #0]
 800418e:	433b      	orrs	r3, r7
 8004190:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004192:	f7fe fdf7 	bl	8002d84 <HAL_GetTick>
 8004196:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004198:	e004      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800419a:	f7fe fdf3 	bl	8002d84 <HAL_GetTick>
 800419e:	1b80      	subs	r0, r0, r6
 80041a0:	2802      	cmp	r0, #2
 80041a2:	d827      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	423b      	tst	r3, r7
 80041a8:	d0f7      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041aa:	4d5c      	ldr	r5, [pc, #368]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041ac:	23c0      	movs	r3, #192	@ 0xc0
 80041ae:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	0010      	movs	r0, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041b6:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041b8:	421a      	tst	r2, r3
 80041ba:	d100      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80041bc:	e0a6      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80041be:	4288      	cmp	r0, r1
 80041c0:	d100      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041c2:	e0a3      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041c4:	2080      	movs	r0, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041c6:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 80041c8:	6dee      	ldr	r6, [r5, #92]	@ 0x5c
 80041ca:	0240      	lsls	r0, r0, #9
 80041cc:	4330      	orrs	r0, r6
 80041ce:	65e8      	str	r0, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041d0:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041d2:	4a54      	ldr	r2, [pc, #336]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041d4:	4e54      	ldr	r6, [pc, #336]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041d6:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041d8:	4030      	ands	r0, r6
 80041da:	65e8      	str	r0, [r5, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041dc:	65ea      	str	r2, [r5, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041de:	07db      	lsls	r3, r3, #31
 80041e0:	d400      	bmi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x84>
 80041e2:	e093      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fe fdce 	bl	8002d84 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e8:	2302      	movs	r3, #2
 80041ea:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ec:	4b4f      	ldr	r3, [pc, #316]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
        tickstart = HAL_GetTick();
 80041ee:	0006      	movs	r6, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f0:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f2:	e086      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041f4:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041f6:	4652      	mov	r2, sl
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041f8:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 80041fa:	2a01      	cmp	r2, #1
 80041fc:	d063      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041fe:	07da      	lsls	r2, r3, #31
 8004200:	d506      	bpl.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004202:	2503      	movs	r5, #3
 8004204:	4945      	ldr	r1, [pc, #276]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004206:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8004208:	43aa      	bics	r2, r5
 800420a:	6865      	ldr	r5, [r4, #4]
 800420c:	432a      	orrs	r2, r5
 800420e:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004210:	06da      	lsls	r2, r3, #27
 8004212:	d506      	bpl.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004214:	4941      	ldr	r1, [pc, #260]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004216:	4d46      	ldr	r5, [pc, #280]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004218:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800421a:	402a      	ands	r2, r5
 800421c:	68a5      	ldr	r5, [r4, #8]
 800421e:	432a      	orrs	r2, r5
 8004220:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004222:	059a      	lsls	r2, r3, #22
 8004224:	d506      	bpl.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004226:	493d      	ldr	r1, [pc, #244]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004228:	4d42      	ldr	r5, [pc, #264]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800422a:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800422c:	402a      	ands	r2, r5
 800422e:	6965      	ldr	r5, [r4, #20]
 8004230:	432a      	orrs	r2, r5
 8004232:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004234:	055a      	lsls	r2, r3, #21
 8004236:	d506      	bpl.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004238:	4938      	ldr	r1, [pc, #224]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800423a:	4d3f      	ldr	r5, [pc, #252]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800423c:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800423e:	402a      	ands	r2, r5
 8004240:	69a5      	ldr	r5, [r4, #24]
 8004242:	432a      	orrs	r2, r5
 8004244:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004246:	069a      	lsls	r2, r3, #26
 8004248:	d506      	bpl.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800424a:	4934      	ldr	r1, [pc, #208]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800424c:	4d3b      	ldr	r5, [pc, #236]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800424e:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8004250:	402a      	ands	r2, r5
 8004252:	68e5      	ldr	r5, [r4, #12]
 8004254:	432a      	orrs	r2, r5
 8004256:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004258:	045a      	lsls	r2, r3, #17
 800425a:	d50a      	bpl.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800425c:	492f      	ldr	r1, [pc, #188]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800425e:	69e5      	ldr	r5, [r4, #28]
 8004260:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8004262:	0092      	lsls	r2, r2, #2
 8004264:	0892      	lsrs	r2, r2, #2
 8004266:	432a      	orrs	r2, r5
 8004268:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800426a:	2280      	movs	r2, #128	@ 0x80
 800426c:	05d2      	lsls	r2, r2, #23
 800426e:	4295      	cmp	r5, r2
 8004270:	d02f      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x172>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004272:	029a      	lsls	r2, r3, #10
 8004274:	d50a      	bpl.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004276:	4929      	ldr	r1, [pc, #164]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004278:	4e31      	ldr	r6, [pc, #196]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800427a:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800427c:	6a25      	ldr	r5, [r4, #32]
 800427e:	4032      	ands	r2, r6
 8004280:	432a      	orrs	r2, r5
 8004282:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004284:	2280      	movs	r2, #128	@ 0x80
 8004286:	03d2      	lsls	r2, r2, #15
 8004288:	4295      	cmp	r5, r2
 800428a:	d028      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x17e>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800428c:	051b      	lsls	r3, r3, #20
 800428e:	d50a      	bpl.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004290:	4a22      	ldr	r2, [pc, #136]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004292:	6921      	ldr	r1, [r4, #16]
 8004294:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004296:	4c2b      	ldr	r4, [pc, #172]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004298:	4023      	ands	r3, r4
 800429a:	430b      	orrs	r3, r1
 800429c:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800429e:	2380      	movs	r3, #128	@ 0x80
 80042a0:	01db      	lsls	r3, r3, #7
 80042a2:	4299      	cmp	r1, r3
 80042a4:	d021      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 80042a6:	b002      	add	sp, #8
 80042a8:	bce0      	pop	{r5, r6, r7}
 80042aa:	46ba      	mov	sl, r7
 80042ac:	46b1      	mov	r9, r6
 80042ae:	46a8      	mov	r8, r5
 80042b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80042b4:	4311      	orrs	r1, r2
 80042b6:	63d9      	str	r1, [r3, #60]	@ 0x3c
 80042b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ba:	4013      	ands	r3, r2
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80042c0:	2301      	movs	r3, #1
 80042c2:	469a      	mov	sl, r3
 80042c4:	e75f      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c6:	4915      	ldr	r1, [pc, #84]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042c8:	4d1f      	ldr	r5, [pc, #124]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80042ca:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80042cc:	402a      	ands	r2, r5
 80042ce:	63ca      	str	r2, [r1, #60]	@ 0x3c
 80042d0:	e795      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80042d2:	2280      	movs	r2, #128	@ 0x80
 80042d4:	68cd      	ldr	r5, [r1, #12]
 80042d6:	0252      	lsls	r2, r2, #9
 80042d8:	432a      	orrs	r2, r5
 80042da:	60ca      	str	r2, [r1, #12]
 80042dc:	e7c9      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80042de:	2280      	movs	r2, #128	@ 0x80
 80042e0:	68cd      	ldr	r5, [r1, #12]
 80042e2:	0452      	lsls	r2, r2, #17
 80042e4:	432a      	orrs	r2, r5
 80042e6:	60ca      	str	r2, [r1, #12]
 80042e8:	e7d0      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80042ea:	2380      	movs	r3, #128	@ 0x80
 80042ec:	68d1      	ldr	r1, [r2, #12]
 80042ee:	025b      	lsls	r3, r3, #9
 80042f0:	430b      	orrs	r3, r1
 80042f2:	60d3      	str	r3, [r2, #12]
  return status;
 80042f4:	e7d7      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x146>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f6:	f7fe fd45 	bl	8002d84 <HAL_GetTick>
 80042fa:	1b80      	subs	r0, r0, r6
 80042fc:	4548      	cmp	r0, r9
 80042fe:	d900      	bls.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004300:	e778      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004302:	4642      	mov	r2, r8
 8004304:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8004306:	421a      	tst	r2, r3
 8004308:	d0f5      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800430a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800430c:	4a03      	ldr	r2, [pc, #12]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800430e:	4805      	ldr	r0, [pc, #20]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004310:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8004312:	4003      	ands	r3, r0
 8004314:	430b      	orrs	r3, r1
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004316:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004318:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800431a:	e76c      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
 800431c:	40021000 	.word	0x40021000
 8004320:	40007000 	.word	0x40007000
 8004324:	fffffcff 	.word	0xfffffcff
 8004328:	fffeffff 	.word	0xfffeffff
 800432c:	00001388 	.word	0x00001388
 8004330:	fffff3ff 	.word	0xfffff3ff
 8004334:	fff3ffff 	.word	0xfff3ffff
 8004338:	ffcfffff 	.word	0xffcfffff
 800433c:	ffffcfff 	.word	0xffffcfff
 8004340:	ffbfffff 	.word	0xffbfffff
 8004344:	ffff3fff 	.word	0xffff3fff
 8004348:	efffffff 	.word	0xefffffff

0800434c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800434c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434e:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8004350:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004352:	6a02      	ldr	r2, [r0, #32]
 8004354:	43a2      	bics	r2, r4
 8004356:	6202      	str	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004358:	4c12      	ldr	r4, [pc, #72]	@ (80043a4 <TIM_OC1_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 800435a:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800435c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800435e:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004360:	680c      	ldr	r4, [r1, #0]
 8004362:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004364:	2402      	movs	r4, #2
 8004366:	43a3      	bics	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004368:	688c      	ldr	r4, [r1, #8]
 800436a:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800436c:	4c0e      	ldr	r4, [pc, #56]	@ (80043a8 <TIM_OC1_SetConfig+0x5c>)
 800436e:	42a0      	cmp	r0, r4
 8004370:	d005      	beq.n	800437e <TIM_OC1_SetConfig+0x32>
 8004372:	4c0e      	ldr	r4, [pc, #56]	@ (80043ac <TIM_OC1_SetConfig+0x60>)
 8004374:	42a0      	cmp	r0, r4
 8004376:	d002      	beq.n	800437e <TIM_OC1_SetConfig+0x32>
 8004378:	4c0d      	ldr	r4, [pc, #52]	@ (80043b0 <TIM_OC1_SetConfig+0x64>)
 800437a:	42a0      	cmp	r0, r4
 800437c:	d10b      	bne.n	8004396 <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800437e:	2408      	movs	r4, #8
 8004380:	43a3      	bics	r3, r4
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004382:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004384:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8004386:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8004388:	2404      	movs	r4, #4
 800438a:	43a3      	bics	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800438c:	4c09      	ldr	r4, [pc, #36]	@ (80043b4 <TIM_OC1_SetConfig+0x68>)
 800438e:	402c      	ands	r4, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004390:	694d      	ldr	r5, [r1, #20]
 8004392:	4335      	orrs	r5, r6
 8004394:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004396:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004398:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800439a:	684a      	ldr	r2, [r1, #4]
 800439c:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439e:	6203      	str	r3, [r0, #32]
}
 80043a0:	bd70      	pop	{r4, r5, r6, pc}
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	fffeff8c 	.word	0xfffeff8c
 80043a8:	40012c00 	.word	0x40012c00
 80043ac:	40014400 	.word	0x40014400
 80043b0:	40014800 	.word	0x40014800
 80043b4:	fffffcff 	.word	0xfffffcff

080043b8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b8:	6a02      	ldr	r2, [r0, #32]
{
 80043ba:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043bc:	6a03      	ldr	r3, [r0, #32]
 80043be:	4c16      	ldr	r4, [pc, #88]	@ (8004418 <TIM_OC3_SetConfig+0x60>)
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043c0:	4d16      	ldr	r5, [pc, #88]	@ (800441c <TIM_OC3_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043c2:	4023      	ands	r3, r4
 80043c4:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80043c6:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80043c8:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043ca:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043cc:	680d      	ldr	r5, [r1, #0]
 80043ce:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043d0:	4b13      	ldr	r3, [pc, #76]	@ (8004420 <TIM_OC3_SetConfig+0x68>)
 80043d2:	401a      	ands	r2, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043d4:	688b      	ldr	r3, [r1, #8]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043da:	4a12      	ldr	r2, [pc, #72]	@ (8004424 <TIM_OC3_SetConfig+0x6c>)
 80043dc:	4290      	cmp	r0, r2
 80043de:	d012      	beq.n	8004406 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e0:	4a11      	ldr	r2, [pc, #68]	@ (8004428 <TIM_OC3_SetConfig+0x70>)
 80043e2:	4290      	cmp	r0, r2
 80043e4:	d002      	beq.n	80043ec <TIM_OC3_SetConfig+0x34>
 80043e6:	4a11      	ldr	r2, [pc, #68]	@ (800442c <TIM_OC3_SetConfig+0x74>)
 80043e8:	4290      	cmp	r0, r2
 80043ea:	d106      	bne.n	80043fa <TIM_OC3_SetConfig+0x42>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043ec:	4a10      	ldr	r2, [pc, #64]	@ (8004430 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ee:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043f0:	4022      	ands	r2, r4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043f2:	694c      	ldr	r4, [r1, #20]
 80043f4:	4334      	orrs	r4, r6
 80043f6:	0124      	lsls	r4, r4, #4
 80043f8:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043fa:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80043fc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80043fe:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004400:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004402:	6203      	str	r3, [r0, #32]
}
 8004404:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8004406:	4a0b      	ldr	r2, [pc, #44]	@ (8004434 <TIM_OC3_SetConfig+0x7c>)
 8004408:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800440a:	68cb      	ldr	r3, [r1, #12]
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8004410:	4a09      	ldr	r2, [pc, #36]	@ (8004438 <TIM_OC3_SetConfig+0x80>)
 8004412:	4013      	ands	r3, r2
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004414:	e7ea      	b.n	80043ec <TIM_OC3_SetConfig+0x34>
 8004416:	46c0      	nop			@ (mov r8, r8)
 8004418:	fffffeff 	.word	0xfffffeff
 800441c:	fffeff8c 	.word	0xfffeff8c
 8004420:	fffffdff 	.word	0xfffffdff
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40014400 	.word	0x40014400
 800442c:	40014800 	.word	0x40014800
 8004430:	ffffcfff 	.word	0xffffcfff
 8004434:	fffff7ff 	.word	0xfffff7ff
 8004438:	fffffbff 	.word	0xfffffbff

0800443c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800443e:	4a12      	ldr	r2, [pc, #72]	@ (8004488 <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8004440:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004442:	6a03      	ldr	r3, [r0, #32]
 8004444:	4013      	ands	r3, r2
 8004446:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004448:	4a10      	ldr	r2, [pc, #64]	@ (800448c <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 800444a:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800444c:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800444e:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004450:	680a      	ldr	r2, [r1, #0]
 8004452:	0212      	lsls	r2, r2, #8
 8004454:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004456:	4b0e      	ldr	r3, [pc, #56]	@ (8004490 <TIM_OC4_SetConfig+0x54>)
 8004458:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800445a:	688b      	ldr	r3, [r1, #8]
 800445c:	031b      	lsls	r3, r3, #12
 800445e:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004460:	4c0c      	ldr	r4, [pc, #48]	@ (8004494 <TIM_OC4_SetConfig+0x58>)
 8004462:	42a0      	cmp	r0, r4
 8004464:	d005      	beq.n	8004472 <TIM_OC4_SetConfig+0x36>
 8004466:	4c0c      	ldr	r4, [pc, #48]	@ (8004498 <TIM_OC4_SetConfig+0x5c>)
 8004468:	42a0      	cmp	r0, r4
 800446a:	d002      	beq.n	8004472 <TIM_OC4_SetConfig+0x36>
 800446c:	4c0b      	ldr	r4, [pc, #44]	@ (800449c <TIM_OC4_SetConfig+0x60>)
 800446e:	42a0      	cmp	r0, r4
 8004470:	d104      	bne.n	800447c <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004472:	4c0b      	ldr	r4, [pc, #44]	@ (80044a0 <TIM_OC4_SetConfig+0x64>)
 8004474:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004476:	694d      	ldr	r5, [r1, #20]
 8004478:	01ad      	lsls	r5, r5, #6
 800447a:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004480:	684a      	ldr	r2, [r1, #4]
 8004482:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004484:	6203      	str	r3, [r0, #32]
}
 8004486:	bd30      	pop	{r4, r5, pc}
 8004488:	ffffefff 	.word	0xffffefff
 800448c:	feff8cff 	.word	0xfeff8cff
 8004490:	ffffdfff 	.word	0xffffdfff
 8004494:	40012c00 	.word	0x40012c00
 8004498:	40014400 	.word	0x40014400
 800449c:	40014800 	.word	0x40014800
 80044a0:	ffffbfff 	.word	0xffffbfff

080044a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044a4:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044a6:	4a12      	ldr	r2, [pc, #72]	@ (80044f0 <TIM_OC5_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 80044a8:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044aa:	6a03      	ldr	r3, [r0, #32]
 80044ac:	4013      	ands	r3, r2
 80044ae:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044b2:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <TIM_OC5_SetConfig+0x50>)
  tmpccmrx = TIMx->CCMR3;
 80044b4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044b6:	401a      	ands	r2, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b8:	680b      	ldr	r3, [r1, #0]
 80044ba:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044bc:	4b0e      	ldr	r3, [pc, #56]	@ (80044f8 <TIM_OC5_SetConfig+0x54>)
 80044be:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044c0:	688b      	ldr	r3, [r1, #8]
 80044c2:	041b      	lsls	r3, r3, #16
 80044c4:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c6:	4d0d      	ldr	r5, [pc, #52]	@ (80044fc <TIM_OC5_SetConfig+0x58>)
 80044c8:	42a8      	cmp	r0, r5
 80044ca:	d005      	beq.n	80044d8 <TIM_OC5_SetConfig+0x34>
 80044cc:	4d0c      	ldr	r5, [pc, #48]	@ (8004500 <TIM_OC5_SetConfig+0x5c>)
 80044ce:	42a8      	cmp	r0, r5
 80044d0:	d002      	beq.n	80044d8 <TIM_OC5_SetConfig+0x34>
 80044d2:	4d0c      	ldr	r5, [pc, #48]	@ (8004504 <TIM_OC5_SetConfig+0x60>)
 80044d4:	42a8      	cmp	r0, r5
 80044d6:	d104      	bne.n	80044e2 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044d8:	4d05      	ldr	r5, [pc, #20]	@ (80044f0 <TIM_OC5_SetConfig+0x4c>)
 80044da:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044dc:	694c      	ldr	r4, [r1, #20]
 80044de:	0224      	lsls	r4, r4, #8
 80044e0:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044e4:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044e6:	684a      	ldr	r2, [r1, #4]
 80044e8:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ea:	6203      	str	r3, [r0, #32]
}
 80044ec:	bd30      	pop	{r4, r5, pc}
 80044ee:	46c0      	nop			@ (mov r8, r8)
 80044f0:	fffeffff 	.word	0xfffeffff
 80044f4:	fffeff8f 	.word	0xfffeff8f
 80044f8:	fffdffff 	.word	0xfffdffff
 80044fc:	40012c00 	.word	0x40012c00
 8004500:	40014400 	.word	0x40014400
 8004504:	40014800 	.word	0x40014800

08004508 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800450a:	4a12      	ldr	r2, [pc, #72]	@ (8004554 <TIM_OC6_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 800450c:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800450e:	6a03      	ldr	r3, [r0, #32]
 8004510:	4013      	ands	r3, r2
 8004512:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004514:	4a10      	ldr	r2, [pc, #64]	@ (8004558 <TIM_OC6_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8004516:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8004518:	6d43      	ldr	r3, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800451a:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800451c:	680a      	ldr	r2, [r1, #0]
 800451e:	0212      	lsls	r2, r2, #8
 8004520:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004522:	4b0e      	ldr	r3, [pc, #56]	@ (800455c <TIM_OC6_SetConfig+0x54>)
 8004524:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004526:	688b      	ldr	r3, [r1, #8]
 8004528:	051b      	lsls	r3, r3, #20
 800452a:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452c:	4c0c      	ldr	r4, [pc, #48]	@ (8004560 <TIM_OC6_SetConfig+0x58>)
 800452e:	42a0      	cmp	r0, r4
 8004530:	d005      	beq.n	800453e <TIM_OC6_SetConfig+0x36>
 8004532:	4c0c      	ldr	r4, [pc, #48]	@ (8004564 <TIM_OC6_SetConfig+0x5c>)
 8004534:	42a0      	cmp	r0, r4
 8004536:	d002      	beq.n	800453e <TIM_OC6_SetConfig+0x36>
 8004538:	4c0b      	ldr	r4, [pc, #44]	@ (8004568 <TIM_OC6_SetConfig+0x60>)
 800453a:	42a0      	cmp	r0, r4
 800453c:	d104      	bne.n	8004548 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800453e:	4c0b      	ldr	r4, [pc, #44]	@ (800456c <TIM_OC6_SetConfig+0x64>)
 8004540:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004542:	694d      	ldr	r5, [r1, #20]
 8004544:	02ad      	lsls	r5, r5, #10
 8004546:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004548:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800454a:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800454c:	684a      	ldr	r2, [r1, #4]
 800454e:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004550:	6203      	str	r3, [r0, #32]
}
 8004552:	bd30      	pop	{r4, r5, pc}
 8004554:	ffefffff 	.word	0xffefffff
 8004558:	feff8fff 	.word	0xfeff8fff
 800455c:	ffdfffff 	.word	0xffdfffff
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40014400 	.word	0x40014400
 8004568:	40014800 	.word	0x40014800
 800456c:	fffbffff 	.word	0xfffbffff

08004570 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004570:	213d      	movs	r1, #61	@ 0x3d
{
 8004572:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8004574:	5c42      	ldrb	r2, [r0, r1]
{
 8004576:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8004578:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 800457a:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800457c:	2a01      	cmp	r2, #1
 800457e:	d110      	bne.n	80045a2 <HAL_TIM_Base_Start+0x32>
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	3201      	adds	r2, #1
 8004582:	545a      	strb	r2, [r3, r1]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a0e      	ldr	r2, [pc, #56]	@ (80045c0 <HAL_TIM_Base_Start+0x50>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00b      	beq.n	80045a4 <HAL_TIM_Base_Start+0x34>
 800458c:	2280      	movs	r2, #128	@ 0x80
 800458e:	05d2      	lsls	r2, r2, #23
 8004590:	4293      	cmp	r3, r2
 8004592:	d007      	beq.n	80045a4 <HAL_TIM_Base_Start+0x34>
 8004594:	4a0b      	ldr	r2, [pc, #44]	@ (80045c4 <HAL_TIM_Base_Start+0x54>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d004      	beq.n	80045a4 <HAL_TIM_Base_Start+0x34>
    __HAL_TIM_ENABLE(htim);
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4322      	orrs	r2, r4
 800459e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80045a0:	2000      	movs	r0, #0
}
 80045a2:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	4908      	ldr	r1, [pc, #32]	@ (80045c8 <HAL_TIM_Base_Start+0x58>)
 80045a8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045aa:	2a06      	cmp	r2, #6
 80045ac:	d0f8      	beq.n	80045a0 <HAL_TIM_Base_Start+0x30>
 80045ae:	3907      	subs	r1, #7
 80045b0:	428a      	cmp	r2, r1
 80045b2:	d0f5      	beq.n	80045a0 <HAL_TIM_Base_Start+0x30>
      __HAL_TIM_ENABLE(htim);
 80045b4:	2101      	movs	r1, #1
 80045b6:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80045b8:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80045ba:	430a      	orrs	r2, r1
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e7f0      	b.n	80045a2 <HAL_TIM_Base_Start+0x32>
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40000400 	.word	0x40000400
 80045c8:	00010007 	.word	0x00010007

080045cc <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045cc:	2910      	cmp	r1, #16
 80045ce:	d803      	bhi.n	80045d8 <HAL_TIM_OC_Start+0xc>
 80045d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004684 <HAL_TIM_OC_Start+0xb8>)
 80045d2:	008b      	lsls	r3, r1, #2
 80045d4:	58d3      	ldr	r3, [r2, r3]
 80045d6:	469f      	mov	pc, r3
 80045d8:	2343      	movs	r3, #67	@ 0x43
 80045da:	5cc2      	ldrb	r2, [r0, r3]
 80045dc:	2a01      	cmp	r2, #1
 80045de:	d12e      	bne.n	800463e <HAL_TIM_OC_Start+0x72>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e0:	2202      	movs	r2, #2
 80045e2:	54c2      	strb	r2, [r0, r3]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045e4:	221f      	movs	r2, #31
 80045e6:	4011      	ands	r1, r2
 80045e8:	3a1e      	subs	r2, #30
 80045ea:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045ec:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ee:	6a19      	ldr	r1, [r3, #32]
 80045f0:	4391      	bics	r1, r2
 80045f2:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045f4:	6a19      	ldr	r1, [r3, #32]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045fa:	4a23      	ldr	r2, [pc, #140]	@ (8004688 <HAL_TIM_OC_Start+0xbc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d03a      	beq.n	8004676 <HAL_TIM_OC_Start+0xaa>
 8004600:	4a22      	ldr	r2, [pc, #136]	@ (800468c <HAL_TIM_OC_Start+0xc0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d031      	beq.n	800466a <HAL_TIM_OC_Start+0x9e>
 8004606:	4a22      	ldr	r2, [pc, #136]	@ (8004690 <HAL_TIM_OC_Start+0xc4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d02e      	beq.n	800466a <HAL_TIM_OC_Start+0x9e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460c:	2280      	movs	r2, #128	@ 0x80
 800460e:	05d2      	lsls	r2, r2, #23
 8004610:	4293      	cmp	r3, r2
 8004612:	d002      	beq.n	800461a <HAL_TIM_OC_Start+0x4e>
 8004614:	4a1f      	ldr	r2, [pc, #124]	@ (8004694 <HAL_TIM_OC_Start+0xc8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d107      	bne.n	800462a <HAL_TIM_OC_Start+0x5e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	491e      	ldr	r1, [pc, #120]	@ (8004698 <HAL_TIM_OC_Start+0xcc>)
 800461e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004620:	2a06      	cmp	r2, #6
 8004622:	d006      	beq.n	8004632 <HAL_TIM_OC_Start+0x66>
 8004624:	3907      	subs	r1, #7
 8004626:	428a      	cmp	r2, r1
 8004628:	d003      	beq.n	8004632 <HAL_TIM_OC_Start+0x66>
      __HAL_TIM_ENABLE(htim);
 800462a:	2101      	movs	r1, #1
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004632:	2000      	movs	r0, #0
}
 8004634:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004636:	233e      	movs	r3, #62	@ 0x3e
 8004638:	5cc2      	ldrb	r2, [r0, r3]
 800463a:	2a01      	cmp	r2, #1
 800463c:	d0d0      	beq.n	80045e0 <HAL_TIM_OC_Start+0x14>
    return HAL_ERROR;
 800463e:	2001      	movs	r0, #1
 8004640:	e7f8      	b.n	8004634 <HAL_TIM_OC_Start+0x68>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004642:	233f      	movs	r3, #63	@ 0x3f
 8004644:	5cc2      	ldrb	r2, [r0, r3]
 8004646:	2a01      	cmp	r2, #1
 8004648:	d0ca      	beq.n	80045e0 <HAL_TIM_OC_Start+0x14>
 800464a:	e7f8      	b.n	800463e <HAL_TIM_OC_Start+0x72>
 800464c:	2340      	movs	r3, #64	@ 0x40
 800464e:	5cc2      	ldrb	r2, [r0, r3]
 8004650:	2a01      	cmp	r2, #1
 8004652:	d0c5      	beq.n	80045e0 <HAL_TIM_OC_Start+0x14>
 8004654:	e7f3      	b.n	800463e <HAL_TIM_OC_Start+0x72>
 8004656:	2341      	movs	r3, #65	@ 0x41
 8004658:	5cc2      	ldrb	r2, [r0, r3]
 800465a:	2a01      	cmp	r2, #1
 800465c:	d0c0      	beq.n	80045e0 <HAL_TIM_OC_Start+0x14>
 800465e:	e7ee      	b.n	800463e <HAL_TIM_OC_Start+0x72>
 8004660:	2342      	movs	r3, #66	@ 0x42
 8004662:	5cc2      	ldrb	r2, [r0, r3]
 8004664:	2a01      	cmp	r2, #1
 8004666:	d0bb      	beq.n	80045e0 <HAL_TIM_OC_Start+0x14>
 8004668:	e7e9      	b.n	800463e <HAL_TIM_OC_Start+0x72>
    __HAL_TIM_MOE_ENABLE(htim);
 800466a:	2280      	movs	r2, #128	@ 0x80
 800466c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800466e:	0212      	lsls	r2, r2, #8
 8004670:	430a      	orrs	r2, r1
 8004672:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004674:	e7d9      	b.n	800462a <HAL_TIM_OC_Start+0x5e>
    __HAL_TIM_MOE_ENABLE(htim);
 8004676:	2280      	movs	r2, #128	@ 0x80
 8004678:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800467a:	0212      	lsls	r2, r2, #8
 800467c:	430a      	orrs	r2, r1
 800467e:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004680:	e7cb      	b.n	800461a <HAL_TIM_OC_Start+0x4e>
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	080051d8 	.word	0x080051d8
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40014400 	.word	0x40014400
 8004690:	40014800 	.word	0x40014800
 8004694:	40000400 	.word	0x40000400
 8004698:	00010007 	.word	0x00010007

0800469c <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 800469c:	4770      	bx	lr
 800469e:	46c0      	nop			@ (mov r8, r8)

080046a0 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 80046a0:	b510      	push	{r4, lr}
 80046a2:	f7ff ff93 	bl	80045cc <HAL_TIM_OC_Start>
 80046a6:	bd10      	pop	{r4, pc}

080046a8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80046a8:	223c      	movs	r2, #60	@ 0x3c
{
 80046aa:	b570      	push	{r4, r5, r6, lr}
 80046ac:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80046ae:	5c80      	ldrb	r0, [r0, r2]
 80046b0:	2801      	cmp	r0, #1
 80046b2:	d100      	bne.n	80046b6 <HAL_TIM_ConfigClockSource+0xe>
 80046b4:	e06f      	b.n	8004796 <HAL_TIM_ConfigClockSource+0xee>
 80046b6:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80046ba:	549c      	strb	r4, [r3, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	3201      	adds	r2, #1
 80046be:	5498      	strb	r0, [r3, r2]
  tmpsmcr = htim->Instance->SMCR;
 80046c0:	681a      	ldr	r2, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c2:	4d4e      	ldr	r5, [pc, #312]	@ (80047fc <HAL_TIM_ConfigClockSource+0x154>)
  tmpsmcr = htim->Instance->SMCR;
 80046c4:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c6:	4028      	ands	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 80046c8:	6090      	str	r0, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80046ca:	6808      	ldr	r0, [r1, #0]
 80046cc:	2860      	cmp	r0, #96	@ 0x60
 80046ce:	d100      	bne.n	80046d2 <HAL_TIM_ConfigClockSource+0x2a>
 80046d0:	e07a      	b.n	80047c8 <HAL_TIM_ConfigClockSource+0x120>
 80046d2:	d80b      	bhi.n	80046ec <HAL_TIM_ConfigClockSource+0x44>
 80046d4:	2840      	cmp	r0, #64	@ 0x40
 80046d6:	d060      	beq.n	800479a <HAL_TIM_ConfigClockSource+0xf2>
 80046d8:	d829      	bhi.n	800472e <HAL_TIM_ConfigClockSource+0x86>
 80046da:	2820      	cmp	r0, #32
 80046dc:	d053      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0xde>
 80046de:	d850      	bhi.n	8004782 <HAL_TIM_ConfigClockSource+0xda>
 80046e0:	2110      	movs	r1, #16
 80046e2:	0004      	movs	r4, r0
 80046e4:	438c      	bics	r4, r1
 80046e6:	d04e      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0xde>
      status = HAL_ERROR;
 80046e8:	2001      	movs	r0, #1
 80046ea:	e019      	b.n	8004720 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 80046ec:	2480      	movs	r4, #128	@ 0x80
 80046ee:	0164      	lsls	r4, r4, #5
 80046f0:	42a0      	cmp	r0, r4
 80046f2:	d014      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x76>
 80046f4:	2480      	movs	r4, #128	@ 0x80
 80046f6:	01a4      	lsls	r4, r4, #6
 80046f8:	42a0      	cmp	r0, r4
 80046fa:	d031      	beq.n	8004760 <HAL_TIM_ConfigClockSource+0xb8>
 80046fc:	2870      	cmp	r0, #112	@ 0x70
 80046fe:	d1f3      	bne.n	80046e8 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8004700:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004702:	483f      	ldr	r0, [pc, #252]	@ (8004800 <HAL_TIM_ConfigClockSource+0x158>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004704:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004706:	4004      	ands	r4, r0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004708:	6888      	ldr	r0, [r1, #8]
 800470a:	68c9      	ldr	r1, [r1, #12]
 800470c:	4328      	orrs	r0, r5
 800470e:	0209      	lsls	r1, r1, #8
 8004710:	4301      	orrs	r1, r0
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004712:	2077      	movs	r0, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004714:	4321      	orrs	r1, r4
  TIMx->SMCR = tmpsmcr;
 8004716:	6091      	str	r1, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004718:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800471a:	4301      	orrs	r1, r0
      htim->Instance->SMCR = tmpsmcr;
 800471c:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800471e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004720:	223d      	movs	r2, #61	@ 0x3d
 8004722:	2101      	movs	r1, #1
 8004724:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8004726:	2100      	movs	r1, #0
 8004728:	3a01      	subs	r2, #1
 800472a:	5499      	strb	r1, [r3, r2]
}
 800472c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800472e:	2850      	cmp	r0, #80	@ 0x50
 8004730:	d1da      	bne.n	80046e8 <HAL_TIM_ConfigClockSource+0x40>
  tmpccer = TIMx->CCER;
 8004732:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004734:	6a16      	ldr	r6, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8004736:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004738:	43a6      	bics	r6, r4
                               sClockSourceConfig->ClockFilter);
 800473a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473c:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800473e:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8004740:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004742:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004744:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004746:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004748:	240a      	movs	r4, #10
 800474a:	43a5      	bics	r5, r4
  tmpccer |= TIM_ICPolarity;
 800474c:	4328      	orrs	r0, r5
  TIMx->CCMR1 = tmpccmr1;
 800474e:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8004750:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004752:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004754:	482b      	ldr	r0, [pc, #172]	@ (8004804 <HAL_TIM_ConfigClockSource+0x15c>)
 8004756:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004758:	2057      	movs	r0, #87	@ 0x57
 800475a:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 800475c:	6091      	str	r1, [r2, #8]
}
 800475e:	e7de      	b.n	800471e <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr = TIMx->SMCR;
 8004760:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004762:	4827      	ldr	r0, [pc, #156]	@ (8004800 <HAL_TIM_ConfigClockSource+0x158>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004764:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004766:	4004      	ands	r4, r0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004768:	6888      	ldr	r0, [r1, #8]
 800476a:	68c9      	ldr	r1, [r1, #12]
 800476c:	4328      	orrs	r0, r5
 800476e:	0209      	lsls	r1, r1, #8
 8004770:	4301      	orrs	r1, r0
 8004772:	4321      	orrs	r1, r4
  TIMx->SMCR = tmpsmcr;
 8004774:	6091      	str	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004776:	2180      	movs	r1, #128	@ 0x80
 8004778:	6890      	ldr	r0, [r2, #8]
 800477a:	01c9      	lsls	r1, r1, #7
 800477c:	4301      	orrs	r1, r0
 800477e:	6091      	str	r1, [r2, #8]
      break;
 8004780:	e7cd      	b.n	800471e <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 8004782:	2830      	cmp	r0, #48	@ 0x30
 8004784:	d1b0      	bne.n	80046e8 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8004786:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004788:	4c1e      	ldr	r4, [pc, #120]	@ (8004804 <HAL_TIM_ConfigClockSource+0x15c>)
 800478a:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800478c:	4301      	orrs	r1, r0
 800478e:	2007      	movs	r0, #7
 8004790:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8004792:	6091      	str	r1, [r2, #8]
}
 8004794:	e7c3      	b.n	800471e <HAL_TIM_ConfigClockSource+0x76>
  __HAL_LOCK(htim);
 8004796:	2002      	movs	r0, #2
 8004798:	e7c8      	b.n	800472c <HAL_TIM_ConfigClockSource+0x84>
  tmpccer = TIMx->CCER;
 800479a:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479c:	6a16      	ldr	r6, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 800479e:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a0:	43a6      	bics	r6, r4
                               sClockSourceConfig->ClockFilter);
 80047a2:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a4:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047a6:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80047a8:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047aa:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ac:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047ae:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047b0:	240a      	movs	r4, #10
 80047b2:	43a5      	bics	r5, r4
  tmpccer |= TIM_ICPolarity;
 80047b4:	4328      	orrs	r0, r5
  TIMx->CCMR1 = tmpccmr1;
 80047b6:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80047b8:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80047ba:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80047bc:	4811      	ldr	r0, [pc, #68]	@ (8004804 <HAL_TIM_ConfigClockSource+0x15c>)
 80047be:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047c0:	2047      	movs	r0, #71	@ 0x47
 80047c2:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 80047c4:	6091      	str	r1, [r2, #8]
}
 80047c6:	e7aa      	b.n	800471e <HAL_TIM_ConfigClockSource+0x76>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c8:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 80047ca:	6a15      	ldr	r5, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 80047cc:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80047ce:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d0:	6a11      	ldr	r1, [r2, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047d2:	0324      	lsls	r4, r4, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d4:	43b1      	bics	r1, r6
 80047d6:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d8:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047da:	4e0b      	ldr	r6, [pc, #44]	@ (8004808 <HAL_TIM_ConfigClockSource+0x160>)
 80047dc:	4031      	ands	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047de:	430c      	orrs	r4, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047e0:	21a0      	movs	r1, #160	@ 0xa0
 80047e2:	438d      	bics	r5, r1
  tmpccer |= (TIM_ICPolarity << 4U);
 80047e4:	0101      	lsls	r1, r0, #4
 80047e6:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1 ;
 80047e8:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 80047ea:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80047ec:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ee:	4805      	ldr	r0, [pc, #20]	@ (8004804 <HAL_TIM_ConfigClockSource+0x15c>)
 80047f0:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047f2:	2067      	movs	r0, #103	@ 0x67
 80047f4:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 80047f6:	6091      	str	r1, [r2, #8]
}
 80047f8:	e791      	b.n	800471e <HAL_TIM_ConfigClockSource+0x76>
 80047fa:	46c0      	nop			@ (mov r8, r8)
 80047fc:	ffce0088 	.word	0xffce0088
 8004800:	ffff00ff 	.word	0xffff00ff
 8004804:	ffcfff8f 	.word	0xffcfff8f
 8004808:	ffff0fff 	.word	0xffff0fff

0800480c <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800480c:	4770      	bx	lr
 800480e:	46c0      	nop			@ (mov r8, r8)

08004810 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004810:	4770      	bx	lr
 8004812:	46c0      	nop			@ (mov r8, r8)

08004814 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004814:	4770      	bx	lr
 8004816:	46c0      	nop			@ (mov r8, r8)

08004818 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8004818:	4770      	bx	lr
 800481a:	46c0      	nop			@ (mov r8, r8)

0800481c <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800481c:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 800481e:	6803      	ldr	r3, [r0, #0]
{
 8004820:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8004822:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004824:	691d      	ldr	r5, [r3, #16]
{
 8004826:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004828:	422a      	tst	r2, r5
 800482a:	d001      	beq.n	8004830 <HAL_TIM_IRQHandler+0x14>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800482c:	4232      	tst	r2, r6
 800482e:	d15c      	bne.n	80048ea <HAL_TIM_IRQHandler+0xce>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004830:	2304      	movs	r3, #4
 8004832:	422b      	tst	r3, r5
 8004834:	d001      	beq.n	800483a <HAL_TIM_IRQHandler+0x1e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004836:	4233      	tst	r3, r6
 8004838:	d143      	bne.n	80048c2 <HAL_TIM_IRQHandler+0xa6>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800483a:	2308      	movs	r3, #8
 800483c:	422b      	tst	r3, r5
 800483e:	d001      	beq.n	8004844 <HAL_TIM_IRQHandler+0x28>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004840:	4233      	tst	r3, r6
 8004842:	d12c      	bne.n	800489e <HAL_TIM_IRQHandler+0x82>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004844:	2310      	movs	r3, #16
 8004846:	422b      	tst	r3, r5
 8004848:	d001      	beq.n	800484e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800484a:	4233      	tst	r3, r6
 800484c:	d116      	bne.n	800487c <HAL_TIM_IRQHandler+0x60>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800484e:	2301      	movs	r3, #1
 8004850:	422b      	tst	r3, r5
 8004852:	d001      	beq.n	8004858 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004854:	4233      	tst	r3, r6
 8004856:	d167      	bne.n	8004928 <HAL_TIM_IRQHandler+0x10c>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004858:	2382      	movs	r3, #130	@ 0x82
 800485a:	019b      	lsls	r3, r3, #6
 800485c:	421d      	tst	r5, r3
 800485e:	d050      	beq.n	8004902 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004860:	0633      	lsls	r3, r6, #24
 8004862:	d469      	bmi.n	8004938 <HAL_TIM_IRQHandler+0x11c>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004864:	2340      	movs	r3, #64	@ 0x40
 8004866:	422b      	tst	r3, r5
 8004868:	d002      	beq.n	8004870 <HAL_TIM_IRQHandler+0x54>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800486a:	4233      	tst	r3, r6
 800486c:	d000      	beq.n	8004870 <HAL_TIM_IRQHandler+0x54>
 800486e:	e06d      	b.n	800494c <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004870:	2320      	movs	r3, #32
 8004872:	422b      	tst	r3, r5
 8004874:	d001      	beq.n	800487a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004876:	4233      	tst	r3, r6
 8004878:	d14e      	bne.n	8004918 <HAL_TIM_IRQHandler+0xfc>
}
 800487a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800487c:	2211      	movs	r2, #17
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	4252      	negs	r2, r2
 8004882:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004884:	3219      	adds	r2, #25
 8004886:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004888:	69da      	ldr	r2, [r3, #28]
 800488a:	23c0      	movs	r3, #192	@ 0xc0
 800488c:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800488e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004890:	421a      	tst	r2, r3
 8004892:	d06f      	beq.n	8004974 <HAL_TIM_IRQHandler+0x158>
        HAL_TIM_IC_CaptureCallback(htim);
 8004894:	f7ff ffbc 	bl	8004810 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004898:	2300      	movs	r3, #0
 800489a:	7723      	strb	r3, [r4, #28]
 800489c:	e7d7      	b.n	800484e <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800489e:	2209      	movs	r2, #9
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	4252      	negs	r2, r2
 80048a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048a6:	320d      	adds	r2, #13
 80048a8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048aa:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80048ac:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048ae:	079b      	lsls	r3, r3, #30
 80048b0:	d15d      	bne.n	800496e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b2:	f7ff ffab 	bl	800480c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b6:	0020      	movs	r0, r4
 80048b8:	f7ff ffac 	bl	8004814 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048bc:	2300      	movs	r3, #0
 80048be:	7723      	strb	r3, [r4, #28]
 80048c0:	e7c0      	b.n	8004844 <HAL_TIM_IRQHandler+0x28>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048c2:	2205      	movs	r2, #5
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	4252      	negs	r2, r2
 80048c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ca:	3207      	adds	r2, #7
 80048cc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	23c0      	movs	r3, #192	@ 0xc0
 80048d2:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80048d4:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048d6:	421a      	tst	r2, r3
 80048d8:	d146      	bne.n	8004968 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048da:	f7ff ff97 	bl	800480c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048de:	0020      	movs	r0, r4
 80048e0:	f7ff ff98 	bl	8004814 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e4:	2300      	movs	r3, #0
 80048e6:	7723      	strb	r3, [r4, #28]
 80048e8:	e7a7      	b.n	800483a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048ea:	3a05      	subs	r2, #5
 80048ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ee:	3204      	adds	r2, #4
 80048f0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	079b      	lsls	r3, r3, #30
 80048f6:	d031      	beq.n	800495c <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_IC_CaptureCallback(htim);
 80048f8:	f7ff ff8a 	bl	8004810 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fc:	2300      	movs	r3, #0
 80048fe:	7723      	strb	r3, [r4, #28]
 8004900:	e796      	b.n	8004830 <HAL_TIM_IRQHandler+0x14>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004902:	05eb      	lsls	r3, r5, #23
 8004904:	d5ae      	bpl.n	8004864 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004906:	0633      	lsls	r3, r6, #24
 8004908:	d5ac      	bpl.n	8004864 <HAL_TIM_IRQHandler+0x48>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	4a1c      	ldr	r2, [pc, #112]	@ (8004980 <HAL_TIM_IRQHandler+0x164>)
      HAL_TIMEx_Break2Callback(htim);
 800490e:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004910:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004912:	f000 fae7 	bl	8004ee4 <HAL_TIMEx_Break2Callback>
 8004916:	e7a5      	b.n	8004864 <HAL_TIM_IRQHandler+0x48>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004918:	2221      	movs	r2, #33	@ 0x21
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 800491e:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004920:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004922:	f000 fadb 	bl	8004edc <HAL_TIMEx_CommutCallback>
}
 8004926:	e7a8      	b.n	800487a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004928:	2202      	movs	r2, #2
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 800492e:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004930:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004932:	f7fe f9a1 	bl	8002c78 <HAL_TIM_PeriodElapsedCallback>
 8004936:	e78f      	b.n	8004858 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	4a12      	ldr	r2, [pc, #72]	@ (8004984 <HAL_TIM_IRQHandler+0x168>)
      HAL_TIMEx_BreakCallback(htim);
 800493c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800493e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004940:	f000 face 	bl	8004ee0 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004944:	05eb      	lsls	r3, r5, #23
 8004946:	d400      	bmi.n	800494a <HAL_TIM_IRQHandler+0x12e>
 8004948:	e78c      	b.n	8004864 <HAL_TIM_IRQHandler+0x48>
 800494a:	e7de      	b.n	800490a <HAL_TIM_IRQHandler+0xee>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800494c:	2241      	movs	r2, #65	@ 0x41
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 8004952:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004954:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004956:	f7ff ff5f 	bl	8004818 <HAL_TIM_TriggerCallback>
 800495a:	e789      	b.n	8004870 <HAL_TIM_IRQHandler+0x54>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800495c:	f7ff ff56 	bl	800480c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	0020      	movs	r0, r4
 8004962:	f7ff ff57 	bl	8004814 <HAL_TIM_PWM_PulseFinishedCallback>
 8004966:	e7c9      	b.n	80048fc <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 8004968:	f7ff ff52 	bl	8004810 <HAL_TIM_IC_CaptureCallback>
 800496c:	e7ba      	b.n	80048e4 <HAL_TIM_IRQHandler+0xc8>
        HAL_TIM_IC_CaptureCallback(htim);
 800496e:	f7ff ff4f 	bl	8004810 <HAL_TIM_IC_CaptureCallback>
 8004972:	e7a3      	b.n	80048bc <HAL_TIM_IRQHandler+0xa0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004974:	f7ff ff4a 	bl	800480c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004978:	0020      	movs	r0, r4
 800497a:	f7ff ff4b 	bl	8004814 <HAL_TIM_PWM_PulseFinishedCallback>
 800497e:	e78b      	b.n	8004898 <HAL_TIM_IRQHandler+0x7c>
 8004980:	fffffeff 	.word	0xfffffeff
 8004984:	ffffdf7f 	.word	0xffffdf7f

08004988 <TIM_Base_SetConfig>:
{
 8004988:	b570      	push	{r4, r5, r6, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800498a:	4e26      	ldr	r6, [pc, #152]	@ (8004a24 <TIM_Base_SetConfig+0x9c>)
  tmpcr1 = TIMx->CR1;
 800498c:	6803      	ldr	r3, [r0, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800498e:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004990:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004992:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004994:	42b0      	cmp	r0, r6
 8004996:	d01a      	beq.n	80049ce <TIM_Base_SetConfig+0x46>
 8004998:	2680      	movs	r6, #128	@ 0x80
 800499a:	05f6      	lsls	r6, r6, #23
 800499c:	42b0      	cmp	r0, r6
 800499e:	d016      	beq.n	80049ce <TIM_Base_SetConfig+0x46>
 80049a0:	4e21      	ldr	r6, [pc, #132]	@ (8004a28 <TIM_Base_SetConfig+0xa0>)
 80049a2:	42b0      	cmp	r0, r6
 80049a4:	d02f      	beq.n	8004a06 <TIM_Base_SetConfig+0x7e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a6:	4e21      	ldr	r6, [pc, #132]	@ (8004a2c <TIM_Base_SetConfig+0xa4>)
 80049a8:	42b0      	cmp	r0, r6
 80049aa:	d030      	beq.n	8004a0e <TIM_Base_SetConfig+0x86>
 80049ac:	4e20      	ldr	r6, [pc, #128]	@ (8004a30 <TIM_Base_SetConfig+0xa8>)
 80049ae:	42b0      	cmp	r0, r6
 80049b0:	d002      	beq.n	80049b8 <TIM_Base_SetConfig+0x30>
 80049b2:	4e20      	ldr	r6, [pc, #128]	@ (8004a34 <TIM_Base_SetConfig+0xac>)
 80049b4:	42b0      	cmp	r0, r6
 80049b6:	d12e      	bne.n	8004a16 <TIM_Base_SetConfig+0x8e>
    tmpcr1 &= ~TIM_CR1_CKD;
 80049b8:	4e1f      	ldr	r6, [pc, #124]	@ (8004a38 <TIM_Base_SetConfig+0xb0>)
 80049ba:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049bc:	68ce      	ldr	r6, [r1, #12]
 80049be:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c0:	2680      	movs	r6, #128	@ 0x80
 80049c2:	43b3      	bics	r3, r6
 80049c4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80049c6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c8:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049ca:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049cc:	e010      	b.n	80049f0 <TIM_Base_SetConfig+0x68>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049ce:	2670      	movs	r6, #112	@ 0x70
 80049d0:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 80049d2:	684e      	ldr	r6, [r1, #4]
 80049d4:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80049d6:	4e18      	ldr	r6, [pc, #96]	@ (8004a38 <TIM_Base_SetConfig+0xb0>)
 80049d8:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049da:	68ce      	ldr	r6, [r1, #12]
 80049dc:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049de:	2680      	movs	r6, #128	@ 0x80
 80049e0:	43b3      	bics	r3, r6
 80049e2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80049e4:	6003      	str	r3, [r0, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004a24 <TIM_Base_SetConfig+0x9c>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e8:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049ea:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ec:	4298      	cmp	r0, r3
 80049ee:	d101      	bne.n	80049f4 <TIM_Base_SetConfig+0x6c>
    TIMx->RCR = Structure->RepetitionCounter;
 80049f0:	690b      	ldr	r3, [r1, #16]
 80049f2:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80049f4:	2301      	movs	r3, #1
 80049f6:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049f8:	6902      	ldr	r2, [r0, #16]
 80049fa:	4213      	tst	r3, r2
 80049fc:	d002      	beq.n	8004a04 <TIM_Base_SetConfig+0x7c>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049fe:	6902      	ldr	r2, [r0, #16]
 8004a00:	439a      	bics	r2, r3
 8004a02:	6102      	str	r2, [r0, #16]
}
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a06:	2670      	movs	r6, #112	@ 0x70
 8004a08:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8004a0a:	684e      	ldr	r6, [r1, #4]
 8004a0c:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a0e:	4e0a      	ldr	r6, [pc, #40]	@ (8004a38 <TIM_Base_SetConfig+0xb0>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a10:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a12:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a14:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a16:	2180      	movs	r1, #128	@ 0x80
 8004a18:	438b      	bics	r3, r1
 8004a1a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004a1c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a1e:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a20:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a22:	e7e7      	b.n	80049f4 <TIM_Base_SetConfig+0x6c>
 8004a24:	40012c00 	.word	0x40012c00
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40002000 	.word	0x40002000
 8004a30:	40014400 	.word	0x40014400
 8004a34:	40014800 	.word	0x40014800
 8004a38:	fffffcff 	.word	0xfffffcff

08004a3c <HAL_TIM_Base_Init>:
{
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004a40:	d02a      	beq.n	8004a98 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004a42:	233d      	movs	r3, #61	@ 0x3d
 8004a44:	5cc3      	ldrb	r3, [r0, r3]
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d020      	beq.n	8004a8e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	253d      	movs	r5, #61	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a50:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004a52:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a54:	c901      	ldmia	r1!, {r0}
 8004a56:	f7ff ff97 	bl	8004988 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8004a5e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a60:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a62:	3a0a      	subs	r2, #10
 8004a64:	54a3      	strb	r3, [r4, r2]
 8004a66:	3201      	adds	r2, #1
 8004a68:	54a3      	strb	r3, [r4, r2]
 8004a6a:	3201      	adds	r2, #1
 8004a6c:	54a3      	strb	r3, [r4, r2]
 8004a6e:	3201      	adds	r2, #1
 8004a70:	54a3      	strb	r3, [r4, r2]
 8004a72:	3201      	adds	r2, #1
 8004a74:	54a3      	strb	r3, [r4, r2]
 8004a76:	3201      	adds	r2, #1
 8004a78:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7a:	3201      	adds	r2, #1
 8004a7c:	54a3      	strb	r3, [r4, r2]
 8004a7e:	3201      	adds	r2, #1
 8004a80:	54a3      	strb	r3, [r4, r2]
 8004a82:	3201      	adds	r2, #1
 8004a84:	54a3      	strb	r3, [r4, r2]
 8004a86:	3201      	adds	r2, #1
 8004a88:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004a8a:	5563      	strb	r3, [r4, r5]
}
 8004a8c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004a8e:	333c      	adds	r3, #60	@ 0x3c
 8004a90:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8004a92:	f7fd ff87 	bl	80029a4 <HAL_TIM_Base_MspInit>
 8004a96:	e7d9      	b.n	8004a4c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8004a98:	2001      	movs	r0, #1
 8004a9a:	e7f7      	b.n	8004a8c <HAL_TIM_Base_Init+0x50>

08004a9c <HAL_TIM_PWM_Init>:
{
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004aa0:	d02a      	beq.n	8004af8 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa2:	233d      	movs	r3, #61	@ 0x3d
 8004aa4:	5cc3      	ldrb	r3, [r0, r3]
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d020      	beq.n	8004aee <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	2302      	movs	r3, #2
 8004aae:	253d      	movs	r5, #61	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab0:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab4:	c901      	ldmia	r1!, {r0}
 8004ab6:	f7ff ff67 	bl	8004988 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aba:	2301      	movs	r3, #1
 8004abc:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8004abe:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac2:	3a0a      	subs	r2, #10
 8004ac4:	54a3      	strb	r3, [r4, r2]
 8004ac6:	3201      	adds	r2, #1
 8004ac8:	54a3      	strb	r3, [r4, r2]
 8004aca:	3201      	adds	r2, #1
 8004acc:	54a3      	strb	r3, [r4, r2]
 8004ace:	3201      	adds	r2, #1
 8004ad0:	54a3      	strb	r3, [r4, r2]
 8004ad2:	3201      	adds	r2, #1
 8004ad4:	54a3      	strb	r3, [r4, r2]
 8004ad6:	3201      	adds	r2, #1
 8004ad8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ada:	3201      	adds	r2, #1
 8004adc:	54a3      	strb	r3, [r4, r2]
 8004ade:	3201      	adds	r2, #1
 8004ae0:	54a3      	strb	r3, [r4, r2]
 8004ae2:	3201      	adds	r2, #1
 8004ae4:	54a3      	strb	r3, [r4, r2]
 8004ae6:	3201      	adds	r2, #1
 8004ae8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004aea:	5563      	strb	r3, [r4, r5]
}
 8004aec:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004aee:	333c      	adds	r3, #60	@ 0x3c
 8004af0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8004af2:	f7ff fdd3 	bl	800469c <HAL_TIM_PWM_MspInit>
 8004af6:	e7d9      	b.n	8004aac <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8004af8:	2001      	movs	r0, #1
 8004afa:	e7f7      	b.n	8004aec <HAL_TIM_PWM_Init+0x50>

08004afc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afc:	2210      	movs	r2, #16
{
 8004afe:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8004b00:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b02:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b04:	4d16      	ldr	r5, [pc, #88]	@ (8004b60 <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b06:	4393      	bics	r3, r2
 8004b08:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004b0a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b0c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b0e:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b10:	680d      	ldr	r5, [r1, #0]
 8004b12:	022d      	lsls	r5, r5, #8
 8004b14:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC2P;
 8004b16:	2220      	movs	r2, #32
 8004b18:	4394      	bics	r4, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b1a:	688a      	ldr	r2, [r1, #8]
 8004b1c:	0112      	lsls	r2, r2, #4
 8004b1e:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b20:	4c10      	ldr	r4, [pc, #64]	@ (8004b64 <TIM_OC2_SetConfig+0x68>)
 8004b22:	42a0      	cmp	r0, r4
 8004b24:	d012      	beq.n	8004b4c <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b26:	4c10      	ldr	r4, [pc, #64]	@ (8004b68 <TIM_OC2_SetConfig+0x6c>)
 8004b28:	42a0      	cmp	r0, r4
 8004b2a:	d002      	beq.n	8004b32 <TIM_OC2_SetConfig+0x36>
 8004b2c:	4c0f      	ldr	r4, [pc, #60]	@ (8004b6c <TIM_OC2_SetConfig+0x70>)
 8004b2e:	42a0      	cmp	r0, r4
 8004b30:	d106      	bne.n	8004b40 <TIM_OC2_SetConfig+0x44>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b32:	4c0f      	ldr	r4, [pc, #60]	@ (8004b70 <TIM_OC2_SetConfig+0x74>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b34:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b36:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b38:	694b      	ldr	r3, [r1, #20]
 8004b3a:	4333      	orrs	r3, r6
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 8004b40:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8004b42:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004b44:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004b46:	6383      	str	r3, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004b48:	6202      	str	r2, [r0, #32]
}
 8004b4a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b4c:	2480      	movs	r4, #128	@ 0x80
 8004b4e:	43a2      	bics	r2, r4
 8004b50:	0016      	movs	r6, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b52:	68ca      	ldr	r2, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b54:	3c40      	subs	r4, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b56:	0112      	lsls	r2, r2, #4
 8004b58:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b5a:	43a2      	bics	r2, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5c:	e7e9      	b.n	8004b32 <TIM_OC2_SetConfig+0x36>
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	feff8cff 	.word	0xfeff8cff
 8004b64:	40012c00 	.word	0x40012c00
 8004b68:	40014400 	.word	0x40014400
 8004b6c:	40014800 	.word	0x40014800
 8004b70:	fffff3ff 	.word	0xfffff3ff

08004b74 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004b74:	233c      	movs	r3, #60	@ 0x3c
{
 8004b76:	b570      	push	{r4, r5, r6, lr}
 8004b78:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8004b7a:	5cc1      	ldrb	r1, [r0, r3]
{
 8004b7c:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8004b7e:	2901      	cmp	r1, #1
 8004b80:	d100      	bne.n	8004b84 <HAL_TIM_PWM_ConfigChannel+0x10>
 8004b82:	e084      	b.n	8004c8e <HAL_TIM_PWM_ConfigChannel+0x11a>
 8004b84:	2101      	movs	r1, #1
 8004b86:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8004b88:	2a14      	cmp	r2, #20
 8004b8a:	d803      	bhi.n	8004b94 <HAL_TIM_PWM_ConfigChannel+0x20>
 8004b8c:	4b41      	ldr	r3, [pc, #260]	@ (8004c94 <HAL_TIM_PWM_ConfigChannel+0x120>)
 8004b8e:	0092      	lsls	r2, r2, #2
 8004b90:	589b      	ldr	r3, [r3, r2]
 8004b92:	469f      	mov	pc, r3
 8004b94:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004b96:	233c      	movs	r3, #60	@ 0x3c
 8004b98:	2200      	movs	r2, #0
 8004b9a:	54e2      	strb	r2, [r4, r3]
}
 8004b9c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b9e:	6806      	ldr	r6, [r0, #0]
 8004ba0:	0029      	movs	r1, r5
 8004ba2:	0030      	movs	r0, r6
 8004ba4:	f7ff fcb0 	bl	8004508 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ba8:	2380      	movs	r3, #128	@ 0x80
 8004baa:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bb2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8004bb4:	4a38      	ldr	r2, [pc, #224]	@ (8004c98 <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 8004bb6:	2000      	movs	r0, #0
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bb8:	4013      	ands	r3, r2
 8004bba:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bbc:	692b      	ldr	r3, [r5, #16]
 8004bbe:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	6573      	str	r3, [r6, #84]	@ 0x54
      break;
 8004bc6:	e7e6      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bc8:	6806      	ldr	r6, [r0, #0]
 8004bca:	0029      	movs	r1, r5
 8004bcc:	0030      	movs	r0, r6
 8004bce:	f7ff fbbd 	bl	800434c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bd2:	2208      	movs	r2, #8
 8004bd4:	69b3      	ldr	r3, [r6, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd6:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bdc:	69b3      	ldr	r3, [r6, #24]
 8004bde:	3a04      	subs	r2, #4
 8004be0:	4393      	bics	r3, r2
 8004be2:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004be4:	69b3      	ldr	r3, [r6, #24]
 8004be6:	692a      	ldr	r2, [r5, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	61b3      	str	r3, [r6, #24]
      break;
 8004bec:	e7d3      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bee:	6806      	ldr	r6, [r0, #0]
 8004bf0:	0029      	movs	r1, r5
 8004bf2:	0030      	movs	r0, r6
 8004bf4:	f7ff ff82 	bl	8004afc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bf8:	2380      	movs	r3, #128	@ 0x80
 8004bfa:	69b2      	ldr	r2, [r6, #24]
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c02:	69b3      	ldr	r3, [r6, #24]
 8004c04:	4a24      	ldr	r2, [pc, #144]	@ (8004c98 <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 8004c06:	2000      	movs	r0, #0
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c08:	4013      	ands	r3, r2
 8004c0a:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c0c:	692b      	ldr	r3, [r5, #16]
 8004c0e:	69b2      	ldr	r2, [r6, #24]
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	4313      	orrs	r3, r2
 8004c14:	61b3      	str	r3, [r6, #24]
      break;
 8004c16:	e7be      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c18:	6806      	ldr	r6, [r0, #0]
 8004c1a:	0029      	movs	r1, r5
 8004c1c:	0030      	movs	r0, r6
 8004c1e:	f7ff fbcb 	bl	80043b8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c22:	2208      	movs	r2, #8
 8004c24:	69f3      	ldr	r3, [r6, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004c26:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c2c:	69f3      	ldr	r3, [r6, #28]
 8004c2e:	3a04      	subs	r2, #4
 8004c30:	4393      	bics	r3, r2
 8004c32:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c34:	69f3      	ldr	r3, [r6, #28]
 8004c36:	692a      	ldr	r2, [r5, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61f3      	str	r3, [r6, #28]
      break;
 8004c3c:	e7ab      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c3e:	6806      	ldr	r6, [r0, #0]
 8004c40:	0029      	movs	r1, r5
 8004c42:	0030      	movs	r0, r6
 8004c44:	f7ff fbfa 	bl	800443c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c48:	2380      	movs	r3, #128	@ 0x80
 8004c4a:	69f2      	ldr	r2, [r6, #28]
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c52:	69f3      	ldr	r3, [r6, #28]
 8004c54:	4a10      	ldr	r2, [pc, #64]	@ (8004c98 <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 8004c56:	2000      	movs	r0, #0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c5c:	692b      	ldr	r3, [r5, #16]
 8004c5e:	69f2      	ldr	r2, [r6, #28]
 8004c60:	021b      	lsls	r3, r3, #8
 8004c62:	4313      	orrs	r3, r2
 8004c64:	61f3      	str	r3, [r6, #28]
      break;
 8004c66:	e796      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c68:	6806      	ldr	r6, [r0, #0]
 8004c6a:	0029      	movs	r1, r5
 8004c6c:	0030      	movs	r0, r6
 8004c6e:	f7ff fc19 	bl	80044a4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c72:	2208      	movs	r2, #8
 8004c74:	6d73      	ldr	r3, [r6, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c7c:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8004c7e:	3a04      	subs	r2, #4
 8004c80:	4393      	bics	r3, r2
 8004c82:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c84:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8004c86:	692a      	ldr	r2, [r5, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	6573      	str	r3, [r6, #84]	@ 0x54
      break;
 8004c8c:	e783      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x22>
  __HAL_LOCK(htim);
 8004c8e:	2002      	movs	r0, #2
 8004c90:	e784      	b.n	8004b9c <HAL_TIM_PWM_ConfigChannel+0x28>
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	0800521c 	.word	0x0800521c
 8004c98:	fffffbff 	.word	0xfffffbff

08004c9c <HAL_TIMEx_OCN_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c9c:	2900      	cmp	r1, #0
 8004c9e:	d12f      	bne.n	8004d00 <HAL_TIMEx_OCN_Start+0x64>
 8004ca0:	2344      	movs	r3, #68	@ 0x44
 8004ca2:	5cc2      	ldrb	r2, [r0, r3]
 8004ca4:	2a01      	cmp	r2, #1
 8004ca6:	d133      	bne.n	8004d10 <HAL_TIMEx_OCN_Start+0x74>
  {
    return HAL_ERROR;
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca8:	2202      	movs	r2, #2
 8004caa:	54c2      	strb	r2, [r0, r3]
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004cac:	220f      	movs	r2, #15
 8004cae:	4011      	ands	r1, r2
 8004cb0:	3a0b      	subs	r2, #11
 8004cb2:	408a      	lsls	r2, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004cb4:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004cb6:	6a19      	ldr	r1, [r3, #32]
 8004cb8:	4391      	bics	r1, r2
 8004cba:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004cbc:	6a19      	ldr	r1, [r3, #32]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8004cc2:	2280      	movs	r2, #128	@ 0x80
 8004cc4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004cc6:	0212      	lsls	r2, r2, #8
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ccc:	4a16      	ldr	r2, [pc, #88]	@ (8004d28 <HAL_TIMEx_OCN_Start+0x8c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00c      	beq.n	8004cec <HAL_TIMEx_OCN_Start+0x50>
 8004cd2:	2280      	movs	r2, #128	@ 0x80
 8004cd4:	05d2      	lsls	r2, r2, #23
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d008      	beq.n	8004cec <HAL_TIMEx_OCN_Start+0x50>
 8004cda:	4a14      	ldr	r2, [pc, #80]	@ (8004d2c <HAL_TIMEx_OCN_Start+0x90>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d005      	beq.n	8004cec <HAL_TIMEx_OCN_Start+0x50>
      __HAL_TIM_ENABLE(htim);
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004ce8:	2000      	movs	r0, #0
 8004cea:	e012      	b.n	8004d12 <HAL_TIMEx_OCN_Start+0x76>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	4910      	ldr	r1, [pc, #64]	@ (8004d30 <HAL_TIMEx_OCN_Start+0x94>)
 8004cf0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf2:	2a06      	cmp	r2, #6
 8004cf4:	d0f8      	beq.n	8004ce8 <HAL_TIMEx_OCN_Start+0x4c>
 8004cf6:	3907      	subs	r1, #7
 8004cf8:	428a      	cmp	r2, r1
 8004cfa:	d1f1      	bne.n	8004ce0 <HAL_TIMEx_OCN_Start+0x44>
  return HAL_OK;
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	e008      	b.n	8004d12 <HAL_TIMEx_OCN_Start+0x76>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d00:	2904      	cmp	r1, #4
 8004d02:	d007      	beq.n	8004d14 <HAL_TIMEx_OCN_Start+0x78>
 8004d04:	2908      	cmp	r1, #8
 8004d06:	d00a      	beq.n	8004d1e <HAL_TIMEx_OCN_Start+0x82>
 8004d08:	2347      	movs	r3, #71	@ 0x47
 8004d0a:	5cc2      	ldrb	r2, [r0, r3]
 8004d0c:	2a01      	cmp	r2, #1
 8004d0e:	d0cb      	beq.n	8004ca8 <HAL_TIMEx_OCN_Start+0xc>
    return HAL_ERROR;
 8004d10:	2001      	movs	r0, #1
}
 8004d12:	4770      	bx	lr
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d14:	2345      	movs	r3, #69	@ 0x45
 8004d16:	5cc2      	ldrb	r2, [r0, r3]
 8004d18:	2a01      	cmp	r2, #1
 8004d1a:	d0c5      	beq.n	8004ca8 <HAL_TIMEx_OCN_Start+0xc>
 8004d1c:	e7f8      	b.n	8004d10 <HAL_TIMEx_OCN_Start+0x74>
 8004d1e:	2346      	movs	r3, #70	@ 0x46
 8004d20:	5cc2      	ldrb	r2, [r0, r3]
 8004d22:	2a01      	cmp	r2, #1
 8004d24:	d0c0      	beq.n	8004ca8 <HAL_TIMEx_OCN_Start+0xc>
 8004d26:	e7f3      	b.n	8004d10 <HAL_TIMEx_OCN_Start+0x74>
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	00010007 	.word	0x00010007

08004d34 <HAL_TIMEx_PWMN_Start>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8004d34:	b510      	push	{r4, lr}
 8004d36:	f7ff ffb1 	bl	8004c9c <HAL_TIMEx_OCN_Start>
 8004d3a:	bd10      	pop	{r4, pc}

08004d3c <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8004d3c:	233c      	movs	r3, #60	@ 0x3c
{
 8004d3e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004d40:	5cc3      	ldrb	r3, [r0, r3]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d02a      	beq.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8004d46:	233d      	movs	r3, #61	@ 0x3d
 8004d48:	2202      	movs	r2, #2
 8004d4a:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8004d4c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d4e:	4e14      	ldr	r6, [pc, #80]	@ (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 8004d50:	685a      	ldr	r2, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d52:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004d54:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d56:	42b3      	cmp	r3, r6
 8004d58:	d017      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d5a:	2670      	movs	r6, #112	@ 0x70
 8004d5c:	43b2      	bics	r2, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d5e:	432a      	orrs	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8004d60:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d62:	2280      	movs	r2, #128	@ 0x80
 8004d64:	05d2      	lsls	r2, r2, #23
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d002      	beq.n	8004d70 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d70:	2280      	movs	r2, #128	@ 0x80
 8004d72:	4394      	bics	r4, r2
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d74:	688a      	ldr	r2, [r1, #8]
 8004d76:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 8004d78:	609c      	str	r4, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004d7a:	233d      	movs	r3, #61	@ 0x3d
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8004d80:	2200      	movs	r2, #0
 8004d82:	3b01      	subs	r3, #1
 8004d84:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8004d86:	2000      	movs	r0, #0
}
 8004d88:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d8a:	4e07      	ldr	r6, [pc, #28]	@ (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004d8c:	4032      	ands	r2, r6
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d8e:	684e      	ldr	r6, [r1, #4]
 8004d90:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d92:	2670      	movs	r6, #112	@ 0x70
 8004d94:	43b2      	bics	r2, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d96:	4315      	orrs	r5, r2
  htim->Instance->CR2 = tmpcr2;
 8004d98:	605d      	str	r5, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9a:	e7e9      	b.n	8004d70 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  __HAL_LOCK(htim);
 8004d9c:	2002      	movs	r0, #2
 8004d9e:	e7f3      	b.n	8004d88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	40000400 	.word	0x40000400
 8004da8:	ff0fffff 	.word	0xff0fffff

08004dac <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8004dac:	233c      	movs	r3, #60	@ 0x3c
{
 8004dae:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8004db0:	5cc3      	ldrb	r3, [r0, r3]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d03d      	beq.n	8004e32 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004db6:	4a20      	ldr	r2, [pc, #128]	@ (8004e38 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8004db8:	68cb      	ldr	r3, [r1, #12]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004dba:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	688a      	ldr	r2, [r1, #8]
 8004dc0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e3c <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	684a      	ldr	r2, [r1, #4]
 8004dc8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dca:	4a1d      	ldr	r2, [pc, #116]	@ (8004e40 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	680a      	ldr	r2, [r1, #0]
 8004dd0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	690a      	ldr	r2, [r1, #16]
 8004dd8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dda:	4a1b      	ldr	r2, [pc, #108]	@ (8004e48 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	694a      	ldr	r2, [r1, #20]
 8004de0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004de2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e4c <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004de8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004dea:	4a19      	ldr	r2, [pc, #100]	@ (8004e50 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	698a      	ldr	r2, [r1, #24]
 8004df0:	0412      	lsls	r2, r2, #16
 8004df2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004df4:	4a17      	ldr	r2, [pc, #92]	@ (8004e54 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	69ca      	ldr	r2, [r1, #28]
 8004dfa:	4313      	orrs	r3, r2
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004dfc:	4a16      	ldr	r2, [pc, #88]	@ (8004e58 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004dfe:	4294      	cmp	r4, r2
 8004e00:	d005      	beq.n	8004e0e <HAL_TIMEx_ConfigBreakDeadTime+0x62>
  htim->Instance->BDTR = tmpbdtr;
 8004e02:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8004e04:	2200      	movs	r2, #0
 8004e06:	233c      	movs	r3, #60	@ 0x3c
 8004e08:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8004e0a:	2000      	movs	r0, #0
}
 8004e0c:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004e0e:	4a13      	ldr	r2, [pc, #76]	@ (8004e5c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8004e14:	0512      	lsls	r2, r2, #20
 8004e16:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004e18:	4b11      	ldr	r3, [pc, #68]	@ (8004e60 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	6a0b      	ldr	r3, [r1, #32]
 8004e1e:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004e20:	4b10      	ldr	r3, [pc, #64]	@ (8004e64 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004e22:	401a      	ands	r2, r3
 8004e24:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8004e26:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004e28:	4b0f      	ldr	r3, [pc, #60]	@ (8004e68 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	e7e7      	b.n	8004e02 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  __HAL_LOCK(htim);
 8004e32:	2002      	movs	r0, #2
 8004e34:	e7ea      	b.n	8004e0c <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	fffffcff 	.word	0xfffffcff
 8004e3c:	fffffbff 	.word	0xfffffbff
 8004e40:	fffff7ff 	.word	0xfffff7ff
 8004e44:	ffffefff 	.word	0xffffefff
 8004e48:	ffffdfff 	.word	0xffffdfff
 8004e4c:	ffffbfff 	.word	0xffffbfff
 8004e50:	fff0ffff 	.word	0xfff0ffff
 8004e54:	efffffff 	.word	0xefffffff
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	ff0fffff 	.word	0xff0fffff
 8004e60:	feffffff 	.word	0xfeffffff
 8004e64:	fdffffff 	.word	0xfdffffff
 8004e68:	dfffffff 	.word	0xdfffffff

08004e6c <HAL_TIMEx_ConfigBreakInput>:
{
 8004e6c:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004e6e:	203c      	movs	r0, #60	@ 0x3c
 8004e70:	5c18      	ldrb	r0, [r3, r0]
{
 8004e72:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004e74:	2801      	cmp	r0, #1
 8004e76:	d02e      	beq.n	8004ed6 <HAL_TIMEx_ConfigBreakInput+0x6a>
  switch (sBreakInputConfig->Source)
 8004e78:	6810      	ldr	r0, [r2, #0]
 8004e7a:	2801      	cmp	r0, #1
 8004e7c:	d019      	beq.n	8004eb2 <HAL_TIMEx_ConfigBreakInput+0x46>
      bkin_polarity_bitpos = 0U;
 8004e7e:	2600      	movs	r6, #0
      bkin_polarity_mask = 0U;
 8004e80:	2400      	movs	r4, #0
      bkin_enable_mask = 0U;
 8004e82:	2000      	movs	r0, #0
  switch (BreakInput)
 8004e84:	2901      	cmp	r1, #1
 8004e86:	d019      	beq.n	8004ebc <HAL_TIMEx_ConfigBreakInput+0x50>
 8004e88:	2902      	cmp	r1, #2
 8004e8a:	d001      	beq.n	8004e90 <HAL_TIMEx_ConfigBreakInput+0x24>
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	e00c      	b.n	8004eaa <HAL_TIMEx_ConfigBreakInput+0x3e>
      tmporx = htim->Instance->AF2;
 8004e90:	6855      	ldr	r5, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8004e92:	6892      	ldr	r2, [r2, #8]
      tmporx = htim->Instance->AF2;
 8004e94:	6819      	ldr	r1, [r3, #0]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8004e96:	40b2      	lsls	r2, r6
      tmporx = htim->Instance->AF2;
 8004e98:	6e4f      	ldr	r7, [r1, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8004e9a:	407d      	eors	r5, r7
 8004e9c:	4028      	ands	r0, r5
 8004e9e:	4078      	eors	r0, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8004ea0:	4042      	eors	r2, r0
 8004ea2:	4014      	ands	r4, r2
 8004ea4:	4044      	eors	r4, r0
      htim->Instance->AF2 = tmporx;
 8004ea6:	664c      	str	r4, [r1, #100]	@ 0x64
  HAL_StatusTypeDef status = HAL_OK;
 8004ea8:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8004eaa:	223c      	movs	r2, #60	@ 0x3c
 8004eac:	2100      	movs	r1, #0
 8004eae:	5499      	strb	r1, [r3, r2]
}
 8004eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8004eb2:	2480      	movs	r4, #128	@ 0x80
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8004eb4:	2609      	movs	r6, #9
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8004eb6:	00a4      	lsls	r4, r4, #2
  switch (BreakInput)
 8004eb8:	2901      	cmp	r1, #1
 8004eba:	d1e5      	bne.n	8004e88 <HAL_TIMEx_ConfigBreakInput+0x1c>
      tmporx = htim->Instance->AF1;
 8004ebc:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8004ebe:	6892      	ldr	r2, [r2, #8]
      tmporx = htim->Instance->AF1;
 8004ec0:	681d      	ldr	r5, [r3, #0]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8004ec2:	40b2      	lsls	r2, r6
      tmporx = htim->Instance->AF1;
 8004ec4:	6e2f      	ldr	r7, [r5, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8004ec6:	4079      	eors	r1, r7
 8004ec8:	4001      	ands	r1, r0
 8004eca:	4079      	eors	r1, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8004ecc:	404a      	eors	r2, r1
 8004ece:	4022      	ands	r2, r4
 8004ed0:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 8004ed2:	662a      	str	r2, [r5, #96]	@ 0x60
      break;
 8004ed4:	e7e8      	b.n	8004ea8 <HAL_TIMEx_ConfigBreakInput+0x3c>
  __HAL_LOCK(htim);
 8004ed6:	2002      	movs	r0, #2
 8004ed8:	e7ea      	b.n	8004eb0 <HAL_TIMEx_ConfigBreakInput+0x44>
 8004eda:	46c0      	nop			@ (mov r8, r8)

08004edc <HAL_TIMEx_CommutCallback>:
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8004edc:	4770      	bx	lr
 8004ede:	46c0      	nop			@ (mov r8, r8)

08004ee0 <HAL_TIMEx_BreakCallback>:
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8004ee0:	4770      	bx	lr
 8004ee2:	46c0      	nop			@ (mov r8, r8)

08004ee4 <HAL_TIMEx_Break2Callback>:
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8004ee4:	4770      	bx	lr
 8004ee6:	46c0      	nop			@ (mov r8, r8)

08004ee8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eea:	4645      	mov	r5, r8
 8004eec:	46de      	mov	lr, fp
 8004eee:	4657      	mov	r7, sl
 8004ef0:	464e      	mov	r6, r9

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004ef2:	2201      	movs	r2, #1
{
 8004ef4:	b5e0      	push	{r5, r6, r7, lr}
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004ef6:	680d      	ldr	r5, [r1, #0]
  pinpos = 0;
 8004ef8:	2300      	movs	r3, #0
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004efa:	4694      	mov	ip, r2
{
 8004efc:	b083      	sub	sp, #12
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004efe:	2d00      	cmp	r5, #0
 8004f00:	d111      	bne.n	8004f26 <LL_GPIO_Init+0x3e>
 8004f02:	e057      	b.n	8004fb4 <LL_GPIO_Init+0xcc>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004f04:	68c4      	ldr	r4, [r0, #12]
 8004f06:	9a01      	ldr	r2, [sp, #4]
 8004f08:	4014      	ands	r4, r2
 8004f0a:	4642      	mov	r2, r8
 8004f0c:	4314      	orrs	r4, r2
 8004f0e:	60c4      	str	r4, [r0, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004f10:	465f      	mov	r7, fp
 8004f12:	4377      	muls	r7, r6
 8004f14:	6804      	ldr	r4, [r0, #0]
 8004f16:	9a01      	ldr	r2, [sp, #4]
 8004f18:	4022      	ands	r2, r4
 8004f1a:	4317      	orrs	r7, r2
 8004f1c:	6007      	str	r7, [r0, #0]
 8004f1e:	002a      	movs	r2, r5
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8004f20:	3301      	adds	r3, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004f22:	40da      	lsrs	r2, r3
 8004f24:	d046      	beq.n	8004fb4 <LL_GPIO_Init+0xcc>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004f26:	4662      	mov	r2, ip
 8004f28:	002c      	movs	r4, r5
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	4014      	ands	r4, r2
    if (currentpin != 0x00u)
 8004f2e:	4215      	tst	r5, r2
 8004f30:	d0f5      	beq.n	8004f1e <LL_GPIO_Init+0x36>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004f32:	0026      	movs	r6, r4
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004f34:	684a      	ldr	r2, [r1, #4]
 8004f36:	4366      	muls	r6, r4
 8004f38:	4693      	mov	fp, r2
 8004f3a:	0072      	lsls	r2, r6, #1
 8004f3c:	1992      	adds	r2, r2, r6
 8004f3e:	43d7      	mvns	r7, r2
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004f40:	690a      	ldr	r2, [r1, #16]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004f42:	9701      	str	r7, [sp, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004f44:	4372      	muls	r2, r6
 8004f46:	4690      	mov	r8, r2
 8004f48:	465a      	mov	r2, fp
 8004f4a:	3a01      	subs	r2, #1
 8004f4c:	2a01      	cmp	r2, #1
 8004f4e:	d8d9      	bhi.n	8004f04 <LL_GPIO_Init+0x1c>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004f50:	6882      	ldr	r2, [r0, #8]
 8004f52:	4692      	mov	sl, r2
 8004f54:	688a      	ldr	r2, [r1, #8]
 8004f56:	4372      	muls	r2, r6
 8004f58:	4691      	mov	r9, r2
 8004f5a:	4652      	mov	r2, sl
 8004f5c:	403a      	ands	r2, r7
 8004f5e:	4692      	mov	sl, r2
 8004f60:	464a      	mov	r2, r9
 8004f62:	4657      	mov	r7, sl
 8004f64:	433a      	orrs	r2, r7
 8004f66:	6082      	str	r2, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004f68:	6842      	ldr	r2, [r0, #4]
 8004f6a:	43a2      	bics	r2, r4
 8004f6c:	4691      	mov	r9, r2
 8004f6e:	68ca      	ldr	r2, [r1, #12]
 8004f70:	4362      	muls	r2, r4
 8004f72:	4692      	mov	sl, r2
 8004f74:	464a      	mov	r2, r9
 8004f76:	4657      	mov	r7, sl
 8004f78:	433a      	orrs	r2, r7
 8004f7a:	6042      	str	r2, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004f7c:	68c2      	ldr	r2, [r0, #12]
 8004f7e:	9f01      	ldr	r7, [sp, #4]
 8004f80:	403a      	ands	r2, r7
 8004f82:	4691      	mov	r9, r2
 8004f84:	4642      	mov	r2, r8
 8004f86:	464f      	mov	r7, r9
 8004f88:	433a      	orrs	r2, r7
 8004f8a:	60c2      	str	r2, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004f8c:	465a      	mov	r2, fp
 8004f8e:	2a02      	cmp	r2, #2
 8004f90:	d1be      	bne.n	8004f10 <LL_GPIO_Init+0x28>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004f92:	694a      	ldr	r2, [r1, #20]
 8004f94:	4690      	mov	r8, r2
        if (currentpin < LL_GPIO_PIN_8)
 8004f96:	2cff      	cmp	r4, #255	@ 0xff
 8004f98:	d814      	bhi.n	8004fc4 <LL_GPIO_Init+0xdc>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8004f9a:	0032      	movs	r2, r6
 8004f9c:	4372      	muls	r2, r6
 8004f9e:	4691      	mov	r9, r2
 8004fa0:	464f      	mov	r7, r9
 8004fa2:	6a04      	ldr	r4, [r0, #32]
 8004fa4:	0112      	lsls	r2, r2, #4
 8004fa6:	1bd2      	subs	r2, r2, r7
 8004fa8:	4394      	bics	r4, r2
 8004faa:	4642      	mov	r2, r8
 8004fac:	437a      	muls	r2, r7
 8004fae:	4314      	orrs	r4, r2
 8004fb0:	6204      	str	r4, [r0, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8004fb2:	e7ad      	b.n	8004f10 <LL_GPIO_Init+0x28>
  }

  return (SUCCESS);
}
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	b003      	add	sp, #12
 8004fb8:	bcf0      	pop	{r4, r5, r6, r7}
 8004fba:	46bb      	mov	fp, r7
 8004fbc:	46b2      	mov	sl, r6
 8004fbe:	46a9      	mov	r9, r5
 8004fc0:	46a0      	mov	r8, r4
 8004fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8004fc4:	0a24      	lsrs	r4, r4, #8
 8004fc6:	4364      	muls	r4, r4
 8004fc8:	4364      	muls	r4, r4
 8004fca:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8004fcc:	4691      	mov	r9, r2
 8004fce:	0122      	lsls	r2, r4, #4
 8004fd0:	1b12      	subs	r2, r2, r4
 8004fd2:	4692      	mov	sl, r2
 8004fd4:	464a      	mov	r2, r9
 8004fd6:	4657      	mov	r7, sl
 8004fd8:	43ba      	bics	r2, r7
 8004fda:	4691      	mov	r9, r2
 8004fdc:	4642      	mov	r2, r8
 8004fde:	4362      	muls	r2, r4
 8004fe0:	0014      	movs	r4, r2
 8004fe2:	464a      	mov	r2, r9
 8004fe4:	4314      	orrs	r4, r2
 8004fe6:	6244      	str	r4, [r0, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8004fe8:	e792      	b.n	8004f10 <LL_GPIO_Init+0x28>
 8004fea:	46c0      	nop			@ (mov r8, r8)

08004fec <LL_SPI_Init>:
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004fec:	6803      	ldr	r3, [r0, #0]
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004fee:	0002      	movs	r2, r0
 8004ff0:	b570      	push	{r4, r5, r6, lr}
  ErrorStatus status = ERROR;
 8004ff2:	2001      	movs	r0, #1
 8004ff4:	065b      	lsls	r3, r3, #25
 8004ff6:	d429      	bmi.n	800504c <LL_SPI_Init+0x60>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004ff8:	684e      	ldr	r6, [r1, #4]
 8004ffa:	680b      	ldr	r3, [r1, #0]
 8004ffc:	6948      	ldr	r0, [r1, #20]
 8004ffe:	4333      	orrs	r3, r6
 8005000:	68ce      	ldr	r6, [r1, #12]
 8005002:	6815      	ldr	r5, [r2, #0]
 8005004:	4333      	orrs	r3, r6
 8005006:	690e      	ldr	r6, [r1, #16]
 8005008:	6a0c      	ldr	r4, [r1, #32]
 800500a:	4333      	orrs	r3, r6
 800500c:	698e      	ldr	r6, [r1, #24]
 800500e:	4303      	orrs	r3, r0
 8005010:	4333      	orrs	r3, r6
 8005012:	69ce      	ldr	r6, [r1, #28]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8005014:	0c00      	lsrs	r0, r0, #16
    MODIFY_REG(SPIx->CR1,
 8005016:	4333      	orrs	r3, r6
 8005018:	4e11      	ldr	r6, [pc, #68]	@ (8005060 <LL_SPI_Init+0x74>)
 800501a:	4323      	orrs	r3, r4
 800501c:	4035      	ands	r5, r6
 800501e:	432b      	orrs	r3, r5
 8005020:	6013      	str	r3, [r2, #0]
    MODIFY_REG(SPIx->CR2,
 8005022:	6853      	ldr	r3, [r2, #4]
 8005024:	688d      	ldr	r5, [r1, #8]
 8005026:	4e0f      	ldr	r6, [pc, #60]	@ (8005064 <LL_SPI_Init+0x78>)
 8005028:	4328      	orrs	r0, r5
 800502a:	4033      	ands	r3, r6
 800502c:	4318      	orrs	r0, r3
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 800502e:	2380      	movs	r3, #128	@ 0x80
    MODIFY_REG(SPIx->CR2,
 8005030:	6050      	str	r0, [r2, #4]
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	429d      	cmp	r5, r3
 8005036:	d204      	bcs.n	8005042 <LL_SPI_Init+0x56>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8005038:	2080      	movs	r0, #128	@ 0x80
 800503a:	6853      	ldr	r3, [r2, #4]
 800503c:	0140      	lsls	r0, r0, #5
 800503e:	4303      	orrs	r3, r0
 8005040:	6053      	str	r3, [r2, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005042:	2380      	movs	r3, #128	@ 0x80
 8005044:	019b      	lsls	r3, r3, #6
 8005046:	429c      	cmp	r4, r3
 8005048:	d005      	beq.n	8005056 <LL_SPI_Init+0x6a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 800504a:	2000      	movs	r0, #0
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800504c:	69d3      	ldr	r3, [r2, #28]
 800504e:	4906      	ldr	r1, [pc, #24]	@ (8005068 <LL_SPI_Init+0x7c>)
 8005050:	400b      	ands	r3, r1
 8005052:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
}
 8005054:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005056:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
    status = SUCCESS;
 8005058:	2000      	movs	r0, #0
 800505a:	6113      	str	r3, [r2, #16]
 800505c:	e7f6      	b.n	800504c <LL_SPI_Init+0x60>
 800505e:	46c0      	nop			@ (mov r8, r8)
 8005060:	ffff0040 	.word	0xffff0040
 8005064:	fffff0fb 	.word	0xfffff0fb
 8005068:	fffff7ff 	.word	0xfffff7ff

0800506c <memset>:
 800506c:	0003      	movs	r3, r0
 800506e:	1882      	adds	r2, r0, r2
 8005070:	4293      	cmp	r3, r2
 8005072:	d100      	bne.n	8005076 <memset+0xa>
 8005074:	4770      	bx	lr
 8005076:	7019      	strb	r1, [r3, #0]
 8005078:	3301      	adds	r3, #1
 800507a:	e7f9      	b.n	8005070 <memset+0x4>

0800507c <__libc_init_array>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	2600      	movs	r6, #0
 8005080:	4c0c      	ldr	r4, [pc, #48]	@ (80050b4 <__libc_init_array+0x38>)
 8005082:	4d0d      	ldr	r5, [pc, #52]	@ (80050b8 <__libc_init_array+0x3c>)
 8005084:	1b64      	subs	r4, r4, r5
 8005086:	10a4      	asrs	r4, r4, #2
 8005088:	42a6      	cmp	r6, r4
 800508a:	d109      	bne.n	80050a0 <__libc_init_array+0x24>
 800508c:	2600      	movs	r6, #0
 800508e:	f000 f819 	bl	80050c4 <_init>
 8005092:	4c0a      	ldr	r4, [pc, #40]	@ (80050bc <__libc_init_array+0x40>)
 8005094:	4d0a      	ldr	r5, [pc, #40]	@ (80050c0 <__libc_init_array+0x44>)
 8005096:	1b64      	subs	r4, r4, r5
 8005098:	10a4      	asrs	r4, r4, #2
 800509a:	42a6      	cmp	r6, r4
 800509c:	d105      	bne.n	80050aa <__libc_init_array+0x2e>
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	00b3      	lsls	r3, r6, #2
 80050a2:	58eb      	ldr	r3, [r5, r3]
 80050a4:	4798      	blx	r3
 80050a6:	3601      	adds	r6, #1
 80050a8:	e7ee      	b.n	8005088 <__libc_init_array+0xc>
 80050aa:	00b3      	lsls	r3, r6, #2
 80050ac:	58eb      	ldr	r3, [r5, r3]
 80050ae:	4798      	blx	r3
 80050b0:	3601      	adds	r6, #1
 80050b2:	e7f2      	b.n	800509a <__libc_init_array+0x1e>
 80050b4:	08005270 	.word	0x08005270
 80050b8:	08005270 	.word	0x08005270
 80050bc:	08005274 	.word	0x08005274
 80050c0:	08005270 	.word	0x08005270

080050c4 <_init>:
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c6:	46c0      	nop			@ (mov r8, r8)
 80050c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ca:	bc08      	pop	{r3}
 80050cc:	469e      	mov	lr, r3
 80050ce:	4770      	bx	lr

080050d0 <_fini>:
 80050d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d2:	46c0      	nop			@ (mov r8, r8)
 80050d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d6:	bc08      	pop	{r3}
 80050d8:	469e      	mov	lr, r3
 80050da:	4770      	bx	lr
