
TEST_FOC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004890  08004890  00005890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a8  080049a8  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080049a8  080049a8  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080049a8  080049a8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049a8  080049a8  000059a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049ac  080049ac  000059ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080049b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000000c  080049bc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  080049bc  0000624c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163d1  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000386a  00000000  00000000  0001c405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00009556  00000000  00000000  0001fc6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  000291c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001452  00000000  00000000  00029e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a11  00000000  00000000  0002b27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004ba6  00000000  00000000  0003bc8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00040831  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000206c  00000000  00000000  00040874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000428e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004878 	.word	0x08004878

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004878 	.word	0x08004878

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_fmul>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	464f      	mov	r7, r9
 8000220:	4646      	mov	r6, r8
 8000222:	46d6      	mov	lr, sl
 8000224:	0044      	lsls	r4, r0, #1
 8000226:	b5c0      	push	{r6, r7, lr}
 8000228:	0246      	lsls	r6, r0, #9
 800022a:	1c0f      	adds	r7, r1, #0
 800022c:	0a76      	lsrs	r6, r6, #9
 800022e:	0e24      	lsrs	r4, r4, #24
 8000230:	0fc5      	lsrs	r5, r0, #31
 8000232:	2c00      	cmp	r4, #0
 8000234:	d100      	bne.n	8000238 <__aeabi_fmul+0x1c>
 8000236:	e0da      	b.n	80003ee <__aeabi_fmul+0x1d2>
 8000238:	2cff      	cmp	r4, #255	@ 0xff
 800023a:	d074      	beq.n	8000326 <__aeabi_fmul+0x10a>
 800023c:	2380      	movs	r3, #128	@ 0x80
 800023e:	00f6      	lsls	r6, r6, #3
 8000240:	04db      	lsls	r3, r3, #19
 8000242:	431e      	orrs	r6, r3
 8000244:	2300      	movs	r3, #0
 8000246:	4699      	mov	r9, r3
 8000248:	469a      	mov	sl, r3
 800024a:	3c7f      	subs	r4, #127	@ 0x7f
 800024c:	027b      	lsls	r3, r7, #9
 800024e:	0a5b      	lsrs	r3, r3, #9
 8000250:	4698      	mov	r8, r3
 8000252:	007b      	lsls	r3, r7, #1
 8000254:	0e1b      	lsrs	r3, r3, #24
 8000256:	0fff      	lsrs	r7, r7, #31
 8000258:	2b00      	cmp	r3, #0
 800025a:	d074      	beq.n	8000346 <__aeabi_fmul+0x12a>
 800025c:	2bff      	cmp	r3, #255	@ 0xff
 800025e:	d100      	bne.n	8000262 <__aeabi_fmul+0x46>
 8000260:	e08e      	b.n	8000380 <__aeabi_fmul+0x164>
 8000262:	4642      	mov	r2, r8
 8000264:	2180      	movs	r1, #128	@ 0x80
 8000266:	00d2      	lsls	r2, r2, #3
 8000268:	04c9      	lsls	r1, r1, #19
 800026a:	4311      	orrs	r1, r2
 800026c:	3b7f      	subs	r3, #127	@ 0x7f
 800026e:	002a      	movs	r2, r5
 8000270:	18e4      	adds	r4, r4, r3
 8000272:	464b      	mov	r3, r9
 8000274:	407a      	eors	r2, r7
 8000276:	4688      	mov	r8, r1
 8000278:	b2d2      	uxtb	r2, r2
 800027a:	2b0a      	cmp	r3, #10
 800027c:	dc75      	bgt.n	800036a <__aeabi_fmul+0x14e>
 800027e:	464b      	mov	r3, r9
 8000280:	2000      	movs	r0, #0
 8000282:	2b02      	cmp	r3, #2
 8000284:	dd0f      	ble.n	80002a6 <__aeabi_fmul+0x8a>
 8000286:	4649      	mov	r1, r9
 8000288:	2301      	movs	r3, #1
 800028a:	408b      	lsls	r3, r1
 800028c:	21a6      	movs	r1, #166	@ 0xa6
 800028e:	00c9      	lsls	r1, r1, #3
 8000290:	420b      	tst	r3, r1
 8000292:	d169      	bne.n	8000368 <__aeabi_fmul+0x14c>
 8000294:	2190      	movs	r1, #144	@ 0x90
 8000296:	0089      	lsls	r1, r1, #2
 8000298:	420b      	tst	r3, r1
 800029a:	d000      	beq.n	800029e <__aeabi_fmul+0x82>
 800029c:	e100      	b.n	80004a0 <__aeabi_fmul+0x284>
 800029e:	2188      	movs	r1, #136	@ 0x88
 80002a0:	4219      	tst	r1, r3
 80002a2:	d000      	beq.n	80002a6 <__aeabi_fmul+0x8a>
 80002a4:	e0f5      	b.n	8000492 <__aeabi_fmul+0x276>
 80002a6:	4641      	mov	r1, r8
 80002a8:	0409      	lsls	r1, r1, #16
 80002aa:	0c09      	lsrs	r1, r1, #16
 80002ac:	4643      	mov	r3, r8
 80002ae:	0008      	movs	r0, r1
 80002b0:	0c35      	lsrs	r5, r6, #16
 80002b2:	0436      	lsls	r6, r6, #16
 80002b4:	0c1b      	lsrs	r3, r3, #16
 80002b6:	0c36      	lsrs	r6, r6, #16
 80002b8:	4370      	muls	r0, r6
 80002ba:	4369      	muls	r1, r5
 80002bc:	435e      	muls	r6, r3
 80002be:	435d      	muls	r5, r3
 80002c0:	1876      	adds	r6, r6, r1
 80002c2:	0c03      	lsrs	r3, r0, #16
 80002c4:	199b      	adds	r3, r3, r6
 80002c6:	4299      	cmp	r1, r3
 80002c8:	d903      	bls.n	80002d2 <__aeabi_fmul+0xb6>
 80002ca:	2180      	movs	r1, #128	@ 0x80
 80002cc:	0249      	lsls	r1, r1, #9
 80002ce:	468c      	mov	ip, r1
 80002d0:	4465      	add	r5, ip
 80002d2:	0400      	lsls	r0, r0, #16
 80002d4:	0419      	lsls	r1, r3, #16
 80002d6:	0c00      	lsrs	r0, r0, #16
 80002d8:	1809      	adds	r1, r1, r0
 80002da:	018e      	lsls	r6, r1, #6
 80002dc:	1e70      	subs	r0, r6, #1
 80002de:	4186      	sbcs	r6, r0
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	0e89      	lsrs	r1, r1, #26
 80002e4:	195b      	adds	r3, r3, r5
 80002e6:	430e      	orrs	r6, r1
 80002e8:	019b      	lsls	r3, r3, #6
 80002ea:	431e      	orrs	r6, r3
 80002ec:	011b      	lsls	r3, r3, #4
 80002ee:	d46c      	bmi.n	80003ca <__aeabi_fmul+0x1ae>
 80002f0:	0023      	movs	r3, r4
 80002f2:	337f      	adds	r3, #127	@ 0x7f
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	dc00      	bgt.n	80002fa <__aeabi_fmul+0xde>
 80002f8:	e0b1      	b.n	800045e <__aeabi_fmul+0x242>
 80002fa:	0015      	movs	r5, r2
 80002fc:	0771      	lsls	r1, r6, #29
 80002fe:	d00b      	beq.n	8000318 <__aeabi_fmul+0xfc>
 8000300:	200f      	movs	r0, #15
 8000302:	0021      	movs	r1, r4
 8000304:	4030      	ands	r0, r6
 8000306:	2804      	cmp	r0, #4
 8000308:	d006      	beq.n	8000318 <__aeabi_fmul+0xfc>
 800030a:	3604      	adds	r6, #4
 800030c:	0132      	lsls	r2, r6, #4
 800030e:	d503      	bpl.n	8000318 <__aeabi_fmul+0xfc>
 8000310:	4b6e      	ldr	r3, [pc, #440]	@ (80004cc <__aeabi_fmul+0x2b0>)
 8000312:	401e      	ands	r6, r3
 8000314:	000b      	movs	r3, r1
 8000316:	3380      	adds	r3, #128	@ 0x80
 8000318:	2bfe      	cmp	r3, #254	@ 0xfe
 800031a:	dd00      	ble.n	800031e <__aeabi_fmul+0x102>
 800031c:	e0bd      	b.n	800049a <__aeabi_fmul+0x27e>
 800031e:	01b2      	lsls	r2, r6, #6
 8000320:	0a52      	lsrs	r2, r2, #9
 8000322:	b2db      	uxtb	r3, r3
 8000324:	e048      	b.n	80003b8 <__aeabi_fmul+0x19c>
 8000326:	2e00      	cmp	r6, #0
 8000328:	d000      	beq.n	800032c <__aeabi_fmul+0x110>
 800032a:	e092      	b.n	8000452 <__aeabi_fmul+0x236>
 800032c:	2308      	movs	r3, #8
 800032e:	4699      	mov	r9, r3
 8000330:	3b06      	subs	r3, #6
 8000332:	469a      	mov	sl, r3
 8000334:	027b      	lsls	r3, r7, #9
 8000336:	0a5b      	lsrs	r3, r3, #9
 8000338:	4698      	mov	r8, r3
 800033a:	007b      	lsls	r3, r7, #1
 800033c:	24ff      	movs	r4, #255	@ 0xff
 800033e:	0e1b      	lsrs	r3, r3, #24
 8000340:	0fff      	lsrs	r7, r7, #31
 8000342:	2b00      	cmp	r3, #0
 8000344:	d18a      	bne.n	800025c <__aeabi_fmul+0x40>
 8000346:	4642      	mov	r2, r8
 8000348:	2a00      	cmp	r2, #0
 800034a:	d164      	bne.n	8000416 <__aeabi_fmul+0x1fa>
 800034c:	4649      	mov	r1, r9
 800034e:	3201      	adds	r2, #1
 8000350:	4311      	orrs	r1, r2
 8000352:	4689      	mov	r9, r1
 8000354:	290a      	cmp	r1, #10
 8000356:	dc08      	bgt.n	800036a <__aeabi_fmul+0x14e>
 8000358:	407d      	eors	r5, r7
 800035a:	2001      	movs	r0, #1
 800035c:	b2ea      	uxtb	r2, r5
 800035e:	2902      	cmp	r1, #2
 8000360:	dc91      	bgt.n	8000286 <__aeabi_fmul+0x6a>
 8000362:	0015      	movs	r5, r2
 8000364:	2200      	movs	r2, #0
 8000366:	e027      	b.n	80003b8 <__aeabi_fmul+0x19c>
 8000368:	0015      	movs	r5, r2
 800036a:	4653      	mov	r3, sl
 800036c:	2b02      	cmp	r3, #2
 800036e:	d100      	bne.n	8000372 <__aeabi_fmul+0x156>
 8000370:	e093      	b.n	800049a <__aeabi_fmul+0x27e>
 8000372:	2b03      	cmp	r3, #3
 8000374:	d01a      	beq.n	80003ac <__aeabi_fmul+0x190>
 8000376:	2b01      	cmp	r3, #1
 8000378:	d12c      	bne.n	80003d4 <__aeabi_fmul+0x1b8>
 800037a:	2300      	movs	r3, #0
 800037c:	2200      	movs	r2, #0
 800037e:	e01b      	b.n	80003b8 <__aeabi_fmul+0x19c>
 8000380:	4643      	mov	r3, r8
 8000382:	34ff      	adds	r4, #255	@ 0xff
 8000384:	2b00      	cmp	r3, #0
 8000386:	d055      	beq.n	8000434 <__aeabi_fmul+0x218>
 8000388:	2103      	movs	r1, #3
 800038a:	464b      	mov	r3, r9
 800038c:	430b      	orrs	r3, r1
 800038e:	0019      	movs	r1, r3
 8000390:	2b0a      	cmp	r3, #10
 8000392:	dc00      	bgt.n	8000396 <__aeabi_fmul+0x17a>
 8000394:	e092      	b.n	80004bc <__aeabi_fmul+0x2a0>
 8000396:	2b0f      	cmp	r3, #15
 8000398:	d000      	beq.n	800039c <__aeabi_fmul+0x180>
 800039a:	e08c      	b.n	80004b6 <__aeabi_fmul+0x29a>
 800039c:	2280      	movs	r2, #128	@ 0x80
 800039e:	03d2      	lsls	r2, r2, #15
 80003a0:	4216      	tst	r6, r2
 80003a2:	d003      	beq.n	80003ac <__aeabi_fmul+0x190>
 80003a4:	4643      	mov	r3, r8
 80003a6:	4213      	tst	r3, r2
 80003a8:	d100      	bne.n	80003ac <__aeabi_fmul+0x190>
 80003aa:	e07d      	b.n	80004a8 <__aeabi_fmul+0x28c>
 80003ac:	2280      	movs	r2, #128	@ 0x80
 80003ae:	03d2      	lsls	r2, r2, #15
 80003b0:	4332      	orrs	r2, r6
 80003b2:	0252      	lsls	r2, r2, #9
 80003b4:	0a52      	lsrs	r2, r2, #9
 80003b6:	23ff      	movs	r3, #255	@ 0xff
 80003b8:	05d8      	lsls	r0, r3, #23
 80003ba:	07ed      	lsls	r5, r5, #31
 80003bc:	4310      	orrs	r0, r2
 80003be:	4328      	orrs	r0, r5
 80003c0:	bce0      	pop	{r5, r6, r7}
 80003c2:	46ba      	mov	sl, r7
 80003c4:	46b1      	mov	r9, r6
 80003c6:	46a8      	mov	r8, r5
 80003c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ca:	2301      	movs	r3, #1
 80003cc:	0015      	movs	r5, r2
 80003ce:	0871      	lsrs	r1, r6, #1
 80003d0:	401e      	ands	r6, r3
 80003d2:	430e      	orrs	r6, r1
 80003d4:	0023      	movs	r3, r4
 80003d6:	3380      	adds	r3, #128	@ 0x80
 80003d8:	1c61      	adds	r1, r4, #1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	dd41      	ble.n	8000462 <__aeabi_fmul+0x246>
 80003de:	0772      	lsls	r2, r6, #29
 80003e0:	d094      	beq.n	800030c <__aeabi_fmul+0xf0>
 80003e2:	220f      	movs	r2, #15
 80003e4:	4032      	ands	r2, r6
 80003e6:	2a04      	cmp	r2, #4
 80003e8:	d000      	beq.n	80003ec <__aeabi_fmul+0x1d0>
 80003ea:	e78e      	b.n	800030a <__aeabi_fmul+0xee>
 80003ec:	e78e      	b.n	800030c <__aeabi_fmul+0xf0>
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d105      	bne.n	80003fe <__aeabi_fmul+0x1e2>
 80003f2:	2304      	movs	r3, #4
 80003f4:	4699      	mov	r9, r3
 80003f6:	3b03      	subs	r3, #3
 80003f8:	2400      	movs	r4, #0
 80003fa:	469a      	mov	sl, r3
 80003fc:	e726      	b.n	800024c <__aeabi_fmul+0x30>
 80003fe:	0030      	movs	r0, r6
 8000400:	f001 fbb6 	bl	8001b70 <__clzsi2>
 8000404:	2476      	movs	r4, #118	@ 0x76
 8000406:	1f43      	subs	r3, r0, #5
 8000408:	409e      	lsls	r6, r3
 800040a:	2300      	movs	r3, #0
 800040c:	4264      	negs	r4, r4
 800040e:	4699      	mov	r9, r3
 8000410:	469a      	mov	sl, r3
 8000412:	1a24      	subs	r4, r4, r0
 8000414:	e71a      	b.n	800024c <__aeabi_fmul+0x30>
 8000416:	4640      	mov	r0, r8
 8000418:	f001 fbaa 	bl	8001b70 <__clzsi2>
 800041c:	464b      	mov	r3, r9
 800041e:	1a24      	subs	r4, r4, r0
 8000420:	3c76      	subs	r4, #118	@ 0x76
 8000422:	2b0a      	cmp	r3, #10
 8000424:	dca1      	bgt.n	800036a <__aeabi_fmul+0x14e>
 8000426:	4643      	mov	r3, r8
 8000428:	3805      	subs	r0, #5
 800042a:	4083      	lsls	r3, r0
 800042c:	407d      	eors	r5, r7
 800042e:	4698      	mov	r8, r3
 8000430:	b2ea      	uxtb	r2, r5
 8000432:	e724      	b.n	800027e <__aeabi_fmul+0x62>
 8000434:	464a      	mov	r2, r9
 8000436:	3302      	adds	r3, #2
 8000438:	4313      	orrs	r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	407a      	eors	r2, r7
 800043e:	b2d2      	uxtb	r2, r2
 8000440:	2b0a      	cmp	r3, #10
 8000442:	dc92      	bgt.n	800036a <__aeabi_fmul+0x14e>
 8000444:	4649      	mov	r1, r9
 8000446:	0015      	movs	r5, r2
 8000448:	2900      	cmp	r1, #0
 800044a:	d026      	beq.n	800049a <__aeabi_fmul+0x27e>
 800044c:	4699      	mov	r9, r3
 800044e:	2002      	movs	r0, #2
 8000450:	e719      	b.n	8000286 <__aeabi_fmul+0x6a>
 8000452:	230c      	movs	r3, #12
 8000454:	4699      	mov	r9, r3
 8000456:	3b09      	subs	r3, #9
 8000458:	24ff      	movs	r4, #255	@ 0xff
 800045a:	469a      	mov	sl, r3
 800045c:	e6f6      	b.n	800024c <__aeabi_fmul+0x30>
 800045e:	0015      	movs	r5, r2
 8000460:	0021      	movs	r1, r4
 8000462:	2201      	movs	r2, #1
 8000464:	1ad3      	subs	r3, r2, r3
 8000466:	2b1b      	cmp	r3, #27
 8000468:	dd00      	ble.n	800046c <__aeabi_fmul+0x250>
 800046a:	e786      	b.n	800037a <__aeabi_fmul+0x15e>
 800046c:	319e      	adds	r1, #158	@ 0x9e
 800046e:	0032      	movs	r2, r6
 8000470:	408e      	lsls	r6, r1
 8000472:	40da      	lsrs	r2, r3
 8000474:	1e73      	subs	r3, r6, #1
 8000476:	419e      	sbcs	r6, r3
 8000478:	4332      	orrs	r2, r6
 800047a:	0753      	lsls	r3, r2, #29
 800047c:	d004      	beq.n	8000488 <__aeabi_fmul+0x26c>
 800047e:	230f      	movs	r3, #15
 8000480:	4013      	ands	r3, r2
 8000482:	2b04      	cmp	r3, #4
 8000484:	d000      	beq.n	8000488 <__aeabi_fmul+0x26c>
 8000486:	3204      	adds	r2, #4
 8000488:	0153      	lsls	r3, r2, #5
 800048a:	d510      	bpl.n	80004ae <__aeabi_fmul+0x292>
 800048c:	2301      	movs	r3, #1
 800048e:	2200      	movs	r2, #0
 8000490:	e792      	b.n	80003b8 <__aeabi_fmul+0x19c>
 8000492:	003d      	movs	r5, r7
 8000494:	4646      	mov	r6, r8
 8000496:	4682      	mov	sl, r0
 8000498:	e767      	b.n	800036a <__aeabi_fmul+0x14e>
 800049a:	23ff      	movs	r3, #255	@ 0xff
 800049c:	2200      	movs	r2, #0
 800049e:	e78b      	b.n	80003b8 <__aeabi_fmul+0x19c>
 80004a0:	2280      	movs	r2, #128	@ 0x80
 80004a2:	2500      	movs	r5, #0
 80004a4:	03d2      	lsls	r2, r2, #15
 80004a6:	e786      	b.n	80003b6 <__aeabi_fmul+0x19a>
 80004a8:	003d      	movs	r5, r7
 80004aa:	431a      	orrs	r2, r3
 80004ac:	e783      	b.n	80003b6 <__aeabi_fmul+0x19a>
 80004ae:	0192      	lsls	r2, r2, #6
 80004b0:	2300      	movs	r3, #0
 80004b2:	0a52      	lsrs	r2, r2, #9
 80004b4:	e780      	b.n	80003b8 <__aeabi_fmul+0x19c>
 80004b6:	003d      	movs	r5, r7
 80004b8:	4646      	mov	r6, r8
 80004ba:	e777      	b.n	80003ac <__aeabi_fmul+0x190>
 80004bc:	002a      	movs	r2, r5
 80004be:	2301      	movs	r3, #1
 80004c0:	407a      	eors	r2, r7
 80004c2:	408b      	lsls	r3, r1
 80004c4:	2003      	movs	r0, #3
 80004c6:	b2d2      	uxtb	r2, r2
 80004c8:	e6e9      	b.n	800029e <__aeabi_fmul+0x82>
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	f7ffffff 	.word	0xf7ffffff

080004d0 <__aeabi_i2f>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	2800      	cmp	r0, #0
 80004d4:	d012      	beq.n	80004fc <__aeabi_i2f+0x2c>
 80004d6:	17c3      	asrs	r3, r0, #31
 80004d8:	18c5      	adds	r5, r0, r3
 80004da:	405d      	eors	r5, r3
 80004dc:	0fc4      	lsrs	r4, r0, #31
 80004de:	0028      	movs	r0, r5
 80004e0:	f001 fb46 	bl	8001b70 <__clzsi2>
 80004e4:	239e      	movs	r3, #158	@ 0x9e
 80004e6:	1a1b      	subs	r3, r3, r0
 80004e8:	2b96      	cmp	r3, #150	@ 0x96
 80004ea:	dc0f      	bgt.n	800050c <__aeabi_i2f+0x3c>
 80004ec:	2808      	cmp	r0, #8
 80004ee:	d038      	beq.n	8000562 <__aeabi_i2f+0x92>
 80004f0:	3808      	subs	r0, #8
 80004f2:	4085      	lsls	r5, r0
 80004f4:	026d      	lsls	r5, r5, #9
 80004f6:	0a6d      	lsrs	r5, r5, #9
 80004f8:	b2d8      	uxtb	r0, r3
 80004fa:	e002      	b.n	8000502 <__aeabi_i2f+0x32>
 80004fc:	2400      	movs	r4, #0
 80004fe:	2000      	movs	r0, #0
 8000500:	2500      	movs	r5, #0
 8000502:	05c0      	lsls	r0, r0, #23
 8000504:	4328      	orrs	r0, r5
 8000506:	07e4      	lsls	r4, r4, #31
 8000508:	4320      	orrs	r0, r4
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2b99      	cmp	r3, #153	@ 0x99
 800050e:	dc14      	bgt.n	800053a <__aeabi_i2f+0x6a>
 8000510:	1f42      	subs	r2, r0, #5
 8000512:	4095      	lsls	r5, r2
 8000514:	002a      	movs	r2, r5
 8000516:	4915      	ldr	r1, [pc, #84]	@ (800056c <__aeabi_i2f+0x9c>)
 8000518:	4011      	ands	r1, r2
 800051a:	0755      	lsls	r5, r2, #29
 800051c:	d01c      	beq.n	8000558 <__aeabi_i2f+0x88>
 800051e:	250f      	movs	r5, #15
 8000520:	402a      	ands	r2, r5
 8000522:	2a04      	cmp	r2, #4
 8000524:	d018      	beq.n	8000558 <__aeabi_i2f+0x88>
 8000526:	3104      	adds	r1, #4
 8000528:	08ca      	lsrs	r2, r1, #3
 800052a:	0149      	lsls	r1, r1, #5
 800052c:	d515      	bpl.n	800055a <__aeabi_i2f+0x8a>
 800052e:	239f      	movs	r3, #159	@ 0x9f
 8000530:	0252      	lsls	r2, r2, #9
 8000532:	1a18      	subs	r0, r3, r0
 8000534:	0a55      	lsrs	r5, r2, #9
 8000536:	b2c0      	uxtb	r0, r0
 8000538:	e7e3      	b.n	8000502 <__aeabi_i2f+0x32>
 800053a:	2205      	movs	r2, #5
 800053c:	0029      	movs	r1, r5
 800053e:	1a12      	subs	r2, r2, r0
 8000540:	40d1      	lsrs	r1, r2
 8000542:	0002      	movs	r2, r0
 8000544:	321b      	adds	r2, #27
 8000546:	4095      	lsls	r5, r2
 8000548:	002a      	movs	r2, r5
 800054a:	1e55      	subs	r5, r2, #1
 800054c:	41aa      	sbcs	r2, r5
 800054e:	430a      	orrs	r2, r1
 8000550:	4906      	ldr	r1, [pc, #24]	@ (800056c <__aeabi_i2f+0x9c>)
 8000552:	4011      	ands	r1, r2
 8000554:	0755      	lsls	r5, r2, #29
 8000556:	d1e2      	bne.n	800051e <__aeabi_i2f+0x4e>
 8000558:	08ca      	lsrs	r2, r1, #3
 800055a:	0252      	lsls	r2, r2, #9
 800055c:	0a55      	lsrs	r5, r2, #9
 800055e:	b2d8      	uxtb	r0, r3
 8000560:	e7cf      	b.n	8000502 <__aeabi_i2f+0x32>
 8000562:	026d      	lsls	r5, r5, #9
 8000564:	0a6d      	lsrs	r5, r5, #9
 8000566:	308e      	adds	r0, #142	@ 0x8e
 8000568:	e7cb      	b.n	8000502 <__aeabi_i2f+0x32>
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	fbffffff 	.word	0xfbffffff

08000570 <__aeabi_ddiv>:
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	46de      	mov	lr, fp
 8000574:	4645      	mov	r5, r8
 8000576:	4657      	mov	r7, sl
 8000578:	464e      	mov	r6, r9
 800057a:	b5e0      	push	{r5, r6, r7, lr}
 800057c:	b087      	sub	sp, #28
 800057e:	9200      	str	r2, [sp, #0]
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	030b      	lsls	r3, r1, #12
 8000584:	0b1b      	lsrs	r3, r3, #12
 8000586:	469b      	mov	fp, r3
 8000588:	0fca      	lsrs	r2, r1, #31
 800058a:	004b      	lsls	r3, r1, #1
 800058c:	0004      	movs	r4, r0
 800058e:	4680      	mov	r8, r0
 8000590:	0d5b      	lsrs	r3, r3, #21
 8000592:	9202      	str	r2, [sp, #8]
 8000594:	d100      	bne.n	8000598 <__aeabi_ddiv+0x28>
 8000596:	e098      	b.n	80006ca <__aeabi_ddiv+0x15a>
 8000598:	4a7c      	ldr	r2, [pc, #496]	@ (800078c <__aeabi_ddiv+0x21c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d037      	beq.n	800060e <__aeabi_ddiv+0x9e>
 800059e:	4659      	mov	r1, fp
 80005a0:	0f42      	lsrs	r2, r0, #29
 80005a2:	00c9      	lsls	r1, r1, #3
 80005a4:	430a      	orrs	r2, r1
 80005a6:	2180      	movs	r1, #128	@ 0x80
 80005a8:	0409      	lsls	r1, r1, #16
 80005aa:	4311      	orrs	r1, r2
 80005ac:	00c2      	lsls	r2, r0, #3
 80005ae:	4690      	mov	r8, r2
 80005b0:	4a77      	ldr	r2, [pc, #476]	@ (8000790 <__aeabi_ddiv+0x220>)
 80005b2:	4689      	mov	r9, r1
 80005b4:	4692      	mov	sl, r2
 80005b6:	449a      	add	sl, r3
 80005b8:	2300      	movs	r3, #0
 80005ba:	2400      	movs	r4, #0
 80005bc:	9303      	str	r3, [sp, #12]
 80005be:	9e00      	ldr	r6, [sp, #0]
 80005c0:	9f01      	ldr	r7, [sp, #4]
 80005c2:	033b      	lsls	r3, r7, #12
 80005c4:	0b1b      	lsrs	r3, r3, #12
 80005c6:	469b      	mov	fp, r3
 80005c8:	007b      	lsls	r3, r7, #1
 80005ca:	0030      	movs	r0, r6
 80005cc:	0d5b      	lsrs	r3, r3, #21
 80005ce:	0ffd      	lsrs	r5, r7, #31
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d059      	beq.n	8000688 <__aeabi_ddiv+0x118>
 80005d4:	4a6d      	ldr	r2, [pc, #436]	@ (800078c <__aeabi_ddiv+0x21c>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d048      	beq.n	800066c <__aeabi_ddiv+0xfc>
 80005da:	4659      	mov	r1, fp
 80005dc:	0f72      	lsrs	r2, r6, #29
 80005de:	00c9      	lsls	r1, r1, #3
 80005e0:	430a      	orrs	r2, r1
 80005e2:	2180      	movs	r1, #128	@ 0x80
 80005e4:	0409      	lsls	r1, r1, #16
 80005e6:	4311      	orrs	r1, r2
 80005e8:	468b      	mov	fp, r1
 80005ea:	4969      	ldr	r1, [pc, #420]	@ (8000790 <__aeabi_ddiv+0x220>)
 80005ec:	00f2      	lsls	r2, r6, #3
 80005ee:	468c      	mov	ip, r1
 80005f0:	4651      	mov	r1, sl
 80005f2:	4463      	add	r3, ip
 80005f4:	1acb      	subs	r3, r1, r3
 80005f6:	469a      	mov	sl, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	9e02      	ldr	r6, [sp, #8]
 80005fc:	406e      	eors	r6, r5
 80005fe:	b2f6      	uxtb	r6, r6
 8000600:	2c0f      	cmp	r4, #15
 8000602:	d900      	bls.n	8000606 <__aeabi_ddiv+0x96>
 8000604:	e0ce      	b.n	80007a4 <__aeabi_ddiv+0x234>
 8000606:	4b63      	ldr	r3, [pc, #396]	@ (8000794 <__aeabi_ddiv+0x224>)
 8000608:	00a4      	lsls	r4, r4, #2
 800060a:	591b      	ldr	r3, [r3, r4]
 800060c:	469f      	mov	pc, r3
 800060e:	465a      	mov	r2, fp
 8000610:	4302      	orrs	r2, r0
 8000612:	4691      	mov	r9, r2
 8000614:	d000      	beq.n	8000618 <__aeabi_ddiv+0xa8>
 8000616:	e090      	b.n	800073a <__aeabi_ddiv+0x1ca>
 8000618:	469a      	mov	sl, r3
 800061a:	2302      	movs	r3, #2
 800061c:	4690      	mov	r8, r2
 800061e:	2408      	movs	r4, #8
 8000620:	9303      	str	r3, [sp, #12]
 8000622:	e7cc      	b.n	80005be <__aeabi_ddiv+0x4e>
 8000624:	46cb      	mov	fp, r9
 8000626:	4642      	mov	r2, r8
 8000628:	9d02      	ldr	r5, [sp, #8]
 800062a:	9903      	ldr	r1, [sp, #12]
 800062c:	2902      	cmp	r1, #2
 800062e:	d100      	bne.n	8000632 <__aeabi_ddiv+0xc2>
 8000630:	e1de      	b.n	80009f0 <__aeabi_ddiv+0x480>
 8000632:	2903      	cmp	r1, #3
 8000634:	d100      	bne.n	8000638 <__aeabi_ddiv+0xc8>
 8000636:	e08d      	b.n	8000754 <__aeabi_ddiv+0x1e4>
 8000638:	2901      	cmp	r1, #1
 800063a:	d000      	beq.n	800063e <__aeabi_ddiv+0xce>
 800063c:	e179      	b.n	8000932 <__aeabi_ddiv+0x3c2>
 800063e:	002e      	movs	r6, r5
 8000640:	2200      	movs	r2, #0
 8000642:	2300      	movs	r3, #0
 8000644:	2400      	movs	r4, #0
 8000646:	4690      	mov	r8, r2
 8000648:	051b      	lsls	r3, r3, #20
 800064a:	4323      	orrs	r3, r4
 800064c:	07f6      	lsls	r6, r6, #31
 800064e:	4333      	orrs	r3, r6
 8000650:	4640      	mov	r0, r8
 8000652:	0019      	movs	r1, r3
 8000654:	b007      	add	sp, #28
 8000656:	bcf0      	pop	{r4, r5, r6, r7}
 8000658:	46bb      	mov	fp, r7
 800065a:	46b2      	mov	sl, r6
 800065c:	46a9      	mov	r9, r5
 800065e:	46a0      	mov	r8, r4
 8000660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000662:	2200      	movs	r2, #0
 8000664:	2400      	movs	r4, #0
 8000666:	4690      	mov	r8, r2
 8000668:	4b48      	ldr	r3, [pc, #288]	@ (800078c <__aeabi_ddiv+0x21c>)
 800066a:	e7ed      	b.n	8000648 <__aeabi_ddiv+0xd8>
 800066c:	465a      	mov	r2, fp
 800066e:	9b00      	ldr	r3, [sp, #0]
 8000670:	431a      	orrs	r2, r3
 8000672:	4b49      	ldr	r3, [pc, #292]	@ (8000798 <__aeabi_ddiv+0x228>)
 8000674:	469c      	mov	ip, r3
 8000676:	44e2      	add	sl, ip
 8000678:	2a00      	cmp	r2, #0
 800067a:	d159      	bne.n	8000730 <__aeabi_ddiv+0x1c0>
 800067c:	2302      	movs	r3, #2
 800067e:	431c      	orrs	r4, r3
 8000680:	2300      	movs	r3, #0
 8000682:	2102      	movs	r1, #2
 8000684:	469b      	mov	fp, r3
 8000686:	e7b8      	b.n	80005fa <__aeabi_ddiv+0x8a>
 8000688:	465a      	mov	r2, fp
 800068a:	9b00      	ldr	r3, [sp, #0]
 800068c:	431a      	orrs	r2, r3
 800068e:	d049      	beq.n	8000724 <__aeabi_ddiv+0x1b4>
 8000690:	465b      	mov	r3, fp
 8000692:	2b00      	cmp	r3, #0
 8000694:	d100      	bne.n	8000698 <__aeabi_ddiv+0x128>
 8000696:	e19c      	b.n	80009d2 <__aeabi_ddiv+0x462>
 8000698:	4658      	mov	r0, fp
 800069a:	f001 fa69 	bl	8001b70 <__clzsi2>
 800069e:	0002      	movs	r2, r0
 80006a0:	0003      	movs	r3, r0
 80006a2:	3a0b      	subs	r2, #11
 80006a4:	271d      	movs	r7, #29
 80006a6:	9e00      	ldr	r6, [sp, #0]
 80006a8:	1aba      	subs	r2, r7, r2
 80006aa:	0019      	movs	r1, r3
 80006ac:	4658      	mov	r0, fp
 80006ae:	40d6      	lsrs	r6, r2
 80006b0:	3908      	subs	r1, #8
 80006b2:	4088      	lsls	r0, r1
 80006b4:	0032      	movs	r2, r6
 80006b6:	4302      	orrs	r2, r0
 80006b8:	4693      	mov	fp, r2
 80006ba:	9a00      	ldr	r2, [sp, #0]
 80006bc:	408a      	lsls	r2, r1
 80006be:	4937      	ldr	r1, [pc, #220]	@ (800079c <__aeabi_ddiv+0x22c>)
 80006c0:	4453      	add	r3, sl
 80006c2:	468a      	mov	sl, r1
 80006c4:	2100      	movs	r1, #0
 80006c6:	449a      	add	sl, r3
 80006c8:	e797      	b.n	80005fa <__aeabi_ddiv+0x8a>
 80006ca:	465b      	mov	r3, fp
 80006cc:	4303      	orrs	r3, r0
 80006ce:	4699      	mov	r9, r3
 80006d0:	d021      	beq.n	8000716 <__aeabi_ddiv+0x1a6>
 80006d2:	465b      	mov	r3, fp
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d100      	bne.n	80006da <__aeabi_ddiv+0x16a>
 80006d8:	e169      	b.n	80009ae <__aeabi_ddiv+0x43e>
 80006da:	4658      	mov	r0, fp
 80006dc:	f001 fa48 	bl	8001b70 <__clzsi2>
 80006e0:	230b      	movs	r3, #11
 80006e2:	425b      	negs	r3, r3
 80006e4:	469c      	mov	ip, r3
 80006e6:	0002      	movs	r2, r0
 80006e8:	4484      	add	ip, r0
 80006ea:	4666      	mov	r6, ip
 80006ec:	231d      	movs	r3, #29
 80006ee:	1b9b      	subs	r3, r3, r6
 80006f0:	0026      	movs	r6, r4
 80006f2:	0011      	movs	r1, r2
 80006f4:	4658      	mov	r0, fp
 80006f6:	40de      	lsrs	r6, r3
 80006f8:	3908      	subs	r1, #8
 80006fa:	4088      	lsls	r0, r1
 80006fc:	0033      	movs	r3, r6
 80006fe:	4303      	orrs	r3, r0
 8000700:	4699      	mov	r9, r3
 8000702:	0023      	movs	r3, r4
 8000704:	408b      	lsls	r3, r1
 8000706:	4698      	mov	r8, r3
 8000708:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <__aeabi_ddiv+0x230>)
 800070a:	2400      	movs	r4, #0
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	469a      	mov	sl, r3
 8000710:	2300      	movs	r3, #0
 8000712:	9303      	str	r3, [sp, #12]
 8000714:	e753      	b.n	80005be <__aeabi_ddiv+0x4e>
 8000716:	2300      	movs	r3, #0
 8000718:	4698      	mov	r8, r3
 800071a:	469a      	mov	sl, r3
 800071c:	3301      	adds	r3, #1
 800071e:	2404      	movs	r4, #4
 8000720:	9303      	str	r3, [sp, #12]
 8000722:	e74c      	b.n	80005be <__aeabi_ddiv+0x4e>
 8000724:	2301      	movs	r3, #1
 8000726:	431c      	orrs	r4, r3
 8000728:	2300      	movs	r3, #0
 800072a:	2101      	movs	r1, #1
 800072c:	469b      	mov	fp, r3
 800072e:	e764      	b.n	80005fa <__aeabi_ddiv+0x8a>
 8000730:	2303      	movs	r3, #3
 8000732:	0032      	movs	r2, r6
 8000734:	2103      	movs	r1, #3
 8000736:	431c      	orrs	r4, r3
 8000738:	e75f      	b.n	80005fa <__aeabi_ddiv+0x8a>
 800073a:	469a      	mov	sl, r3
 800073c:	2303      	movs	r3, #3
 800073e:	46d9      	mov	r9, fp
 8000740:	240c      	movs	r4, #12
 8000742:	9303      	str	r3, [sp, #12]
 8000744:	e73b      	b.n	80005be <__aeabi_ddiv+0x4e>
 8000746:	2300      	movs	r3, #0
 8000748:	2480      	movs	r4, #128	@ 0x80
 800074a:	4698      	mov	r8, r3
 800074c:	2600      	movs	r6, #0
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <__aeabi_ddiv+0x21c>)
 8000750:	0324      	lsls	r4, r4, #12
 8000752:	e779      	b.n	8000648 <__aeabi_ddiv+0xd8>
 8000754:	2480      	movs	r4, #128	@ 0x80
 8000756:	465b      	mov	r3, fp
 8000758:	0324      	lsls	r4, r4, #12
 800075a:	431c      	orrs	r4, r3
 800075c:	0324      	lsls	r4, r4, #12
 800075e:	002e      	movs	r6, r5
 8000760:	4690      	mov	r8, r2
 8000762:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <__aeabi_ddiv+0x21c>)
 8000764:	0b24      	lsrs	r4, r4, #12
 8000766:	e76f      	b.n	8000648 <__aeabi_ddiv+0xd8>
 8000768:	2480      	movs	r4, #128	@ 0x80
 800076a:	464b      	mov	r3, r9
 800076c:	0324      	lsls	r4, r4, #12
 800076e:	4223      	tst	r3, r4
 8000770:	d002      	beq.n	8000778 <__aeabi_ddiv+0x208>
 8000772:	465b      	mov	r3, fp
 8000774:	4223      	tst	r3, r4
 8000776:	d0f0      	beq.n	800075a <__aeabi_ddiv+0x1ea>
 8000778:	2480      	movs	r4, #128	@ 0x80
 800077a:	464b      	mov	r3, r9
 800077c:	0324      	lsls	r4, r4, #12
 800077e:	431c      	orrs	r4, r3
 8000780:	0324      	lsls	r4, r4, #12
 8000782:	9e02      	ldr	r6, [sp, #8]
 8000784:	4b01      	ldr	r3, [pc, #4]	@ (800078c <__aeabi_ddiv+0x21c>)
 8000786:	0b24      	lsrs	r4, r4, #12
 8000788:	e75e      	b.n	8000648 <__aeabi_ddiv+0xd8>
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	000007ff 	.word	0x000007ff
 8000790:	fffffc01 	.word	0xfffffc01
 8000794:	08004890 	.word	0x08004890
 8000798:	fffff801 	.word	0xfffff801
 800079c:	000003f3 	.word	0x000003f3
 80007a0:	fffffc0d 	.word	0xfffffc0d
 80007a4:	45cb      	cmp	fp, r9
 80007a6:	d200      	bcs.n	80007aa <__aeabi_ddiv+0x23a>
 80007a8:	e0f8      	b.n	800099c <__aeabi_ddiv+0x42c>
 80007aa:	d100      	bne.n	80007ae <__aeabi_ddiv+0x23e>
 80007ac:	e0f3      	b.n	8000996 <__aeabi_ddiv+0x426>
 80007ae:	2301      	movs	r3, #1
 80007b0:	425b      	negs	r3, r3
 80007b2:	469c      	mov	ip, r3
 80007b4:	4644      	mov	r4, r8
 80007b6:	4648      	mov	r0, r9
 80007b8:	2500      	movs	r5, #0
 80007ba:	44e2      	add	sl, ip
 80007bc:	465b      	mov	r3, fp
 80007be:	0e17      	lsrs	r7, r2, #24
 80007c0:	021b      	lsls	r3, r3, #8
 80007c2:	431f      	orrs	r7, r3
 80007c4:	0c19      	lsrs	r1, r3, #16
 80007c6:	043b      	lsls	r3, r7, #16
 80007c8:	0212      	lsls	r2, r2, #8
 80007ca:	9700      	str	r7, [sp, #0]
 80007cc:	0c1f      	lsrs	r7, r3, #16
 80007ce:	4691      	mov	r9, r2
 80007d0:	9102      	str	r1, [sp, #8]
 80007d2:	9703      	str	r7, [sp, #12]
 80007d4:	f7ff fd1c 	bl	8000210 <__aeabi_uidivmod>
 80007d8:	0002      	movs	r2, r0
 80007da:	437a      	muls	r2, r7
 80007dc:	040b      	lsls	r3, r1, #16
 80007de:	0c21      	lsrs	r1, r4, #16
 80007e0:	4680      	mov	r8, r0
 80007e2:	4319      	orrs	r1, r3
 80007e4:	428a      	cmp	r2, r1
 80007e6:	d909      	bls.n	80007fc <__aeabi_ddiv+0x28c>
 80007e8:	9f00      	ldr	r7, [sp, #0]
 80007ea:	2301      	movs	r3, #1
 80007ec:	46bc      	mov	ip, r7
 80007ee:	425b      	negs	r3, r3
 80007f0:	4461      	add	r1, ip
 80007f2:	469c      	mov	ip, r3
 80007f4:	44e0      	add	r8, ip
 80007f6:	428f      	cmp	r7, r1
 80007f8:	d800      	bhi.n	80007fc <__aeabi_ddiv+0x28c>
 80007fa:	e15c      	b.n	8000ab6 <__aeabi_ddiv+0x546>
 80007fc:	1a88      	subs	r0, r1, r2
 80007fe:	9902      	ldr	r1, [sp, #8]
 8000800:	f7ff fd06 	bl	8000210 <__aeabi_uidivmod>
 8000804:	9a03      	ldr	r2, [sp, #12]
 8000806:	0424      	lsls	r4, r4, #16
 8000808:	4342      	muls	r2, r0
 800080a:	0409      	lsls	r1, r1, #16
 800080c:	0c24      	lsrs	r4, r4, #16
 800080e:	0003      	movs	r3, r0
 8000810:	430c      	orrs	r4, r1
 8000812:	42a2      	cmp	r2, r4
 8000814:	d906      	bls.n	8000824 <__aeabi_ddiv+0x2b4>
 8000816:	9900      	ldr	r1, [sp, #0]
 8000818:	3b01      	subs	r3, #1
 800081a:	468c      	mov	ip, r1
 800081c:	4464      	add	r4, ip
 800081e:	42a1      	cmp	r1, r4
 8000820:	d800      	bhi.n	8000824 <__aeabi_ddiv+0x2b4>
 8000822:	e142      	b.n	8000aaa <__aeabi_ddiv+0x53a>
 8000824:	1aa0      	subs	r0, r4, r2
 8000826:	4642      	mov	r2, r8
 8000828:	0412      	lsls	r2, r2, #16
 800082a:	431a      	orrs	r2, r3
 800082c:	4693      	mov	fp, r2
 800082e:	464b      	mov	r3, r9
 8000830:	4659      	mov	r1, fp
 8000832:	0c1b      	lsrs	r3, r3, #16
 8000834:	001f      	movs	r7, r3
 8000836:	9304      	str	r3, [sp, #16]
 8000838:	040b      	lsls	r3, r1, #16
 800083a:	4649      	mov	r1, r9
 800083c:	0409      	lsls	r1, r1, #16
 800083e:	0c09      	lsrs	r1, r1, #16
 8000840:	000c      	movs	r4, r1
 8000842:	0c1b      	lsrs	r3, r3, #16
 8000844:	435c      	muls	r4, r3
 8000846:	0c12      	lsrs	r2, r2, #16
 8000848:	437b      	muls	r3, r7
 800084a:	4688      	mov	r8, r1
 800084c:	4351      	muls	r1, r2
 800084e:	437a      	muls	r2, r7
 8000850:	0c27      	lsrs	r7, r4, #16
 8000852:	46bc      	mov	ip, r7
 8000854:	185b      	adds	r3, r3, r1
 8000856:	4463      	add	r3, ip
 8000858:	4299      	cmp	r1, r3
 800085a:	d903      	bls.n	8000864 <__aeabi_ddiv+0x2f4>
 800085c:	2180      	movs	r1, #128	@ 0x80
 800085e:	0249      	lsls	r1, r1, #9
 8000860:	468c      	mov	ip, r1
 8000862:	4462      	add	r2, ip
 8000864:	0c19      	lsrs	r1, r3, #16
 8000866:	0424      	lsls	r4, r4, #16
 8000868:	041b      	lsls	r3, r3, #16
 800086a:	0c24      	lsrs	r4, r4, #16
 800086c:	188a      	adds	r2, r1, r2
 800086e:	191c      	adds	r4, r3, r4
 8000870:	4290      	cmp	r0, r2
 8000872:	d302      	bcc.n	800087a <__aeabi_ddiv+0x30a>
 8000874:	d116      	bne.n	80008a4 <__aeabi_ddiv+0x334>
 8000876:	42a5      	cmp	r5, r4
 8000878:	d214      	bcs.n	80008a4 <__aeabi_ddiv+0x334>
 800087a:	465b      	mov	r3, fp
 800087c:	9f00      	ldr	r7, [sp, #0]
 800087e:	3b01      	subs	r3, #1
 8000880:	444d      	add	r5, r9
 8000882:	9305      	str	r3, [sp, #20]
 8000884:	454d      	cmp	r5, r9
 8000886:	419b      	sbcs	r3, r3
 8000888:	46bc      	mov	ip, r7
 800088a:	425b      	negs	r3, r3
 800088c:	4463      	add	r3, ip
 800088e:	18c0      	adds	r0, r0, r3
 8000890:	4287      	cmp	r7, r0
 8000892:	d300      	bcc.n	8000896 <__aeabi_ddiv+0x326>
 8000894:	e102      	b.n	8000a9c <__aeabi_ddiv+0x52c>
 8000896:	4282      	cmp	r2, r0
 8000898:	d900      	bls.n	800089c <__aeabi_ddiv+0x32c>
 800089a:	e129      	b.n	8000af0 <__aeabi_ddiv+0x580>
 800089c:	d100      	bne.n	80008a0 <__aeabi_ddiv+0x330>
 800089e:	e124      	b.n	8000aea <__aeabi_ddiv+0x57a>
 80008a0:	9b05      	ldr	r3, [sp, #20]
 80008a2:	469b      	mov	fp, r3
 80008a4:	1b2c      	subs	r4, r5, r4
 80008a6:	42a5      	cmp	r5, r4
 80008a8:	41ad      	sbcs	r5, r5
 80008aa:	9b00      	ldr	r3, [sp, #0]
 80008ac:	1a80      	subs	r0, r0, r2
 80008ae:	426d      	negs	r5, r5
 80008b0:	1b40      	subs	r0, r0, r5
 80008b2:	4283      	cmp	r3, r0
 80008b4:	d100      	bne.n	80008b8 <__aeabi_ddiv+0x348>
 80008b6:	e10f      	b.n	8000ad8 <__aeabi_ddiv+0x568>
 80008b8:	9902      	ldr	r1, [sp, #8]
 80008ba:	f7ff fca9 	bl	8000210 <__aeabi_uidivmod>
 80008be:	9a03      	ldr	r2, [sp, #12]
 80008c0:	040b      	lsls	r3, r1, #16
 80008c2:	4342      	muls	r2, r0
 80008c4:	0c21      	lsrs	r1, r4, #16
 80008c6:	0005      	movs	r5, r0
 80008c8:	4319      	orrs	r1, r3
 80008ca:	428a      	cmp	r2, r1
 80008cc:	d900      	bls.n	80008d0 <__aeabi_ddiv+0x360>
 80008ce:	e0cb      	b.n	8000a68 <__aeabi_ddiv+0x4f8>
 80008d0:	1a88      	subs	r0, r1, r2
 80008d2:	9902      	ldr	r1, [sp, #8]
 80008d4:	f7ff fc9c 	bl	8000210 <__aeabi_uidivmod>
 80008d8:	9a03      	ldr	r2, [sp, #12]
 80008da:	0424      	lsls	r4, r4, #16
 80008dc:	4342      	muls	r2, r0
 80008de:	0409      	lsls	r1, r1, #16
 80008e0:	0c24      	lsrs	r4, r4, #16
 80008e2:	0003      	movs	r3, r0
 80008e4:	430c      	orrs	r4, r1
 80008e6:	42a2      	cmp	r2, r4
 80008e8:	d900      	bls.n	80008ec <__aeabi_ddiv+0x37c>
 80008ea:	e0ca      	b.n	8000a82 <__aeabi_ddiv+0x512>
 80008ec:	4641      	mov	r1, r8
 80008ee:	1aa4      	subs	r4, r4, r2
 80008f0:	042a      	lsls	r2, r5, #16
 80008f2:	431a      	orrs	r2, r3
 80008f4:	9f04      	ldr	r7, [sp, #16]
 80008f6:	0413      	lsls	r3, r2, #16
 80008f8:	0c1b      	lsrs	r3, r3, #16
 80008fa:	4359      	muls	r1, r3
 80008fc:	4640      	mov	r0, r8
 80008fe:	437b      	muls	r3, r7
 8000900:	469c      	mov	ip, r3
 8000902:	0c15      	lsrs	r5, r2, #16
 8000904:	4368      	muls	r0, r5
 8000906:	0c0b      	lsrs	r3, r1, #16
 8000908:	4484      	add	ip, r0
 800090a:	4463      	add	r3, ip
 800090c:	437d      	muls	r5, r7
 800090e:	4298      	cmp	r0, r3
 8000910:	d903      	bls.n	800091a <__aeabi_ddiv+0x3aa>
 8000912:	2080      	movs	r0, #128	@ 0x80
 8000914:	0240      	lsls	r0, r0, #9
 8000916:	4684      	mov	ip, r0
 8000918:	4465      	add	r5, ip
 800091a:	0c18      	lsrs	r0, r3, #16
 800091c:	0409      	lsls	r1, r1, #16
 800091e:	041b      	lsls	r3, r3, #16
 8000920:	0c09      	lsrs	r1, r1, #16
 8000922:	1940      	adds	r0, r0, r5
 8000924:	185b      	adds	r3, r3, r1
 8000926:	4284      	cmp	r4, r0
 8000928:	d327      	bcc.n	800097a <__aeabi_ddiv+0x40a>
 800092a:	d023      	beq.n	8000974 <__aeabi_ddiv+0x404>
 800092c:	2301      	movs	r3, #1
 800092e:	0035      	movs	r5, r6
 8000930:	431a      	orrs	r2, r3
 8000932:	4b94      	ldr	r3, [pc, #592]	@ (8000b84 <__aeabi_ddiv+0x614>)
 8000934:	4453      	add	r3, sl
 8000936:	2b00      	cmp	r3, #0
 8000938:	dd60      	ble.n	80009fc <__aeabi_ddiv+0x48c>
 800093a:	0751      	lsls	r1, r2, #29
 800093c:	d000      	beq.n	8000940 <__aeabi_ddiv+0x3d0>
 800093e:	e086      	b.n	8000a4e <__aeabi_ddiv+0x4de>
 8000940:	002e      	movs	r6, r5
 8000942:	08d1      	lsrs	r1, r2, #3
 8000944:	465a      	mov	r2, fp
 8000946:	01d2      	lsls	r2, r2, #7
 8000948:	d506      	bpl.n	8000958 <__aeabi_ddiv+0x3e8>
 800094a:	465a      	mov	r2, fp
 800094c:	4b8e      	ldr	r3, [pc, #568]	@ (8000b88 <__aeabi_ddiv+0x618>)
 800094e:	401a      	ands	r2, r3
 8000950:	2380      	movs	r3, #128	@ 0x80
 8000952:	4693      	mov	fp, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	4453      	add	r3, sl
 8000958:	4a8c      	ldr	r2, [pc, #560]	@ (8000b8c <__aeabi_ddiv+0x61c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	dd00      	ble.n	8000960 <__aeabi_ddiv+0x3f0>
 800095e:	e680      	b.n	8000662 <__aeabi_ddiv+0xf2>
 8000960:	465a      	mov	r2, fp
 8000962:	0752      	lsls	r2, r2, #29
 8000964:	430a      	orrs	r2, r1
 8000966:	4690      	mov	r8, r2
 8000968:	465a      	mov	r2, fp
 800096a:	055b      	lsls	r3, r3, #21
 800096c:	0254      	lsls	r4, r2, #9
 800096e:	0b24      	lsrs	r4, r4, #12
 8000970:	0d5b      	lsrs	r3, r3, #21
 8000972:	e669      	b.n	8000648 <__aeabi_ddiv+0xd8>
 8000974:	0035      	movs	r5, r6
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0db      	beq.n	8000932 <__aeabi_ddiv+0x3c2>
 800097a:	9d00      	ldr	r5, [sp, #0]
 800097c:	1e51      	subs	r1, r2, #1
 800097e:	46ac      	mov	ip, r5
 8000980:	4464      	add	r4, ip
 8000982:	42ac      	cmp	r4, r5
 8000984:	d200      	bcs.n	8000988 <__aeabi_ddiv+0x418>
 8000986:	e09e      	b.n	8000ac6 <__aeabi_ddiv+0x556>
 8000988:	4284      	cmp	r4, r0
 800098a:	d200      	bcs.n	800098e <__aeabi_ddiv+0x41e>
 800098c:	e0e1      	b.n	8000b52 <__aeabi_ddiv+0x5e2>
 800098e:	d100      	bne.n	8000992 <__aeabi_ddiv+0x422>
 8000990:	e0ee      	b.n	8000b70 <__aeabi_ddiv+0x600>
 8000992:	000a      	movs	r2, r1
 8000994:	e7ca      	b.n	800092c <__aeabi_ddiv+0x3bc>
 8000996:	4542      	cmp	r2, r8
 8000998:	d900      	bls.n	800099c <__aeabi_ddiv+0x42c>
 800099a:	e708      	b.n	80007ae <__aeabi_ddiv+0x23e>
 800099c:	464b      	mov	r3, r9
 800099e:	07dc      	lsls	r4, r3, #31
 80009a0:	0858      	lsrs	r0, r3, #1
 80009a2:	4643      	mov	r3, r8
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	431c      	orrs	r4, r3
 80009a8:	4643      	mov	r3, r8
 80009aa:	07dd      	lsls	r5, r3, #31
 80009ac:	e706      	b.n	80007bc <__aeabi_ddiv+0x24c>
 80009ae:	f001 f8df 	bl	8001b70 <__clzsi2>
 80009b2:	2315      	movs	r3, #21
 80009b4:	469c      	mov	ip, r3
 80009b6:	4484      	add	ip, r0
 80009b8:	0002      	movs	r2, r0
 80009ba:	4663      	mov	r3, ip
 80009bc:	3220      	adds	r2, #32
 80009be:	2b1c      	cmp	r3, #28
 80009c0:	dc00      	bgt.n	80009c4 <__aeabi_ddiv+0x454>
 80009c2:	e692      	b.n	80006ea <__aeabi_ddiv+0x17a>
 80009c4:	0023      	movs	r3, r4
 80009c6:	3808      	subs	r0, #8
 80009c8:	4083      	lsls	r3, r0
 80009ca:	4699      	mov	r9, r3
 80009cc:	2300      	movs	r3, #0
 80009ce:	4698      	mov	r8, r3
 80009d0:	e69a      	b.n	8000708 <__aeabi_ddiv+0x198>
 80009d2:	f001 f8cd 	bl	8001b70 <__clzsi2>
 80009d6:	0002      	movs	r2, r0
 80009d8:	0003      	movs	r3, r0
 80009da:	3215      	adds	r2, #21
 80009dc:	3320      	adds	r3, #32
 80009de:	2a1c      	cmp	r2, #28
 80009e0:	dc00      	bgt.n	80009e4 <__aeabi_ddiv+0x474>
 80009e2:	e65f      	b.n	80006a4 <__aeabi_ddiv+0x134>
 80009e4:	9900      	ldr	r1, [sp, #0]
 80009e6:	3808      	subs	r0, #8
 80009e8:	4081      	lsls	r1, r0
 80009ea:	2200      	movs	r2, #0
 80009ec:	468b      	mov	fp, r1
 80009ee:	e666      	b.n	80006be <__aeabi_ddiv+0x14e>
 80009f0:	2200      	movs	r2, #0
 80009f2:	002e      	movs	r6, r5
 80009f4:	2400      	movs	r4, #0
 80009f6:	4690      	mov	r8, r2
 80009f8:	4b65      	ldr	r3, [pc, #404]	@ (8000b90 <__aeabi_ddiv+0x620>)
 80009fa:	e625      	b.n	8000648 <__aeabi_ddiv+0xd8>
 80009fc:	002e      	movs	r6, r5
 80009fe:	2101      	movs	r1, #1
 8000a00:	1ac9      	subs	r1, r1, r3
 8000a02:	2938      	cmp	r1, #56	@ 0x38
 8000a04:	dd00      	ble.n	8000a08 <__aeabi_ddiv+0x498>
 8000a06:	e61b      	b.n	8000640 <__aeabi_ddiv+0xd0>
 8000a08:	291f      	cmp	r1, #31
 8000a0a:	dc7e      	bgt.n	8000b0a <__aeabi_ddiv+0x59a>
 8000a0c:	4861      	ldr	r0, [pc, #388]	@ (8000b94 <__aeabi_ddiv+0x624>)
 8000a0e:	0014      	movs	r4, r2
 8000a10:	4450      	add	r0, sl
 8000a12:	465b      	mov	r3, fp
 8000a14:	4082      	lsls	r2, r0
 8000a16:	4083      	lsls	r3, r0
 8000a18:	40cc      	lsrs	r4, r1
 8000a1a:	1e50      	subs	r0, r2, #1
 8000a1c:	4182      	sbcs	r2, r0
 8000a1e:	4323      	orrs	r3, r4
 8000a20:	431a      	orrs	r2, r3
 8000a22:	465b      	mov	r3, fp
 8000a24:	40cb      	lsrs	r3, r1
 8000a26:	0751      	lsls	r1, r2, #29
 8000a28:	d009      	beq.n	8000a3e <__aeabi_ddiv+0x4ce>
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	4011      	ands	r1, r2
 8000a2e:	2904      	cmp	r1, #4
 8000a30:	d005      	beq.n	8000a3e <__aeabi_ddiv+0x4ce>
 8000a32:	1d11      	adds	r1, r2, #4
 8000a34:	4291      	cmp	r1, r2
 8000a36:	4192      	sbcs	r2, r2
 8000a38:	4252      	negs	r2, r2
 8000a3a:	189b      	adds	r3, r3, r2
 8000a3c:	000a      	movs	r2, r1
 8000a3e:	0219      	lsls	r1, r3, #8
 8000a40:	d400      	bmi.n	8000a44 <__aeabi_ddiv+0x4d4>
 8000a42:	e09b      	b.n	8000b7c <__aeabi_ddiv+0x60c>
 8000a44:	2200      	movs	r2, #0
 8000a46:	2301      	movs	r3, #1
 8000a48:	2400      	movs	r4, #0
 8000a4a:	4690      	mov	r8, r2
 8000a4c:	e5fc      	b.n	8000648 <__aeabi_ddiv+0xd8>
 8000a4e:	210f      	movs	r1, #15
 8000a50:	4011      	ands	r1, r2
 8000a52:	2904      	cmp	r1, #4
 8000a54:	d100      	bne.n	8000a58 <__aeabi_ddiv+0x4e8>
 8000a56:	e773      	b.n	8000940 <__aeabi_ddiv+0x3d0>
 8000a58:	1d11      	adds	r1, r2, #4
 8000a5a:	4291      	cmp	r1, r2
 8000a5c:	4192      	sbcs	r2, r2
 8000a5e:	4252      	negs	r2, r2
 8000a60:	002e      	movs	r6, r5
 8000a62:	08c9      	lsrs	r1, r1, #3
 8000a64:	4493      	add	fp, r2
 8000a66:	e76d      	b.n	8000944 <__aeabi_ddiv+0x3d4>
 8000a68:	9b00      	ldr	r3, [sp, #0]
 8000a6a:	3d01      	subs	r5, #1
 8000a6c:	469c      	mov	ip, r3
 8000a6e:	4461      	add	r1, ip
 8000a70:	428b      	cmp	r3, r1
 8000a72:	d900      	bls.n	8000a76 <__aeabi_ddiv+0x506>
 8000a74:	e72c      	b.n	80008d0 <__aeabi_ddiv+0x360>
 8000a76:	428a      	cmp	r2, r1
 8000a78:	d800      	bhi.n	8000a7c <__aeabi_ddiv+0x50c>
 8000a7a:	e729      	b.n	80008d0 <__aeabi_ddiv+0x360>
 8000a7c:	1e85      	subs	r5, r0, #2
 8000a7e:	4461      	add	r1, ip
 8000a80:	e726      	b.n	80008d0 <__aeabi_ddiv+0x360>
 8000a82:	9900      	ldr	r1, [sp, #0]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	468c      	mov	ip, r1
 8000a88:	4464      	add	r4, ip
 8000a8a:	42a1      	cmp	r1, r4
 8000a8c:	d900      	bls.n	8000a90 <__aeabi_ddiv+0x520>
 8000a8e:	e72d      	b.n	80008ec <__aeabi_ddiv+0x37c>
 8000a90:	42a2      	cmp	r2, r4
 8000a92:	d800      	bhi.n	8000a96 <__aeabi_ddiv+0x526>
 8000a94:	e72a      	b.n	80008ec <__aeabi_ddiv+0x37c>
 8000a96:	1e83      	subs	r3, r0, #2
 8000a98:	4464      	add	r4, ip
 8000a9a:	e727      	b.n	80008ec <__aeabi_ddiv+0x37c>
 8000a9c:	4287      	cmp	r7, r0
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_ddiv+0x532>
 8000aa0:	e6fe      	b.n	80008a0 <__aeabi_ddiv+0x330>
 8000aa2:	45a9      	cmp	r9, r5
 8000aa4:	d900      	bls.n	8000aa8 <__aeabi_ddiv+0x538>
 8000aa6:	e6fb      	b.n	80008a0 <__aeabi_ddiv+0x330>
 8000aa8:	e6f5      	b.n	8000896 <__aeabi_ddiv+0x326>
 8000aaa:	42a2      	cmp	r2, r4
 8000aac:	d800      	bhi.n	8000ab0 <__aeabi_ddiv+0x540>
 8000aae:	e6b9      	b.n	8000824 <__aeabi_ddiv+0x2b4>
 8000ab0:	1e83      	subs	r3, r0, #2
 8000ab2:	4464      	add	r4, ip
 8000ab4:	e6b6      	b.n	8000824 <__aeabi_ddiv+0x2b4>
 8000ab6:	428a      	cmp	r2, r1
 8000ab8:	d800      	bhi.n	8000abc <__aeabi_ddiv+0x54c>
 8000aba:	e69f      	b.n	80007fc <__aeabi_ddiv+0x28c>
 8000abc:	46bc      	mov	ip, r7
 8000abe:	1e83      	subs	r3, r0, #2
 8000ac0:	4698      	mov	r8, r3
 8000ac2:	4461      	add	r1, ip
 8000ac4:	e69a      	b.n	80007fc <__aeabi_ddiv+0x28c>
 8000ac6:	000a      	movs	r2, r1
 8000ac8:	4284      	cmp	r4, r0
 8000aca:	d000      	beq.n	8000ace <__aeabi_ddiv+0x55e>
 8000acc:	e72e      	b.n	800092c <__aeabi_ddiv+0x3bc>
 8000ace:	454b      	cmp	r3, r9
 8000ad0:	d000      	beq.n	8000ad4 <__aeabi_ddiv+0x564>
 8000ad2:	e72b      	b.n	800092c <__aeabi_ddiv+0x3bc>
 8000ad4:	0035      	movs	r5, r6
 8000ad6:	e72c      	b.n	8000932 <__aeabi_ddiv+0x3c2>
 8000ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b84 <__aeabi_ddiv+0x614>)
 8000ada:	4a2f      	ldr	r2, [pc, #188]	@ (8000b98 <__aeabi_ddiv+0x628>)
 8000adc:	4453      	add	r3, sl
 8000ade:	4592      	cmp	sl, r2
 8000ae0:	db43      	blt.n	8000b6a <__aeabi_ddiv+0x5fa>
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4493      	add	fp, r2
 8000ae8:	e72c      	b.n	8000944 <__aeabi_ddiv+0x3d4>
 8000aea:	42ac      	cmp	r4, r5
 8000aec:	d800      	bhi.n	8000af0 <__aeabi_ddiv+0x580>
 8000aee:	e6d7      	b.n	80008a0 <__aeabi_ddiv+0x330>
 8000af0:	2302      	movs	r3, #2
 8000af2:	425b      	negs	r3, r3
 8000af4:	469c      	mov	ip, r3
 8000af6:	9900      	ldr	r1, [sp, #0]
 8000af8:	444d      	add	r5, r9
 8000afa:	454d      	cmp	r5, r9
 8000afc:	419b      	sbcs	r3, r3
 8000afe:	44e3      	add	fp, ip
 8000b00:	468c      	mov	ip, r1
 8000b02:	425b      	negs	r3, r3
 8000b04:	4463      	add	r3, ip
 8000b06:	18c0      	adds	r0, r0, r3
 8000b08:	e6cc      	b.n	80008a4 <__aeabi_ddiv+0x334>
 8000b0a:	201f      	movs	r0, #31
 8000b0c:	4240      	negs	r0, r0
 8000b0e:	1ac3      	subs	r3, r0, r3
 8000b10:	4658      	mov	r0, fp
 8000b12:	40d8      	lsrs	r0, r3
 8000b14:	2920      	cmp	r1, #32
 8000b16:	d004      	beq.n	8000b22 <__aeabi_ddiv+0x5b2>
 8000b18:	4659      	mov	r1, fp
 8000b1a:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <__aeabi_ddiv+0x62c>)
 8000b1c:	4453      	add	r3, sl
 8000b1e:	4099      	lsls	r1, r3
 8000b20:	430a      	orrs	r2, r1
 8000b22:	1e53      	subs	r3, r2, #1
 8000b24:	419a      	sbcs	r2, r3
 8000b26:	2307      	movs	r3, #7
 8000b28:	0019      	movs	r1, r3
 8000b2a:	4302      	orrs	r2, r0
 8000b2c:	2400      	movs	r4, #0
 8000b2e:	4011      	ands	r1, r2
 8000b30:	4213      	tst	r3, r2
 8000b32:	d009      	beq.n	8000b48 <__aeabi_ddiv+0x5d8>
 8000b34:	3308      	adds	r3, #8
 8000b36:	4013      	ands	r3, r2
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	d01d      	beq.n	8000b78 <__aeabi_ddiv+0x608>
 8000b3c:	1d13      	adds	r3, r2, #4
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	4189      	sbcs	r1, r1
 8000b42:	001a      	movs	r2, r3
 8000b44:	4249      	negs	r1, r1
 8000b46:	0749      	lsls	r1, r1, #29
 8000b48:	08d2      	lsrs	r2, r2, #3
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	4690      	mov	r8, r2
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e57a      	b.n	8000648 <__aeabi_ddiv+0xd8>
 8000b52:	4649      	mov	r1, r9
 8000b54:	9f00      	ldr	r7, [sp, #0]
 8000b56:	004d      	lsls	r5, r1, #1
 8000b58:	454d      	cmp	r5, r9
 8000b5a:	4189      	sbcs	r1, r1
 8000b5c:	46bc      	mov	ip, r7
 8000b5e:	4249      	negs	r1, r1
 8000b60:	4461      	add	r1, ip
 8000b62:	46a9      	mov	r9, r5
 8000b64:	3a02      	subs	r2, #2
 8000b66:	1864      	adds	r4, r4, r1
 8000b68:	e7ae      	b.n	8000ac8 <__aeabi_ddiv+0x558>
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4252      	negs	r2, r2
 8000b6e:	e746      	b.n	80009fe <__aeabi_ddiv+0x48e>
 8000b70:	4599      	cmp	r9, r3
 8000b72:	d3ee      	bcc.n	8000b52 <__aeabi_ddiv+0x5e2>
 8000b74:	000a      	movs	r2, r1
 8000b76:	e7aa      	b.n	8000ace <__aeabi_ddiv+0x55e>
 8000b78:	2100      	movs	r1, #0
 8000b7a:	e7e5      	b.n	8000b48 <__aeabi_ddiv+0x5d8>
 8000b7c:	0759      	lsls	r1, r3, #29
 8000b7e:	025b      	lsls	r3, r3, #9
 8000b80:	0b1c      	lsrs	r4, r3, #12
 8000b82:	e7e1      	b.n	8000b48 <__aeabi_ddiv+0x5d8>
 8000b84:	000003ff 	.word	0x000003ff
 8000b88:	feffffff 	.word	0xfeffffff
 8000b8c:	000007fe 	.word	0x000007fe
 8000b90:	000007ff 	.word	0x000007ff
 8000b94:	0000041e 	.word	0x0000041e
 8000b98:	fffffc02 	.word	0xfffffc02
 8000b9c:	0000043e 	.word	0x0000043e

08000ba0 <__aeabi_dmul>:
 8000ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba2:	4657      	mov	r7, sl
 8000ba4:	464e      	mov	r6, r9
 8000ba6:	46de      	mov	lr, fp
 8000ba8:	4645      	mov	r5, r8
 8000baa:	b5e0      	push	{r5, r6, r7, lr}
 8000bac:	001f      	movs	r7, r3
 8000bae:	030b      	lsls	r3, r1, #12
 8000bb0:	0b1b      	lsrs	r3, r3, #12
 8000bb2:	0016      	movs	r6, r2
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	0fca      	lsrs	r2, r1, #31
 8000bb8:	004b      	lsls	r3, r1, #1
 8000bba:	0004      	movs	r4, r0
 8000bbc:	4691      	mov	r9, r2
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	0d5b      	lsrs	r3, r3, #21
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dmul+0x26>
 8000bc4:	e1cf      	b.n	8000f66 <__aeabi_dmul+0x3c6>
 8000bc6:	4acd      	ldr	r2, [pc, #820]	@ (8000efc <__aeabi_dmul+0x35c>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d055      	beq.n	8000c78 <__aeabi_dmul+0xd8>
 8000bcc:	4651      	mov	r1, sl
 8000bce:	0f42      	lsrs	r2, r0, #29
 8000bd0:	00c9      	lsls	r1, r1, #3
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	2180      	movs	r1, #128	@ 0x80
 8000bd6:	0409      	lsls	r1, r1, #16
 8000bd8:	4311      	orrs	r1, r2
 8000bda:	00c2      	lsls	r2, r0, #3
 8000bdc:	4690      	mov	r8, r2
 8000bde:	4ac8      	ldr	r2, [pc, #800]	@ (8000f00 <__aeabi_dmul+0x360>)
 8000be0:	468a      	mov	sl, r1
 8000be2:	4693      	mov	fp, r2
 8000be4:	449b      	add	fp, r3
 8000be6:	2300      	movs	r3, #0
 8000be8:	2500      	movs	r5, #0
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	033c      	lsls	r4, r7, #12
 8000bee:	007b      	lsls	r3, r7, #1
 8000bf0:	0ffa      	lsrs	r2, r7, #31
 8000bf2:	9601      	str	r6, [sp, #4]
 8000bf4:	0b24      	lsrs	r4, r4, #12
 8000bf6:	0d5b      	lsrs	r3, r3, #21
 8000bf8:	9200      	str	r2, [sp, #0]
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dmul+0x5e>
 8000bfc:	e188      	b.n	8000f10 <__aeabi_dmul+0x370>
 8000bfe:	4abf      	ldr	r2, [pc, #764]	@ (8000efc <__aeabi_dmul+0x35c>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dmul+0x66>
 8000c04:	e092      	b.n	8000d2c <__aeabi_dmul+0x18c>
 8000c06:	4abe      	ldr	r2, [pc, #760]	@ (8000f00 <__aeabi_dmul+0x360>)
 8000c08:	4694      	mov	ip, r2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	449b      	add	fp, r3
 8000c0e:	2d0a      	cmp	r5, #10
 8000c10:	dc42      	bgt.n	8000c98 <__aeabi_dmul+0xf8>
 8000c12:	00e4      	lsls	r4, r4, #3
 8000c14:	0f73      	lsrs	r3, r6, #29
 8000c16:	4323      	orrs	r3, r4
 8000c18:	2480      	movs	r4, #128	@ 0x80
 8000c1a:	4649      	mov	r1, r9
 8000c1c:	0424      	lsls	r4, r4, #16
 8000c1e:	431c      	orrs	r4, r3
 8000c20:	00f3      	lsls	r3, r6, #3
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	9b00      	ldr	r3, [sp, #0]
 8000c26:	2000      	movs	r0, #0
 8000c28:	4059      	eors	r1, r3
 8000c2a:	b2cb      	uxtb	r3, r1
 8000c2c:	9303      	str	r3, [sp, #12]
 8000c2e:	2d02      	cmp	r5, #2
 8000c30:	dc00      	bgt.n	8000c34 <__aeabi_dmul+0x94>
 8000c32:	e094      	b.n	8000d5e <__aeabi_dmul+0x1be>
 8000c34:	2301      	movs	r3, #1
 8000c36:	40ab      	lsls	r3, r5
 8000c38:	001d      	movs	r5, r3
 8000c3a:	23a6      	movs	r3, #166	@ 0xa6
 8000c3c:	002a      	movs	r2, r5
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	401a      	ands	r2, r3
 8000c42:	421d      	tst	r5, r3
 8000c44:	d000      	beq.n	8000c48 <__aeabi_dmul+0xa8>
 8000c46:	e229      	b.n	800109c <__aeabi_dmul+0x4fc>
 8000c48:	2390      	movs	r3, #144	@ 0x90
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	421d      	tst	r5, r3
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dmul+0xb2>
 8000c50:	e24d      	b.n	80010ee <__aeabi_dmul+0x54e>
 8000c52:	2300      	movs	r3, #0
 8000c54:	2480      	movs	r4, #128	@ 0x80
 8000c56:	4699      	mov	r9, r3
 8000c58:	0324      	lsls	r4, r4, #12
 8000c5a:	4ba8      	ldr	r3, [pc, #672]	@ (8000efc <__aeabi_dmul+0x35c>)
 8000c5c:	0010      	movs	r0, r2
 8000c5e:	464a      	mov	r2, r9
 8000c60:	051b      	lsls	r3, r3, #20
 8000c62:	4323      	orrs	r3, r4
 8000c64:	07d2      	lsls	r2, r2, #31
 8000c66:	4313      	orrs	r3, r2
 8000c68:	0019      	movs	r1, r3
 8000c6a:	b005      	add	sp, #20
 8000c6c:	bcf0      	pop	{r4, r5, r6, r7}
 8000c6e:	46bb      	mov	fp, r7
 8000c70:	46b2      	mov	sl, r6
 8000c72:	46a9      	mov	r9, r5
 8000c74:	46a0      	mov	r8, r4
 8000c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c78:	4652      	mov	r2, sl
 8000c7a:	4302      	orrs	r2, r0
 8000c7c:	4690      	mov	r8, r2
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_dmul+0xe2>
 8000c80:	e1ac      	b.n	8000fdc <__aeabi_dmul+0x43c>
 8000c82:	469b      	mov	fp, r3
 8000c84:	2302      	movs	r3, #2
 8000c86:	4692      	mov	sl, r2
 8000c88:	2508      	movs	r5, #8
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	e7ae      	b.n	8000bec <__aeabi_dmul+0x4c>
 8000c8e:	9b00      	ldr	r3, [sp, #0]
 8000c90:	46a2      	mov	sl, r4
 8000c92:	4699      	mov	r9, r3
 8000c94:	9b01      	ldr	r3, [sp, #4]
 8000c96:	4698      	mov	r8, r3
 8000c98:	9b02      	ldr	r3, [sp, #8]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_dmul+0x100>
 8000c9e:	e1ca      	b.n	8001036 <__aeabi_dmul+0x496>
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_dmul+0x106>
 8000ca4:	e192      	b.n	8000fcc <__aeabi_dmul+0x42c>
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d110      	bne.n	8000ccc <__aeabi_dmul+0x12c>
 8000caa:	2300      	movs	r3, #0
 8000cac:	2400      	movs	r4, #0
 8000cae:	2200      	movs	r2, #0
 8000cb0:	e7d4      	b.n	8000c5c <__aeabi_dmul+0xbc>
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	087b      	lsrs	r3, r7, #1
 8000cb6:	403a      	ands	r2, r7
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	4652      	mov	r2, sl
 8000cbc:	07d2      	lsls	r2, r2, #31
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	4653      	mov	r3, sl
 8000cc4:	085b      	lsrs	r3, r3, #1
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	9b03      	ldr	r3, [sp, #12]
 8000cca:	4699      	mov	r9, r3
 8000ccc:	465b      	mov	r3, fp
 8000cce:	1c58      	adds	r0, r3, #1
 8000cd0:	2380      	movs	r3, #128	@ 0x80
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	445b      	add	r3, fp
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	dc00      	bgt.n	8000cdc <__aeabi_dmul+0x13c>
 8000cda:	e1b1      	b.n	8001040 <__aeabi_dmul+0x4a0>
 8000cdc:	4642      	mov	r2, r8
 8000cde:	0752      	lsls	r2, r2, #29
 8000ce0:	d00b      	beq.n	8000cfa <__aeabi_dmul+0x15a>
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	4641      	mov	r1, r8
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	2a04      	cmp	r2, #4
 8000cea:	d006      	beq.n	8000cfa <__aeabi_dmul+0x15a>
 8000cec:	4642      	mov	r2, r8
 8000cee:	1d11      	adds	r1, r2, #4
 8000cf0:	4541      	cmp	r1, r8
 8000cf2:	4192      	sbcs	r2, r2
 8000cf4:	4688      	mov	r8, r1
 8000cf6:	4252      	negs	r2, r2
 8000cf8:	4492      	add	sl, r2
 8000cfa:	4652      	mov	r2, sl
 8000cfc:	01d2      	lsls	r2, r2, #7
 8000cfe:	d506      	bpl.n	8000d0e <__aeabi_dmul+0x16e>
 8000d00:	4652      	mov	r2, sl
 8000d02:	4b80      	ldr	r3, [pc, #512]	@ (8000f04 <__aeabi_dmul+0x364>)
 8000d04:	401a      	ands	r2, r3
 8000d06:	2380      	movs	r3, #128	@ 0x80
 8000d08:	4692      	mov	sl, r2
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	18c3      	adds	r3, r0, r3
 8000d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8000f08 <__aeabi_dmul+0x368>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	dd00      	ble.n	8000d16 <__aeabi_dmul+0x176>
 8000d14:	e18f      	b.n	8001036 <__aeabi_dmul+0x496>
 8000d16:	4642      	mov	r2, r8
 8000d18:	08d1      	lsrs	r1, r2, #3
 8000d1a:	4652      	mov	r2, sl
 8000d1c:	0752      	lsls	r2, r2, #29
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	4651      	mov	r1, sl
 8000d22:	055b      	lsls	r3, r3, #21
 8000d24:	024c      	lsls	r4, r1, #9
 8000d26:	0b24      	lsrs	r4, r4, #12
 8000d28:	0d5b      	lsrs	r3, r3, #21
 8000d2a:	e797      	b.n	8000c5c <__aeabi_dmul+0xbc>
 8000d2c:	4b73      	ldr	r3, [pc, #460]	@ (8000efc <__aeabi_dmul+0x35c>)
 8000d2e:	4326      	orrs	r6, r4
 8000d30:	469c      	mov	ip, r3
 8000d32:	44e3      	add	fp, ip
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d100      	bne.n	8000d3a <__aeabi_dmul+0x19a>
 8000d38:	e16f      	b.n	800101a <__aeabi_dmul+0x47a>
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	4649      	mov	r1, r9
 8000d3e:	431d      	orrs	r5, r3
 8000d40:	9b00      	ldr	r3, [sp, #0]
 8000d42:	4059      	eors	r1, r3
 8000d44:	b2cb      	uxtb	r3, r1
 8000d46:	9303      	str	r3, [sp, #12]
 8000d48:	2d0a      	cmp	r5, #10
 8000d4a:	dd00      	ble.n	8000d4e <__aeabi_dmul+0x1ae>
 8000d4c:	e133      	b.n	8000fb6 <__aeabi_dmul+0x416>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	40ab      	lsls	r3, r5
 8000d52:	001d      	movs	r5, r3
 8000d54:	2303      	movs	r3, #3
 8000d56:	9302      	str	r3, [sp, #8]
 8000d58:	2288      	movs	r2, #136	@ 0x88
 8000d5a:	422a      	tst	r2, r5
 8000d5c:	d197      	bne.n	8000c8e <__aeabi_dmul+0xee>
 8000d5e:	4642      	mov	r2, r8
 8000d60:	4643      	mov	r3, r8
 8000d62:	0412      	lsls	r2, r2, #16
 8000d64:	0c12      	lsrs	r2, r2, #16
 8000d66:	0016      	movs	r6, r2
 8000d68:	9801      	ldr	r0, [sp, #4]
 8000d6a:	0c1d      	lsrs	r5, r3, #16
 8000d6c:	0c03      	lsrs	r3, r0, #16
 8000d6e:	0400      	lsls	r0, r0, #16
 8000d70:	0c00      	lsrs	r0, r0, #16
 8000d72:	4346      	muls	r6, r0
 8000d74:	46b4      	mov	ip, r6
 8000d76:	001e      	movs	r6, r3
 8000d78:	436e      	muls	r6, r5
 8000d7a:	9600      	str	r6, [sp, #0]
 8000d7c:	0016      	movs	r6, r2
 8000d7e:	0007      	movs	r7, r0
 8000d80:	435e      	muls	r6, r3
 8000d82:	4661      	mov	r1, ip
 8000d84:	46b0      	mov	r8, r6
 8000d86:	436f      	muls	r7, r5
 8000d88:	0c0e      	lsrs	r6, r1, #16
 8000d8a:	44b8      	add	r8, r7
 8000d8c:	4446      	add	r6, r8
 8000d8e:	42b7      	cmp	r7, r6
 8000d90:	d905      	bls.n	8000d9e <__aeabi_dmul+0x1fe>
 8000d92:	2180      	movs	r1, #128	@ 0x80
 8000d94:	0249      	lsls	r1, r1, #9
 8000d96:	4688      	mov	r8, r1
 8000d98:	9f00      	ldr	r7, [sp, #0]
 8000d9a:	4447      	add	r7, r8
 8000d9c:	9700      	str	r7, [sp, #0]
 8000d9e:	4661      	mov	r1, ip
 8000da0:	0409      	lsls	r1, r1, #16
 8000da2:	0c09      	lsrs	r1, r1, #16
 8000da4:	0c37      	lsrs	r7, r6, #16
 8000da6:	0436      	lsls	r6, r6, #16
 8000da8:	468c      	mov	ip, r1
 8000daa:	0031      	movs	r1, r6
 8000dac:	4461      	add	r1, ip
 8000dae:	9101      	str	r1, [sp, #4]
 8000db0:	0011      	movs	r1, r2
 8000db2:	0c26      	lsrs	r6, r4, #16
 8000db4:	0424      	lsls	r4, r4, #16
 8000db6:	0c24      	lsrs	r4, r4, #16
 8000db8:	4361      	muls	r1, r4
 8000dba:	468c      	mov	ip, r1
 8000dbc:	0021      	movs	r1, r4
 8000dbe:	4369      	muls	r1, r5
 8000dc0:	4689      	mov	r9, r1
 8000dc2:	4661      	mov	r1, ip
 8000dc4:	0c09      	lsrs	r1, r1, #16
 8000dc6:	4688      	mov	r8, r1
 8000dc8:	4372      	muls	r2, r6
 8000dca:	444a      	add	r2, r9
 8000dcc:	4442      	add	r2, r8
 8000dce:	4375      	muls	r5, r6
 8000dd0:	4591      	cmp	r9, r2
 8000dd2:	d903      	bls.n	8000ddc <__aeabi_dmul+0x23c>
 8000dd4:	2180      	movs	r1, #128	@ 0x80
 8000dd6:	0249      	lsls	r1, r1, #9
 8000dd8:	4688      	mov	r8, r1
 8000dda:	4445      	add	r5, r8
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	4688      	mov	r8, r1
 8000de0:	4661      	mov	r1, ip
 8000de2:	0409      	lsls	r1, r1, #16
 8000de4:	0c09      	lsrs	r1, r1, #16
 8000de6:	468c      	mov	ip, r1
 8000de8:	0412      	lsls	r2, r2, #16
 8000dea:	4462      	add	r2, ip
 8000dec:	18b9      	adds	r1, r7, r2
 8000dee:	9102      	str	r1, [sp, #8]
 8000df0:	4651      	mov	r1, sl
 8000df2:	0c09      	lsrs	r1, r1, #16
 8000df4:	468c      	mov	ip, r1
 8000df6:	4651      	mov	r1, sl
 8000df8:	040f      	lsls	r7, r1, #16
 8000dfa:	0c3f      	lsrs	r7, r7, #16
 8000dfc:	0039      	movs	r1, r7
 8000dfe:	4341      	muls	r1, r0
 8000e00:	4445      	add	r5, r8
 8000e02:	4688      	mov	r8, r1
 8000e04:	4661      	mov	r1, ip
 8000e06:	4341      	muls	r1, r0
 8000e08:	468a      	mov	sl, r1
 8000e0a:	4641      	mov	r1, r8
 8000e0c:	4660      	mov	r0, ip
 8000e0e:	0c09      	lsrs	r1, r1, #16
 8000e10:	4689      	mov	r9, r1
 8000e12:	4358      	muls	r0, r3
 8000e14:	437b      	muls	r3, r7
 8000e16:	4453      	add	r3, sl
 8000e18:	444b      	add	r3, r9
 8000e1a:	459a      	cmp	sl, r3
 8000e1c:	d903      	bls.n	8000e26 <__aeabi_dmul+0x286>
 8000e1e:	2180      	movs	r1, #128	@ 0x80
 8000e20:	0249      	lsls	r1, r1, #9
 8000e22:	4689      	mov	r9, r1
 8000e24:	4448      	add	r0, r9
 8000e26:	0c19      	lsrs	r1, r3, #16
 8000e28:	4689      	mov	r9, r1
 8000e2a:	4641      	mov	r1, r8
 8000e2c:	0409      	lsls	r1, r1, #16
 8000e2e:	0c09      	lsrs	r1, r1, #16
 8000e30:	4688      	mov	r8, r1
 8000e32:	0039      	movs	r1, r7
 8000e34:	4361      	muls	r1, r4
 8000e36:	041b      	lsls	r3, r3, #16
 8000e38:	4443      	add	r3, r8
 8000e3a:	4688      	mov	r8, r1
 8000e3c:	4661      	mov	r1, ip
 8000e3e:	434c      	muls	r4, r1
 8000e40:	4371      	muls	r1, r6
 8000e42:	468c      	mov	ip, r1
 8000e44:	4641      	mov	r1, r8
 8000e46:	4377      	muls	r7, r6
 8000e48:	0c0e      	lsrs	r6, r1, #16
 8000e4a:	193f      	adds	r7, r7, r4
 8000e4c:	19f6      	adds	r6, r6, r7
 8000e4e:	4448      	add	r0, r9
 8000e50:	42b4      	cmp	r4, r6
 8000e52:	d903      	bls.n	8000e5c <__aeabi_dmul+0x2bc>
 8000e54:	2180      	movs	r1, #128	@ 0x80
 8000e56:	0249      	lsls	r1, r1, #9
 8000e58:	4689      	mov	r9, r1
 8000e5a:	44cc      	add	ip, r9
 8000e5c:	9902      	ldr	r1, [sp, #8]
 8000e5e:	9f00      	ldr	r7, [sp, #0]
 8000e60:	4689      	mov	r9, r1
 8000e62:	0431      	lsls	r1, r6, #16
 8000e64:	444f      	add	r7, r9
 8000e66:	4689      	mov	r9, r1
 8000e68:	4641      	mov	r1, r8
 8000e6a:	4297      	cmp	r7, r2
 8000e6c:	4192      	sbcs	r2, r2
 8000e6e:	040c      	lsls	r4, r1, #16
 8000e70:	0c24      	lsrs	r4, r4, #16
 8000e72:	444c      	add	r4, r9
 8000e74:	18ff      	adds	r7, r7, r3
 8000e76:	4252      	negs	r2, r2
 8000e78:	1964      	adds	r4, r4, r5
 8000e7a:	18a1      	adds	r1, r4, r2
 8000e7c:	429f      	cmp	r7, r3
 8000e7e:	419b      	sbcs	r3, r3
 8000e80:	4688      	mov	r8, r1
 8000e82:	4682      	mov	sl, r0
 8000e84:	425b      	negs	r3, r3
 8000e86:	4699      	mov	r9, r3
 8000e88:	4590      	cmp	r8, r2
 8000e8a:	4192      	sbcs	r2, r2
 8000e8c:	42ac      	cmp	r4, r5
 8000e8e:	41a4      	sbcs	r4, r4
 8000e90:	44c2      	add	sl, r8
 8000e92:	44d1      	add	r9, sl
 8000e94:	4252      	negs	r2, r2
 8000e96:	4264      	negs	r4, r4
 8000e98:	4314      	orrs	r4, r2
 8000e9a:	4599      	cmp	r9, r3
 8000e9c:	419b      	sbcs	r3, r3
 8000e9e:	4582      	cmp	sl, r0
 8000ea0:	4192      	sbcs	r2, r2
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	4252      	negs	r2, r2
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	464a      	mov	r2, r9
 8000eaa:	0c36      	lsrs	r6, r6, #16
 8000eac:	19a4      	adds	r4, r4, r6
 8000eae:	18e3      	adds	r3, r4, r3
 8000eb0:	4463      	add	r3, ip
 8000eb2:	025b      	lsls	r3, r3, #9
 8000eb4:	0dd2      	lsrs	r2, r2, #23
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	9901      	ldr	r1, [sp, #4]
 8000eba:	4692      	mov	sl, r2
 8000ebc:	027a      	lsls	r2, r7, #9
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	1e50      	subs	r0, r2, #1
 8000ec2:	4182      	sbcs	r2, r0
 8000ec4:	0dff      	lsrs	r7, r7, #23
 8000ec6:	4317      	orrs	r7, r2
 8000ec8:	464a      	mov	r2, r9
 8000eca:	0252      	lsls	r2, r2, #9
 8000ecc:	4317      	orrs	r7, r2
 8000ece:	46b8      	mov	r8, r7
 8000ed0:	01db      	lsls	r3, r3, #7
 8000ed2:	d500      	bpl.n	8000ed6 <__aeabi_dmul+0x336>
 8000ed4:	e6ed      	b.n	8000cb2 <__aeabi_dmul+0x112>
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <__aeabi_dmul+0x36c>)
 8000ed8:	9a03      	ldr	r2, [sp, #12]
 8000eda:	445b      	add	r3, fp
 8000edc:	4691      	mov	r9, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	dc00      	bgt.n	8000ee4 <__aeabi_dmul+0x344>
 8000ee2:	e0ac      	b.n	800103e <__aeabi_dmul+0x49e>
 8000ee4:	003a      	movs	r2, r7
 8000ee6:	0752      	lsls	r2, r2, #29
 8000ee8:	d100      	bne.n	8000eec <__aeabi_dmul+0x34c>
 8000eea:	e710      	b.n	8000d0e <__aeabi_dmul+0x16e>
 8000eec:	220f      	movs	r2, #15
 8000eee:	4658      	mov	r0, fp
 8000ef0:	403a      	ands	r2, r7
 8000ef2:	2a04      	cmp	r2, #4
 8000ef4:	d000      	beq.n	8000ef8 <__aeabi_dmul+0x358>
 8000ef6:	e6f9      	b.n	8000cec <__aeabi_dmul+0x14c>
 8000ef8:	e709      	b.n	8000d0e <__aeabi_dmul+0x16e>
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	000007ff 	.word	0x000007ff
 8000f00:	fffffc01 	.word	0xfffffc01
 8000f04:	feffffff 	.word	0xfeffffff
 8000f08:	000007fe 	.word	0x000007fe
 8000f0c:	000003ff 	.word	0x000003ff
 8000f10:	0022      	movs	r2, r4
 8000f12:	4332      	orrs	r2, r6
 8000f14:	d06f      	beq.n	8000ff6 <__aeabi_dmul+0x456>
 8000f16:	2c00      	cmp	r4, #0
 8000f18:	d100      	bne.n	8000f1c <__aeabi_dmul+0x37c>
 8000f1a:	e0c2      	b.n	80010a2 <__aeabi_dmul+0x502>
 8000f1c:	0020      	movs	r0, r4
 8000f1e:	f000 fe27 	bl	8001b70 <__clzsi2>
 8000f22:	0002      	movs	r2, r0
 8000f24:	0003      	movs	r3, r0
 8000f26:	3a0b      	subs	r2, #11
 8000f28:	201d      	movs	r0, #29
 8000f2a:	1a82      	subs	r2, r0, r2
 8000f2c:	0030      	movs	r0, r6
 8000f2e:	0019      	movs	r1, r3
 8000f30:	40d0      	lsrs	r0, r2
 8000f32:	3908      	subs	r1, #8
 8000f34:	408c      	lsls	r4, r1
 8000f36:	0002      	movs	r2, r0
 8000f38:	4322      	orrs	r2, r4
 8000f3a:	0034      	movs	r4, r6
 8000f3c:	408c      	lsls	r4, r1
 8000f3e:	4659      	mov	r1, fp
 8000f40:	1acb      	subs	r3, r1, r3
 8000f42:	4986      	ldr	r1, [pc, #536]	@ (800115c <__aeabi_dmul+0x5bc>)
 8000f44:	468b      	mov	fp, r1
 8000f46:	449b      	add	fp, r3
 8000f48:	2d0a      	cmp	r5, #10
 8000f4a:	dd00      	ble.n	8000f4e <__aeabi_dmul+0x3ae>
 8000f4c:	e6a4      	b.n	8000c98 <__aeabi_dmul+0xf8>
 8000f4e:	4649      	mov	r1, r9
 8000f50:	9b00      	ldr	r3, [sp, #0]
 8000f52:	9401      	str	r4, [sp, #4]
 8000f54:	4059      	eors	r1, r3
 8000f56:	b2cb      	uxtb	r3, r1
 8000f58:	0014      	movs	r4, r2
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	9303      	str	r3, [sp, #12]
 8000f5e:	2d02      	cmp	r5, #2
 8000f60:	dd00      	ble.n	8000f64 <__aeabi_dmul+0x3c4>
 8000f62:	e667      	b.n	8000c34 <__aeabi_dmul+0x94>
 8000f64:	e6fb      	b.n	8000d5e <__aeabi_dmul+0x1be>
 8000f66:	4653      	mov	r3, sl
 8000f68:	4303      	orrs	r3, r0
 8000f6a:	4698      	mov	r8, r3
 8000f6c:	d03c      	beq.n	8000fe8 <__aeabi_dmul+0x448>
 8000f6e:	4653      	mov	r3, sl
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dmul+0x3d6>
 8000f74:	e0a3      	b.n	80010be <__aeabi_dmul+0x51e>
 8000f76:	4650      	mov	r0, sl
 8000f78:	f000 fdfa 	bl	8001b70 <__clzsi2>
 8000f7c:	230b      	movs	r3, #11
 8000f7e:	425b      	negs	r3, r3
 8000f80:	469c      	mov	ip, r3
 8000f82:	0002      	movs	r2, r0
 8000f84:	4484      	add	ip, r0
 8000f86:	0011      	movs	r1, r2
 8000f88:	4650      	mov	r0, sl
 8000f8a:	3908      	subs	r1, #8
 8000f8c:	4088      	lsls	r0, r1
 8000f8e:	231d      	movs	r3, #29
 8000f90:	4680      	mov	r8, r0
 8000f92:	4660      	mov	r0, ip
 8000f94:	1a1b      	subs	r3, r3, r0
 8000f96:	0020      	movs	r0, r4
 8000f98:	40d8      	lsrs	r0, r3
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	4640      	mov	r0, r8
 8000f9e:	4303      	orrs	r3, r0
 8000fa0:	469a      	mov	sl, r3
 8000fa2:	0023      	movs	r3, r4
 8000fa4:	408b      	lsls	r3, r1
 8000fa6:	4698      	mov	r8, r3
 8000fa8:	4b6c      	ldr	r3, [pc, #432]	@ (800115c <__aeabi_dmul+0x5bc>)
 8000faa:	2500      	movs	r5, #0
 8000fac:	1a9b      	subs	r3, r3, r2
 8000fae:	469b      	mov	fp, r3
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	e61a      	b.n	8000bec <__aeabi_dmul+0x4c>
 8000fb6:	2d0f      	cmp	r5, #15
 8000fb8:	d000      	beq.n	8000fbc <__aeabi_dmul+0x41c>
 8000fba:	e0c9      	b.n	8001150 <__aeabi_dmul+0x5b0>
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	4652      	mov	r2, sl
 8000fc0:	031b      	lsls	r3, r3, #12
 8000fc2:	421a      	tst	r2, r3
 8000fc4:	d002      	beq.n	8000fcc <__aeabi_dmul+0x42c>
 8000fc6:	421c      	tst	r4, r3
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_dmul+0x42c>
 8000fca:	e092      	b.n	80010f2 <__aeabi_dmul+0x552>
 8000fcc:	2480      	movs	r4, #128	@ 0x80
 8000fce:	4653      	mov	r3, sl
 8000fd0:	0324      	lsls	r4, r4, #12
 8000fd2:	431c      	orrs	r4, r3
 8000fd4:	0324      	lsls	r4, r4, #12
 8000fd6:	4642      	mov	r2, r8
 8000fd8:	0b24      	lsrs	r4, r4, #12
 8000fda:	e63e      	b.n	8000c5a <__aeabi_dmul+0xba>
 8000fdc:	469b      	mov	fp, r3
 8000fde:	2303      	movs	r3, #3
 8000fe0:	4680      	mov	r8, r0
 8000fe2:	250c      	movs	r5, #12
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	e601      	b.n	8000bec <__aeabi_dmul+0x4c>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	469a      	mov	sl, r3
 8000fec:	469b      	mov	fp, r3
 8000fee:	3301      	adds	r3, #1
 8000ff0:	2504      	movs	r5, #4
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	e5fa      	b.n	8000bec <__aeabi_dmul+0x4c>
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	430d      	orrs	r5, r1
 8000ffa:	2d0a      	cmp	r5, #10
 8000ffc:	dd00      	ble.n	8001000 <__aeabi_dmul+0x460>
 8000ffe:	e64b      	b.n	8000c98 <__aeabi_dmul+0xf8>
 8001000:	4649      	mov	r1, r9
 8001002:	9800      	ldr	r0, [sp, #0]
 8001004:	4041      	eors	r1, r0
 8001006:	b2c9      	uxtb	r1, r1
 8001008:	9103      	str	r1, [sp, #12]
 800100a:	2d02      	cmp	r5, #2
 800100c:	dc00      	bgt.n	8001010 <__aeabi_dmul+0x470>
 800100e:	e096      	b.n	800113e <__aeabi_dmul+0x59e>
 8001010:	2300      	movs	r3, #0
 8001012:	2400      	movs	r4, #0
 8001014:	2001      	movs	r0, #1
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	e60c      	b.n	8000c34 <__aeabi_dmul+0x94>
 800101a:	4649      	mov	r1, r9
 800101c:	2302      	movs	r3, #2
 800101e:	9a00      	ldr	r2, [sp, #0]
 8001020:	432b      	orrs	r3, r5
 8001022:	4051      	eors	r1, r2
 8001024:	b2ca      	uxtb	r2, r1
 8001026:	9203      	str	r2, [sp, #12]
 8001028:	2b0a      	cmp	r3, #10
 800102a:	dd00      	ble.n	800102e <__aeabi_dmul+0x48e>
 800102c:	e634      	b.n	8000c98 <__aeabi_dmul+0xf8>
 800102e:	2d00      	cmp	r5, #0
 8001030:	d157      	bne.n	80010e2 <__aeabi_dmul+0x542>
 8001032:	9b03      	ldr	r3, [sp, #12]
 8001034:	4699      	mov	r9, r3
 8001036:	2400      	movs	r4, #0
 8001038:	2200      	movs	r2, #0
 800103a:	4b49      	ldr	r3, [pc, #292]	@ (8001160 <__aeabi_dmul+0x5c0>)
 800103c:	e60e      	b.n	8000c5c <__aeabi_dmul+0xbc>
 800103e:	4658      	mov	r0, fp
 8001040:	2101      	movs	r1, #1
 8001042:	1ac9      	subs	r1, r1, r3
 8001044:	2938      	cmp	r1, #56	@ 0x38
 8001046:	dd00      	ble.n	800104a <__aeabi_dmul+0x4aa>
 8001048:	e62f      	b.n	8000caa <__aeabi_dmul+0x10a>
 800104a:	291f      	cmp	r1, #31
 800104c:	dd56      	ble.n	80010fc <__aeabi_dmul+0x55c>
 800104e:	221f      	movs	r2, #31
 8001050:	4654      	mov	r4, sl
 8001052:	4252      	negs	r2, r2
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	40dc      	lsrs	r4, r3
 8001058:	2920      	cmp	r1, #32
 800105a:	d007      	beq.n	800106c <__aeabi_dmul+0x4cc>
 800105c:	4b41      	ldr	r3, [pc, #260]	@ (8001164 <__aeabi_dmul+0x5c4>)
 800105e:	4642      	mov	r2, r8
 8001060:	469c      	mov	ip, r3
 8001062:	4653      	mov	r3, sl
 8001064:	4460      	add	r0, ip
 8001066:	4083      	lsls	r3, r0
 8001068:	431a      	orrs	r2, r3
 800106a:	4690      	mov	r8, r2
 800106c:	4642      	mov	r2, r8
 800106e:	2107      	movs	r1, #7
 8001070:	1e53      	subs	r3, r2, #1
 8001072:	419a      	sbcs	r2, r3
 8001074:	000b      	movs	r3, r1
 8001076:	4322      	orrs	r2, r4
 8001078:	4013      	ands	r3, r2
 800107a:	2400      	movs	r4, #0
 800107c:	4211      	tst	r1, r2
 800107e:	d009      	beq.n	8001094 <__aeabi_dmul+0x4f4>
 8001080:	230f      	movs	r3, #15
 8001082:	4013      	ands	r3, r2
 8001084:	2b04      	cmp	r3, #4
 8001086:	d05d      	beq.n	8001144 <__aeabi_dmul+0x5a4>
 8001088:	1d11      	adds	r1, r2, #4
 800108a:	4291      	cmp	r1, r2
 800108c:	419b      	sbcs	r3, r3
 800108e:	000a      	movs	r2, r1
 8001090:	425b      	negs	r3, r3
 8001092:	075b      	lsls	r3, r3, #29
 8001094:	08d2      	lsrs	r2, r2, #3
 8001096:	431a      	orrs	r2, r3
 8001098:	2300      	movs	r3, #0
 800109a:	e5df      	b.n	8000c5c <__aeabi_dmul+0xbc>
 800109c:	9b03      	ldr	r3, [sp, #12]
 800109e:	4699      	mov	r9, r3
 80010a0:	e5fa      	b.n	8000c98 <__aeabi_dmul+0xf8>
 80010a2:	9801      	ldr	r0, [sp, #4]
 80010a4:	f000 fd64 	bl	8001b70 <__clzsi2>
 80010a8:	0002      	movs	r2, r0
 80010aa:	0003      	movs	r3, r0
 80010ac:	3215      	adds	r2, #21
 80010ae:	3320      	adds	r3, #32
 80010b0:	2a1c      	cmp	r2, #28
 80010b2:	dc00      	bgt.n	80010b6 <__aeabi_dmul+0x516>
 80010b4:	e738      	b.n	8000f28 <__aeabi_dmul+0x388>
 80010b6:	9a01      	ldr	r2, [sp, #4]
 80010b8:	3808      	subs	r0, #8
 80010ba:	4082      	lsls	r2, r0
 80010bc:	e73f      	b.n	8000f3e <__aeabi_dmul+0x39e>
 80010be:	f000 fd57 	bl	8001b70 <__clzsi2>
 80010c2:	2315      	movs	r3, #21
 80010c4:	469c      	mov	ip, r3
 80010c6:	4484      	add	ip, r0
 80010c8:	0002      	movs	r2, r0
 80010ca:	4663      	mov	r3, ip
 80010cc:	3220      	adds	r2, #32
 80010ce:	2b1c      	cmp	r3, #28
 80010d0:	dc00      	bgt.n	80010d4 <__aeabi_dmul+0x534>
 80010d2:	e758      	b.n	8000f86 <__aeabi_dmul+0x3e6>
 80010d4:	2300      	movs	r3, #0
 80010d6:	4698      	mov	r8, r3
 80010d8:	0023      	movs	r3, r4
 80010da:	3808      	subs	r0, #8
 80010dc:	4083      	lsls	r3, r0
 80010de:	469a      	mov	sl, r3
 80010e0:	e762      	b.n	8000fa8 <__aeabi_dmul+0x408>
 80010e2:	001d      	movs	r5, r3
 80010e4:	2300      	movs	r3, #0
 80010e6:	2400      	movs	r4, #0
 80010e8:	2002      	movs	r0, #2
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	e5a2      	b.n	8000c34 <__aeabi_dmul+0x94>
 80010ee:	9002      	str	r0, [sp, #8]
 80010f0:	e632      	b.n	8000d58 <__aeabi_dmul+0x1b8>
 80010f2:	431c      	orrs	r4, r3
 80010f4:	9b00      	ldr	r3, [sp, #0]
 80010f6:	9a01      	ldr	r2, [sp, #4]
 80010f8:	4699      	mov	r9, r3
 80010fa:	e5ae      	b.n	8000c5a <__aeabi_dmul+0xba>
 80010fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <__aeabi_dmul+0x5c8>)
 80010fe:	4652      	mov	r2, sl
 8001100:	18c3      	adds	r3, r0, r3
 8001102:	4640      	mov	r0, r8
 8001104:	409a      	lsls	r2, r3
 8001106:	40c8      	lsrs	r0, r1
 8001108:	4302      	orrs	r2, r0
 800110a:	4640      	mov	r0, r8
 800110c:	4098      	lsls	r0, r3
 800110e:	0003      	movs	r3, r0
 8001110:	1e58      	subs	r0, r3, #1
 8001112:	4183      	sbcs	r3, r0
 8001114:	4654      	mov	r4, sl
 8001116:	431a      	orrs	r2, r3
 8001118:	40cc      	lsrs	r4, r1
 800111a:	0753      	lsls	r3, r2, #29
 800111c:	d009      	beq.n	8001132 <__aeabi_dmul+0x592>
 800111e:	230f      	movs	r3, #15
 8001120:	4013      	ands	r3, r2
 8001122:	2b04      	cmp	r3, #4
 8001124:	d005      	beq.n	8001132 <__aeabi_dmul+0x592>
 8001126:	1d13      	adds	r3, r2, #4
 8001128:	4293      	cmp	r3, r2
 800112a:	4192      	sbcs	r2, r2
 800112c:	4252      	negs	r2, r2
 800112e:	18a4      	adds	r4, r4, r2
 8001130:	001a      	movs	r2, r3
 8001132:	0223      	lsls	r3, r4, #8
 8001134:	d508      	bpl.n	8001148 <__aeabi_dmul+0x5a8>
 8001136:	2301      	movs	r3, #1
 8001138:	2400      	movs	r4, #0
 800113a:	2200      	movs	r2, #0
 800113c:	e58e      	b.n	8000c5c <__aeabi_dmul+0xbc>
 800113e:	4689      	mov	r9, r1
 8001140:	2400      	movs	r4, #0
 8001142:	e58b      	b.n	8000c5c <__aeabi_dmul+0xbc>
 8001144:	2300      	movs	r3, #0
 8001146:	e7a5      	b.n	8001094 <__aeabi_dmul+0x4f4>
 8001148:	0763      	lsls	r3, r4, #29
 800114a:	0264      	lsls	r4, r4, #9
 800114c:	0b24      	lsrs	r4, r4, #12
 800114e:	e7a1      	b.n	8001094 <__aeabi_dmul+0x4f4>
 8001150:	9b00      	ldr	r3, [sp, #0]
 8001152:	46a2      	mov	sl, r4
 8001154:	4699      	mov	r9, r3
 8001156:	9b01      	ldr	r3, [sp, #4]
 8001158:	4698      	mov	r8, r3
 800115a:	e737      	b.n	8000fcc <__aeabi_dmul+0x42c>
 800115c:	fffffc0d 	.word	0xfffffc0d
 8001160:	000007ff 	.word	0x000007ff
 8001164:	0000043e 	.word	0x0000043e
 8001168:	0000041e 	.word	0x0000041e

0800116c <__aeabi_dsub>:
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116e:	4657      	mov	r7, sl
 8001170:	464e      	mov	r6, r9
 8001172:	4645      	mov	r5, r8
 8001174:	46de      	mov	lr, fp
 8001176:	b5e0      	push	{r5, r6, r7, lr}
 8001178:	b083      	sub	sp, #12
 800117a:	9000      	str	r0, [sp, #0]
 800117c:	9101      	str	r1, [sp, #4]
 800117e:	030c      	lsls	r4, r1, #12
 8001180:	004d      	lsls	r5, r1, #1
 8001182:	0fce      	lsrs	r6, r1, #31
 8001184:	0a61      	lsrs	r1, r4, #9
 8001186:	9c00      	ldr	r4, [sp, #0]
 8001188:	005f      	lsls	r7, r3, #1
 800118a:	0f64      	lsrs	r4, r4, #29
 800118c:	430c      	orrs	r4, r1
 800118e:	9900      	ldr	r1, [sp, #0]
 8001190:	9200      	str	r2, [sp, #0]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	00c8      	lsls	r0, r1, #3
 8001196:	0319      	lsls	r1, r3, #12
 8001198:	0d7b      	lsrs	r3, r7, #21
 800119a:	4699      	mov	r9, r3
 800119c:	9b01      	ldr	r3, [sp, #4]
 800119e:	4fcc      	ldr	r7, [pc, #816]	@ (80014d0 <__aeabi_dsub+0x364>)
 80011a0:	0fdb      	lsrs	r3, r3, #31
 80011a2:	469c      	mov	ip, r3
 80011a4:	0a4b      	lsrs	r3, r1, #9
 80011a6:	9900      	ldr	r1, [sp, #0]
 80011a8:	4680      	mov	r8, r0
 80011aa:	0f49      	lsrs	r1, r1, #29
 80011ac:	4319      	orrs	r1, r3
 80011ae:	9b00      	ldr	r3, [sp, #0]
 80011b0:	468b      	mov	fp, r1
 80011b2:	00da      	lsls	r2, r3, #3
 80011b4:	4692      	mov	sl, r2
 80011b6:	0d6d      	lsrs	r5, r5, #21
 80011b8:	45b9      	cmp	r9, r7
 80011ba:	d100      	bne.n	80011be <__aeabi_dsub+0x52>
 80011bc:	e0bf      	b.n	800133e <__aeabi_dsub+0x1d2>
 80011be:	2301      	movs	r3, #1
 80011c0:	4661      	mov	r1, ip
 80011c2:	4059      	eors	r1, r3
 80011c4:	464b      	mov	r3, r9
 80011c6:	468c      	mov	ip, r1
 80011c8:	1aeb      	subs	r3, r5, r3
 80011ca:	428e      	cmp	r6, r1
 80011cc:	d075      	beq.n	80012ba <__aeabi_dsub+0x14e>
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	dc00      	bgt.n	80011d4 <__aeabi_dsub+0x68>
 80011d2:	e2a3      	b.n	800171c <__aeabi_dsub+0x5b0>
 80011d4:	4649      	mov	r1, r9
 80011d6:	2900      	cmp	r1, #0
 80011d8:	d100      	bne.n	80011dc <__aeabi_dsub+0x70>
 80011da:	e0ce      	b.n	800137a <__aeabi_dsub+0x20e>
 80011dc:	42bd      	cmp	r5, r7
 80011de:	d100      	bne.n	80011e2 <__aeabi_dsub+0x76>
 80011e0:	e200      	b.n	80015e4 <__aeabi_dsub+0x478>
 80011e2:	2701      	movs	r7, #1
 80011e4:	2b38      	cmp	r3, #56	@ 0x38
 80011e6:	dc19      	bgt.n	800121c <__aeabi_dsub+0xb0>
 80011e8:	2780      	movs	r7, #128	@ 0x80
 80011ea:	4659      	mov	r1, fp
 80011ec:	043f      	lsls	r7, r7, #16
 80011ee:	4339      	orrs	r1, r7
 80011f0:	468b      	mov	fp, r1
 80011f2:	2b1f      	cmp	r3, #31
 80011f4:	dd00      	ble.n	80011f8 <__aeabi_dsub+0x8c>
 80011f6:	e1fa      	b.n	80015ee <__aeabi_dsub+0x482>
 80011f8:	2720      	movs	r7, #32
 80011fa:	1af9      	subs	r1, r7, r3
 80011fc:	468c      	mov	ip, r1
 80011fe:	4659      	mov	r1, fp
 8001200:	4667      	mov	r7, ip
 8001202:	40b9      	lsls	r1, r7
 8001204:	000f      	movs	r7, r1
 8001206:	0011      	movs	r1, r2
 8001208:	40d9      	lsrs	r1, r3
 800120a:	430f      	orrs	r7, r1
 800120c:	4661      	mov	r1, ip
 800120e:	408a      	lsls	r2, r1
 8001210:	1e51      	subs	r1, r2, #1
 8001212:	418a      	sbcs	r2, r1
 8001214:	4659      	mov	r1, fp
 8001216:	40d9      	lsrs	r1, r3
 8001218:	4317      	orrs	r7, r2
 800121a:	1a64      	subs	r4, r4, r1
 800121c:	1bc7      	subs	r7, r0, r7
 800121e:	42b8      	cmp	r0, r7
 8001220:	4180      	sbcs	r0, r0
 8001222:	4240      	negs	r0, r0
 8001224:	1a24      	subs	r4, r4, r0
 8001226:	0223      	lsls	r3, r4, #8
 8001228:	d400      	bmi.n	800122c <__aeabi_dsub+0xc0>
 800122a:	e140      	b.n	80014ae <__aeabi_dsub+0x342>
 800122c:	0264      	lsls	r4, r4, #9
 800122e:	0a64      	lsrs	r4, r4, #9
 8001230:	2c00      	cmp	r4, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_dsub+0xca>
 8001234:	e154      	b.n	80014e0 <__aeabi_dsub+0x374>
 8001236:	0020      	movs	r0, r4
 8001238:	f000 fc9a 	bl	8001b70 <__clzsi2>
 800123c:	0003      	movs	r3, r0
 800123e:	3b08      	subs	r3, #8
 8001240:	2120      	movs	r1, #32
 8001242:	0038      	movs	r0, r7
 8001244:	1aca      	subs	r2, r1, r3
 8001246:	40d0      	lsrs	r0, r2
 8001248:	409c      	lsls	r4, r3
 800124a:	0002      	movs	r2, r0
 800124c:	409f      	lsls	r7, r3
 800124e:	4322      	orrs	r2, r4
 8001250:	429d      	cmp	r5, r3
 8001252:	dd00      	ble.n	8001256 <__aeabi_dsub+0xea>
 8001254:	e1a6      	b.n	80015a4 <__aeabi_dsub+0x438>
 8001256:	1b58      	subs	r0, r3, r5
 8001258:	3001      	adds	r0, #1
 800125a:	1a09      	subs	r1, r1, r0
 800125c:	003c      	movs	r4, r7
 800125e:	408f      	lsls	r7, r1
 8001260:	40c4      	lsrs	r4, r0
 8001262:	1e7b      	subs	r3, r7, #1
 8001264:	419f      	sbcs	r7, r3
 8001266:	0013      	movs	r3, r2
 8001268:	408b      	lsls	r3, r1
 800126a:	4327      	orrs	r7, r4
 800126c:	431f      	orrs	r7, r3
 800126e:	40c2      	lsrs	r2, r0
 8001270:	003b      	movs	r3, r7
 8001272:	0014      	movs	r4, r2
 8001274:	2500      	movs	r5, #0
 8001276:	4313      	orrs	r3, r2
 8001278:	d100      	bne.n	800127c <__aeabi_dsub+0x110>
 800127a:	e1f7      	b.n	800166c <__aeabi_dsub+0x500>
 800127c:	077b      	lsls	r3, r7, #29
 800127e:	d100      	bne.n	8001282 <__aeabi_dsub+0x116>
 8001280:	e377      	b.n	8001972 <__aeabi_dsub+0x806>
 8001282:	230f      	movs	r3, #15
 8001284:	0038      	movs	r0, r7
 8001286:	403b      	ands	r3, r7
 8001288:	2b04      	cmp	r3, #4
 800128a:	d004      	beq.n	8001296 <__aeabi_dsub+0x12a>
 800128c:	1d38      	adds	r0, r7, #4
 800128e:	42b8      	cmp	r0, r7
 8001290:	41bf      	sbcs	r7, r7
 8001292:	427f      	negs	r7, r7
 8001294:	19e4      	adds	r4, r4, r7
 8001296:	0223      	lsls	r3, r4, #8
 8001298:	d400      	bmi.n	800129c <__aeabi_dsub+0x130>
 800129a:	e368      	b.n	800196e <__aeabi_dsub+0x802>
 800129c:	4b8c      	ldr	r3, [pc, #560]	@ (80014d0 <__aeabi_dsub+0x364>)
 800129e:	3501      	adds	r5, #1
 80012a0:	429d      	cmp	r5, r3
 80012a2:	d100      	bne.n	80012a6 <__aeabi_dsub+0x13a>
 80012a4:	e0f4      	b.n	8001490 <__aeabi_dsub+0x324>
 80012a6:	4b8b      	ldr	r3, [pc, #556]	@ (80014d4 <__aeabi_dsub+0x368>)
 80012a8:	056d      	lsls	r5, r5, #21
 80012aa:	401c      	ands	r4, r3
 80012ac:	0d6d      	lsrs	r5, r5, #21
 80012ae:	0767      	lsls	r7, r4, #29
 80012b0:	08c0      	lsrs	r0, r0, #3
 80012b2:	0264      	lsls	r4, r4, #9
 80012b4:	4307      	orrs	r7, r0
 80012b6:	0b24      	lsrs	r4, r4, #12
 80012b8:	e0ec      	b.n	8001494 <__aeabi_dsub+0x328>
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	dc00      	bgt.n	80012c0 <__aeabi_dsub+0x154>
 80012be:	e329      	b.n	8001914 <__aeabi_dsub+0x7a8>
 80012c0:	4649      	mov	r1, r9
 80012c2:	2900      	cmp	r1, #0
 80012c4:	d000      	beq.n	80012c8 <__aeabi_dsub+0x15c>
 80012c6:	e0d6      	b.n	8001476 <__aeabi_dsub+0x30a>
 80012c8:	4659      	mov	r1, fp
 80012ca:	4311      	orrs	r1, r2
 80012cc:	d100      	bne.n	80012d0 <__aeabi_dsub+0x164>
 80012ce:	e12e      	b.n	800152e <__aeabi_dsub+0x3c2>
 80012d0:	1e59      	subs	r1, r3, #1
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d100      	bne.n	80012d8 <__aeabi_dsub+0x16c>
 80012d6:	e1e6      	b.n	80016a6 <__aeabi_dsub+0x53a>
 80012d8:	42bb      	cmp	r3, r7
 80012da:	d100      	bne.n	80012de <__aeabi_dsub+0x172>
 80012dc:	e182      	b.n	80015e4 <__aeabi_dsub+0x478>
 80012de:	2701      	movs	r7, #1
 80012e0:	000b      	movs	r3, r1
 80012e2:	2938      	cmp	r1, #56	@ 0x38
 80012e4:	dc14      	bgt.n	8001310 <__aeabi_dsub+0x1a4>
 80012e6:	2b1f      	cmp	r3, #31
 80012e8:	dd00      	ble.n	80012ec <__aeabi_dsub+0x180>
 80012ea:	e23c      	b.n	8001766 <__aeabi_dsub+0x5fa>
 80012ec:	2720      	movs	r7, #32
 80012ee:	1af9      	subs	r1, r7, r3
 80012f0:	468c      	mov	ip, r1
 80012f2:	4659      	mov	r1, fp
 80012f4:	4667      	mov	r7, ip
 80012f6:	40b9      	lsls	r1, r7
 80012f8:	000f      	movs	r7, r1
 80012fa:	0011      	movs	r1, r2
 80012fc:	40d9      	lsrs	r1, r3
 80012fe:	430f      	orrs	r7, r1
 8001300:	4661      	mov	r1, ip
 8001302:	408a      	lsls	r2, r1
 8001304:	1e51      	subs	r1, r2, #1
 8001306:	418a      	sbcs	r2, r1
 8001308:	4659      	mov	r1, fp
 800130a:	40d9      	lsrs	r1, r3
 800130c:	4317      	orrs	r7, r2
 800130e:	1864      	adds	r4, r4, r1
 8001310:	183f      	adds	r7, r7, r0
 8001312:	4287      	cmp	r7, r0
 8001314:	4180      	sbcs	r0, r0
 8001316:	4240      	negs	r0, r0
 8001318:	1824      	adds	r4, r4, r0
 800131a:	0223      	lsls	r3, r4, #8
 800131c:	d400      	bmi.n	8001320 <__aeabi_dsub+0x1b4>
 800131e:	e0c6      	b.n	80014ae <__aeabi_dsub+0x342>
 8001320:	4b6b      	ldr	r3, [pc, #428]	@ (80014d0 <__aeabi_dsub+0x364>)
 8001322:	3501      	adds	r5, #1
 8001324:	429d      	cmp	r5, r3
 8001326:	d100      	bne.n	800132a <__aeabi_dsub+0x1be>
 8001328:	e0b2      	b.n	8001490 <__aeabi_dsub+0x324>
 800132a:	2101      	movs	r1, #1
 800132c:	4b69      	ldr	r3, [pc, #420]	@ (80014d4 <__aeabi_dsub+0x368>)
 800132e:	087a      	lsrs	r2, r7, #1
 8001330:	401c      	ands	r4, r3
 8001332:	4039      	ands	r1, r7
 8001334:	430a      	orrs	r2, r1
 8001336:	07e7      	lsls	r7, r4, #31
 8001338:	4317      	orrs	r7, r2
 800133a:	0864      	lsrs	r4, r4, #1
 800133c:	e79e      	b.n	800127c <__aeabi_dsub+0x110>
 800133e:	4b66      	ldr	r3, [pc, #408]	@ (80014d8 <__aeabi_dsub+0x36c>)
 8001340:	4311      	orrs	r1, r2
 8001342:	468a      	mov	sl, r1
 8001344:	18eb      	adds	r3, r5, r3
 8001346:	2900      	cmp	r1, #0
 8001348:	d028      	beq.n	800139c <__aeabi_dsub+0x230>
 800134a:	4566      	cmp	r6, ip
 800134c:	d02c      	beq.n	80013a8 <__aeabi_dsub+0x23c>
 800134e:	2b00      	cmp	r3, #0
 8001350:	d05b      	beq.n	800140a <__aeabi_dsub+0x29e>
 8001352:	2d00      	cmp	r5, #0
 8001354:	d100      	bne.n	8001358 <__aeabi_dsub+0x1ec>
 8001356:	e12c      	b.n	80015b2 <__aeabi_dsub+0x446>
 8001358:	465b      	mov	r3, fp
 800135a:	4666      	mov	r6, ip
 800135c:	075f      	lsls	r7, r3, #29
 800135e:	08d2      	lsrs	r2, r2, #3
 8001360:	4317      	orrs	r7, r2
 8001362:	08dd      	lsrs	r5, r3, #3
 8001364:	003b      	movs	r3, r7
 8001366:	432b      	orrs	r3, r5
 8001368:	d100      	bne.n	800136c <__aeabi_dsub+0x200>
 800136a:	e0e2      	b.n	8001532 <__aeabi_dsub+0x3c6>
 800136c:	2480      	movs	r4, #128	@ 0x80
 800136e:	0324      	lsls	r4, r4, #12
 8001370:	432c      	orrs	r4, r5
 8001372:	0324      	lsls	r4, r4, #12
 8001374:	4d56      	ldr	r5, [pc, #344]	@ (80014d0 <__aeabi_dsub+0x364>)
 8001376:	0b24      	lsrs	r4, r4, #12
 8001378:	e08c      	b.n	8001494 <__aeabi_dsub+0x328>
 800137a:	4659      	mov	r1, fp
 800137c:	4311      	orrs	r1, r2
 800137e:	d100      	bne.n	8001382 <__aeabi_dsub+0x216>
 8001380:	e0d5      	b.n	800152e <__aeabi_dsub+0x3c2>
 8001382:	1e59      	subs	r1, r3, #1
 8001384:	2b01      	cmp	r3, #1
 8001386:	d100      	bne.n	800138a <__aeabi_dsub+0x21e>
 8001388:	e1b9      	b.n	80016fe <__aeabi_dsub+0x592>
 800138a:	42bb      	cmp	r3, r7
 800138c:	d100      	bne.n	8001390 <__aeabi_dsub+0x224>
 800138e:	e1b1      	b.n	80016f4 <__aeabi_dsub+0x588>
 8001390:	2701      	movs	r7, #1
 8001392:	000b      	movs	r3, r1
 8001394:	2938      	cmp	r1, #56	@ 0x38
 8001396:	dd00      	ble.n	800139a <__aeabi_dsub+0x22e>
 8001398:	e740      	b.n	800121c <__aeabi_dsub+0xb0>
 800139a:	e72a      	b.n	80011f2 <__aeabi_dsub+0x86>
 800139c:	4661      	mov	r1, ip
 800139e:	2701      	movs	r7, #1
 80013a0:	4079      	eors	r1, r7
 80013a2:	468c      	mov	ip, r1
 80013a4:	4566      	cmp	r6, ip
 80013a6:	d1d2      	bne.n	800134e <__aeabi_dsub+0x1e2>
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d100      	bne.n	80013ae <__aeabi_dsub+0x242>
 80013ac:	e0c5      	b.n	800153a <__aeabi_dsub+0x3ce>
 80013ae:	2d00      	cmp	r5, #0
 80013b0:	d000      	beq.n	80013b4 <__aeabi_dsub+0x248>
 80013b2:	e155      	b.n	8001660 <__aeabi_dsub+0x4f4>
 80013b4:	464b      	mov	r3, r9
 80013b6:	0025      	movs	r5, r4
 80013b8:	4305      	orrs	r5, r0
 80013ba:	d100      	bne.n	80013be <__aeabi_dsub+0x252>
 80013bc:	e212      	b.n	80017e4 <__aeabi_dsub+0x678>
 80013be:	1e59      	subs	r1, r3, #1
 80013c0:	468c      	mov	ip, r1
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d100      	bne.n	80013c8 <__aeabi_dsub+0x25c>
 80013c6:	e249      	b.n	800185c <__aeabi_dsub+0x6f0>
 80013c8:	4d41      	ldr	r5, [pc, #260]	@ (80014d0 <__aeabi_dsub+0x364>)
 80013ca:	42ab      	cmp	r3, r5
 80013cc:	d100      	bne.n	80013d0 <__aeabi_dsub+0x264>
 80013ce:	e28f      	b.n	80018f0 <__aeabi_dsub+0x784>
 80013d0:	2701      	movs	r7, #1
 80013d2:	2938      	cmp	r1, #56	@ 0x38
 80013d4:	dc11      	bgt.n	80013fa <__aeabi_dsub+0x28e>
 80013d6:	4663      	mov	r3, ip
 80013d8:	2b1f      	cmp	r3, #31
 80013da:	dd00      	ble.n	80013de <__aeabi_dsub+0x272>
 80013dc:	e25b      	b.n	8001896 <__aeabi_dsub+0x72a>
 80013de:	4661      	mov	r1, ip
 80013e0:	2320      	movs	r3, #32
 80013e2:	0027      	movs	r7, r4
 80013e4:	1a5b      	subs	r3, r3, r1
 80013e6:	0005      	movs	r5, r0
 80013e8:	4098      	lsls	r0, r3
 80013ea:	409f      	lsls	r7, r3
 80013ec:	40cd      	lsrs	r5, r1
 80013ee:	1e43      	subs	r3, r0, #1
 80013f0:	4198      	sbcs	r0, r3
 80013f2:	40cc      	lsrs	r4, r1
 80013f4:	432f      	orrs	r7, r5
 80013f6:	4307      	orrs	r7, r0
 80013f8:	44a3      	add	fp, r4
 80013fa:	18bf      	adds	r7, r7, r2
 80013fc:	4297      	cmp	r7, r2
 80013fe:	4192      	sbcs	r2, r2
 8001400:	4252      	negs	r2, r2
 8001402:	445a      	add	r2, fp
 8001404:	0014      	movs	r4, r2
 8001406:	464d      	mov	r5, r9
 8001408:	e787      	b.n	800131a <__aeabi_dsub+0x1ae>
 800140a:	4f34      	ldr	r7, [pc, #208]	@ (80014dc <__aeabi_dsub+0x370>)
 800140c:	1c6b      	adds	r3, r5, #1
 800140e:	423b      	tst	r3, r7
 8001410:	d000      	beq.n	8001414 <__aeabi_dsub+0x2a8>
 8001412:	e0b6      	b.n	8001582 <__aeabi_dsub+0x416>
 8001414:	4659      	mov	r1, fp
 8001416:	0023      	movs	r3, r4
 8001418:	4311      	orrs	r1, r2
 800141a:	000f      	movs	r7, r1
 800141c:	4303      	orrs	r3, r0
 800141e:	2d00      	cmp	r5, #0
 8001420:	d000      	beq.n	8001424 <__aeabi_dsub+0x2b8>
 8001422:	e126      	b.n	8001672 <__aeabi_dsub+0x506>
 8001424:	2b00      	cmp	r3, #0
 8001426:	d100      	bne.n	800142a <__aeabi_dsub+0x2be>
 8001428:	e1c0      	b.n	80017ac <__aeabi_dsub+0x640>
 800142a:	2900      	cmp	r1, #0
 800142c:	d100      	bne.n	8001430 <__aeabi_dsub+0x2c4>
 800142e:	e0a1      	b.n	8001574 <__aeabi_dsub+0x408>
 8001430:	1a83      	subs	r3, r0, r2
 8001432:	4698      	mov	r8, r3
 8001434:	465b      	mov	r3, fp
 8001436:	4540      	cmp	r0, r8
 8001438:	41ad      	sbcs	r5, r5
 800143a:	1ae3      	subs	r3, r4, r3
 800143c:	426d      	negs	r5, r5
 800143e:	1b5b      	subs	r3, r3, r5
 8001440:	2580      	movs	r5, #128	@ 0x80
 8001442:	042d      	lsls	r5, r5, #16
 8001444:	422b      	tst	r3, r5
 8001446:	d100      	bne.n	800144a <__aeabi_dsub+0x2de>
 8001448:	e14b      	b.n	80016e2 <__aeabi_dsub+0x576>
 800144a:	465b      	mov	r3, fp
 800144c:	1a10      	subs	r0, r2, r0
 800144e:	4282      	cmp	r2, r0
 8001450:	4192      	sbcs	r2, r2
 8001452:	1b1c      	subs	r4, r3, r4
 8001454:	0007      	movs	r7, r0
 8001456:	2601      	movs	r6, #1
 8001458:	4663      	mov	r3, ip
 800145a:	4252      	negs	r2, r2
 800145c:	1aa4      	subs	r4, r4, r2
 800145e:	4327      	orrs	r7, r4
 8001460:	401e      	ands	r6, r3
 8001462:	2f00      	cmp	r7, #0
 8001464:	d100      	bne.n	8001468 <__aeabi_dsub+0x2fc>
 8001466:	e142      	b.n	80016ee <__aeabi_dsub+0x582>
 8001468:	422c      	tst	r4, r5
 800146a:	d100      	bne.n	800146e <__aeabi_dsub+0x302>
 800146c:	e26d      	b.n	800194a <__aeabi_dsub+0x7de>
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <__aeabi_dsub+0x368>)
 8001470:	2501      	movs	r5, #1
 8001472:	401c      	ands	r4, r3
 8001474:	e71b      	b.n	80012ae <__aeabi_dsub+0x142>
 8001476:	42bd      	cmp	r5, r7
 8001478:	d100      	bne.n	800147c <__aeabi_dsub+0x310>
 800147a:	e13b      	b.n	80016f4 <__aeabi_dsub+0x588>
 800147c:	2701      	movs	r7, #1
 800147e:	2b38      	cmp	r3, #56	@ 0x38
 8001480:	dd00      	ble.n	8001484 <__aeabi_dsub+0x318>
 8001482:	e745      	b.n	8001310 <__aeabi_dsub+0x1a4>
 8001484:	2780      	movs	r7, #128	@ 0x80
 8001486:	4659      	mov	r1, fp
 8001488:	043f      	lsls	r7, r7, #16
 800148a:	4339      	orrs	r1, r7
 800148c:	468b      	mov	fp, r1
 800148e:	e72a      	b.n	80012e6 <__aeabi_dsub+0x17a>
 8001490:	2400      	movs	r4, #0
 8001492:	2700      	movs	r7, #0
 8001494:	052d      	lsls	r5, r5, #20
 8001496:	4325      	orrs	r5, r4
 8001498:	07f6      	lsls	r6, r6, #31
 800149a:	4335      	orrs	r5, r6
 800149c:	0038      	movs	r0, r7
 800149e:	0029      	movs	r1, r5
 80014a0:	b003      	add	sp, #12
 80014a2:	bcf0      	pop	{r4, r5, r6, r7}
 80014a4:	46bb      	mov	fp, r7
 80014a6:	46b2      	mov	sl, r6
 80014a8:	46a9      	mov	r9, r5
 80014aa:	46a0      	mov	r8, r4
 80014ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ae:	077b      	lsls	r3, r7, #29
 80014b0:	d004      	beq.n	80014bc <__aeabi_dsub+0x350>
 80014b2:	230f      	movs	r3, #15
 80014b4:	403b      	ands	r3, r7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d000      	beq.n	80014bc <__aeabi_dsub+0x350>
 80014ba:	e6e7      	b.n	800128c <__aeabi_dsub+0x120>
 80014bc:	002b      	movs	r3, r5
 80014be:	08f8      	lsrs	r0, r7, #3
 80014c0:	4a03      	ldr	r2, [pc, #12]	@ (80014d0 <__aeabi_dsub+0x364>)
 80014c2:	0767      	lsls	r7, r4, #29
 80014c4:	4307      	orrs	r7, r0
 80014c6:	08e5      	lsrs	r5, r4, #3
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d100      	bne.n	80014ce <__aeabi_dsub+0x362>
 80014cc:	e74a      	b.n	8001364 <__aeabi_dsub+0x1f8>
 80014ce:	e0a5      	b.n	800161c <__aeabi_dsub+0x4b0>
 80014d0:	000007ff 	.word	0x000007ff
 80014d4:	ff7fffff 	.word	0xff7fffff
 80014d8:	fffff801 	.word	0xfffff801
 80014dc:	000007fe 	.word	0x000007fe
 80014e0:	0038      	movs	r0, r7
 80014e2:	f000 fb45 	bl	8001b70 <__clzsi2>
 80014e6:	0003      	movs	r3, r0
 80014e8:	3318      	adds	r3, #24
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	dc00      	bgt.n	80014f0 <__aeabi_dsub+0x384>
 80014ee:	e6a7      	b.n	8001240 <__aeabi_dsub+0xd4>
 80014f0:	003a      	movs	r2, r7
 80014f2:	3808      	subs	r0, #8
 80014f4:	4082      	lsls	r2, r0
 80014f6:	429d      	cmp	r5, r3
 80014f8:	dd00      	ble.n	80014fc <__aeabi_dsub+0x390>
 80014fa:	e08a      	b.n	8001612 <__aeabi_dsub+0x4a6>
 80014fc:	1b5b      	subs	r3, r3, r5
 80014fe:	1c58      	adds	r0, r3, #1
 8001500:	281f      	cmp	r0, #31
 8001502:	dc00      	bgt.n	8001506 <__aeabi_dsub+0x39a>
 8001504:	e1d8      	b.n	80018b8 <__aeabi_dsub+0x74c>
 8001506:	0017      	movs	r7, r2
 8001508:	3b1f      	subs	r3, #31
 800150a:	40df      	lsrs	r7, r3
 800150c:	2820      	cmp	r0, #32
 800150e:	d005      	beq.n	800151c <__aeabi_dsub+0x3b0>
 8001510:	2340      	movs	r3, #64	@ 0x40
 8001512:	1a1b      	subs	r3, r3, r0
 8001514:	409a      	lsls	r2, r3
 8001516:	1e53      	subs	r3, r2, #1
 8001518:	419a      	sbcs	r2, r3
 800151a:	4317      	orrs	r7, r2
 800151c:	2500      	movs	r5, #0
 800151e:	2f00      	cmp	r7, #0
 8001520:	d100      	bne.n	8001524 <__aeabi_dsub+0x3b8>
 8001522:	e0e5      	b.n	80016f0 <__aeabi_dsub+0x584>
 8001524:	077b      	lsls	r3, r7, #29
 8001526:	d000      	beq.n	800152a <__aeabi_dsub+0x3be>
 8001528:	e6ab      	b.n	8001282 <__aeabi_dsub+0x116>
 800152a:	002c      	movs	r4, r5
 800152c:	e7c6      	b.n	80014bc <__aeabi_dsub+0x350>
 800152e:	08c0      	lsrs	r0, r0, #3
 8001530:	e7c6      	b.n	80014c0 <__aeabi_dsub+0x354>
 8001532:	2700      	movs	r7, #0
 8001534:	2400      	movs	r4, #0
 8001536:	4dd1      	ldr	r5, [pc, #836]	@ (800187c <__aeabi_dsub+0x710>)
 8001538:	e7ac      	b.n	8001494 <__aeabi_dsub+0x328>
 800153a:	4fd1      	ldr	r7, [pc, #836]	@ (8001880 <__aeabi_dsub+0x714>)
 800153c:	1c6b      	adds	r3, r5, #1
 800153e:	423b      	tst	r3, r7
 8001540:	d171      	bne.n	8001626 <__aeabi_dsub+0x4ba>
 8001542:	0023      	movs	r3, r4
 8001544:	4303      	orrs	r3, r0
 8001546:	2d00      	cmp	r5, #0
 8001548:	d000      	beq.n	800154c <__aeabi_dsub+0x3e0>
 800154a:	e14e      	b.n	80017ea <__aeabi_dsub+0x67e>
 800154c:	4657      	mov	r7, sl
 800154e:	2b00      	cmp	r3, #0
 8001550:	d100      	bne.n	8001554 <__aeabi_dsub+0x3e8>
 8001552:	e1b5      	b.n	80018c0 <__aeabi_dsub+0x754>
 8001554:	2f00      	cmp	r7, #0
 8001556:	d00d      	beq.n	8001574 <__aeabi_dsub+0x408>
 8001558:	1883      	adds	r3, r0, r2
 800155a:	4283      	cmp	r3, r0
 800155c:	4180      	sbcs	r0, r0
 800155e:	445c      	add	r4, fp
 8001560:	4240      	negs	r0, r0
 8001562:	1824      	adds	r4, r4, r0
 8001564:	0222      	lsls	r2, r4, #8
 8001566:	d500      	bpl.n	800156a <__aeabi_dsub+0x3fe>
 8001568:	e1c8      	b.n	80018fc <__aeabi_dsub+0x790>
 800156a:	001f      	movs	r7, r3
 800156c:	4698      	mov	r8, r3
 800156e:	4327      	orrs	r7, r4
 8001570:	d100      	bne.n	8001574 <__aeabi_dsub+0x408>
 8001572:	e0bc      	b.n	80016ee <__aeabi_dsub+0x582>
 8001574:	4643      	mov	r3, r8
 8001576:	0767      	lsls	r7, r4, #29
 8001578:	08db      	lsrs	r3, r3, #3
 800157a:	431f      	orrs	r7, r3
 800157c:	08e5      	lsrs	r5, r4, #3
 800157e:	2300      	movs	r3, #0
 8001580:	e04c      	b.n	800161c <__aeabi_dsub+0x4b0>
 8001582:	1a83      	subs	r3, r0, r2
 8001584:	4698      	mov	r8, r3
 8001586:	465b      	mov	r3, fp
 8001588:	4540      	cmp	r0, r8
 800158a:	41bf      	sbcs	r7, r7
 800158c:	1ae3      	subs	r3, r4, r3
 800158e:	427f      	negs	r7, r7
 8001590:	1bdb      	subs	r3, r3, r7
 8001592:	021f      	lsls	r7, r3, #8
 8001594:	d47c      	bmi.n	8001690 <__aeabi_dsub+0x524>
 8001596:	4647      	mov	r7, r8
 8001598:	431f      	orrs	r7, r3
 800159a:	d100      	bne.n	800159e <__aeabi_dsub+0x432>
 800159c:	e0a6      	b.n	80016ec <__aeabi_dsub+0x580>
 800159e:	001c      	movs	r4, r3
 80015a0:	4647      	mov	r7, r8
 80015a2:	e645      	b.n	8001230 <__aeabi_dsub+0xc4>
 80015a4:	4cb7      	ldr	r4, [pc, #732]	@ (8001884 <__aeabi_dsub+0x718>)
 80015a6:	1aed      	subs	r5, r5, r3
 80015a8:	4014      	ands	r4, r2
 80015aa:	077b      	lsls	r3, r7, #29
 80015ac:	d000      	beq.n	80015b0 <__aeabi_dsub+0x444>
 80015ae:	e780      	b.n	80014b2 <__aeabi_dsub+0x346>
 80015b0:	e784      	b.n	80014bc <__aeabi_dsub+0x350>
 80015b2:	464b      	mov	r3, r9
 80015b4:	0025      	movs	r5, r4
 80015b6:	4305      	orrs	r5, r0
 80015b8:	d066      	beq.n	8001688 <__aeabi_dsub+0x51c>
 80015ba:	1e5f      	subs	r7, r3, #1
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d100      	bne.n	80015c2 <__aeabi_dsub+0x456>
 80015c0:	e0fc      	b.n	80017bc <__aeabi_dsub+0x650>
 80015c2:	4dae      	ldr	r5, [pc, #696]	@ (800187c <__aeabi_dsub+0x710>)
 80015c4:	42ab      	cmp	r3, r5
 80015c6:	d100      	bne.n	80015ca <__aeabi_dsub+0x45e>
 80015c8:	e15e      	b.n	8001888 <__aeabi_dsub+0x71c>
 80015ca:	4666      	mov	r6, ip
 80015cc:	2f38      	cmp	r7, #56	@ 0x38
 80015ce:	dc00      	bgt.n	80015d2 <__aeabi_dsub+0x466>
 80015d0:	e0b4      	b.n	800173c <__aeabi_dsub+0x5d0>
 80015d2:	2001      	movs	r0, #1
 80015d4:	1a17      	subs	r7, r2, r0
 80015d6:	42ba      	cmp	r2, r7
 80015d8:	4192      	sbcs	r2, r2
 80015da:	465b      	mov	r3, fp
 80015dc:	4252      	negs	r2, r2
 80015de:	464d      	mov	r5, r9
 80015e0:	1a9c      	subs	r4, r3, r2
 80015e2:	e620      	b.n	8001226 <__aeabi_dsub+0xba>
 80015e4:	0767      	lsls	r7, r4, #29
 80015e6:	08c0      	lsrs	r0, r0, #3
 80015e8:	4307      	orrs	r7, r0
 80015ea:	08e5      	lsrs	r5, r4, #3
 80015ec:	e6ba      	b.n	8001364 <__aeabi_dsub+0x1f8>
 80015ee:	001f      	movs	r7, r3
 80015f0:	4659      	mov	r1, fp
 80015f2:	3f20      	subs	r7, #32
 80015f4:	40f9      	lsrs	r1, r7
 80015f6:	000f      	movs	r7, r1
 80015f8:	2b20      	cmp	r3, #32
 80015fa:	d005      	beq.n	8001608 <__aeabi_dsub+0x49c>
 80015fc:	2140      	movs	r1, #64	@ 0x40
 80015fe:	1acb      	subs	r3, r1, r3
 8001600:	4659      	mov	r1, fp
 8001602:	4099      	lsls	r1, r3
 8001604:	430a      	orrs	r2, r1
 8001606:	4692      	mov	sl, r2
 8001608:	4653      	mov	r3, sl
 800160a:	1e5a      	subs	r2, r3, #1
 800160c:	4193      	sbcs	r3, r2
 800160e:	431f      	orrs	r7, r3
 8001610:	e604      	b.n	800121c <__aeabi_dsub+0xb0>
 8001612:	1aeb      	subs	r3, r5, r3
 8001614:	4d9b      	ldr	r5, [pc, #620]	@ (8001884 <__aeabi_dsub+0x718>)
 8001616:	4015      	ands	r5, r2
 8001618:	076f      	lsls	r7, r5, #29
 800161a:	08ed      	lsrs	r5, r5, #3
 800161c:	032c      	lsls	r4, r5, #12
 800161e:	055d      	lsls	r5, r3, #21
 8001620:	0b24      	lsrs	r4, r4, #12
 8001622:	0d6d      	lsrs	r5, r5, #21
 8001624:	e736      	b.n	8001494 <__aeabi_dsub+0x328>
 8001626:	4d95      	ldr	r5, [pc, #596]	@ (800187c <__aeabi_dsub+0x710>)
 8001628:	42ab      	cmp	r3, r5
 800162a:	d100      	bne.n	800162e <__aeabi_dsub+0x4c2>
 800162c:	e0d6      	b.n	80017dc <__aeabi_dsub+0x670>
 800162e:	1882      	adds	r2, r0, r2
 8001630:	0021      	movs	r1, r4
 8001632:	4282      	cmp	r2, r0
 8001634:	4180      	sbcs	r0, r0
 8001636:	4459      	add	r1, fp
 8001638:	4240      	negs	r0, r0
 800163a:	1808      	adds	r0, r1, r0
 800163c:	07c7      	lsls	r7, r0, #31
 800163e:	0852      	lsrs	r2, r2, #1
 8001640:	4317      	orrs	r7, r2
 8001642:	0844      	lsrs	r4, r0, #1
 8001644:	0752      	lsls	r2, r2, #29
 8001646:	d400      	bmi.n	800164a <__aeabi_dsub+0x4de>
 8001648:	e185      	b.n	8001956 <__aeabi_dsub+0x7ea>
 800164a:	220f      	movs	r2, #15
 800164c:	001d      	movs	r5, r3
 800164e:	403a      	ands	r2, r7
 8001650:	2a04      	cmp	r2, #4
 8001652:	d000      	beq.n	8001656 <__aeabi_dsub+0x4ea>
 8001654:	e61a      	b.n	800128c <__aeabi_dsub+0x120>
 8001656:	08ff      	lsrs	r7, r7, #3
 8001658:	0764      	lsls	r4, r4, #29
 800165a:	4327      	orrs	r7, r4
 800165c:	0905      	lsrs	r5, r0, #4
 800165e:	e7dd      	b.n	800161c <__aeabi_dsub+0x4b0>
 8001660:	465b      	mov	r3, fp
 8001662:	08d2      	lsrs	r2, r2, #3
 8001664:	075f      	lsls	r7, r3, #29
 8001666:	4317      	orrs	r7, r2
 8001668:	08dd      	lsrs	r5, r3, #3
 800166a:	e67b      	b.n	8001364 <__aeabi_dsub+0x1f8>
 800166c:	2700      	movs	r7, #0
 800166e:	2400      	movs	r4, #0
 8001670:	e710      	b.n	8001494 <__aeabi_dsub+0x328>
 8001672:	2b00      	cmp	r3, #0
 8001674:	d000      	beq.n	8001678 <__aeabi_dsub+0x50c>
 8001676:	e0d6      	b.n	8001826 <__aeabi_dsub+0x6ba>
 8001678:	2900      	cmp	r1, #0
 800167a:	d000      	beq.n	800167e <__aeabi_dsub+0x512>
 800167c:	e12f      	b.n	80018de <__aeabi_dsub+0x772>
 800167e:	2480      	movs	r4, #128	@ 0x80
 8001680:	2600      	movs	r6, #0
 8001682:	4d7e      	ldr	r5, [pc, #504]	@ (800187c <__aeabi_dsub+0x710>)
 8001684:	0324      	lsls	r4, r4, #12
 8001686:	e705      	b.n	8001494 <__aeabi_dsub+0x328>
 8001688:	4666      	mov	r6, ip
 800168a:	465c      	mov	r4, fp
 800168c:	08d0      	lsrs	r0, r2, #3
 800168e:	e717      	b.n	80014c0 <__aeabi_dsub+0x354>
 8001690:	465b      	mov	r3, fp
 8001692:	1a17      	subs	r7, r2, r0
 8001694:	42ba      	cmp	r2, r7
 8001696:	4192      	sbcs	r2, r2
 8001698:	1b1c      	subs	r4, r3, r4
 800169a:	2601      	movs	r6, #1
 800169c:	4663      	mov	r3, ip
 800169e:	4252      	negs	r2, r2
 80016a0:	1aa4      	subs	r4, r4, r2
 80016a2:	401e      	ands	r6, r3
 80016a4:	e5c4      	b.n	8001230 <__aeabi_dsub+0xc4>
 80016a6:	1883      	adds	r3, r0, r2
 80016a8:	4283      	cmp	r3, r0
 80016aa:	4180      	sbcs	r0, r0
 80016ac:	445c      	add	r4, fp
 80016ae:	4240      	negs	r0, r0
 80016b0:	1825      	adds	r5, r4, r0
 80016b2:	022a      	lsls	r2, r5, #8
 80016b4:	d400      	bmi.n	80016b8 <__aeabi_dsub+0x54c>
 80016b6:	e0da      	b.n	800186e <__aeabi_dsub+0x702>
 80016b8:	4a72      	ldr	r2, [pc, #456]	@ (8001884 <__aeabi_dsub+0x718>)
 80016ba:	085b      	lsrs	r3, r3, #1
 80016bc:	4015      	ands	r5, r2
 80016be:	07ea      	lsls	r2, r5, #31
 80016c0:	431a      	orrs	r2, r3
 80016c2:	0869      	lsrs	r1, r5, #1
 80016c4:	075b      	lsls	r3, r3, #29
 80016c6:	d400      	bmi.n	80016ca <__aeabi_dsub+0x55e>
 80016c8:	e14a      	b.n	8001960 <__aeabi_dsub+0x7f4>
 80016ca:	230f      	movs	r3, #15
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dsub+0x568>
 80016d2:	e0fc      	b.n	80018ce <__aeabi_dsub+0x762>
 80016d4:	1d17      	adds	r7, r2, #4
 80016d6:	4297      	cmp	r7, r2
 80016d8:	41a4      	sbcs	r4, r4
 80016da:	4264      	negs	r4, r4
 80016dc:	2502      	movs	r5, #2
 80016de:	1864      	adds	r4, r4, r1
 80016e0:	e6ec      	b.n	80014bc <__aeabi_dsub+0x350>
 80016e2:	4647      	mov	r7, r8
 80016e4:	001c      	movs	r4, r3
 80016e6:	431f      	orrs	r7, r3
 80016e8:	d000      	beq.n	80016ec <__aeabi_dsub+0x580>
 80016ea:	e743      	b.n	8001574 <__aeabi_dsub+0x408>
 80016ec:	2600      	movs	r6, #0
 80016ee:	2500      	movs	r5, #0
 80016f0:	2400      	movs	r4, #0
 80016f2:	e6cf      	b.n	8001494 <__aeabi_dsub+0x328>
 80016f4:	08c0      	lsrs	r0, r0, #3
 80016f6:	0767      	lsls	r7, r4, #29
 80016f8:	4307      	orrs	r7, r0
 80016fa:	08e5      	lsrs	r5, r4, #3
 80016fc:	e632      	b.n	8001364 <__aeabi_dsub+0x1f8>
 80016fe:	1a87      	subs	r7, r0, r2
 8001700:	465b      	mov	r3, fp
 8001702:	42b8      	cmp	r0, r7
 8001704:	4180      	sbcs	r0, r0
 8001706:	1ae4      	subs	r4, r4, r3
 8001708:	4240      	negs	r0, r0
 800170a:	1a24      	subs	r4, r4, r0
 800170c:	0223      	lsls	r3, r4, #8
 800170e:	d428      	bmi.n	8001762 <__aeabi_dsub+0x5f6>
 8001710:	0763      	lsls	r3, r4, #29
 8001712:	08ff      	lsrs	r7, r7, #3
 8001714:	431f      	orrs	r7, r3
 8001716:	08e5      	lsrs	r5, r4, #3
 8001718:	2301      	movs	r3, #1
 800171a:	e77f      	b.n	800161c <__aeabi_dsub+0x4b0>
 800171c:	2b00      	cmp	r3, #0
 800171e:	d100      	bne.n	8001722 <__aeabi_dsub+0x5b6>
 8001720:	e673      	b.n	800140a <__aeabi_dsub+0x29e>
 8001722:	464b      	mov	r3, r9
 8001724:	1b5f      	subs	r7, r3, r5
 8001726:	003b      	movs	r3, r7
 8001728:	2d00      	cmp	r5, #0
 800172a:	d100      	bne.n	800172e <__aeabi_dsub+0x5c2>
 800172c:	e742      	b.n	80015b4 <__aeabi_dsub+0x448>
 800172e:	2f38      	cmp	r7, #56	@ 0x38
 8001730:	dd00      	ble.n	8001734 <__aeabi_dsub+0x5c8>
 8001732:	e0ec      	b.n	800190e <__aeabi_dsub+0x7a2>
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	000e      	movs	r6, r1
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	431c      	orrs	r4, r3
 800173c:	2f1f      	cmp	r7, #31
 800173e:	dc25      	bgt.n	800178c <__aeabi_dsub+0x620>
 8001740:	2520      	movs	r5, #32
 8001742:	0023      	movs	r3, r4
 8001744:	1bed      	subs	r5, r5, r7
 8001746:	0001      	movs	r1, r0
 8001748:	40a8      	lsls	r0, r5
 800174a:	40ab      	lsls	r3, r5
 800174c:	40f9      	lsrs	r1, r7
 800174e:	1e45      	subs	r5, r0, #1
 8001750:	41a8      	sbcs	r0, r5
 8001752:	430b      	orrs	r3, r1
 8001754:	40fc      	lsrs	r4, r7
 8001756:	4318      	orrs	r0, r3
 8001758:	465b      	mov	r3, fp
 800175a:	1b1b      	subs	r3, r3, r4
 800175c:	469b      	mov	fp, r3
 800175e:	e739      	b.n	80015d4 <__aeabi_dsub+0x468>
 8001760:	4666      	mov	r6, ip
 8001762:	2501      	movs	r5, #1
 8001764:	e562      	b.n	800122c <__aeabi_dsub+0xc0>
 8001766:	001f      	movs	r7, r3
 8001768:	4659      	mov	r1, fp
 800176a:	3f20      	subs	r7, #32
 800176c:	40f9      	lsrs	r1, r7
 800176e:	468c      	mov	ip, r1
 8001770:	2b20      	cmp	r3, #32
 8001772:	d005      	beq.n	8001780 <__aeabi_dsub+0x614>
 8001774:	2740      	movs	r7, #64	@ 0x40
 8001776:	4659      	mov	r1, fp
 8001778:	1afb      	subs	r3, r7, r3
 800177a:	4099      	lsls	r1, r3
 800177c:	430a      	orrs	r2, r1
 800177e:	4692      	mov	sl, r2
 8001780:	4657      	mov	r7, sl
 8001782:	1e7b      	subs	r3, r7, #1
 8001784:	419f      	sbcs	r7, r3
 8001786:	4663      	mov	r3, ip
 8001788:	431f      	orrs	r7, r3
 800178a:	e5c1      	b.n	8001310 <__aeabi_dsub+0x1a4>
 800178c:	003b      	movs	r3, r7
 800178e:	0025      	movs	r5, r4
 8001790:	3b20      	subs	r3, #32
 8001792:	40dd      	lsrs	r5, r3
 8001794:	2f20      	cmp	r7, #32
 8001796:	d004      	beq.n	80017a2 <__aeabi_dsub+0x636>
 8001798:	2340      	movs	r3, #64	@ 0x40
 800179a:	1bdb      	subs	r3, r3, r7
 800179c:	409c      	lsls	r4, r3
 800179e:	4320      	orrs	r0, r4
 80017a0:	4680      	mov	r8, r0
 80017a2:	4640      	mov	r0, r8
 80017a4:	1e43      	subs	r3, r0, #1
 80017a6:	4198      	sbcs	r0, r3
 80017a8:	4328      	orrs	r0, r5
 80017aa:	e713      	b.n	80015d4 <__aeabi_dsub+0x468>
 80017ac:	2900      	cmp	r1, #0
 80017ae:	d09d      	beq.n	80016ec <__aeabi_dsub+0x580>
 80017b0:	2601      	movs	r6, #1
 80017b2:	4663      	mov	r3, ip
 80017b4:	465c      	mov	r4, fp
 80017b6:	4690      	mov	r8, r2
 80017b8:	401e      	ands	r6, r3
 80017ba:	e6db      	b.n	8001574 <__aeabi_dsub+0x408>
 80017bc:	1a17      	subs	r7, r2, r0
 80017be:	465b      	mov	r3, fp
 80017c0:	42ba      	cmp	r2, r7
 80017c2:	4192      	sbcs	r2, r2
 80017c4:	1b1c      	subs	r4, r3, r4
 80017c6:	4252      	negs	r2, r2
 80017c8:	1aa4      	subs	r4, r4, r2
 80017ca:	0223      	lsls	r3, r4, #8
 80017cc:	d4c8      	bmi.n	8001760 <__aeabi_dsub+0x5f4>
 80017ce:	0763      	lsls	r3, r4, #29
 80017d0:	08ff      	lsrs	r7, r7, #3
 80017d2:	431f      	orrs	r7, r3
 80017d4:	4666      	mov	r6, ip
 80017d6:	2301      	movs	r3, #1
 80017d8:	08e5      	lsrs	r5, r4, #3
 80017da:	e71f      	b.n	800161c <__aeabi_dsub+0x4b0>
 80017dc:	001d      	movs	r5, r3
 80017de:	2400      	movs	r4, #0
 80017e0:	2700      	movs	r7, #0
 80017e2:	e657      	b.n	8001494 <__aeabi_dsub+0x328>
 80017e4:	465c      	mov	r4, fp
 80017e6:	08d0      	lsrs	r0, r2, #3
 80017e8:	e66a      	b.n	80014c0 <__aeabi_dsub+0x354>
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dsub+0x684>
 80017ee:	e737      	b.n	8001660 <__aeabi_dsub+0x4f4>
 80017f0:	4653      	mov	r3, sl
 80017f2:	08c0      	lsrs	r0, r0, #3
 80017f4:	0767      	lsls	r7, r4, #29
 80017f6:	4307      	orrs	r7, r0
 80017f8:	08e5      	lsrs	r5, r4, #3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d100      	bne.n	8001800 <__aeabi_dsub+0x694>
 80017fe:	e5b1      	b.n	8001364 <__aeabi_dsub+0x1f8>
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	031b      	lsls	r3, r3, #12
 8001804:	421d      	tst	r5, r3
 8001806:	d008      	beq.n	800181a <__aeabi_dsub+0x6ae>
 8001808:	4659      	mov	r1, fp
 800180a:	08c8      	lsrs	r0, r1, #3
 800180c:	4218      	tst	r0, r3
 800180e:	d104      	bne.n	800181a <__aeabi_dsub+0x6ae>
 8001810:	08d2      	lsrs	r2, r2, #3
 8001812:	0749      	lsls	r1, r1, #29
 8001814:	430a      	orrs	r2, r1
 8001816:	0017      	movs	r7, r2
 8001818:	0005      	movs	r5, r0
 800181a:	0f7b      	lsrs	r3, r7, #29
 800181c:	00ff      	lsls	r7, r7, #3
 800181e:	08ff      	lsrs	r7, r7, #3
 8001820:	075b      	lsls	r3, r3, #29
 8001822:	431f      	orrs	r7, r3
 8001824:	e59e      	b.n	8001364 <__aeabi_dsub+0x1f8>
 8001826:	08c0      	lsrs	r0, r0, #3
 8001828:	0763      	lsls	r3, r4, #29
 800182a:	4318      	orrs	r0, r3
 800182c:	08e5      	lsrs	r5, r4, #3
 800182e:	2900      	cmp	r1, #0
 8001830:	d053      	beq.n	80018da <__aeabi_dsub+0x76e>
 8001832:	2380      	movs	r3, #128	@ 0x80
 8001834:	031b      	lsls	r3, r3, #12
 8001836:	421d      	tst	r5, r3
 8001838:	d00a      	beq.n	8001850 <__aeabi_dsub+0x6e4>
 800183a:	4659      	mov	r1, fp
 800183c:	08cc      	lsrs	r4, r1, #3
 800183e:	421c      	tst	r4, r3
 8001840:	d106      	bne.n	8001850 <__aeabi_dsub+0x6e4>
 8001842:	2601      	movs	r6, #1
 8001844:	4663      	mov	r3, ip
 8001846:	0025      	movs	r5, r4
 8001848:	08d0      	lsrs	r0, r2, #3
 800184a:	0749      	lsls	r1, r1, #29
 800184c:	4308      	orrs	r0, r1
 800184e:	401e      	ands	r6, r3
 8001850:	0f47      	lsrs	r7, r0, #29
 8001852:	00c0      	lsls	r0, r0, #3
 8001854:	08c0      	lsrs	r0, r0, #3
 8001856:	077f      	lsls	r7, r7, #29
 8001858:	4307      	orrs	r7, r0
 800185a:	e583      	b.n	8001364 <__aeabi_dsub+0x1f8>
 800185c:	1883      	adds	r3, r0, r2
 800185e:	4293      	cmp	r3, r2
 8001860:	4192      	sbcs	r2, r2
 8001862:	445c      	add	r4, fp
 8001864:	4252      	negs	r2, r2
 8001866:	18a5      	adds	r5, r4, r2
 8001868:	022a      	lsls	r2, r5, #8
 800186a:	d500      	bpl.n	800186e <__aeabi_dsub+0x702>
 800186c:	e724      	b.n	80016b8 <__aeabi_dsub+0x54c>
 800186e:	076f      	lsls	r7, r5, #29
 8001870:	08db      	lsrs	r3, r3, #3
 8001872:	431f      	orrs	r7, r3
 8001874:	08ed      	lsrs	r5, r5, #3
 8001876:	2301      	movs	r3, #1
 8001878:	e6d0      	b.n	800161c <__aeabi_dsub+0x4b0>
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	000007ff 	.word	0x000007ff
 8001880:	000007fe 	.word	0x000007fe
 8001884:	ff7fffff 	.word	0xff7fffff
 8001888:	465b      	mov	r3, fp
 800188a:	08d2      	lsrs	r2, r2, #3
 800188c:	075f      	lsls	r7, r3, #29
 800188e:	4666      	mov	r6, ip
 8001890:	4317      	orrs	r7, r2
 8001892:	08dd      	lsrs	r5, r3, #3
 8001894:	e566      	b.n	8001364 <__aeabi_dsub+0x1f8>
 8001896:	0025      	movs	r5, r4
 8001898:	3b20      	subs	r3, #32
 800189a:	40dd      	lsrs	r5, r3
 800189c:	4663      	mov	r3, ip
 800189e:	2b20      	cmp	r3, #32
 80018a0:	d005      	beq.n	80018ae <__aeabi_dsub+0x742>
 80018a2:	2340      	movs	r3, #64	@ 0x40
 80018a4:	4661      	mov	r1, ip
 80018a6:	1a5b      	subs	r3, r3, r1
 80018a8:	409c      	lsls	r4, r3
 80018aa:	4320      	orrs	r0, r4
 80018ac:	4680      	mov	r8, r0
 80018ae:	4647      	mov	r7, r8
 80018b0:	1e7b      	subs	r3, r7, #1
 80018b2:	419f      	sbcs	r7, r3
 80018b4:	432f      	orrs	r7, r5
 80018b6:	e5a0      	b.n	80013fa <__aeabi_dsub+0x28e>
 80018b8:	2120      	movs	r1, #32
 80018ba:	2700      	movs	r7, #0
 80018bc:	1a09      	subs	r1, r1, r0
 80018be:	e4d2      	b.n	8001266 <__aeabi_dsub+0xfa>
 80018c0:	2f00      	cmp	r7, #0
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dsub+0x75a>
 80018c4:	e713      	b.n	80016ee <__aeabi_dsub+0x582>
 80018c6:	465c      	mov	r4, fp
 80018c8:	0017      	movs	r7, r2
 80018ca:	2500      	movs	r5, #0
 80018cc:	e5f6      	b.n	80014bc <__aeabi_dsub+0x350>
 80018ce:	08d7      	lsrs	r7, r2, #3
 80018d0:	0749      	lsls	r1, r1, #29
 80018d2:	2302      	movs	r3, #2
 80018d4:	430f      	orrs	r7, r1
 80018d6:	092d      	lsrs	r5, r5, #4
 80018d8:	e6a0      	b.n	800161c <__aeabi_dsub+0x4b0>
 80018da:	0007      	movs	r7, r0
 80018dc:	e542      	b.n	8001364 <__aeabi_dsub+0x1f8>
 80018de:	465b      	mov	r3, fp
 80018e0:	2601      	movs	r6, #1
 80018e2:	075f      	lsls	r7, r3, #29
 80018e4:	08dd      	lsrs	r5, r3, #3
 80018e6:	4663      	mov	r3, ip
 80018e8:	08d2      	lsrs	r2, r2, #3
 80018ea:	4317      	orrs	r7, r2
 80018ec:	401e      	ands	r6, r3
 80018ee:	e539      	b.n	8001364 <__aeabi_dsub+0x1f8>
 80018f0:	465b      	mov	r3, fp
 80018f2:	08d2      	lsrs	r2, r2, #3
 80018f4:	075f      	lsls	r7, r3, #29
 80018f6:	4317      	orrs	r7, r2
 80018f8:	08dd      	lsrs	r5, r3, #3
 80018fa:	e533      	b.n	8001364 <__aeabi_dsub+0x1f8>
 80018fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001978 <__aeabi_dsub+0x80c>)
 80018fe:	08db      	lsrs	r3, r3, #3
 8001900:	4022      	ands	r2, r4
 8001902:	0757      	lsls	r7, r2, #29
 8001904:	0252      	lsls	r2, r2, #9
 8001906:	2501      	movs	r5, #1
 8001908:	431f      	orrs	r7, r3
 800190a:	0b14      	lsrs	r4, r2, #12
 800190c:	e5c2      	b.n	8001494 <__aeabi_dsub+0x328>
 800190e:	000e      	movs	r6, r1
 8001910:	2001      	movs	r0, #1
 8001912:	e65f      	b.n	80015d4 <__aeabi_dsub+0x468>
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00d      	beq.n	8001934 <__aeabi_dsub+0x7c8>
 8001918:	464b      	mov	r3, r9
 800191a:	1b5b      	subs	r3, r3, r5
 800191c:	469c      	mov	ip, r3
 800191e:	2d00      	cmp	r5, #0
 8001920:	d100      	bne.n	8001924 <__aeabi_dsub+0x7b8>
 8001922:	e548      	b.n	80013b6 <__aeabi_dsub+0x24a>
 8001924:	2701      	movs	r7, #1
 8001926:	2b38      	cmp	r3, #56	@ 0x38
 8001928:	dd00      	ble.n	800192c <__aeabi_dsub+0x7c0>
 800192a:	e566      	b.n	80013fa <__aeabi_dsub+0x28e>
 800192c:	2380      	movs	r3, #128	@ 0x80
 800192e:	041b      	lsls	r3, r3, #16
 8001930:	431c      	orrs	r4, r3
 8001932:	e550      	b.n	80013d6 <__aeabi_dsub+0x26a>
 8001934:	1c6b      	adds	r3, r5, #1
 8001936:	4d11      	ldr	r5, [pc, #68]	@ (800197c <__aeabi_dsub+0x810>)
 8001938:	422b      	tst	r3, r5
 800193a:	d000      	beq.n	800193e <__aeabi_dsub+0x7d2>
 800193c:	e673      	b.n	8001626 <__aeabi_dsub+0x4ba>
 800193e:	4659      	mov	r1, fp
 8001940:	0023      	movs	r3, r4
 8001942:	4311      	orrs	r1, r2
 8001944:	468a      	mov	sl, r1
 8001946:	4303      	orrs	r3, r0
 8001948:	e600      	b.n	800154c <__aeabi_dsub+0x3e0>
 800194a:	0767      	lsls	r7, r4, #29
 800194c:	08c0      	lsrs	r0, r0, #3
 800194e:	2300      	movs	r3, #0
 8001950:	4307      	orrs	r7, r0
 8001952:	08e5      	lsrs	r5, r4, #3
 8001954:	e662      	b.n	800161c <__aeabi_dsub+0x4b0>
 8001956:	0764      	lsls	r4, r4, #29
 8001958:	08ff      	lsrs	r7, r7, #3
 800195a:	4327      	orrs	r7, r4
 800195c:	0905      	lsrs	r5, r0, #4
 800195e:	e65d      	b.n	800161c <__aeabi_dsub+0x4b0>
 8001960:	08d2      	lsrs	r2, r2, #3
 8001962:	0749      	lsls	r1, r1, #29
 8001964:	4311      	orrs	r1, r2
 8001966:	000f      	movs	r7, r1
 8001968:	2302      	movs	r3, #2
 800196a:	092d      	lsrs	r5, r5, #4
 800196c:	e656      	b.n	800161c <__aeabi_dsub+0x4b0>
 800196e:	0007      	movs	r7, r0
 8001970:	e5a4      	b.n	80014bc <__aeabi_dsub+0x350>
 8001972:	0038      	movs	r0, r7
 8001974:	e48f      	b.n	8001296 <__aeabi_dsub+0x12a>
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	ff7fffff 	.word	0xff7fffff
 800197c:	000007fe 	.word	0x000007fe

08001980 <__aeabi_i2d>:
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	2800      	cmp	r0, #0
 8001984:	d016      	beq.n	80019b4 <__aeabi_i2d+0x34>
 8001986:	17c3      	asrs	r3, r0, #31
 8001988:	18c5      	adds	r5, r0, r3
 800198a:	405d      	eors	r5, r3
 800198c:	0fc4      	lsrs	r4, r0, #31
 800198e:	0028      	movs	r0, r5
 8001990:	f000 f8ee 	bl	8001b70 <__clzsi2>
 8001994:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <__aeabi_i2d+0x58>)
 8001996:	1a1b      	subs	r3, r3, r0
 8001998:	055b      	lsls	r3, r3, #21
 800199a:	0d5b      	lsrs	r3, r3, #21
 800199c:	280a      	cmp	r0, #10
 800199e:	dc14      	bgt.n	80019ca <__aeabi_i2d+0x4a>
 80019a0:	0002      	movs	r2, r0
 80019a2:	002e      	movs	r6, r5
 80019a4:	3215      	adds	r2, #21
 80019a6:	4096      	lsls	r6, r2
 80019a8:	220b      	movs	r2, #11
 80019aa:	1a12      	subs	r2, r2, r0
 80019ac:	40d5      	lsrs	r5, r2
 80019ae:	032d      	lsls	r5, r5, #12
 80019b0:	0b2d      	lsrs	r5, r5, #12
 80019b2:	e003      	b.n	80019bc <__aeabi_i2d+0x3c>
 80019b4:	2400      	movs	r4, #0
 80019b6:	2300      	movs	r3, #0
 80019b8:	2500      	movs	r5, #0
 80019ba:	2600      	movs	r6, #0
 80019bc:	051b      	lsls	r3, r3, #20
 80019be:	432b      	orrs	r3, r5
 80019c0:	07e4      	lsls	r4, r4, #31
 80019c2:	4323      	orrs	r3, r4
 80019c4:	0030      	movs	r0, r6
 80019c6:	0019      	movs	r1, r3
 80019c8:	bd70      	pop	{r4, r5, r6, pc}
 80019ca:	380b      	subs	r0, #11
 80019cc:	4085      	lsls	r5, r0
 80019ce:	032d      	lsls	r5, r5, #12
 80019d0:	2600      	movs	r6, #0
 80019d2:	0b2d      	lsrs	r5, r5, #12
 80019d4:	e7f2      	b.n	80019bc <__aeabi_i2d+0x3c>
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	0000041e 	.word	0x0000041e

080019dc <__aeabi_f2d>:
 80019dc:	b570      	push	{r4, r5, r6, lr}
 80019de:	0242      	lsls	r2, r0, #9
 80019e0:	0043      	lsls	r3, r0, #1
 80019e2:	0fc4      	lsrs	r4, r0, #31
 80019e4:	20fe      	movs	r0, #254	@ 0xfe
 80019e6:	0e1b      	lsrs	r3, r3, #24
 80019e8:	1c59      	adds	r1, r3, #1
 80019ea:	0a55      	lsrs	r5, r2, #9
 80019ec:	4208      	tst	r0, r1
 80019ee:	d00c      	beq.n	8001a0a <__aeabi_f2d+0x2e>
 80019f0:	21e0      	movs	r1, #224	@ 0xe0
 80019f2:	0089      	lsls	r1, r1, #2
 80019f4:	468c      	mov	ip, r1
 80019f6:	076d      	lsls	r5, r5, #29
 80019f8:	0b12      	lsrs	r2, r2, #12
 80019fa:	4463      	add	r3, ip
 80019fc:	051b      	lsls	r3, r3, #20
 80019fe:	4313      	orrs	r3, r2
 8001a00:	07e4      	lsls	r4, r4, #31
 8001a02:	4323      	orrs	r3, r4
 8001a04:	0028      	movs	r0, r5
 8001a06:	0019      	movs	r1, r3
 8001a08:	bd70      	pop	{r4, r5, r6, pc}
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d114      	bne.n	8001a38 <__aeabi_f2d+0x5c>
 8001a0e:	2d00      	cmp	r5, #0
 8001a10:	d01b      	beq.n	8001a4a <__aeabi_f2d+0x6e>
 8001a12:	0028      	movs	r0, r5
 8001a14:	f000 f8ac 	bl	8001b70 <__clzsi2>
 8001a18:	280a      	cmp	r0, #10
 8001a1a:	dc1c      	bgt.n	8001a56 <__aeabi_f2d+0x7a>
 8001a1c:	230b      	movs	r3, #11
 8001a1e:	002a      	movs	r2, r5
 8001a20:	1a1b      	subs	r3, r3, r0
 8001a22:	40da      	lsrs	r2, r3
 8001a24:	0003      	movs	r3, r0
 8001a26:	3315      	adds	r3, #21
 8001a28:	409d      	lsls	r5, r3
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <__aeabi_f2d+0x88>)
 8001a2c:	0312      	lsls	r2, r2, #12
 8001a2e:	1a1b      	subs	r3, r3, r0
 8001a30:	055b      	lsls	r3, r3, #21
 8001a32:	0b12      	lsrs	r2, r2, #12
 8001a34:	0d5b      	lsrs	r3, r3, #21
 8001a36:	e7e1      	b.n	80019fc <__aeabi_f2d+0x20>
 8001a38:	2d00      	cmp	r5, #0
 8001a3a:	d009      	beq.n	8001a50 <__aeabi_f2d+0x74>
 8001a3c:	0b13      	lsrs	r3, r2, #12
 8001a3e:	2280      	movs	r2, #128	@ 0x80
 8001a40:	0312      	lsls	r2, r2, #12
 8001a42:	431a      	orrs	r2, r3
 8001a44:	076d      	lsls	r5, r5, #29
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <__aeabi_f2d+0x8c>)
 8001a48:	e7d8      	b.n	80019fc <__aeabi_f2d+0x20>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	e7d5      	b.n	80019fc <__aeabi_f2d+0x20>
 8001a50:	2200      	movs	r2, #0
 8001a52:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <__aeabi_f2d+0x8c>)
 8001a54:	e7d2      	b.n	80019fc <__aeabi_f2d+0x20>
 8001a56:	0003      	movs	r3, r0
 8001a58:	002a      	movs	r2, r5
 8001a5a:	3b0b      	subs	r3, #11
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	2500      	movs	r5, #0
 8001a60:	e7e3      	b.n	8001a2a <__aeabi_f2d+0x4e>
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	00000389 	.word	0x00000389
 8001a68:	000007ff 	.word	0x000007ff

08001a6c <__aeabi_d2f>:
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	004b      	lsls	r3, r1, #1
 8001a70:	030f      	lsls	r7, r1, #12
 8001a72:	0d5b      	lsrs	r3, r3, #21
 8001a74:	4c3a      	ldr	r4, [pc, #232]	@ (8001b60 <__aeabi_d2f+0xf4>)
 8001a76:	0f45      	lsrs	r5, r0, #29
 8001a78:	b083      	sub	sp, #12
 8001a7a:	0a7f      	lsrs	r7, r7, #9
 8001a7c:	1c5e      	adds	r6, r3, #1
 8001a7e:	432f      	orrs	r7, r5
 8001a80:	9000      	str	r0, [sp, #0]
 8001a82:	9101      	str	r1, [sp, #4]
 8001a84:	0fca      	lsrs	r2, r1, #31
 8001a86:	00c5      	lsls	r5, r0, #3
 8001a88:	4226      	tst	r6, r4
 8001a8a:	d00b      	beq.n	8001aa4 <__aeabi_d2f+0x38>
 8001a8c:	4935      	ldr	r1, [pc, #212]	@ (8001b64 <__aeabi_d2f+0xf8>)
 8001a8e:	185c      	adds	r4, r3, r1
 8001a90:	2cfe      	cmp	r4, #254	@ 0xfe
 8001a92:	dd13      	ble.n	8001abc <__aeabi_d2f+0x50>
 8001a94:	20ff      	movs	r0, #255	@ 0xff
 8001a96:	2300      	movs	r3, #0
 8001a98:	05c0      	lsls	r0, r0, #23
 8001a9a:	4318      	orrs	r0, r3
 8001a9c:	07d2      	lsls	r2, r2, #31
 8001a9e:	4310      	orrs	r0, r2
 8001aa0:	b003      	add	sp, #12
 8001aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa4:	433d      	orrs	r5, r7
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <__aeabi_d2f+0x42>
 8001aaa:	2000      	movs	r0, #0
 8001aac:	e7f4      	b.n	8001a98 <__aeabi_d2f+0x2c>
 8001aae:	2d00      	cmp	r5, #0
 8001ab0:	d0f0      	beq.n	8001a94 <__aeabi_d2f+0x28>
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	03db      	lsls	r3, r3, #15
 8001ab6:	20ff      	movs	r0, #255	@ 0xff
 8001ab8:	433b      	orrs	r3, r7
 8001aba:	e7ed      	b.n	8001a98 <__aeabi_d2f+0x2c>
 8001abc:	2c00      	cmp	r4, #0
 8001abe:	dd0c      	ble.n	8001ada <__aeabi_d2f+0x6e>
 8001ac0:	9b00      	ldr	r3, [sp, #0]
 8001ac2:	00ff      	lsls	r7, r7, #3
 8001ac4:	019b      	lsls	r3, r3, #6
 8001ac6:	1e58      	subs	r0, r3, #1
 8001ac8:	4183      	sbcs	r3, r0
 8001aca:	0f69      	lsrs	r1, r5, #29
 8001acc:	433b      	orrs	r3, r7
 8001ace:	430b      	orrs	r3, r1
 8001ad0:	0759      	lsls	r1, r3, #29
 8001ad2:	d127      	bne.n	8001b24 <__aeabi_d2f+0xb8>
 8001ad4:	08db      	lsrs	r3, r3, #3
 8001ad6:	b2e0      	uxtb	r0, r4
 8001ad8:	e7de      	b.n	8001a98 <__aeabi_d2f+0x2c>
 8001ada:	0021      	movs	r1, r4
 8001adc:	3117      	adds	r1, #23
 8001ade:	db31      	blt.n	8001b44 <__aeabi_d2f+0xd8>
 8001ae0:	2180      	movs	r1, #128	@ 0x80
 8001ae2:	201e      	movs	r0, #30
 8001ae4:	0409      	lsls	r1, r1, #16
 8001ae6:	4339      	orrs	r1, r7
 8001ae8:	1b00      	subs	r0, r0, r4
 8001aea:	281f      	cmp	r0, #31
 8001aec:	dd2d      	ble.n	8001b4a <__aeabi_d2f+0xde>
 8001aee:	2602      	movs	r6, #2
 8001af0:	4276      	negs	r6, r6
 8001af2:	1b34      	subs	r4, r6, r4
 8001af4:	000e      	movs	r6, r1
 8001af6:	40e6      	lsrs	r6, r4
 8001af8:	0034      	movs	r4, r6
 8001afa:	2820      	cmp	r0, #32
 8001afc:	d004      	beq.n	8001b08 <__aeabi_d2f+0x9c>
 8001afe:	481a      	ldr	r0, [pc, #104]	@ (8001b68 <__aeabi_d2f+0xfc>)
 8001b00:	4684      	mov	ip, r0
 8001b02:	4463      	add	r3, ip
 8001b04:	4099      	lsls	r1, r3
 8001b06:	430d      	orrs	r5, r1
 8001b08:	002b      	movs	r3, r5
 8001b0a:	1e59      	subs	r1, r3, #1
 8001b0c:	418b      	sbcs	r3, r1
 8001b0e:	4323      	orrs	r3, r4
 8001b10:	0759      	lsls	r1, r3, #29
 8001b12:	d003      	beq.n	8001b1c <__aeabi_d2f+0xb0>
 8001b14:	210f      	movs	r1, #15
 8001b16:	4019      	ands	r1, r3
 8001b18:	2904      	cmp	r1, #4
 8001b1a:	d10b      	bne.n	8001b34 <__aeabi_d2f+0xc8>
 8001b1c:	019b      	lsls	r3, r3, #6
 8001b1e:	2000      	movs	r0, #0
 8001b20:	0a5b      	lsrs	r3, r3, #9
 8001b22:	e7b9      	b.n	8001a98 <__aeabi_d2f+0x2c>
 8001b24:	210f      	movs	r1, #15
 8001b26:	4019      	ands	r1, r3
 8001b28:	2904      	cmp	r1, #4
 8001b2a:	d104      	bne.n	8001b36 <__aeabi_d2f+0xca>
 8001b2c:	019b      	lsls	r3, r3, #6
 8001b2e:	0a5b      	lsrs	r3, r3, #9
 8001b30:	b2e0      	uxtb	r0, r4
 8001b32:	e7b1      	b.n	8001a98 <__aeabi_d2f+0x2c>
 8001b34:	2400      	movs	r4, #0
 8001b36:	3304      	adds	r3, #4
 8001b38:	0159      	lsls	r1, r3, #5
 8001b3a:	d5f7      	bpl.n	8001b2c <__aeabi_d2f+0xc0>
 8001b3c:	3401      	adds	r4, #1
 8001b3e:	2300      	movs	r3, #0
 8001b40:	b2e0      	uxtb	r0, r4
 8001b42:	e7a9      	b.n	8001a98 <__aeabi_d2f+0x2c>
 8001b44:	2000      	movs	r0, #0
 8001b46:	2300      	movs	r3, #0
 8001b48:	e7a6      	b.n	8001a98 <__aeabi_d2f+0x2c>
 8001b4a:	4c08      	ldr	r4, [pc, #32]	@ (8001b6c <__aeabi_d2f+0x100>)
 8001b4c:	191c      	adds	r4, r3, r4
 8001b4e:	002b      	movs	r3, r5
 8001b50:	40a5      	lsls	r5, r4
 8001b52:	40c3      	lsrs	r3, r0
 8001b54:	40a1      	lsls	r1, r4
 8001b56:	1e68      	subs	r0, r5, #1
 8001b58:	4185      	sbcs	r5, r0
 8001b5a:	4329      	orrs	r1, r5
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	e7d7      	b.n	8001b10 <__aeabi_d2f+0xa4>
 8001b60:	000007fe 	.word	0x000007fe
 8001b64:	fffffc80 	.word	0xfffffc80
 8001b68:	fffffca2 	.word	0xfffffca2
 8001b6c:	fffffc82 	.word	0xfffffc82

08001b70 <__clzsi2>:
 8001b70:	211c      	movs	r1, #28
 8001b72:	2301      	movs	r3, #1
 8001b74:	041b      	lsls	r3, r3, #16
 8001b76:	4298      	cmp	r0, r3
 8001b78:	d301      	bcc.n	8001b7e <__clzsi2+0xe>
 8001b7a:	0c00      	lsrs	r0, r0, #16
 8001b7c:	3910      	subs	r1, #16
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	4298      	cmp	r0, r3
 8001b82:	d301      	bcc.n	8001b88 <__clzsi2+0x18>
 8001b84:	0a00      	lsrs	r0, r0, #8
 8001b86:	3908      	subs	r1, #8
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	4298      	cmp	r0, r3
 8001b8c:	d301      	bcc.n	8001b92 <__clzsi2+0x22>
 8001b8e:	0900      	lsrs	r0, r0, #4
 8001b90:	3904      	subs	r1, #4
 8001b92:	a202      	add	r2, pc, #8	@ (adr r2, 8001b9c <__clzsi2+0x2c>)
 8001b94:	5c10      	ldrb	r0, [r2, r0]
 8001b96:	1840      	adds	r0, r0, r1
 8001b98:	4770      	bx	lr
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	02020304 	.word	0x02020304
 8001ba0:	01010101 	.word	0x01010101
	...

08001bac <SPI2_FOC_DMA_LL_Init>:
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8001bac:	213f      	movs	r1, #63	@ 0x3f



/* ====== INIT DMA seule (post HAL) : ne touche pas SPI2/GPIO ====== */
void SPI2_FOC_DMA_LL_Init(MA330_t *encd)
{
 8001bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb0:	2413      	movs	r4, #19
 8001bb2:	46de      	mov	lr, fp
 8001bb4:	4657      	mov	r7, sl
 8001bb6:	464e      	mov	r6, r9
 8001bb8:	4645      	mov	r5, r8
 8001bba:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf0 <SPI2_FOC_DMA_LL_Init+0x144>)
 8001bbc:	b5e0      	push	{r5, r6, r7, lr}
 8001bbe:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8001bc0:	4d4c      	ldr	r5, [pc, #304]	@ (8001cf4 <SPI2_FOC_DMA_LL_Init+0x148>)
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8001bc2:	438b      	bics	r3, r1
 8001bc4:	4323      	orrs	r3, r4
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4a4b      	ldr	r2, [pc, #300]	@ (8001cf8 <SPI2_FOC_DMA_LL_Init+0x14c>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8001bca:	342d      	adds	r4, #45	@ 0x2d
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8001bcc:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8001bce:	46ac      	mov	ip, r5
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8001bd0:	438b      	bics	r3, r1
 8001bd2:	392d      	subs	r1, #45	@ 0x2d
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001bd8:	4a48      	ldr	r2, [pc, #288]	@ (8001cfc <SPI2_FOC_DMA_LL_Init+0x150>)
 8001bda:	3911      	subs	r1, #17
 8001bdc:	6813      	ldr	r3, [r2, #0]
 8001bde:	468b      	mov	fp, r1
 8001be0:	438b      	bics	r3, r1
 8001be2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001be4:	6813      	ldr	r3, [r2, #0]
 8001be6:	4946      	ldr	r1, [pc, #280]	@ (8001d00 <SPI2_FOC_DMA_LL_Init+0x154>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001be8:	4f46      	ldr	r7, [pc, #280]	@ (8001d04 <SPI2_FOC_DMA_LL_Init+0x158>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001bea:	468a      	mov	sl, r1
 8001bec:	400b      	ands	r3, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001bee:	2180      	movs	r1, #128	@ 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001bf0:	6013      	str	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8001bf2:	4b45      	ldr	r3, [pc, #276]	@ (8001d08 <SPI2_FOC_DMA_LL_Init+0x15c>)
 8001bf4:	6093      	str	r3, [r2, #8]
 8001bf6:	4698      	mov	r8, r3

    /* RX: P->M, 8-bit, no inc, length=2 (préchargée) */
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_2, (uint32_t)&SPI2->DR);
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_2, (uint32_t)encd->spi_rx_buffer);
 8001bf8:	1d83      	adds	r3, r0, #6
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8001bfa:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8001bfc:	6813      	ldr	r3, [r2, #0]
 8001bfe:	43a3      	bics	r3, r4
 8001c00:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001c02:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001c04:	465c      	mov	r4, fp
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001c06:	438b      	bics	r3, r1
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8001c0c:	6813      	ldr	r3, [r2, #0]
 8001c0e:	402b      	ands	r3, r5
 8001c10:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8001c12:	6813      	ldr	r3, [r2, #0]
 8001c14:	4d3d      	ldr	r5, [pc, #244]	@ (8001d0c <SPI2_FOC_DMA_LL_Init+0x160>)
 8001c16:	402b      	ands	r3, r5
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001c18:	2580      	movs	r5, #128	@ 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8001c1a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001c1c:	6813      	ldr	r3, [r2, #0]
 8001c1e:	016d      	lsls	r5, r5, #5
 8001c20:	403b      	ands	r3, r7
 8001c22:	432b      	orrs	r3, r5
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001c24:	2502      	movs	r5, #2
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001c26:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001c28:	6853      	ldr	r3, [r2, #4]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI2(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8001c2a:	4f39      	ldr	r7, [pc, #228]	@ (8001d10 <SPI2_FOC_DMA_LL_Init+0x164>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	041b      	lsls	r3, r3, #16
 8001c30:	432b      	orrs	r3, r5
 8001c32:	6053      	str	r3, [r2, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8001c34:	2310      	movs	r3, #16
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	4699      	mov	r9, r3
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001c3a:	4b36      	ldr	r3, [pc, #216]	@ (8001d14 <SPI2_FOC_DMA_LL_Init+0x168>)
 8001c3c:	681e      	ldr	r6, [r3, #0]
 8001c3e:	43a6      	bics	r6, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001c40:	4654      	mov	r4, sl
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001c42:	601e      	str	r6, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001c44:	681e      	ldr	r6, [r3, #0]
 8001c46:	4026      	ands	r6, r4
 8001c48:	464c      	mov	r4, r9
 8001c4a:	4326      	orrs	r6, r4
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8001c4c:	4644      	mov	r4, r8
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001c4e:	601e      	str	r6, [r3, #0]

    /* TX: M->P, 8-bit, no inc, length=2 (préchargée) */
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t)&SPI2->DR);
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t)encd->spi_tx_buffer);
 8001c50:	0006      	movs	r6, r0
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8001c52:	609c      	str	r4, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8001c54:	2440      	movs	r4, #64	@ 0x40
 8001c56:	3608      	adds	r6, #8
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8001c58:	60de      	str	r6, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8001c5a:	681e      	ldr	r6, [r3, #0]
 8001c5c:	43a6      	bics	r6, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8001c5e:	4664      	mov	r4, ip
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8001c60:	601e      	str	r6, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001c62:	681e      	ldr	r6, [r3, #0]
 8001c64:	438e      	bics	r6, r1
 8001c66:	4331      	orrs	r1, r6
 8001c68:	6019      	str	r1, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8001c6a:	6819      	ldr	r1, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8001c6c:	4e27      	ldr	r6, [pc, #156]	@ (8001d0c <SPI2_FOC_DMA_LL_Init+0x160>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8001c6e:	4021      	ands	r1, r4
 8001c70:	6019      	str	r1, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8001c72:	6819      	ldr	r1, [r3, #0]
 8001c74:	4031      	ands	r1, r6
 8001c76:	6019      	str	r1, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001c78:	6819      	ldr	r1, [r3, #0]
 8001c7a:	4e22      	ldr	r6, [pc, #136]	@ (8001d04 <SPI2_FOC_DMA_LL_Init+0x158>)
 8001c7c:	4031      	ands	r1, r6
 8001c7e:	2680      	movs	r6, #128	@ 0x80
 8001c80:	0176      	lsls	r6, r6, #5
 8001c82:	4331      	orrs	r1, r6
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8001c84:	2620      	movs	r6, #32
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001c86:	6019      	str	r1, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	43b1      	bics	r1, r6
 8001c8c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	0c09      	lsrs	r1, r1, #16
 8001c92:	0409      	lsls	r1, r1, #16
 8001c94:	4329      	orrs	r1, r5
 8001c96:	6059      	str	r1, [r3, #4]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8001c98:	2180      	movs	r1, #128	@ 0x80
 8001c9a:	0049      	lsls	r1, r1, #1
 8001c9c:	6079      	str	r1, [r7, #4]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8001c9e:	6811      	ldr	r1, [r2, #0]
 8001ca0:	4329      	orrs	r1, r5
 8001ca2:	6011      	str	r1, [r2, #0]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8001ca4:	6811      	ldr	r1, [r2, #0]
 8001ca6:	3506      	adds	r5, #6
 8001ca8:	4329      	orrs	r1, r5
 8001caa:	6011      	str	r1, [r2, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cac:	21c2      	movs	r1, #194	@ 0xc2
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	0089      	lsls	r1, r1, #2
 8001cb2:	432a      	orrs	r2, r5
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <SPI2_FOC_DMA_LL_Init+0x16c>)
 8001cb8:	4d18      	ldr	r5, [pc, #96]	@ (8001d1c <SPI2_FOC_DMA_LL_Init+0x170>)
 8001cba:	585a      	ldr	r2, [r3, r1]
 8001cbc:	402a      	ands	r2, r5
 8001cbe:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc0:	2280      	movs	r2, #128	@ 0x80
 8001cc2:	00d2      	lsls	r2, r2, #3
 8001cc4:	601a      	str	r2, [r3, #0]
    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_3);

    NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
    NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);

    encd->spi_tx_buffer[0]=0x00;
 8001cc6:	2300      	movs	r3, #0
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001cc8:	2140      	movs	r1, #64	@ 0x40
 8001cca:	4a15      	ldr	r2, [pc, #84]	@ (8001d20 <SPI2_FOC_DMA_LL_Init+0x174>)
 8001ccc:	8103      	strh	r3, [r0, #8]
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	6013      	str	r3, [r2, #0]
    encd->spi_tx_buffer[1]=0x00;

    LL_SPI_Enable(SPI2);

    encd->g_spi_done = 0;
 8001cd4:	2300      	movs	r3, #0
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8001cd6:	8881      	ldrh	r1, [r0, #4]
    encd->g_spi_done = 0;
 8001cd8:	7283      	strb	r3, [r0, #10]
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	6800      	ldr	r0, [r0, #0]
 8001cde:	f001 f9fd 	bl	80030dc <HAL_GPIO_WritePin>
    cs_high(encd);


}
 8001ce2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ce4:	46bb      	mov	fp, r7
 8001ce6:	46b2      	mov	sl, r6
 8001ce8:	46a9      	mov	r9, r5
 8001cea:	46a0      	mov	r8, r4
 8001cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cee:	46c0      	nop			@ (mov r8, r8)
 8001cf0:	40020808 	.word	0x40020808
 8001cf4:	fffffcff 	.word	0xfffffcff
 8001cf8:	40020804 	.word	0x40020804
 8001cfc:	4002001c 	.word	0x4002001c
 8001d00:	ffffbfef 	.word	0xffffbfef
 8001d04:	ffffcfff 	.word	0xffffcfff
 8001d08:	4000380c 	.word	0x4000380c
 8001d0c:	fffff3ff 	.word	0xfffff3ff
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020030 	.word	0x40020030
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	ff00ffff 	.word	0xff00ffff
 8001d20:	40003800 	.word	0x40003800

08001d24 <SPI2_FOC_DMA_TxRx2B_Blocking>:



/* ====== Utilitaire bloquant court (polling) si tu en veux un) ====== */
bool SPI2_FOC_DMA_TxRx2B_Blocking(MA330_t * encd, uint8_t Byte1, uint8_t Byte2, uint32_t timeout_loops)
{
 8001d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d26:	46c6      	mov	lr, r8
 8001d28:	0004      	movs	r4, r0
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001d2a:	2040      	movs	r0, #64	@ 0x40
 8001d2c:	001e      	movs	r6, r3
 8001d2e:	4b37      	ldr	r3, [pc, #220]	@ (8001e0c <SPI2_FOC_DMA_TxRx2B_Blocking+0xe8>)
 8001d30:	4690      	mov	r8, r2
 8001d32:	681d      	ldr	r5, [r3, #0]
 8001d34:	b500      	push	{lr}
 8001d36:	4228      	tst	r0, r5
 8001d38:	d102      	bne.n	8001d40 <SPI2_FOC_DMA_TxRx2B_Blocking+0x1c>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001d3a:	681d      	ldr	r5, [r3, #0]
 8001d3c:	4328      	orrs	r0, r5
 8001d3e:	6018      	str	r0, [r3, #0]
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001d40:	2080      	movs	r0, #128	@ 0x80

    if (!SPI2_FOC_DMA_KickTxRx2B(encd, Byte1, Byte2)) return false;
 8001d42:	2200      	movs	r2, #0
 8001d44:	0007      	movs	r7, r0
 8001d46:	4d31      	ldr	r5, [pc, #196]	@ (8001e0c <SPI2_FOC_DMA_TxRx2B_Blocking+0xe8>)
 8001d48:	4694      	mov	ip, r2
 8001d4a:	68ab      	ldr	r3, [r5, #8]
 8001d4c:	401f      	ands	r7, r3
 8001d4e:	4218      	tst	r0, r3
 8001d50:	d151      	bne.n	8001df6 <SPI2_FOC_DMA_TxRx2B_Blocking+0xd2>
    encd->spi_tx_buffer[1] = Byte2;
 8001d52:	4643      	mov	r3, r8
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8001d54:	6820      	ldr	r0, [r4, #0]
    encd->spi_tx_buffer[0] = Byte1;
 8001d56:	7221      	strb	r1, [r4, #8]
    encd->spi_tx_buffer[1] = Byte2;
 8001d58:	7263      	strb	r3, [r4, #9]
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8001d5a:	88a1      	ldrh	r1, [r4, #4]
    encd->g_spi_done = 0;
 8001d5c:	72a7      	strb	r7, [r4, #10]
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8001d5e:	f001 f9bd 	bl	80030dc <HAL_GPIO_WritePin>
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001d62:	2201      	movs	r2, #1
 8001d64:	482a      	ldr	r0, [pc, #168]	@ (8001e10 <SPI2_FOC_DMA_TxRx2B_Blocking+0xec>)
 8001d66:	492b      	ldr	r1, [pc, #172]	@ (8001e14 <SPI2_FOC_DMA_TxRx2B_Blocking+0xf0>)
 8001d68:	6803      	ldr	r3, [r0, #0]
 8001d6a:	4694      	mov	ip, r2
 8001d6c:	4393      	bics	r3, r2
 8001d6e:	6003      	str	r3, [r0, #0]
 8001d70:	680b      	ldr	r3, [r1, #0]
 8001d72:	4393      	bics	r3, r2
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001d74:	3201      	adds	r2, #1
 8001d76:	4690      	mov	r8, r2
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001d78:	600b      	str	r3, [r1, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001d7a:	6843      	ldr	r3, [r0, #4]
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	041b      	lsls	r3, r3, #16
 8001d80:	4313      	orrs	r3, r2
 8001d82:	6043      	str	r3, [r0, #4]
 8001d84:	4643      	mov	r3, r8
 8001d86:	684a      	ldr	r2, [r1, #4]
 8001d88:	0c12      	lsrs	r2, r2, #16
 8001d8a:	0412      	lsls	r2, r2, #16
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	604a      	str	r2, [r1, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8001d90:	2210      	movs	r2, #16
 8001d92:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <SPI2_FOC_DMA_TxRx2B_Blocking+0xf4>)
 8001d94:	605a      	str	r2, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8001d96:	32f0      	adds	r2, #240	@ 0xf0
 8001d98:	605a      	str	r2, [r3, #4]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8001d9a:	4662      	mov	r2, ip
    encd->g_spi_done = 0;
 8001d9c:	72a7      	strb	r7, [r4, #10]
 8001d9e:	686b      	ldr	r3, [r5, #4]
 8001da0:	4313      	orrs	r3, r2
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8001da2:	4642      	mov	r2, r8
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8001da4:	606b      	str	r3, [r5, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8001da6:	686b      	ldr	r3, [r5, #4]
 8001da8:	4313      	orrs	r3, r2
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001daa:	4662      	mov	r2, ip
 8001dac:	606b      	str	r3, [r5, #4]
 8001dae:	6803      	ldr	r3, [r0, #0]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	6003      	str	r3, [r0, #0]
 8001db4:	680b      	ldr	r3, [r1, #0]

    HAL_Delay(5);
 8001db6:	2005      	movs	r0, #5
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
 8001dbc:	f001 f82c 	bl	8002e18 <HAL_Delay>
    uint8_t problem=0;

    //gerer les erreurs
    while (timeout_loops>10) {
 8001dc0:	2e0a      	cmp	r6, #10
 8001dc2:	d81f      	bhi.n	8001e04 <SPI2_FOC_DMA_TxRx2B_Blocking+0xe0>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableDMAReq_TX(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8001dc4:	2102      	movs	r1, #2
 8001dc6:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <SPI2_FOC_DMA_TxRx2B_Blocking+0xe8>)
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	438a      	bics	r2, r1
 8001dcc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	6859      	ldr	r1, [r3, #4]
 8001dd2:	4391      	bics	r1, r2
 8001dd4:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001dd6:	490f      	ldr	r1, [pc, #60]	@ (8001e14 <SPI2_FOC_DMA_TxRx2B_Blocking+0xf0>)
 8001dd8:	680b      	ldr	r3, [r1, #0]
 8001dda:	4393      	bics	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]
 8001dde:	490c      	ldr	r1, [pc, #48]	@ (8001e10 <SPI2_FOC_DMA_TxRx2B_Blocking+0xec>)
 8001de0:	680b      	ldr	r3, [r1, #0]
 8001de2:	4393      	bics	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8001de6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <SPI2_FOC_DMA_TxRx2B_Blocking+0xf4>)
 8001de8:	321f      	adds	r2, #31
 8001dea:	605a      	str	r2, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8001dec:	32e1      	adds	r2, #225	@ 0xe1
 8001dee:	32ff      	adds	r2, #255	@ 0xff
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	2301      	movs	r3, #1
 8001df4:	469c      	mov	ip, r3
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
    LL_DMA_ClearFlag_TC2(DMA1);
    LL_DMA_ClearFlag_TC3(DMA1);

    return true;
}
 8001df6:	4660      	mov	r0, ip
 8001df8:	bc80      	pop	{r7}
 8001dfa:	46b8      	mov	r8, r7
 8001dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_Delay(1);
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f001 f80a 	bl	8002e18 <HAL_Delay>
        if (encd->g_spi_done == 1){
 8001e04:	7aa3      	ldrb	r3, [r4, #10]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d1f9      	bne.n	8001dfe <SPI2_FOC_DMA_TxRx2B_Blocking+0xda>
 8001e0a:	e7db      	b.n	8001dc4 <SPI2_FOC_DMA_TxRx2B_Blocking+0xa0>
 8001e0c:	40003800 	.word	0x40003800
 8001e10:	4002001c 	.word	0x4002001c
 8001e14:	40020030 	.word	0x40020030
 8001e18:	40020000 	.word	0x40020000

08001e1c <MA330_Init>:



//attention 20ms minimum apres une ecriture de registre
int MA330_Init(MA330_t *encd, GPIO_TypeDef *cs_port, uint16_t cs_pin,uint8_t FW){
 8001e1c:	b570      	push	{r4, r5, r6, lr}
 8001e1e:	0004      	movs	r4, r0
 8001e20:	001d      	movs	r5, r3
    if (encd == NULL || cs_port == NULL || cs_pin == 0) {
 8001e22:	2800      	cmp	r0, #0
 8001e24:	d003      	beq.n	8001e2e <MA330_Init+0x12>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d001      	beq.n	8001e2e <MA330_Init+0x12>
 8001e2a:	2a00      	cmp	r2, #0
 8001e2c:	d101      	bne.n	8001e32 <MA330_Init+0x16>
        return 0;
 8001e2e:	2000      	movs	r0, #0
 8001e30:	e009      	b.n	8001e46 <MA330_Init+0x2a>
    }

    encd->MA330_cs_port = cs_port;
 8001e32:	6001      	str	r1, [r0, #0]
    encd->MA330_cs_pin = cs_pin;
 8001e34:	8082      	strh	r2, [r0, #4]
    
    SPI2_FOC_DMA_LL_Init(encd);
 8001e36:	f7ff feb9 	bl	8001bac <SPI2_FOC_DMA_LL_Init>

    HAL_Delay(1);
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f000 ffec 	bl	8002e18 <HAL_Delay>

    if(FW>0){
 8001e40:	2d00      	cmp	r5, #0
 8001e42:	d101      	bne.n	8001e48 <MA330_Init+0x2c>
		return 0;
	}
	cs_high(encd);

    }
    return 1;
 8001e44:	2001      	movs	r0, #1
}
 8001e46:	bd70      	pop	{r4, r5, r6, pc}
	if (SPI2_FOC_DMA_TxRx2B_Blocking(encd, 0x4E, 0x00, 1000) != true) {
 8001e48:	23fa      	movs	r3, #250	@ 0xfa
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	214e      	movs	r1, #78	@ 0x4e
 8001e4e:	0020      	movs	r0, r4
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	f7ff ff67 	bl	8001d24 <SPI2_FOC_DMA_TxRx2B_Blocking>
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d02c      	beq.n	8001eb4 <MA330_Init+0x98>
	HAL_Delay(1);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f000 ffdc 	bl	8002e18 <HAL_Delay>
	if (SPI2_FOC_DMA_TxRx2B_Blocking(encd, 0x00, 0x00, 1000) != true) {
 8001e60:	23fa      	movs	r3, #250	@ 0xfa
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	0020      	movs	r0, r4
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	f7ff ff5b 	bl	8001d24 <SPI2_FOC_DMA_TxRx2B_Blocking>
 8001e6e:	2800      	cmp	r0, #0
 8001e70:	d020      	beq.n	8001eb4 <MA330_Init+0x98>
	HAL_Delay(1);
 8001e72:	2001      	movs	r0, #1
 8001e74:	f000 ffd0 	bl	8002e18 <HAL_Delay>
	if (SPI2_FOC_DMA_TxRx2B_Blocking(encd, 0x8E,(uint8_t ) FW, 1000) != true) {
 8001e78:	23fa      	movs	r3, #250	@ 0xfa
 8001e7a:	002a      	movs	r2, r5
 8001e7c:	218e      	movs	r1, #142	@ 0x8e
 8001e7e:	0020      	movs	r0, r4
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	f7ff ff4f 	bl	8001d24 <SPI2_FOC_DMA_TxRx2B_Blocking>
 8001e86:	2800      	cmp	r0, #0
 8001e88:	d014      	beq.n	8001eb4 <MA330_Init+0x98>
	HAL_Delay(25);
 8001e8a:	2019      	movs	r0, #25
 8001e8c:	f000 ffc4 	bl	8002e18 <HAL_Delay>
	if (SPI2_FOC_DMA_TxRx2B_Blocking(encd, 0x00, 0x00, 1000) != true) {
 8001e90:	23fa      	movs	r3, #250	@ 0xfa
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	0020      	movs	r0, r4
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	f7ff ff43 	bl	8001d24 <SPI2_FOC_DMA_TxRx2B_Blocking>
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d008      	beq.n	8001eb4 <MA330_Init+0x98>
	if(encd->spi_rx_buffer[0]!=FW){
 8001ea2:	79a3      	ldrb	r3, [r4, #6]
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8001ea4:	6820      	ldr	r0, [r4, #0]
 8001ea6:	88a1      	ldrh	r1, [r4, #4]
	if(encd->spi_rx_buffer[0]!=FW){
 8001ea8:	42ab      	cmp	r3, r5
 8001eaa:	d105      	bne.n	8001eb8 <MA330_Init+0x9c>
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8001eac:	2201      	movs	r2, #1
 8001eae:	f001 f915 	bl	80030dc <HAL_GPIO_WritePin>
}
 8001eb2:	e7c7      	b.n	8001e44 <MA330_Init+0x28>
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8001eb4:	88a1      	ldrh	r1, [r4, #4]
 8001eb6:	6820      	ldr	r0, [r4, #0]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f001 f90f 	bl	80030dc <HAL_GPIO_WritePin>
        return 0;
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	e7c1      	b.n	8001e46 <MA330_Init+0x2a>
 8001ec2:	46c0      	nop			@ (mov r8, r8)

08001ec4 <MA330_start>:

//14 bit de donnee utile
int MA330_start(MA330_t *encd) {
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001ec6:	2240      	movs	r2, #64	@ 0x40
 8001ec8:	46ce      	mov	lr, r9
 8001eca:	4647      	mov	r7, r8
 8001ecc:	4b21      	ldr	r3, [pc, #132]	@ (8001f54 <MA330_start+0x90>)
 8001ece:	0004      	movs	r4, r0
 8001ed0:	6819      	ldr	r1, [r3, #0]
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	420a      	tst	r2, r1
 8001ed6:	d102      	bne.n	8001ede <MA330_start+0x1a>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001ed8:	6819      	ldr	r1, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001ede:	4d1d      	ldr	r5, [pc, #116]	@ (8001f54 <MA330_start+0x90>)

	if (SPI2_FOC_DMA_KickTxRx2B(encd,0x00,0x00) != true) {
        return 0;
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	68ab      	ldr	r3, [r5, #8]
 8001ee4:	061b      	lsls	r3, r3, #24
 8001ee6:	d431      	bmi.n	8001f4c <MA330_start+0x88>
    encd->spi_tx_buffer[0] = Byte1;
 8001ee8:	2300      	movs	r3, #0
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	88a1      	ldrh	r1, [r4, #4]
    encd->spi_tx_buffer[0] = Byte1;
 8001eee:	8120      	strh	r0, [r4, #8]
    encd->g_spi_done = 0;
 8001ef0:	72a3      	strb	r3, [r4, #10]
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8001ef2:	6820      	ldr	r0, [r4, #0]
    encd->spi_tx_buffer[0] = Byte1;
 8001ef4:	4699      	mov	r9, r3
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8001ef6:	f001 f8f1 	bl	80030dc <HAL_GPIO_WritePin>
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001efa:	2001      	movs	r0, #1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001efc:	2702      	movs	r7, #2
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001efe:	4916      	ldr	r1, [pc, #88]	@ (8001f58 <MA330_start+0x94>)
 8001f00:	4a16      	ldr	r2, [pc, #88]	@ (8001f5c <MA330_start+0x98>)
 8001f02:	680b      	ldr	r3, [r1, #0]
 8001f04:	4383      	bics	r3, r0
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	6813      	ldr	r3, [r2, #0]
 8001f0a:	4383      	bics	r3, r0
 8001f0c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001f0e:	684b      	ldr	r3, [r1, #4]
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	433b      	orrs	r3, r7
 8001f16:	604b      	str	r3, [r1, #4]
 8001f18:	6853      	ldr	r3, [r2, #4]
 8001f1a:	0c1b      	lsrs	r3, r3, #16
 8001f1c:	041b      	lsls	r3, r3, #16
 8001f1e:	433b      	orrs	r3, r7
 8001f20:	6053      	str	r3, [r2, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8001f22:	4b0f      	ldr	r3, [pc, #60]	@ (8001f60 <MA330_start+0x9c>)
 8001f24:	4698      	mov	r8, r3
 8001f26:	2310      	movs	r3, #16
 8001f28:	4646      	mov	r6, r8
 8001f2a:	6073      	str	r3, [r6, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8001f2c:	33f0      	adds	r3, #240	@ 0xf0
 8001f2e:	6073      	str	r3, [r6, #4]
    encd->g_spi_done = 0;
 8001f30:	464b      	mov	r3, r9
 8001f32:	72a3      	strb	r3, [r4, #10]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8001f34:	686b      	ldr	r3, [r5, #4]
 8001f36:	4303      	orrs	r3, r0
 8001f38:	606b      	str	r3, [r5, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8001f3a:	686b      	ldr	r3, [r5, #4]
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	606b      	str	r3, [r5, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001f40:	680b      	ldr	r3, [r1, #0]
 8001f42:	4303      	orrs	r3, r0
 8001f44:	600b      	str	r3, [r1, #0]
 8001f46:	6813      	ldr	r3, [r2, #0]
 8001f48:	4303      	orrs	r3, r0
 8001f4a:	6013      	str	r3, [r2, #0]
    }

	return 1;
}
 8001f4c:	bcc0      	pop	{r6, r7}
 8001f4e:	46b9      	mov	r9, r7
 8001f50:	46b0      	mov	r8, r6
 8001f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f54:	40003800 	.word	0x40003800
 8001f58:	4002001c 	.word	0x4002001c
 8001f5c:	40020030 	.word	0x40020030
 8001f60:	40020000 	.word	0x40020000

08001f64 <Put_inside_DMA1_Channel2_3_IRQ>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8001f64:	2220      	movs	r2, #32
 8001f66:	4b22      	ldr	r3, [pc, #136]	@ (8001ff0 <Put_inside_DMA1_Channel2_3_IRQ+0x8c>)
}



void Put_inside_DMA1_Channel2_3_IRQ(MA330_t *encd)
{
 8001f68:	b510      	push	{r4, lr}
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	0004      	movs	r4, r0
 8001f6e:	420a      	tst	r2, r1
 8001f70:	d02f      	beq.n	8001fd2 <Put_inside_DMA1_Channel2_3_IRQ+0x6e>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8001f72:	2002      	movs	r0, #2
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8001f74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8001f76:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff4 <Put_inside_DMA1_Channel2_3_IRQ+0x90>)
 8001f78:	3a1f      	subs	r2, #31
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	4391      	bics	r1, r2
 8001f7e:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8001f80:	6859      	ldr	r1, [r3, #4]
 8001f82:	4381      	bics	r1, r0
 8001f84:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001f86:	491c      	ldr	r1, [pc, #112]	@ (8001ff8 <Put_inside_DMA1_Channel2_3_IRQ+0x94>)
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8001f88:	6820      	ldr	r0, [r4, #0]
 8001f8a:	680b      	ldr	r3, [r1, #0]
 8001f8c:	4393      	bics	r3, r2
 8001f8e:	600b      	str	r3, [r1, #0]
 8001f90:	491a      	ldr	r1, [pc, #104]	@ (8001ffc <Put_inside_DMA1_Channel2_3_IRQ+0x98>)
 8001f92:	680b      	ldr	r3, [r1, #0]
 8001f94:	4393      	bics	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
 8001f98:	88a1      	ldrh	r1, [r4, #4]
 8001f9a:	f001 f89f 	bl	80030dc <HAL_GPIO_WritePin>
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	88a1      	ldrh	r1, [r4, #4]
 8001fa2:	6820      	ldr	r0, [r4, #0]
 8001fa4:	f001 f89a 	bl	80030dc <HAL_GPIO_WritePin>
    const float angle_raw = (float)((raw_data >> 2) & 0x3FFF) * ANGLE_SCALE_FACTOR;
 8001fa8:	88e0      	ldrh	r0, [r4, #6]
 8001faa:	ba40      	rev16	r0, r0
 8001fac:	b280      	uxth	r0, r0
 8001fae:	0880      	lsrs	r0, r0, #2
 8001fb0:	f7fe fa8e 	bl	80004d0 <__aeabi_i2f>
 8001fb4:	4912      	ldr	r1, [pc, #72]	@ (8002000 <Put_inside_DMA1_Channel2_3_IRQ+0x9c>)
 8001fb6:	f7fe f931 	bl	800021c <__aeabi_fmul>

        cs_high(encd);

        MA330_get_degree(encd);

        tps_tot=(uint32_t ) TIM2->CNT-tps1;
 8001fba:	2380      	movs	r3, #128	@ 0x80
 8001fbc:	4911      	ldr	r1, [pc, #68]	@ (8002004 <Put_inside_DMA1_Channel2_3_IRQ+0xa0>)
 8001fbe:	05db      	lsls	r3, r3, #23
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc2:	6809      	ldr	r1, [r1, #0]
 8001fc4:	4a10      	ldr	r2, [pc, #64]	@ (8002008 <Put_inside_DMA1_Channel2_3_IRQ+0xa4>)
 8001fc6:	1a5b      	subs	r3, r3, r1
 8001fc8:	6013      	str	r3, [r2, #0]

        encd->g_spi_done = 1;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	33ff      	adds	r3, #255	@ 0xff
    encd->prev_raw_angle = angle_raw;
 8001fce:	6160      	str	r0, [r4, #20]
        encd->g_spi_done = 1;
 8001fd0:	8163      	strh	r3, [r4, #10]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 8001fd2:	2280      	movs	r2, #128	@ 0x80
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <Put_inside_DMA1_Channel2_3_IRQ+0x8c>)
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	420a      	tst	r2, r1
 8001fda:	d000      	beq.n	8001fde <Put_inside_DMA1_Channel2_3_IRQ+0x7a>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 8001fdc:	605a      	str	r2, [r3, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3)) ? 1UL : 0UL);
 8001fde:	2280      	movs	r2, #128	@ 0x80
 8001fe0:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <Put_inside_DMA1_Channel2_3_IRQ+0x8c>)
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	6819      	ldr	r1, [r3, #0]
 8001fe6:	4211      	tst	r1, r2
 8001fe8:	d000      	beq.n	8001fec <Put_inside_DMA1_Channel2_3_IRQ+0x88>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 8001fea:	605a      	str	r2, [r3, #4]
    if (LL_DMA_IsActiveFlag_TE3(DMA1)) {
        LL_DMA_ClearFlag_TE3(DMA1);
        // erreur
    }

}
 8001fec:	bd10      	pop	{r4, pc}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	40003800 	.word	0x40003800
 8001ff8:	4002001c 	.word	0x4002001c
 8001ffc:	40020030 	.word	0x40020030
 8002000:	3cb40000 	.word	0x3cb40000
 8002004:	20000034 	.word	0x20000034
 8002008:	20000030 	.word	0x20000030

0800200c <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800200c:	b510      	push	{r4, lr}
 800200e:	b094      	sub	sp, #80	@ 0x50

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002010:	2210      	movs	r2, #16
 8002012:	2100      	movs	r1, #0
 8002014:	a804      	add	r0, sp, #16
 8002016:	f002 fc03 	bl	8004820 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800201a:	2218      	movs	r2, #24
 800201c:	2100      	movs	r1, #0
 800201e:	a808      	add	r0, sp, #32
 8002020:	f002 fbfe 	bl	8004820 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	2210      	movs	r2, #16
 8002026:	2100      	movs	r1, #0
 8002028:	a810      	add	r0, sp, #64	@ 0x40
 800202a:	f002 fbf9 	bl	8004820 <memset>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 800202e:	2180      	movs	r1, #128	@ 0x80
 8002030:	4b98      	ldr	r3, [pc, #608]	@ (8002294 <MX_ADC1_Init+0x288>)
 8002032:	0349      	lsls	r1, r1, #13
 8002034:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	20a0      	movs	r0, #160	@ 0xa0
 8002038:	430a      	orrs	r2, r1
 800203a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800203c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800203e:	05c0      	lsls	r0, r0, #23
 8002040:	400a      	ands	r2, r1
 8002042:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8002044:	9a03      	ldr	r2, [sp, #12]
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8002046:	2201      	movs	r2, #1
 8002048:	6b59      	ldr	r1, [r3, #52]	@ 0x34

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800204a:	2400      	movs	r4, #0
 800204c:	4311      	orrs	r1, r2
 800204e:	6359      	str	r1, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002050:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002052:	400a      	ands	r2, r1
 8002054:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002056:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 8002058:	2202      	movs	r2, #2
 800205a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800205c:	4311      	orrs	r1, r2
 800205e:	6359      	str	r1, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	a90e      	add	r1, sp, #56	@ 0x38
 8002064:	401a      	ands	r2, r3
 8002066:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002068:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800206a:	2220      	movs	r2, #32
 800206c:	2303      	movs	r3, #3
 800206e:	920e      	str	r2, [sp, #56]	@ 0x38
 8002070:	930f      	str	r3, [sp, #60]	@ 0x3c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f002 fb13 	bl	800469c <LL_GPIO_Init>
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002078:	2240      	movs	r2, #64	@ 0x40
 800207a:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	a90e      	add	r1, sp, #56	@ 0x38
 800207e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002080:	920e      	str	r2, [sp, #56]	@ 0x38
 8002082:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002084:	9412      	str	r4, [sp, #72]	@ 0x48
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f002 fb09 	bl	800469c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800208c:	2280      	movs	r2, #128	@ 0x80
 800208e:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	a90e      	add	r1, sp, #56	@ 0x38
 8002092:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002094:	920e      	str	r2, [sp, #56]	@ 0x38
 8002096:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002098:	9412      	str	r4, [sp, #72]	@ 0x48
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f002 faff 	bl	800469c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800209e:	2202      	movs	r2, #2
 80020a0:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a2:	a90e      	add	r1, sp, #56	@ 0x38
 80020a4:	487c      	ldr	r0, [pc, #496]	@ (8002298 <MX_ADC1_Init+0x28c>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80020a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80020a8:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020aa:	9412      	str	r4, [sp, #72]	@ 0x48
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f002 faf6 	bl	800469c <LL_GPIO_Init>
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80020b0:	213f      	movs	r1, #63	@ 0x3f
 80020b2:	4a7a      	ldr	r2, [pc, #488]	@ (800229c <MX_ADC1_Init+0x290>)
 80020b4:	6813      	ldr	r3, [r2, #0]
 80020b6:	438b      	bics	r3, r1
 80020b8:	393a      	subs	r1, #58	@ 0x3a
 80020ba:	430b      	orrs	r3, r1
 80020bc:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80020be:	4b78      	ldr	r3, [pc, #480]	@ (80022a0 <MX_ADC1_Init+0x294>)
 80020c0:	4978      	ldr	r1, [pc, #480]	@ (80022a4 <MX_ADC1_Init+0x298>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	400a      	ands	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4977      	ldr	r1, [pc, #476]	@ (80022a8 <MX_ADC1_Init+0x29c>)
 80020cc:	400a      	ands	r2, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80020ce:	2120      	movs	r1, #32
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80020d0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	3120      	adds	r1, #32
 80020dc:	438a      	bics	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	3140      	adds	r1, #64	@ 0x40
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	4a70      	ldr	r2, [pc, #448]	@ (80022ac <MX_ADC1_Init+0x2a0>)
 80020ec:	4011      	ands	r1, r2
 80020ee:	2280      	movs	r2, #128	@ 0x80
 80020f0:	0052      	lsls	r2, r2, #1
 80020f2:	430a      	orrs	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80020f6:	6819      	ldr	r1, [r3, #0]
 80020f8:	4a6d      	ldr	r2, [pc, #436]	@ (80022b0 <MX_ADC1_Init+0x2a4>)
 80020fa:	4011      	ands	r1, r2
 80020fc:	2280      	movs	r2, #128	@ 0x80
 80020fe:	00d2      	lsls	r2, r2, #3
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
   #define ADC_CHANNEL_CONF_RDY_TIMEOUT_MS ( 1U)
   #if (USE_TIMEOUT == 1)
   uint32_t Timeout ; /* Variable used for Timeout management */
   #endif /* USE_TIMEOUT */

  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8002104:	2380      	movs	r3, #128	@ 0x80
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002106:	9405      	str	r4, [sp, #20]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002108:	9406      	str	r4, [sp, #24]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800210a:	9407      	str	r4, [sp, #28]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800210c:	4c69      	ldr	r4, [pc, #420]	@ (80022b4 <MX_ADC1_Init+0x2a8>)
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 800210e:	05db      	lsls	r3, r3, #23
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002110:	0020      	movs	r0, r4
 8002112:	a904      	add	r1, sp, #16
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8002114:	9304      	str	r3, [sp, #16]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002116:	f002 fa7b 	bl	8004610 <LL_ADC_Init>
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 800211a:	2280      	movs	r2, #128	@ 0x80
 800211c:	68e3      	ldr	r3, [r4, #12]
 800211e:	0392      	lsls	r2, r2, #14
 8002120:	4313      	orrs	r3, r2
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8002122:	2280      	movs	r2, #128	@ 0x80
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 8002124:	60e3      	str	r3, [r4, #12]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8002126:	0192      	lsls	r2, r2, #6
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	4213      	tst	r3, r2
 800212c:	d0fc      	beq.n	8002128 <MX_ADC1_Init+0x11c>
     }
   #endif /* USE_TIMEOUT */
     }
   /* Clear flag ADC channel configuration ready */
   LL_ADC_ClearFlag_CCRDY(ADC1);
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM1_TRGO2;
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	00db      	lsls	r3, r3, #3
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 8002132:	6022      	str	r2, [r4, #0]
 8002134:	9308      	str	r3, [sp, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS;
 8002136:	23f0      	movs	r3, #240	@ 0xf0
 8002138:	041b      	lsls	r3, r3, #16
 800213a:	9309      	str	r3, [sp, #36]	@ 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	930a      	str	r3, [sp, #40]	@ 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002140:	930b      	str	r3, [sp, #44]	@ 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	2201      	movs	r2, #1
 8002146:	015b      	lsls	r3, r3, #5
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002148:	a908      	add	r1, sp, #32
 800214a:	485a      	ldr	r0, [pc, #360]	@ (80022b4 <MX_ADC1_Init+0x2a8>)
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800214c:	920c      	str	r2, [sp, #48]	@ 0x30
 800214e:	930d      	str	r3, [sp, #52]	@ 0x34
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002150:	f002 fa78 	bl	8004644 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8002154:	2201      	movs	r2, #1
 8002156:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002158:	4957      	ldr	r1, [pc, #348]	@ (80022b8 <MX_ADC1_Init+0x2ac>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 800215a:	4393      	bics	r3, r2
 800215c:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LFTRIG, TriggerFrequencyMode);
 800215e:	6923      	ldr	r3, [r4, #16]
 8002160:	4a56      	ldr	r2, [pc, #344]	@ (80022bc <MX_ADC1_Init+0x2b0>)
 8002162:	4013      	ands	r3, r2
 8002164:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8002166:	68e2      	ldr	r2, [r4, #12]
 8002168:	4b51      	ldr	r3, [pc, #324]	@ (80022b0 <MX_ADC1_Init+0x2a4>)
 800216a:	401a      	ands	r2, r3
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	4313      	orrs	r3, r2
 8002172:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002174:	680a      	ldr	r2, [r1, #0]
 8002176:	4b52      	ldr	r3, [pc, #328]	@ (80022c0 <MX_ADC1_Init+0x2b4>)
 8002178:	401a      	ands	r2, r3
 800217a:	2380      	movs	r3, #128	@ 0x80
 800217c:	03db      	lsls	r3, r3, #15
 800217e:	4313      	orrs	r3, r2
  MODIFY_REG(ADCx->SMPR,
 8002180:	2207      	movs	r2, #7
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002182:	600b      	str	r3, [r1, #0]
  MODIFY_REG(ADCx->SMPR,
 8002184:	6963      	ldr	r3, [r4, #20]
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   __IO uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8002186:	494f      	ldr	r1, [pc, #316]	@ (80022c4 <MX_ADC1_Init+0x2b8>)
 8002188:	4393      	bics	r3, r2
 800218a:	3a05      	subs	r2, #5
 800218c:	4313      	orrs	r3, r2
 800218e:	6163      	str	r3, [r4, #20]
 8002190:	6963      	ldr	r3, [r4, #20]
 8002192:	326e      	adds	r2, #110	@ 0x6e
 8002194:	4393      	bics	r3, r2
 8002196:	6163      	str	r3, [r4, #20]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002198:	6863      	ldr	r3, [r4, #4]
 800219a:	3a6c      	subs	r2, #108	@ 0x6c
 800219c:	4393      	bics	r3, r2
 800219e:	6063      	str	r3, [r4, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 80021a0:	6863      	ldr	r3, [r4, #4]
 80021a2:	3204      	adds	r2, #4
 80021a4:	4393      	bics	r3, r2
 80021a6:	6063      	str	r3, [r4, #4]
  MODIFY_REG(ADCx->CR,
 80021a8:	68a2      	ldr	r2, [r4, #8]
 80021aa:	4b47      	ldr	r3, [pc, #284]	@ (80022c8 <MX_ADC1_Init+0x2bc>)
 80021ac:	401a      	ands	r2, r3
 80021ae:	2380      	movs	r3, #128	@ 0x80
 80021b0:	055b      	lsls	r3, r3, #21
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60a3      	str	r3, [r4, #8]
 80021b6:	4b45      	ldr	r3, [pc, #276]	@ (80022cc <MX_ADC1_Init+0x2c0>)
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	f7fd ffa3 	bl	8000104 <__udivsi3>
 80021be:	0083      	lsls	r3, r0, #2
 80021c0:	1818      	adds	r0, r3, r0
 80021c2:	210a      	movs	r1, #10
 80021c4:	0080      	lsls	r0, r0, #2
 80021c6:	f7fd ff9d 	bl	8000104 <__udivsi3>
 80021ca:	9000      	str	r0, [sp, #0]
   while(wait_loop_index != 0)
 80021cc:	9b00      	ldr	r3, [sp, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <MX_ADC1_Init+0x1d2>
     {
   wait_loop_index--;
 80021d2:	9b00      	ldr	r3, [sp, #0]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	9300      	str	r3, [sp, #0]
   while(wait_loop_index != 0)
 80021d8:	9b00      	ldr	r3, [sp, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f9      	bne.n	80021d2 <MX_ADC1_Init+0x1c6>
  MODIFY_REG(ADCx->CHSELR,
 80021de:	210f      	movs	r1, #15
 80021e0:	4b34      	ldr	r3, [pc, #208]	@ (80022b4 <MX_ADC1_Init+0x2a8>)
 80021e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021e4:	438a      	bics	r2, r1
 80021e6:	3909      	subs	r1, #9
 80021e8:	430a      	orrs	r2, r1
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 80021ea:	2180      	movs	r1, #128	@ 0x80
  MODIFY_REG(ADCx->CHSELR,
 80021ec:	629a      	str	r2, [r3, #40]	@ 0x28
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 80021ee:	0189      	lsls	r1, r1, #6
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	420a      	tst	r2, r1
 80021f4:	d0fc      	beq.n	80021f0 <MX_ADC1_Init+0x1e4>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 80021f6:	6019      	str	r1, [r3, #0]
  MODIFY_REG(ADCx->SMPR,
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	4935      	ldr	r1, [pc, #212]	@ (80022d0 <MX_ADC1_Init+0x2c4>)
 80021fc:	400a      	ands	r2, r1
  MODIFY_REG(ADCx->CHSELR,
 80021fe:	21f0      	movs	r1, #240	@ 0xf0
  MODIFY_REG(ADCx->SMPR,
 8002200:	615a      	str	r2, [r3, #20]
  MODIFY_REG(ADCx->CHSELR,
 8002202:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002204:	438a      	bics	r2, r1
 8002206:	3980      	subs	r1, #128	@ 0x80
 8002208:	430a      	orrs	r2, r1
 800220a:	629a      	str	r2, [r3, #40]	@ 0x28
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 800220c:	2280      	movs	r2, #128	@ 0x80
 800220e:	4b29      	ldr	r3, [pc, #164]	@ (80022b4 <MX_ADC1_Init+0x2a8>)
 8002210:	0192      	lsls	r2, r2, #6
 8002212:	6819      	ldr	r1, [r3, #0]
 8002214:	4211      	tst	r1, r2
 8002216:	d0fc      	beq.n	8002212 <MX_ADC1_Init+0x206>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 8002218:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->SMPR,
 800221a:	695a      	ldr	r2, [r3, #20]
 800221c:	492d      	ldr	r1, [pc, #180]	@ (80022d4 <MX_ADC1_Init+0x2c8>)
 800221e:	400a      	ands	r2, r1
 8002220:	615a      	str	r2, [r3, #20]
  MODIFY_REG(ADCx->CHSELR,
 8002222:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002224:	4a2c      	ldr	r2, [pc, #176]	@ (80022d8 <MX_ADC1_Init+0x2cc>)
 8002226:	4011      	ands	r1, r2
 8002228:	2290      	movs	r2, #144	@ 0x90
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	430a      	orrs	r2, r1
 800222e:	629a      	str	r2, [r3, #40]	@ 0x28
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8002230:	2280      	movs	r2, #128	@ 0x80
 8002232:	4b20      	ldr	r3, [pc, #128]	@ (80022b4 <MX_ADC1_Init+0x2a8>)
 8002234:	0192      	lsls	r2, r2, #6
 8002236:	6819      	ldr	r1, [r3, #0]
 8002238:	4211      	tst	r1, r2
 800223a:	d0fc      	beq.n	8002236 <MX_ADC1_Init+0x22a>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 800223c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->SMPR,
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	4926      	ldr	r1, [pc, #152]	@ (80022dc <MX_ADC1_Init+0x2d0>)
 8002242:	400a      	ands	r2, r1
 8002244:	615a      	str	r2, [r3, #20]
  MODIFY_REG(ADCx->CHSELR,
 8002246:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002248:	4a25      	ldr	r2, [pc, #148]	@ (80022e0 <MX_ADC1_Init+0x2d4>)
 800224a:	4011      	ands	r1, r2
 800224c:	22a0      	movs	r2, #160	@ 0xa0
 800224e:	01d2      	lsls	r2, r2, #7
 8002250:	430a      	orrs	r2, r1
 8002252:	629a      	str	r2, [r3, #40]	@ 0x28
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8002254:	2280      	movs	r2, #128	@ 0x80
 8002256:	4b17      	ldr	r3, [pc, #92]	@ (80022b4 <MX_ADC1_Init+0x2a8>)
 8002258:	0192      	lsls	r2, r2, #6
 800225a:	6819      	ldr	r1, [r3, #0]
 800225c:	4211      	tst	r1, r2
 800225e:	d0fc      	beq.n	800225a <MX_ADC1_Init+0x24e>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 8002260:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->SMPR,
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	491f      	ldr	r1, [pc, #124]	@ (80022e4 <MX_ADC1_Init+0x2d8>)
 8002266:	400a      	ands	r2, r1
 8002268:	615a      	str	r2, [r3, #20]
  MODIFY_REG(ADCx->CHSELR,
 800226a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800226c:	4a1e      	ldr	r2, [pc, #120]	@ (80022e8 <MX_ADC1_Init+0x2dc>)
 800226e:	4011      	ands	r1, r2
 8002270:	22d0      	movs	r2, #208	@ 0xd0
 8002272:	0312      	lsls	r2, r2, #12
 8002274:	430a      	orrs	r2, r1
 8002276:	629a      	str	r2, [r3, #40]	@ 0x28
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8002278:	2280      	movs	r2, #128	@ 0x80
 800227a:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <MX_ADC1_Init+0x2a8>)
 800227c:	0192      	lsls	r2, r2, #6
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	4211      	tst	r1, r2
 8002282:	d0fc      	beq.n	800227e <MX_ADC1_Init+0x272>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 8002284:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->SMPR,
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	4918      	ldr	r1, [pc, #96]	@ (80022ec <MX_ADC1_Init+0x2e0>)
 800228a:	400a      	ands	r2, r1
 800228c:	615a      	str	r2, [r3, #20]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_COMMON_1);
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800228e:	b014      	add	sp, #80	@ 0x50
 8002290:	bd10      	pop	{r4, pc}
 8002292:	46c0      	nop			@ (mov r8, r8)
 8002294:	40021000 	.word	0x40021000
 8002298:	50000400 	.word	0x50000400
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020008 	.word	0x40020008
 80022a4:	ffffbfef 	.word	0xffffbfef
 80022a8:	ffffcfff 	.word	0xffffcfff
 80022ac:	fffffcff 	.word	0xfffffcff
 80022b0:	fffff3ff 	.word	0xfffff3ff
 80022b4:	40012400 	.word	0x40012400
 80022b8:	40012708 	.word	0x40012708
 80022bc:	dfffffff 	.word	0xdfffffff
 80022c0:	fe3fffff 	.word	0xfe3fffff
 80022c4:	00030d40 	.word	0x00030d40
 80022c8:	6fffffe8 	.word	0x6fffffe8
 80022cc:	20000000 	.word	0x20000000
 80022d0:	ffffbfff 	.word	0xffffbfff
 80022d4:	ffff7fff 	.word	0xffff7fff
 80022d8:	fffff0ff 	.word	0xfffff0ff
 80022dc:	fffdffff 	.word	0xfffdffff
 80022e0:	ffff0fff 	.word	0xffff0fff
 80022e4:	ffffdfff 	.word	0xffffdfff
 80022e8:	fff0ffff 	.word	0xfff0ffff
 80022ec:	ffdfffff 	.word	0xffdfffff

080022f0 <ADC_PostLL_Init>:
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80022f0:	2101      	movs	r1, #1
 80022f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002368 <ADC_PostLL_Init+0x78>)
void ADC_PostLL_Init(foc_t * encd)
{
    /* --- DMA1 CH1: adresse periph/mem + longueur --- */
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
    LL_DMA_SetPeriphAddress (DMA1, LL_DMA_CHANNEL_1, (uint32_t)&ADC1->DR);
    LL_DMA_SetMemoryAddress (DMA1, LL_DMA_CHANNEL_1, (uint32_t)encd->adc_raw);
 80022f4:	3034      	adds	r0, #52	@ 0x34
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	438a      	bics	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 80022fc:	4a1b      	ldr	r2, [pc, #108]	@ (800236c <ADC_PostLL_Init+0x7c>)
 80022fe:	609a      	str	r2, [r3, #8]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8002300:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8002302:	2005      	movs	r0, #5
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	0c12      	lsrs	r2, r2, #16
 8002308:	0412      	lsls	r2, r2, #16
 800230a:	4302      	orrs	r2, r0
 800230c:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	3803      	subs	r0, #3
 8002312:	4302      	orrs	r2, r0
 8002314:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	3006      	adds	r0, #6
 800231a:	4302      	orrs	r2, r0
 800231c:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800231e:	4a14      	ldr	r2, [pc, #80]	@ (8002370 <ADC_PostLL_Init+0x80>)
 8002320:	6893      	ldr	r3, [r2, #8]
 8002322:	4219      	tst	r1, r3
 8002324:	d108      	bne.n	8002338 <ADC_PostLL_Init+0x48>
  MODIFY_REG(ADCx->CR,
 8002326:	6891      	ldr	r1, [r2, #8]
 8002328:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <ADC_PostLL_Init+0x84>)
 800232a:	4019      	ands	r1, r3
 800232c:	3318      	adds	r3, #24
 800232e:	430b      	orrs	r3, r1
 8002330:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002332:	6893      	ldr	r3, [r2, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	dbfc      	blt.n	8002332 <ADC_PostLL_Init+0x42>
  MODIFY_REG(ADCx->CR,
 8002338:	4b0d      	ldr	r3, [pc, #52]	@ (8002370 <ADC_PostLL_Init+0x80>)
 800233a:	490e      	ldr	r1, [pc, #56]	@ (8002374 <ADC_PostLL_Init+0x84>)
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	400a      	ands	r2, r1
 8002340:	2101      	movs	r1, #1
 8002342:	430a      	orrs	r2, r1
 8002344:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002346:	2201      	movs	r2, #1
 8002348:	6819      	ldr	r1, [r3, #0]
 800234a:	420a      	tst	r2, r1
 800234c:	d0fc      	beq.n	8002348 <ADC_PostLL_Init+0x58>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800234e:	4806      	ldr	r0, [pc, #24]	@ (8002368 <ADC_PostLL_Init+0x78>)
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	6801      	ldr	r1, [r0, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	6002      	str	r2, [r0, #0]
  MODIFY_REG(ADCx->CR,
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	4906      	ldr	r1, [pc, #24]	@ (8002374 <ADC_PostLL_Init+0x84>)
 800235c:	400a      	ands	r2, r1
 800235e:	2104      	movs	r1, #4
 8002360:	430a      	orrs	r2, r1
 8002362:	609a      	str	r2, [r3, #8]
    //TIM1_Config_TRGO2_OC4REF(1550);      // TRGO2 = OC4REF (exemple)

    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
    /* Armer le régulier (external trigger déjà configuré) */
    LL_ADC_REG_StartConversion(ADC1);
}
 8002364:	4770      	bx	lr
 8002366:	46c0      	nop			@ (mov r8, r8)
 8002368:	40020008 	.word	0x40020008
 800236c:	40012440 	.word	0x40012440
 8002370:	40012400 	.word	0x40012400
 8002374:	7fffffe8 	.word	0x7fffffe8

08002378 <INSIDE_DMA1_Channel1>:



void INSIDE_DMA1_Channel1(void)
{
 8002378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 800237a:	2208      	movs	r2, #8
 800237c:	46ce      	mov	lr, r9
 800237e:	4647      	mov	r7, r8
 8002380:	4b52      	ldr	r3, [pc, #328]	@ (80024cc <INSIDE_DMA1_Channel1+0x154>)
 8002382:	b580      	push	{r7, lr}
 8002384:	6819      	ldr	r1, [r3, #0]
 8002386:	420a      	tst	r2, r1
 8002388:	d000      	beq.n	800238c <INSIDE_DMA1_Channel1+0x14>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 800238a:	605a      	str	r2, [r3, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 800238c:	2202      	movs	r2, #2
 800238e:	4f4f      	ldr	r7, [pc, #316]	@ (80024cc <INSIDE_DMA1_Channel1+0x154>)
 8002390:	4690      	mov	r8, r2
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	421a      	tst	r2, r3
 8002396:	d100      	bne.n	800239a <INSIDE_DMA1_Channel1+0x22>
 8002398:	e093      	b.n	80024c2 <INSIDE_DMA1_Channel1+0x14a>
    /* Transfert complet ? */
    if (LL_DMA_IsActiveFlag_TC1(DMA1))
    {
        static uint8_t event_loop_count = 0;//CH6,CH7,CH9,CH5,VREFINT

        float VDDA=3.0 * VREFINT_CAL / hfoc.adc_raw[4];
 800239a:	4b4d      	ldr	r3, [pc, #308]	@ (80024d0 <INSIDE_DMA1_Channel1+0x158>)
 800239c:	8818      	ldrh	r0, [r3, #0]
 800239e:	f7ff faef 	bl	8001980 <__aeabi_i2d>
 80023a2:	2200      	movs	r2, #0
 80023a4:	4b4b      	ldr	r3, [pc, #300]	@ (80024d4 <INSIDE_DMA1_Channel1+0x15c>)
 80023a6:	f7fe fbfb 	bl	8000ba0 <__aeabi_dmul>
 80023aa:	4e4b      	ldr	r6, [pc, #300]	@ (80024d8 <INSIDE_DMA1_Channel1+0x160>)
 80023ac:	0004      	movs	r4, r0
 80023ae:	8fb0      	ldrh	r0, [r6, #60]	@ 0x3c
 80023b0:	000d      	movs	r5, r1
 80023b2:	f7ff fae5 	bl	8001980 <__aeabi_i2d>
 80023b6:	0002      	movs	r2, r0
 80023b8:	000b      	movs	r3, r1
 80023ba:	0020      	movs	r0, r4
 80023bc:	0029      	movs	r1, r5
 80023be:	f7fe f8d7 	bl	8000570 <__aeabi_ddiv>
 80023c2:	f7ff fb53 	bl	8001a6c <__aeabi_d2f>

    	hfoc.ia=(float) (RESISTOR * (((hfoc.adc_raw[0] * VDDA)/ 4096.0)-(VDDA/2)));
 80023c6:	21fc      	movs	r1, #252	@ 0xfc
 80023c8:	0589      	lsls	r1, r1, #22
        float VDDA=3.0 * VREFINT_CAL / hfoc.adc_raw[4];
 80023ca:	4681      	mov	r9, r0
    	hfoc.ia=(float) (RESISTOR * (((hfoc.adc_raw[0] * VDDA)/ 4096.0)-(VDDA/2)));
 80023cc:	f7fd ff26 	bl	800021c <__aeabi_fmul>
 80023d0:	f7ff fb04 	bl	80019dc <__aeabi_f2d>
 80023d4:	000d      	movs	r5, r1
 80023d6:	0004      	movs	r4, r0
 80023d8:	8eb0      	ldrh	r0, [r6, #52]	@ 0x34
 80023da:	f7fe f879 	bl	80004d0 <__aeabi_i2f>
 80023de:	4649      	mov	r1, r9
 80023e0:	f7fd ff1c 	bl	800021c <__aeabi_fmul>
 80023e4:	f7ff fafa 	bl	80019dc <__aeabi_f2d>
 80023e8:	2200      	movs	r2, #0
 80023ea:	4b3c      	ldr	r3, [pc, #240]	@ (80024dc <INSIDE_DMA1_Channel1+0x164>)
 80023ec:	f7fe fbd8 	bl	8000ba0 <__aeabi_dmul>
 80023f0:	0022      	movs	r2, r4
 80023f2:	002b      	movs	r3, r5
 80023f4:	f7fe feba 	bl	800116c <__aeabi_dsub>
 80023f8:	2200      	movs	r2, #0
 80023fa:	4b39      	ldr	r3, [pc, #228]	@ (80024e0 <INSIDE_DMA1_Channel1+0x168>)
 80023fc:	f7fe fbd0 	bl	8000ba0 <__aeabi_dmul>
 8002400:	f7ff fb34 	bl	8001a6c <__aeabi_d2f>
 8002404:	6670      	str	r0, [r6, #100]	@ 0x64
    	hfoc.ib=(float) (RESISTOR * (((hfoc.adc_raw[1] * VDDA)/ 4096.0)-(VDDA/2)));
 8002406:	8ef0      	ldrh	r0, [r6, #54]	@ 0x36
 8002408:	f7fe f862 	bl	80004d0 <__aeabi_i2f>
 800240c:	4649      	mov	r1, r9
 800240e:	f7fd ff05 	bl	800021c <__aeabi_fmul>
 8002412:	f7ff fae3 	bl	80019dc <__aeabi_f2d>
 8002416:	2200      	movs	r2, #0
 8002418:	4b30      	ldr	r3, [pc, #192]	@ (80024dc <INSIDE_DMA1_Channel1+0x164>)
 800241a:	f7fe fbc1 	bl	8000ba0 <__aeabi_dmul>
 800241e:	0022      	movs	r2, r4
 8002420:	002b      	movs	r3, r5
 8002422:	f7fe fea3 	bl	800116c <__aeabi_dsub>
 8002426:	2200      	movs	r2, #0
 8002428:	4b2d      	ldr	r3, [pc, #180]	@ (80024e0 <INSIDE_DMA1_Channel1+0x168>)
 800242a:	f7fe fbb9 	bl	8000ba0 <__aeabi_dmul>
 800242e:	f7ff fb1d 	bl	8001a6c <__aeabi_d2f>
 8002432:	66b0      	str	r0, [r6, #104]	@ 0x68
    	hfoc.ic=(float) (RESISTOR * (((hfoc.adc_raw[2] * VDDA)/ 4096.0)-(VDDA/2)));
 8002434:	8f30      	ldrh	r0, [r6, #56]	@ 0x38
 8002436:	f7fe f84b 	bl	80004d0 <__aeabi_i2f>
 800243a:	4649      	mov	r1, r9
 800243c:	f7fd feee 	bl	800021c <__aeabi_fmul>
 8002440:	f7ff facc 	bl	80019dc <__aeabi_f2d>
 8002444:	2200      	movs	r2, #0
 8002446:	4b25      	ldr	r3, [pc, #148]	@ (80024dc <INSIDE_DMA1_Channel1+0x164>)
 8002448:	f7fe fbaa 	bl	8000ba0 <__aeabi_dmul>
 800244c:	0022      	movs	r2, r4
 800244e:	002b      	movs	r3, r5
 8002450:	f7fe fe8c 	bl	800116c <__aeabi_dsub>
 8002454:	2200      	movs	r2, #0
 8002456:	4b22      	ldr	r3, [pc, #136]	@ (80024e0 <INSIDE_DMA1_Channel1+0x168>)
 8002458:	f7fe fba2 	bl	8000ba0 <__aeabi_dmul>
 800245c:	f7ff fb06 	bl	8001a6c <__aeabi_d2f>
 8002460:	66f0      	str	r0, [r6, #108]	@ 0x6c
    	hfoc.v_bus=(float) (VBUSDIVIDER * hfoc.adc_raw[3] * VDDA) / 4096.0;
 8002462:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
 8002464:	f7fe f834 	bl	80004d0 <__aeabi_i2f>
 8002468:	491e      	ldr	r1, [pc, #120]	@ (80024e4 <INSIDE_DMA1_Channel1+0x16c>)
 800246a:	f7fd fed7 	bl	800021c <__aeabi_fmul>
 800246e:	4649      	mov	r1, r9
 8002470:	f7fd fed4 	bl	800021c <__aeabi_fmul>
 8002474:	21e6      	movs	r1, #230	@ 0xe6
 8002476:	0589      	lsls	r1, r1, #22
 8002478:	f7fd fed0 	bl	800021c <__aeabi_fmul>
          }
          default:
          break;
        }

        tpsadc=TIM1->CNT;
 800247c:	4b1a      	ldr	r3, [pc, #104]	@ (80024e8 <INSIDE_DMA1_Channel1+0x170>)
 800247e:	4a1b      	ldr	r2, [pc, #108]	@ (80024ec <INSIDE_DMA1_Channel1+0x174>)
 8002480:	6a59      	ldr	r1, [r3, #36]	@ 0x24
    	hfoc.v_bus=(float) (VBUSDIVIDER * hfoc.adc_raw[3] * VDDA) / 4096.0;
 8002482:	6730      	str	r0, [r6, #112]	@ 0x70
        tpsadc=TIM1->CNT;
 8002484:	6011      	str	r1, [r2, #0]
        diradc = (uint8_t)((TIM1->CR1 & TIM_CR1_DIR) ? 1u : 0u);
 8002486:	2101      	movs	r1, #1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8002488:	2005      	movs	r0, #5
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a18      	ldr	r2, [pc, #96]	@ (80024f0 <INSIDE_DMA1_Channel1+0x178>)
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	400b      	ands	r3, r1
 8002492:	7013      	strb	r3, [r2, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8002494:	4b17      	ldr	r3, [pc, #92]	@ (80024f4 <INSIDE_DMA1_Channel1+0x17c>)


        LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
        LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)hfoc.adc_raw);
 8002496:	3634      	adds	r6, #52	@ 0x34
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	438a      	bics	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800249e:	60de      	str	r6, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	0c12      	lsrs	r2, r2, #16
 80024a4:	0412      	lsls	r2, r2, #16
 80024a6:	4302      	orrs	r2, r0
 80024a8:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80024b0:	4643      	mov	r3, r8
 80024b2:	4a11      	ldr	r2, [pc, #68]	@ (80024f8 <INSIDE_DMA1_Channel1+0x180>)
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	6893      	ldr	r3, [r2, #8]
 80024b8:	4910      	ldr	r1, [pc, #64]	@ (80024fc <INSIDE_DMA1_Channel1+0x184>)
 80024ba:	400b      	ands	r3, r1
 80024bc:	2104      	movs	r1, #4
 80024be:	430b      	orrs	r3, r1
 80024c0:	6093      	str	r3, [r2, #8]
        LL_ADC_REG_StartConversion(ADC1);



    }
}
 80024c2:	bcc0      	pop	{r6, r7}
 80024c4:	46b9      	mov	r9, r7
 80024c6:	46b0      	mov	r8, r6
 80024c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	40020000 	.word	0x40020000
 80024d0:	1fff75aa 	.word	0x1fff75aa
 80024d4:	40080000 	.word	0x40080000
 80024d8:	20000038 	.word	0x20000038
 80024dc:	3f300000 	.word	0x3f300000
 80024e0:	40590000 	.word	0x40590000
 80024e4:	40c00000 	.word	0x40c00000
 80024e8:	40012c00 	.word	0x40012c00
 80024ec:	2000002c 	.word	0x2000002c
 80024f0:	20000028 	.word	0x20000028
 80024f4:	40020008 	.word	0x40020008
 80024f8:	40012400 	.word	0x40012400
 80024fc:	7fffffe8 	.word	0x7fffffe8

08002500 <MX_DMA_Init>:
  SET_BIT(RCC->AHBENR, Periphs);
 8002500:	2301      	movs	r3, #1
 8002502:	4a0f      	ldr	r2, [pc, #60]	@ (8002540 <MX_DMA_Init+0x40>)

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002504:	b082      	sub	sp, #8
 8002506:	6b91      	ldr	r1, [r2, #56]	@ 0x38
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002508:	480e      	ldr	r0, [pc, #56]	@ (8002544 <MX_DMA_Init+0x44>)
 800250a:	4319      	orrs	r1, r3
 800250c:	6391      	str	r1, [r2, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800250e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002510:	4013      	ands	r3, r2
 8002512:	22c2      	movs	r2, #194	@ 0xc2
 8002514:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002516:	9b01      	ldr	r3, [sp, #4]
 8002518:	4b0b      	ldr	r3, [pc, #44]	@ (8002548 <MX_DMA_Init+0x48>)
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	5899      	ldr	r1, [r3, r2]
 800251e:	4001      	ands	r1, r0
 8002520:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002522:	2180      	movs	r1, #128	@ 0x80
 8002524:	0089      	lsls	r1, r1, #2
 8002526:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002528:	4908      	ldr	r1, [pc, #32]	@ (800254c <MX_DMA_Init+0x4c>)
 800252a:	5898      	ldr	r0, [r3, r2]
 800252c:	4008      	ands	r0, r1
 800252e:	2180      	movs	r1, #128	@ 0x80
 8002530:	03c9      	lsls	r1, r1, #15
 8002532:	4301      	orrs	r1, r0
 8002534:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002536:	32f8      	adds	r2, #248	@ 0xf8
 8002538:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1);
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);

}
 800253a:	b002      	add	sp, #8
 800253c:	4770      	bx	lr
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	40021000 	.word	0x40021000
 8002544:	ffff00ff 	.word	0xffff00ff
 8002548:	e000e100 	.word	0xe000e100
 800254c:	ff00ffff 	.word	0xff00ffff

08002550 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002552:	46c6      	mov	lr, r8
 8002554:	b500      	push	{lr}
 8002556:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	2214      	movs	r2, #20
 800255a:	2100      	movs	r1, #0
 800255c:	a804      	add	r0, sp, #16
 800255e:	f002 f95f 	bl	8004820 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002562:	2220      	movs	r2, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002564:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002566:	2702      	movs	r7, #2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002568:	4b2b      	ldr	r3, [pc, #172]	@ (8002618 <MX_GPIO_Init+0xc8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|HALL_CS_Pin, GPIO_PIN_RESET);
 800256a:	26a0      	movs	r6, #160	@ 0xa0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800256c:	6b59      	ldr	r1, [r3, #52]	@ 0x34

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002570:	4311      	orrs	r1, r2
 8002572:	6359      	str	r1, [r3, #52]	@ 0x34
 8002574:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|HALL_CS_Pin, GPIO_PIN_RESET);
 8002576:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002578:	400a      	ands	r2, r1
 800257a:	9201      	str	r2, [sp, #4]
 800257c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8002580:	2101      	movs	r1, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	432a      	orrs	r2, r5
 8002584:	635a      	str	r2, [r3, #52]	@ 0x34
 8002586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002588:	402a      	ands	r2, r5
 800258a:	9202      	str	r2, [sp, #8]
 800258c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800258e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002590:	433a      	orrs	r2, r7
 8002592:	635a      	str	r2, [r3, #52]	@ 0x34
 8002594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8002596:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002598:	403b      	ands	r3, r7
 800259a:	9303      	str	r3, [sp, #12]
 800259c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 800259e:	4b1f      	ldr	r3, [pc, #124]	@ (800261c <MX_GPIO_Init+0xcc>)
 80025a0:	4698      	mov	r8, r3
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 fd9a 	bl	80030dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|HALL_CS_Pin, GPIO_PIN_RESET);
 80025a8:	2200      	movs	r2, #0
 80025aa:	0030      	movs	r0, r6
 80025ac:	491c      	ldr	r1, [pc, #112]	@ (8002620 <MX_GPIO_Init+0xd0>)
 80025ae:	f000 fd95 	bl	80030dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025b2:	4640      	mov	r0, r8
 80025b4:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025b6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025be:	f000 fc8d 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025c2:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c4:	0030      	movs	r0, r6
 80025c6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025c8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ca:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ce:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d0:	f000 fc84 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80025d4:	2280      	movs	r2, #128	@ 0x80
 80025d6:	2388      	movs	r3, #136	@ 0x88
 80025d8:	0152      	lsls	r2, r2, #5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80025dc:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025de:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80025e0:	9204      	str	r2, [sp, #16]
 80025e2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	f000 fc79 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_CS_Pin */
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 80025ea:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 80025ec:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 80025ee:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 80025f0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 80025f2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 80025fa:	f000 fc6f 	bl	8002edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2103      	movs	r1, #3
 8002602:	2007      	movs	r0, #7
 8002604:	f000 fc1a 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002608:	2007      	movs	r0, #7
 800260a:	f000 fc41 	bl	8002e90 <HAL_NVIC_EnableIRQ>

}
 800260e:	b00a      	add	sp, #40	@ 0x28
 8002610:	bc80      	pop	{r7}
 8002612:	46b8      	mov	r8, r7
 8002614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	40021000 	.word	0x40021000
 800261c:	50001400 	.word	0x50001400
 8002620:	0000800c 	.word	0x0000800c

08002624 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8002624:	b510      	push	{r4, lr}

	HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_0);
 8002626:	2101      	movs	r1, #1
 8002628:	4801      	ldr	r0, [pc, #4]	@ (8002630 <HAL_GPIO_EXTI_Rising_Callback+0xc>)
 800262a:	f000 fd5d 	bl	80030e8 <HAL_GPIO_TogglePin>


}
 800262e:	bd10      	pop	{r4, pc}
 8002630:	50001400 	.word	0x50001400

08002634 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8002634:	b510      	push	{r4, lr}
 8002636:	2101      	movs	r1, #1
 8002638:	4801      	ldr	r0, [pc, #4]	@ (8002640 <HAL_GPIO_EXTI_Falling_Callback+0xc>)
 800263a:	f000 fd55 	bl	80030e8 <HAL_GPIO_TogglePin>
 800263e:	bd10      	pop	{r4, pc}
 8002640:	50001400 	.word	0x50001400

08002644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002644:	b500      	push	{lr}
 8002646:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002648:	2238      	movs	r2, #56	@ 0x38
 800264a:	2100      	movs	r1, #0
 800264c:	a804      	add	r0, sp, #16
 800264e:	f002 f8e7 	bl	8004820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002652:	2210      	movs	r2, #16
 8002654:	2100      	movs	r1, #0
 8002656:	4668      	mov	r0, sp
 8002658:	f002 f8e2 	bl	8004820 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800265c:	2080      	movs	r0, #128	@ 0x80
 800265e:	0080      	lsls	r0, r0, #2
 8002660:	f000 fd64 	bl	800312c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002664:	2302      	movs	r3, #2
 8002666:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002668:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800266a:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 16;
 800266c:	330e      	adds	r3, #14
 800266e:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8002670:	23e0      	movs	r3, #224	@ 0xe0
 8002672:	031b      	lsls	r3, r3, #12
 8002674:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8002676:	23e0      	movs	r3, #224	@ 0xe0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002678:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800267a:	051b      	lsls	r3, r3, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800267c:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800267e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8002680:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002682:	2140      	movs	r1, #64	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002684:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002686:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8002688:	05db      	lsls	r3, r3, #23
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800268a:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800268c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800268e:	9109      	str	r1, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002690:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8002692:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002694:	f000 fd7a 	bl	800318c <HAL_RCC_OscConfig>
 8002698:	2800      	cmp	r0, #0
 800269a:	d001      	beq.n	80026a0 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800269c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800269e:	e7fe      	b.n	800269e <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a0:	2207      	movs	r2, #7
 80026a2:	2302      	movs	r3, #2
 80026a4:	9200      	str	r2, [sp, #0]
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026ac:	2102      	movs	r1, #2
 80026ae:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026b0:	9202      	str	r2, [sp, #8]
 80026b2:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026b4:	f001 f820 	bl	80036f8 <HAL_RCC_ClockConfig>
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d001      	beq.n	80026c0 <SystemClock_Config+0x7c>
 80026bc:	b672      	cpsid	i
	while (1)
 80026be:	e7fe      	b.n	80026be <SystemClock_Config+0x7a>
}
 80026c0:	b013      	add	sp, #76	@ 0x4c
 80026c2:	bd00      	pop	{pc}

080026c4 <main>:
{
 80026c4:	b510      	push	{r4, lr}
  HAL_Init();
 80026c6:	f000 fb81 	bl	8002dcc <HAL_Init>
  SystemClock_Config();
 80026ca:	f7ff ffbb 	bl	8002644 <SystemClock_Config>
  MX_GPIO_Init();
 80026ce:	f7ff ff3f 	bl	8002550 <MX_GPIO_Init>
  MX_DMA_Init();
 80026d2:	f7ff ff15 	bl	8002500 <MX_DMA_Init>
  MX_ADC1_Init();
 80026d6:	f7ff fc99 	bl	800200c <MX_ADC1_Init>
  MX_SPI2_Init();
 80026da:	f000 f84b 	bl	8002774 <MX_SPI2_Init>
  MX_TIM1_Init();
 80026de:	f000 fa3f 	bl	8002b60 <MX_TIM1_Init>
  MX_TIM2_Init();
 80026e2:	f000 f967 	bl	80029b4 <MX_TIM2_Init>
  MA330_Init(&ma330data, HALL_CS_GPIO_Port, HALL_CS_Pin,NORMAL_FW);
 80026e6:	2280      	movs	r2, #128	@ 0x80
 80026e8:	21a0      	movs	r1, #160	@ 0xa0
 80026ea:	2366      	movs	r3, #102	@ 0x66
 80026ec:	0212      	lsls	r2, r2, #8
 80026ee:	05c9      	lsls	r1, r1, #23
 80026f0:	481a      	ldr	r0, [pc, #104]	@ (800275c <main+0x98>)
 80026f2:	f7ff fb93 	bl	8001e1c <MA330_Init>
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4 | TIM_IT_TRIGGER | TIM_IT_COM | TIM_IT_BREAK);
 80026f6:	21ff      	movs	r1, #255	@ 0xff
 80026f8:	4c19      	ldr	r4, [pc, #100]	@ (8002760 <main+0x9c>)
 80026fa:	6823      	ldr	r3, [r4, #0]
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80026fc:	0020      	movs	r0, r4
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4 | TIM_IT_TRIGGER | TIM_IT_COM | TIM_IT_BREAK);
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	438a      	bics	r2, r1
 8002702:	60da      	str	r2, [r3, #12]
  __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4 | TIM_IT_TRIGGER | TIM_IT_COM | TIM_IT_BREAK);
 8002704:	4a17      	ldr	r2, [pc, #92]	@ (8002764 <main+0xa0>)
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8002706:	39fe      	subs	r1, #254	@ 0xfe
  __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4 | TIM_IT_TRIGGER | TIM_IT_COM | TIM_IT_BREAK);
 8002708:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	430a      	orrs	r2, r1
 800270e:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002710:	2100      	movs	r1, #0
 8002712:	f001 fb59 	bl	8003dc8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8002716:	2100      	movs	r1, #0
 8002718:	0020      	movs	r0, r4
 800271a:	f001 fe9f 	bl	800445c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800271e:	2104      	movs	r1, #4
 8002720:	0020      	movs	r0, r4
 8002722:	f001 fb51 	bl	8003dc8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8002726:	2104      	movs	r1, #4
 8002728:	0020      	movs	r0, r4
 800272a:	f001 fe97 	bl	800445c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800272e:	2108      	movs	r1, #8
 8002730:	0020      	movs	r0, r4
 8002732:	f001 fb49 	bl	8003dc8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8002736:	2108      	movs	r1, #8
 8002738:	0020      	movs	r0, r4
 800273a:	f001 fe8f 	bl	800445c <HAL_TIMEx_PWMN_Start>
	ADC_PostLL_Init(&hfoc);
 800273e:	480a      	ldr	r0, [pc, #40]	@ (8002768 <main+0xa4>)
 8002740:	f7ff fdd6 	bl	80022f0 <ADC_PostLL_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002744:	210c      	movs	r1, #12
 8002746:	0020      	movs	r0, r4
 8002748:	f001 fb3e 	bl	8003dc8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim2);
 800274c:	4807      	ldr	r0, [pc, #28]	@ (800276c <main+0xa8>)
 800274e:	f001 faa3 	bl	8003c98 <HAL_TIM_Base_Start>
		HAL_Delay(5);
 8002752:	2005      	movs	r0, #5
 8002754:	f000 fb60 	bl	8002e18 <HAL_Delay>
	while (1)
 8002758:	e7fb      	b.n	8002752 <main+0x8e>
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	20000174 	.word	0x20000174
 8002760:	200001fc 	.word	0x200001fc
 8002764:	ffffff00 	.word	0xffffff00
 8002768:	20000038 	.word	0x20000038
 800276c:	200001b0 	.word	0x200001b0

08002770 <Error_Handler>:
 8002770:	b672      	cpsid	i
	while (1)
 8002772:	e7fe      	b.n	8002772 <Error_Handler+0x2>

08002774 <MX_SPI2_Init>:
extern MA330_t ma330data;
/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002776:	46de      	mov	lr, fp
 8002778:	4657      	mov	r7, sl
 800277a:	464e      	mov	r6, r9
 800277c:	4645      	mov	r5, r8
 800277e:	b5e0      	push	{r5, r6, r7, lr}
 8002780:	b095      	sub	sp, #84	@ 0x54

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002782:	2228      	movs	r2, #40	@ 0x28
 8002784:	2100      	movs	r1, #0
 8002786:	a80a      	add	r0, sp, #40	@ 0x28
 8002788:	f002 f84a 	bl	8004820 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	2210      	movs	r2, #16
 800278e:	2100      	movs	r1, #0
 8002790:	a806      	add	r0, sp, #24
 8002792:	f002 f845 	bl	8004820 <memset>
  SET_BIT(RCC->APBENR1, Periphs);
 8002796:	2180      	movs	r1, #128	@ 0x80
 8002798:	4b5b      	ldr	r3, [pc, #364]	@ (8002908 <MX_SPI2_Init+0x194>)
 800279a:	01c9      	lsls	r1, r1, #7
 800279c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	20a0      	movs	r0, #160	@ 0xa0
 80027a0:	430a      	orrs	r2, r1
 80027a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80027a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027a6:	05c0      	lsls	r0, r0, #23
 80027a8:	400a      	ands	r2, r1
 80027aa:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80027ac:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->IOPENR, Periphs);
 80027ae:	2201      	movs	r2, #1
 80027b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027b2:	2400      	movs	r4, #0
 80027b4:	4311      	orrs	r1, r2
 80027b6:	6359      	str	r1, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80027b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80027ba:	2740      	movs	r7, #64	@ 0x40
 80027bc:	400a      	ands	r2, r1
  SET_BIT(RCC->IOPENR, Periphs);
 80027be:	2102      	movs	r1, #2
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80027c0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80027c2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 80027c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027c6:	4688      	mov	r8, r1
 80027c8:	430a      	orrs	r2, r1
 80027ca:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80027cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80027ce:	2201      	movs	r2, #1
 80027d0:	400b      	ands	r3, r1
 80027d2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80027d4:	9b01      	ldr	r3, [sp, #4]
 80027d6:	2302      	movs	r3, #2
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d8:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80027da:	9204      	str	r2, [sp, #16]
 80027dc:	9305      	str	r3, [sp, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027de:	f001 ff5d 	bl	800469c <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027e2:	4643      	mov	r3, r8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027e4:	2200      	movs	r2, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027e6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027e8:	2304      	movs	r3, #4
 80027ea:	9208      	str	r2, [sp, #32]
 80027ec:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ee:	4b47      	ldr	r3, [pc, #284]	@ (800290c <MX_SPI2_Init+0x198>)
 80027f0:	a904      	add	r1, sp, #16
 80027f2:	0018      	movs	r0, r3
 80027f4:	4699      	mov	r9, r3
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027f6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027f8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80027fa:	9704      	str	r7, [sp, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fc:	f001 ff4e 	bl	800469c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002800:	4643      	mov	r3, r8
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002802:	2680      	movs	r6, #128	@ 0x80
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002804:	2200      	movs	r2, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002806:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002808:	2301      	movs	r3, #1
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280a:	a904      	add	r1, sp, #16
 800280c:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800280e:	9208      	str	r2, [sp, #32]
 8002810:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002812:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002814:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002816:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002818:	f001 ff40 	bl	800469c <LL_GPIO_Init>
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800281c:	213f      	movs	r1, #63	@ 0x3f
 800281e:	4a3c      	ldr	r2, [pc, #240]	@ (8002910 <MX_SPI2_Init+0x19c>)
 8002820:	468b      	mov	fp, r1
 8002822:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8002824:	483b      	ldr	r0, [pc, #236]	@ (8002914 <MX_SPI2_Init+0x1a0>)
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8002826:	438b      	bics	r3, r1
 8002828:	392d      	subs	r1, #45	@ 0x2d
 800282a:	430b      	orrs	r3, r1
 800282c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800282e:	4b3a      	ldr	r3, [pc, #232]	@ (8002918 <MX_SPI2_Init+0x1a4>)
 8002830:	493a      	ldr	r1, [pc, #232]	@ (800291c <MX_SPI2_Init+0x1a8>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	468a      	mov	sl, r1
 8002836:	400a      	ands	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4938      	ldr	r1, [pc, #224]	@ (8002920 <MX_SPI2_Init+0x1ac>)
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283e:	2510      	movs	r5, #16
 8002840:	4689      	mov	r9, r1
 8002842:	400a      	ands	r2, r1
 8002844:	2180      	movs	r1, #128	@ 0x80
 8002846:	0149      	lsls	r1, r1, #5
 8002848:	468c      	mov	ip, r1
 800284a:	430a      	orrs	r2, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 800284c:	2120      	movs	r1, #32
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800284e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4688      	mov	r8, r1
 8002854:	438a      	bics	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8002858:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 800285a:	4932      	ldr	r1, [pc, #200]	@ (8002924 <MX_SPI2_Init+0x1b0>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 800285c:	43ba      	bics	r2, r7
 800285e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	43b2      	bics	r2, r6
 8002864:	4332      	orrs	r2, r6
 8002866:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	4002      	ands	r2, r0
 800286c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	400a      	ands	r2, r1
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8002872:	4659      	mov	r1, fp
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8002874:	601a      	str	r2, [r3, #0]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8002876:	4a2c      	ldr	r2, [pc, #176]	@ (8002928 <MX_SPI2_Init+0x1b4>)
 8002878:	6813      	ldr	r3, [r2, #0]
 800287a:	438b      	bics	r3, r1
 800287c:	392c      	subs	r1, #44	@ 0x2c
 800287e:	430b      	orrs	r3, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8002880:	4651      	mov	r1, sl
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8002882:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8002884:	4b29      	ldr	r3, [pc, #164]	@ (800292c <MX_SPI2_Init+0x1b8>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	400a      	ands	r2, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800288a:	4649      	mov	r1, r9
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800288c:	432a      	orrs	r2, r5
 800288e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	400a      	ands	r2, r1
 8002894:	4661      	mov	r1, ip
 8002896:	430a      	orrs	r2, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8002898:	4641      	mov	r1, r8
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800289a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	438a      	bics	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80028a2:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80028a4:	491f      	ldr	r1, [pc, #124]	@ (8002924 <MX_SPI2_Init+0x1b0>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80028a6:	43ba      	bics	r2, r7
 80028a8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	43b2      	bics	r2, r6
 80028ae:	4332      	orrs	r2, r6
 80028b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80028b2:	681a      	ldr	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80028b4:	3e78      	subs	r6, #120	@ 0x78
 80028b6:	4002      	ands	r2, r0
 80028b8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	400a      	ands	r2, r1
 80028be:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80028c0:	2382      	movs	r3, #130	@ 0x82
 80028c2:	005b      	lsls	r3, r3, #1
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80028c4:	940a      	str	r4, [sp, #40]	@ 0x28
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80028c6:	930b      	str	r3, [sp, #44]	@ 0x2c
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80028c8:	23e0      	movs	r3, #224	@ 0xe0
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	930c      	str	r3, [sp, #48]	@ 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80028ce:	2380      	movs	r3, #128	@ 0x80
 80028d0:	009b      	lsls	r3, r3, #2
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80028d2:	2200      	movs	r2, #0
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80028d4:	930f      	str	r3, [sp, #60]	@ 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80028d6:	2307      	movs	r3, #7
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80028d8:	940d      	str	r4, [sp, #52]	@ 0x34
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80028da:	940e      	str	r4, [sp, #56]	@ 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80028dc:	9411      	str	r4, [sp, #68]	@ 0x44
  SPI_InitStruct.CRCPoly = 7;
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80028de:	4c14      	ldr	r4, [pc, #80]	@ (8002930 <MX_SPI2_Init+0x1bc>)
 80028e0:	a90a      	add	r1, sp, #40	@ 0x28
 80028e2:	0020      	movs	r0, r4
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80028e4:	9212      	str	r2, [sp, #72]	@ 0x48
 80028e6:	9313      	str	r3, [sp, #76]	@ 0x4c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80028e8:	9610      	str	r6, [sp, #64]	@ 0x40
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80028ea:	f001 ff59 	bl	80047a0 <LL_SPI_Init>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80028ee:	6863      	ldr	r3, [r4, #4]
 80028f0:	43ab      	bics	r3, r5
 80028f2:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80028f4:	6863      	ldr	r3, [r4, #4]
 80028f6:	4333      	orrs	r3, r6
 80028f8:	6063      	str	r3, [r4, #4]
  LL_SPI_EnableNSSPulseMgt(SPI2);
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028fa:	b015      	add	sp, #84	@ 0x54
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	50000400 	.word	0x50000400
 8002910:	40020804 	.word	0x40020804
 8002914:	fffffcff 	.word	0xfffffcff
 8002918:	4002001c 	.word	0x4002001c
 800291c:	ffffbfef 	.word	0xffffbfef
 8002920:	ffffcfff 	.word	0xffffcfff
 8002924:	fffff3ff 	.word	0xfffff3ff
 8002928:	40020808 	.word	0x40020808
 800292c:	40020030 	.word	0x40020030
 8002930:	40003800 	.word	0x40003800

08002934 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002934:	2201      	movs	r2, #1
 8002936:	4b0a      	ldr	r3, [pc, #40]	@ (8002960 <HAL_MspInit+0x2c>)
{
 8002938:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800293c:	4311      	orrs	r1, r2
 800293e:	6419      	str	r1, [r3, #64]	@ 0x40
 8002940:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002942:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002944:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002946:	9200      	str	r2, [sp, #0]
 8002948:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800294c:	0549      	lsls	r1, r1, #21
 800294e:	430a      	orrs	r2, r1
 8002950:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002954:	400b      	ands	r3, r1
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800295a:	b002      	add	sp, #8
 800295c:	4770      	bx	lr
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	40021000 	.word	0x40021000

08002964 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002964:	e7fe      	b.n	8002964 <NMI_Handler>
 8002966:	46c0      	nop			@ (mov r8, r8)

08002968 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002968:	e7fe      	b.n	8002968 <HardFault_Handler>
 800296a:	46c0      	nop			@ (mov r8, r8)

0800296c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800296c:	4770      	bx	lr
 800296e:	46c0      	nop			@ (mov r8, r8)

08002970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002970:	4770      	bx	lr
 8002972:	46c0      	nop			@ (mov r8, r8)

08002974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002974:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002976:	f000 fa3d 	bl	8002df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800297a:	bd10      	pop	{r4, pc}

0800297c <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800297c:	2080      	movs	r0, #128	@ 0x80
{
 800297e:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002980:	0140      	lsls	r0, r0, #5
 8002982:	f000 fbb9 	bl	80030f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002986:	bd10      	pop	{r4, pc}

08002988 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002988:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	INSIDE_DMA1_Channel1();
 800298a:	f7ff fcf5 	bl	8002378 <INSIDE_DMA1_Channel1>

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800298e:	bd10      	pop	{r4, pc}

08002990 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002990:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
	Put_inside_DMA1_Channel2_3_IRQ(&ma330data);
 8002992:	4802      	ldr	r0, [pc, #8]	@ (800299c <DMA1_Channel2_3_IRQHandler+0xc>)
 8002994:	f7ff fae6 	bl	8001f64 <Put_inside_DMA1_Channel2_3_IRQ>

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002998:	bd10      	pop	{r4, pc}
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	20000174 	.word	0x20000174

080029a0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80029a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029a2:	4802      	ldr	r0, [pc, #8]	@ (80029ac <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 80029a4:	f001 face 	bl	8003f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80029a8:	bd10      	pop	{r4, pc}
 80029aa:	46c0      	nop			@ (mov r8, r8)
 80029ac:	200001fc 	.word	0x200001fc

080029b0 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029b0:	4770      	bx	lr
 80029b2:	46c0      	nop			@ (mov r8, r8)

080029b4 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029b4:	b510      	push	{r4, lr}
 80029b6:	b088      	sub	sp, #32

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029b8:	2210      	movs	r2, #16
 80029ba:	2100      	movs	r1, #0
 80029bc:	a804      	add	r0, sp, #16
 80029be:	f001 ff2f 	bl	8004820 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c2:	220c      	movs	r2, #12
 80029c4:	2100      	movs	r1, #0
 80029c6:	a801      	add	r0, sp, #4
 80029c8:	f001 ff2a 	bl	8004820 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029cc:	2380      	movs	r3, #128	@ 0x80
 80029ce:	4c16      	ldr	r4, [pc, #88]	@ (8002a28 <MX_TIM2_Init+0x74>)
 80029d0:	05db      	lsls	r3, r3, #23
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
 80029d2:	2201      	movs	r2, #1
  htim2.Instance = TIM2;
 80029d4:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 80029d6:	2300      	movs	r3, #0
  htim2.Init.Period = 4294967295;
 80029d8:	4252      	negs	r2, r2
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029da:	0020      	movs	r0, r4
  htim2.Init.Prescaler = 0;
 80029dc:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029de:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 4294967295;
 80029e0:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e2:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e4:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029e6:	f001 fbbd 	bl	8004164 <HAL_TIM_Base_Init>
 80029ea:	2800      	cmp	r0, #0
 80029ec:	d113      	bne.n	8002a16 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ee:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029f0:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029f2:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029f4:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029f6:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029f8:	f001 f9ea 	bl	8003dd0 <HAL_TIM_ConfigClockSource>
 80029fc:	2800      	cmp	r0, #0
 80029fe:	d110      	bne.n	8002a22 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a00:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a02:	0020      	movs	r0, r4
 8002a04:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a06:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a08:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a0a:	f001 fd2b 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 8002a0e:	2800      	cmp	r0, #0
 8002a10:	d104      	bne.n	8002a1c <MX_TIM2_Init+0x68>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a12:	b008      	add	sp, #32
 8002a14:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002a16:	f7ff feab 	bl	8002770 <Error_Handler>
 8002a1a:	e7e8      	b.n	80029ee <MX_TIM2_Init+0x3a>
    Error_Handler();
 8002a1c:	f7ff fea8 	bl	8002770 <Error_Handler>
}
 8002a20:	e7f7      	b.n	8002a12 <MX_TIM2_Init+0x5e>
    Error_Handler();
 8002a22:	f7ff fea5 	bl	8002770 <Error_Handler>
 8002a26:	e7eb      	b.n	8002a00 <MX_TIM2_Init+0x4c>
 8002a28:	200001b0 	.word	0x200001b0

08002a2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	0004      	movs	r4, r0
 8002a30:	b094      	sub	sp, #80	@ 0x50

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a32:	2214      	movs	r2, #20
 8002a34:	2100      	movs	r1, #0
 8002a36:	a804      	add	r0, sp, #16
 8002a38:	f001 fef2 	bl	8004820 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a3c:	2228      	movs	r2, #40	@ 0x28
 8002a3e:	2100      	movs	r1, #0
 8002a40:	a80a      	add	r0, sp, #40	@ 0x28
 8002a42:	f001 feed 	bl	8004820 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	4a23      	ldr	r2, [pc, #140]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xac>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00f      	beq.n	8002a6e <HAL_TIM_Base_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8002a4e:	2280      	movs	r2, #128	@ 0x80
 8002a50:	05d2      	lsls	r2, r2, #23
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d001      	beq.n	8002a5a <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a56:	b014      	add	sp, #80	@ 0x50
 8002a58:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002adc <HAL_TIM_Base_MspInit+0xb0>)
 8002a5e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002a60:	4319      	orrs	r1, r3
 8002a62:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8002a64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a66:	4013      	ands	r3, r2
 8002a68:	9303      	str	r3, [sp, #12]
 8002a6a:	9b03      	ldr	r3, [sp, #12]
}
 8002a6c:	e7f3      	b.n	8002a56 <HAL_TIM_Base_MspInit+0x2a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002a6e:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a70:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002a72:	039b      	lsls	r3, r3, #14
 8002a74:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a76:	f000 ff07 	bl	8003888 <HAL_RCCEx_PeriphCLKConfig>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d128      	bne.n	8002ad0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a7e:	2180      	movs	r1, #128	@ 0x80
 8002a80:	4b16      	ldr	r3, [pc, #88]	@ (8002adc <HAL_TIM_Base_MspInit+0xb0>)
 8002a82:	0109      	lsls	r1, r1, #4
 8002a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a86:	2080      	movs	r0, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a8e:	0140      	lsls	r0, r0, #5
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a90:	400a      	ands	r2, r1
 8002a92:	9201      	str	r2, [sp, #4]
 8002a94:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a96:	2202      	movs	r2, #2
 8002a98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a9a:	4311      	orrs	r1, r2
 8002a9c:	6359      	str	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a9e:	2112      	movs	r1, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002aa2:	9004      	str	r0, [sp, #16]
 8002aa4:	9105      	str	r1, [sp, #20]
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	2100      	movs	r1, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aaa:	4013      	ands	r3, r2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002aac:	9006      	str	r0, [sp, #24]
 8002aae:	9107      	str	r1, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab2:	a904      	add	r1, sp, #16
 8002ab4:	480a      	ldr	r0, [pc, #40]	@ (8002ae0 <HAL_TIM_Base_MspInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002ab8:	9208      	str	r2, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	f000 fa0f 	bl	8002edc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	200d      	movs	r0, #13
 8002ac4:	f000 f9ba 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002ac8:	200d      	movs	r0, #13
 8002aca:	f000 f9e1 	bl	8002e90 <HAL_NVIC_EnableIRQ>
 8002ace:	e7c2      	b.n	8002a56 <HAL_TIM_Base_MspInit+0x2a>
      Error_Handler();
 8002ad0:	f7ff fe4e 	bl	8002770 <Error_Handler>
 8002ad4:	e7d3      	b.n	8002a7e <HAL_TIM_Base_MspInit+0x52>
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	50000400 	.word	0x50000400

08002ae4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ae4:	b510      	push	{r4, lr}
 8002ae6:	0004      	movs	r4, r0
 8002ae8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aea:	2214      	movs	r2, #20
 8002aec:	2100      	movs	r1, #0
 8002aee:	a802      	add	r0, sp, #8
 8002af0:	f001 fe96 	bl	8004820 <memset>
  if(timHandle->Instance==TIM1)
 8002af4:	4b17      	ldr	r3, [pc, #92]	@ (8002b54 <HAL_TIM_MspPostInit+0x70>)
 8002af6:	6822      	ldr	r2, [r4, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002afc:	b008      	add	sp, #32
 8002afe:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b00:	2402      	movs	r4, #2
 8002b02:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <HAL_TIM_MspPostInit+0x74>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b04:	4815      	ldr	r0, [pc, #84]	@ (8002b5c <HAL_TIM_MspPostInit+0x78>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b08:	4322      	orrs	r2, r4
 8002b0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b0e:	4022      	ands	r2, r4
 8002b10:	9200      	str	r2, [sp, #0]
 8002b12:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b14:	2201      	movs	r2, #1
 8002b16:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b18:	4311      	orrs	r1, r2
 8002b1a:	6359      	str	r1, [r3, #52]	@ 0x34
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b20:	401a      	ands	r2, r3
 8002b22:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002b24:	22e0      	movs	r2, #224	@ 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	0212      	lsls	r2, r2, #8
 8002b2c:	9202      	str	r2, [sp, #8]
 8002b2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b30:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b32:	f000 f9d3 	bl	8002edc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002b36:	23e0      	movs	r3, #224	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b38:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b40:	a902      	add	r1, sp, #8
 8002b42:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b48:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b4a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4c:	f000 f9c6 	bl	8002edc <HAL_GPIO_Init>
}
 8002b50:	e7d4      	b.n	8002afc <HAL_TIM_MspPostInit+0x18>
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	40012c00 	.word	0x40012c00
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	50000400 	.word	0x50000400

08002b60 <MX_TIM1_Init>:
{
 8002b60:	b510      	push	{r4, lr}
 8002b62:	b0a0      	sub	sp, #128	@ 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b64:	2210      	movs	r2, #16
 8002b66:	2100      	movs	r1, #0
 8002b68:	a808      	add	r0, sp, #32
 8002b6a:	f001 fe59 	bl	8004820 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6e:	220c      	movs	r2, #12
 8002b70:	2100      	movs	r1, #0
 8002b72:	4668      	mov	r0, sp
 8002b74:	f001 fe54 	bl	8004820 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002b78:	220c      	movs	r2, #12
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	a804      	add	r0, sp, #16
 8002b7e:	f001 fe4f 	bl	8004820 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b82:	221c      	movs	r2, #28
 8002b84:	2100      	movs	r1, #0
 8002b86:	a80c      	add	r0, sp, #48	@ 0x30
 8002b88:	f001 fe4a 	bl	8004820 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b8c:	2234      	movs	r2, #52	@ 0x34
 8002b8e:	2100      	movs	r1, #0
 8002b90:	a813      	add	r0, sp, #76	@ 0x4c
 8002b92:	f001 fe45 	bl	8004820 <memset>
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002b96:	2220      	movs	r2, #32
  htim1.Instance = TIM1;
 8002b98:	4c55      	ldr	r4, [pc, #340]	@ (8002cf0 <MX_TIM1_Init+0x190>)
 8002b9a:	4b56      	ldr	r3, [pc, #344]	@ (8002cf4 <MX_TIM1_Init+0x194>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002b9c:	60a2      	str	r2, [r4, #8]
  htim1.Init.Period = 1600;
 8002b9e:	22c8      	movs	r2, #200	@ 0xc8
  htim1.Instance = TIM1;
 8002ba0:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
 8002ba2:	2300      	movs	r3, #0
  htim1.Init.Period = 1600;
 8002ba4:	00d2      	lsls	r2, r2, #3
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ba6:	0020      	movs	r0, r4
  htim1.Init.Prescaler = 0;
 8002ba8:	6063      	str	r3, [r4, #4]
  htim1.Init.Period = 1600;
 8002baa:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bac:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bae:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb0:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002bb2:	f001 fad7 	bl	8004164 <HAL_TIM_Base_Init>
 8002bb6:	2800      	cmp	r0, #0
 8002bb8:	d000      	beq.n	8002bbc <MX_TIM1_Init+0x5c>
 8002bba:	e07b      	b.n	8002cb4 <MX_TIM1_Init+0x154>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bbc:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bbe:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bc0:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bc2:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bc4:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bc6:	f001 f903 	bl	8003dd0 <HAL_TIM_ConfigClockSource>
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d000      	beq.n	8002bd0 <MX_TIM1_Init+0x70>
 8002bce:	e08c      	b.n	8002cea <MX_TIM1_Init+0x18a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bd0:	0020      	movs	r0, r4
 8002bd2:	f001 faf7 	bl	80041c4 <HAL_TIM_PWM_Init>
 8002bd6:	2800      	cmp	r0, #0
 8002bd8:	d000      	beq.n	8002bdc <MX_TIM1_Init+0x7c>
 8002bda:	e083      	b.n	8002ce4 <MX_TIM1_Init+0x184>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bdc:	23e0      	movs	r3, #224	@ 0xe0
 8002bde:	2200      	movs	r2, #0
 8002be0:	03db      	lsls	r3, r3, #15
 8002be2:	9200      	str	r2, [sp, #0]
 8002be4:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002be8:	4669      	mov	r1, sp
 8002bea:	0020      	movs	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bec:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bee:	f001 fc39 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	d000      	beq.n	8002bf8 <MX_TIM1_Init+0x98>
 8002bf6:	e072      	b.n	8002cde <MX_TIM1_Init+0x17e>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	9204      	str	r2, [sp, #16]
 8002bfe:	9305      	str	r3, [sp, #20]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002c00:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002c02:	2101      	movs	r1, #1
 8002c04:	0020      	movs	r0, r4
 8002c06:	aa04      	add	r2, sp, #16
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002c08:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002c0a:	f001 fcc3 	bl	8004594 <HAL_TIMEx_ConfigBreakInput>
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	d162      	bne.n	8002cd8 <MX_TIM1_Init+0x178>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c12:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002c14:	2004      	movs	r0, #4
 8002c16:	2100      	movs	r1, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c18:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002c1a:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002c1c:	9010      	str	r0, [sp, #64]	@ 0x40
 8002c1e:	9111      	str	r1, [sp, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c20:	2200      	movs	r2, #0
 8002c22:	0020      	movs	r0, r4
 8002c24:	a90c      	add	r1, sp, #48	@ 0x30
  sConfigOC.Pulse = 0;
 8002c26:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c28:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c2a:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c2c:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c2e:	f001 fb35 	bl	800429c <HAL_TIM_PWM_ConfigChannel>
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d14d      	bne.n	8002cd2 <MX_TIM1_Init+0x172>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c36:	2204      	movs	r2, #4
 8002c38:	0020      	movs	r0, r4
 8002c3a:	a90c      	add	r1, sp, #48	@ 0x30
 8002c3c:	f001 fb2e 	bl	800429c <HAL_TIM_PWM_ConfigChannel>
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d143      	bne.n	8002ccc <MX_TIM1_Init+0x16c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c44:	2208      	movs	r2, #8
 8002c46:	0020      	movs	r0, r4
 8002c48:	a90c      	add	r1, sp, #48	@ 0x30
 8002c4a:	f001 fb27 	bl	800429c <HAL_TIM_PWM_ConfigChannel>
 8002c4e:	2800      	cmp	r0, #0
 8002c50:	d139      	bne.n	8002cc6 <MX_TIM1_Init+0x166>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002c52:	2270      	movs	r2, #112	@ 0x70
 8002c54:	4b28      	ldr	r3, [pc, #160]	@ (8002cf8 <MX_TIM1_Init+0x198>)
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c56:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002c58:	920c      	str	r2, [sp, #48]	@ 0x30
 8002c5a:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c5c:	a90c      	add	r1, sp, #48	@ 0x30
 8002c5e:	3a64      	subs	r2, #100	@ 0x64
 8002c60:	f001 fb1c 	bl	800429c <HAL_TIM_PWM_ConfigChannel>
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d12b      	bne.n	8002cc0 <MX_TIM1_Init+0x160>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002c68:	6822      	ldr	r2, [r4, #0]
 8002c6a:	4924      	ldr	r1, [pc, #144]	@ (8002cfc <MX_TIM1_Init+0x19c>)
 8002c6c:	69d3      	ldr	r3, [r2, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c6e:	0020      	movs	r0, r4
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002c70:	400b      	ands	r3, r1
 8002c72:	61d3      	str	r3, [r2, #28]
  sBreakDeadTimeConfig.DeadTime = 26;
 8002c74:	221a      	movs	r2, #26
 8002c76:	9216      	str	r2, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002c78:	2280      	movs	r2, #128	@ 0x80
 8002c7a:	0152      	lsls	r2, r2, #5
 8002c7c:	9217      	str	r2, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c7e:	2280      	movs	r2, #128	@ 0x80
 8002c80:	0192      	lsls	r2, r2, #6
 8002c82:	9218      	str	r2, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.BreakFilter = 3;
 8002c84:	2203      	movs	r2, #3
 8002c86:	9219      	str	r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c88:	2280      	movs	r2, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c8a:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c8c:	0492      	lsls	r2, r2, #18
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c8e:	a913      	add	r1, sp, #76	@ 0x4c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c90:	9313      	str	r3, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c92:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c94:	9315      	str	r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002c96:	931a      	str	r3, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c98:	931b      	str	r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c9a:	921c      	str	r2, [sp, #112]	@ 0x70
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c9c:	931d      	str	r3, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002c9e:	931e      	str	r3, [sp, #120]	@ 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ca0:	931f      	str	r3, [sp, #124]	@ 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ca2:	f001 fc17 	bl	80044d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ca6:	2800      	cmp	r0, #0
 8002ca8:	d107      	bne.n	8002cba <MX_TIM1_Init+0x15a>
  HAL_TIM_MspPostInit(&htim1);
 8002caa:	0020      	movs	r0, r4
 8002cac:	f7ff ff1a 	bl	8002ae4 <HAL_TIM_MspPostInit>
}
 8002cb0:	b020      	add	sp, #128	@ 0x80
 8002cb2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002cb4:	f7ff fd5c 	bl	8002770 <Error_Handler>
 8002cb8:	e780      	b.n	8002bbc <MX_TIM1_Init+0x5c>
    Error_Handler();
 8002cba:	f7ff fd59 	bl	8002770 <Error_Handler>
 8002cbe:	e7f4      	b.n	8002caa <MX_TIM1_Init+0x14a>
    Error_Handler();
 8002cc0:	f7ff fd56 	bl	8002770 <Error_Handler>
 8002cc4:	e7d0      	b.n	8002c68 <MX_TIM1_Init+0x108>
    Error_Handler();
 8002cc6:	f7ff fd53 	bl	8002770 <Error_Handler>
 8002cca:	e7c2      	b.n	8002c52 <MX_TIM1_Init+0xf2>
    Error_Handler();
 8002ccc:	f7ff fd50 	bl	8002770 <Error_Handler>
 8002cd0:	e7b8      	b.n	8002c44 <MX_TIM1_Init+0xe4>
    Error_Handler();
 8002cd2:	f7ff fd4d 	bl	8002770 <Error_Handler>
 8002cd6:	e7ae      	b.n	8002c36 <MX_TIM1_Init+0xd6>
    Error_Handler();
 8002cd8:	f7ff fd4a 	bl	8002770 <Error_Handler>
 8002cdc:	e799      	b.n	8002c12 <MX_TIM1_Init+0xb2>
    Error_Handler();
 8002cde:	f7ff fd47 	bl	8002770 <Error_Handler>
 8002ce2:	e789      	b.n	8002bf8 <MX_TIM1_Init+0x98>
    Error_Handler();
 8002ce4:	f7ff fd44 	bl	8002770 <Error_Handler>
 8002ce8:	e778      	b.n	8002bdc <MX_TIM1_Init+0x7c>
    Error_Handler();
 8002cea:	f7ff fd41 	bl	8002770 <Error_Handler>
 8002cee:	e76f      	b.n	8002bd0 <MX_TIM1_Init+0x70>
 8002cf0:	200001fc 	.word	0x200001fc
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	0000060d 	.word	0x0000060d
 8002cfc:	fffff7ff 	.word	0xfffff7ff

08002d00 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance == TIM1) {
 8002d00:	4b07      	ldr	r3, [pc, #28]	@ (8002d20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d02:	6802      	ldr	r2, [r0, #0]
{
 8002d04:	b510      	push	{r4, lr}
    if (htim->Instance == TIM1) {
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d000      	beq.n	8002d0c <HAL_TIM_PeriodElapsedCallback+0xc>
    	tps1=TIM2->CNT;
    	MA330_start(&ma330data);
    }
}
 8002d0a:	bd10      	pop	{r4, pc}
    	tps1=TIM2->CNT;
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	05db      	lsls	r3, r3, #23
 8002d10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d12:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <HAL_TIM_PeriodElapsedCallback+0x24>)
    	MA330_start(&ma330data);
 8002d14:	4804      	ldr	r0, [pc, #16]	@ (8002d28 <HAL_TIM_PeriodElapsedCallback+0x28>)
    	tps1=TIM2->CNT;
 8002d16:	601a      	str	r2, [r3, #0]
    	MA330_start(&ma330data);
 8002d18:	f7ff f8d4 	bl	8001ec4 <MA330_start>
}
 8002d1c:	e7f5      	b.n	8002d0a <HAL_TIM_PeriodElapsedCallback+0xa>
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	20000034 	.word	0x20000034
 8002d28:	20000174 	.word	0x20000174

08002d2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d2c:	480d      	ldr	r0, [pc, #52]	@ (8002d64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d30:	f7ff fe3e 	bl	80029b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d34:	480c      	ldr	r0, [pc, #48]	@ (8002d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d36:	490d      	ldr	r1, [pc, #52]	@ (8002d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d38:	4a0d      	ldr	r2, [pc, #52]	@ (8002d70 <LoopForever+0xe>)
  movs r3, #0
 8002d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d3c:	e002      	b.n	8002d44 <LoopCopyDataInit>

08002d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d42:	3304      	adds	r3, #4

08002d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d48:	d3f9      	bcc.n	8002d3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002d78 <LoopForever+0x16>)
  movs r3, #0
 8002d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d50:	e001      	b.n	8002d56 <LoopFillZerobss>

08002d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d54:	3204      	adds	r2, #4

08002d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d58:	d3fb      	bcc.n	8002d52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d5a:	f001 fd69 	bl	8004830 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002d5e:	f7ff fcb1 	bl	80026c4 <main>

08002d62 <LoopForever>:

LoopForever:
  b LoopForever
 8002d62:	e7fe      	b.n	8002d62 <LoopForever>
  ldr   r0, =_estack
 8002d64:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002d70:	080049b0 	.word	0x080049b0
  ldr r2, =_sbss
 8002d74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002d78:	2000024c 	.word	0x2000024c

08002d7c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d7c:	e7fe      	b.n	8002d7c <ADC1_IRQHandler>
	...

08002d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d80:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002d82:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc0 <HAL_InitTick+0x40>)
{
 8002d84:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8002d86:	7819      	ldrb	r1, [r3, #0]
 8002d88:	2900      	cmp	r1, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d8c:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002d90:	20fa      	movs	r0, #250	@ 0xfa
 8002d92:	0080      	lsls	r0, r0, #2
 8002d94:	f7fd f9b6 	bl	8000104 <__udivsi3>
 8002d98:	4d0a      	ldr	r5, [pc, #40]	@ (8002dc4 <HAL_InitTick+0x44>)
 8002d9a:	0001      	movs	r1, r0
 8002d9c:	6828      	ldr	r0, [r5, #0]
 8002d9e:	f7fd f9b1 	bl	8000104 <__udivsi3>
 8002da2:	f000 f881 	bl	8002ea8 <HAL_SYSTICK_Config>
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002daa:	2c03      	cmp	r4, #3
 8002dac:	d8ee      	bhi.n	8002d8c <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dae:	3801      	subs	r0, #1
 8002db0:	2200      	movs	r2, #0
 8002db2:	0021      	movs	r1, r4
 8002db4:	f000 f842 	bl	8002e3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002db8:	4b03      	ldr	r3, [pc, #12]	@ (8002dc8 <HAL_InitTick+0x48>)
 8002dba:	2000      	movs	r0, #0
 8002dbc:	601c      	str	r4, [r3, #0]
  return status;
 8002dbe:	e7e6      	b.n	8002d8e <HAL_InitTick+0xe>
 8002dc0:	20000004 	.word	0x20000004
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	20000008 	.word	0x20000008

08002dcc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	4a08      	ldr	r2, [pc, #32]	@ (8002df0 <HAL_Init+0x24>)
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	6811      	ldr	r1, [r2, #0]
{
 8002dd4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd6:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dd8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dda:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ddc:	f7ff ffd0 	bl	8002d80 <HAL_InitTick>
 8002de0:	1e04      	subs	r4, r0, #0
 8002de2:	d002      	beq.n	8002dea <HAL_Init+0x1e>
    status = HAL_ERROR;
 8002de4:	2401      	movs	r4, #1
}
 8002de6:	0020      	movs	r0, r4
 8002de8:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8002dea:	f7ff fda3 	bl	8002934 <HAL_MspInit>
 8002dee:	e7fa      	b.n	8002de6 <HAL_Init+0x1a>
 8002df0:	40022000 	.word	0x40022000

08002df4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002df4:	4a03      	ldr	r2, [pc, #12]	@ (8002e04 <HAL_IncTick+0x10>)
 8002df6:	4b04      	ldr	r3, [pc, #16]	@ (8002e08 <HAL_IncTick+0x14>)
 8002df8:	6811      	ldr	r1, [r2, #0]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	185b      	adds	r3, r3, r1
 8002dfe:	6013      	str	r3, [r2, #0]
}
 8002e00:	4770      	bx	lr
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	20000248 	.word	0x20000248
 8002e08:	20000004 	.word	0x20000004

08002e0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e0c:	4b01      	ldr	r3, [pc, #4]	@ (8002e14 <HAL_GetTick+0x8>)
 8002e0e:	6818      	ldr	r0, [r3, #0]
}
 8002e10:	4770      	bx	lr
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	20000248 	.word	0x20000248

08002e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002e1c:	f7ff fff6 	bl	8002e0c <HAL_GetTick>
 8002e20:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e22:	1c63      	adds	r3, r4, #1
 8002e24:	d002      	beq.n	8002e2c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e26:	4b04      	ldr	r3, [pc, #16]	@ (8002e38 <HAL_Delay+0x20>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e2c:	f7ff ffee 	bl	8002e0c <HAL_GetTick>
 8002e30:	1b40      	subs	r0, r0, r5
 8002e32:	42a0      	cmp	r0, r4
 8002e34:	d3fa      	bcc.n	8002e2c <HAL_Delay+0x14>
  {
  }
}
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	20000004 	.word	0x20000004

08002e3c <HAL_NVIC_SetPriority>:
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e3c:	22ff      	movs	r2, #255	@ 0xff
 8002e3e:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e40:	b510      	push	{r4, lr}
 8002e42:	0014      	movs	r4, r2
 8002e44:	4003      	ands	r3, r0
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e4a:	0189      	lsls	r1, r1, #6
 8002e4c:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e4e:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e50:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8002e52:	2800      	cmp	r0, #0
 8002e54:	db0b      	blt.n	8002e6e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e56:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <HAL_NVIC_SetPriority+0x4c>)
 8002e58:	21c0      	movs	r1, #192	@ 0xc0
 8002e5a:	469c      	mov	ip, r3
 8002e5c:	0880      	lsrs	r0, r0, #2
 8002e5e:	0080      	lsls	r0, r0, #2
 8002e60:	4460      	add	r0, ip
 8002e62:	0089      	lsls	r1, r1, #2
 8002e64:	5843      	ldr	r3, [r0, r1]
 8002e66:	4023      	ands	r3, r4
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8002e6c:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e6e:	230f      	movs	r3, #15
 8002e70:	4906      	ldr	r1, [pc, #24]	@ (8002e8c <HAL_NVIC_SetPriority+0x50>)
 8002e72:	4003      	ands	r3, r0
 8002e74:	468c      	mov	ip, r1
 8002e76:	3b08      	subs	r3, #8
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4463      	add	r3, ip
 8002e7e:	69d9      	ldr	r1, [r3, #28]
 8002e80:	400c      	ands	r4, r1
 8002e82:	4314      	orrs	r4, r2
 8002e84:	61dc      	str	r4, [r3, #28]
 8002e86:	e7f1      	b.n	8002e6c <HAL_NVIC_SetPriority+0x30>
 8002e88:	e000e100 	.word	0xe000e100
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002e90:	2800      	cmp	r0, #0
 8002e92:	db05      	blt.n	8002ea0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e94:	221f      	movs	r2, #31
 8002e96:	2301      	movs	r3, #1
 8002e98:	4002      	ands	r2, r0
 8002e9a:	4093      	lsls	r3, r2
 8002e9c:	4a01      	ldr	r2, [pc, #4]	@ (8002ea4 <HAL_NVIC_EnableIRQ+0x14>)
 8002e9e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002ea0:	4770      	bx	lr
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	e000e100 	.word	0xe000e100

08002ea8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea8:	2280      	movs	r2, #128	@ 0x80
 8002eaa:	1e43      	subs	r3, r0, #1
 8002eac:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eae:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d20e      	bcs.n	8002ed2 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eb4:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb6:	4a07      	ldr	r2, [pc, #28]	@ (8002ed4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eb8:	4807      	ldr	r0, [pc, #28]	@ (8002ed8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eba:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ebc:	6a03      	ldr	r3, [r0, #32]
 8002ebe:	0609      	lsls	r1, r1, #24
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec8:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eca:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ecc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ece:	3307      	adds	r3, #7
 8002ed0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002ed2:	4770      	bx	lr
 8002ed4:	e000e010 	.word	0xe000e010
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ede:	46de      	mov	lr, fp
 8002ee0:	4657      	mov	r7, sl
 8002ee2:	464e      	mov	r6, r9
 8002ee4:	4645      	mov	r5, r8
 8002ee6:	b5e0      	push	{r5, r6, r7, lr}
 8002ee8:	468b      	mov	fp, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eea:	6809      	ldr	r1, [r1, #0]
  uint32_t position = 0x00u;
 8002eec:	2300      	movs	r3, #0
{
 8002eee:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef0:	2900      	cmp	r1, #0
 8002ef2:	d067      	beq.n	8002fc4 <HAL_GPIO_Init+0xe8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	4694      	mov	ip, r2
 8002efa:	400a      	ands	r2, r1
 8002efc:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 8002efe:	4662      	mov	r2, ip
 8002f00:	4211      	tst	r1, r2
 8002f02:	d05b      	beq.n	8002fbc <HAL_GPIO_Init+0xe0>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f04:	2503      	movs	r5, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f06:	465a      	mov	r2, fp
 8002f08:	005e      	lsls	r6, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f0a:	40b5      	lsls	r5, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f0c:	6854      	ldr	r4, [r2, #4]
 8002f0e:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f10:	43ed      	mvns	r5, r5
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f12:	4022      	ands	r2, r4
 8002f14:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f16:	9500      	str	r5, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f18:	2f01      	cmp	r7, #1
 8002f1a:	d95a      	bls.n	8002fd2 <HAL_GPIO_Init+0xf6>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f1c:	2a03      	cmp	r2, #3
 8002f1e:	d000      	beq.n	8002f22 <HAL_GPIO_Init+0x46>
 8002f20:	e0c6      	b.n	80030b0 <HAL_GPIO_Init+0x1d4>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f22:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 8002f24:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f26:	9d00      	ldr	r5, [sp, #0]
 8002f28:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f2a:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8002f2c:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f2e:	22c0      	movs	r2, #192	@ 0xc0
 8002f30:	0292      	lsls	r2, r2, #10
 8002f32:	4214      	tst	r4, r2
 8002f34:	d042      	beq.n	8002fbc <HAL_GPIO_Init+0xe0>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002f36:	2603      	movs	r6, #3
 8002f38:	270f      	movs	r7, #15
 8002f3a:	4d64      	ldr	r5, [pc, #400]	@ (80030cc <HAL_GPIO_Init+0x1f0>)
 8002f3c:	401e      	ands	r6, r3
 8002f3e:	46ac      	mov	ip, r5
 8002f40:	00f6      	lsls	r6, r6, #3
 8002f42:	40b7      	lsls	r7, r6
        temp = EXTI->EXTICR[position >> 2u];
 8002f44:	089a      	lsrs	r2, r3, #2
 8002f46:	0092      	lsls	r2, r2, #2
 8002f48:	4462      	add	r2, ip
 8002f4a:	6e15      	ldr	r5, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002f4c:	43bd      	bics	r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002f4e:	27a0      	movs	r7, #160	@ 0xa0
 8002f50:	05ff      	lsls	r7, r7, #23
 8002f52:	42b8      	cmp	r0, r7
 8002f54:	d00e      	beq.n	8002f74 <HAL_GPIO_Init+0x98>
 8002f56:	4f5e      	ldr	r7, [pc, #376]	@ (80030d0 <HAL_GPIO_Init+0x1f4>)
 8002f58:	42b8      	cmp	r0, r7
 8002f5a:	d100      	bne.n	8002f5e <HAL_GPIO_Init+0x82>
 8002f5c:	e0a0      	b.n	80030a0 <HAL_GPIO_Init+0x1c4>
 8002f5e:	4f5d      	ldr	r7, [pc, #372]	@ (80030d4 <HAL_GPIO_Init+0x1f8>)
 8002f60:	42b8      	cmp	r0, r7
 8002f62:	d100      	bne.n	8002f66 <HAL_GPIO_Init+0x8a>
 8002f64:	e0a0      	b.n	80030a8 <HAL_GPIO_Init+0x1cc>
 8002f66:	4f5c      	ldr	r7, [pc, #368]	@ (80030d8 <HAL_GPIO_Init+0x1fc>)
 8002f68:	42b8      	cmp	r0, r7
 8002f6a:	d100      	bne.n	8002f6e <HAL_GPIO_Init+0x92>
 8002f6c:	e094      	b.n	8003098 <HAL_GPIO_Init+0x1bc>
 8002f6e:	2705      	movs	r7, #5
 8002f70:	40b7      	lsls	r7, r6
 8002f72:	433d      	orrs	r5, r7
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f74:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8002f76:	6615      	str	r5, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 8002f78:	4655      	mov	r5, sl
        temp = EXTI->RTSR1;
 8002f7a:	4a54      	ldr	r2, [pc, #336]	@ (80030cc <HAL_GPIO_Init+0x1f0>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f7c:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8002f7e:	43ed      	mvns	r5, r5
        temp = EXTI->RTSR1;
 8002f80:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f82:	4234      	tst	r4, r6
 8002f84:	d16a      	bne.n	800305c <HAL_GPIO_Init+0x180>
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002f86:	4e51      	ldr	r6, [pc, #324]	@ (80030cc <HAL_GPIO_Init+0x1f0>)
        temp &= ~(iocurrent);
 8002f88:	402a      	ands	r2, r5
        EXTI->RTSR1 = temp;
 8002f8a:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 8002f8c:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f8e:	2680      	movs	r6, #128	@ 0x80
 8002f90:	03b6      	lsls	r6, r6, #14
 8002f92:	4234      	tst	r4, r6
 8002f94:	d16b      	bne.n	800306e <HAL_GPIO_Init+0x192>
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002f96:	4e4d      	ldr	r6, [pc, #308]	@ (80030cc <HAL_GPIO_Init+0x1f0>)
        temp &= ~(iocurrent);
 8002f98:	402a      	ands	r2, r5
        EXTI->FTSR1 = temp;
 8002f9a:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f9c:	2284      	movs	r2, #132	@ 0x84
 8002f9e:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fa0:	03a6      	lsls	r6, r4, #14
 8002fa2:	d46c      	bmi.n	800307e <HAL_GPIO_Init+0x1a2>
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8002fa4:	2684      	movs	r6, #132	@ 0x84
 8002fa6:	4f49      	ldr	r7, [pc, #292]	@ (80030cc <HAL_GPIO_Init+0x1f0>)
        temp &= ~(iocurrent);
 8002fa8:	402a      	ands	r2, r5
        EXTI->EMR1 = temp;
 8002faa:	51ba      	str	r2, [r7, r6]

        temp = EXTI->IMR1;
 8002fac:	2280      	movs	r2, #128	@ 0x80
 8002fae:	58ba      	ldr	r2, [r7, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fb0:	03e4      	lsls	r4, r4, #15
 8002fb2:	d46d      	bmi.n	8003090 <HAL_GPIO_Init+0x1b4>
        temp &= ~(iocurrent);
 8002fb4:	402a      	ands	r2, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8002fb6:	2480      	movs	r4, #128	@ 0x80
 8002fb8:	4d44      	ldr	r5, [pc, #272]	@ (80030cc <HAL_GPIO_Init+0x1f0>)
 8002fba:	512a      	str	r2, [r5, r4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fbc:	000a      	movs	r2, r1
      }
    }

    position++;
 8002fbe:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc0:	40da      	lsrs	r2, r3
 8002fc2:	d197      	bne.n	8002ef4 <HAL_GPIO_Init+0x18>
  }
}
 8002fc4:	b003      	add	sp, #12
 8002fc6:	bcf0      	pop	{r4, r5, r6, r7}
 8002fc8:	46bb      	mov	fp, r7
 8002fca:	46b2      	mov	sl, r6
 8002fcc:	46a9      	mov	r9, r5
 8002fce:	46a0      	mov	r8, r4
 8002fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8002fd2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fd4:	402f      	ands	r7, r5
 8002fd6:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fd8:	465f      	mov	r7, fp
 8002fda:	68ff      	ldr	r7, [r7, #12]
 8002fdc:	40b7      	lsls	r7, r6
 8002fde:	46b8      	mov	r8, r7
 8002fe0:	464f      	mov	r7, r9
 8002fe2:	4645      	mov	r5, r8
 8002fe4:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8002fe6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002fe8:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fea:	002f      	movs	r7, r5
 8002fec:	4665      	mov	r5, ip
 8002fee:	43af      	bics	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff0:	0925      	lsrs	r5, r4, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ff2:	46b8      	mov	r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff4:	002f      	movs	r7, r5
 8002ff6:	2501      	movs	r5, #1
 8002ff8:	402f      	ands	r7, r5
 8002ffa:	409f      	lsls	r7, r3
 8002ffc:	46bc      	mov	ip, r7
 8002ffe:	4647      	mov	r7, r8
 8003000:	4665      	mov	r5, ip
 8003002:	432f      	orrs	r7, r5
        GPIOx->OTYPER = temp;
 8003004:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003006:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003008:	002f      	movs	r7, r5
 800300a:	9d00      	ldr	r5, [sp, #0]
 800300c:	402f      	ands	r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800300e:	465d      	mov	r5, fp
 8003010:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003012:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003014:	002f      	movs	r7, r5
 8003016:	40b7      	lsls	r7, r6
 8003018:	46bc      	mov	ip, r7
 800301a:	4647      	mov	r7, r8
 800301c:	4665      	mov	r5, ip
 800301e:	432f      	orrs	r7, r5
        GPIOx->PUPDR = temp;
 8003020:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003022:	2a02      	cmp	r2, #2
 8003024:	d000      	beq.n	8003028 <HAL_GPIO_Init+0x14c>
 8003026:	e77c      	b.n	8002f22 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8003028:	08dd      	lsrs	r5, r3, #3
 800302a:	00ad      	lsls	r5, r5, #2
 800302c:	46ac      	mov	ip, r5
 800302e:	4484      	add	ip, r0
 8003030:	4665      	mov	r5, ip
 8003032:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003034:	2507      	movs	r5, #7
 8003036:	401d      	ands	r5, r3
 8003038:	00ad      	lsls	r5, r5, #2
 800303a:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 800303c:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800303e:	250f      	movs	r5, #15
 8003040:	4647      	mov	r7, r8
 8003042:	40bd      	lsls	r5, r7
 8003044:	9f01      	ldr	r7, [sp, #4]
 8003046:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003048:	465d      	mov	r5, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800304a:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800304c:	4647      	mov	r7, r8
 800304e:	692d      	ldr	r5, [r5, #16]
 8003050:	40bd      	lsls	r5, r7
 8003052:	9f01      	ldr	r7, [sp, #4]
 8003054:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8003056:	4665      	mov	r5, ip
 8003058:	622f      	str	r7, [r5, #32]
 800305a:	e762      	b.n	8002f22 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 800305c:	4656      	mov	r6, sl
 800305e:	4332      	orrs	r2, r6
        EXTI->RTSR1 = temp;
 8003060:	4e1a      	ldr	r6, [pc, #104]	@ (80030cc <HAL_GPIO_Init+0x1f0>)
 8003062:	6032      	str	r2, [r6, #0]
        temp = EXTI->FTSR1;
 8003064:	6872      	ldr	r2, [r6, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003066:	2680      	movs	r6, #128	@ 0x80
 8003068:	03b6      	lsls	r6, r6, #14
 800306a:	4234      	tst	r4, r6
 800306c:	d093      	beq.n	8002f96 <HAL_GPIO_Init+0xba>
          temp |= iocurrent;
 800306e:	4656      	mov	r6, sl
 8003070:	4332      	orrs	r2, r6
        EXTI->FTSR1 = temp;
 8003072:	4e16      	ldr	r6, [pc, #88]	@ (80030cc <HAL_GPIO_Init+0x1f0>)
 8003074:	6072      	str	r2, [r6, #4]
        temp = EXTI->EMR1;
 8003076:	2284      	movs	r2, #132	@ 0x84
 8003078:	58b2      	ldr	r2, [r6, r2]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800307a:	03a6      	lsls	r6, r4, #14
 800307c:	d592      	bpl.n	8002fa4 <HAL_GPIO_Init+0xc8>
          temp |= iocurrent;
 800307e:	4656      	mov	r6, sl
 8003080:	4332      	orrs	r2, r6
        EXTI->EMR1 = temp;
 8003082:	2684      	movs	r6, #132	@ 0x84
 8003084:	4f11      	ldr	r7, [pc, #68]	@ (80030cc <HAL_GPIO_Init+0x1f0>)
 8003086:	51ba      	str	r2, [r7, r6]
        temp = EXTI->IMR1;
 8003088:	2280      	movs	r2, #128	@ 0x80
 800308a:	58ba      	ldr	r2, [r7, r2]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800308c:	03e4      	lsls	r4, r4, #15
 800308e:	d591      	bpl.n	8002fb4 <HAL_GPIO_Init+0xd8>
          temp |= iocurrent;
 8003090:	4654      	mov	r4, sl
 8003092:	4314      	orrs	r4, r2
 8003094:	0022      	movs	r2, r4
 8003096:	e78e      	b.n	8002fb6 <HAL_GPIO_Init+0xda>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003098:	2703      	movs	r7, #3
 800309a:	40b7      	lsls	r7, r6
 800309c:	433d      	orrs	r5, r7
 800309e:	e769      	b.n	8002f74 <HAL_GPIO_Init+0x98>
 80030a0:	2701      	movs	r7, #1
 80030a2:	40b7      	lsls	r7, r6
 80030a4:	433d      	orrs	r5, r7
 80030a6:	e765      	b.n	8002f74 <HAL_GPIO_Init+0x98>
 80030a8:	2702      	movs	r7, #2
 80030aa:	40b7      	lsls	r7, r6
 80030ac:	433d      	orrs	r5, r7
 80030ae:	e761      	b.n	8002f74 <HAL_GPIO_Init+0x98>
        temp = GPIOx->PUPDR;
 80030b0:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80030b2:	9f00      	ldr	r7, [sp, #0]
 80030b4:	403d      	ands	r5, r7
 80030b6:	46a8      	mov	r8, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030b8:	465d      	mov	r5, fp
 80030ba:	68ad      	ldr	r5, [r5, #8]
 80030bc:	40b5      	lsls	r5, r6
 80030be:	46ac      	mov	ip, r5
 80030c0:	4645      	mov	r5, r8
 80030c2:	4667      	mov	r7, ip
 80030c4:	433d      	orrs	r5, r7
        GPIOx->PUPDR = temp;
 80030c6:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c8:	e72b      	b.n	8002f22 <HAL_GPIO_Init+0x46>
 80030ca:	46c0      	nop			@ (mov r8, r8)
 80030cc:	40021800 	.word	0x40021800
 80030d0:	50000400 	.word	0x50000400
 80030d4:	50000800 	.word	0x50000800
 80030d8:	50000c00 	.word	0x50000c00

080030dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030dc:	2a00      	cmp	r2, #0
 80030de:	d001      	beq.n	80030e4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030e0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030e2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030e4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80030e6:	e7fc      	b.n	80030e2 <HAL_GPIO_WritePin+0x6>

080030e8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030e8:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030ea:	0013      	movs	r3, r2
 80030ec:	400b      	ands	r3, r1
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	4391      	bics	r1, r2
 80030f2:	430b      	orrs	r3, r1
 80030f4:	6183      	str	r3, [r0, #24]
}
 80030f6:	4770      	bx	lr

080030f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80030f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <HAL_GPIO_EXTI_IRQHandler+0x30>)
{
 80030fa:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80030fc:	68da      	ldr	r2, [r3, #12]
{
 80030fe:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003100:	4210      	tst	r0, r2
 8003102:	d104      	bne.n	800310e <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003104:	4b08      	ldr	r3, [pc, #32]	@ (8003128 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	4222      	tst	r2, r4
 800310a:	d107      	bne.n	800311c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 800310c:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800310e:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003110:	f7ff fa88 	bl	8002624 <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003114:	4b04      	ldr	r3, [pc, #16]	@ (8003128 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	4222      	tst	r2, r4
 800311a:	d0f7      	beq.n	800310c <HAL_GPIO_EXTI_IRQHandler+0x14>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800311c:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800311e:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003120:	f7ff fa88 	bl	8002634 <HAL_GPIO_EXTI_Falling_Callback>
}
 8003124:	e7f2      	b.n	800310c <HAL_GPIO_EXTI_IRQHandler+0x14>
 8003126:	46c0      	nop			@ (mov r8, r8)
 8003128:	40021800 	.word	0x40021800

0800312c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800312c:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800312e:	4c13      	ldr	r4, [pc, #76]	@ (800317c <HAL_PWREx_ControlVoltageScaling+0x50>)
 8003130:	4a13      	ldr	r2, [pc, #76]	@ (8003180 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8003132:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003134:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003136:	4013      	ands	r3, r2
 8003138:	4303      	orrs	r3, r0
 800313a:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800313c:	2380      	movs	r3, #128	@ 0x80
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4298      	cmp	r0, r3
 8003142:	d001      	beq.n	8003148 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8003144:	0028      	movs	r0, r5
 8003146:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003148:	4b0e      	ldr	r3, [pc, #56]	@ (8003184 <HAL_PWREx_ControlVoltageScaling+0x58>)
 800314a:	490f      	ldr	r1, [pc, #60]	@ (8003188 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	0058      	lsls	r0, r3, #1
 8003150:	18c0      	adds	r0, r0, r3
 8003152:	0040      	lsls	r0, r0, #1
 8003154:	f7fc ffd6 	bl	8000104 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003158:	2280      	movs	r2, #128	@ 0x80
 800315a:	6963      	ldr	r3, [r4, #20]
 800315c:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800315e:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003160:	4213      	tst	r3, r2
 8003162:	d102      	bne.n	800316a <HAL_PWREx_ControlVoltageScaling+0x3e>
 8003164:	e7ee      	b.n	8003144 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8003166:	2800      	cmp	r0, #0
 8003168:	d005      	beq.n	8003176 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800316a:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 800316c:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800316e:	4213      	tst	r3, r2
 8003170:	d1f9      	bne.n	8003166 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8003172:	2500      	movs	r5, #0
 8003174:	e7e6      	b.n	8003144 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8003176:	2503      	movs	r5, #3
 8003178:	e7e4      	b.n	8003144 <HAL_PWREx_ControlVoltageScaling+0x18>
 800317a:	46c0      	nop			@ (mov r8, r8)
 800317c:	40007000 	.word	0x40007000
 8003180:	fffff9ff 	.word	0xfffff9ff
 8003184:	20000000 	.word	0x20000000
 8003188:	000f4240 	.word	0x000f4240

0800318c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800318c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800318e:	46ce      	mov	lr, r9
 8003190:	4647      	mov	r7, r8
 8003192:	b580      	push	{r7, lr}
 8003194:	0004      	movs	r4, r0
 8003196:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003198:	2800      	cmp	r0, #0
 800319a:	d027      	beq.n	80031ec <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319c:	6803      	ldr	r3, [r0, #0]
 800319e:	07da      	lsls	r2, r3, #31
 80031a0:	d511      	bpl.n	80031c6 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031a2:	2238      	movs	r2, #56	@ 0x38
 80031a4:	49c0      	ldr	r1, [pc, #768]	@ (80034a8 <HAL_RCC_OscConfig+0x31c>)
 80031a6:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a8:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031aa:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80031ac:	2a10      	cmp	r2, #16
 80031ae:	d100      	bne.n	80031b2 <HAL_RCC_OscConfig+0x26>
 80031b0:	e0cc      	b.n	800334c <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80031b2:	2a08      	cmp	r2, #8
 80031b4:	d000      	beq.n	80031b8 <HAL_RCC_OscConfig+0x2c>
 80031b6:	e0cd      	b.n	8003354 <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b8:	4abb      	ldr	r2, [pc, #748]	@ (80034a8 <HAL_RCC_OscConfig+0x31c>)
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	0392      	lsls	r2, r2, #14
 80031be:	d502      	bpl.n	80031c6 <HAL_RCC_OscConfig+0x3a>
 80031c0:	6862      	ldr	r2, [r4, #4]
 80031c2:	2a00      	cmp	r2, #0
 80031c4:	d012      	beq.n	80031ec <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c6:	079a      	lsls	r2, r3, #30
 80031c8:	d532      	bpl.n	8003230 <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ca:	2338      	movs	r3, #56	@ 0x38
 80031cc:	4ab6      	ldr	r2, [pc, #728]	@ (80034a8 <HAL_RCC_OscConfig+0x31c>)
 80031ce:	6891      	ldr	r1, [r2, #8]
 80031d0:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031d2:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	d100      	bne.n	80031da <HAL_RCC_OscConfig+0x4e>
 80031d8:	e10b      	b.n	80033f2 <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d000      	beq.n	80031e0 <HAL_RCC_OscConfig+0x54>
 80031de:	e10d      	b.n	80033fc <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031e0:	6813      	ldr	r3, [r2, #0]
 80031e2:	055b      	lsls	r3, r3, #21
 80031e4:	d508      	bpl.n	80031f8 <HAL_RCC_OscConfig+0x6c>
 80031e6:	68e3      	ldr	r3, [r4, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 80031ec:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 80031ee:	b003      	add	sp, #12
 80031f0:	bcc0      	pop	{r6, r7}
 80031f2:	46b9      	mov	r9, r7
 80031f4:	46b0      	mov	r8, r6
 80031f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f8:	6851      	ldr	r1, [r2, #4]
 80031fa:	6963      	ldr	r3, [r4, #20]
 80031fc:	48ab      	ldr	r0, [pc, #684]	@ (80034ac <HAL_RCC_OscConfig+0x320>)
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	4001      	ands	r1, r0
 8003202:	430b      	orrs	r3, r1
 8003204:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003206:	4aa8      	ldr	r2, [pc, #672]	@ (80034a8 <HAL_RCC_OscConfig+0x31c>)
 8003208:	49a9      	ldr	r1, [pc, #676]	@ (80034b0 <HAL_RCC_OscConfig+0x324>)
 800320a:	6813      	ldr	r3, [r2, #0]
 800320c:	400b      	ands	r3, r1
 800320e:	6921      	ldr	r1, [r4, #16]
 8003210:	430b      	orrs	r3, r1
 8003212:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003214:	6813      	ldr	r3, [r2, #0]
 8003216:	4aa7      	ldr	r2, [pc, #668]	@ (80034b4 <HAL_RCC_OscConfig+0x328>)
 8003218:	049b      	lsls	r3, r3, #18
 800321a:	0f5b      	lsrs	r3, r3, #29
 800321c:	40da      	lsrs	r2, r3
 800321e:	49a6      	ldr	r1, [pc, #664]	@ (80034b8 <HAL_RCC_OscConfig+0x32c>)
 8003220:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003222:	4ba6      	ldr	r3, [pc, #664]	@ (80034bc <HAL_RCC_OscConfig+0x330>)
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	f7ff fdab 	bl	8002d80 <HAL_InitTick>
 800322a:	2800      	cmp	r0, #0
 800322c:	d1de      	bne.n	80031ec <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	071a      	lsls	r2, r3, #28
 8003232:	d46d      	bmi.n	8003310 <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003234:	075b      	lsls	r3, r3, #29
 8003236:	d545      	bpl.n	80032c4 <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003238:	2338      	movs	r3, #56	@ 0x38
 800323a:	4a9b      	ldr	r2, [pc, #620]	@ (80034a8 <HAL_RCC_OscConfig+0x31c>)
 800323c:	6891      	ldr	r1, [r2, #8]
 800323e:	400b      	ands	r3, r1
 8003240:	2b20      	cmp	r3, #32
 8003242:	d100      	bne.n	8003246 <HAL_RCC_OscConfig+0xba>
 8003244:	e0cc      	b.n	80033e0 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003246:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003248:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800324a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800324c:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800324e:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003250:	4219      	tst	r1, r3
 8003252:	d108      	bne.n	8003266 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 8003254:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003256:	4319      	orrs	r1, r3
 8003258:	63d1      	str	r1, [r2, #60]	@ 0x3c
 800325a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800325c:	4013      	ands	r3, r2
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8003262:	2301      	movs	r3, #1
 8003264:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003266:	2780      	movs	r7, #128	@ 0x80
 8003268:	4e95      	ldr	r6, [pc, #596]	@ (80034c0 <HAL_RCC_OscConfig+0x334>)
 800326a:	007f      	lsls	r7, r7, #1
 800326c:	6833      	ldr	r3, [r6, #0]
 800326e:	423b      	tst	r3, r7
 8003270:	d100      	bne.n	8003274 <HAL_RCC_OscConfig+0xe8>
 8003272:	e0ff      	b.n	8003474 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003274:	68a3      	ldr	r3, [r4, #8]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d100      	bne.n	800327c <HAL_RCC_OscConfig+0xf0>
 800327a:	e0e5      	b.n	8003448 <HAL_RCC_OscConfig+0x2bc>
 800327c:	2b05      	cmp	r3, #5
 800327e:	d100      	bne.n	8003282 <HAL_RCC_OscConfig+0xf6>
 8003280:	e1d1      	b.n	8003626 <HAL_RCC_OscConfig+0x49a>
 8003282:	2101      	movs	r1, #1
 8003284:	4e88      	ldr	r6, [pc, #544]	@ (80034a8 <HAL_RCC_OscConfig+0x31c>)
 8003286:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8003288:	438a      	bics	r2, r1
 800328a:	65f2      	str	r2, [r6, #92]	@ 0x5c
 800328c:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 800328e:	3103      	adds	r1, #3
 8003290:	438a      	bics	r2, r1
 8003292:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003294:	2b00      	cmp	r3, #0
 8003296:	d000      	beq.n	800329a <HAL_RCC_OscConfig+0x10e>
 8003298:	e0da      	b.n	8003450 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 800329a:	f7ff fdb7 	bl	8002e0c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800329e:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 80032a0:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032a2:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	4d87      	ldr	r5, [pc, #540]	@ (80034c4 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032a6:	e005      	b.n	80032b4 <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a8:	f7ff fdb0 	bl	8002e0c <HAL_GetTick>
 80032ac:	1bc0      	subs	r0, r0, r7
 80032ae:	42a8      	cmp	r0, r5
 80032b0:	d900      	bls.n	80032b4 <HAL_RCC_OscConfig+0x128>
 80032b2:	e0ee      	b.n	8003492 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b4:	4642      	mov	r2, r8
 80032b6:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 80032b8:	421a      	tst	r2, r3
 80032ba:	d1f5      	bne.n	80032a8 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 80032bc:	464b      	mov	r3, r9
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d100      	bne.n	80032c4 <HAL_RCC_OscConfig+0x138>
 80032c2:	e16a      	b.n	800359a <HAL_RCC_OscConfig+0x40e>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032c4:	69e3      	ldr	r3, [r4, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d020      	beq.n	800330c <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ca:	2238      	movs	r2, #56	@ 0x38
 80032cc:	4d76      	ldr	r5, [pc, #472]	@ (80034a8 <HAL_RCC_OscConfig+0x31c>)
 80032ce:	68a9      	ldr	r1, [r5, #8]
 80032d0:	400a      	ands	r2, r1
 80032d2:	2a10      	cmp	r2, #16
 80032d4:	d100      	bne.n	80032d8 <HAL_RCC_OscConfig+0x14c>
 80032d6:	e11d      	b.n	8003514 <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d100      	bne.n	80032de <HAL_RCC_OscConfig+0x152>
 80032dc:	e163      	b.n	80035a6 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_PLL_DISABLE();
 80032de:	682b      	ldr	r3, [r5, #0]
 80032e0:	4a79      	ldr	r2, [pc, #484]	@ (80034c8 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e2:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80032e4:	4013      	ands	r3, r2
 80032e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80032e8:	f7ff fd90 	bl	8002e0c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ec:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80032ee:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f0:	e005      	b.n	80032fe <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f2:	f7ff fd8b 	bl	8002e0c <HAL_GetTick>
 80032f6:	1b00      	subs	r0, r0, r4
 80032f8:	2802      	cmp	r0, #2
 80032fa:	d900      	bls.n	80032fe <HAL_RCC_OscConfig+0x172>
 80032fc:	e0c9      	b.n	8003492 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fe:	682b      	ldr	r3, [r5, #0]
 8003300:	4233      	tst	r3, r6
 8003302:	d1f6      	bne.n	80032f2 <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003304:	68eb      	ldr	r3, [r5, #12]
 8003306:	4a71      	ldr	r2, [pc, #452]	@ (80034cc <HAL_RCC_OscConfig+0x340>)
 8003308:	4013      	ands	r3, r2
 800330a:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800330c:	2000      	movs	r0, #0
 800330e:	e76e      	b.n	80031ee <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003310:	2238      	movs	r2, #56	@ 0x38
 8003312:	4d65      	ldr	r5, [pc, #404]	@ (80034a8 <HAL_RCC_OscConfig+0x31c>)
 8003314:	68a9      	ldr	r1, [r5, #8]
 8003316:	400a      	ands	r2, r1
 8003318:	2a18      	cmp	r2, #24
 800331a:	d043      	beq.n	80033a4 <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331c:	69a3      	ldr	r3, [r4, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d100      	bne.n	8003324 <HAL_RCC_OscConfig+0x198>
 8003322:	e0b8      	b.n	8003496 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8003324:	2201      	movs	r2, #1
 8003326:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003328:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 800332a:	4313      	orrs	r3, r2
 800332c:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800332e:	f7ff fd6d 	bl	8002e0c <HAL_GetTick>
 8003332:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003334:	e005      	b.n	8003342 <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003336:	f7ff fd69 	bl	8002e0c <HAL_GetTick>
 800333a:	1b80      	subs	r0, r0, r6
 800333c:	2802      	cmp	r0, #2
 800333e:	d900      	bls.n	8003342 <HAL_RCC_OscConfig+0x1b6>
 8003340:	e0a7      	b.n	8003492 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003342:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003344:	421f      	tst	r7, r3
 8003346:	d0f6      	beq.n	8003336 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	e773      	b.n	8003234 <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800334c:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800334e:	0789      	lsls	r1, r1, #30
 8003350:	d100      	bne.n	8003354 <HAL_RCC_OscConfig+0x1c8>
 8003352:	e731      	b.n	80031b8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003354:	2280      	movs	r2, #128	@ 0x80
 8003356:	6863      	ldr	r3, [r4, #4]
 8003358:	0252      	lsls	r2, r2, #9
 800335a:	4293      	cmp	r3, r2
 800335c:	d02b      	beq.n	80033b6 <HAL_RCC_OscConfig+0x22a>
 800335e:	21a0      	movs	r1, #160	@ 0xa0
 8003360:	02c9      	lsls	r1, r1, #11
 8003362:	428b      	cmp	r3, r1
 8003364:	d100      	bne.n	8003368 <HAL_RCC_OscConfig+0x1dc>
 8003366:	e103      	b.n	8003570 <HAL_RCC_OscConfig+0x3e4>
 8003368:	4d4f      	ldr	r5, [pc, #316]	@ (80034a8 <HAL_RCC_OscConfig+0x31c>)
 800336a:	4959      	ldr	r1, [pc, #356]	@ (80034d0 <HAL_RCC_OscConfig+0x344>)
 800336c:	682a      	ldr	r2, [r5, #0]
 800336e:	400a      	ands	r2, r1
 8003370:	602a      	str	r2, [r5, #0]
 8003372:	682a      	ldr	r2, [r5, #0]
 8003374:	4957      	ldr	r1, [pc, #348]	@ (80034d4 <HAL_RCC_OscConfig+0x348>)
 8003376:	400a      	ands	r2, r1
 8003378:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800337a:	2b00      	cmp	r3, #0
 800337c:	d11f      	bne.n	80033be <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 800337e:	f7ff fd45 	bl	8002e0c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003382:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003384:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003386:	02bf      	lsls	r7, r7, #10
 8003388:	e004      	b.n	8003394 <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800338a:	f7ff fd3f 	bl	8002e0c <HAL_GetTick>
 800338e:	1b80      	subs	r0, r0, r6
 8003390:	2864      	cmp	r0, #100	@ 0x64
 8003392:	d87e      	bhi.n	8003492 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	423b      	tst	r3, r7
 8003398:	d1f7      	bne.n	800338a <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	079a      	lsls	r2, r3, #30
 800339e:	d400      	bmi.n	80033a2 <HAL_RCC_OscConfig+0x216>
 80033a0:	e746      	b.n	8003230 <HAL_RCC_OscConfig+0xa4>
 80033a2:	e712      	b.n	80031ca <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80033a4:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 80033a6:	0792      	lsls	r2, r2, #30
 80033a8:	d400      	bmi.n	80033ac <HAL_RCC_OscConfig+0x220>
 80033aa:	e743      	b.n	8003234 <HAL_RCC_OscConfig+0xa8>
 80033ac:	69a2      	ldr	r2, [r4, #24]
 80033ae:	2a00      	cmp	r2, #0
 80033b0:	d000      	beq.n	80033b4 <HAL_RCC_OscConfig+0x228>
 80033b2:	e73f      	b.n	8003234 <HAL_RCC_OscConfig+0xa8>
 80033b4:	e71a      	b.n	80031ec <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b6:	4a3c      	ldr	r2, [pc, #240]	@ (80034a8 <HAL_RCC_OscConfig+0x31c>)
 80033b8:	6811      	ldr	r1, [r2, #0]
 80033ba:	430b      	orrs	r3, r1
 80033bc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80033be:	f7ff fd25 	bl	8002e0c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033c2:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 80033c4:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033c6:	4f38      	ldr	r7, [pc, #224]	@ (80034a8 <HAL_RCC_OscConfig+0x31c>)
 80033c8:	02b6      	lsls	r6, r6, #10
 80033ca:	e004      	b.n	80033d6 <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033cc:	f7ff fd1e 	bl	8002e0c <HAL_GetTick>
 80033d0:	1b40      	subs	r0, r0, r5
 80033d2:	2864      	cmp	r0, #100	@ 0x64
 80033d4:	d85d      	bhi.n	8003492 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	4233      	tst	r3, r6
 80033da:	d0f7      	beq.n	80033cc <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	e7dd      	b.n	800339c <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80033e0:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80033e2:	079b      	lsls	r3, r3, #30
 80033e4:	d400      	bmi.n	80033e8 <HAL_RCC_OscConfig+0x25c>
 80033e6:	e76d      	b.n	80032c4 <HAL_RCC_OscConfig+0x138>
 80033e8:	68a3      	ldr	r3, [r4, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d000      	beq.n	80033f0 <HAL_RCC_OscConfig+0x264>
 80033ee:	e769      	b.n	80032c4 <HAL_RCC_OscConfig+0x138>
 80033f0:	e6fc      	b.n	80031ec <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033f2:	3b0d      	subs	r3, #13
 80033f4:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d100      	bne.n	80033fc <HAL_RCC_OscConfig+0x270>
 80033fa:	e0c3      	b.n	8003584 <HAL_RCC_OscConfig+0x3f8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033fc:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80033fe:	4d2a      	ldr	r5, [pc, #168]	@ (80034a8 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003400:	2b00      	cmp	r3, #0
 8003402:	d073      	beq.n	80034ec <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003404:	682b      	ldr	r3, [r5, #0]
 8003406:	4a2a      	ldr	r2, [pc, #168]	@ (80034b0 <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003408:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800340a:	4013      	ands	r3, r2
 800340c:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800340e:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003410:	4313      	orrs	r3, r2
 8003412:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8003414:	2380      	movs	r3, #128	@ 0x80
 8003416:	682a      	ldr	r2, [r5, #0]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4313      	orrs	r3, r2
 800341c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800341e:	f7ff fcf5 	bl	8002e0c <HAL_GetTick>
 8003422:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003424:	e004      	b.n	8003430 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003426:	f7ff fcf1 	bl	8002e0c <HAL_GetTick>
 800342a:	1b80      	subs	r0, r0, r6
 800342c:	2802      	cmp	r0, #2
 800342e:	d830      	bhi.n	8003492 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003430:	682b      	ldr	r3, [r5, #0]
 8003432:	423b      	tst	r3, r7
 8003434:	d0f7      	beq.n	8003426 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	686a      	ldr	r2, [r5, #4]
 8003438:	6963      	ldr	r3, [r4, #20]
 800343a:	491c      	ldr	r1, [pc, #112]	@ (80034ac <HAL_RCC_OscConfig+0x320>)
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	400a      	ands	r2, r1
 8003440:	4313      	orrs	r3, r2
 8003442:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	e6f3      	b.n	8003230 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003448:	4917      	ldr	r1, [pc, #92]	@ (80034a8 <HAL_RCC_OscConfig+0x31c>)
 800344a:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 800344c:	4313      	orrs	r3, r2
 800344e:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8003450:	f7ff fcdc 	bl	8002e0c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003454:	4b14      	ldr	r3, [pc, #80]	@ (80034a8 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8003456:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003458:	4698      	mov	r8, r3
 800345a:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345c:	4d19      	ldr	r5, [pc, #100]	@ (80034c4 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345e:	e004      	b.n	800346a <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003460:	f7ff fcd4 	bl	8002e0c <HAL_GetTick>
 8003464:	1b80      	subs	r0, r0, r6
 8003466:	42a8      	cmp	r0, r5
 8003468:	d813      	bhi.n	8003492 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346a:	4643      	mov	r3, r8
 800346c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346e:	421f      	tst	r7, r3
 8003470:	d0f6      	beq.n	8003460 <HAL_RCC_OscConfig+0x2d4>
 8003472:	e723      	b.n	80032bc <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003474:	6833      	ldr	r3, [r6, #0]
 8003476:	433b      	orrs	r3, r7
 8003478:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800347a:	f7ff fcc7 	bl	8002e0c <HAL_GetTick>
 800347e:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003480:	6833      	ldr	r3, [r6, #0]
 8003482:	423b      	tst	r3, r7
 8003484:	d000      	beq.n	8003488 <HAL_RCC_OscConfig+0x2fc>
 8003486:	e6f5      	b.n	8003274 <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003488:	f7ff fcc0 	bl	8002e0c <HAL_GetTick>
 800348c:	1b40      	subs	r0, r0, r5
 800348e:	2802      	cmp	r0, #2
 8003490:	d9f6      	bls.n	8003480 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 8003492:	2003      	movs	r0, #3
 8003494:	e6ab      	b.n	80031ee <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 8003496:	2201      	movs	r2, #1
 8003498:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800349a:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 800349c:	4393      	bics	r3, r2
 800349e:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80034a0:	f7ff fcb4 	bl	8002e0c <HAL_GetTick>
 80034a4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a6:	e01c      	b.n	80034e2 <HAL_RCC_OscConfig+0x356>
 80034a8:	40021000 	.word	0x40021000
 80034ac:	ffff80ff 	.word	0xffff80ff
 80034b0:	ffffc7ff 	.word	0xffffc7ff
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20000008 	.word	0x20000008
 80034c0:	40007000 	.word	0x40007000
 80034c4:	00001388 	.word	0x00001388
 80034c8:	feffffff 	.word	0xfeffffff
 80034cc:	eefefffc 	.word	0xeefefffc
 80034d0:	fffeffff 	.word	0xfffeffff
 80034d4:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d8:	f7ff fc98 	bl	8002e0c <HAL_GetTick>
 80034dc:	1b80      	subs	r0, r0, r6
 80034de:	2802      	cmp	r0, #2
 80034e0:	d8d7      	bhi.n	8003492 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034e2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80034e4:	421f      	tst	r7, r3
 80034e6:	d1f7      	bne.n	80034d8 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	e6a3      	b.n	8003234 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 80034ec:	682b      	ldr	r3, [r5, #0]
 80034ee:	4a55      	ldr	r2, [pc, #340]	@ (8003644 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034f0:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 80034f2:	4013      	ands	r3, r2
 80034f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80034f6:	f7ff fc89 	bl	8002e0c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034fa:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 80034fc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034fe:	e004      	b.n	800350a <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003500:	f7ff fc84 	bl	8002e0c <HAL_GetTick>
 8003504:	1b80      	subs	r0, r0, r6
 8003506:	2802      	cmp	r0, #2
 8003508:	d8c3      	bhi.n	8003492 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800350a:	682b      	ldr	r3, [r5, #0]
 800350c:	423b      	tst	r3, r7
 800350e:	d1f7      	bne.n	8003500 <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	e68d      	b.n	8003230 <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003514:	2b01      	cmp	r3, #1
 8003516:	d100      	bne.n	800351a <HAL_RCC_OscConfig+0x38e>
 8003518:	e668      	b.n	80031ec <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351a:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 800351c:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	6a21      	ldr	r1, [r4, #32]
 8003520:	4002      	ands	r2, r0
 8003522:	428a      	cmp	r2, r1
 8003524:	d000      	beq.n	8003528 <HAL_RCC_OscConfig+0x39c>
 8003526:	e661      	b.n	80031ec <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003528:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800352c:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	428a      	cmp	r2, r1
 8003530:	d000      	beq.n	8003534 <HAL_RCC_OscConfig+0x3a8>
 8003532:	e65b      	b.n	80031ec <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003534:	21fe      	movs	r1, #254	@ 0xfe
 8003536:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003538:	01c9      	lsls	r1, r1, #7
 800353a:	4001      	ands	r1, r0
 800353c:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800353e:	4291      	cmp	r1, r2
 8003540:	d000      	beq.n	8003544 <HAL_RCC_OscConfig+0x3b8>
 8003542:	e653      	b.n	80031ec <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003544:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003546:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003548:	0392      	lsls	r2, r2, #14
 800354a:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800354c:	428a      	cmp	r2, r1
 800354e:	d000      	beq.n	8003552 <HAL_RCC_OscConfig+0x3c6>
 8003550:	e64c      	b.n	80031ec <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003552:	22e0      	movs	r2, #224	@ 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003554:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003556:	0512      	lsls	r2, r2, #20
 8003558:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800355a:	428a      	cmp	r2, r1
 800355c:	d000      	beq.n	8003560 <HAL_RCC_OscConfig+0x3d4>
 800355e:	e645      	b.n	80031ec <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003560:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003562:	0f40      	lsrs	r0, r0, #29
 8003564:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003566:	1ac0      	subs	r0, r0, r3
 8003568:	1e43      	subs	r3, r0, #1
 800356a:	4198      	sbcs	r0, r3
 800356c:	b2c0      	uxtb	r0, r0
 800356e:	e63e      	b.n	80031ee <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003570:	2180      	movs	r1, #128	@ 0x80
 8003572:	4b35      	ldr	r3, [pc, #212]	@ (8003648 <HAL_RCC_OscConfig+0x4bc>)
 8003574:	02c9      	lsls	r1, r1, #11
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	4301      	orrs	r1, r0
 800357a:	6019      	str	r1, [r3, #0]
 800357c:	6819      	ldr	r1, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003582:	e71c      	b.n	80033be <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003584:	6813      	ldr	r3, [r2, #0]
 8003586:	055b      	lsls	r3, r3, #21
 8003588:	d457      	bmi.n	800363a <HAL_RCC_OscConfig+0x4ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358a:	6851      	ldr	r1, [r2, #4]
 800358c:	6963      	ldr	r3, [r4, #20]
 800358e:	482f      	ldr	r0, [pc, #188]	@ (800364c <HAL_RCC_OscConfig+0x4c0>)
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	4001      	ands	r1, r0
 8003594:	430b      	orrs	r3, r1
 8003596:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003598:	e643      	b.n	8003222 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 800359a:	4a2b      	ldr	r2, [pc, #172]	@ (8003648 <HAL_RCC_OscConfig+0x4bc>)
 800359c:	492c      	ldr	r1, [pc, #176]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 800359e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80035a0:	400b      	ands	r3, r1
 80035a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80035a4:	e68e      	b.n	80032c4 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 80035a6:	682b      	ldr	r3, [r5, #0]
 80035a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003654 <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035aa:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80035ac:	4013      	ands	r3, r2
 80035ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80035b0:	f7ff fc2c 	bl	8002e0c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b4:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 80035b6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b8:	e005      	b.n	80035c6 <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ba:	f7ff fc27 	bl	8002e0c <HAL_GetTick>
 80035be:	1b80      	subs	r0, r0, r6
 80035c0:	2802      	cmp	r0, #2
 80035c2:	d900      	bls.n	80035c6 <HAL_RCC_OscConfig+0x43a>
 80035c4:	e765      	b.n	8003492 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c6:	682b      	ldr	r3, [r5, #0]
 80035c8:	423b      	tst	r3, r7
 80035ca:	d1f6      	bne.n	80035ba <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80035ce:	6a23      	ldr	r3, [r4, #32]
 80035d0:	68ea      	ldr	r2, [r5, #12]
 80035d2:	430b      	orrs	r3, r1
 80035d4:	4920      	ldr	r1, [pc, #128]	@ (8003658 <HAL_RCC_OscConfig+0x4cc>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d6:	4e1c      	ldr	r6, [pc, #112]	@ (8003648 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d8:	400a      	ands	r2, r1
 80035da:	4313      	orrs	r3, r2
 80035dc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80035de:	4313      	orrs	r3, r2
 80035e0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80035e2:	4313      	orrs	r3, r2
 80035e4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80035e6:	4313      	orrs	r3, r2
 80035e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80035ea:	0212      	lsls	r2, r2, #8
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80035f0:	2380      	movs	r3, #128	@ 0x80
 80035f2:	682a      	ldr	r2, [r5, #0]
 80035f4:	045b      	lsls	r3, r3, #17
 80035f6:	4313      	orrs	r3, r2
 80035f8:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80035fa:	2380      	movs	r3, #128	@ 0x80
 80035fc:	68ea      	ldr	r2, [r5, #12]
 80035fe:	055b      	lsls	r3, r3, #21
 8003600:	4313      	orrs	r3, r2
 8003602:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8003604:	f7ff fc02 	bl	8002e0c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003608:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 800360a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360c:	04ad      	lsls	r5, r5, #18
 800360e:	e005      	b.n	800361c <HAL_RCC_OscConfig+0x490>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003610:	f7ff fbfc 	bl	8002e0c <HAL_GetTick>
 8003614:	1b00      	subs	r0, r0, r4
 8003616:	2802      	cmp	r0, #2
 8003618:	d900      	bls.n	800361c <HAL_RCC_OscConfig+0x490>
 800361a:	e73a      	b.n	8003492 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361c:	6833      	ldr	r3, [r6, #0]
 800361e:	422b      	tst	r3, r5
 8003620:	d0f6      	beq.n	8003610 <HAL_RCC_OscConfig+0x484>
  return HAL_OK;
 8003622:	2000      	movs	r0, #0
 8003624:	e5e3      	b.n	80031ee <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003626:	2104      	movs	r1, #4
 8003628:	4b07      	ldr	r3, [pc, #28]	@ (8003648 <HAL_RCC_OscConfig+0x4bc>)
 800362a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800362c:	430a      	orrs	r2, r1
 800362e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003630:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003632:	3903      	subs	r1, #3
 8003634:	430a      	orrs	r2, r1
 8003636:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003638:	e70a      	b.n	8003450 <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800363a:	68e3      	ldr	r3, [r4, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1a4      	bne.n	800358a <HAL_RCC_OscConfig+0x3fe>
 8003640:	e5d4      	b.n	80031ec <HAL_RCC_OscConfig+0x60>
 8003642:	46c0      	nop			@ (mov r8, r8)
 8003644:	fffffeff 	.word	0xfffffeff
 8003648:	40021000 	.word	0x40021000
 800364c:	ffff80ff 	.word	0xffff80ff
 8003650:	efffffff 	.word	0xefffffff
 8003654:	feffffff 	.word	0xfeffffff
 8003658:	11c1808c 	.word	0x11c1808c

0800365c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800365c:	2338      	movs	r3, #56	@ 0x38
 800365e:	4a22      	ldr	r2, [pc, #136]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 8003660:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003662:	6891      	ldr	r1, [r2, #8]
 8003664:	420b      	tst	r3, r1
 8003666:	d105      	bne.n	8003674 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003668:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800366a:	4820      	ldr	r0, [pc, #128]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800366c:	049b      	lsls	r3, r3, #18
 800366e:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003670:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8003672:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003674:	6891      	ldr	r1, [r2, #8]
 8003676:	4019      	ands	r1, r3
 8003678:	2908      	cmp	r1, #8
 800367a:	d014      	beq.n	80036a6 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800367c:	6891      	ldr	r1, [r2, #8]
 800367e:	4019      	ands	r1, r3
 8003680:	2910      	cmp	r1, #16
 8003682:	d012      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003684:	6891      	ldr	r1, [r2, #8]
 8003686:	4019      	ands	r1, r3
 8003688:	2920      	cmp	r1, #32
 800368a:	d024      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800368c:	6890      	ldr	r0, [r2, #8]
 800368e:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8003690:	3818      	subs	r0, #24
 8003692:	1e43      	subs	r3, r0, #1
 8003694:	4198      	sbcs	r0, r3
 8003696:	4b16      	ldr	r3, [pc, #88]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003698:	4240      	negs	r0, r0
 800369a:	4018      	ands	r0, r3
 800369c:	23fa      	movs	r3, #250	@ 0xfa
 800369e:	01db      	lsls	r3, r3, #7
 80036a0:	469c      	mov	ip, r3
 80036a2:	4460      	add	r0, ip
 80036a4:	e7e5      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 80036a6:	4813      	ldr	r0, [pc, #76]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80036a8:	e7e3      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80036aa:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036ac:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80036ae:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80036b0:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036b2:	0649      	lsls	r1, r1, #25
 80036b4:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80036b6:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036b8:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80036ba:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 80036bc:	079b      	lsls	r3, r3, #30
 80036be:	d00d      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80036c0:	480a      	ldr	r0, [pc, #40]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x90>)
 80036c2:	f7fc fd1f 	bl	8000104 <__udivsi3>
 80036c6:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80036c8:	4b07      	ldr	r3, [pc, #28]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x8c>)
 80036ca:	68d9      	ldr	r1, [r3, #12]
 80036cc:	0f49      	lsrs	r1, r1, #29
 80036ce:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 80036d0:	f7fc fd18 	bl	8000104 <__udivsi3>
 80036d4:	e7cd      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 80036d6:	2080      	movs	r0, #128	@ 0x80
 80036d8:	0200      	lsls	r0, r0, #8
 80036da:	e7ca      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036dc:	4805      	ldr	r0, [pc, #20]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80036de:	f7fc fd11 	bl	8000104 <__udivsi3>
 80036e2:	4360      	muls	r0, r4
        break;
 80036e4:	e7f0      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x6c>
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	40021000 	.word	0x40021000
 80036ec:	00f42400 	.word	0x00f42400
 80036f0:	ffff8300 	.word	0xffff8300
 80036f4:	007a1200 	.word	0x007a1200

080036f8 <HAL_RCC_ClockConfig>:
{
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	46ce      	mov	lr, r9
 80036fc:	4647      	mov	r7, r8
 80036fe:	0005      	movs	r5, r0
 8003700:	000c      	movs	r4, r1
 8003702:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8003704:	2800      	cmp	r0, #0
 8003706:	d026      	beq.n	8003756 <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003708:	2207      	movs	r2, #7
 800370a:	4e57      	ldr	r6, [pc, #348]	@ (8003868 <HAL_RCC_ClockConfig+0x170>)
 800370c:	6833      	ldr	r3, [r6, #0]
 800370e:	4013      	ands	r3, r2
 8003710:	428b      	cmp	r3, r1
 8003712:	d35e      	bcc.n	80037d2 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	079a      	lsls	r2, r3, #30
 8003718:	d50e      	bpl.n	8003738 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371a:	075a      	lsls	r2, r3, #29
 800371c:	d505      	bpl.n	800372a <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800371e:	22e0      	movs	r2, #224	@ 0xe0
 8003720:	4952      	ldr	r1, [pc, #328]	@ (800386c <HAL_RCC_ClockConfig+0x174>)
 8003722:	01d2      	lsls	r2, r2, #7
 8003724:	6888      	ldr	r0, [r1, #8]
 8003726:	4302      	orrs	r2, r0
 8003728:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800372a:	4950      	ldr	r1, [pc, #320]	@ (800386c <HAL_RCC_ClockConfig+0x174>)
 800372c:	4850      	ldr	r0, [pc, #320]	@ (8003870 <HAL_RCC_ClockConfig+0x178>)
 800372e:	688a      	ldr	r2, [r1, #8]
 8003730:	4002      	ands	r2, r0
 8003732:	68a8      	ldr	r0, [r5, #8]
 8003734:	4302      	orrs	r2, r0
 8003736:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003738:	07db      	lsls	r3, r3, #31
 800373a:	d52b      	bpl.n	8003794 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373c:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800373e:	4a4b      	ldr	r2, [pc, #300]	@ (800386c <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003740:	2b01      	cmp	r3, #1
 8003742:	d100      	bne.n	8003746 <HAL_RCC_ClockConfig+0x4e>
 8003744:	e07c      	b.n	8003840 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003746:	2b02      	cmp	r3, #2
 8003748:	d007      	beq.n	800375a <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800374a:	2b00      	cmp	r3, #0
 800374c:	d000      	beq.n	8003750 <HAL_RCC_ClockConfig+0x58>
 800374e:	e07d      	b.n	800384c <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	0552      	lsls	r2, r2, #21
 8003754:	d404      	bmi.n	8003760 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8003756:	2001      	movs	r0, #1
 8003758:	e037      	b.n	80037ca <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	0192      	lsls	r2, r2, #6
 800375e:	d5fa      	bpl.n	8003756 <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003760:	2107      	movs	r1, #7
 8003762:	4e42      	ldr	r6, [pc, #264]	@ (800386c <HAL_RCC_ClockConfig+0x174>)
 8003764:	68b2      	ldr	r2, [r6, #8]
 8003766:	438a      	bics	r2, r1
 8003768:	4313      	orrs	r3, r2
 800376a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800376c:	f7ff fb4e 	bl	8002e0c <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003770:	2338      	movs	r3, #56	@ 0x38
 8003772:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	4b3f      	ldr	r3, [pc, #252]	@ (8003874 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8003776:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003778:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	e004      	b.n	8003786 <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7ff fb46 	bl	8002e0c <HAL_GetTick>
 8003780:	1bc0      	subs	r0, r0, r7
 8003782:	4548      	cmp	r0, r9
 8003784:	d83b      	bhi.n	80037fe <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	4643      	mov	r3, r8
 8003788:	68b2      	ldr	r2, [r6, #8]
 800378a:	401a      	ands	r2, r3
 800378c:	686b      	ldr	r3, [r5, #4]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	429a      	cmp	r2, r3
 8003792:	d1f3      	bne.n	800377c <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003794:	2207      	movs	r2, #7
 8003796:	4e34      	ldr	r6, [pc, #208]	@ (8003868 <HAL_RCC_ClockConfig+0x170>)
 8003798:	6833      	ldr	r3, [r6, #0]
 800379a:	4013      	ands	r3, r2
 800379c:	42a3      	cmp	r3, r4
 800379e:	d838      	bhi.n	8003812 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	075b      	lsls	r3, r3, #29
 80037a4:	d42d      	bmi.n	8003802 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80037a6:	f7ff ff59 	bl	800365c <HAL_RCC_GetSysClockFreq>
 80037aa:	4b30      	ldr	r3, [pc, #192]	@ (800386c <HAL_RCC_ClockConfig+0x174>)
 80037ac:	4a32      	ldr	r2, [pc, #200]	@ (8003878 <HAL_RCC_ClockConfig+0x180>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4932      	ldr	r1, [pc, #200]	@ (800387c <HAL_RCC_ClockConfig+0x184>)
 80037b2:	051b      	lsls	r3, r3, #20
 80037b4:	0f1b      	lsrs	r3, r3, #28
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	589b      	ldr	r3, [r3, r2]
 80037ba:	221f      	movs	r2, #31
 80037bc:	4013      	ands	r3, r2
 80037be:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 80037c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003880 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80037c2:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	f7ff fadb 	bl	8002d80 <HAL_InitTick>
}
 80037ca:	bcc0      	pop	{r6, r7}
 80037cc:	46b9      	mov	r9, r7
 80037ce:	46b0      	mov	r8, r6
 80037d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	6833      	ldr	r3, [r6, #0]
 80037d4:	4393      	bics	r3, r2
 80037d6:	430b      	orrs	r3, r1
 80037d8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80037da:	f7ff fb17 	bl	8002e0c <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037de:	2307      	movs	r3, #7
 80037e0:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e2:	4b24      	ldr	r3, [pc, #144]	@ (8003874 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80037e4:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e6:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037e8:	4642      	mov	r2, r8
 80037ea:	6833      	ldr	r3, [r6, #0]
 80037ec:	4013      	ands	r3, r2
 80037ee:	42a3      	cmp	r3, r4
 80037f0:	d100      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xfc>
 80037f2:	e78f      	b.n	8003714 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f4:	f7ff fb0a 	bl	8002e0c <HAL_GetTick>
 80037f8:	1bc0      	subs	r0, r0, r7
 80037fa:	4548      	cmp	r0, r9
 80037fc:	d9f4      	bls.n	80037e8 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 80037fe:	2003      	movs	r0, #3
 8003800:	e7e3      	b.n	80037ca <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003802:	4a1a      	ldr	r2, [pc, #104]	@ (800386c <HAL_RCC_ClockConfig+0x174>)
 8003804:	491f      	ldr	r1, [pc, #124]	@ (8003884 <HAL_RCC_ClockConfig+0x18c>)
 8003806:	6893      	ldr	r3, [r2, #8]
 8003808:	400b      	ands	r3, r1
 800380a:	68e9      	ldr	r1, [r5, #12]
 800380c:	430b      	orrs	r3, r1
 800380e:	6093      	str	r3, [r2, #8]
 8003810:	e7c9      	b.n	80037a6 <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	6833      	ldr	r3, [r6, #0]
 8003814:	4393      	bics	r3, r2
 8003816:	4323      	orrs	r3, r4
 8003818:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800381a:	f7ff faf7 	bl	8002e0c <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800381e:	2307      	movs	r3, #7
 8003820:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003822:	4b14      	ldr	r3, [pc, #80]	@ (8003874 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8003824:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003826:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003828:	4642      	mov	r2, r8
 800382a:	6833      	ldr	r3, [r6, #0]
 800382c:	4013      	ands	r3, r2
 800382e:	42a3      	cmp	r3, r4
 8003830:	d0b6      	beq.n	80037a0 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003832:	f7ff faeb 	bl	8002e0c <HAL_GetTick>
 8003836:	1bc0      	subs	r0, r0, r7
 8003838:	4548      	cmp	r0, r9
 800383a:	d9f5      	bls.n	8003828 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 800383c:	2003      	movs	r0, #3
 800383e:	e7c4      	b.n	80037ca <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	0392      	lsls	r2, r2, #14
 8003844:	d500      	bpl.n	8003848 <HAL_RCC_ClockConfig+0x150>
 8003846:	e78b      	b.n	8003760 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8003848:	2001      	movs	r0, #1
 800384a:	e7be      	b.n	80037ca <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800384c:	2b03      	cmp	r3, #3
 800384e:	d005      	beq.n	800385c <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003850:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003852:	0792      	lsls	r2, r2, #30
 8003854:	d500      	bpl.n	8003858 <HAL_RCC_ClockConfig+0x160>
 8003856:	e783      	b.n	8003760 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8003858:	2001      	movs	r0, #1
 800385a:	e7b6      	b.n	80037ca <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800385c:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800385e:	0792      	lsls	r2, r2, #30
 8003860:	d500      	bpl.n	8003864 <HAL_RCC_ClockConfig+0x16c>
 8003862:	e77d      	b.n	8003760 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8003864:	2001      	movs	r0, #1
 8003866:	e7b0      	b.n	80037ca <HAL_RCC_ClockConfig+0xd2>
 8003868:	40022000 	.word	0x40022000
 800386c:	40021000 	.word	0x40021000
 8003870:	fffff0ff 	.word	0xfffff0ff
 8003874:	00001388 	.word	0x00001388
 8003878:	080048d0 	.word	0x080048d0
 800387c:	20000000 	.word	0x20000000
 8003880:	20000008 	.word	0x20000008
 8003884:	ffff8fff 	.word	0xffff8fff

08003888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388a:	46d6      	mov	lr, sl
 800388c:	464f      	mov	r7, r9
 800388e:	4646      	mov	r6, r8
 8003890:	b5c0      	push	{r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003892:	6803      	ldr	r3, [r0, #0]
{
 8003894:	0004      	movs	r4, r0
 8003896:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003898:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800389a:	039a      	lsls	r2, r3, #14
 800389c:	d543      	bpl.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x9e>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389e:	2280      	movs	r2, #128	@ 0x80
 80038a0:	4b68      	ldr	r3, [pc, #416]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038a2:	0552      	lsls	r2, r2, #21
 80038a4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80038a6:	4682      	mov	sl, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a8:	4211      	tst	r1, r2
 80038aa:	d100      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80038ac:	e095      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x152>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ae:	2780      	movs	r7, #128	@ 0x80
 80038b0:	4d65      	ldr	r5, [pc, #404]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038b2:	007f      	lsls	r7, r7, #1
 80038b4:	682b      	ldr	r3, [r5, #0]
 80038b6:	433b      	orrs	r3, r7
 80038b8:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038ba:	f7ff faa7 	bl	8002e0c <HAL_GetTick>
 80038be:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038c0:	e004      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c2:	f7ff faa3 	bl	8002e0c <HAL_GetTick>
 80038c6:	1b80      	subs	r0, r0, r6
 80038c8:	2802      	cmp	r0, #2
 80038ca:	d827      	bhi.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x94>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038cc:	682b      	ldr	r3, [r5, #0]
 80038ce:	423b      	tst	r3, r7
 80038d0:	d0f7      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038d2:	4d5c      	ldr	r5, [pc, #368]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038d4:	23c0      	movs	r3, #192	@ 0xc0
 80038d6:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	0010      	movs	r0, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038de:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038e0:	421a      	tst	r2, r3
 80038e2:	d100      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80038e4:	e0a6      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80038e6:	4288      	cmp	r0, r1
 80038e8:	d100      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038ea:	e0a3      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038ec:	2080      	movs	r0, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038ee:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 80038f0:	6dee      	ldr	r6, [r5, #92]	@ 0x5c
 80038f2:	0240      	lsls	r0, r0, #9
 80038f4:	4330      	orrs	r0, r6
 80038f6:	65e8      	str	r0, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038f8:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038fa:	4a54      	ldr	r2, [pc, #336]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038fc:	4e54      	ldr	r6, [pc, #336]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038fe:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003900:	4030      	ands	r0, r6
 8003902:	65e8      	str	r0, [r5, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003904:	65ea      	str	r2, [r5, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003906:	07db      	lsls	r3, r3, #31
 8003908:	d400      	bmi.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x84>
 800390a:	e093      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7ff fa7e 	bl	8002e0c <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003910:	2302      	movs	r3, #2
 8003912:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003914:	4b4f      	ldr	r3, [pc, #316]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
        tickstart = HAL_GetTick();
 8003916:	0006      	movs	r6, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800391a:	e086      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 800391c:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800391e:	4652      	mov	r2, sl
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003920:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 8003922:	2a01      	cmp	r2, #1
 8003924:	d063      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003926:	07da      	lsls	r2, r3, #31
 8003928:	d506      	bpl.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800392a:	2503      	movs	r5, #3
 800392c:	4945      	ldr	r1, [pc, #276]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800392e:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003930:	43aa      	bics	r2, r5
 8003932:	6865      	ldr	r5, [r4, #4]
 8003934:	432a      	orrs	r2, r5
 8003936:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003938:	06da      	lsls	r2, r3, #27
 800393a:	d506      	bpl.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800393c:	4941      	ldr	r1, [pc, #260]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800393e:	4d46      	ldr	r5, [pc, #280]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003940:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003942:	402a      	ands	r2, r5
 8003944:	68a5      	ldr	r5, [r4, #8]
 8003946:	432a      	orrs	r2, r5
 8003948:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800394a:	059a      	lsls	r2, r3, #22
 800394c:	d506      	bpl.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800394e:	493d      	ldr	r1, [pc, #244]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003950:	4d42      	ldr	r5, [pc, #264]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003952:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003954:	402a      	ands	r2, r5
 8003956:	6965      	ldr	r5, [r4, #20]
 8003958:	432a      	orrs	r2, r5
 800395a:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800395c:	055a      	lsls	r2, r3, #21
 800395e:	d506      	bpl.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003960:	4938      	ldr	r1, [pc, #224]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003962:	4d3f      	ldr	r5, [pc, #252]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003964:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003966:	402a      	ands	r2, r5
 8003968:	69a5      	ldr	r5, [r4, #24]
 800396a:	432a      	orrs	r2, r5
 800396c:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800396e:	069a      	lsls	r2, r3, #26
 8003970:	d506      	bpl.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003972:	4934      	ldr	r1, [pc, #208]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003974:	4d3b      	ldr	r5, [pc, #236]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003976:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003978:	402a      	ands	r2, r5
 800397a:	68e5      	ldr	r5, [r4, #12]
 800397c:	432a      	orrs	r2, r5
 800397e:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003980:	045a      	lsls	r2, r3, #17
 8003982:	d50a      	bpl.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003984:	492f      	ldr	r1, [pc, #188]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003986:	69e5      	ldr	r5, [r4, #28]
 8003988:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800398a:	0092      	lsls	r2, r2, #2
 800398c:	0892      	lsrs	r2, r2, #2
 800398e:	432a      	orrs	r2, r5
 8003990:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003992:	2280      	movs	r2, #128	@ 0x80
 8003994:	05d2      	lsls	r2, r2, #23
 8003996:	4295      	cmp	r5, r2
 8003998:	d02f      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x172>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800399a:	029a      	lsls	r2, r3, #10
 800399c:	d50a      	bpl.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800399e:	4929      	ldr	r1, [pc, #164]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039a0:	4e31      	ldr	r6, [pc, #196]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039a2:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80039a4:	6a25      	ldr	r5, [r4, #32]
 80039a6:	4032      	ands	r2, r6
 80039a8:	432a      	orrs	r2, r5
 80039aa:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80039ac:	2280      	movs	r2, #128	@ 0x80
 80039ae:	03d2      	lsls	r2, r2, #15
 80039b0:	4295      	cmp	r5, r2
 80039b2:	d028      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80039b4:	051b      	lsls	r3, r3, #20
 80039b6:	d50a      	bpl.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80039b8:	4a22      	ldr	r2, [pc, #136]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039ba:	6921      	ldr	r1, [r4, #16]
 80039bc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80039be:	4c2b      	ldr	r4, [pc, #172]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80039c0:	4023      	ands	r3, r4
 80039c2:	430b      	orrs	r3, r1
 80039c4:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80039c6:	2380      	movs	r3, #128	@ 0x80
 80039c8:	01db      	lsls	r3, r3, #7
 80039ca:	4299      	cmp	r1, r3
 80039cc:	d021      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 80039ce:	b002      	add	sp, #8
 80039d0:	bce0      	pop	{r5, r6, r7}
 80039d2:	46ba      	mov	sl, r7
 80039d4:	46b1      	mov	r9, r6
 80039d6:	46a8      	mov	r8, r5
 80039d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80039dc:	4311      	orrs	r1, r2
 80039de:	63d9      	str	r1, [r3, #60]	@ 0x3c
 80039e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e2:	4013      	ands	r3, r2
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80039e8:	2301      	movs	r3, #1
 80039ea:	469a      	mov	sl, r3
 80039ec:	e75f      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ee:	4915      	ldr	r1, [pc, #84]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039f0:	4d1f      	ldr	r5, [pc, #124]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80039f2:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80039f4:	402a      	ands	r2, r5
 80039f6:	63ca      	str	r2, [r1, #60]	@ 0x3c
 80039f8:	e795      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80039fa:	2280      	movs	r2, #128	@ 0x80
 80039fc:	68cd      	ldr	r5, [r1, #12]
 80039fe:	0252      	lsls	r2, r2, #9
 8003a00:	432a      	orrs	r2, r5
 8003a02:	60ca      	str	r2, [r1, #12]
 8003a04:	e7c9      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003a06:	2280      	movs	r2, #128	@ 0x80
 8003a08:	68cd      	ldr	r5, [r1, #12]
 8003a0a:	0452      	lsls	r2, r2, #17
 8003a0c:	432a      	orrs	r2, r5
 8003a0e:	60ca      	str	r2, [r1, #12]
 8003a10:	e7d0      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a12:	2380      	movs	r3, #128	@ 0x80
 8003a14:	68d1      	ldr	r1, [r2, #12]
 8003a16:	025b      	lsls	r3, r3, #9
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	60d3      	str	r3, [r2, #12]
  return status;
 8003a1c:	e7d7      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x146>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1e:	f7ff f9f5 	bl	8002e0c <HAL_GetTick>
 8003a22:	1b80      	subs	r0, r0, r6
 8003a24:	4548      	cmp	r0, r9
 8003a26:	d900      	bls.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003a28:	e778      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a2a:	4642      	mov	r2, r8
 8003a2c:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8003a2e:	421a      	tst	r2, r3
 8003a30:	d0f5      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x196>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a32:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003a34:	4a03      	ldr	r2, [pc, #12]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a36:	4805      	ldr	r0, [pc, #20]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003a38:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8003a3a:	4003      	ands	r3, r0
 8003a3c:	430b      	orrs	r3, r1
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a3e:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a40:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003a42:	e76c      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x96>
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	fffffcff 	.word	0xfffffcff
 8003a50:	fffeffff 	.word	0xfffeffff
 8003a54:	00001388 	.word	0x00001388
 8003a58:	fffff3ff 	.word	0xfffff3ff
 8003a5c:	fff3ffff 	.word	0xfff3ffff
 8003a60:	ffcfffff 	.word	0xffcfffff
 8003a64:	ffffcfff 	.word	0xffffcfff
 8003a68:	ffbfffff 	.word	0xffbfffff
 8003a6c:	ffff3fff 	.word	0xffff3fff
 8003a70:	efffffff 	.word	0xefffffff

08003a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a74:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a76:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8003a78:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7a:	6a02      	ldr	r2, [r0, #32]
 8003a7c:	43a2      	bics	r2, r4
 8003a7e:	6202      	str	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a80:	4c12      	ldr	r4, [pc, #72]	@ (8003acc <TIM_OC1_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8003a82:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003a84:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a86:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a88:	680c      	ldr	r4, [r1, #0]
 8003a8a:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a8c:	2402      	movs	r4, #2
 8003a8e:	43a3      	bics	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a90:	688c      	ldr	r4, [r1, #8]
 8003a92:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a94:	4c0e      	ldr	r4, [pc, #56]	@ (8003ad0 <TIM_OC1_SetConfig+0x5c>)
 8003a96:	42a0      	cmp	r0, r4
 8003a98:	d005      	beq.n	8003aa6 <TIM_OC1_SetConfig+0x32>
 8003a9a:	4c0e      	ldr	r4, [pc, #56]	@ (8003ad4 <TIM_OC1_SetConfig+0x60>)
 8003a9c:	42a0      	cmp	r0, r4
 8003a9e:	d002      	beq.n	8003aa6 <TIM_OC1_SetConfig+0x32>
 8003aa0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ad8 <TIM_OC1_SetConfig+0x64>)
 8003aa2:	42a0      	cmp	r0, r4
 8003aa4:	d10b      	bne.n	8003abe <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003aa6:	2408      	movs	r4, #8
 8003aa8:	43a3      	bics	r3, r4
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003aaa:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aac:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8003aae:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ab0:	2404      	movs	r4, #4
 8003ab2:	43a3      	bics	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ab4:	4c09      	ldr	r4, [pc, #36]	@ (8003adc <TIM_OC1_SetConfig+0x68>)
 8003ab6:	402c      	ands	r4, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ab8:	694d      	ldr	r5, [r1, #20]
 8003aba:	4335      	orrs	r5, r6
 8003abc:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003abe:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ac0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ac2:	684a      	ldr	r2, [r1, #4]
 8003ac4:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac6:	6203      	str	r3, [r0, #32]
}
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	fffeff8c 	.word	0xfffeff8c
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40014400 	.word	0x40014400
 8003ad8:	40014800 	.word	0x40014800
 8003adc:	fffffcff 	.word	0xfffffcff

08003ae0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae0:	6a02      	ldr	r2, [r0, #32]
{
 8003ae2:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ae4:	6a03      	ldr	r3, [r0, #32]
 8003ae6:	4c16      	ldr	r4, [pc, #88]	@ (8003b40 <TIM_OC3_SetConfig+0x60>)
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ae8:	4d16      	ldr	r5, [pc, #88]	@ (8003b44 <TIM_OC3_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aea:	4023      	ands	r3, r4
 8003aec:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003aee:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003af0:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003af2:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af4:	680d      	ldr	r5, [r1, #0]
 8003af6:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003af8:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <TIM_OC3_SetConfig+0x68>)
 8003afa:	401a      	ands	r2, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003afc:	688b      	ldr	r3, [r1, #8]
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b02:	4a12      	ldr	r2, [pc, #72]	@ (8003b4c <TIM_OC3_SetConfig+0x6c>)
 8003b04:	4290      	cmp	r0, r2
 8003b06:	d012      	beq.n	8003b2e <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b08:	4a11      	ldr	r2, [pc, #68]	@ (8003b50 <TIM_OC3_SetConfig+0x70>)
 8003b0a:	4290      	cmp	r0, r2
 8003b0c:	d002      	beq.n	8003b14 <TIM_OC3_SetConfig+0x34>
 8003b0e:	4a11      	ldr	r2, [pc, #68]	@ (8003b54 <TIM_OC3_SetConfig+0x74>)
 8003b10:	4290      	cmp	r0, r2
 8003b12:	d106      	bne.n	8003b22 <TIM_OC3_SetConfig+0x42>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b14:	4a10      	ldr	r2, [pc, #64]	@ (8003b58 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b16:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b18:	4022      	ands	r2, r4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b1a:	694c      	ldr	r4, [r1, #20]
 8003b1c:	4334      	orrs	r4, r6
 8003b1e:	0124      	lsls	r4, r4, #4
 8003b20:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b22:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003b24:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003b26:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003b28:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2a:	6203      	str	r3, [r0, #32]
}
 8003b2c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8003b5c <TIM_OC3_SetConfig+0x7c>)
 8003b30:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b32:	68cb      	ldr	r3, [r1, #12]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b38:	4a09      	ldr	r2, [pc, #36]	@ (8003b60 <TIM_OC3_SetConfig+0x80>)
 8003b3a:	4013      	ands	r3, r2
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3c:	e7ea      	b.n	8003b14 <TIM_OC3_SetConfig+0x34>
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	fffffeff 	.word	0xfffffeff
 8003b44:	fffeff8c 	.word	0xfffeff8c
 8003b48:	fffffdff 	.word	0xfffffdff
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40014400 	.word	0x40014400
 8003b54:	40014800 	.word	0x40014800
 8003b58:	ffffcfff 	.word	0xffffcfff
 8003b5c:	fffff7ff 	.word	0xfffff7ff
 8003b60:	fffffbff 	.word	0xfffffbff

08003b64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b64:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b66:	4a12      	ldr	r2, [pc, #72]	@ (8003bb0 <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8003b68:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b6a:	6a03      	ldr	r3, [r0, #32]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b70:	4a10      	ldr	r2, [pc, #64]	@ (8003bb4 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8003b72:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003b74:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b76:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b78:	680a      	ldr	r2, [r1, #0]
 8003b7a:	0212      	lsls	r2, r2, #8
 8003b7c:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb8 <TIM_OC4_SetConfig+0x54>)
 8003b80:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b82:	688b      	ldr	r3, [r1, #8]
 8003b84:	031b      	lsls	r3, r3, #12
 8003b86:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b88:	4c0c      	ldr	r4, [pc, #48]	@ (8003bbc <TIM_OC4_SetConfig+0x58>)
 8003b8a:	42a0      	cmp	r0, r4
 8003b8c:	d005      	beq.n	8003b9a <TIM_OC4_SetConfig+0x36>
 8003b8e:	4c0c      	ldr	r4, [pc, #48]	@ (8003bc0 <TIM_OC4_SetConfig+0x5c>)
 8003b90:	42a0      	cmp	r0, r4
 8003b92:	d002      	beq.n	8003b9a <TIM_OC4_SetConfig+0x36>
 8003b94:	4c0b      	ldr	r4, [pc, #44]	@ (8003bc4 <TIM_OC4_SetConfig+0x60>)
 8003b96:	42a0      	cmp	r0, r4
 8003b98:	d104      	bne.n	8003ba4 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b9a:	4c0b      	ldr	r4, [pc, #44]	@ (8003bc8 <TIM_OC4_SetConfig+0x64>)
 8003b9c:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b9e:	694d      	ldr	r5, [r1, #20]
 8003ba0:	01ad      	lsls	r5, r5, #6
 8003ba2:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ba6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ba8:	684a      	ldr	r2, [r1, #4]
 8003baa:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bac:	6203      	str	r3, [r0, #32]
}
 8003bae:	bd30      	pop	{r4, r5, pc}
 8003bb0:	ffffefff 	.word	0xffffefff
 8003bb4:	feff8cff 	.word	0xfeff8cff
 8003bb8:	ffffdfff 	.word	0xffffdfff
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40014400 	.word	0x40014400
 8003bc4:	40014800 	.word	0x40014800
 8003bc8:	ffffbfff 	.word	0xffffbfff

08003bcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bcc:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003bce:	4a12      	ldr	r2, [pc, #72]	@ (8003c18 <TIM_OC5_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8003bd0:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003bd2:	6a03      	ldr	r3, [r0, #32]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bda:	4b10      	ldr	r3, [pc, #64]	@ (8003c1c <TIM_OC5_SetConfig+0x50>)
  tmpccmrx = TIMx->CCMR3;
 8003bdc:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bde:	401a      	ands	r2, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be0:	680b      	ldr	r3, [r1, #0]
 8003be2:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003be4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c20 <TIM_OC5_SetConfig+0x54>)
 8003be6:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003be8:	688b      	ldr	r3, [r1, #8]
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bee:	4d0d      	ldr	r5, [pc, #52]	@ (8003c24 <TIM_OC5_SetConfig+0x58>)
 8003bf0:	42a8      	cmp	r0, r5
 8003bf2:	d005      	beq.n	8003c00 <TIM_OC5_SetConfig+0x34>
 8003bf4:	4d0c      	ldr	r5, [pc, #48]	@ (8003c28 <TIM_OC5_SetConfig+0x5c>)
 8003bf6:	42a8      	cmp	r0, r5
 8003bf8:	d002      	beq.n	8003c00 <TIM_OC5_SetConfig+0x34>
 8003bfa:	4d0c      	ldr	r5, [pc, #48]	@ (8003c2c <TIM_OC5_SetConfig+0x60>)
 8003bfc:	42a8      	cmp	r0, r5
 8003bfe:	d104      	bne.n	8003c0a <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c00:	4d05      	ldr	r5, [pc, #20]	@ (8003c18 <TIM_OC5_SetConfig+0x4c>)
 8003c02:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c04:	694c      	ldr	r4, [r1, #20]
 8003c06:	0224      	lsls	r4, r4, #8
 8003c08:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c0c:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c0e:	684a      	ldr	r2, [r1, #4]
 8003c10:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c12:	6203      	str	r3, [r0, #32]
}
 8003c14:	bd30      	pop	{r4, r5, pc}
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	fffeffff 	.word	0xfffeffff
 8003c1c:	fffeff8f 	.word	0xfffeff8f
 8003c20:	fffdffff 	.word	0xfffdffff
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40014400 	.word	0x40014400
 8003c2c:	40014800 	.word	0x40014800

08003c30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c32:	4a12      	ldr	r2, [pc, #72]	@ (8003c7c <TIM_OC6_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8003c34:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c36:	6a03      	ldr	r3, [r0, #32]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c3c:	4a10      	ldr	r2, [pc, #64]	@ (8003c80 <TIM_OC6_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8003c3e:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8003c40:	6d43      	ldr	r3, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c42:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c44:	680a      	ldr	r2, [r1, #0]
 8003c46:	0212      	lsls	r2, r2, #8
 8003c48:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c84 <TIM_OC6_SetConfig+0x54>)
 8003c4c:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c4e:	688b      	ldr	r3, [r1, #8]
 8003c50:	051b      	lsls	r3, r3, #20
 8003c52:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c54:	4c0c      	ldr	r4, [pc, #48]	@ (8003c88 <TIM_OC6_SetConfig+0x58>)
 8003c56:	42a0      	cmp	r0, r4
 8003c58:	d005      	beq.n	8003c66 <TIM_OC6_SetConfig+0x36>
 8003c5a:	4c0c      	ldr	r4, [pc, #48]	@ (8003c8c <TIM_OC6_SetConfig+0x5c>)
 8003c5c:	42a0      	cmp	r0, r4
 8003c5e:	d002      	beq.n	8003c66 <TIM_OC6_SetConfig+0x36>
 8003c60:	4c0b      	ldr	r4, [pc, #44]	@ (8003c90 <TIM_OC6_SetConfig+0x60>)
 8003c62:	42a0      	cmp	r0, r4
 8003c64:	d104      	bne.n	8003c70 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c66:	4c0b      	ldr	r4, [pc, #44]	@ (8003c94 <TIM_OC6_SetConfig+0x64>)
 8003c68:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c6a:	694d      	ldr	r5, [r1, #20]
 8003c6c:	02ad      	lsls	r5, r5, #10
 8003c6e:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c70:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c72:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c74:	684a      	ldr	r2, [r1, #4]
 8003c76:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c78:	6203      	str	r3, [r0, #32]
}
 8003c7a:	bd30      	pop	{r4, r5, pc}
 8003c7c:	ffefffff 	.word	0xffefffff
 8003c80:	feff8fff 	.word	0xfeff8fff
 8003c84:	ffdfffff 	.word	0xffdfffff
 8003c88:	40012c00 	.word	0x40012c00
 8003c8c:	40014400 	.word	0x40014400
 8003c90:	40014800 	.word	0x40014800
 8003c94:	fffbffff 	.word	0xfffbffff

08003c98 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003c98:	213d      	movs	r1, #61	@ 0x3d
{
 8003c9a:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8003c9c:	5c42      	ldrb	r2, [r0, r1]
{
 8003c9e:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca0:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 8003ca2:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca4:	2a01      	cmp	r2, #1
 8003ca6:	d110      	bne.n	8003cca <HAL_TIM_Base_Start+0x32>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	3201      	adds	r2, #1
 8003caa:	545a      	strb	r2, [r3, r1]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a0e      	ldr	r2, [pc, #56]	@ (8003ce8 <HAL_TIM_Base_Start+0x50>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00b      	beq.n	8003ccc <HAL_TIM_Base_Start+0x34>
 8003cb4:	2280      	movs	r2, #128	@ 0x80
 8003cb6:	05d2      	lsls	r2, r2, #23
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <HAL_TIM_Base_Start+0x34>
 8003cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8003cec <HAL_TIM_Base_Start+0x54>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d004      	beq.n	8003ccc <HAL_TIM_Base_Start+0x34>
    __HAL_TIM_ENABLE(htim);
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4322      	orrs	r2, r4
 8003cc6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003cc8:	2000      	movs	r0, #0
}
 8003cca:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	4908      	ldr	r1, [pc, #32]	@ (8003cf0 <HAL_TIM_Base_Start+0x58>)
 8003cd0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd2:	2a06      	cmp	r2, #6
 8003cd4:	d0f8      	beq.n	8003cc8 <HAL_TIM_Base_Start+0x30>
 8003cd6:	3907      	subs	r1, #7
 8003cd8:	428a      	cmp	r2, r1
 8003cda:	d0f5      	beq.n	8003cc8 <HAL_TIM_Base_Start+0x30>
      __HAL_TIM_ENABLE(htim);
 8003cdc:	2101      	movs	r1, #1
 8003cde:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8003ce0:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e7f0      	b.n	8003cca <HAL_TIM_Base_Start+0x32>
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40000400 	.word	0x40000400
 8003cf0:	00010007 	.word	0x00010007

08003cf4 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cf4:	2910      	cmp	r1, #16
 8003cf6:	d803      	bhi.n	8003d00 <HAL_TIM_OC_Start+0xc>
 8003cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8003dac <HAL_TIM_OC_Start+0xb8>)
 8003cfa:	008b      	lsls	r3, r1, #2
 8003cfc:	58d3      	ldr	r3, [r2, r3]
 8003cfe:	469f      	mov	pc, r3
 8003d00:	2343      	movs	r3, #67	@ 0x43
 8003d02:	5cc2      	ldrb	r2, [r0, r3]
 8003d04:	2a01      	cmp	r2, #1
 8003d06:	d12e      	bne.n	8003d66 <HAL_TIM_OC_Start+0x72>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d08:	2202      	movs	r2, #2
 8003d0a:	54c2      	strb	r2, [r0, r3]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d0c:	221f      	movs	r2, #31
 8003d0e:	4011      	ands	r1, r2
 8003d10:	3a1e      	subs	r2, #30
 8003d12:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d14:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d16:	6a19      	ldr	r1, [r3, #32]
 8003d18:	4391      	bics	r1, r2
 8003d1a:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d1c:	6a19      	ldr	r1, [r3, #32]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d22:	4a23      	ldr	r2, [pc, #140]	@ (8003db0 <HAL_TIM_OC_Start+0xbc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d03a      	beq.n	8003d9e <HAL_TIM_OC_Start+0xaa>
 8003d28:	4a22      	ldr	r2, [pc, #136]	@ (8003db4 <HAL_TIM_OC_Start+0xc0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d031      	beq.n	8003d92 <HAL_TIM_OC_Start+0x9e>
 8003d2e:	4a22      	ldr	r2, [pc, #136]	@ (8003db8 <HAL_TIM_OC_Start+0xc4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d02e      	beq.n	8003d92 <HAL_TIM_OC_Start+0x9e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d34:	2280      	movs	r2, #128	@ 0x80
 8003d36:	05d2      	lsls	r2, r2, #23
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d002      	beq.n	8003d42 <HAL_TIM_OC_Start+0x4e>
 8003d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8003dbc <HAL_TIM_OC_Start+0xc8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d107      	bne.n	8003d52 <HAL_TIM_OC_Start+0x5e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	491e      	ldr	r1, [pc, #120]	@ (8003dc0 <HAL_TIM_OC_Start+0xcc>)
 8003d46:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d48:	2a06      	cmp	r2, #6
 8003d4a:	d006      	beq.n	8003d5a <HAL_TIM_OC_Start+0x66>
 8003d4c:	3907      	subs	r1, #7
 8003d4e:	428a      	cmp	r2, r1
 8003d50:	d003      	beq.n	8003d5a <HAL_TIM_OC_Start+0x66>
      __HAL_TIM_ENABLE(htim);
 8003d52:	2101      	movs	r1, #1
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003d5a:	2000      	movs	r0, #0
}
 8003d5c:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d5e:	233e      	movs	r3, #62	@ 0x3e
 8003d60:	5cc2      	ldrb	r2, [r0, r3]
 8003d62:	2a01      	cmp	r2, #1
 8003d64:	d0d0      	beq.n	8003d08 <HAL_TIM_OC_Start+0x14>
    return HAL_ERROR;
 8003d66:	2001      	movs	r0, #1
 8003d68:	e7f8      	b.n	8003d5c <HAL_TIM_OC_Start+0x68>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d6a:	233f      	movs	r3, #63	@ 0x3f
 8003d6c:	5cc2      	ldrb	r2, [r0, r3]
 8003d6e:	2a01      	cmp	r2, #1
 8003d70:	d0ca      	beq.n	8003d08 <HAL_TIM_OC_Start+0x14>
 8003d72:	e7f8      	b.n	8003d66 <HAL_TIM_OC_Start+0x72>
 8003d74:	2340      	movs	r3, #64	@ 0x40
 8003d76:	5cc2      	ldrb	r2, [r0, r3]
 8003d78:	2a01      	cmp	r2, #1
 8003d7a:	d0c5      	beq.n	8003d08 <HAL_TIM_OC_Start+0x14>
 8003d7c:	e7f3      	b.n	8003d66 <HAL_TIM_OC_Start+0x72>
 8003d7e:	2341      	movs	r3, #65	@ 0x41
 8003d80:	5cc2      	ldrb	r2, [r0, r3]
 8003d82:	2a01      	cmp	r2, #1
 8003d84:	d0c0      	beq.n	8003d08 <HAL_TIM_OC_Start+0x14>
 8003d86:	e7ee      	b.n	8003d66 <HAL_TIM_OC_Start+0x72>
 8003d88:	2342      	movs	r3, #66	@ 0x42
 8003d8a:	5cc2      	ldrb	r2, [r0, r3]
 8003d8c:	2a01      	cmp	r2, #1
 8003d8e:	d0bb      	beq.n	8003d08 <HAL_TIM_OC_Start+0x14>
 8003d90:	e7e9      	b.n	8003d66 <HAL_TIM_OC_Start+0x72>
    __HAL_TIM_MOE_ENABLE(htim);
 8003d92:	2280      	movs	r2, #128	@ 0x80
 8003d94:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003d96:	0212      	lsls	r2, r2, #8
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d9c:	e7d9      	b.n	8003d52 <HAL_TIM_OC_Start+0x5e>
    __HAL_TIM_MOE_ENABLE(htim);
 8003d9e:	2280      	movs	r2, #128	@ 0x80
 8003da0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003da2:	0212      	lsls	r2, r2, #8
 8003da4:	430a      	orrs	r2, r1
 8003da6:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da8:	e7cb      	b.n	8003d42 <HAL_TIM_OC_Start+0x4e>
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	08004910 	.word	0x08004910
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40014400 	.word	0x40014400
 8003db8:	40014800 	.word	0x40014800
 8003dbc:	40000400 	.word	0x40000400
 8003dc0:	00010007 	.word	0x00010007

08003dc4 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8003dc4:	4770      	bx	lr
 8003dc6:	46c0      	nop			@ (mov r8, r8)

08003dc8 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8003dc8:	b510      	push	{r4, lr}
 8003dca:	f7ff ff93 	bl	8003cf4 <HAL_TIM_OC_Start>
 8003dce:	bd10      	pop	{r4, pc}

08003dd0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003dd0:	223c      	movs	r2, #60	@ 0x3c
{
 8003dd2:	b570      	push	{r4, r5, r6, lr}
 8003dd4:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003dd6:	5c80      	ldrb	r0, [r0, r2]
 8003dd8:	2801      	cmp	r0, #1
 8003dda:	d100      	bne.n	8003dde <HAL_TIM_ConfigClockSource+0xe>
 8003ddc:	e06f      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0xee>
 8003dde:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003de2:	549c      	strb	r4, [r3, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	3201      	adds	r2, #1
 8003de6:	5498      	strb	r0, [r3, r2]
  tmpsmcr = htim->Instance->SMCR;
 8003de8:	681a      	ldr	r2, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dea:	4d4e      	ldr	r5, [pc, #312]	@ (8003f24 <HAL_TIM_ConfigClockSource+0x154>)
  tmpsmcr = htim->Instance->SMCR;
 8003dec:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dee:	4028      	ands	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 8003df0:	6090      	str	r0, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003df2:	6808      	ldr	r0, [r1, #0]
 8003df4:	2860      	cmp	r0, #96	@ 0x60
 8003df6:	d100      	bne.n	8003dfa <HAL_TIM_ConfigClockSource+0x2a>
 8003df8:	e07a      	b.n	8003ef0 <HAL_TIM_ConfigClockSource+0x120>
 8003dfa:	d80b      	bhi.n	8003e14 <HAL_TIM_ConfigClockSource+0x44>
 8003dfc:	2840      	cmp	r0, #64	@ 0x40
 8003dfe:	d060      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0xf2>
 8003e00:	d829      	bhi.n	8003e56 <HAL_TIM_ConfigClockSource+0x86>
 8003e02:	2820      	cmp	r0, #32
 8003e04:	d053      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0xde>
 8003e06:	d850      	bhi.n	8003eaa <HAL_TIM_ConfigClockSource+0xda>
 8003e08:	2110      	movs	r1, #16
 8003e0a:	0004      	movs	r4, r0
 8003e0c:	438c      	bics	r4, r1
 8003e0e:	d04e      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0xde>
      status = HAL_ERROR;
 8003e10:	2001      	movs	r0, #1
 8003e12:	e019      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8003e14:	2480      	movs	r4, #128	@ 0x80
 8003e16:	0164      	lsls	r4, r4, #5
 8003e18:	42a0      	cmp	r0, r4
 8003e1a:	d014      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x76>
 8003e1c:	2480      	movs	r4, #128	@ 0x80
 8003e1e:	01a4      	lsls	r4, r4, #6
 8003e20:	42a0      	cmp	r0, r4
 8003e22:	d031      	beq.n	8003e88 <HAL_TIM_ConfigClockSource+0xb8>
 8003e24:	2870      	cmp	r0, #112	@ 0x70
 8003e26:	d1f3      	bne.n	8003e10 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8003e28:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e2a:	483f      	ldr	r0, [pc, #252]	@ (8003f28 <HAL_TIM_ConfigClockSource+0x158>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e2c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e2e:	4004      	ands	r4, r0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e30:	6888      	ldr	r0, [r1, #8]
 8003e32:	68c9      	ldr	r1, [r1, #12]
 8003e34:	4328      	orrs	r0, r5
 8003e36:	0209      	lsls	r1, r1, #8
 8003e38:	4301      	orrs	r1, r0
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e3a:	2077      	movs	r0, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e3c:	4321      	orrs	r1, r4
  TIMx->SMCR = tmpsmcr;
 8003e3e:	6091      	str	r1, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003e40:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e42:	4301      	orrs	r1, r0
      htim->Instance->SMCR = tmpsmcr;
 8003e44:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e46:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	223d      	movs	r2, #61	@ 0x3d
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8003e4e:	2100      	movs	r1, #0
 8003e50:	3a01      	subs	r2, #1
 8003e52:	5499      	strb	r1, [r3, r2]
}
 8003e54:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003e56:	2850      	cmp	r0, #80	@ 0x50
 8003e58:	d1da      	bne.n	8003e10 <HAL_TIM_ConfigClockSource+0x40>
  tmpccer = TIMx->CCER;
 8003e5a:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e5c:	6a16      	ldr	r6, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8003e5e:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e60:	43a6      	bics	r6, r4
                               sClockSourceConfig->ClockFilter);
 8003e62:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e64:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e66:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003e68:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e6a:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e6c:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e6e:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e70:	240a      	movs	r4, #10
 8003e72:	43a5      	bics	r5, r4
  tmpccer |= TIM_ICPolarity;
 8003e74:	4328      	orrs	r0, r5
  TIMx->CCMR1 = tmpccmr1;
 8003e76:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003e78:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003e7a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e7c:	482b      	ldr	r0, [pc, #172]	@ (8003f2c <HAL_TIM_ConfigClockSource+0x15c>)
 8003e7e:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e80:	2057      	movs	r0, #87	@ 0x57
 8003e82:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8003e84:	6091      	str	r1, [r2, #8]
}
 8003e86:	e7de      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr = TIMx->SMCR;
 8003e88:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e8a:	4827      	ldr	r0, [pc, #156]	@ (8003f28 <HAL_TIM_ConfigClockSource+0x158>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e8c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e8e:	4004      	ands	r4, r0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e90:	6888      	ldr	r0, [r1, #8]
 8003e92:	68c9      	ldr	r1, [r1, #12]
 8003e94:	4328      	orrs	r0, r5
 8003e96:	0209      	lsls	r1, r1, #8
 8003e98:	4301      	orrs	r1, r0
 8003e9a:	4321      	orrs	r1, r4
  TIMx->SMCR = tmpsmcr;
 8003e9c:	6091      	str	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e9e:	2180      	movs	r1, #128	@ 0x80
 8003ea0:	6890      	ldr	r0, [r2, #8]
 8003ea2:	01c9      	lsls	r1, r1, #7
 8003ea4:	4301      	orrs	r1, r0
 8003ea6:	6091      	str	r1, [r2, #8]
      break;
 8003ea8:	e7cd      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 8003eaa:	2830      	cmp	r0, #48	@ 0x30
 8003eac:	d1b0      	bne.n	8003e10 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8003eae:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eb0:	4c1e      	ldr	r4, [pc, #120]	@ (8003f2c <HAL_TIM_ConfigClockSource+0x15c>)
 8003eb2:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eb4:	4301      	orrs	r1, r0
 8003eb6:	2007      	movs	r0, #7
 8003eb8:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8003eba:	6091      	str	r1, [r2, #8]
}
 8003ebc:	e7c3      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x76>
  __HAL_LOCK(htim);
 8003ebe:	2002      	movs	r0, #2
 8003ec0:	e7c8      	b.n	8003e54 <HAL_TIM_ConfigClockSource+0x84>
  tmpccer = TIMx->CCER;
 8003ec2:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec4:	6a16      	ldr	r6, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8003ec6:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec8:	43a6      	bics	r6, r4
                               sClockSourceConfig->ClockFilter);
 8003eca:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ecc:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ece:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003ed0:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed2:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ed4:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed6:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ed8:	240a      	movs	r4, #10
 8003eda:	43a5      	bics	r5, r4
  tmpccer |= TIM_ICPolarity;
 8003edc:	4328      	orrs	r0, r5
  TIMx->CCMR1 = tmpccmr1;
 8003ede:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003ee0:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003ee2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ee4:	4811      	ldr	r0, [pc, #68]	@ (8003f2c <HAL_TIM_ConfigClockSource+0x15c>)
 8003ee6:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ee8:	2047      	movs	r0, #71	@ 0x47
 8003eea:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8003eec:	6091      	str	r1, [r2, #8]
}
 8003eee:	e7aa      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x76>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef0:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 8003ef2:	6a15      	ldr	r5, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8003ef4:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003ef6:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef8:	6a11      	ldr	r1, [r2, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003efa:	0324      	lsls	r4, r4, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efc:	43b1      	bics	r1, r6
 8003efe:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f00:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f02:	4e0b      	ldr	r6, [pc, #44]	@ (8003f30 <HAL_TIM_ConfigClockSource+0x160>)
 8003f04:	4031      	ands	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f06:	430c      	orrs	r4, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f08:	21a0      	movs	r1, #160	@ 0xa0
 8003f0a:	438d      	bics	r5, r1
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f0c:	0101      	lsls	r1, r0, #4
 8003f0e:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1 ;
 8003f10:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 8003f12:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003f14:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f16:	4805      	ldr	r0, [pc, #20]	@ (8003f2c <HAL_TIM_ConfigClockSource+0x15c>)
 8003f18:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f1a:	2067      	movs	r0, #103	@ 0x67
 8003f1c:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8003f1e:	6091      	str	r1, [r2, #8]
}
 8003f20:	e791      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x76>
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	ffce0088 	.word	0xffce0088
 8003f28:	ffff00ff 	.word	0xffff00ff
 8003f2c:	ffcfff8f 	.word	0xffcfff8f
 8003f30:	ffff0fff 	.word	0xffff0fff

08003f34 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003f34:	4770      	bx	lr
 8003f36:	46c0      	nop			@ (mov r8, r8)

08003f38 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003f38:	4770      	bx	lr
 8003f3a:	46c0      	nop			@ (mov r8, r8)

08003f3c <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003f3c:	4770      	bx	lr
 8003f3e:	46c0      	nop			@ (mov r8, r8)

08003f40 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003f40:	4770      	bx	lr
 8003f42:	46c0      	nop			@ (mov r8, r8)

08003f44 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f44:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 8003f46:	6803      	ldr	r3, [r0, #0]
{
 8003f48:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003f4a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f4c:	691d      	ldr	r5, [r3, #16]
{
 8003f4e:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f50:	422a      	tst	r2, r5
 8003f52:	d001      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x14>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f54:	4232      	tst	r2, r6
 8003f56:	d15c      	bne.n	8004012 <HAL_TIM_IRQHandler+0xce>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f58:	2304      	movs	r3, #4
 8003f5a:	422b      	tst	r3, r5
 8003f5c:	d001      	beq.n	8003f62 <HAL_TIM_IRQHandler+0x1e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f5e:	4233      	tst	r3, r6
 8003f60:	d143      	bne.n	8003fea <HAL_TIM_IRQHandler+0xa6>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f62:	2308      	movs	r3, #8
 8003f64:	422b      	tst	r3, r5
 8003f66:	d001      	beq.n	8003f6c <HAL_TIM_IRQHandler+0x28>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f68:	4233      	tst	r3, r6
 8003f6a:	d12c      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x82>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	422b      	tst	r3, r5
 8003f70:	d001      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f72:	4233      	tst	r3, r6
 8003f74:	d116      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x60>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f76:	2301      	movs	r3, #1
 8003f78:	422b      	tst	r3, r5
 8003f7a:	d001      	beq.n	8003f80 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f7c:	4233      	tst	r3, r6
 8003f7e:	d167      	bne.n	8004050 <HAL_TIM_IRQHandler+0x10c>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003f80:	2382      	movs	r3, #130	@ 0x82
 8003f82:	019b      	lsls	r3, r3, #6
 8003f84:	421d      	tst	r5, r3
 8003f86:	d050      	beq.n	800402a <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f88:	0633      	lsls	r3, r6, #24
 8003f8a:	d469      	bmi.n	8004060 <HAL_TIM_IRQHandler+0x11c>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f8c:	2340      	movs	r3, #64	@ 0x40
 8003f8e:	422b      	tst	r3, r5
 8003f90:	d002      	beq.n	8003f98 <HAL_TIM_IRQHandler+0x54>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f92:	4233      	tst	r3, r6
 8003f94:	d000      	beq.n	8003f98 <HAL_TIM_IRQHandler+0x54>
 8003f96:	e06d      	b.n	8004074 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f98:	2320      	movs	r3, #32
 8003f9a:	422b      	tst	r3, r5
 8003f9c:	d001      	beq.n	8003fa2 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f9e:	4233      	tst	r3, r6
 8003fa0:	d14e      	bne.n	8004040 <HAL_TIM_IRQHandler+0xfc>
}
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fa4:	2211      	movs	r2, #17
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	4252      	negs	r2, r2
 8003faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fac:	3219      	adds	r2, #25
 8003fae:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	23c0      	movs	r3, #192	@ 0xc0
 8003fb4:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb6:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fb8:	421a      	tst	r2, r3
 8003fba:	d06f      	beq.n	800409c <HAL_TIM_IRQHandler+0x158>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fbc:	f7ff ffbc 	bl	8003f38 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	7723      	strb	r3, [r4, #28]
 8003fc4:	e7d7      	b.n	8003f76 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fc6:	2209      	movs	r2, #9
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	4252      	negs	r2, r2
 8003fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fce:	320d      	adds	r2, #13
 8003fd0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fd2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd4:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fd6:	079b      	lsls	r3, r3, #30
 8003fd8:	d15d      	bne.n	8004096 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	f7ff ffab 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fde:	0020      	movs	r0, r4
 8003fe0:	f7ff ffac 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	7723      	strb	r3, [r4, #28]
 8003fe8:	e7c0      	b.n	8003f6c <HAL_TIM_IRQHandler+0x28>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fea:	2205      	movs	r2, #5
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	4252      	negs	r2, r2
 8003ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ff2:	3207      	adds	r2, #7
 8003ff4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ff6:	699a      	ldr	r2, [r3, #24]
 8003ff8:	23c0      	movs	r3, #192	@ 0xc0
 8003ffa:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffc:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ffe:	421a      	tst	r2, r3
 8004000:	d146      	bne.n	8004090 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	f7ff ff97 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004006:	0020      	movs	r0, r4
 8004008:	f7ff ff98 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400c:	2300      	movs	r3, #0
 800400e:	7723      	strb	r3, [r4, #28]
 8004010:	e7a7      	b.n	8003f62 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004012:	3a05      	subs	r2, #5
 8004014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004016:	3204      	adds	r2, #4
 8004018:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	079b      	lsls	r3, r3, #30
 800401e:	d031      	beq.n	8004084 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_IC_CaptureCallback(htim);
 8004020:	f7ff ff8a 	bl	8003f38 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004024:	2300      	movs	r3, #0
 8004026:	7723      	strb	r3, [r4, #28]
 8004028:	e796      	b.n	8003f58 <HAL_TIM_IRQHandler+0x14>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800402a:	05eb      	lsls	r3, r5, #23
 800402c:	d5ae      	bpl.n	8003f8c <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800402e:	0633      	lsls	r3, r6, #24
 8004030:	d5ac      	bpl.n	8003f8c <HAL_TIM_IRQHandler+0x48>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	4a1c      	ldr	r2, [pc, #112]	@ (80040a8 <HAL_TIM_IRQHandler+0x164>)
      HAL_TIMEx_Break2Callback(htim);
 8004036:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004038:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800403a:	f000 fae7 	bl	800460c <HAL_TIMEx_Break2Callback>
 800403e:	e7a5      	b.n	8003f8c <HAL_TIM_IRQHandler+0x48>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004040:	2221      	movs	r2, #33	@ 0x21
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8004046:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004048:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800404a:	f000 fadb 	bl	8004604 <HAL_TIMEx_CommutCallback>
}
 800404e:	e7a8      	b.n	8003fa2 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004050:	2202      	movs	r2, #2
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8004056:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004058:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800405a:	f7fe fe51 	bl	8002d00 <HAL_TIM_PeriodElapsedCallback>
 800405e:	e78f      	b.n	8003f80 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	4a12      	ldr	r2, [pc, #72]	@ (80040ac <HAL_TIM_IRQHandler+0x168>)
      HAL_TIMEx_BreakCallback(htim);
 8004064:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004066:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004068:	f000 face 	bl	8004608 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800406c:	05eb      	lsls	r3, r5, #23
 800406e:	d400      	bmi.n	8004072 <HAL_TIM_IRQHandler+0x12e>
 8004070:	e78c      	b.n	8003f8c <HAL_TIM_IRQHandler+0x48>
 8004072:	e7de      	b.n	8004032 <HAL_TIM_IRQHandler+0xee>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004074:	2241      	movs	r2, #65	@ 0x41
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 800407a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800407c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800407e:	f7ff ff5f 	bl	8003f40 <HAL_TIM_TriggerCallback>
 8004082:	e789      	b.n	8003f98 <HAL_TIM_IRQHandler+0x54>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004084:	f7ff ff56 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	0020      	movs	r0, r4
 800408a:	f7ff ff57 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
 800408e:	e7c9      	b.n	8004024 <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 8004090:	f7ff ff52 	bl	8003f38 <HAL_TIM_IC_CaptureCallback>
 8004094:	e7ba      	b.n	800400c <HAL_TIM_IRQHandler+0xc8>
        HAL_TIM_IC_CaptureCallback(htim);
 8004096:	f7ff ff4f 	bl	8003f38 <HAL_TIM_IC_CaptureCallback>
 800409a:	e7a3      	b.n	8003fe4 <HAL_TIM_IRQHandler+0xa0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409c:	f7ff ff4a 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	0020      	movs	r0, r4
 80040a2:	f7ff ff4b 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
 80040a6:	e78b      	b.n	8003fc0 <HAL_TIM_IRQHandler+0x7c>
 80040a8:	fffffeff 	.word	0xfffffeff
 80040ac:	ffffdf7f 	.word	0xffffdf7f

080040b0 <TIM_Base_SetConfig>:
{
 80040b0:	b570      	push	{r4, r5, r6, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b2:	4e26      	ldr	r6, [pc, #152]	@ (800414c <TIM_Base_SetConfig+0x9c>)
  tmpcr1 = TIMx->CR1;
 80040b4:	6803      	ldr	r3, [r0, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b6:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b8:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80040ba:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040bc:	42b0      	cmp	r0, r6
 80040be:	d01a      	beq.n	80040f6 <TIM_Base_SetConfig+0x46>
 80040c0:	2680      	movs	r6, #128	@ 0x80
 80040c2:	05f6      	lsls	r6, r6, #23
 80040c4:	42b0      	cmp	r0, r6
 80040c6:	d016      	beq.n	80040f6 <TIM_Base_SetConfig+0x46>
 80040c8:	4e21      	ldr	r6, [pc, #132]	@ (8004150 <TIM_Base_SetConfig+0xa0>)
 80040ca:	42b0      	cmp	r0, r6
 80040cc:	d02f      	beq.n	800412e <TIM_Base_SetConfig+0x7e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ce:	4e21      	ldr	r6, [pc, #132]	@ (8004154 <TIM_Base_SetConfig+0xa4>)
 80040d0:	42b0      	cmp	r0, r6
 80040d2:	d030      	beq.n	8004136 <TIM_Base_SetConfig+0x86>
 80040d4:	4e20      	ldr	r6, [pc, #128]	@ (8004158 <TIM_Base_SetConfig+0xa8>)
 80040d6:	42b0      	cmp	r0, r6
 80040d8:	d002      	beq.n	80040e0 <TIM_Base_SetConfig+0x30>
 80040da:	4e20      	ldr	r6, [pc, #128]	@ (800415c <TIM_Base_SetConfig+0xac>)
 80040dc:	42b0      	cmp	r0, r6
 80040de:	d12e      	bne.n	800413e <TIM_Base_SetConfig+0x8e>
    tmpcr1 &= ~TIM_CR1_CKD;
 80040e0:	4e1f      	ldr	r6, [pc, #124]	@ (8004160 <TIM_Base_SetConfig+0xb0>)
 80040e2:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040e4:	68ce      	ldr	r6, [r1, #12]
 80040e6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e8:	2680      	movs	r6, #128	@ 0x80
 80040ea:	43b3      	bics	r3, r6
 80040ec:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80040ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f0:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80040f2:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f4:	e010      	b.n	8004118 <TIM_Base_SetConfig+0x68>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f6:	2670      	movs	r6, #112	@ 0x70
 80040f8:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 80040fa:	684e      	ldr	r6, [r1, #4]
 80040fc:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80040fe:	4e18      	ldr	r6, [pc, #96]	@ (8004160 <TIM_Base_SetConfig+0xb0>)
 8004100:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004102:	68ce      	ldr	r6, [r1, #12]
 8004104:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004106:	2680      	movs	r6, #128	@ 0x80
 8004108:	43b3      	bics	r3, r6
 800410a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800410c:	6003      	str	r3, [r0, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800410e:	4b0f      	ldr	r3, [pc, #60]	@ (800414c <TIM_Base_SetConfig+0x9c>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004110:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004112:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004114:	4298      	cmp	r0, r3
 8004116:	d101      	bne.n	800411c <TIM_Base_SetConfig+0x6c>
    TIMx->RCR = Structure->RepetitionCounter;
 8004118:	690b      	ldr	r3, [r1, #16]
 800411a:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800411c:	2301      	movs	r3, #1
 800411e:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004120:	6902      	ldr	r2, [r0, #16]
 8004122:	4213      	tst	r3, r2
 8004124:	d002      	beq.n	800412c <TIM_Base_SetConfig+0x7c>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004126:	6902      	ldr	r2, [r0, #16]
 8004128:	439a      	bics	r2, r3
 800412a:	6102      	str	r2, [r0, #16]
}
 800412c:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800412e:	2670      	movs	r6, #112	@ 0x70
 8004130:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8004132:	684e      	ldr	r6, [r1, #4]
 8004134:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004136:	4e0a      	ldr	r6, [pc, #40]	@ (8004160 <TIM_Base_SetConfig+0xb0>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004138:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800413a:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800413c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800413e:	2180      	movs	r1, #128	@ 0x80
 8004140:	438b      	bics	r3, r1
 8004142:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004144:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004146:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004148:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800414a:	e7e7      	b.n	800411c <TIM_Base_SetConfig+0x6c>
 800414c:	40012c00 	.word	0x40012c00
 8004150:	40000400 	.word	0x40000400
 8004154:	40002000 	.word	0x40002000
 8004158:	40014400 	.word	0x40014400
 800415c:	40014800 	.word	0x40014800
 8004160:	fffffcff 	.word	0xfffffcff

08004164 <HAL_TIM_Base_Init>:
{
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004168:	d02a      	beq.n	80041c0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800416a:	233d      	movs	r3, #61	@ 0x3d
 800416c:	5cc3      	ldrb	r3, [r0, r3]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d020      	beq.n	80041b6 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	2302      	movs	r3, #2
 8004176:	253d      	movs	r5, #61	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004178:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800417a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417c:	c901      	ldmia	r1!, {r0}
 800417e:	f7ff ff97 	bl	80040b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004182:	2301      	movs	r3, #1
 8004184:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8004186:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004188:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418a:	3a0a      	subs	r2, #10
 800418c:	54a3      	strb	r3, [r4, r2]
 800418e:	3201      	adds	r2, #1
 8004190:	54a3      	strb	r3, [r4, r2]
 8004192:	3201      	adds	r2, #1
 8004194:	54a3      	strb	r3, [r4, r2]
 8004196:	3201      	adds	r2, #1
 8004198:	54a3      	strb	r3, [r4, r2]
 800419a:	3201      	adds	r2, #1
 800419c:	54a3      	strb	r3, [r4, r2]
 800419e:	3201      	adds	r2, #1
 80041a0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a2:	3201      	adds	r2, #1
 80041a4:	54a3      	strb	r3, [r4, r2]
 80041a6:	3201      	adds	r2, #1
 80041a8:	54a3      	strb	r3, [r4, r2]
 80041aa:	3201      	adds	r2, #1
 80041ac:	54a3      	strb	r3, [r4, r2]
 80041ae:	3201      	adds	r2, #1
 80041b0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80041b2:	5563      	strb	r3, [r4, r5]
}
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80041b6:	333c      	adds	r3, #60	@ 0x3c
 80041b8:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80041ba:	f7fe fc37 	bl	8002a2c <HAL_TIM_Base_MspInit>
 80041be:	e7d9      	b.n	8004174 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80041c0:	2001      	movs	r0, #1
 80041c2:	e7f7      	b.n	80041b4 <HAL_TIM_Base_Init+0x50>

080041c4 <HAL_TIM_PWM_Init>:
{
 80041c4:	b570      	push	{r4, r5, r6, lr}
 80041c6:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80041c8:	d02a      	beq.n	8004220 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80041ca:	233d      	movs	r3, #61	@ 0x3d
 80041cc:	5cc3      	ldrb	r3, [r0, r3]
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d020      	beq.n	8004216 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	2302      	movs	r3, #2
 80041d6:	253d      	movs	r5, #61	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d8:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80041da:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041dc:	c901      	ldmia	r1!, {r0}
 80041de:	f7ff ff67 	bl	80040b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e2:	2301      	movs	r3, #1
 80041e4:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 80041e6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ea:	3a0a      	subs	r2, #10
 80041ec:	54a3      	strb	r3, [r4, r2]
 80041ee:	3201      	adds	r2, #1
 80041f0:	54a3      	strb	r3, [r4, r2]
 80041f2:	3201      	adds	r2, #1
 80041f4:	54a3      	strb	r3, [r4, r2]
 80041f6:	3201      	adds	r2, #1
 80041f8:	54a3      	strb	r3, [r4, r2]
 80041fa:	3201      	adds	r2, #1
 80041fc:	54a3      	strb	r3, [r4, r2]
 80041fe:	3201      	adds	r2, #1
 8004200:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004202:	3201      	adds	r2, #1
 8004204:	54a3      	strb	r3, [r4, r2]
 8004206:	3201      	adds	r2, #1
 8004208:	54a3      	strb	r3, [r4, r2]
 800420a:	3201      	adds	r2, #1
 800420c:	54a3      	strb	r3, [r4, r2]
 800420e:	3201      	adds	r2, #1
 8004210:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004212:	5563      	strb	r3, [r4, r5]
}
 8004214:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004216:	333c      	adds	r3, #60	@ 0x3c
 8004218:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 800421a:	f7ff fdd3 	bl	8003dc4 <HAL_TIM_PWM_MspInit>
 800421e:	e7d9      	b.n	80041d4 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8004220:	2001      	movs	r0, #1
 8004222:	e7f7      	b.n	8004214 <HAL_TIM_PWM_Init+0x50>

08004224 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004224:	2210      	movs	r2, #16
{
 8004226:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8004228:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800422a:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800422c:	4d16      	ldr	r5, [pc, #88]	@ (8004288 <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800422e:	4393      	bics	r3, r2
 8004230:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004232:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004234:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004236:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004238:	680d      	ldr	r5, [r1, #0]
 800423a:	022d      	lsls	r5, r5, #8
 800423c:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC2P;
 800423e:	2220      	movs	r2, #32
 8004240:	4394      	bics	r4, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004242:	688a      	ldr	r2, [r1, #8]
 8004244:	0112      	lsls	r2, r2, #4
 8004246:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004248:	4c10      	ldr	r4, [pc, #64]	@ (800428c <TIM_OC2_SetConfig+0x68>)
 800424a:	42a0      	cmp	r0, r4
 800424c:	d012      	beq.n	8004274 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424e:	4c10      	ldr	r4, [pc, #64]	@ (8004290 <TIM_OC2_SetConfig+0x6c>)
 8004250:	42a0      	cmp	r0, r4
 8004252:	d002      	beq.n	800425a <TIM_OC2_SetConfig+0x36>
 8004254:	4c0f      	ldr	r4, [pc, #60]	@ (8004294 <TIM_OC2_SetConfig+0x70>)
 8004256:	42a0      	cmp	r0, r4
 8004258:	d106      	bne.n	8004268 <TIM_OC2_SetConfig+0x44>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800425a:	4c0f      	ldr	r4, [pc, #60]	@ (8004298 <TIM_OC2_SetConfig+0x74>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800425c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800425e:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004260:	694b      	ldr	r3, [r1, #20]
 8004262:	4333      	orrs	r3, r6
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 8004268:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800426a:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800426c:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800426e:	6383      	str	r3, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004270:	6202      	str	r2, [r0, #32]
}
 8004272:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8004274:	2480      	movs	r4, #128	@ 0x80
 8004276:	43a2      	bics	r2, r4
 8004278:	0016      	movs	r6, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800427a:	68ca      	ldr	r2, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 800427c:	3c40      	subs	r4, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800427e:	0112      	lsls	r2, r2, #4
 8004280:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004282:	43a2      	bics	r2, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004284:	e7e9      	b.n	800425a <TIM_OC2_SetConfig+0x36>
 8004286:	46c0      	nop			@ (mov r8, r8)
 8004288:	feff8cff 	.word	0xfeff8cff
 800428c:	40012c00 	.word	0x40012c00
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800
 8004298:	fffff3ff 	.word	0xfffff3ff

0800429c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800429c:	233c      	movs	r3, #60	@ 0x3c
{
 800429e:	b570      	push	{r4, r5, r6, lr}
 80042a0:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80042a2:	5cc1      	ldrb	r1, [r0, r3]
{
 80042a4:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80042a6:	2901      	cmp	r1, #1
 80042a8:	d100      	bne.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x10>
 80042aa:	e084      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x11a>
 80042ac:	2101      	movs	r1, #1
 80042ae:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 80042b0:	2a14      	cmp	r2, #20
 80042b2:	d803      	bhi.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x20>
 80042b4:	4b41      	ldr	r3, [pc, #260]	@ (80043bc <HAL_TIM_PWM_ConfigChannel+0x120>)
 80042b6:	0092      	lsls	r2, r2, #2
 80042b8:	589b      	ldr	r3, [r3, r2]
 80042ba:	469f      	mov	pc, r3
 80042bc:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80042be:	233c      	movs	r3, #60	@ 0x3c
 80042c0:	2200      	movs	r2, #0
 80042c2:	54e2      	strb	r2, [r4, r3]
}
 80042c4:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042c6:	6806      	ldr	r6, [r0, #0]
 80042c8:	0029      	movs	r1, r5
 80042ca:	0030      	movs	r0, r6
 80042cc:	f7ff fcb0 	bl	8003c30 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042d0:	2380      	movs	r3, #128	@ 0x80
 80042d2:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	4313      	orrs	r3, r2
 80042d8:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042da:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80042dc:	4a38      	ldr	r2, [pc, #224]	@ (80043c0 <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 80042de:	2000      	movs	r0, #0
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042e0:	4013      	ands	r3, r2
 80042e2:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042e4:	692b      	ldr	r3, [r5, #16]
 80042e6:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	4313      	orrs	r3, r2
 80042ec:	6573      	str	r3, [r6, #84]	@ 0x54
      break;
 80042ee:	e7e6      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042f0:	6806      	ldr	r6, [r0, #0]
 80042f2:	0029      	movs	r1, r5
 80042f4:	0030      	movs	r0, r6
 80042f6:	f7ff fbbd 	bl	8003a74 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042fa:	2208      	movs	r2, #8
 80042fc:	69b3      	ldr	r3, [r6, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80042fe:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004300:	4313      	orrs	r3, r2
 8004302:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004304:	69b3      	ldr	r3, [r6, #24]
 8004306:	3a04      	subs	r2, #4
 8004308:	4393      	bics	r3, r2
 800430a:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800430c:	69b3      	ldr	r3, [r6, #24]
 800430e:	692a      	ldr	r2, [r5, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	61b3      	str	r3, [r6, #24]
      break;
 8004314:	e7d3      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004316:	6806      	ldr	r6, [r0, #0]
 8004318:	0029      	movs	r1, r5
 800431a:	0030      	movs	r0, r6
 800431c:	f7ff ff82 	bl	8004224 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004320:	2380      	movs	r3, #128	@ 0x80
 8004322:	69b2      	ldr	r2, [r6, #24]
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	4313      	orrs	r3, r2
 8004328:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800432a:	69b3      	ldr	r3, [r6, #24]
 800432c:	4a24      	ldr	r2, [pc, #144]	@ (80043c0 <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 800432e:	2000      	movs	r0, #0
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004330:	4013      	ands	r3, r2
 8004332:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004334:	692b      	ldr	r3, [r5, #16]
 8004336:	69b2      	ldr	r2, [r6, #24]
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	4313      	orrs	r3, r2
 800433c:	61b3      	str	r3, [r6, #24]
      break;
 800433e:	e7be      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004340:	6806      	ldr	r6, [r0, #0]
 8004342:	0029      	movs	r1, r5
 8004344:	0030      	movs	r0, r6
 8004346:	f7ff fbcb 	bl	8003ae0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800434a:	2208      	movs	r2, #8
 800434c:	69f3      	ldr	r3, [r6, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800434e:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004350:	4313      	orrs	r3, r2
 8004352:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004354:	69f3      	ldr	r3, [r6, #28]
 8004356:	3a04      	subs	r2, #4
 8004358:	4393      	bics	r3, r2
 800435a:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800435c:	69f3      	ldr	r3, [r6, #28]
 800435e:	692a      	ldr	r2, [r5, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	61f3      	str	r3, [r6, #28]
      break;
 8004364:	e7ab      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004366:	6806      	ldr	r6, [r0, #0]
 8004368:	0029      	movs	r1, r5
 800436a:	0030      	movs	r0, r6
 800436c:	f7ff fbfa 	bl	8003b64 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004370:	2380      	movs	r3, #128	@ 0x80
 8004372:	69f2      	ldr	r2, [r6, #28]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	4313      	orrs	r3, r2
 8004378:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800437a:	69f3      	ldr	r3, [r6, #28]
 800437c:	4a10      	ldr	r2, [pc, #64]	@ (80043c0 <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 800437e:	2000      	movs	r0, #0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004380:	4013      	ands	r3, r2
 8004382:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004384:	692b      	ldr	r3, [r5, #16]
 8004386:	69f2      	ldr	r2, [r6, #28]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	4313      	orrs	r3, r2
 800438c:	61f3      	str	r3, [r6, #28]
      break;
 800438e:	e796      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004390:	6806      	ldr	r6, [r0, #0]
 8004392:	0029      	movs	r1, r5
 8004394:	0030      	movs	r0, r6
 8004396:	f7ff fc19 	bl	8003bcc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800439a:	2208      	movs	r2, #8
 800439c:	6d73      	ldr	r3, [r6, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800439e:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043a0:	4313      	orrs	r3, r2
 80043a2:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043a4:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80043a6:	3a04      	subs	r2, #4
 80043a8:	4393      	bics	r3, r2
 80043aa:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043ac:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80043ae:	692a      	ldr	r2, [r5, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	6573      	str	r3, [r6, #84]	@ 0x54
      break;
 80043b4:	e783      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x22>
  __HAL_LOCK(htim);
 80043b6:	2002      	movs	r0, #2
 80043b8:	e784      	b.n	80042c4 <HAL_TIM_PWM_ConfigChannel+0x28>
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	08004954 	.word	0x08004954
 80043c0:	fffffbff 	.word	0xfffffbff

080043c4 <HAL_TIMEx_OCN_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043c4:	2900      	cmp	r1, #0
 80043c6:	d12f      	bne.n	8004428 <HAL_TIMEx_OCN_Start+0x64>
 80043c8:	2344      	movs	r3, #68	@ 0x44
 80043ca:	5cc2      	ldrb	r2, [r0, r3]
 80043cc:	2a01      	cmp	r2, #1
 80043ce:	d133      	bne.n	8004438 <HAL_TIMEx_OCN_Start+0x74>
  {
    return HAL_ERROR;
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d0:	2202      	movs	r2, #2
 80043d2:	54c2      	strb	r2, [r0, r3]
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80043d4:	220f      	movs	r2, #15
 80043d6:	4011      	ands	r1, r2
 80043d8:	3a0b      	subs	r2, #11
 80043da:	408a      	lsls	r2, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80043dc:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80043de:	6a19      	ldr	r1, [r3, #32]
 80043e0:	4391      	bics	r1, r2
 80043e2:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80043e4:	6a19      	ldr	r1, [r3, #32]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 80043ea:	2280      	movs	r2, #128	@ 0x80
 80043ec:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80043ee:	0212      	lsls	r2, r2, #8
 80043f0:	430a      	orrs	r2, r1
 80043f2:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f4:	4a16      	ldr	r2, [pc, #88]	@ (8004450 <HAL_TIMEx_OCN_Start+0x8c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00c      	beq.n	8004414 <HAL_TIMEx_OCN_Start+0x50>
 80043fa:	2280      	movs	r2, #128	@ 0x80
 80043fc:	05d2      	lsls	r2, r2, #23
 80043fe:	4293      	cmp	r3, r2
 8004400:	d008      	beq.n	8004414 <HAL_TIMEx_OCN_Start+0x50>
 8004402:	4a14      	ldr	r2, [pc, #80]	@ (8004454 <HAL_TIMEx_OCN_Start+0x90>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d005      	beq.n	8004414 <HAL_TIMEx_OCN_Start+0x50>
      __HAL_TIM_ENABLE(htim);
 8004408:	2101      	movs	r1, #1
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004410:	2000      	movs	r0, #0
 8004412:	e012      	b.n	800443a <HAL_TIMEx_OCN_Start+0x76>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	4910      	ldr	r1, [pc, #64]	@ (8004458 <HAL_TIMEx_OCN_Start+0x94>)
 8004418:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441a:	2a06      	cmp	r2, #6
 800441c:	d0f8      	beq.n	8004410 <HAL_TIMEx_OCN_Start+0x4c>
 800441e:	3907      	subs	r1, #7
 8004420:	428a      	cmp	r2, r1
 8004422:	d1f1      	bne.n	8004408 <HAL_TIMEx_OCN_Start+0x44>
  return HAL_OK;
 8004424:	2000      	movs	r0, #0
 8004426:	e008      	b.n	800443a <HAL_TIMEx_OCN_Start+0x76>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004428:	2904      	cmp	r1, #4
 800442a:	d007      	beq.n	800443c <HAL_TIMEx_OCN_Start+0x78>
 800442c:	2908      	cmp	r1, #8
 800442e:	d00a      	beq.n	8004446 <HAL_TIMEx_OCN_Start+0x82>
 8004430:	2347      	movs	r3, #71	@ 0x47
 8004432:	5cc2      	ldrb	r2, [r0, r3]
 8004434:	2a01      	cmp	r2, #1
 8004436:	d0cb      	beq.n	80043d0 <HAL_TIMEx_OCN_Start+0xc>
    return HAL_ERROR;
 8004438:	2001      	movs	r0, #1
}
 800443a:	4770      	bx	lr
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800443c:	2345      	movs	r3, #69	@ 0x45
 800443e:	5cc2      	ldrb	r2, [r0, r3]
 8004440:	2a01      	cmp	r2, #1
 8004442:	d0c5      	beq.n	80043d0 <HAL_TIMEx_OCN_Start+0xc>
 8004444:	e7f8      	b.n	8004438 <HAL_TIMEx_OCN_Start+0x74>
 8004446:	2346      	movs	r3, #70	@ 0x46
 8004448:	5cc2      	ldrb	r2, [r0, r3]
 800444a:	2a01      	cmp	r2, #1
 800444c:	d0c0      	beq.n	80043d0 <HAL_TIMEx_OCN_Start+0xc>
 800444e:	e7f3      	b.n	8004438 <HAL_TIMEx_OCN_Start+0x74>
 8004450:	40012c00 	.word	0x40012c00
 8004454:	40000400 	.word	0x40000400
 8004458:	00010007 	.word	0x00010007

0800445c <HAL_TIMEx_PWMN_Start>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800445c:	b510      	push	{r4, lr}
 800445e:	f7ff ffb1 	bl	80043c4 <HAL_TIMEx_OCN_Start>
 8004462:	bd10      	pop	{r4, pc}

08004464 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8004464:	233c      	movs	r3, #60	@ 0x3c
{
 8004466:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004468:	5cc3      	ldrb	r3, [r0, r3]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d02a      	beq.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 800446e:	233d      	movs	r3, #61	@ 0x3d
 8004470:	2202      	movs	r2, #2
 8004472:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8004474:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004476:	4e14      	ldr	r6, [pc, #80]	@ (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 8004478:	685a      	ldr	r2, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800447a:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800447c:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800447e:	42b3      	cmp	r3, r6
 8004480:	d017      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 &= ~TIM_CR2_MMS;
 8004482:	2670      	movs	r6, #112	@ 0x70
 8004484:	43b2      	bics	r2, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004486:	432a      	orrs	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8004488:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448a:	2280      	movs	r2, #128	@ 0x80
 800448c:	05d2      	lsls	r2, r2, #23
 800448e:	4293      	cmp	r3, r2
 8004490:	d002      	beq.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004492:	4a0e      	ldr	r2, [pc, #56]	@ (80044cc <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d104      	bne.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004498:	2280      	movs	r2, #128	@ 0x80
 800449a:	4394      	bics	r4, r2
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800449c:	688a      	ldr	r2, [r1, #8]
 800449e:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 80044a0:	609c      	str	r4, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	233d      	movs	r3, #61	@ 0x3d
 80044a4:	2201      	movs	r2, #1
 80044a6:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 80044a8:	2200      	movs	r2, #0
 80044aa:	3b01      	subs	r3, #1
 80044ac:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80044ae:	2000      	movs	r0, #0
}
 80044b0:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044b2:	4e07      	ldr	r6, [pc, #28]	@ (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80044b4:	4032      	ands	r2, r6
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044b6:	684e      	ldr	r6, [r1, #4]
 80044b8:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80044ba:	2670      	movs	r6, #112	@ 0x70
 80044bc:	43b2      	bics	r2, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044be:	4315      	orrs	r5, r2
  htim->Instance->CR2 = tmpcr2;
 80044c0:	605d      	str	r5, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c2:	e7e9      	b.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  __HAL_LOCK(htim);
 80044c4:	2002      	movs	r0, #2
 80044c6:	e7f3      	b.n	80044b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	40000400 	.word	0x40000400
 80044d0:	ff0fffff 	.word	0xff0fffff

080044d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80044d4:	233c      	movs	r3, #60	@ 0x3c
{
 80044d6:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80044d8:	5cc3      	ldrb	r3, [r0, r3]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d03d      	beq.n	800455a <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044de:	4a20      	ldr	r2, [pc, #128]	@ (8004560 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80044e0:	68cb      	ldr	r3, [r1, #12]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80044e2:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044e4:	4013      	ands	r3, r2
 80044e6:	688a      	ldr	r2, [r1, #8]
 80044e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004564 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	684a      	ldr	r2, [r1, #4]
 80044f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004568 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	680a      	ldr	r2, [r1, #0]
 80044f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044fa:	4a1c      	ldr	r2, [pc, #112]	@ (800456c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	690a      	ldr	r2, [r1, #16]
 8004500:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004502:	4a1b      	ldr	r2, [pc, #108]	@ (8004570 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8004504:	4013      	ands	r3, r2
 8004506:	694a      	ldr	r2, [r1, #20]
 8004508:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800450a:	4a1a      	ldr	r2, [pc, #104]	@ (8004574 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 800450c:	4013      	ands	r3, r2
 800450e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004510:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004512:	4a19      	ldr	r2, [pc, #100]	@ (8004578 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004514:	4013      	ands	r3, r2
 8004516:	698a      	ldr	r2, [r1, #24]
 8004518:	0412      	lsls	r2, r2, #16
 800451a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800451c:	4a17      	ldr	r2, [pc, #92]	@ (800457c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800451e:	4013      	ands	r3, r2
 8004520:	69ca      	ldr	r2, [r1, #28]
 8004522:	4313      	orrs	r3, r2
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004524:	4a16      	ldr	r2, [pc, #88]	@ (8004580 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004526:	4294      	cmp	r4, r2
 8004528:	d005      	beq.n	8004536 <HAL_TIMEx_ConfigBreakDeadTime+0x62>
  htim->Instance->BDTR = tmpbdtr;
 800452a:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 800452c:	2200      	movs	r2, #0
 800452e:	233c      	movs	r3, #60	@ 0x3c
 8004530:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8004532:	2000      	movs	r0, #0
}
 8004534:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004536:	4a13      	ldr	r2, [pc, #76]	@ (8004584 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004538:	4013      	ands	r3, r2
 800453a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800453c:	0512      	lsls	r2, r2, #20
 800453e:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004540:	4b11      	ldr	r3, [pc, #68]	@ (8004588 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004542:	401a      	ands	r2, r3
 8004544:	6a0b      	ldr	r3, [r1, #32]
 8004546:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004548:	4b10      	ldr	r3, [pc, #64]	@ (800458c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800454a:	401a      	ands	r2, r3
 800454c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800454e:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004550:	4b0f      	ldr	r3, [pc, #60]	@ (8004590 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8004552:	401a      	ands	r2, r3
 8004554:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8004556:	4313      	orrs	r3, r2
 8004558:	e7e7      	b.n	800452a <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  __HAL_LOCK(htim);
 800455a:	2002      	movs	r0, #2
 800455c:	e7ea      	b.n	8004534 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 800455e:	46c0      	nop			@ (mov r8, r8)
 8004560:	fffffcff 	.word	0xfffffcff
 8004564:	fffffbff 	.word	0xfffffbff
 8004568:	fffff7ff 	.word	0xfffff7ff
 800456c:	ffffefff 	.word	0xffffefff
 8004570:	ffffdfff 	.word	0xffffdfff
 8004574:	ffffbfff 	.word	0xffffbfff
 8004578:	fff0ffff 	.word	0xfff0ffff
 800457c:	efffffff 	.word	0xefffffff
 8004580:	40012c00 	.word	0x40012c00
 8004584:	ff0fffff 	.word	0xff0fffff
 8004588:	feffffff 	.word	0xfeffffff
 800458c:	fdffffff 	.word	0xfdffffff
 8004590:	dfffffff 	.word	0xdfffffff

08004594 <HAL_TIMEx_ConfigBreakInput>:
{
 8004594:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004596:	203c      	movs	r0, #60	@ 0x3c
 8004598:	5c18      	ldrb	r0, [r3, r0]
{
 800459a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800459c:	2801      	cmp	r0, #1
 800459e:	d02e      	beq.n	80045fe <HAL_TIMEx_ConfigBreakInput+0x6a>
  switch (sBreakInputConfig->Source)
 80045a0:	6810      	ldr	r0, [r2, #0]
 80045a2:	2801      	cmp	r0, #1
 80045a4:	d019      	beq.n	80045da <HAL_TIMEx_ConfigBreakInput+0x46>
      bkin_polarity_bitpos = 0U;
 80045a6:	2600      	movs	r6, #0
      bkin_polarity_mask = 0U;
 80045a8:	2400      	movs	r4, #0
      bkin_enable_mask = 0U;
 80045aa:	2000      	movs	r0, #0
  switch (BreakInput)
 80045ac:	2901      	cmp	r1, #1
 80045ae:	d019      	beq.n	80045e4 <HAL_TIMEx_ConfigBreakInput+0x50>
 80045b0:	2902      	cmp	r1, #2
 80045b2:	d001      	beq.n	80045b8 <HAL_TIMEx_ConfigBreakInput+0x24>
 80045b4:	2001      	movs	r0, #1
 80045b6:	e00c      	b.n	80045d2 <HAL_TIMEx_ConfigBreakInput+0x3e>
      tmporx = htim->Instance->AF2;
 80045b8:	6855      	ldr	r5, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80045ba:	6892      	ldr	r2, [r2, #8]
      tmporx = htim->Instance->AF2;
 80045bc:	6819      	ldr	r1, [r3, #0]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80045be:	40b2      	lsls	r2, r6
      tmporx = htim->Instance->AF2;
 80045c0:	6e4f      	ldr	r7, [r1, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80045c2:	407d      	eors	r5, r7
 80045c4:	4028      	ands	r0, r5
 80045c6:	4078      	eors	r0, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80045c8:	4042      	eors	r2, r0
 80045ca:	4014      	ands	r4, r2
 80045cc:	4044      	eors	r4, r0
      htim->Instance->AF2 = tmporx;
 80045ce:	664c      	str	r4, [r1, #100]	@ 0x64
  HAL_StatusTypeDef status = HAL_OK;
 80045d0:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80045d2:	223c      	movs	r2, #60	@ 0x3c
 80045d4:	2100      	movs	r1, #0
 80045d6:	5499      	strb	r1, [r3, r2]
}
 80045d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bkin_polarity_mask = TIM1_AF1_BKINP;
 80045da:	2480      	movs	r4, #128	@ 0x80
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 80045dc:	2609      	movs	r6, #9
      bkin_polarity_mask = TIM1_AF1_BKINP;
 80045de:	00a4      	lsls	r4, r4, #2
  switch (BreakInput)
 80045e0:	2901      	cmp	r1, #1
 80045e2:	d1e5      	bne.n	80045b0 <HAL_TIMEx_ConfigBreakInput+0x1c>
      tmporx = htim->Instance->AF1;
 80045e4:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80045e6:	6892      	ldr	r2, [r2, #8]
      tmporx = htim->Instance->AF1;
 80045e8:	681d      	ldr	r5, [r3, #0]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80045ea:	40b2      	lsls	r2, r6
      tmporx = htim->Instance->AF1;
 80045ec:	6e2f      	ldr	r7, [r5, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80045ee:	4079      	eors	r1, r7
 80045f0:	4001      	ands	r1, r0
 80045f2:	4079      	eors	r1, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80045f4:	404a      	eors	r2, r1
 80045f6:	4022      	ands	r2, r4
 80045f8:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 80045fa:	662a      	str	r2, [r5, #96]	@ 0x60
      break;
 80045fc:	e7e8      	b.n	80045d0 <HAL_TIMEx_ConfigBreakInput+0x3c>
  __HAL_LOCK(htim);
 80045fe:	2002      	movs	r0, #2
 8004600:	e7ea      	b.n	80045d8 <HAL_TIMEx_ConfigBreakInput+0x44>
 8004602:	46c0      	nop			@ (mov r8, r8)

08004604 <HAL_TIMEx_CommutCallback>:
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8004604:	4770      	bx	lr
 8004606:	46c0      	nop			@ (mov r8, r8)

08004608 <HAL_TIMEx_BreakCallback>:
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8004608:	4770      	bx	lr
 800460a:	46c0      	nop			@ (mov r8, r8)

0800460c <HAL_TIMEx_Break2Callback>:
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800460c:	4770      	bx	lr
 800460e:	46c0      	nop			@ (mov r8, r8)

08004610 <LL_ADC_Init>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004610:	6882      	ldr	r2, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, const LL_ADC_InitTypeDef *pADC_InitStruct)
{
 8004612:	0003      	movs	r3, r0
 8004614:	b510      	push	{r4, lr}
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004616:	2001      	movs	r0, #1
 8004618:	07d2      	lsls	r2, r2, #31
 800461a:	d410      	bmi.n	800463e <LL_ADC_Init+0x2e>
    MODIFY_REG(ADCx->CFGR1,
 800461c:	688c      	ldr	r4, [r1, #8]
 800461e:	684a      	ldr	r2, [r1, #4]
 8004620:	68d8      	ldr	r0, [r3, #12]
 8004622:	4322      	orrs	r2, r4
 8004624:	68cc      	ldr	r4, [r1, #12]
    MODIFY_REG(ADCx->CFGR2,
 8004626:	6809      	ldr	r1, [r1, #0]
    MODIFY_REG(ADCx->CFGR1,
 8004628:	4322      	orrs	r2, r4
 800462a:	4c05      	ldr	r4, [pc, #20]	@ (8004640 <LL_ADC_Init+0x30>)
 800462c:	4020      	ands	r0, r4
 800462e:	4302      	orrs	r2, r0
  ErrorStatus status = SUCCESS;
 8004630:	2000      	movs	r0, #0
    MODIFY_REG(ADCx->CFGR1,
 8004632:	60da      	str	r2, [r3, #12]
    MODIFY_REG(ADCx->CFGR2,
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	0092      	lsls	r2, r2, #2
 8004638:	0892      	lsrs	r2, r2, #2
 800463a:	430a      	orrs	r2, r1
 800463c:	611a      	str	r2, [r3, #16]
  }

  return status;
}
 800463e:	bd10      	pop	{r4, pc}
 8004640:	ffff3fc7 	.word	0xffff3fc7

08004644 <LL_ADC_REG_Init>:
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 8004644:	68c2      	ldr	r2, [r0, #12]
 8004646:	68c2      	ldr	r2, [r0, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004648:	6882      	ldr	r2, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, const LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 800464a:	0003      	movs	r3, r0
 800464c:	b570      	push	{r4, r5, r6, lr}
    }
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800464e:	2001      	movs	r0, #1
 8004650:	07d2      	lsls	r2, r2, #31
 8004652:	d418      	bmi.n	8004686 <LL_ADC_REG_Init+0x42>
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 8004654:	68d8      	ldr	r0, [r3, #12]
      MODIFY_REG(ADCx->CFGR1,
 8004656:	680a      	ldr	r2, [r1, #0]
 8004658:	68ce      	ldr	r6, [r1, #12]
 800465a:	690d      	ldr	r5, [r1, #16]
 800465c:	694c      	ldr	r4, [r1, #20]
    if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800465e:	0280      	lsls	r0, r0, #10
 8004660:	d412      	bmi.n	8004688 <LL_ADC_REG_Init+0x44>
      MODIFY_REG(ADCx->CFGR1,
 8004662:	4332      	orrs	r2, r6
 8004664:	432a      	orrs	r2, r5
 8004666:	4322      	orrs	r2, r4
 8004668:	68d8      	ldr	r0, [r3, #12]
 800466a:	688c      	ldr	r4, [r1, #8]
      MODIFY_REG(ADCx->CFGR1,
 800466c:	4322      	orrs	r2, r4
 800466e:	4c0a      	ldr	r4, [pc, #40]	@ (8004698 <LL_ADC_REG_Init+0x54>)
 8004670:	4020      	ands	r0, r4
 8004672:	4302      	orrs	r2, r0
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	68da      	ldr	r2, [r3, #12]
    if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 8004678:	0292      	lsls	r2, r2, #10
 800467a:	d503      	bpl.n	8004684 <LL_ADC_REG_Init+0x40>
  SET_BIT(ADCx->CHSELR, SequencerNbRanks);
 800467c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800467e:	6849      	ldr	r1, [r1, #4]
 8004680:	430a      	orrs	r2, r1
 8004682:	629a      	str	r2, [r3, #40]	@ 0x28
  ErrorStatus status = SUCCESS;
 8004684:	2000      	movs	r0, #0
  }
  return status;
}
 8004686:	bd70      	pop	{r4, r5, r6, pc}
        || (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8004688:	6848      	ldr	r0, [r1, #4]
 800468a:	28f0      	cmp	r0, #240	@ 0xf0
 800468c:	d1e9      	bne.n	8004662 <LL_ADC_REG_Init+0x1e>
      MODIFY_REG(ADCx->CFGR1,
 800468e:	4332      	orrs	r2, r6
 8004690:	68d8      	ldr	r0, [r3, #12]
 8004692:	432a      	orrs	r2, r5
 8004694:	e7ea      	b.n	800466c <LL_ADC_REG_Init+0x28>
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	fffec23c 	.word	0xfffec23c

0800469c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800469c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469e:	4645      	mov	r5, r8
 80046a0:	46de      	mov	lr, fp
 80046a2:	4657      	mov	r7, sl
 80046a4:	464e      	mov	r6, r9

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80046a6:	2201      	movs	r2, #1
{
 80046a8:	b5e0      	push	{r5, r6, r7, lr}
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80046aa:	680d      	ldr	r5, [r1, #0]
  pinpos = 0;
 80046ac:	2300      	movs	r3, #0
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80046ae:	4694      	mov	ip, r2
{
 80046b0:	b083      	sub	sp, #12
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80046b2:	2d00      	cmp	r5, #0
 80046b4:	d111      	bne.n	80046da <LL_GPIO_Init+0x3e>
 80046b6:	e057      	b.n	8004768 <LL_GPIO_Init+0xcc>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80046b8:	68c4      	ldr	r4, [r0, #12]
 80046ba:	9a01      	ldr	r2, [sp, #4]
 80046bc:	4014      	ands	r4, r2
 80046be:	4642      	mov	r2, r8
 80046c0:	4314      	orrs	r4, r2
 80046c2:	60c4      	str	r4, [r0, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80046c4:	465f      	mov	r7, fp
 80046c6:	4377      	muls	r7, r6
 80046c8:	6804      	ldr	r4, [r0, #0]
 80046ca:	9a01      	ldr	r2, [sp, #4]
 80046cc:	4022      	ands	r2, r4
 80046ce:	4317      	orrs	r7, r2
 80046d0:	6007      	str	r7, [r0, #0]
 80046d2:	002a      	movs	r2, r5
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 80046d4:	3301      	adds	r3, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80046d6:	40da      	lsrs	r2, r3
 80046d8:	d046      	beq.n	8004768 <LL_GPIO_Init+0xcc>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80046da:	4662      	mov	r2, ip
 80046dc:	002c      	movs	r4, r5
 80046de:	409a      	lsls	r2, r3
 80046e0:	4014      	ands	r4, r2
    if (currentpin != 0x00u)
 80046e2:	4215      	tst	r5, r2
 80046e4:	d0f5      	beq.n	80046d2 <LL_GPIO_Init+0x36>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80046e6:	0026      	movs	r6, r4
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80046e8:	684a      	ldr	r2, [r1, #4]
 80046ea:	4366      	muls	r6, r4
 80046ec:	4693      	mov	fp, r2
 80046ee:	0072      	lsls	r2, r6, #1
 80046f0:	1992      	adds	r2, r2, r6
 80046f2:	43d7      	mvns	r7, r2
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80046f4:	690a      	ldr	r2, [r1, #16]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80046f6:	9701      	str	r7, [sp, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80046f8:	4372      	muls	r2, r6
 80046fa:	4690      	mov	r8, r2
 80046fc:	465a      	mov	r2, fp
 80046fe:	3a01      	subs	r2, #1
 8004700:	2a01      	cmp	r2, #1
 8004702:	d8d9      	bhi.n	80046b8 <LL_GPIO_Init+0x1c>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004704:	6882      	ldr	r2, [r0, #8]
 8004706:	4692      	mov	sl, r2
 8004708:	688a      	ldr	r2, [r1, #8]
 800470a:	4372      	muls	r2, r6
 800470c:	4691      	mov	r9, r2
 800470e:	4652      	mov	r2, sl
 8004710:	403a      	ands	r2, r7
 8004712:	4692      	mov	sl, r2
 8004714:	464a      	mov	r2, r9
 8004716:	4657      	mov	r7, sl
 8004718:	433a      	orrs	r2, r7
 800471a:	6082      	str	r2, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800471c:	6842      	ldr	r2, [r0, #4]
 800471e:	43a2      	bics	r2, r4
 8004720:	4691      	mov	r9, r2
 8004722:	68ca      	ldr	r2, [r1, #12]
 8004724:	4362      	muls	r2, r4
 8004726:	4692      	mov	sl, r2
 8004728:	464a      	mov	r2, r9
 800472a:	4657      	mov	r7, sl
 800472c:	433a      	orrs	r2, r7
 800472e:	6042      	str	r2, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004730:	68c2      	ldr	r2, [r0, #12]
 8004732:	9f01      	ldr	r7, [sp, #4]
 8004734:	403a      	ands	r2, r7
 8004736:	4691      	mov	r9, r2
 8004738:	4642      	mov	r2, r8
 800473a:	464f      	mov	r7, r9
 800473c:	433a      	orrs	r2, r7
 800473e:	60c2      	str	r2, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004740:	465a      	mov	r2, fp
 8004742:	2a02      	cmp	r2, #2
 8004744:	d1be      	bne.n	80046c4 <LL_GPIO_Init+0x28>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004746:	694a      	ldr	r2, [r1, #20]
 8004748:	4690      	mov	r8, r2
        if (currentpin < LL_GPIO_PIN_8)
 800474a:	2cff      	cmp	r4, #255	@ 0xff
 800474c:	d814      	bhi.n	8004778 <LL_GPIO_Init+0xdc>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800474e:	0032      	movs	r2, r6
 8004750:	4372      	muls	r2, r6
 8004752:	4691      	mov	r9, r2
 8004754:	464f      	mov	r7, r9
 8004756:	6a04      	ldr	r4, [r0, #32]
 8004758:	0112      	lsls	r2, r2, #4
 800475a:	1bd2      	subs	r2, r2, r7
 800475c:	4394      	bics	r4, r2
 800475e:	4642      	mov	r2, r8
 8004760:	437a      	muls	r2, r7
 8004762:	4314      	orrs	r4, r2
 8004764:	6204      	str	r4, [r0, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8004766:	e7ad      	b.n	80046c4 <LL_GPIO_Init+0x28>
  }

  return (SUCCESS);
}
 8004768:	2000      	movs	r0, #0
 800476a:	b003      	add	sp, #12
 800476c:	bcf0      	pop	{r4, r5, r6, r7}
 800476e:	46bb      	mov	fp, r7
 8004770:	46b2      	mov	sl, r6
 8004772:	46a9      	mov	r9, r5
 8004774:	46a0      	mov	r8, r4
 8004776:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8004778:	0a24      	lsrs	r4, r4, #8
 800477a:	4364      	muls	r4, r4
 800477c:	4364      	muls	r4, r4
 800477e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8004780:	4691      	mov	r9, r2
 8004782:	0122      	lsls	r2, r4, #4
 8004784:	1b12      	subs	r2, r2, r4
 8004786:	4692      	mov	sl, r2
 8004788:	464a      	mov	r2, r9
 800478a:	4657      	mov	r7, sl
 800478c:	43ba      	bics	r2, r7
 800478e:	4691      	mov	r9, r2
 8004790:	4642      	mov	r2, r8
 8004792:	4362      	muls	r2, r4
 8004794:	0014      	movs	r4, r2
 8004796:	464a      	mov	r2, r9
 8004798:	4314      	orrs	r4, r2
 800479a:	6244      	str	r4, [r0, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800479c:	e792      	b.n	80046c4 <LL_GPIO_Init+0x28>
 800479e:	46c0      	nop			@ (mov r8, r8)

080047a0 <LL_SPI_Init>:
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80047a0:	6803      	ldr	r3, [r0, #0]
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80047a2:	0002      	movs	r2, r0
 80047a4:	b570      	push	{r4, r5, r6, lr}
  ErrorStatus status = ERROR;
 80047a6:	2001      	movs	r0, #1
 80047a8:	065b      	lsls	r3, r3, #25
 80047aa:	d429      	bmi.n	8004800 <LL_SPI_Init+0x60>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80047ac:	684e      	ldr	r6, [r1, #4]
 80047ae:	680b      	ldr	r3, [r1, #0]
 80047b0:	6948      	ldr	r0, [r1, #20]
 80047b2:	4333      	orrs	r3, r6
 80047b4:	68ce      	ldr	r6, [r1, #12]
 80047b6:	6815      	ldr	r5, [r2, #0]
 80047b8:	4333      	orrs	r3, r6
 80047ba:	690e      	ldr	r6, [r1, #16]
 80047bc:	6a0c      	ldr	r4, [r1, #32]
 80047be:	4333      	orrs	r3, r6
 80047c0:	698e      	ldr	r6, [r1, #24]
 80047c2:	4303      	orrs	r3, r0
 80047c4:	4333      	orrs	r3, r6
 80047c6:	69ce      	ldr	r6, [r1, #28]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80047c8:	0c00      	lsrs	r0, r0, #16
    MODIFY_REG(SPIx->CR1,
 80047ca:	4333      	orrs	r3, r6
 80047cc:	4e11      	ldr	r6, [pc, #68]	@ (8004814 <LL_SPI_Init+0x74>)
 80047ce:	4323      	orrs	r3, r4
 80047d0:	4035      	ands	r5, r6
 80047d2:	432b      	orrs	r3, r5
 80047d4:	6013      	str	r3, [r2, #0]
    MODIFY_REG(SPIx->CR2,
 80047d6:	6853      	ldr	r3, [r2, #4]
 80047d8:	688d      	ldr	r5, [r1, #8]
 80047da:	4e0f      	ldr	r6, [pc, #60]	@ (8004818 <LL_SPI_Init+0x78>)
 80047dc:	4328      	orrs	r0, r5
 80047de:	4033      	ands	r3, r6
 80047e0:	4318      	orrs	r0, r3
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80047e2:	2380      	movs	r3, #128	@ 0x80
    MODIFY_REG(SPIx->CR2,
 80047e4:	6050      	str	r0, [r2, #4]
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	429d      	cmp	r5, r3
 80047ea:	d204      	bcs.n	80047f6 <LL_SPI_Init+0x56>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80047ec:	2080      	movs	r0, #128	@ 0x80
 80047ee:	6853      	ldr	r3, [r2, #4]
 80047f0:	0140      	lsls	r0, r0, #5
 80047f2:	4303      	orrs	r3, r0
 80047f4:	6053      	str	r3, [r2, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80047f6:	2380      	movs	r3, #128	@ 0x80
 80047f8:	019b      	lsls	r3, r3, #6
 80047fa:	429c      	cmp	r4, r3
 80047fc:	d005      	beq.n	800480a <LL_SPI_Init+0x6a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 80047fe:	2000      	movs	r0, #0
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004800:	69d3      	ldr	r3, [r2, #28]
 8004802:	4906      	ldr	r1, [pc, #24]	@ (800481c <LL_SPI_Init+0x7c>)
 8004804:	400b      	ands	r3, r1
 8004806:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
}
 8004808:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800480a:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
    status = SUCCESS;
 800480c:	2000      	movs	r0, #0
 800480e:	6113      	str	r3, [r2, #16]
 8004810:	e7f6      	b.n	8004800 <LL_SPI_Init+0x60>
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	ffff0040 	.word	0xffff0040
 8004818:	fffff0fb 	.word	0xfffff0fb
 800481c:	fffff7ff 	.word	0xfffff7ff

08004820 <memset>:
 8004820:	0003      	movs	r3, r0
 8004822:	1882      	adds	r2, r0, r2
 8004824:	4293      	cmp	r3, r2
 8004826:	d100      	bne.n	800482a <memset+0xa>
 8004828:	4770      	bx	lr
 800482a:	7019      	strb	r1, [r3, #0]
 800482c:	3301      	adds	r3, #1
 800482e:	e7f9      	b.n	8004824 <memset+0x4>

08004830 <__libc_init_array>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	2600      	movs	r6, #0
 8004834:	4c0c      	ldr	r4, [pc, #48]	@ (8004868 <__libc_init_array+0x38>)
 8004836:	4d0d      	ldr	r5, [pc, #52]	@ (800486c <__libc_init_array+0x3c>)
 8004838:	1b64      	subs	r4, r4, r5
 800483a:	10a4      	asrs	r4, r4, #2
 800483c:	42a6      	cmp	r6, r4
 800483e:	d109      	bne.n	8004854 <__libc_init_array+0x24>
 8004840:	2600      	movs	r6, #0
 8004842:	f000 f819 	bl	8004878 <_init>
 8004846:	4c0a      	ldr	r4, [pc, #40]	@ (8004870 <__libc_init_array+0x40>)
 8004848:	4d0a      	ldr	r5, [pc, #40]	@ (8004874 <__libc_init_array+0x44>)
 800484a:	1b64      	subs	r4, r4, r5
 800484c:	10a4      	asrs	r4, r4, #2
 800484e:	42a6      	cmp	r6, r4
 8004850:	d105      	bne.n	800485e <__libc_init_array+0x2e>
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	00b3      	lsls	r3, r6, #2
 8004856:	58eb      	ldr	r3, [r5, r3]
 8004858:	4798      	blx	r3
 800485a:	3601      	adds	r6, #1
 800485c:	e7ee      	b.n	800483c <__libc_init_array+0xc>
 800485e:	00b3      	lsls	r3, r6, #2
 8004860:	58eb      	ldr	r3, [r5, r3]
 8004862:	4798      	blx	r3
 8004864:	3601      	adds	r6, #1
 8004866:	e7f2      	b.n	800484e <__libc_init_array+0x1e>
 8004868:	080049a8 	.word	0x080049a8
 800486c:	080049a8 	.word	0x080049a8
 8004870:	080049ac 	.word	0x080049ac
 8004874:	080049a8 	.word	0x080049a8

08004878 <_init>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	46c0      	nop			@ (mov r8, r8)
 800487c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487e:	bc08      	pop	{r3}
 8004880:	469e      	mov	lr, r3
 8004882:	4770      	bx	lr

08004884 <_fini>:
 8004884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004886:	46c0      	nop			@ (mov r8, r8)
 8004888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488a:	bc08      	pop	{r3}
 800488c:	469e      	mov	lr, r3
 800488e:	4770      	bx	lr
