
TEST_FOC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080bc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08008178  08008178  00009178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800820c  0800820c  0000a00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800820c  0800820c  0000a00c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800820c  0800820c  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800820c  0800820c  0000920c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008210  08008210  00009210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008214  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000000c  08008220  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08008220  0000a29c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012055  00000000  00000000  0000a034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de8  00000000  00000000  0001c089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001ee78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d30  00000000  00000000  0001ffa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016df0  00000000  00000000  00020cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150f1  00000000  00000000  00037ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099dab  00000000  00000000  0004cbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e695c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f2c  00000000  00000000  000e69a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000ea8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008160 	.word	0x08008160

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08008160 	.word	0x08008160

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_cfrcmple>:
 800021c:	4684      	mov	ip, r0
 800021e:	0008      	movs	r0, r1
 8000220:	4661      	mov	r1, ip
 8000222:	e7ff      	b.n	8000224 <__aeabi_cfcmpeq>

08000224 <__aeabi_cfcmpeq>:
 8000224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000226:	f000 fa95 	bl	8000754 <__lesf2>
 800022a:	2800      	cmp	r0, #0
 800022c:	d401      	bmi.n	8000232 <__aeabi_cfcmpeq+0xe>
 800022e:	2100      	movs	r1, #0
 8000230:	42c8      	cmn	r0, r1
 8000232:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000234 <__aeabi_fcmpeq>:
 8000234:	b510      	push	{r4, lr}
 8000236:	f000 fa1d 	bl	8000674 <__eqsf2>
 800023a:	4240      	negs	r0, r0
 800023c:	3001      	adds	r0, #1
 800023e:	bd10      	pop	{r4, pc}

08000240 <__aeabi_fcmplt>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fa87 	bl	8000754 <__lesf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	db01      	blt.n	800024e <__aeabi_fcmplt+0xe>
 800024a:	2000      	movs	r0, #0
 800024c:	bd10      	pop	{r4, pc}
 800024e:	2001      	movs	r0, #1
 8000250:	bd10      	pop	{r4, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)

08000254 <__aeabi_fcmple>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 fa7d 	bl	8000754 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	dd01      	ble.n	8000262 <__aeabi_fcmple+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)

08000268 <__aeabi_fcmpgt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 fa2b 	bl	80006c4 <__gesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dc01      	bgt.n	8000276 <__aeabi_fcmpgt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			@ (mov r8, r8)

0800027c <__aeabi_fcmpge>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 fa21 	bl	80006c4 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	da01      	bge.n	800028a <__aeabi_fcmpge+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			@ (mov r8, r8)

08000290 <__aeabi_fadd>:
 8000290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000292:	024b      	lsls	r3, r1, #9
 8000294:	0a5a      	lsrs	r2, r3, #9
 8000296:	4694      	mov	ip, r2
 8000298:	004a      	lsls	r2, r1, #1
 800029a:	0fc9      	lsrs	r1, r1, #31
 800029c:	46ce      	mov	lr, r9
 800029e:	4647      	mov	r7, r8
 80002a0:	4689      	mov	r9, r1
 80002a2:	0045      	lsls	r5, r0, #1
 80002a4:	0246      	lsls	r6, r0, #9
 80002a6:	0e2d      	lsrs	r5, r5, #24
 80002a8:	0e12      	lsrs	r2, r2, #24
 80002aa:	b580      	push	{r7, lr}
 80002ac:	0999      	lsrs	r1, r3, #6
 80002ae:	0a77      	lsrs	r7, r6, #9
 80002b0:	0fc4      	lsrs	r4, r0, #31
 80002b2:	09b6      	lsrs	r6, r6, #6
 80002b4:	1aab      	subs	r3, r5, r2
 80002b6:	454c      	cmp	r4, r9
 80002b8:	d020      	beq.n	80002fc <__aeabi_fadd+0x6c>
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	dd0c      	ble.n	80002d8 <__aeabi_fadd+0x48>
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d134      	bne.n	800032c <__aeabi_fadd+0x9c>
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d02a      	beq.n	800031c <__aeabi_fadd+0x8c>
 80002c6:	1e5a      	subs	r2, r3, #1
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d100      	bne.n	80002ce <__aeabi_fadd+0x3e>
 80002cc:	e08f      	b.n	80003ee <__aeabi_fadd+0x15e>
 80002ce:	2bff      	cmp	r3, #255	@ 0xff
 80002d0:	d100      	bne.n	80002d4 <__aeabi_fadd+0x44>
 80002d2:	e0cd      	b.n	8000470 <__aeabi_fadd+0x1e0>
 80002d4:	0013      	movs	r3, r2
 80002d6:	e02f      	b.n	8000338 <__aeabi_fadd+0xa8>
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d060      	beq.n	800039e <__aeabi_fadd+0x10e>
 80002dc:	1b53      	subs	r3, r2, r5
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d000      	beq.n	80002e4 <__aeabi_fadd+0x54>
 80002e2:	e0ee      	b.n	80004c2 <__aeabi_fadd+0x232>
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d100      	bne.n	80002ea <__aeabi_fadd+0x5a>
 80002e8:	e13e      	b.n	8000568 <__aeabi_fadd+0x2d8>
 80002ea:	1e5c      	subs	r4, r3, #1
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d100      	bne.n	80002f2 <__aeabi_fadd+0x62>
 80002f0:	e16b      	b.n	80005ca <__aeabi_fadd+0x33a>
 80002f2:	2bff      	cmp	r3, #255	@ 0xff
 80002f4:	d100      	bne.n	80002f8 <__aeabi_fadd+0x68>
 80002f6:	e0b9      	b.n	800046c <__aeabi_fadd+0x1dc>
 80002f8:	0023      	movs	r3, r4
 80002fa:	e0e7      	b.n	80004cc <__aeabi_fadd+0x23c>
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	dc00      	bgt.n	8000302 <__aeabi_fadd+0x72>
 8000300:	e0a4      	b.n	800044c <__aeabi_fadd+0x1bc>
 8000302:	2a00      	cmp	r2, #0
 8000304:	d069      	beq.n	80003da <__aeabi_fadd+0x14a>
 8000306:	2dff      	cmp	r5, #255	@ 0xff
 8000308:	d100      	bne.n	800030c <__aeabi_fadd+0x7c>
 800030a:	e0b1      	b.n	8000470 <__aeabi_fadd+0x1e0>
 800030c:	2280      	movs	r2, #128	@ 0x80
 800030e:	04d2      	lsls	r2, r2, #19
 8000310:	4311      	orrs	r1, r2
 8000312:	2b1b      	cmp	r3, #27
 8000314:	dc00      	bgt.n	8000318 <__aeabi_fadd+0x88>
 8000316:	e0e9      	b.n	80004ec <__aeabi_fadd+0x25c>
 8000318:	002b      	movs	r3, r5
 800031a:	3605      	adds	r6, #5
 800031c:	08f7      	lsrs	r7, r6, #3
 800031e:	2bff      	cmp	r3, #255	@ 0xff
 8000320:	d100      	bne.n	8000324 <__aeabi_fadd+0x94>
 8000322:	e0a5      	b.n	8000470 <__aeabi_fadd+0x1e0>
 8000324:	027a      	lsls	r2, r7, #9
 8000326:	0a52      	lsrs	r2, r2, #9
 8000328:	b2d8      	uxtb	r0, r3
 800032a:	e030      	b.n	800038e <__aeabi_fadd+0xfe>
 800032c:	2dff      	cmp	r5, #255	@ 0xff
 800032e:	d100      	bne.n	8000332 <__aeabi_fadd+0xa2>
 8000330:	e09e      	b.n	8000470 <__aeabi_fadd+0x1e0>
 8000332:	2280      	movs	r2, #128	@ 0x80
 8000334:	04d2      	lsls	r2, r2, #19
 8000336:	4311      	orrs	r1, r2
 8000338:	2001      	movs	r0, #1
 800033a:	2b1b      	cmp	r3, #27
 800033c:	dc08      	bgt.n	8000350 <__aeabi_fadd+0xc0>
 800033e:	0008      	movs	r0, r1
 8000340:	2220      	movs	r2, #32
 8000342:	40d8      	lsrs	r0, r3
 8000344:	1ad3      	subs	r3, r2, r3
 8000346:	4099      	lsls	r1, r3
 8000348:	000b      	movs	r3, r1
 800034a:	1e5a      	subs	r2, r3, #1
 800034c:	4193      	sbcs	r3, r2
 800034e:	4318      	orrs	r0, r3
 8000350:	1a36      	subs	r6, r6, r0
 8000352:	0173      	lsls	r3, r6, #5
 8000354:	d400      	bmi.n	8000358 <__aeabi_fadd+0xc8>
 8000356:	e071      	b.n	800043c <__aeabi_fadd+0x1ac>
 8000358:	01b6      	lsls	r6, r6, #6
 800035a:	09b7      	lsrs	r7, r6, #6
 800035c:	0038      	movs	r0, r7
 800035e:	f001 fdc5 	bl	8001eec <__clzsi2>
 8000362:	003b      	movs	r3, r7
 8000364:	3805      	subs	r0, #5
 8000366:	4083      	lsls	r3, r0
 8000368:	4285      	cmp	r5, r0
 800036a:	dd4d      	ble.n	8000408 <__aeabi_fadd+0x178>
 800036c:	4eb4      	ldr	r6, [pc, #720]	@ (8000640 <__aeabi_fadd+0x3b0>)
 800036e:	1a2d      	subs	r5, r5, r0
 8000370:	401e      	ands	r6, r3
 8000372:	075a      	lsls	r2, r3, #29
 8000374:	d068      	beq.n	8000448 <__aeabi_fadd+0x1b8>
 8000376:	220f      	movs	r2, #15
 8000378:	4013      	ands	r3, r2
 800037a:	2b04      	cmp	r3, #4
 800037c:	d064      	beq.n	8000448 <__aeabi_fadd+0x1b8>
 800037e:	3604      	adds	r6, #4
 8000380:	0173      	lsls	r3, r6, #5
 8000382:	d561      	bpl.n	8000448 <__aeabi_fadd+0x1b8>
 8000384:	1c68      	adds	r0, r5, #1
 8000386:	2dfe      	cmp	r5, #254	@ 0xfe
 8000388:	d154      	bne.n	8000434 <__aeabi_fadd+0x1a4>
 800038a:	20ff      	movs	r0, #255	@ 0xff
 800038c:	2200      	movs	r2, #0
 800038e:	05c0      	lsls	r0, r0, #23
 8000390:	4310      	orrs	r0, r2
 8000392:	07e4      	lsls	r4, r4, #31
 8000394:	4320      	orrs	r0, r4
 8000396:	bcc0      	pop	{r6, r7}
 8000398:	46b9      	mov	r9, r7
 800039a:	46b0      	mov	r8, r6
 800039c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800039e:	22fe      	movs	r2, #254	@ 0xfe
 80003a0:	4690      	mov	r8, r2
 80003a2:	1c68      	adds	r0, r5, #1
 80003a4:	0002      	movs	r2, r0
 80003a6:	4640      	mov	r0, r8
 80003a8:	4210      	tst	r0, r2
 80003aa:	d16b      	bne.n	8000484 <__aeabi_fadd+0x1f4>
 80003ac:	2d00      	cmp	r5, #0
 80003ae:	d000      	beq.n	80003b2 <__aeabi_fadd+0x122>
 80003b0:	e0dd      	b.n	800056e <__aeabi_fadd+0x2de>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d100      	bne.n	80003b8 <__aeabi_fadd+0x128>
 80003b6:	e102      	b.n	80005be <__aeabi_fadd+0x32e>
 80003b8:	2900      	cmp	r1, #0
 80003ba:	d0b3      	beq.n	8000324 <__aeabi_fadd+0x94>
 80003bc:	2280      	movs	r2, #128	@ 0x80
 80003be:	1a77      	subs	r7, r6, r1
 80003c0:	04d2      	lsls	r2, r2, #19
 80003c2:	4217      	tst	r7, r2
 80003c4:	d100      	bne.n	80003c8 <__aeabi_fadd+0x138>
 80003c6:	e136      	b.n	8000636 <__aeabi_fadd+0x3a6>
 80003c8:	464c      	mov	r4, r9
 80003ca:	1b8e      	subs	r6, r1, r6
 80003cc:	d061      	beq.n	8000492 <__aeabi_fadd+0x202>
 80003ce:	2001      	movs	r0, #1
 80003d0:	4216      	tst	r6, r2
 80003d2:	d130      	bne.n	8000436 <__aeabi_fadd+0x1a6>
 80003d4:	2300      	movs	r3, #0
 80003d6:	08f7      	lsrs	r7, r6, #3
 80003d8:	e7a4      	b.n	8000324 <__aeabi_fadd+0x94>
 80003da:	2900      	cmp	r1, #0
 80003dc:	d09e      	beq.n	800031c <__aeabi_fadd+0x8c>
 80003de:	1e5a      	subs	r2, r3, #1
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d100      	bne.n	80003e6 <__aeabi_fadd+0x156>
 80003e4:	e0ca      	b.n	800057c <__aeabi_fadd+0x2ec>
 80003e6:	2bff      	cmp	r3, #255	@ 0xff
 80003e8:	d042      	beq.n	8000470 <__aeabi_fadd+0x1e0>
 80003ea:	0013      	movs	r3, r2
 80003ec:	e791      	b.n	8000312 <__aeabi_fadd+0x82>
 80003ee:	1a71      	subs	r1, r6, r1
 80003f0:	014b      	lsls	r3, r1, #5
 80003f2:	d400      	bmi.n	80003f6 <__aeabi_fadd+0x166>
 80003f4:	e0d1      	b.n	800059a <__aeabi_fadd+0x30a>
 80003f6:	018f      	lsls	r7, r1, #6
 80003f8:	09bf      	lsrs	r7, r7, #6
 80003fa:	0038      	movs	r0, r7
 80003fc:	f001 fd76 	bl	8001eec <__clzsi2>
 8000400:	003b      	movs	r3, r7
 8000402:	3805      	subs	r0, #5
 8000404:	4083      	lsls	r3, r0
 8000406:	2501      	movs	r5, #1
 8000408:	2220      	movs	r2, #32
 800040a:	1b40      	subs	r0, r0, r5
 800040c:	3001      	adds	r0, #1
 800040e:	1a12      	subs	r2, r2, r0
 8000410:	001e      	movs	r6, r3
 8000412:	4093      	lsls	r3, r2
 8000414:	40c6      	lsrs	r6, r0
 8000416:	1e5a      	subs	r2, r3, #1
 8000418:	4193      	sbcs	r3, r2
 800041a:	431e      	orrs	r6, r3
 800041c:	d039      	beq.n	8000492 <__aeabi_fadd+0x202>
 800041e:	0773      	lsls	r3, r6, #29
 8000420:	d100      	bne.n	8000424 <__aeabi_fadd+0x194>
 8000422:	e11b      	b.n	800065c <__aeabi_fadd+0x3cc>
 8000424:	230f      	movs	r3, #15
 8000426:	2500      	movs	r5, #0
 8000428:	4033      	ands	r3, r6
 800042a:	2b04      	cmp	r3, #4
 800042c:	d1a7      	bne.n	800037e <__aeabi_fadd+0xee>
 800042e:	2001      	movs	r0, #1
 8000430:	0172      	lsls	r2, r6, #5
 8000432:	d57c      	bpl.n	800052e <__aeabi_fadd+0x29e>
 8000434:	b2c0      	uxtb	r0, r0
 8000436:	01b2      	lsls	r2, r6, #6
 8000438:	0a52      	lsrs	r2, r2, #9
 800043a:	e7a8      	b.n	800038e <__aeabi_fadd+0xfe>
 800043c:	0773      	lsls	r3, r6, #29
 800043e:	d003      	beq.n	8000448 <__aeabi_fadd+0x1b8>
 8000440:	230f      	movs	r3, #15
 8000442:	4033      	ands	r3, r6
 8000444:	2b04      	cmp	r3, #4
 8000446:	d19a      	bne.n	800037e <__aeabi_fadd+0xee>
 8000448:	002b      	movs	r3, r5
 800044a:	e767      	b.n	800031c <__aeabi_fadd+0x8c>
 800044c:	2b00      	cmp	r3, #0
 800044e:	d023      	beq.n	8000498 <__aeabi_fadd+0x208>
 8000450:	1b53      	subs	r3, r2, r5
 8000452:	2d00      	cmp	r5, #0
 8000454:	d17b      	bne.n	800054e <__aeabi_fadd+0x2be>
 8000456:	2e00      	cmp	r6, #0
 8000458:	d100      	bne.n	800045c <__aeabi_fadd+0x1cc>
 800045a:	e086      	b.n	800056a <__aeabi_fadd+0x2da>
 800045c:	1e5d      	subs	r5, r3, #1
 800045e:	2b01      	cmp	r3, #1
 8000460:	d100      	bne.n	8000464 <__aeabi_fadd+0x1d4>
 8000462:	e08b      	b.n	800057c <__aeabi_fadd+0x2ec>
 8000464:	2bff      	cmp	r3, #255	@ 0xff
 8000466:	d002      	beq.n	800046e <__aeabi_fadd+0x1de>
 8000468:	002b      	movs	r3, r5
 800046a:	e075      	b.n	8000558 <__aeabi_fadd+0x2c8>
 800046c:	464c      	mov	r4, r9
 800046e:	4667      	mov	r7, ip
 8000470:	2f00      	cmp	r7, #0
 8000472:	d100      	bne.n	8000476 <__aeabi_fadd+0x1e6>
 8000474:	e789      	b.n	800038a <__aeabi_fadd+0xfa>
 8000476:	2280      	movs	r2, #128	@ 0x80
 8000478:	03d2      	lsls	r2, r2, #15
 800047a:	433a      	orrs	r2, r7
 800047c:	0252      	lsls	r2, r2, #9
 800047e:	20ff      	movs	r0, #255	@ 0xff
 8000480:	0a52      	lsrs	r2, r2, #9
 8000482:	e784      	b.n	800038e <__aeabi_fadd+0xfe>
 8000484:	1a77      	subs	r7, r6, r1
 8000486:	017b      	lsls	r3, r7, #5
 8000488:	d46b      	bmi.n	8000562 <__aeabi_fadd+0x2d2>
 800048a:	2f00      	cmp	r7, #0
 800048c:	d000      	beq.n	8000490 <__aeabi_fadd+0x200>
 800048e:	e765      	b.n	800035c <__aeabi_fadd+0xcc>
 8000490:	2400      	movs	r4, #0
 8000492:	2000      	movs	r0, #0
 8000494:	2200      	movs	r2, #0
 8000496:	e77a      	b.n	800038e <__aeabi_fadd+0xfe>
 8000498:	22fe      	movs	r2, #254	@ 0xfe
 800049a:	1c6b      	adds	r3, r5, #1
 800049c:	421a      	tst	r2, r3
 800049e:	d149      	bne.n	8000534 <__aeabi_fadd+0x2a4>
 80004a0:	2d00      	cmp	r5, #0
 80004a2:	d000      	beq.n	80004a6 <__aeabi_fadd+0x216>
 80004a4:	e09f      	b.n	80005e6 <__aeabi_fadd+0x356>
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d100      	bne.n	80004ac <__aeabi_fadd+0x21c>
 80004aa:	e0ba      	b.n	8000622 <__aeabi_fadd+0x392>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_fadd+0x222>
 80004b0:	e0cf      	b.n	8000652 <__aeabi_fadd+0x3c2>
 80004b2:	1872      	adds	r2, r6, r1
 80004b4:	0153      	lsls	r3, r2, #5
 80004b6:	d400      	bmi.n	80004ba <__aeabi_fadd+0x22a>
 80004b8:	e0cd      	b.n	8000656 <__aeabi_fadd+0x3c6>
 80004ba:	0192      	lsls	r2, r2, #6
 80004bc:	2001      	movs	r0, #1
 80004be:	0a52      	lsrs	r2, r2, #9
 80004c0:	e765      	b.n	800038e <__aeabi_fadd+0xfe>
 80004c2:	2aff      	cmp	r2, #255	@ 0xff
 80004c4:	d0d2      	beq.n	800046c <__aeabi_fadd+0x1dc>
 80004c6:	2080      	movs	r0, #128	@ 0x80
 80004c8:	04c0      	lsls	r0, r0, #19
 80004ca:	4306      	orrs	r6, r0
 80004cc:	2001      	movs	r0, #1
 80004ce:	2b1b      	cmp	r3, #27
 80004d0:	dc08      	bgt.n	80004e4 <__aeabi_fadd+0x254>
 80004d2:	0030      	movs	r0, r6
 80004d4:	2420      	movs	r4, #32
 80004d6:	40d8      	lsrs	r0, r3
 80004d8:	1ae3      	subs	r3, r4, r3
 80004da:	409e      	lsls	r6, r3
 80004dc:	0033      	movs	r3, r6
 80004de:	1e5c      	subs	r4, r3, #1
 80004e0:	41a3      	sbcs	r3, r4
 80004e2:	4318      	orrs	r0, r3
 80004e4:	464c      	mov	r4, r9
 80004e6:	0015      	movs	r5, r2
 80004e8:	1a0e      	subs	r6, r1, r0
 80004ea:	e732      	b.n	8000352 <__aeabi_fadd+0xc2>
 80004ec:	0008      	movs	r0, r1
 80004ee:	2220      	movs	r2, #32
 80004f0:	40d8      	lsrs	r0, r3
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	4099      	lsls	r1, r3
 80004f6:	000b      	movs	r3, r1
 80004f8:	1e5a      	subs	r2, r3, #1
 80004fa:	4193      	sbcs	r3, r2
 80004fc:	4303      	orrs	r3, r0
 80004fe:	18f6      	adds	r6, r6, r3
 8000500:	0173      	lsls	r3, r6, #5
 8000502:	d59b      	bpl.n	800043c <__aeabi_fadd+0x1ac>
 8000504:	3501      	adds	r5, #1
 8000506:	2dff      	cmp	r5, #255	@ 0xff
 8000508:	d100      	bne.n	800050c <__aeabi_fadd+0x27c>
 800050a:	e73e      	b.n	800038a <__aeabi_fadd+0xfa>
 800050c:	2301      	movs	r3, #1
 800050e:	494d      	ldr	r1, [pc, #308]	@ (8000644 <__aeabi_fadd+0x3b4>)
 8000510:	0872      	lsrs	r2, r6, #1
 8000512:	4033      	ands	r3, r6
 8000514:	400a      	ands	r2, r1
 8000516:	431a      	orrs	r2, r3
 8000518:	0016      	movs	r6, r2
 800051a:	0753      	lsls	r3, r2, #29
 800051c:	d004      	beq.n	8000528 <__aeabi_fadd+0x298>
 800051e:	230f      	movs	r3, #15
 8000520:	4013      	ands	r3, r2
 8000522:	2b04      	cmp	r3, #4
 8000524:	d000      	beq.n	8000528 <__aeabi_fadd+0x298>
 8000526:	e72a      	b.n	800037e <__aeabi_fadd+0xee>
 8000528:	0173      	lsls	r3, r6, #5
 800052a:	d500      	bpl.n	800052e <__aeabi_fadd+0x29e>
 800052c:	e72a      	b.n	8000384 <__aeabi_fadd+0xf4>
 800052e:	002b      	movs	r3, r5
 8000530:	08f7      	lsrs	r7, r6, #3
 8000532:	e6f7      	b.n	8000324 <__aeabi_fadd+0x94>
 8000534:	2bff      	cmp	r3, #255	@ 0xff
 8000536:	d100      	bne.n	800053a <__aeabi_fadd+0x2aa>
 8000538:	e727      	b.n	800038a <__aeabi_fadd+0xfa>
 800053a:	1871      	adds	r1, r6, r1
 800053c:	0849      	lsrs	r1, r1, #1
 800053e:	074a      	lsls	r2, r1, #29
 8000540:	d02f      	beq.n	80005a2 <__aeabi_fadd+0x312>
 8000542:	220f      	movs	r2, #15
 8000544:	400a      	ands	r2, r1
 8000546:	2a04      	cmp	r2, #4
 8000548:	d02b      	beq.n	80005a2 <__aeabi_fadd+0x312>
 800054a:	1d0e      	adds	r6, r1, #4
 800054c:	e6e6      	b.n	800031c <__aeabi_fadd+0x8c>
 800054e:	2aff      	cmp	r2, #255	@ 0xff
 8000550:	d08d      	beq.n	800046e <__aeabi_fadd+0x1de>
 8000552:	2080      	movs	r0, #128	@ 0x80
 8000554:	04c0      	lsls	r0, r0, #19
 8000556:	4306      	orrs	r6, r0
 8000558:	2b1b      	cmp	r3, #27
 800055a:	dd24      	ble.n	80005a6 <__aeabi_fadd+0x316>
 800055c:	0013      	movs	r3, r2
 800055e:	1d4e      	adds	r6, r1, #5
 8000560:	e6dc      	b.n	800031c <__aeabi_fadd+0x8c>
 8000562:	464c      	mov	r4, r9
 8000564:	1b8f      	subs	r7, r1, r6
 8000566:	e6f9      	b.n	800035c <__aeabi_fadd+0xcc>
 8000568:	464c      	mov	r4, r9
 800056a:	000e      	movs	r6, r1
 800056c:	e6d6      	b.n	800031c <__aeabi_fadd+0x8c>
 800056e:	2e00      	cmp	r6, #0
 8000570:	d149      	bne.n	8000606 <__aeabi_fadd+0x376>
 8000572:	2900      	cmp	r1, #0
 8000574:	d068      	beq.n	8000648 <__aeabi_fadd+0x3b8>
 8000576:	4667      	mov	r7, ip
 8000578:	464c      	mov	r4, r9
 800057a:	e77c      	b.n	8000476 <__aeabi_fadd+0x1e6>
 800057c:	1870      	adds	r0, r6, r1
 800057e:	0143      	lsls	r3, r0, #5
 8000580:	d574      	bpl.n	800066c <__aeabi_fadd+0x3dc>
 8000582:	4930      	ldr	r1, [pc, #192]	@ (8000644 <__aeabi_fadd+0x3b4>)
 8000584:	0840      	lsrs	r0, r0, #1
 8000586:	4001      	ands	r1, r0
 8000588:	0743      	lsls	r3, r0, #29
 800058a:	d009      	beq.n	80005a0 <__aeabi_fadd+0x310>
 800058c:	230f      	movs	r3, #15
 800058e:	4003      	ands	r3, r0
 8000590:	2b04      	cmp	r3, #4
 8000592:	d005      	beq.n	80005a0 <__aeabi_fadd+0x310>
 8000594:	2302      	movs	r3, #2
 8000596:	1d0e      	adds	r6, r1, #4
 8000598:	e6c0      	b.n	800031c <__aeabi_fadd+0x8c>
 800059a:	2301      	movs	r3, #1
 800059c:	08cf      	lsrs	r7, r1, #3
 800059e:	e6c1      	b.n	8000324 <__aeabi_fadd+0x94>
 80005a0:	2302      	movs	r3, #2
 80005a2:	08cf      	lsrs	r7, r1, #3
 80005a4:	e6be      	b.n	8000324 <__aeabi_fadd+0x94>
 80005a6:	2520      	movs	r5, #32
 80005a8:	0030      	movs	r0, r6
 80005aa:	40d8      	lsrs	r0, r3
 80005ac:	1aeb      	subs	r3, r5, r3
 80005ae:	409e      	lsls	r6, r3
 80005b0:	0033      	movs	r3, r6
 80005b2:	1e5d      	subs	r5, r3, #1
 80005b4:	41ab      	sbcs	r3, r5
 80005b6:	4303      	orrs	r3, r0
 80005b8:	0015      	movs	r5, r2
 80005ba:	185e      	adds	r6, r3, r1
 80005bc:	e7a0      	b.n	8000500 <__aeabi_fadd+0x270>
 80005be:	2900      	cmp	r1, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x334>
 80005c2:	e765      	b.n	8000490 <__aeabi_fadd+0x200>
 80005c4:	464c      	mov	r4, r9
 80005c6:	4667      	mov	r7, ip
 80005c8:	e6ac      	b.n	8000324 <__aeabi_fadd+0x94>
 80005ca:	1b8f      	subs	r7, r1, r6
 80005cc:	017b      	lsls	r3, r7, #5
 80005ce:	d52e      	bpl.n	800062e <__aeabi_fadd+0x39e>
 80005d0:	01bf      	lsls	r7, r7, #6
 80005d2:	09bf      	lsrs	r7, r7, #6
 80005d4:	0038      	movs	r0, r7
 80005d6:	f001 fc89 	bl	8001eec <__clzsi2>
 80005da:	003b      	movs	r3, r7
 80005dc:	3805      	subs	r0, #5
 80005de:	4083      	lsls	r3, r0
 80005e0:	464c      	mov	r4, r9
 80005e2:	3501      	adds	r5, #1
 80005e4:	e710      	b.n	8000408 <__aeabi_fadd+0x178>
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d100      	bne.n	80005ec <__aeabi_fadd+0x35c>
 80005ea:	e740      	b.n	800046e <__aeabi_fadd+0x1de>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0x362>
 80005f0:	e741      	b.n	8000476 <__aeabi_fadd+0x1e6>
 80005f2:	2380      	movs	r3, #128	@ 0x80
 80005f4:	03db      	lsls	r3, r3, #15
 80005f6:	429f      	cmp	r7, r3
 80005f8:	d200      	bcs.n	80005fc <__aeabi_fadd+0x36c>
 80005fa:	e73c      	b.n	8000476 <__aeabi_fadd+0x1e6>
 80005fc:	459c      	cmp	ip, r3
 80005fe:	d300      	bcc.n	8000602 <__aeabi_fadd+0x372>
 8000600:	e739      	b.n	8000476 <__aeabi_fadd+0x1e6>
 8000602:	4667      	mov	r7, ip
 8000604:	e737      	b.n	8000476 <__aeabi_fadd+0x1e6>
 8000606:	2900      	cmp	r1, #0
 8000608:	d100      	bne.n	800060c <__aeabi_fadd+0x37c>
 800060a:	e734      	b.n	8000476 <__aeabi_fadd+0x1e6>
 800060c:	2380      	movs	r3, #128	@ 0x80
 800060e:	03db      	lsls	r3, r3, #15
 8000610:	429f      	cmp	r7, r3
 8000612:	d200      	bcs.n	8000616 <__aeabi_fadd+0x386>
 8000614:	e72f      	b.n	8000476 <__aeabi_fadd+0x1e6>
 8000616:	459c      	cmp	ip, r3
 8000618:	d300      	bcc.n	800061c <__aeabi_fadd+0x38c>
 800061a:	e72c      	b.n	8000476 <__aeabi_fadd+0x1e6>
 800061c:	464c      	mov	r4, r9
 800061e:	4667      	mov	r7, ip
 8000620:	e729      	b.n	8000476 <__aeabi_fadd+0x1e6>
 8000622:	2900      	cmp	r1, #0
 8000624:	d100      	bne.n	8000628 <__aeabi_fadd+0x398>
 8000626:	e734      	b.n	8000492 <__aeabi_fadd+0x202>
 8000628:	2300      	movs	r3, #0
 800062a:	08cf      	lsrs	r7, r1, #3
 800062c:	e67a      	b.n	8000324 <__aeabi_fadd+0x94>
 800062e:	464c      	mov	r4, r9
 8000630:	2301      	movs	r3, #1
 8000632:	08ff      	lsrs	r7, r7, #3
 8000634:	e676      	b.n	8000324 <__aeabi_fadd+0x94>
 8000636:	2f00      	cmp	r7, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x3ac>
 800063a:	e729      	b.n	8000490 <__aeabi_fadd+0x200>
 800063c:	08ff      	lsrs	r7, r7, #3
 800063e:	e671      	b.n	8000324 <__aeabi_fadd+0x94>
 8000640:	fbffffff 	.word	0xfbffffff
 8000644:	7dffffff 	.word	0x7dffffff
 8000648:	2280      	movs	r2, #128	@ 0x80
 800064a:	2400      	movs	r4, #0
 800064c:	20ff      	movs	r0, #255	@ 0xff
 800064e:	03d2      	lsls	r2, r2, #15
 8000650:	e69d      	b.n	800038e <__aeabi_fadd+0xfe>
 8000652:	2300      	movs	r3, #0
 8000654:	e666      	b.n	8000324 <__aeabi_fadd+0x94>
 8000656:	2300      	movs	r3, #0
 8000658:	08d7      	lsrs	r7, r2, #3
 800065a:	e663      	b.n	8000324 <__aeabi_fadd+0x94>
 800065c:	2001      	movs	r0, #1
 800065e:	0172      	lsls	r2, r6, #5
 8000660:	d500      	bpl.n	8000664 <__aeabi_fadd+0x3d4>
 8000662:	e6e7      	b.n	8000434 <__aeabi_fadd+0x1a4>
 8000664:	0031      	movs	r1, r6
 8000666:	2300      	movs	r3, #0
 8000668:	08cf      	lsrs	r7, r1, #3
 800066a:	e65b      	b.n	8000324 <__aeabi_fadd+0x94>
 800066c:	2301      	movs	r3, #1
 800066e:	08c7      	lsrs	r7, r0, #3
 8000670:	e658      	b.n	8000324 <__aeabi_fadd+0x94>
 8000672:	46c0      	nop			@ (mov r8, r8)

08000674 <__eqsf2>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	0042      	lsls	r2, r0, #1
 8000678:	024e      	lsls	r6, r1, #9
 800067a:	004c      	lsls	r4, r1, #1
 800067c:	0245      	lsls	r5, r0, #9
 800067e:	0a6d      	lsrs	r5, r5, #9
 8000680:	0e12      	lsrs	r2, r2, #24
 8000682:	0fc3      	lsrs	r3, r0, #31
 8000684:	0a76      	lsrs	r6, r6, #9
 8000686:	0e24      	lsrs	r4, r4, #24
 8000688:	0fc9      	lsrs	r1, r1, #31
 800068a:	2aff      	cmp	r2, #255	@ 0xff
 800068c:	d010      	beq.n	80006b0 <__eqsf2+0x3c>
 800068e:	2cff      	cmp	r4, #255	@ 0xff
 8000690:	d00c      	beq.n	80006ac <__eqsf2+0x38>
 8000692:	2001      	movs	r0, #1
 8000694:	42a2      	cmp	r2, r4
 8000696:	d10a      	bne.n	80006ae <__eqsf2+0x3a>
 8000698:	42b5      	cmp	r5, r6
 800069a:	d108      	bne.n	80006ae <__eqsf2+0x3a>
 800069c:	428b      	cmp	r3, r1
 800069e:	d00f      	beq.n	80006c0 <__eqsf2+0x4c>
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	d104      	bne.n	80006ae <__eqsf2+0x3a>
 80006a4:	0028      	movs	r0, r5
 80006a6:	1e43      	subs	r3, r0, #1
 80006a8:	4198      	sbcs	r0, r3
 80006aa:	e000      	b.n	80006ae <__eqsf2+0x3a>
 80006ac:	2001      	movs	r0, #1
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	2001      	movs	r0, #1
 80006b2:	2cff      	cmp	r4, #255	@ 0xff
 80006b4:	d1fb      	bne.n	80006ae <__eqsf2+0x3a>
 80006b6:	4335      	orrs	r5, r6
 80006b8:	d1f9      	bne.n	80006ae <__eqsf2+0x3a>
 80006ba:	404b      	eors	r3, r1
 80006bc:	0018      	movs	r0, r3
 80006be:	e7f6      	b.n	80006ae <__eqsf2+0x3a>
 80006c0:	2000      	movs	r0, #0
 80006c2:	e7f4      	b.n	80006ae <__eqsf2+0x3a>

080006c4 <__gesf2>:
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	0042      	lsls	r2, r0, #1
 80006c8:	0244      	lsls	r4, r0, #9
 80006ca:	024d      	lsls	r5, r1, #9
 80006cc:	0fc3      	lsrs	r3, r0, #31
 80006ce:	0048      	lsls	r0, r1, #1
 80006d0:	0a64      	lsrs	r4, r4, #9
 80006d2:	0e12      	lsrs	r2, r2, #24
 80006d4:	0a6d      	lsrs	r5, r5, #9
 80006d6:	0e00      	lsrs	r0, r0, #24
 80006d8:	0fc9      	lsrs	r1, r1, #31
 80006da:	2aff      	cmp	r2, #255	@ 0xff
 80006dc:	d018      	beq.n	8000710 <__gesf2+0x4c>
 80006de:	28ff      	cmp	r0, #255	@ 0xff
 80006e0:	d00a      	beq.n	80006f8 <__gesf2+0x34>
 80006e2:	2a00      	cmp	r2, #0
 80006e4:	d11e      	bne.n	8000724 <__gesf2+0x60>
 80006e6:	2800      	cmp	r0, #0
 80006e8:	d10a      	bne.n	8000700 <__gesf2+0x3c>
 80006ea:	2d00      	cmp	r5, #0
 80006ec:	d029      	beq.n	8000742 <__gesf2+0x7e>
 80006ee:	2c00      	cmp	r4, #0
 80006f0:	d12d      	bne.n	800074e <__gesf2+0x8a>
 80006f2:	0048      	lsls	r0, r1, #1
 80006f4:	3801      	subs	r0, #1
 80006f6:	bd30      	pop	{r4, r5, pc}
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d125      	bne.n	8000748 <__gesf2+0x84>
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	d101      	bne.n	8000704 <__gesf2+0x40>
 8000700:	2c00      	cmp	r4, #0
 8000702:	d0f6      	beq.n	80006f2 <__gesf2+0x2e>
 8000704:	428b      	cmp	r3, r1
 8000706:	d019      	beq.n	800073c <__gesf2+0x78>
 8000708:	2001      	movs	r0, #1
 800070a:	425b      	negs	r3, r3
 800070c:	4318      	orrs	r0, r3
 800070e:	e7f2      	b.n	80006f6 <__gesf2+0x32>
 8000710:	2c00      	cmp	r4, #0
 8000712:	d119      	bne.n	8000748 <__gesf2+0x84>
 8000714:	28ff      	cmp	r0, #255	@ 0xff
 8000716:	d1f7      	bne.n	8000708 <__gesf2+0x44>
 8000718:	2d00      	cmp	r5, #0
 800071a:	d115      	bne.n	8000748 <__gesf2+0x84>
 800071c:	2000      	movs	r0, #0
 800071e:	428b      	cmp	r3, r1
 8000720:	d1f2      	bne.n	8000708 <__gesf2+0x44>
 8000722:	e7e8      	b.n	80006f6 <__gesf2+0x32>
 8000724:	2800      	cmp	r0, #0
 8000726:	d0ef      	beq.n	8000708 <__gesf2+0x44>
 8000728:	428b      	cmp	r3, r1
 800072a:	d1ed      	bne.n	8000708 <__gesf2+0x44>
 800072c:	4282      	cmp	r2, r0
 800072e:	dceb      	bgt.n	8000708 <__gesf2+0x44>
 8000730:	db04      	blt.n	800073c <__gesf2+0x78>
 8000732:	42ac      	cmp	r4, r5
 8000734:	d8e8      	bhi.n	8000708 <__gesf2+0x44>
 8000736:	2000      	movs	r0, #0
 8000738:	42ac      	cmp	r4, r5
 800073a:	d2dc      	bcs.n	80006f6 <__gesf2+0x32>
 800073c:	0058      	lsls	r0, r3, #1
 800073e:	3801      	subs	r0, #1
 8000740:	e7d9      	b.n	80006f6 <__gesf2+0x32>
 8000742:	2c00      	cmp	r4, #0
 8000744:	d0d7      	beq.n	80006f6 <__gesf2+0x32>
 8000746:	e7df      	b.n	8000708 <__gesf2+0x44>
 8000748:	2002      	movs	r0, #2
 800074a:	4240      	negs	r0, r0
 800074c:	e7d3      	b.n	80006f6 <__gesf2+0x32>
 800074e:	428b      	cmp	r3, r1
 8000750:	d1da      	bne.n	8000708 <__gesf2+0x44>
 8000752:	e7ee      	b.n	8000732 <__gesf2+0x6e>

08000754 <__lesf2>:
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	0042      	lsls	r2, r0, #1
 8000758:	0244      	lsls	r4, r0, #9
 800075a:	024d      	lsls	r5, r1, #9
 800075c:	0fc3      	lsrs	r3, r0, #31
 800075e:	0048      	lsls	r0, r1, #1
 8000760:	0a64      	lsrs	r4, r4, #9
 8000762:	0e12      	lsrs	r2, r2, #24
 8000764:	0a6d      	lsrs	r5, r5, #9
 8000766:	0e00      	lsrs	r0, r0, #24
 8000768:	0fc9      	lsrs	r1, r1, #31
 800076a:	2aff      	cmp	r2, #255	@ 0xff
 800076c:	d017      	beq.n	800079e <__lesf2+0x4a>
 800076e:	28ff      	cmp	r0, #255	@ 0xff
 8000770:	d00a      	beq.n	8000788 <__lesf2+0x34>
 8000772:	2a00      	cmp	r2, #0
 8000774:	d11b      	bne.n	80007ae <__lesf2+0x5a>
 8000776:	2800      	cmp	r0, #0
 8000778:	d10a      	bne.n	8000790 <__lesf2+0x3c>
 800077a:	2d00      	cmp	r5, #0
 800077c:	d01d      	beq.n	80007ba <__lesf2+0x66>
 800077e:	2c00      	cmp	r4, #0
 8000780:	d12d      	bne.n	80007de <__lesf2+0x8a>
 8000782:	0048      	lsls	r0, r1, #1
 8000784:	3801      	subs	r0, #1
 8000786:	e011      	b.n	80007ac <__lesf2+0x58>
 8000788:	2d00      	cmp	r5, #0
 800078a:	d10e      	bne.n	80007aa <__lesf2+0x56>
 800078c:	2a00      	cmp	r2, #0
 800078e:	d101      	bne.n	8000794 <__lesf2+0x40>
 8000790:	2c00      	cmp	r4, #0
 8000792:	d0f6      	beq.n	8000782 <__lesf2+0x2e>
 8000794:	428b      	cmp	r3, r1
 8000796:	d10c      	bne.n	80007b2 <__lesf2+0x5e>
 8000798:	0058      	lsls	r0, r3, #1
 800079a:	3801      	subs	r0, #1
 800079c:	e006      	b.n	80007ac <__lesf2+0x58>
 800079e:	2c00      	cmp	r4, #0
 80007a0:	d103      	bne.n	80007aa <__lesf2+0x56>
 80007a2:	28ff      	cmp	r0, #255	@ 0xff
 80007a4:	d105      	bne.n	80007b2 <__lesf2+0x5e>
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d015      	beq.n	80007d6 <__lesf2+0x82>
 80007aa:	2002      	movs	r0, #2
 80007ac:	bd30      	pop	{r4, r5, pc}
 80007ae:	2800      	cmp	r0, #0
 80007b0:	d106      	bne.n	80007c0 <__lesf2+0x6c>
 80007b2:	2001      	movs	r0, #1
 80007b4:	425b      	negs	r3, r3
 80007b6:	4318      	orrs	r0, r3
 80007b8:	e7f8      	b.n	80007ac <__lesf2+0x58>
 80007ba:	2c00      	cmp	r4, #0
 80007bc:	d0f6      	beq.n	80007ac <__lesf2+0x58>
 80007be:	e7f8      	b.n	80007b2 <__lesf2+0x5e>
 80007c0:	428b      	cmp	r3, r1
 80007c2:	d1f6      	bne.n	80007b2 <__lesf2+0x5e>
 80007c4:	4282      	cmp	r2, r0
 80007c6:	dcf4      	bgt.n	80007b2 <__lesf2+0x5e>
 80007c8:	dbe6      	blt.n	8000798 <__lesf2+0x44>
 80007ca:	42ac      	cmp	r4, r5
 80007cc:	d8f1      	bhi.n	80007b2 <__lesf2+0x5e>
 80007ce:	2000      	movs	r0, #0
 80007d0:	42ac      	cmp	r4, r5
 80007d2:	d2eb      	bcs.n	80007ac <__lesf2+0x58>
 80007d4:	e7e0      	b.n	8000798 <__lesf2+0x44>
 80007d6:	2000      	movs	r0, #0
 80007d8:	428b      	cmp	r3, r1
 80007da:	d1ea      	bne.n	80007b2 <__lesf2+0x5e>
 80007dc:	e7e6      	b.n	80007ac <__lesf2+0x58>
 80007de:	428b      	cmp	r3, r1
 80007e0:	d1e7      	bne.n	80007b2 <__lesf2+0x5e>
 80007e2:	e7f2      	b.n	80007ca <__lesf2+0x76>

080007e4 <__aeabi_fmul>:
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	464f      	mov	r7, r9
 80007e8:	4646      	mov	r6, r8
 80007ea:	46d6      	mov	lr, sl
 80007ec:	0044      	lsls	r4, r0, #1
 80007ee:	b5c0      	push	{r6, r7, lr}
 80007f0:	0246      	lsls	r6, r0, #9
 80007f2:	1c0f      	adds	r7, r1, #0
 80007f4:	0a76      	lsrs	r6, r6, #9
 80007f6:	0e24      	lsrs	r4, r4, #24
 80007f8:	0fc5      	lsrs	r5, r0, #31
 80007fa:	2c00      	cmp	r4, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fmul+0x1c>
 80007fe:	e0da      	b.n	80009b6 <__aeabi_fmul+0x1d2>
 8000800:	2cff      	cmp	r4, #255	@ 0xff
 8000802:	d074      	beq.n	80008ee <__aeabi_fmul+0x10a>
 8000804:	2380      	movs	r3, #128	@ 0x80
 8000806:	00f6      	lsls	r6, r6, #3
 8000808:	04db      	lsls	r3, r3, #19
 800080a:	431e      	orrs	r6, r3
 800080c:	2300      	movs	r3, #0
 800080e:	4699      	mov	r9, r3
 8000810:	469a      	mov	sl, r3
 8000812:	3c7f      	subs	r4, #127	@ 0x7f
 8000814:	027b      	lsls	r3, r7, #9
 8000816:	0a5b      	lsrs	r3, r3, #9
 8000818:	4698      	mov	r8, r3
 800081a:	007b      	lsls	r3, r7, #1
 800081c:	0e1b      	lsrs	r3, r3, #24
 800081e:	0fff      	lsrs	r7, r7, #31
 8000820:	2b00      	cmp	r3, #0
 8000822:	d074      	beq.n	800090e <__aeabi_fmul+0x12a>
 8000824:	2bff      	cmp	r3, #255	@ 0xff
 8000826:	d100      	bne.n	800082a <__aeabi_fmul+0x46>
 8000828:	e08e      	b.n	8000948 <__aeabi_fmul+0x164>
 800082a:	4642      	mov	r2, r8
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	00d2      	lsls	r2, r2, #3
 8000830:	04c9      	lsls	r1, r1, #19
 8000832:	4311      	orrs	r1, r2
 8000834:	3b7f      	subs	r3, #127	@ 0x7f
 8000836:	002a      	movs	r2, r5
 8000838:	18e4      	adds	r4, r4, r3
 800083a:	464b      	mov	r3, r9
 800083c:	407a      	eors	r2, r7
 800083e:	4688      	mov	r8, r1
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	2b0a      	cmp	r3, #10
 8000844:	dc75      	bgt.n	8000932 <__aeabi_fmul+0x14e>
 8000846:	464b      	mov	r3, r9
 8000848:	2000      	movs	r0, #0
 800084a:	2b02      	cmp	r3, #2
 800084c:	dd0f      	ble.n	800086e <__aeabi_fmul+0x8a>
 800084e:	4649      	mov	r1, r9
 8000850:	2301      	movs	r3, #1
 8000852:	408b      	lsls	r3, r1
 8000854:	21a6      	movs	r1, #166	@ 0xa6
 8000856:	00c9      	lsls	r1, r1, #3
 8000858:	420b      	tst	r3, r1
 800085a:	d169      	bne.n	8000930 <__aeabi_fmul+0x14c>
 800085c:	2190      	movs	r1, #144	@ 0x90
 800085e:	0089      	lsls	r1, r1, #2
 8000860:	420b      	tst	r3, r1
 8000862:	d000      	beq.n	8000866 <__aeabi_fmul+0x82>
 8000864:	e100      	b.n	8000a68 <__aeabi_fmul+0x284>
 8000866:	2188      	movs	r1, #136	@ 0x88
 8000868:	4219      	tst	r1, r3
 800086a:	d000      	beq.n	800086e <__aeabi_fmul+0x8a>
 800086c:	e0f5      	b.n	8000a5a <__aeabi_fmul+0x276>
 800086e:	4641      	mov	r1, r8
 8000870:	0409      	lsls	r1, r1, #16
 8000872:	0c09      	lsrs	r1, r1, #16
 8000874:	4643      	mov	r3, r8
 8000876:	0008      	movs	r0, r1
 8000878:	0c35      	lsrs	r5, r6, #16
 800087a:	0436      	lsls	r6, r6, #16
 800087c:	0c1b      	lsrs	r3, r3, #16
 800087e:	0c36      	lsrs	r6, r6, #16
 8000880:	4370      	muls	r0, r6
 8000882:	4369      	muls	r1, r5
 8000884:	435e      	muls	r6, r3
 8000886:	435d      	muls	r5, r3
 8000888:	1876      	adds	r6, r6, r1
 800088a:	0c03      	lsrs	r3, r0, #16
 800088c:	199b      	adds	r3, r3, r6
 800088e:	4299      	cmp	r1, r3
 8000890:	d903      	bls.n	800089a <__aeabi_fmul+0xb6>
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	0249      	lsls	r1, r1, #9
 8000896:	468c      	mov	ip, r1
 8000898:	4465      	add	r5, ip
 800089a:	0400      	lsls	r0, r0, #16
 800089c:	0419      	lsls	r1, r3, #16
 800089e:	0c00      	lsrs	r0, r0, #16
 80008a0:	1809      	adds	r1, r1, r0
 80008a2:	018e      	lsls	r6, r1, #6
 80008a4:	1e70      	subs	r0, r6, #1
 80008a6:	4186      	sbcs	r6, r0
 80008a8:	0c1b      	lsrs	r3, r3, #16
 80008aa:	0e89      	lsrs	r1, r1, #26
 80008ac:	195b      	adds	r3, r3, r5
 80008ae:	430e      	orrs	r6, r1
 80008b0:	019b      	lsls	r3, r3, #6
 80008b2:	431e      	orrs	r6, r3
 80008b4:	011b      	lsls	r3, r3, #4
 80008b6:	d46c      	bmi.n	8000992 <__aeabi_fmul+0x1ae>
 80008b8:	0023      	movs	r3, r4
 80008ba:	337f      	adds	r3, #127	@ 0x7f
 80008bc:	2b00      	cmp	r3, #0
 80008be:	dc00      	bgt.n	80008c2 <__aeabi_fmul+0xde>
 80008c0:	e0b1      	b.n	8000a26 <__aeabi_fmul+0x242>
 80008c2:	0015      	movs	r5, r2
 80008c4:	0771      	lsls	r1, r6, #29
 80008c6:	d00b      	beq.n	80008e0 <__aeabi_fmul+0xfc>
 80008c8:	200f      	movs	r0, #15
 80008ca:	0021      	movs	r1, r4
 80008cc:	4030      	ands	r0, r6
 80008ce:	2804      	cmp	r0, #4
 80008d0:	d006      	beq.n	80008e0 <__aeabi_fmul+0xfc>
 80008d2:	3604      	adds	r6, #4
 80008d4:	0132      	lsls	r2, r6, #4
 80008d6:	d503      	bpl.n	80008e0 <__aeabi_fmul+0xfc>
 80008d8:	4b6e      	ldr	r3, [pc, #440]	@ (8000a94 <__aeabi_fmul+0x2b0>)
 80008da:	401e      	ands	r6, r3
 80008dc:	000b      	movs	r3, r1
 80008de:	3380      	adds	r3, #128	@ 0x80
 80008e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80008e2:	dd00      	ble.n	80008e6 <__aeabi_fmul+0x102>
 80008e4:	e0bd      	b.n	8000a62 <__aeabi_fmul+0x27e>
 80008e6:	01b2      	lsls	r2, r6, #6
 80008e8:	0a52      	lsrs	r2, r2, #9
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	e048      	b.n	8000980 <__aeabi_fmul+0x19c>
 80008ee:	2e00      	cmp	r6, #0
 80008f0:	d000      	beq.n	80008f4 <__aeabi_fmul+0x110>
 80008f2:	e092      	b.n	8000a1a <__aeabi_fmul+0x236>
 80008f4:	2308      	movs	r3, #8
 80008f6:	4699      	mov	r9, r3
 80008f8:	3b06      	subs	r3, #6
 80008fa:	469a      	mov	sl, r3
 80008fc:	027b      	lsls	r3, r7, #9
 80008fe:	0a5b      	lsrs	r3, r3, #9
 8000900:	4698      	mov	r8, r3
 8000902:	007b      	lsls	r3, r7, #1
 8000904:	24ff      	movs	r4, #255	@ 0xff
 8000906:	0e1b      	lsrs	r3, r3, #24
 8000908:	0fff      	lsrs	r7, r7, #31
 800090a:	2b00      	cmp	r3, #0
 800090c:	d18a      	bne.n	8000824 <__aeabi_fmul+0x40>
 800090e:	4642      	mov	r2, r8
 8000910:	2a00      	cmp	r2, #0
 8000912:	d164      	bne.n	80009de <__aeabi_fmul+0x1fa>
 8000914:	4649      	mov	r1, r9
 8000916:	3201      	adds	r2, #1
 8000918:	4311      	orrs	r1, r2
 800091a:	4689      	mov	r9, r1
 800091c:	290a      	cmp	r1, #10
 800091e:	dc08      	bgt.n	8000932 <__aeabi_fmul+0x14e>
 8000920:	407d      	eors	r5, r7
 8000922:	2001      	movs	r0, #1
 8000924:	b2ea      	uxtb	r2, r5
 8000926:	2902      	cmp	r1, #2
 8000928:	dc91      	bgt.n	800084e <__aeabi_fmul+0x6a>
 800092a:	0015      	movs	r5, r2
 800092c:	2200      	movs	r2, #0
 800092e:	e027      	b.n	8000980 <__aeabi_fmul+0x19c>
 8000930:	0015      	movs	r5, r2
 8000932:	4653      	mov	r3, sl
 8000934:	2b02      	cmp	r3, #2
 8000936:	d100      	bne.n	800093a <__aeabi_fmul+0x156>
 8000938:	e093      	b.n	8000a62 <__aeabi_fmul+0x27e>
 800093a:	2b03      	cmp	r3, #3
 800093c:	d01a      	beq.n	8000974 <__aeabi_fmul+0x190>
 800093e:	2b01      	cmp	r3, #1
 8000940:	d12c      	bne.n	800099c <__aeabi_fmul+0x1b8>
 8000942:	2300      	movs	r3, #0
 8000944:	2200      	movs	r2, #0
 8000946:	e01b      	b.n	8000980 <__aeabi_fmul+0x19c>
 8000948:	4643      	mov	r3, r8
 800094a:	34ff      	adds	r4, #255	@ 0xff
 800094c:	2b00      	cmp	r3, #0
 800094e:	d055      	beq.n	80009fc <__aeabi_fmul+0x218>
 8000950:	2103      	movs	r1, #3
 8000952:	464b      	mov	r3, r9
 8000954:	430b      	orrs	r3, r1
 8000956:	0019      	movs	r1, r3
 8000958:	2b0a      	cmp	r3, #10
 800095a:	dc00      	bgt.n	800095e <__aeabi_fmul+0x17a>
 800095c:	e092      	b.n	8000a84 <__aeabi_fmul+0x2a0>
 800095e:	2b0f      	cmp	r3, #15
 8000960:	d000      	beq.n	8000964 <__aeabi_fmul+0x180>
 8000962:	e08c      	b.n	8000a7e <__aeabi_fmul+0x29a>
 8000964:	2280      	movs	r2, #128	@ 0x80
 8000966:	03d2      	lsls	r2, r2, #15
 8000968:	4216      	tst	r6, r2
 800096a:	d003      	beq.n	8000974 <__aeabi_fmul+0x190>
 800096c:	4643      	mov	r3, r8
 800096e:	4213      	tst	r3, r2
 8000970:	d100      	bne.n	8000974 <__aeabi_fmul+0x190>
 8000972:	e07d      	b.n	8000a70 <__aeabi_fmul+0x28c>
 8000974:	2280      	movs	r2, #128	@ 0x80
 8000976:	03d2      	lsls	r2, r2, #15
 8000978:	4332      	orrs	r2, r6
 800097a:	0252      	lsls	r2, r2, #9
 800097c:	0a52      	lsrs	r2, r2, #9
 800097e:	23ff      	movs	r3, #255	@ 0xff
 8000980:	05d8      	lsls	r0, r3, #23
 8000982:	07ed      	lsls	r5, r5, #31
 8000984:	4310      	orrs	r0, r2
 8000986:	4328      	orrs	r0, r5
 8000988:	bce0      	pop	{r5, r6, r7}
 800098a:	46ba      	mov	sl, r7
 800098c:	46b1      	mov	r9, r6
 800098e:	46a8      	mov	r8, r5
 8000990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000992:	2301      	movs	r3, #1
 8000994:	0015      	movs	r5, r2
 8000996:	0871      	lsrs	r1, r6, #1
 8000998:	401e      	ands	r6, r3
 800099a:	430e      	orrs	r6, r1
 800099c:	0023      	movs	r3, r4
 800099e:	3380      	adds	r3, #128	@ 0x80
 80009a0:	1c61      	adds	r1, r4, #1
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	dd41      	ble.n	8000a2a <__aeabi_fmul+0x246>
 80009a6:	0772      	lsls	r2, r6, #29
 80009a8:	d094      	beq.n	80008d4 <__aeabi_fmul+0xf0>
 80009aa:	220f      	movs	r2, #15
 80009ac:	4032      	ands	r2, r6
 80009ae:	2a04      	cmp	r2, #4
 80009b0:	d000      	beq.n	80009b4 <__aeabi_fmul+0x1d0>
 80009b2:	e78e      	b.n	80008d2 <__aeabi_fmul+0xee>
 80009b4:	e78e      	b.n	80008d4 <__aeabi_fmul+0xf0>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d105      	bne.n	80009c6 <__aeabi_fmul+0x1e2>
 80009ba:	2304      	movs	r3, #4
 80009bc:	4699      	mov	r9, r3
 80009be:	3b03      	subs	r3, #3
 80009c0:	2400      	movs	r4, #0
 80009c2:	469a      	mov	sl, r3
 80009c4:	e726      	b.n	8000814 <__aeabi_fmul+0x30>
 80009c6:	0030      	movs	r0, r6
 80009c8:	f001 fa90 	bl	8001eec <__clzsi2>
 80009cc:	2476      	movs	r4, #118	@ 0x76
 80009ce:	1f43      	subs	r3, r0, #5
 80009d0:	409e      	lsls	r6, r3
 80009d2:	2300      	movs	r3, #0
 80009d4:	4264      	negs	r4, r4
 80009d6:	4699      	mov	r9, r3
 80009d8:	469a      	mov	sl, r3
 80009da:	1a24      	subs	r4, r4, r0
 80009dc:	e71a      	b.n	8000814 <__aeabi_fmul+0x30>
 80009de:	4640      	mov	r0, r8
 80009e0:	f001 fa84 	bl	8001eec <__clzsi2>
 80009e4:	464b      	mov	r3, r9
 80009e6:	1a24      	subs	r4, r4, r0
 80009e8:	3c76      	subs	r4, #118	@ 0x76
 80009ea:	2b0a      	cmp	r3, #10
 80009ec:	dca1      	bgt.n	8000932 <__aeabi_fmul+0x14e>
 80009ee:	4643      	mov	r3, r8
 80009f0:	3805      	subs	r0, #5
 80009f2:	4083      	lsls	r3, r0
 80009f4:	407d      	eors	r5, r7
 80009f6:	4698      	mov	r8, r3
 80009f8:	b2ea      	uxtb	r2, r5
 80009fa:	e724      	b.n	8000846 <__aeabi_fmul+0x62>
 80009fc:	464a      	mov	r2, r9
 80009fe:	3302      	adds	r3, #2
 8000a00:	4313      	orrs	r3, r2
 8000a02:	002a      	movs	r2, r5
 8000a04:	407a      	eors	r2, r7
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	2b0a      	cmp	r3, #10
 8000a0a:	dc92      	bgt.n	8000932 <__aeabi_fmul+0x14e>
 8000a0c:	4649      	mov	r1, r9
 8000a0e:	0015      	movs	r5, r2
 8000a10:	2900      	cmp	r1, #0
 8000a12:	d026      	beq.n	8000a62 <__aeabi_fmul+0x27e>
 8000a14:	4699      	mov	r9, r3
 8000a16:	2002      	movs	r0, #2
 8000a18:	e719      	b.n	800084e <__aeabi_fmul+0x6a>
 8000a1a:	230c      	movs	r3, #12
 8000a1c:	4699      	mov	r9, r3
 8000a1e:	3b09      	subs	r3, #9
 8000a20:	24ff      	movs	r4, #255	@ 0xff
 8000a22:	469a      	mov	sl, r3
 8000a24:	e6f6      	b.n	8000814 <__aeabi_fmul+0x30>
 8000a26:	0015      	movs	r5, r2
 8000a28:	0021      	movs	r1, r4
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b1b      	cmp	r3, #27
 8000a30:	dd00      	ble.n	8000a34 <__aeabi_fmul+0x250>
 8000a32:	e786      	b.n	8000942 <__aeabi_fmul+0x15e>
 8000a34:	319e      	adds	r1, #158	@ 0x9e
 8000a36:	0032      	movs	r2, r6
 8000a38:	408e      	lsls	r6, r1
 8000a3a:	40da      	lsrs	r2, r3
 8000a3c:	1e73      	subs	r3, r6, #1
 8000a3e:	419e      	sbcs	r6, r3
 8000a40:	4332      	orrs	r2, r6
 8000a42:	0753      	lsls	r3, r2, #29
 8000a44:	d004      	beq.n	8000a50 <__aeabi_fmul+0x26c>
 8000a46:	230f      	movs	r3, #15
 8000a48:	4013      	ands	r3, r2
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_fmul+0x26c>
 8000a4e:	3204      	adds	r2, #4
 8000a50:	0153      	lsls	r3, r2, #5
 8000a52:	d510      	bpl.n	8000a76 <__aeabi_fmul+0x292>
 8000a54:	2301      	movs	r3, #1
 8000a56:	2200      	movs	r2, #0
 8000a58:	e792      	b.n	8000980 <__aeabi_fmul+0x19c>
 8000a5a:	003d      	movs	r5, r7
 8000a5c:	4646      	mov	r6, r8
 8000a5e:	4682      	mov	sl, r0
 8000a60:	e767      	b.n	8000932 <__aeabi_fmul+0x14e>
 8000a62:	23ff      	movs	r3, #255	@ 0xff
 8000a64:	2200      	movs	r2, #0
 8000a66:	e78b      	b.n	8000980 <__aeabi_fmul+0x19c>
 8000a68:	2280      	movs	r2, #128	@ 0x80
 8000a6a:	2500      	movs	r5, #0
 8000a6c:	03d2      	lsls	r2, r2, #15
 8000a6e:	e786      	b.n	800097e <__aeabi_fmul+0x19a>
 8000a70:	003d      	movs	r5, r7
 8000a72:	431a      	orrs	r2, r3
 8000a74:	e783      	b.n	800097e <__aeabi_fmul+0x19a>
 8000a76:	0192      	lsls	r2, r2, #6
 8000a78:	2300      	movs	r3, #0
 8000a7a:	0a52      	lsrs	r2, r2, #9
 8000a7c:	e780      	b.n	8000980 <__aeabi_fmul+0x19c>
 8000a7e:	003d      	movs	r5, r7
 8000a80:	4646      	mov	r6, r8
 8000a82:	e777      	b.n	8000974 <__aeabi_fmul+0x190>
 8000a84:	002a      	movs	r2, r5
 8000a86:	2301      	movs	r3, #1
 8000a88:	407a      	eors	r2, r7
 8000a8a:	408b      	lsls	r3, r1
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	e6e9      	b.n	8000866 <__aeabi_fmul+0x82>
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	f7ffffff 	.word	0xf7ffffff

08000a98 <__aeabi_fsub>:
 8000a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9a:	4647      	mov	r7, r8
 8000a9c:	46ce      	mov	lr, r9
 8000a9e:	0243      	lsls	r3, r0, #9
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	0a5f      	lsrs	r7, r3, #9
 8000aa4:	099b      	lsrs	r3, r3, #6
 8000aa6:	0045      	lsls	r5, r0, #1
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	469c      	mov	ip, r3
 8000aac:	024b      	lsls	r3, r1, #9
 8000aae:	0fc4      	lsrs	r4, r0, #31
 8000ab0:	0fce      	lsrs	r6, r1, #31
 8000ab2:	0e2d      	lsrs	r5, r5, #24
 8000ab4:	0a58      	lsrs	r0, r3, #9
 8000ab6:	0e12      	lsrs	r2, r2, #24
 8000ab8:	0999      	lsrs	r1, r3, #6
 8000aba:	2aff      	cmp	r2, #255	@ 0xff
 8000abc:	d06b      	beq.n	8000b96 <__aeabi_fsub+0xfe>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	405e      	eors	r6, r3
 8000ac2:	1aab      	subs	r3, r5, r2
 8000ac4:	42b4      	cmp	r4, r6
 8000ac6:	d04b      	beq.n	8000b60 <__aeabi_fsub+0xc8>
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	dc00      	bgt.n	8000ace <__aeabi_fsub+0x36>
 8000acc:	e0ff      	b.n	8000cce <__aeabi_fsub+0x236>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_fsub+0x3c>
 8000ad2:	e088      	b.n	8000be6 <__aeabi_fsub+0x14e>
 8000ad4:	2dff      	cmp	r5, #255	@ 0xff
 8000ad6:	d100      	bne.n	8000ada <__aeabi_fsub+0x42>
 8000ad8:	e0ef      	b.n	8000cba <__aeabi_fsub+0x222>
 8000ada:	2280      	movs	r2, #128	@ 0x80
 8000adc:	04d2      	lsls	r2, r2, #19
 8000ade:	4311      	orrs	r1, r2
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	2b1b      	cmp	r3, #27
 8000ae4:	dc08      	bgt.n	8000af8 <__aeabi_fsub+0x60>
 8000ae6:	0008      	movs	r0, r1
 8000ae8:	2220      	movs	r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	4099      	lsls	r1, r3
 8000af0:	000b      	movs	r3, r1
 8000af2:	1e5a      	subs	r2, r3, #1
 8000af4:	4193      	sbcs	r3, r2
 8000af6:	4318      	orrs	r0, r3
 8000af8:	4663      	mov	r3, ip
 8000afa:	1a1b      	subs	r3, r3, r0
 8000afc:	469c      	mov	ip, r3
 8000afe:	4663      	mov	r3, ip
 8000b00:	015b      	lsls	r3, r3, #5
 8000b02:	d400      	bmi.n	8000b06 <__aeabi_fsub+0x6e>
 8000b04:	e0cd      	b.n	8000ca2 <__aeabi_fsub+0x20a>
 8000b06:	4663      	mov	r3, ip
 8000b08:	019f      	lsls	r7, r3, #6
 8000b0a:	09bf      	lsrs	r7, r7, #6
 8000b0c:	0038      	movs	r0, r7
 8000b0e:	f001 f9ed 	bl	8001eec <__clzsi2>
 8000b12:	003b      	movs	r3, r7
 8000b14:	3805      	subs	r0, #5
 8000b16:	4083      	lsls	r3, r0
 8000b18:	4285      	cmp	r5, r0
 8000b1a:	dc00      	bgt.n	8000b1e <__aeabi_fsub+0x86>
 8000b1c:	e0a2      	b.n	8000c64 <__aeabi_fsub+0x1cc>
 8000b1e:	4ab7      	ldr	r2, [pc, #732]	@ (8000dfc <__aeabi_fsub+0x364>)
 8000b20:	1a2d      	subs	r5, r5, r0
 8000b22:	401a      	ands	r2, r3
 8000b24:	4694      	mov	ip, r2
 8000b26:	075a      	lsls	r2, r3, #29
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fsub+0x94>
 8000b2a:	e0c3      	b.n	8000cb4 <__aeabi_fsub+0x21c>
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	4013      	ands	r3, r2
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d100      	bne.n	8000b36 <__aeabi_fsub+0x9e>
 8000b34:	e0be      	b.n	8000cb4 <__aeabi_fsub+0x21c>
 8000b36:	2304      	movs	r3, #4
 8000b38:	4698      	mov	r8, r3
 8000b3a:	44c4      	add	ip, r8
 8000b3c:	4663      	mov	r3, ip
 8000b3e:	015b      	lsls	r3, r3, #5
 8000b40:	d400      	bmi.n	8000b44 <__aeabi_fsub+0xac>
 8000b42:	e0b7      	b.n	8000cb4 <__aeabi_fsub+0x21c>
 8000b44:	1c68      	adds	r0, r5, #1
 8000b46:	2dfe      	cmp	r5, #254	@ 0xfe
 8000b48:	d000      	beq.n	8000b4c <__aeabi_fsub+0xb4>
 8000b4a:	e0a5      	b.n	8000c98 <__aeabi_fsub+0x200>
 8000b4c:	20ff      	movs	r0, #255	@ 0xff
 8000b4e:	2200      	movs	r2, #0
 8000b50:	05c0      	lsls	r0, r0, #23
 8000b52:	4310      	orrs	r0, r2
 8000b54:	07e4      	lsls	r4, r4, #31
 8000b56:	4320      	orrs	r0, r4
 8000b58:	bcc0      	pop	{r6, r7}
 8000b5a:	46b9      	mov	r9, r7
 8000b5c:	46b0      	mov	r8, r6
 8000b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	dc00      	bgt.n	8000b66 <__aeabi_fsub+0xce>
 8000b64:	e1eb      	b.n	8000f3e <__aeabi_fsub+0x4a6>
 8000b66:	2a00      	cmp	r2, #0
 8000b68:	d046      	beq.n	8000bf8 <__aeabi_fsub+0x160>
 8000b6a:	2dff      	cmp	r5, #255	@ 0xff
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_fsub+0xd8>
 8000b6e:	e0a4      	b.n	8000cba <__aeabi_fsub+0x222>
 8000b70:	2280      	movs	r2, #128	@ 0x80
 8000b72:	04d2      	lsls	r2, r2, #19
 8000b74:	4311      	orrs	r1, r2
 8000b76:	2b1b      	cmp	r3, #27
 8000b78:	dc00      	bgt.n	8000b7c <__aeabi_fsub+0xe4>
 8000b7a:	e0fb      	b.n	8000d74 <__aeabi_fsub+0x2dc>
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	4698      	mov	r8, r3
 8000b80:	002b      	movs	r3, r5
 8000b82:	44c4      	add	ip, r8
 8000b84:	4662      	mov	r2, ip
 8000b86:	08d7      	lsrs	r7, r2, #3
 8000b88:	2bff      	cmp	r3, #255	@ 0xff
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fsub+0xf6>
 8000b8c:	e095      	b.n	8000cba <__aeabi_fsub+0x222>
 8000b8e:	027a      	lsls	r2, r7, #9
 8000b90:	0a52      	lsrs	r2, r2, #9
 8000b92:	b2d8      	uxtb	r0, r3
 8000b94:	e7dc      	b.n	8000b50 <__aeabi_fsub+0xb8>
 8000b96:	002b      	movs	r3, r5
 8000b98:	3bff      	subs	r3, #255	@ 0xff
 8000b9a:	4699      	mov	r9, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d118      	bne.n	8000bd2 <__aeabi_fsub+0x13a>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	405e      	eors	r6, r3
 8000ba4:	42b4      	cmp	r4, r6
 8000ba6:	d100      	bne.n	8000baa <__aeabi_fsub+0x112>
 8000ba8:	e0ca      	b.n	8000d40 <__aeabi_fsub+0x2a8>
 8000baa:	464b      	mov	r3, r9
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d02d      	beq.n	8000c0c <__aeabi_fsub+0x174>
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d000      	beq.n	8000bb6 <__aeabi_fsub+0x11e>
 8000bb4:	e13c      	b.n	8000e30 <__aeabi_fsub+0x398>
 8000bb6:	23ff      	movs	r3, #255	@ 0xff
 8000bb8:	4664      	mov	r4, ip
 8000bba:	2c00      	cmp	r4, #0
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_fsub+0x128>
 8000bbe:	e15f      	b.n	8000e80 <__aeabi_fsub+0x3e8>
 8000bc0:	1e5d      	subs	r5, r3, #1
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_fsub+0x130>
 8000bc6:	e174      	b.n	8000eb2 <__aeabi_fsub+0x41a>
 8000bc8:	0034      	movs	r4, r6
 8000bca:	2bff      	cmp	r3, #255	@ 0xff
 8000bcc:	d074      	beq.n	8000cb8 <__aeabi_fsub+0x220>
 8000bce:	002b      	movs	r3, r5
 8000bd0:	e103      	b.n	8000dda <__aeabi_fsub+0x342>
 8000bd2:	42b4      	cmp	r4, r6
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_fsub+0x140>
 8000bd6:	e09c      	b.n	8000d12 <__aeabi_fsub+0x27a>
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d017      	beq.n	8000c0c <__aeabi_fsub+0x174>
 8000bdc:	2d00      	cmp	r5, #0
 8000bde:	d0ea      	beq.n	8000bb6 <__aeabi_fsub+0x11e>
 8000be0:	0007      	movs	r7, r0
 8000be2:	0034      	movs	r4, r6
 8000be4:	e06c      	b.n	8000cc0 <__aeabi_fsub+0x228>
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d0cc      	beq.n	8000b84 <__aeabi_fsub+0xec>
 8000bea:	1e5a      	subs	r2, r3, #1
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d02b      	beq.n	8000c48 <__aeabi_fsub+0x1b0>
 8000bf0:	2bff      	cmp	r3, #255	@ 0xff
 8000bf2:	d062      	beq.n	8000cba <__aeabi_fsub+0x222>
 8000bf4:	0013      	movs	r3, r2
 8000bf6:	e773      	b.n	8000ae0 <__aeabi_fsub+0x48>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	d0c3      	beq.n	8000b84 <__aeabi_fsub+0xec>
 8000bfc:	1e5a      	subs	r2, r3, #1
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fsub+0x16c>
 8000c02:	e11e      	b.n	8000e42 <__aeabi_fsub+0x3aa>
 8000c04:	2bff      	cmp	r3, #255	@ 0xff
 8000c06:	d058      	beq.n	8000cba <__aeabi_fsub+0x222>
 8000c08:	0013      	movs	r3, r2
 8000c0a:	e7b4      	b.n	8000b76 <__aeabi_fsub+0xde>
 8000c0c:	22fe      	movs	r2, #254	@ 0xfe
 8000c0e:	1c6b      	adds	r3, r5, #1
 8000c10:	421a      	tst	r2, r3
 8000c12:	d10d      	bne.n	8000c30 <__aeabi_fsub+0x198>
 8000c14:	2d00      	cmp	r5, #0
 8000c16:	d060      	beq.n	8000cda <__aeabi_fsub+0x242>
 8000c18:	4663      	mov	r3, ip
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_fsub+0x188>
 8000c1e:	e120      	b.n	8000e62 <__aeabi_fsub+0x3ca>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	d000      	beq.n	8000c26 <__aeabi_fsub+0x18e>
 8000c24:	e128      	b.n	8000e78 <__aeabi_fsub+0x3e0>
 8000c26:	2280      	movs	r2, #128	@ 0x80
 8000c28:	2400      	movs	r4, #0
 8000c2a:	20ff      	movs	r0, #255	@ 0xff
 8000c2c:	03d2      	lsls	r2, r2, #15
 8000c2e:	e78f      	b.n	8000b50 <__aeabi_fsub+0xb8>
 8000c30:	4663      	mov	r3, ip
 8000c32:	1a5f      	subs	r7, r3, r1
 8000c34:	017b      	lsls	r3, r7, #5
 8000c36:	d500      	bpl.n	8000c3a <__aeabi_fsub+0x1a2>
 8000c38:	e0fe      	b.n	8000e38 <__aeabi_fsub+0x3a0>
 8000c3a:	2f00      	cmp	r7, #0
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_fsub+0x1a8>
 8000c3e:	e765      	b.n	8000b0c <__aeabi_fsub+0x74>
 8000c40:	2400      	movs	r4, #0
 8000c42:	2000      	movs	r0, #0
 8000c44:	2200      	movs	r2, #0
 8000c46:	e783      	b.n	8000b50 <__aeabi_fsub+0xb8>
 8000c48:	4663      	mov	r3, ip
 8000c4a:	1a59      	subs	r1, r3, r1
 8000c4c:	014b      	lsls	r3, r1, #5
 8000c4e:	d400      	bmi.n	8000c52 <__aeabi_fsub+0x1ba>
 8000c50:	e119      	b.n	8000e86 <__aeabi_fsub+0x3ee>
 8000c52:	018f      	lsls	r7, r1, #6
 8000c54:	09bf      	lsrs	r7, r7, #6
 8000c56:	0038      	movs	r0, r7
 8000c58:	f001 f948 	bl	8001eec <__clzsi2>
 8000c5c:	003b      	movs	r3, r7
 8000c5e:	3805      	subs	r0, #5
 8000c60:	4083      	lsls	r3, r0
 8000c62:	2501      	movs	r5, #1
 8000c64:	2220      	movs	r2, #32
 8000c66:	1b40      	subs	r0, r0, r5
 8000c68:	3001      	adds	r0, #1
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	4093      	lsls	r3, r2
 8000c70:	40c1      	lsrs	r1, r0
 8000c72:	1e5a      	subs	r2, r3, #1
 8000c74:	4193      	sbcs	r3, r2
 8000c76:	4319      	orrs	r1, r3
 8000c78:	468c      	mov	ip, r1
 8000c7a:	1e0b      	subs	r3, r1, #0
 8000c7c:	d0e1      	beq.n	8000c42 <__aeabi_fsub+0x1aa>
 8000c7e:	075b      	lsls	r3, r3, #29
 8000c80:	d100      	bne.n	8000c84 <__aeabi_fsub+0x1ec>
 8000c82:	e152      	b.n	8000f2a <__aeabi_fsub+0x492>
 8000c84:	230f      	movs	r3, #15
 8000c86:	2500      	movs	r5, #0
 8000c88:	400b      	ands	r3, r1
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	d000      	beq.n	8000c90 <__aeabi_fsub+0x1f8>
 8000c8e:	e752      	b.n	8000b36 <__aeabi_fsub+0x9e>
 8000c90:	2001      	movs	r0, #1
 8000c92:	014a      	lsls	r2, r1, #5
 8000c94:	d400      	bmi.n	8000c98 <__aeabi_fsub+0x200>
 8000c96:	e092      	b.n	8000dbe <__aeabi_fsub+0x326>
 8000c98:	b2c0      	uxtb	r0, r0
 8000c9a:	4663      	mov	r3, ip
 8000c9c:	019a      	lsls	r2, r3, #6
 8000c9e:	0a52      	lsrs	r2, r2, #9
 8000ca0:	e756      	b.n	8000b50 <__aeabi_fsub+0xb8>
 8000ca2:	4663      	mov	r3, ip
 8000ca4:	075b      	lsls	r3, r3, #29
 8000ca6:	d005      	beq.n	8000cb4 <__aeabi_fsub+0x21c>
 8000ca8:	230f      	movs	r3, #15
 8000caa:	4662      	mov	r2, ip
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	d000      	beq.n	8000cb4 <__aeabi_fsub+0x21c>
 8000cb2:	e740      	b.n	8000b36 <__aeabi_fsub+0x9e>
 8000cb4:	002b      	movs	r3, r5
 8000cb6:	e765      	b.n	8000b84 <__aeabi_fsub+0xec>
 8000cb8:	0007      	movs	r7, r0
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_fsub+0x228>
 8000cbe:	e745      	b.n	8000b4c <__aeabi_fsub+0xb4>
 8000cc0:	2280      	movs	r2, #128	@ 0x80
 8000cc2:	03d2      	lsls	r2, r2, #15
 8000cc4:	433a      	orrs	r2, r7
 8000cc6:	0252      	lsls	r2, r2, #9
 8000cc8:	20ff      	movs	r0, #255	@ 0xff
 8000cca:	0a52      	lsrs	r2, r2, #9
 8000ccc:	e740      	b.n	8000b50 <__aeabi_fsub+0xb8>
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d179      	bne.n	8000dc6 <__aeabi_fsub+0x32e>
 8000cd2:	22fe      	movs	r2, #254	@ 0xfe
 8000cd4:	1c6b      	adds	r3, r5, #1
 8000cd6:	421a      	tst	r2, r3
 8000cd8:	d1aa      	bne.n	8000c30 <__aeabi_fsub+0x198>
 8000cda:	4663      	mov	r3, ip
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fsub+0x24a>
 8000ce0:	e0f5      	b.n	8000ece <__aeabi_fsub+0x436>
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_fsub+0x250>
 8000ce6:	e0d1      	b.n	8000e8c <__aeabi_fsub+0x3f4>
 8000ce8:	1a5f      	subs	r7, r3, r1
 8000cea:	2380      	movs	r3, #128	@ 0x80
 8000cec:	04db      	lsls	r3, r3, #19
 8000cee:	421f      	tst	r7, r3
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_fsub+0x25c>
 8000cf2:	e10e      	b.n	8000f12 <__aeabi_fsub+0x47a>
 8000cf4:	4662      	mov	r2, ip
 8000cf6:	2401      	movs	r4, #1
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	4034      	ands	r4, r6
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	d100      	bne.n	8000d06 <__aeabi_fsub+0x26e>
 8000d04:	e724      	b.n	8000b50 <__aeabi_fsub+0xb8>
 8000d06:	2001      	movs	r0, #1
 8000d08:	421a      	tst	r2, r3
 8000d0a:	d1c6      	bne.n	8000c9a <__aeabi_fsub+0x202>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	08d7      	lsrs	r7, r2, #3
 8000d10:	e73d      	b.n	8000b8e <__aeabi_fsub+0xf6>
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d017      	beq.n	8000d46 <__aeabi_fsub+0x2ae>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d000      	beq.n	8000d1c <__aeabi_fsub+0x284>
 8000d1a:	e0af      	b.n	8000e7c <__aeabi_fsub+0x3e4>
 8000d1c:	23ff      	movs	r3, #255	@ 0xff
 8000d1e:	4665      	mov	r5, ip
 8000d20:	2d00      	cmp	r5, #0
 8000d22:	d100      	bne.n	8000d26 <__aeabi_fsub+0x28e>
 8000d24:	e0ad      	b.n	8000e82 <__aeabi_fsub+0x3ea>
 8000d26:	1e5e      	subs	r6, r3, #1
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_fsub+0x296>
 8000d2c:	e089      	b.n	8000e42 <__aeabi_fsub+0x3aa>
 8000d2e:	2bff      	cmp	r3, #255	@ 0xff
 8000d30:	d0c2      	beq.n	8000cb8 <__aeabi_fsub+0x220>
 8000d32:	2e1b      	cmp	r6, #27
 8000d34:	dc00      	bgt.n	8000d38 <__aeabi_fsub+0x2a0>
 8000d36:	e0ab      	b.n	8000e90 <__aeabi_fsub+0x3f8>
 8000d38:	1d4b      	adds	r3, r1, #5
 8000d3a:	469c      	mov	ip, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	e721      	b.n	8000b84 <__aeabi_fsub+0xec>
 8000d40:	464b      	mov	r3, r9
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d170      	bne.n	8000e28 <__aeabi_fsub+0x390>
 8000d46:	22fe      	movs	r2, #254	@ 0xfe
 8000d48:	1c6b      	adds	r3, r5, #1
 8000d4a:	421a      	tst	r2, r3
 8000d4c:	d15e      	bne.n	8000e0c <__aeabi_fsub+0x374>
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	d000      	beq.n	8000d54 <__aeabi_fsub+0x2bc>
 8000d52:	e0c3      	b.n	8000edc <__aeabi_fsub+0x444>
 8000d54:	4663      	mov	r3, ip
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_fsub+0x2c4>
 8000d5a:	e0d0      	b.n	8000efe <__aeabi_fsub+0x466>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_fsub+0x2ca>
 8000d60:	e094      	b.n	8000e8c <__aeabi_fsub+0x3f4>
 8000d62:	000a      	movs	r2, r1
 8000d64:	4462      	add	r2, ip
 8000d66:	0153      	lsls	r3, r2, #5
 8000d68:	d400      	bmi.n	8000d6c <__aeabi_fsub+0x2d4>
 8000d6a:	e0d8      	b.n	8000f1e <__aeabi_fsub+0x486>
 8000d6c:	0192      	lsls	r2, r2, #6
 8000d6e:	2001      	movs	r0, #1
 8000d70:	0a52      	lsrs	r2, r2, #9
 8000d72:	e6ed      	b.n	8000b50 <__aeabi_fsub+0xb8>
 8000d74:	0008      	movs	r0, r1
 8000d76:	2220      	movs	r2, #32
 8000d78:	40d8      	lsrs	r0, r3
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	4099      	lsls	r1, r3
 8000d7e:	000b      	movs	r3, r1
 8000d80:	1e5a      	subs	r2, r3, #1
 8000d82:	4193      	sbcs	r3, r2
 8000d84:	4303      	orrs	r3, r0
 8000d86:	449c      	add	ip, r3
 8000d88:	4663      	mov	r3, ip
 8000d8a:	015b      	lsls	r3, r3, #5
 8000d8c:	d589      	bpl.n	8000ca2 <__aeabi_fsub+0x20a>
 8000d8e:	3501      	adds	r5, #1
 8000d90:	2dff      	cmp	r5, #255	@ 0xff
 8000d92:	d100      	bne.n	8000d96 <__aeabi_fsub+0x2fe>
 8000d94:	e6da      	b.n	8000b4c <__aeabi_fsub+0xb4>
 8000d96:	4662      	mov	r2, ip
 8000d98:	2301      	movs	r3, #1
 8000d9a:	4919      	ldr	r1, [pc, #100]	@ (8000e00 <__aeabi_fsub+0x368>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	0852      	lsrs	r2, r2, #1
 8000da0:	400a      	ands	r2, r1
 8000da2:	431a      	orrs	r2, r3
 8000da4:	0013      	movs	r3, r2
 8000da6:	4694      	mov	ip, r2
 8000da8:	075b      	lsls	r3, r3, #29
 8000daa:	d004      	beq.n	8000db6 <__aeabi_fsub+0x31e>
 8000dac:	230f      	movs	r3, #15
 8000dae:	4013      	ands	r3, r2
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fsub+0x31e>
 8000db4:	e6bf      	b.n	8000b36 <__aeabi_fsub+0x9e>
 8000db6:	4663      	mov	r3, ip
 8000db8:	015b      	lsls	r3, r3, #5
 8000dba:	d500      	bpl.n	8000dbe <__aeabi_fsub+0x326>
 8000dbc:	e6c2      	b.n	8000b44 <__aeabi_fsub+0xac>
 8000dbe:	4663      	mov	r3, ip
 8000dc0:	08df      	lsrs	r7, r3, #3
 8000dc2:	002b      	movs	r3, r5
 8000dc4:	e6e3      	b.n	8000b8e <__aeabi_fsub+0xf6>
 8000dc6:	1b53      	subs	r3, r2, r5
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	d100      	bne.n	8000dce <__aeabi_fsub+0x336>
 8000dcc:	e6f4      	b.n	8000bb8 <__aeabi_fsub+0x120>
 8000dce:	2080      	movs	r0, #128	@ 0x80
 8000dd0:	4664      	mov	r4, ip
 8000dd2:	04c0      	lsls	r0, r0, #19
 8000dd4:	4304      	orrs	r4, r0
 8000dd6:	46a4      	mov	ip, r4
 8000dd8:	0034      	movs	r4, r6
 8000dda:	2001      	movs	r0, #1
 8000ddc:	2b1b      	cmp	r3, #27
 8000dde:	dc09      	bgt.n	8000df4 <__aeabi_fsub+0x35c>
 8000de0:	2520      	movs	r5, #32
 8000de2:	4660      	mov	r0, ip
 8000de4:	40d8      	lsrs	r0, r3
 8000de6:	1aeb      	subs	r3, r5, r3
 8000de8:	4665      	mov	r5, ip
 8000dea:	409d      	lsls	r5, r3
 8000dec:	002b      	movs	r3, r5
 8000dee:	1e5d      	subs	r5, r3, #1
 8000df0:	41ab      	sbcs	r3, r5
 8000df2:	4318      	orrs	r0, r3
 8000df4:	1a0b      	subs	r3, r1, r0
 8000df6:	469c      	mov	ip, r3
 8000df8:	0015      	movs	r5, r2
 8000dfa:	e680      	b.n	8000afe <__aeabi_fsub+0x66>
 8000dfc:	fbffffff 	.word	0xfbffffff
 8000e00:	7dffffff 	.word	0x7dffffff
 8000e04:	22fe      	movs	r2, #254	@ 0xfe
 8000e06:	1c6b      	adds	r3, r5, #1
 8000e08:	4213      	tst	r3, r2
 8000e0a:	d0a3      	beq.n	8000d54 <__aeabi_fsub+0x2bc>
 8000e0c:	2bff      	cmp	r3, #255	@ 0xff
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_fsub+0x37a>
 8000e10:	e69c      	b.n	8000b4c <__aeabi_fsub+0xb4>
 8000e12:	4461      	add	r1, ip
 8000e14:	0849      	lsrs	r1, r1, #1
 8000e16:	074a      	lsls	r2, r1, #29
 8000e18:	d049      	beq.n	8000eae <__aeabi_fsub+0x416>
 8000e1a:	220f      	movs	r2, #15
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	2a04      	cmp	r2, #4
 8000e20:	d045      	beq.n	8000eae <__aeabi_fsub+0x416>
 8000e22:	1d0a      	adds	r2, r1, #4
 8000e24:	4694      	mov	ip, r2
 8000e26:	e6ad      	b.n	8000b84 <__aeabi_fsub+0xec>
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_fsub+0x396>
 8000e2c:	e776      	b.n	8000d1c <__aeabi_fsub+0x284>
 8000e2e:	e68d      	b.n	8000b4c <__aeabi_fsub+0xb4>
 8000e30:	0034      	movs	r4, r6
 8000e32:	20ff      	movs	r0, #255	@ 0xff
 8000e34:	2200      	movs	r2, #0
 8000e36:	e68b      	b.n	8000b50 <__aeabi_fsub+0xb8>
 8000e38:	4663      	mov	r3, ip
 8000e3a:	2401      	movs	r4, #1
 8000e3c:	1acf      	subs	r7, r1, r3
 8000e3e:	4034      	ands	r4, r6
 8000e40:	e664      	b.n	8000b0c <__aeabi_fsub+0x74>
 8000e42:	4461      	add	r1, ip
 8000e44:	014b      	lsls	r3, r1, #5
 8000e46:	d56d      	bpl.n	8000f24 <__aeabi_fsub+0x48c>
 8000e48:	0848      	lsrs	r0, r1, #1
 8000e4a:	4944      	ldr	r1, [pc, #272]	@ (8000f5c <__aeabi_fsub+0x4c4>)
 8000e4c:	4001      	ands	r1, r0
 8000e4e:	0743      	lsls	r3, r0, #29
 8000e50:	d02c      	beq.n	8000eac <__aeabi_fsub+0x414>
 8000e52:	230f      	movs	r3, #15
 8000e54:	4003      	ands	r3, r0
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d028      	beq.n	8000eac <__aeabi_fsub+0x414>
 8000e5a:	1d0b      	adds	r3, r1, #4
 8000e5c:	469c      	mov	ip, r3
 8000e5e:	2302      	movs	r3, #2
 8000e60:	e690      	b.n	8000b84 <__aeabi_fsub+0xec>
 8000e62:	2900      	cmp	r1, #0
 8000e64:	d100      	bne.n	8000e68 <__aeabi_fsub+0x3d0>
 8000e66:	e72b      	b.n	8000cc0 <__aeabi_fsub+0x228>
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	03db      	lsls	r3, r3, #15
 8000e6c:	429f      	cmp	r7, r3
 8000e6e:	d200      	bcs.n	8000e72 <__aeabi_fsub+0x3da>
 8000e70:	e726      	b.n	8000cc0 <__aeabi_fsub+0x228>
 8000e72:	4298      	cmp	r0, r3
 8000e74:	d300      	bcc.n	8000e78 <__aeabi_fsub+0x3e0>
 8000e76:	e723      	b.n	8000cc0 <__aeabi_fsub+0x228>
 8000e78:	2401      	movs	r4, #1
 8000e7a:	4034      	ands	r4, r6
 8000e7c:	0007      	movs	r7, r0
 8000e7e:	e71f      	b.n	8000cc0 <__aeabi_fsub+0x228>
 8000e80:	0034      	movs	r4, r6
 8000e82:	468c      	mov	ip, r1
 8000e84:	e67e      	b.n	8000b84 <__aeabi_fsub+0xec>
 8000e86:	2301      	movs	r3, #1
 8000e88:	08cf      	lsrs	r7, r1, #3
 8000e8a:	e680      	b.n	8000b8e <__aeabi_fsub+0xf6>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e67e      	b.n	8000b8e <__aeabi_fsub+0xf6>
 8000e90:	2020      	movs	r0, #32
 8000e92:	4665      	mov	r5, ip
 8000e94:	1b80      	subs	r0, r0, r6
 8000e96:	4085      	lsls	r5, r0
 8000e98:	4663      	mov	r3, ip
 8000e9a:	0028      	movs	r0, r5
 8000e9c:	40f3      	lsrs	r3, r6
 8000e9e:	1e45      	subs	r5, r0, #1
 8000ea0:	41a8      	sbcs	r0, r5
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	469c      	mov	ip, r3
 8000ea6:	0015      	movs	r5, r2
 8000ea8:	448c      	add	ip, r1
 8000eaa:	e76d      	b.n	8000d88 <__aeabi_fsub+0x2f0>
 8000eac:	2302      	movs	r3, #2
 8000eae:	08cf      	lsrs	r7, r1, #3
 8000eb0:	e66d      	b.n	8000b8e <__aeabi_fsub+0xf6>
 8000eb2:	1b0f      	subs	r7, r1, r4
 8000eb4:	017b      	lsls	r3, r7, #5
 8000eb6:	d528      	bpl.n	8000f0a <__aeabi_fsub+0x472>
 8000eb8:	01bf      	lsls	r7, r7, #6
 8000eba:	09bf      	lsrs	r7, r7, #6
 8000ebc:	0038      	movs	r0, r7
 8000ebe:	f001 f815 	bl	8001eec <__clzsi2>
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	3805      	subs	r0, #5
 8000ec6:	4083      	lsls	r3, r0
 8000ec8:	0034      	movs	r4, r6
 8000eca:	2501      	movs	r5, #1
 8000ecc:	e6ca      	b.n	8000c64 <__aeabi_fsub+0x1cc>
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_fsub+0x43c>
 8000ed2:	e6b5      	b.n	8000c40 <__aeabi_fsub+0x1a8>
 8000ed4:	2401      	movs	r4, #1
 8000ed6:	0007      	movs	r7, r0
 8000ed8:	4034      	ands	r4, r6
 8000eda:	e658      	b.n	8000b8e <__aeabi_fsub+0xf6>
 8000edc:	4663      	mov	r3, ip
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_fsub+0x44c>
 8000ee2:	e6e9      	b.n	8000cb8 <__aeabi_fsub+0x220>
 8000ee4:	2900      	cmp	r1, #0
 8000ee6:	d100      	bne.n	8000eea <__aeabi_fsub+0x452>
 8000ee8:	e6ea      	b.n	8000cc0 <__aeabi_fsub+0x228>
 8000eea:	2380      	movs	r3, #128	@ 0x80
 8000eec:	03db      	lsls	r3, r3, #15
 8000eee:	429f      	cmp	r7, r3
 8000ef0:	d200      	bcs.n	8000ef4 <__aeabi_fsub+0x45c>
 8000ef2:	e6e5      	b.n	8000cc0 <__aeabi_fsub+0x228>
 8000ef4:	4298      	cmp	r0, r3
 8000ef6:	d300      	bcc.n	8000efa <__aeabi_fsub+0x462>
 8000ef8:	e6e2      	b.n	8000cc0 <__aeabi_fsub+0x228>
 8000efa:	0007      	movs	r7, r0
 8000efc:	e6e0      	b.n	8000cc0 <__aeabi_fsub+0x228>
 8000efe:	2900      	cmp	r1, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fsub+0x46c>
 8000f02:	e69e      	b.n	8000c42 <__aeabi_fsub+0x1aa>
 8000f04:	2300      	movs	r3, #0
 8000f06:	08cf      	lsrs	r7, r1, #3
 8000f08:	e641      	b.n	8000b8e <__aeabi_fsub+0xf6>
 8000f0a:	0034      	movs	r4, r6
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	08ff      	lsrs	r7, r7, #3
 8000f10:	e63d      	b.n	8000b8e <__aeabi_fsub+0xf6>
 8000f12:	2f00      	cmp	r7, #0
 8000f14:	d100      	bne.n	8000f18 <__aeabi_fsub+0x480>
 8000f16:	e693      	b.n	8000c40 <__aeabi_fsub+0x1a8>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	08ff      	lsrs	r7, r7, #3
 8000f1c:	e637      	b.n	8000b8e <__aeabi_fsub+0xf6>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	08d7      	lsrs	r7, r2, #3
 8000f22:	e634      	b.n	8000b8e <__aeabi_fsub+0xf6>
 8000f24:	2301      	movs	r3, #1
 8000f26:	08cf      	lsrs	r7, r1, #3
 8000f28:	e631      	b.n	8000b8e <__aeabi_fsub+0xf6>
 8000f2a:	2280      	movs	r2, #128	@ 0x80
 8000f2c:	000b      	movs	r3, r1
 8000f2e:	04d2      	lsls	r2, r2, #19
 8000f30:	2001      	movs	r0, #1
 8000f32:	4013      	ands	r3, r2
 8000f34:	4211      	tst	r1, r2
 8000f36:	d000      	beq.n	8000f3a <__aeabi_fsub+0x4a2>
 8000f38:	e6ae      	b.n	8000c98 <__aeabi_fsub+0x200>
 8000f3a:	08cf      	lsrs	r7, r1, #3
 8000f3c:	e627      	b.n	8000b8e <__aeabi_fsub+0xf6>
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d100      	bne.n	8000f44 <__aeabi_fsub+0x4ac>
 8000f42:	e75f      	b.n	8000e04 <__aeabi_fsub+0x36c>
 8000f44:	1b56      	subs	r6, r2, r5
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d101      	bne.n	8000f4e <__aeabi_fsub+0x4b6>
 8000f4a:	0033      	movs	r3, r6
 8000f4c:	e6e7      	b.n	8000d1e <__aeabi_fsub+0x286>
 8000f4e:	2380      	movs	r3, #128	@ 0x80
 8000f50:	4660      	mov	r0, ip
 8000f52:	04db      	lsls	r3, r3, #19
 8000f54:	4318      	orrs	r0, r3
 8000f56:	4684      	mov	ip, r0
 8000f58:	e6eb      	b.n	8000d32 <__aeabi_fsub+0x29a>
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	7dffffff 	.word	0x7dffffff

08000f60 <__aeabi_i2f>:
 8000f60:	b570      	push	{r4, r5, r6, lr}
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d012      	beq.n	8000f8c <__aeabi_i2f+0x2c>
 8000f66:	17c3      	asrs	r3, r0, #31
 8000f68:	18c5      	adds	r5, r0, r3
 8000f6a:	405d      	eors	r5, r3
 8000f6c:	0fc4      	lsrs	r4, r0, #31
 8000f6e:	0028      	movs	r0, r5
 8000f70:	f000 ffbc 	bl	8001eec <__clzsi2>
 8000f74:	239e      	movs	r3, #158	@ 0x9e
 8000f76:	1a1b      	subs	r3, r3, r0
 8000f78:	2b96      	cmp	r3, #150	@ 0x96
 8000f7a:	dc0f      	bgt.n	8000f9c <__aeabi_i2f+0x3c>
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	d038      	beq.n	8000ff2 <__aeabi_i2f+0x92>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4085      	lsls	r5, r0
 8000f84:	026d      	lsls	r5, r5, #9
 8000f86:	0a6d      	lsrs	r5, r5, #9
 8000f88:	b2d8      	uxtb	r0, r3
 8000f8a:	e002      	b.n	8000f92 <__aeabi_i2f+0x32>
 8000f8c:	2400      	movs	r4, #0
 8000f8e:	2000      	movs	r0, #0
 8000f90:	2500      	movs	r5, #0
 8000f92:	05c0      	lsls	r0, r0, #23
 8000f94:	4328      	orrs	r0, r5
 8000f96:	07e4      	lsls	r4, r4, #31
 8000f98:	4320      	orrs	r0, r4
 8000f9a:	bd70      	pop	{r4, r5, r6, pc}
 8000f9c:	2b99      	cmp	r3, #153	@ 0x99
 8000f9e:	dc14      	bgt.n	8000fca <__aeabi_i2f+0x6a>
 8000fa0:	1f42      	subs	r2, r0, #5
 8000fa2:	4095      	lsls	r5, r2
 8000fa4:	002a      	movs	r2, r5
 8000fa6:	4915      	ldr	r1, [pc, #84]	@ (8000ffc <__aeabi_i2f+0x9c>)
 8000fa8:	4011      	ands	r1, r2
 8000faa:	0755      	lsls	r5, r2, #29
 8000fac:	d01c      	beq.n	8000fe8 <__aeabi_i2f+0x88>
 8000fae:	250f      	movs	r5, #15
 8000fb0:	402a      	ands	r2, r5
 8000fb2:	2a04      	cmp	r2, #4
 8000fb4:	d018      	beq.n	8000fe8 <__aeabi_i2f+0x88>
 8000fb6:	3104      	adds	r1, #4
 8000fb8:	08ca      	lsrs	r2, r1, #3
 8000fba:	0149      	lsls	r1, r1, #5
 8000fbc:	d515      	bpl.n	8000fea <__aeabi_i2f+0x8a>
 8000fbe:	239f      	movs	r3, #159	@ 0x9f
 8000fc0:	0252      	lsls	r2, r2, #9
 8000fc2:	1a18      	subs	r0, r3, r0
 8000fc4:	0a55      	lsrs	r5, r2, #9
 8000fc6:	b2c0      	uxtb	r0, r0
 8000fc8:	e7e3      	b.n	8000f92 <__aeabi_i2f+0x32>
 8000fca:	2205      	movs	r2, #5
 8000fcc:	0029      	movs	r1, r5
 8000fce:	1a12      	subs	r2, r2, r0
 8000fd0:	40d1      	lsrs	r1, r2
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	321b      	adds	r2, #27
 8000fd6:	4095      	lsls	r5, r2
 8000fd8:	002a      	movs	r2, r5
 8000fda:	1e55      	subs	r5, r2, #1
 8000fdc:	41aa      	sbcs	r2, r5
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	4906      	ldr	r1, [pc, #24]	@ (8000ffc <__aeabi_i2f+0x9c>)
 8000fe2:	4011      	ands	r1, r2
 8000fe4:	0755      	lsls	r5, r2, #29
 8000fe6:	d1e2      	bne.n	8000fae <__aeabi_i2f+0x4e>
 8000fe8:	08ca      	lsrs	r2, r1, #3
 8000fea:	0252      	lsls	r2, r2, #9
 8000fec:	0a55      	lsrs	r5, r2, #9
 8000fee:	b2d8      	uxtb	r0, r3
 8000ff0:	e7cf      	b.n	8000f92 <__aeabi_i2f+0x32>
 8000ff2:	026d      	lsls	r5, r5, #9
 8000ff4:	0a6d      	lsrs	r5, r5, #9
 8000ff6:	308e      	adds	r0, #142	@ 0x8e
 8000ff8:	e7cb      	b.n	8000f92 <__aeabi_i2f+0x32>
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	fbffffff 	.word	0xfbffffff

08001000 <__aeabi_dadd>:
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001002:	464f      	mov	r7, r9
 8001004:	4646      	mov	r6, r8
 8001006:	46d6      	mov	lr, sl
 8001008:	b5c0      	push	{r6, r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	9000      	str	r0, [sp, #0]
 800100e:	9101      	str	r1, [sp, #4]
 8001010:	030e      	lsls	r6, r1, #12
 8001012:	004c      	lsls	r4, r1, #1
 8001014:	0fcd      	lsrs	r5, r1, #31
 8001016:	0a71      	lsrs	r1, r6, #9
 8001018:	9e00      	ldr	r6, [sp, #0]
 800101a:	005f      	lsls	r7, r3, #1
 800101c:	0f76      	lsrs	r6, r6, #29
 800101e:	430e      	orrs	r6, r1
 8001020:	9900      	ldr	r1, [sp, #0]
 8001022:	9200      	str	r2, [sp, #0]
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	00c9      	lsls	r1, r1, #3
 8001028:	4689      	mov	r9, r1
 800102a:	0319      	lsls	r1, r3, #12
 800102c:	0d7b      	lsrs	r3, r7, #21
 800102e:	4698      	mov	r8, r3
 8001030:	9b01      	ldr	r3, [sp, #4]
 8001032:	0a49      	lsrs	r1, r1, #9
 8001034:	0fdb      	lsrs	r3, r3, #31
 8001036:	469c      	mov	ip, r3
 8001038:	9b00      	ldr	r3, [sp, #0]
 800103a:	9a00      	ldr	r2, [sp, #0]
 800103c:	0f5b      	lsrs	r3, r3, #29
 800103e:	430b      	orrs	r3, r1
 8001040:	4641      	mov	r1, r8
 8001042:	0d64      	lsrs	r4, r4, #21
 8001044:	00d2      	lsls	r2, r2, #3
 8001046:	1a61      	subs	r1, r4, r1
 8001048:	4565      	cmp	r5, ip
 800104a:	d100      	bne.n	800104e <__aeabi_dadd+0x4e>
 800104c:	e0a6      	b.n	800119c <__aeabi_dadd+0x19c>
 800104e:	2900      	cmp	r1, #0
 8001050:	dd72      	ble.n	8001138 <__aeabi_dadd+0x138>
 8001052:	4647      	mov	r7, r8
 8001054:	2f00      	cmp	r7, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x5a>
 8001058:	e0dd      	b.n	8001216 <__aeabi_dadd+0x216>
 800105a:	4fcc      	ldr	r7, [pc, #816]	@ (800138c <__aeabi_dadd+0x38c>)
 800105c:	42bc      	cmp	r4, r7
 800105e:	d100      	bne.n	8001062 <__aeabi_dadd+0x62>
 8001060:	e19a      	b.n	8001398 <__aeabi_dadd+0x398>
 8001062:	2701      	movs	r7, #1
 8001064:	2938      	cmp	r1, #56	@ 0x38
 8001066:	dc17      	bgt.n	8001098 <__aeabi_dadd+0x98>
 8001068:	2780      	movs	r7, #128	@ 0x80
 800106a:	043f      	lsls	r7, r7, #16
 800106c:	433b      	orrs	r3, r7
 800106e:	291f      	cmp	r1, #31
 8001070:	dd00      	ble.n	8001074 <__aeabi_dadd+0x74>
 8001072:	e1dd      	b.n	8001430 <__aeabi_dadd+0x430>
 8001074:	2720      	movs	r7, #32
 8001076:	1a78      	subs	r0, r7, r1
 8001078:	001f      	movs	r7, r3
 800107a:	4087      	lsls	r7, r0
 800107c:	46ba      	mov	sl, r7
 800107e:	0017      	movs	r7, r2
 8001080:	40cf      	lsrs	r7, r1
 8001082:	4684      	mov	ip, r0
 8001084:	0038      	movs	r0, r7
 8001086:	4657      	mov	r7, sl
 8001088:	4307      	orrs	r7, r0
 800108a:	4660      	mov	r0, ip
 800108c:	4082      	lsls	r2, r0
 800108e:	40cb      	lsrs	r3, r1
 8001090:	1e50      	subs	r0, r2, #1
 8001092:	4182      	sbcs	r2, r0
 8001094:	1af6      	subs	r6, r6, r3
 8001096:	4317      	orrs	r7, r2
 8001098:	464b      	mov	r3, r9
 800109a:	1bdf      	subs	r7, r3, r7
 800109c:	45b9      	cmp	r9, r7
 800109e:	4180      	sbcs	r0, r0
 80010a0:	4240      	negs	r0, r0
 80010a2:	1a36      	subs	r6, r6, r0
 80010a4:	0233      	lsls	r3, r6, #8
 80010a6:	d400      	bmi.n	80010aa <__aeabi_dadd+0xaa>
 80010a8:	e0ff      	b.n	80012aa <__aeabi_dadd+0x2aa>
 80010aa:	0276      	lsls	r6, r6, #9
 80010ac:	0a76      	lsrs	r6, r6, #9
 80010ae:	2e00      	cmp	r6, #0
 80010b0:	d100      	bne.n	80010b4 <__aeabi_dadd+0xb4>
 80010b2:	e13c      	b.n	800132e <__aeabi_dadd+0x32e>
 80010b4:	0030      	movs	r0, r6
 80010b6:	f000 ff19 	bl	8001eec <__clzsi2>
 80010ba:	0003      	movs	r3, r0
 80010bc:	3b08      	subs	r3, #8
 80010be:	2120      	movs	r1, #32
 80010c0:	0038      	movs	r0, r7
 80010c2:	1aca      	subs	r2, r1, r3
 80010c4:	40d0      	lsrs	r0, r2
 80010c6:	409e      	lsls	r6, r3
 80010c8:	0002      	movs	r2, r0
 80010ca:	409f      	lsls	r7, r3
 80010cc:	4332      	orrs	r2, r6
 80010ce:	429c      	cmp	r4, r3
 80010d0:	dd00      	ble.n	80010d4 <__aeabi_dadd+0xd4>
 80010d2:	e1a6      	b.n	8001422 <__aeabi_dadd+0x422>
 80010d4:	1b18      	subs	r0, r3, r4
 80010d6:	3001      	adds	r0, #1
 80010d8:	1a09      	subs	r1, r1, r0
 80010da:	003e      	movs	r6, r7
 80010dc:	408f      	lsls	r7, r1
 80010de:	40c6      	lsrs	r6, r0
 80010e0:	1e7b      	subs	r3, r7, #1
 80010e2:	419f      	sbcs	r7, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	408b      	lsls	r3, r1
 80010e8:	4337      	orrs	r7, r6
 80010ea:	431f      	orrs	r7, r3
 80010ec:	40c2      	lsrs	r2, r0
 80010ee:	003b      	movs	r3, r7
 80010f0:	0016      	movs	r6, r2
 80010f2:	2400      	movs	r4, #0
 80010f4:	4313      	orrs	r3, r2
 80010f6:	d100      	bne.n	80010fa <__aeabi_dadd+0xfa>
 80010f8:	e1df      	b.n	80014ba <__aeabi_dadd+0x4ba>
 80010fa:	077b      	lsls	r3, r7, #29
 80010fc:	d100      	bne.n	8001100 <__aeabi_dadd+0x100>
 80010fe:	e332      	b.n	8001766 <__aeabi_dadd+0x766>
 8001100:	230f      	movs	r3, #15
 8001102:	003a      	movs	r2, r7
 8001104:	403b      	ands	r3, r7
 8001106:	2b04      	cmp	r3, #4
 8001108:	d004      	beq.n	8001114 <__aeabi_dadd+0x114>
 800110a:	1d3a      	adds	r2, r7, #4
 800110c:	42ba      	cmp	r2, r7
 800110e:	41bf      	sbcs	r7, r7
 8001110:	427f      	negs	r7, r7
 8001112:	19f6      	adds	r6, r6, r7
 8001114:	0233      	lsls	r3, r6, #8
 8001116:	d400      	bmi.n	800111a <__aeabi_dadd+0x11a>
 8001118:	e323      	b.n	8001762 <__aeabi_dadd+0x762>
 800111a:	4b9c      	ldr	r3, [pc, #624]	@ (800138c <__aeabi_dadd+0x38c>)
 800111c:	3401      	adds	r4, #1
 800111e:	429c      	cmp	r4, r3
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x124>
 8001122:	e0b4      	b.n	800128e <__aeabi_dadd+0x28e>
 8001124:	4b9a      	ldr	r3, [pc, #616]	@ (8001390 <__aeabi_dadd+0x390>)
 8001126:	0564      	lsls	r4, r4, #21
 8001128:	401e      	ands	r6, r3
 800112a:	0d64      	lsrs	r4, r4, #21
 800112c:	0777      	lsls	r7, r6, #29
 800112e:	08d2      	lsrs	r2, r2, #3
 8001130:	0276      	lsls	r6, r6, #9
 8001132:	4317      	orrs	r7, r2
 8001134:	0b36      	lsrs	r6, r6, #12
 8001136:	e0ac      	b.n	8001292 <__aeabi_dadd+0x292>
 8001138:	2900      	cmp	r1, #0
 800113a:	d100      	bne.n	800113e <__aeabi_dadd+0x13e>
 800113c:	e07e      	b.n	800123c <__aeabi_dadd+0x23c>
 800113e:	4641      	mov	r1, r8
 8001140:	1b09      	subs	r1, r1, r4
 8001142:	2c00      	cmp	r4, #0
 8001144:	d000      	beq.n	8001148 <__aeabi_dadd+0x148>
 8001146:	e160      	b.n	800140a <__aeabi_dadd+0x40a>
 8001148:	0034      	movs	r4, r6
 800114a:	4648      	mov	r0, r9
 800114c:	4304      	orrs	r4, r0
 800114e:	d100      	bne.n	8001152 <__aeabi_dadd+0x152>
 8001150:	e1c9      	b.n	80014e6 <__aeabi_dadd+0x4e6>
 8001152:	1e4c      	subs	r4, r1, #1
 8001154:	2901      	cmp	r1, #1
 8001156:	d100      	bne.n	800115a <__aeabi_dadd+0x15a>
 8001158:	e22e      	b.n	80015b8 <__aeabi_dadd+0x5b8>
 800115a:	4d8c      	ldr	r5, [pc, #560]	@ (800138c <__aeabi_dadd+0x38c>)
 800115c:	42a9      	cmp	r1, r5
 800115e:	d100      	bne.n	8001162 <__aeabi_dadd+0x162>
 8001160:	e224      	b.n	80015ac <__aeabi_dadd+0x5ac>
 8001162:	2701      	movs	r7, #1
 8001164:	2c38      	cmp	r4, #56	@ 0x38
 8001166:	dc11      	bgt.n	800118c <__aeabi_dadd+0x18c>
 8001168:	0021      	movs	r1, r4
 800116a:	291f      	cmp	r1, #31
 800116c:	dd00      	ble.n	8001170 <__aeabi_dadd+0x170>
 800116e:	e20b      	b.n	8001588 <__aeabi_dadd+0x588>
 8001170:	2420      	movs	r4, #32
 8001172:	0037      	movs	r7, r6
 8001174:	4648      	mov	r0, r9
 8001176:	1a64      	subs	r4, r4, r1
 8001178:	40a7      	lsls	r7, r4
 800117a:	40c8      	lsrs	r0, r1
 800117c:	4307      	orrs	r7, r0
 800117e:	4648      	mov	r0, r9
 8001180:	40a0      	lsls	r0, r4
 8001182:	40ce      	lsrs	r6, r1
 8001184:	1e44      	subs	r4, r0, #1
 8001186:	41a0      	sbcs	r0, r4
 8001188:	1b9b      	subs	r3, r3, r6
 800118a:	4307      	orrs	r7, r0
 800118c:	1bd7      	subs	r7, r2, r7
 800118e:	42ba      	cmp	r2, r7
 8001190:	4192      	sbcs	r2, r2
 8001192:	4252      	negs	r2, r2
 8001194:	4665      	mov	r5, ip
 8001196:	4644      	mov	r4, r8
 8001198:	1a9e      	subs	r6, r3, r2
 800119a:	e783      	b.n	80010a4 <__aeabi_dadd+0xa4>
 800119c:	2900      	cmp	r1, #0
 800119e:	dc00      	bgt.n	80011a2 <__aeabi_dadd+0x1a2>
 80011a0:	e09c      	b.n	80012dc <__aeabi_dadd+0x2dc>
 80011a2:	4647      	mov	r7, r8
 80011a4:	2f00      	cmp	r7, #0
 80011a6:	d167      	bne.n	8001278 <__aeabi_dadd+0x278>
 80011a8:	001f      	movs	r7, r3
 80011aa:	4317      	orrs	r7, r2
 80011ac:	d100      	bne.n	80011b0 <__aeabi_dadd+0x1b0>
 80011ae:	e0e4      	b.n	800137a <__aeabi_dadd+0x37a>
 80011b0:	1e48      	subs	r0, r1, #1
 80011b2:	2901      	cmp	r1, #1
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1b8>
 80011b6:	e19b      	b.n	80014f0 <__aeabi_dadd+0x4f0>
 80011b8:	4f74      	ldr	r7, [pc, #464]	@ (800138c <__aeabi_dadd+0x38c>)
 80011ba:	42b9      	cmp	r1, r7
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1c0>
 80011be:	e0eb      	b.n	8001398 <__aeabi_dadd+0x398>
 80011c0:	2701      	movs	r7, #1
 80011c2:	0001      	movs	r1, r0
 80011c4:	2838      	cmp	r0, #56	@ 0x38
 80011c6:	dc11      	bgt.n	80011ec <__aeabi_dadd+0x1ec>
 80011c8:	291f      	cmp	r1, #31
 80011ca:	dd00      	ble.n	80011ce <__aeabi_dadd+0x1ce>
 80011cc:	e1c7      	b.n	800155e <__aeabi_dadd+0x55e>
 80011ce:	2720      	movs	r7, #32
 80011d0:	1a78      	subs	r0, r7, r1
 80011d2:	001f      	movs	r7, r3
 80011d4:	4684      	mov	ip, r0
 80011d6:	4087      	lsls	r7, r0
 80011d8:	0010      	movs	r0, r2
 80011da:	40c8      	lsrs	r0, r1
 80011dc:	4307      	orrs	r7, r0
 80011de:	4660      	mov	r0, ip
 80011e0:	4082      	lsls	r2, r0
 80011e2:	40cb      	lsrs	r3, r1
 80011e4:	1e50      	subs	r0, r2, #1
 80011e6:	4182      	sbcs	r2, r0
 80011e8:	18f6      	adds	r6, r6, r3
 80011ea:	4317      	orrs	r7, r2
 80011ec:	444f      	add	r7, r9
 80011ee:	454f      	cmp	r7, r9
 80011f0:	4180      	sbcs	r0, r0
 80011f2:	4240      	negs	r0, r0
 80011f4:	1836      	adds	r6, r6, r0
 80011f6:	0233      	lsls	r3, r6, #8
 80011f8:	d557      	bpl.n	80012aa <__aeabi_dadd+0x2aa>
 80011fa:	4b64      	ldr	r3, [pc, #400]	@ (800138c <__aeabi_dadd+0x38c>)
 80011fc:	3401      	adds	r4, #1
 80011fe:	429c      	cmp	r4, r3
 8001200:	d045      	beq.n	800128e <__aeabi_dadd+0x28e>
 8001202:	2101      	movs	r1, #1
 8001204:	4b62      	ldr	r3, [pc, #392]	@ (8001390 <__aeabi_dadd+0x390>)
 8001206:	087a      	lsrs	r2, r7, #1
 8001208:	401e      	ands	r6, r3
 800120a:	4039      	ands	r1, r7
 800120c:	430a      	orrs	r2, r1
 800120e:	07f7      	lsls	r7, r6, #31
 8001210:	4317      	orrs	r7, r2
 8001212:	0876      	lsrs	r6, r6, #1
 8001214:	e771      	b.n	80010fa <__aeabi_dadd+0xfa>
 8001216:	001f      	movs	r7, r3
 8001218:	4317      	orrs	r7, r2
 800121a:	d100      	bne.n	800121e <__aeabi_dadd+0x21e>
 800121c:	e0ad      	b.n	800137a <__aeabi_dadd+0x37a>
 800121e:	1e4f      	subs	r7, r1, #1
 8001220:	46bc      	mov	ip, r7
 8001222:	2901      	cmp	r1, #1
 8001224:	d100      	bne.n	8001228 <__aeabi_dadd+0x228>
 8001226:	e182      	b.n	800152e <__aeabi_dadd+0x52e>
 8001228:	4f58      	ldr	r7, [pc, #352]	@ (800138c <__aeabi_dadd+0x38c>)
 800122a:	42b9      	cmp	r1, r7
 800122c:	d100      	bne.n	8001230 <__aeabi_dadd+0x230>
 800122e:	e190      	b.n	8001552 <__aeabi_dadd+0x552>
 8001230:	4661      	mov	r1, ip
 8001232:	2701      	movs	r7, #1
 8001234:	2938      	cmp	r1, #56	@ 0x38
 8001236:	dd00      	ble.n	800123a <__aeabi_dadd+0x23a>
 8001238:	e72e      	b.n	8001098 <__aeabi_dadd+0x98>
 800123a:	e718      	b.n	800106e <__aeabi_dadd+0x6e>
 800123c:	4f55      	ldr	r7, [pc, #340]	@ (8001394 <__aeabi_dadd+0x394>)
 800123e:	1c61      	adds	r1, r4, #1
 8001240:	4239      	tst	r1, r7
 8001242:	d000      	beq.n	8001246 <__aeabi_dadd+0x246>
 8001244:	e0d0      	b.n	80013e8 <__aeabi_dadd+0x3e8>
 8001246:	0031      	movs	r1, r6
 8001248:	4648      	mov	r0, r9
 800124a:	001f      	movs	r7, r3
 800124c:	4301      	orrs	r1, r0
 800124e:	4317      	orrs	r7, r2
 8001250:	2c00      	cmp	r4, #0
 8001252:	d000      	beq.n	8001256 <__aeabi_dadd+0x256>
 8001254:	e13d      	b.n	80014d2 <__aeabi_dadd+0x4d2>
 8001256:	2900      	cmp	r1, #0
 8001258:	d100      	bne.n	800125c <__aeabi_dadd+0x25c>
 800125a:	e1bc      	b.n	80015d6 <__aeabi_dadd+0x5d6>
 800125c:	2f00      	cmp	r7, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x262>
 8001260:	e1bf      	b.n	80015e2 <__aeabi_dadd+0x5e2>
 8001262:	464b      	mov	r3, r9
 8001264:	2100      	movs	r1, #0
 8001266:	08d8      	lsrs	r0, r3, #3
 8001268:	0777      	lsls	r7, r6, #29
 800126a:	4307      	orrs	r7, r0
 800126c:	08f0      	lsrs	r0, r6, #3
 800126e:	0306      	lsls	r6, r0, #12
 8001270:	054c      	lsls	r4, r1, #21
 8001272:	0b36      	lsrs	r6, r6, #12
 8001274:	0d64      	lsrs	r4, r4, #21
 8001276:	e00c      	b.n	8001292 <__aeabi_dadd+0x292>
 8001278:	4f44      	ldr	r7, [pc, #272]	@ (800138c <__aeabi_dadd+0x38c>)
 800127a:	42bc      	cmp	r4, r7
 800127c:	d100      	bne.n	8001280 <__aeabi_dadd+0x280>
 800127e:	e08b      	b.n	8001398 <__aeabi_dadd+0x398>
 8001280:	2701      	movs	r7, #1
 8001282:	2938      	cmp	r1, #56	@ 0x38
 8001284:	dcb2      	bgt.n	80011ec <__aeabi_dadd+0x1ec>
 8001286:	2780      	movs	r7, #128	@ 0x80
 8001288:	043f      	lsls	r7, r7, #16
 800128a:	433b      	orrs	r3, r7
 800128c:	e79c      	b.n	80011c8 <__aeabi_dadd+0x1c8>
 800128e:	2600      	movs	r6, #0
 8001290:	2700      	movs	r7, #0
 8001292:	0524      	lsls	r4, r4, #20
 8001294:	4334      	orrs	r4, r6
 8001296:	07ed      	lsls	r5, r5, #31
 8001298:	432c      	orrs	r4, r5
 800129a:	0038      	movs	r0, r7
 800129c:	0021      	movs	r1, r4
 800129e:	b002      	add	sp, #8
 80012a0:	bce0      	pop	{r5, r6, r7}
 80012a2:	46ba      	mov	sl, r7
 80012a4:	46b1      	mov	r9, r6
 80012a6:	46a8      	mov	r8, r5
 80012a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012aa:	077b      	lsls	r3, r7, #29
 80012ac:	d004      	beq.n	80012b8 <__aeabi_dadd+0x2b8>
 80012ae:	230f      	movs	r3, #15
 80012b0:	403b      	ands	r3, r7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d000      	beq.n	80012b8 <__aeabi_dadd+0x2b8>
 80012b6:	e728      	b.n	800110a <__aeabi_dadd+0x10a>
 80012b8:	08f8      	lsrs	r0, r7, #3
 80012ba:	4b34      	ldr	r3, [pc, #208]	@ (800138c <__aeabi_dadd+0x38c>)
 80012bc:	0777      	lsls	r7, r6, #29
 80012be:	4307      	orrs	r7, r0
 80012c0:	08f0      	lsrs	r0, r6, #3
 80012c2:	429c      	cmp	r4, r3
 80012c4:	d000      	beq.n	80012c8 <__aeabi_dadd+0x2c8>
 80012c6:	e24a      	b.n	800175e <__aeabi_dadd+0x75e>
 80012c8:	003b      	movs	r3, r7
 80012ca:	4303      	orrs	r3, r0
 80012cc:	d059      	beq.n	8001382 <__aeabi_dadd+0x382>
 80012ce:	2680      	movs	r6, #128	@ 0x80
 80012d0:	0336      	lsls	r6, r6, #12
 80012d2:	4306      	orrs	r6, r0
 80012d4:	0336      	lsls	r6, r6, #12
 80012d6:	4c2d      	ldr	r4, [pc, #180]	@ (800138c <__aeabi_dadd+0x38c>)
 80012d8:	0b36      	lsrs	r6, r6, #12
 80012da:	e7da      	b.n	8001292 <__aeabi_dadd+0x292>
 80012dc:	2900      	cmp	r1, #0
 80012de:	d061      	beq.n	80013a4 <__aeabi_dadd+0x3a4>
 80012e0:	4641      	mov	r1, r8
 80012e2:	1b09      	subs	r1, r1, r4
 80012e4:	2c00      	cmp	r4, #0
 80012e6:	d100      	bne.n	80012ea <__aeabi_dadd+0x2ea>
 80012e8:	e0b9      	b.n	800145e <__aeabi_dadd+0x45e>
 80012ea:	4c28      	ldr	r4, [pc, #160]	@ (800138c <__aeabi_dadd+0x38c>)
 80012ec:	45a0      	cmp	r8, r4
 80012ee:	d100      	bne.n	80012f2 <__aeabi_dadd+0x2f2>
 80012f0:	e1a5      	b.n	800163e <__aeabi_dadd+0x63e>
 80012f2:	2701      	movs	r7, #1
 80012f4:	2938      	cmp	r1, #56	@ 0x38
 80012f6:	dc13      	bgt.n	8001320 <__aeabi_dadd+0x320>
 80012f8:	2480      	movs	r4, #128	@ 0x80
 80012fa:	0424      	lsls	r4, r4, #16
 80012fc:	4326      	orrs	r6, r4
 80012fe:	291f      	cmp	r1, #31
 8001300:	dd00      	ble.n	8001304 <__aeabi_dadd+0x304>
 8001302:	e1c8      	b.n	8001696 <__aeabi_dadd+0x696>
 8001304:	2420      	movs	r4, #32
 8001306:	0037      	movs	r7, r6
 8001308:	4648      	mov	r0, r9
 800130a:	1a64      	subs	r4, r4, r1
 800130c:	40a7      	lsls	r7, r4
 800130e:	40c8      	lsrs	r0, r1
 8001310:	4307      	orrs	r7, r0
 8001312:	4648      	mov	r0, r9
 8001314:	40a0      	lsls	r0, r4
 8001316:	40ce      	lsrs	r6, r1
 8001318:	1e44      	subs	r4, r0, #1
 800131a:	41a0      	sbcs	r0, r4
 800131c:	199b      	adds	r3, r3, r6
 800131e:	4307      	orrs	r7, r0
 8001320:	18bf      	adds	r7, r7, r2
 8001322:	4297      	cmp	r7, r2
 8001324:	4192      	sbcs	r2, r2
 8001326:	4252      	negs	r2, r2
 8001328:	4644      	mov	r4, r8
 800132a:	18d6      	adds	r6, r2, r3
 800132c:	e763      	b.n	80011f6 <__aeabi_dadd+0x1f6>
 800132e:	0038      	movs	r0, r7
 8001330:	f000 fddc 	bl	8001eec <__clzsi2>
 8001334:	0003      	movs	r3, r0
 8001336:	3318      	adds	r3, #24
 8001338:	2b1f      	cmp	r3, #31
 800133a:	dc00      	bgt.n	800133e <__aeabi_dadd+0x33e>
 800133c:	e6bf      	b.n	80010be <__aeabi_dadd+0xbe>
 800133e:	003a      	movs	r2, r7
 8001340:	3808      	subs	r0, #8
 8001342:	4082      	lsls	r2, r0
 8001344:	429c      	cmp	r4, r3
 8001346:	dd00      	ble.n	800134a <__aeabi_dadd+0x34a>
 8001348:	e083      	b.n	8001452 <__aeabi_dadd+0x452>
 800134a:	1b1b      	subs	r3, r3, r4
 800134c:	1c58      	adds	r0, r3, #1
 800134e:	281f      	cmp	r0, #31
 8001350:	dc00      	bgt.n	8001354 <__aeabi_dadd+0x354>
 8001352:	e1b4      	b.n	80016be <__aeabi_dadd+0x6be>
 8001354:	0017      	movs	r7, r2
 8001356:	3b1f      	subs	r3, #31
 8001358:	40df      	lsrs	r7, r3
 800135a:	2820      	cmp	r0, #32
 800135c:	d005      	beq.n	800136a <__aeabi_dadd+0x36a>
 800135e:	2340      	movs	r3, #64	@ 0x40
 8001360:	1a1b      	subs	r3, r3, r0
 8001362:	409a      	lsls	r2, r3
 8001364:	1e53      	subs	r3, r2, #1
 8001366:	419a      	sbcs	r2, r3
 8001368:	4317      	orrs	r7, r2
 800136a:	2400      	movs	r4, #0
 800136c:	2f00      	cmp	r7, #0
 800136e:	d00a      	beq.n	8001386 <__aeabi_dadd+0x386>
 8001370:	077b      	lsls	r3, r7, #29
 8001372:	d000      	beq.n	8001376 <__aeabi_dadd+0x376>
 8001374:	e6c4      	b.n	8001100 <__aeabi_dadd+0x100>
 8001376:	0026      	movs	r6, r4
 8001378:	e79e      	b.n	80012b8 <__aeabi_dadd+0x2b8>
 800137a:	464b      	mov	r3, r9
 800137c:	000c      	movs	r4, r1
 800137e:	08d8      	lsrs	r0, r3, #3
 8001380:	e79b      	b.n	80012ba <__aeabi_dadd+0x2ba>
 8001382:	2700      	movs	r7, #0
 8001384:	4c01      	ldr	r4, [pc, #4]	@ (800138c <__aeabi_dadd+0x38c>)
 8001386:	2600      	movs	r6, #0
 8001388:	e783      	b.n	8001292 <__aeabi_dadd+0x292>
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	000007ff 	.word	0x000007ff
 8001390:	ff7fffff 	.word	0xff7fffff
 8001394:	000007fe 	.word	0x000007fe
 8001398:	464b      	mov	r3, r9
 800139a:	0777      	lsls	r7, r6, #29
 800139c:	08d8      	lsrs	r0, r3, #3
 800139e:	4307      	orrs	r7, r0
 80013a0:	08f0      	lsrs	r0, r6, #3
 80013a2:	e791      	b.n	80012c8 <__aeabi_dadd+0x2c8>
 80013a4:	4fcd      	ldr	r7, [pc, #820]	@ (80016dc <__aeabi_dadd+0x6dc>)
 80013a6:	1c61      	adds	r1, r4, #1
 80013a8:	4239      	tst	r1, r7
 80013aa:	d16b      	bne.n	8001484 <__aeabi_dadd+0x484>
 80013ac:	0031      	movs	r1, r6
 80013ae:	4648      	mov	r0, r9
 80013b0:	4301      	orrs	r1, r0
 80013b2:	2c00      	cmp	r4, #0
 80013b4:	d000      	beq.n	80013b8 <__aeabi_dadd+0x3b8>
 80013b6:	e14b      	b.n	8001650 <__aeabi_dadd+0x650>
 80013b8:	001f      	movs	r7, r3
 80013ba:	4317      	orrs	r7, r2
 80013bc:	2900      	cmp	r1, #0
 80013be:	d100      	bne.n	80013c2 <__aeabi_dadd+0x3c2>
 80013c0:	e181      	b.n	80016c6 <__aeabi_dadd+0x6c6>
 80013c2:	2f00      	cmp	r7, #0
 80013c4:	d100      	bne.n	80013c8 <__aeabi_dadd+0x3c8>
 80013c6:	e74c      	b.n	8001262 <__aeabi_dadd+0x262>
 80013c8:	444a      	add	r2, r9
 80013ca:	454a      	cmp	r2, r9
 80013cc:	4180      	sbcs	r0, r0
 80013ce:	18f6      	adds	r6, r6, r3
 80013d0:	4240      	negs	r0, r0
 80013d2:	1836      	adds	r6, r6, r0
 80013d4:	0233      	lsls	r3, r6, #8
 80013d6:	d500      	bpl.n	80013da <__aeabi_dadd+0x3da>
 80013d8:	e1b0      	b.n	800173c <__aeabi_dadd+0x73c>
 80013da:	0017      	movs	r7, r2
 80013dc:	4691      	mov	r9, r2
 80013de:	4337      	orrs	r7, r6
 80013e0:	d000      	beq.n	80013e4 <__aeabi_dadd+0x3e4>
 80013e2:	e73e      	b.n	8001262 <__aeabi_dadd+0x262>
 80013e4:	2600      	movs	r6, #0
 80013e6:	e754      	b.n	8001292 <__aeabi_dadd+0x292>
 80013e8:	4649      	mov	r1, r9
 80013ea:	1a89      	subs	r1, r1, r2
 80013ec:	4688      	mov	r8, r1
 80013ee:	45c1      	cmp	r9, r8
 80013f0:	41bf      	sbcs	r7, r7
 80013f2:	1af1      	subs	r1, r6, r3
 80013f4:	427f      	negs	r7, r7
 80013f6:	1bc9      	subs	r1, r1, r7
 80013f8:	020f      	lsls	r7, r1, #8
 80013fa:	d461      	bmi.n	80014c0 <__aeabi_dadd+0x4c0>
 80013fc:	4647      	mov	r7, r8
 80013fe:	430f      	orrs	r7, r1
 8001400:	d100      	bne.n	8001404 <__aeabi_dadd+0x404>
 8001402:	e0bd      	b.n	8001580 <__aeabi_dadd+0x580>
 8001404:	000e      	movs	r6, r1
 8001406:	4647      	mov	r7, r8
 8001408:	e651      	b.n	80010ae <__aeabi_dadd+0xae>
 800140a:	4cb5      	ldr	r4, [pc, #724]	@ (80016e0 <__aeabi_dadd+0x6e0>)
 800140c:	45a0      	cmp	r8, r4
 800140e:	d100      	bne.n	8001412 <__aeabi_dadd+0x412>
 8001410:	e100      	b.n	8001614 <__aeabi_dadd+0x614>
 8001412:	2701      	movs	r7, #1
 8001414:	2938      	cmp	r1, #56	@ 0x38
 8001416:	dd00      	ble.n	800141a <__aeabi_dadd+0x41a>
 8001418:	e6b8      	b.n	800118c <__aeabi_dadd+0x18c>
 800141a:	2480      	movs	r4, #128	@ 0x80
 800141c:	0424      	lsls	r4, r4, #16
 800141e:	4326      	orrs	r6, r4
 8001420:	e6a3      	b.n	800116a <__aeabi_dadd+0x16a>
 8001422:	4eb0      	ldr	r6, [pc, #704]	@ (80016e4 <__aeabi_dadd+0x6e4>)
 8001424:	1ae4      	subs	r4, r4, r3
 8001426:	4016      	ands	r6, r2
 8001428:	077b      	lsls	r3, r7, #29
 800142a:	d000      	beq.n	800142e <__aeabi_dadd+0x42e>
 800142c:	e73f      	b.n	80012ae <__aeabi_dadd+0x2ae>
 800142e:	e743      	b.n	80012b8 <__aeabi_dadd+0x2b8>
 8001430:	000f      	movs	r7, r1
 8001432:	0018      	movs	r0, r3
 8001434:	3f20      	subs	r7, #32
 8001436:	40f8      	lsrs	r0, r7
 8001438:	4684      	mov	ip, r0
 800143a:	2920      	cmp	r1, #32
 800143c:	d003      	beq.n	8001446 <__aeabi_dadd+0x446>
 800143e:	2740      	movs	r7, #64	@ 0x40
 8001440:	1a79      	subs	r1, r7, r1
 8001442:	408b      	lsls	r3, r1
 8001444:	431a      	orrs	r2, r3
 8001446:	1e53      	subs	r3, r2, #1
 8001448:	419a      	sbcs	r2, r3
 800144a:	4663      	mov	r3, ip
 800144c:	0017      	movs	r7, r2
 800144e:	431f      	orrs	r7, r3
 8001450:	e622      	b.n	8001098 <__aeabi_dadd+0x98>
 8001452:	48a4      	ldr	r0, [pc, #656]	@ (80016e4 <__aeabi_dadd+0x6e4>)
 8001454:	1ae1      	subs	r1, r4, r3
 8001456:	4010      	ands	r0, r2
 8001458:	0747      	lsls	r7, r0, #29
 800145a:	08c0      	lsrs	r0, r0, #3
 800145c:	e707      	b.n	800126e <__aeabi_dadd+0x26e>
 800145e:	0034      	movs	r4, r6
 8001460:	4648      	mov	r0, r9
 8001462:	4304      	orrs	r4, r0
 8001464:	d100      	bne.n	8001468 <__aeabi_dadd+0x468>
 8001466:	e0fa      	b.n	800165e <__aeabi_dadd+0x65e>
 8001468:	1e4c      	subs	r4, r1, #1
 800146a:	2901      	cmp	r1, #1
 800146c:	d100      	bne.n	8001470 <__aeabi_dadd+0x470>
 800146e:	e0d7      	b.n	8001620 <__aeabi_dadd+0x620>
 8001470:	4f9b      	ldr	r7, [pc, #620]	@ (80016e0 <__aeabi_dadd+0x6e0>)
 8001472:	42b9      	cmp	r1, r7
 8001474:	d100      	bne.n	8001478 <__aeabi_dadd+0x478>
 8001476:	e0e2      	b.n	800163e <__aeabi_dadd+0x63e>
 8001478:	2701      	movs	r7, #1
 800147a:	2c38      	cmp	r4, #56	@ 0x38
 800147c:	dd00      	ble.n	8001480 <__aeabi_dadd+0x480>
 800147e:	e74f      	b.n	8001320 <__aeabi_dadd+0x320>
 8001480:	0021      	movs	r1, r4
 8001482:	e73c      	b.n	80012fe <__aeabi_dadd+0x2fe>
 8001484:	4c96      	ldr	r4, [pc, #600]	@ (80016e0 <__aeabi_dadd+0x6e0>)
 8001486:	42a1      	cmp	r1, r4
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x48c>
 800148a:	e0dd      	b.n	8001648 <__aeabi_dadd+0x648>
 800148c:	444a      	add	r2, r9
 800148e:	454a      	cmp	r2, r9
 8001490:	4180      	sbcs	r0, r0
 8001492:	18f3      	adds	r3, r6, r3
 8001494:	4240      	negs	r0, r0
 8001496:	1818      	adds	r0, r3, r0
 8001498:	07c7      	lsls	r7, r0, #31
 800149a:	0852      	lsrs	r2, r2, #1
 800149c:	4317      	orrs	r7, r2
 800149e:	0846      	lsrs	r6, r0, #1
 80014a0:	0752      	lsls	r2, r2, #29
 80014a2:	d005      	beq.n	80014b0 <__aeabi_dadd+0x4b0>
 80014a4:	220f      	movs	r2, #15
 80014a6:	000c      	movs	r4, r1
 80014a8:	403a      	ands	r2, r7
 80014aa:	2a04      	cmp	r2, #4
 80014ac:	d000      	beq.n	80014b0 <__aeabi_dadd+0x4b0>
 80014ae:	e62c      	b.n	800110a <__aeabi_dadd+0x10a>
 80014b0:	0776      	lsls	r6, r6, #29
 80014b2:	08ff      	lsrs	r7, r7, #3
 80014b4:	4337      	orrs	r7, r6
 80014b6:	0900      	lsrs	r0, r0, #4
 80014b8:	e6d9      	b.n	800126e <__aeabi_dadd+0x26e>
 80014ba:	2700      	movs	r7, #0
 80014bc:	2600      	movs	r6, #0
 80014be:	e6e8      	b.n	8001292 <__aeabi_dadd+0x292>
 80014c0:	4649      	mov	r1, r9
 80014c2:	1a57      	subs	r7, r2, r1
 80014c4:	42ba      	cmp	r2, r7
 80014c6:	4192      	sbcs	r2, r2
 80014c8:	1b9e      	subs	r6, r3, r6
 80014ca:	4252      	negs	r2, r2
 80014cc:	4665      	mov	r5, ip
 80014ce:	1ab6      	subs	r6, r6, r2
 80014d0:	e5ed      	b.n	80010ae <__aeabi_dadd+0xae>
 80014d2:	2900      	cmp	r1, #0
 80014d4:	d000      	beq.n	80014d8 <__aeabi_dadd+0x4d8>
 80014d6:	e0c6      	b.n	8001666 <__aeabi_dadd+0x666>
 80014d8:	2f00      	cmp	r7, #0
 80014da:	d167      	bne.n	80015ac <__aeabi_dadd+0x5ac>
 80014dc:	2680      	movs	r6, #128	@ 0x80
 80014de:	2500      	movs	r5, #0
 80014e0:	4c7f      	ldr	r4, [pc, #508]	@ (80016e0 <__aeabi_dadd+0x6e0>)
 80014e2:	0336      	lsls	r6, r6, #12
 80014e4:	e6d5      	b.n	8001292 <__aeabi_dadd+0x292>
 80014e6:	4665      	mov	r5, ip
 80014e8:	000c      	movs	r4, r1
 80014ea:	001e      	movs	r6, r3
 80014ec:	08d0      	lsrs	r0, r2, #3
 80014ee:	e6e4      	b.n	80012ba <__aeabi_dadd+0x2ba>
 80014f0:	444a      	add	r2, r9
 80014f2:	454a      	cmp	r2, r9
 80014f4:	4180      	sbcs	r0, r0
 80014f6:	18f3      	adds	r3, r6, r3
 80014f8:	4240      	negs	r0, r0
 80014fa:	1818      	adds	r0, r3, r0
 80014fc:	0011      	movs	r1, r2
 80014fe:	0203      	lsls	r3, r0, #8
 8001500:	d400      	bmi.n	8001504 <__aeabi_dadd+0x504>
 8001502:	e096      	b.n	8001632 <__aeabi_dadd+0x632>
 8001504:	4b77      	ldr	r3, [pc, #476]	@ (80016e4 <__aeabi_dadd+0x6e4>)
 8001506:	0849      	lsrs	r1, r1, #1
 8001508:	4018      	ands	r0, r3
 800150a:	07c3      	lsls	r3, r0, #31
 800150c:	430b      	orrs	r3, r1
 800150e:	0844      	lsrs	r4, r0, #1
 8001510:	0749      	lsls	r1, r1, #29
 8001512:	d100      	bne.n	8001516 <__aeabi_dadd+0x516>
 8001514:	e129      	b.n	800176a <__aeabi_dadd+0x76a>
 8001516:	220f      	movs	r2, #15
 8001518:	401a      	ands	r2, r3
 800151a:	2a04      	cmp	r2, #4
 800151c:	d100      	bne.n	8001520 <__aeabi_dadd+0x520>
 800151e:	e0ea      	b.n	80016f6 <__aeabi_dadd+0x6f6>
 8001520:	1d1f      	adds	r7, r3, #4
 8001522:	429f      	cmp	r7, r3
 8001524:	41b6      	sbcs	r6, r6
 8001526:	4276      	negs	r6, r6
 8001528:	1936      	adds	r6, r6, r4
 800152a:	2402      	movs	r4, #2
 800152c:	e6c4      	b.n	80012b8 <__aeabi_dadd+0x2b8>
 800152e:	4649      	mov	r1, r9
 8001530:	1a8f      	subs	r7, r1, r2
 8001532:	45b9      	cmp	r9, r7
 8001534:	4180      	sbcs	r0, r0
 8001536:	1af6      	subs	r6, r6, r3
 8001538:	4240      	negs	r0, r0
 800153a:	1a36      	subs	r6, r6, r0
 800153c:	0233      	lsls	r3, r6, #8
 800153e:	d406      	bmi.n	800154e <__aeabi_dadd+0x54e>
 8001540:	0773      	lsls	r3, r6, #29
 8001542:	08ff      	lsrs	r7, r7, #3
 8001544:	2101      	movs	r1, #1
 8001546:	431f      	orrs	r7, r3
 8001548:	08f0      	lsrs	r0, r6, #3
 800154a:	e690      	b.n	800126e <__aeabi_dadd+0x26e>
 800154c:	4665      	mov	r5, ip
 800154e:	2401      	movs	r4, #1
 8001550:	e5ab      	b.n	80010aa <__aeabi_dadd+0xaa>
 8001552:	464b      	mov	r3, r9
 8001554:	0777      	lsls	r7, r6, #29
 8001556:	08d8      	lsrs	r0, r3, #3
 8001558:	4307      	orrs	r7, r0
 800155a:	08f0      	lsrs	r0, r6, #3
 800155c:	e6b4      	b.n	80012c8 <__aeabi_dadd+0x2c8>
 800155e:	000f      	movs	r7, r1
 8001560:	0018      	movs	r0, r3
 8001562:	3f20      	subs	r7, #32
 8001564:	40f8      	lsrs	r0, r7
 8001566:	4684      	mov	ip, r0
 8001568:	2920      	cmp	r1, #32
 800156a:	d003      	beq.n	8001574 <__aeabi_dadd+0x574>
 800156c:	2740      	movs	r7, #64	@ 0x40
 800156e:	1a79      	subs	r1, r7, r1
 8001570:	408b      	lsls	r3, r1
 8001572:	431a      	orrs	r2, r3
 8001574:	1e53      	subs	r3, r2, #1
 8001576:	419a      	sbcs	r2, r3
 8001578:	4663      	mov	r3, ip
 800157a:	0017      	movs	r7, r2
 800157c:	431f      	orrs	r7, r3
 800157e:	e635      	b.n	80011ec <__aeabi_dadd+0x1ec>
 8001580:	2500      	movs	r5, #0
 8001582:	2400      	movs	r4, #0
 8001584:	2600      	movs	r6, #0
 8001586:	e684      	b.n	8001292 <__aeabi_dadd+0x292>
 8001588:	000c      	movs	r4, r1
 800158a:	0035      	movs	r5, r6
 800158c:	3c20      	subs	r4, #32
 800158e:	40e5      	lsrs	r5, r4
 8001590:	2920      	cmp	r1, #32
 8001592:	d005      	beq.n	80015a0 <__aeabi_dadd+0x5a0>
 8001594:	2440      	movs	r4, #64	@ 0x40
 8001596:	1a61      	subs	r1, r4, r1
 8001598:	408e      	lsls	r6, r1
 800159a:	4649      	mov	r1, r9
 800159c:	4331      	orrs	r1, r6
 800159e:	4689      	mov	r9, r1
 80015a0:	4648      	mov	r0, r9
 80015a2:	1e41      	subs	r1, r0, #1
 80015a4:	4188      	sbcs	r0, r1
 80015a6:	0007      	movs	r7, r0
 80015a8:	432f      	orrs	r7, r5
 80015aa:	e5ef      	b.n	800118c <__aeabi_dadd+0x18c>
 80015ac:	08d2      	lsrs	r2, r2, #3
 80015ae:	075f      	lsls	r7, r3, #29
 80015b0:	4665      	mov	r5, ip
 80015b2:	4317      	orrs	r7, r2
 80015b4:	08d8      	lsrs	r0, r3, #3
 80015b6:	e687      	b.n	80012c8 <__aeabi_dadd+0x2c8>
 80015b8:	1a17      	subs	r7, r2, r0
 80015ba:	42ba      	cmp	r2, r7
 80015bc:	4192      	sbcs	r2, r2
 80015be:	1b9e      	subs	r6, r3, r6
 80015c0:	4252      	negs	r2, r2
 80015c2:	1ab6      	subs	r6, r6, r2
 80015c4:	0233      	lsls	r3, r6, #8
 80015c6:	d4c1      	bmi.n	800154c <__aeabi_dadd+0x54c>
 80015c8:	0773      	lsls	r3, r6, #29
 80015ca:	08ff      	lsrs	r7, r7, #3
 80015cc:	4665      	mov	r5, ip
 80015ce:	2101      	movs	r1, #1
 80015d0:	431f      	orrs	r7, r3
 80015d2:	08f0      	lsrs	r0, r6, #3
 80015d4:	e64b      	b.n	800126e <__aeabi_dadd+0x26e>
 80015d6:	2f00      	cmp	r7, #0
 80015d8:	d07b      	beq.n	80016d2 <__aeabi_dadd+0x6d2>
 80015da:	4665      	mov	r5, ip
 80015dc:	001e      	movs	r6, r3
 80015de:	4691      	mov	r9, r2
 80015e0:	e63f      	b.n	8001262 <__aeabi_dadd+0x262>
 80015e2:	1a81      	subs	r1, r0, r2
 80015e4:	4688      	mov	r8, r1
 80015e6:	45c1      	cmp	r9, r8
 80015e8:	41a4      	sbcs	r4, r4
 80015ea:	1af1      	subs	r1, r6, r3
 80015ec:	4264      	negs	r4, r4
 80015ee:	1b09      	subs	r1, r1, r4
 80015f0:	2480      	movs	r4, #128	@ 0x80
 80015f2:	0424      	lsls	r4, r4, #16
 80015f4:	4221      	tst	r1, r4
 80015f6:	d077      	beq.n	80016e8 <__aeabi_dadd+0x6e8>
 80015f8:	1a10      	subs	r0, r2, r0
 80015fa:	4282      	cmp	r2, r0
 80015fc:	4192      	sbcs	r2, r2
 80015fe:	0007      	movs	r7, r0
 8001600:	1b9e      	subs	r6, r3, r6
 8001602:	4252      	negs	r2, r2
 8001604:	1ab6      	subs	r6, r6, r2
 8001606:	4337      	orrs	r7, r6
 8001608:	d000      	beq.n	800160c <__aeabi_dadd+0x60c>
 800160a:	e0a0      	b.n	800174e <__aeabi_dadd+0x74e>
 800160c:	4665      	mov	r5, ip
 800160e:	2400      	movs	r4, #0
 8001610:	2600      	movs	r6, #0
 8001612:	e63e      	b.n	8001292 <__aeabi_dadd+0x292>
 8001614:	075f      	lsls	r7, r3, #29
 8001616:	08d2      	lsrs	r2, r2, #3
 8001618:	4665      	mov	r5, ip
 800161a:	4317      	orrs	r7, r2
 800161c:	08d8      	lsrs	r0, r3, #3
 800161e:	e653      	b.n	80012c8 <__aeabi_dadd+0x2c8>
 8001620:	1881      	adds	r1, r0, r2
 8001622:	4291      	cmp	r1, r2
 8001624:	4192      	sbcs	r2, r2
 8001626:	18f0      	adds	r0, r6, r3
 8001628:	4252      	negs	r2, r2
 800162a:	1880      	adds	r0, r0, r2
 800162c:	0203      	lsls	r3, r0, #8
 800162e:	d500      	bpl.n	8001632 <__aeabi_dadd+0x632>
 8001630:	e768      	b.n	8001504 <__aeabi_dadd+0x504>
 8001632:	0747      	lsls	r7, r0, #29
 8001634:	08c9      	lsrs	r1, r1, #3
 8001636:	430f      	orrs	r7, r1
 8001638:	08c0      	lsrs	r0, r0, #3
 800163a:	2101      	movs	r1, #1
 800163c:	e617      	b.n	800126e <__aeabi_dadd+0x26e>
 800163e:	08d2      	lsrs	r2, r2, #3
 8001640:	075f      	lsls	r7, r3, #29
 8001642:	4317      	orrs	r7, r2
 8001644:	08d8      	lsrs	r0, r3, #3
 8001646:	e63f      	b.n	80012c8 <__aeabi_dadd+0x2c8>
 8001648:	000c      	movs	r4, r1
 800164a:	2600      	movs	r6, #0
 800164c:	2700      	movs	r7, #0
 800164e:	e620      	b.n	8001292 <__aeabi_dadd+0x292>
 8001650:	2900      	cmp	r1, #0
 8001652:	d156      	bne.n	8001702 <__aeabi_dadd+0x702>
 8001654:	075f      	lsls	r7, r3, #29
 8001656:	08d2      	lsrs	r2, r2, #3
 8001658:	4317      	orrs	r7, r2
 800165a:	08d8      	lsrs	r0, r3, #3
 800165c:	e634      	b.n	80012c8 <__aeabi_dadd+0x2c8>
 800165e:	000c      	movs	r4, r1
 8001660:	001e      	movs	r6, r3
 8001662:	08d0      	lsrs	r0, r2, #3
 8001664:	e629      	b.n	80012ba <__aeabi_dadd+0x2ba>
 8001666:	08c1      	lsrs	r1, r0, #3
 8001668:	0770      	lsls	r0, r6, #29
 800166a:	4301      	orrs	r1, r0
 800166c:	08f0      	lsrs	r0, r6, #3
 800166e:	2f00      	cmp	r7, #0
 8001670:	d062      	beq.n	8001738 <__aeabi_dadd+0x738>
 8001672:	2480      	movs	r4, #128	@ 0x80
 8001674:	0324      	lsls	r4, r4, #12
 8001676:	4220      	tst	r0, r4
 8001678:	d007      	beq.n	800168a <__aeabi_dadd+0x68a>
 800167a:	08de      	lsrs	r6, r3, #3
 800167c:	4226      	tst	r6, r4
 800167e:	d104      	bne.n	800168a <__aeabi_dadd+0x68a>
 8001680:	4665      	mov	r5, ip
 8001682:	0030      	movs	r0, r6
 8001684:	08d1      	lsrs	r1, r2, #3
 8001686:	075b      	lsls	r3, r3, #29
 8001688:	4319      	orrs	r1, r3
 800168a:	0f4f      	lsrs	r7, r1, #29
 800168c:	00c9      	lsls	r1, r1, #3
 800168e:	08c9      	lsrs	r1, r1, #3
 8001690:	077f      	lsls	r7, r7, #29
 8001692:	430f      	orrs	r7, r1
 8001694:	e618      	b.n	80012c8 <__aeabi_dadd+0x2c8>
 8001696:	000c      	movs	r4, r1
 8001698:	0030      	movs	r0, r6
 800169a:	3c20      	subs	r4, #32
 800169c:	40e0      	lsrs	r0, r4
 800169e:	4684      	mov	ip, r0
 80016a0:	2920      	cmp	r1, #32
 80016a2:	d005      	beq.n	80016b0 <__aeabi_dadd+0x6b0>
 80016a4:	2440      	movs	r4, #64	@ 0x40
 80016a6:	1a61      	subs	r1, r4, r1
 80016a8:	408e      	lsls	r6, r1
 80016aa:	4649      	mov	r1, r9
 80016ac:	4331      	orrs	r1, r6
 80016ae:	4689      	mov	r9, r1
 80016b0:	4648      	mov	r0, r9
 80016b2:	1e41      	subs	r1, r0, #1
 80016b4:	4188      	sbcs	r0, r1
 80016b6:	4661      	mov	r1, ip
 80016b8:	0007      	movs	r7, r0
 80016ba:	430f      	orrs	r7, r1
 80016bc:	e630      	b.n	8001320 <__aeabi_dadd+0x320>
 80016be:	2120      	movs	r1, #32
 80016c0:	2700      	movs	r7, #0
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	e50e      	b.n	80010e4 <__aeabi_dadd+0xe4>
 80016c6:	001e      	movs	r6, r3
 80016c8:	2f00      	cmp	r7, #0
 80016ca:	d000      	beq.n	80016ce <__aeabi_dadd+0x6ce>
 80016cc:	e522      	b.n	8001114 <__aeabi_dadd+0x114>
 80016ce:	2400      	movs	r4, #0
 80016d0:	e758      	b.n	8001584 <__aeabi_dadd+0x584>
 80016d2:	2500      	movs	r5, #0
 80016d4:	2400      	movs	r4, #0
 80016d6:	2600      	movs	r6, #0
 80016d8:	e5db      	b.n	8001292 <__aeabi_dadd+0x292>
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	000007fe 	.word	0x000007fe
 80016e0:	000007ff 	.word	0x000007ff
 80016e4:	ff7fffff 	.word	0xff7fffff
 80016e8:	4647      	mov	r7, r8
 80016ea:	430f      	orrs	r7, r1
 80016ec:	d100      	bne.n	80016f0 <__aeabi_dadd+0x6f0>
 80016ee:	e747      	b.n	8001580 <__aeabi_dadd+0x580>
 80016f0:	000e      	movs	r6, r1
 80016f2:	46c1      	mov	r9, r8
 80016f4:	e5b5      	b.n	8001262 <__aeabi_dadd+0x262>
 80016f6:	08df      	lsrs	r7, r3, #3
 80016f8:	0764      	lsls	r4, r4, #29
 80016fa:	2102      	movs	r1, #2
 80016fc:	4327      	orrs	r7, r4
 80016fe:	0900      	lsrs	r0, r0, #4
 8001700:	e5b5      	b.n	800126e <__aeabi_dadd+0x26e>
 8001702:	0019      	movs	r1, r3
 8001704:	08c0      	lsrs	r0, r0, #3
 8001706:	0777      	lsls	r7, r6, #29
 8001708:	4307      	orrs	r7, r0
 800170a:	4311      	orrs	r1, r2
 800170c:	08f0      	lsrs	r0, r6, #3
 800170e:	2900      	cmp	r1, #0
 8001710:	d100      	bne.n	8001714 <__aeabi_dadd+0x714>
 8001712:	e5d9      	b.n	80012c8 <__aeabi_dadd+0x2c8>
 8001714:	2180      	movs	r1, #128	@ 0x80
 8001716:	0309      	lsls	r1, r1, #12
 8001718:	4208      	tst	r0, r1
 800171a:	d007      	beq.n	800172c <__aeabi_dadd+0x72c>
 800171c:	08dc      	lsrs	r4, r3, #3
 800171e:	420c      	tst	r4, r1
 8001720:	d104      	bne.n	800172c <__aeabi_dadd+0x72c>
 8001722:	08d2      	lsrs	r2, r2, #3
 8001724:	075b      	lsls	r3, r3, #29
 8001726:	431a      	orrs	r2, r3
 8001728:	0017      	movs	r7, r2
 800172a:	0020      	movs	r0, r4
 800172c:	0f7b      	lsrs	r3, r7, #29
 800172e:	00ff      	lsls	r7, r7, #3
 8001730:	08ff      	lsrs	r7, r7, #3
 8001732:	075b      	lsls	r3, r3, #29
 8001734:	431f      	orrs	r7, r3
 8001736:	e5c7      	b.n	80012c8 <__aeabi_dadd+0x2c8>
 8001738:	000f      	movs	r7, r1
 800173a:	e5c5      	b.n	80012c8 <__aeabi_dadd+0x2c8>
 800173c:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <__aeabi_dadd+0x788>)
 800173e:	08d2      	lsrs	r2, r2, #3
 8001740:	4033      	ands	r3, r6
 8001742:	075f      	lsls	r7, r3, #29
 8001744:	025b      	lsls	r3, r3, #9
 8001746:	2401      	movs	r4, #1
 8001748:	4317      	orrs	r7, r2
 800174a:	0b1e      	lsrs	r6, r3, #12
 800174c:	e5a1      	b.n	8001292 <__aeabi_dadd+0x292>
 800174e:	4226      	tst	r6, r4
 8001750:	d012      	beq.n	8001778 <__aeabi_dadd+0x778>
 8001752:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <__aeabi_dadd+0x788>)
 8001754:	4665      	mov	r5, ip
 8001756:	0002      	movs	r2, r0
 8001758:	2401      	movs	r4, #1
 800175a:	401e      	ands	r6, r3
 800175c:	e4e6      	b.n	800112c <__aeabi_dadd+0x12c>
 800175e:	0021      	movs	r1, r4
 8001760:	e585      	b.n	800126e <__aeabi_dadd+0x26e>
 8001762:	0017      	movs	r7, r2
 8001764:	e5a8      	b.n	80012b8 <__aeabi_dadd+0x2b8>
 8001766:	003a      	movs	r2, r7
 8001768:	e4d4      	b.n	8001114 <__aeabi_dadd+0x114>
 800176a:	08db      	lsrs	r3, r3, #3
 800176c:	0764      	lsls	r4, r4, #29
 800176e:	431c      	orrs	r4, r3
 8001770:	0027      	movs	r7, r4
 8001772:	2102      	movs	r1, #2
 8001774:	0900      	lsrs	r0, r0, #4
 8001776:	e57a      	b.n	800126e <__aeabi_dadd+0x26e>
 8001778:	08c0      	lsrs	r0, r0, #3
 800177a:	0777      	lsls	r7, r6, #29
 800177c:	4307      	orrs	r7, r0
 800177e:	4665      	mov	r5, ip
 8001780:	2100      	movs	r1, #0
 8001782:	08f0      	lsrs	r0, r6, #3
 8001784:	e573      	b.n	800126e <__aeabi_dadd+0x26e>
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	ff7fffff 	.word	0xff7fffff

0800178c <__aeabi_dmul>:
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	4657      	mov	r7, sl
 8001790:	464e      	mov	r6, r9
 8001792:	46de      	mov	lr, fp
 8001794:	4645      	mov	r5, r8
 8001796:	b5e0      	push	{r5, r6, r7, lr}
 8001798:	001f      	movs	r7, r3
 800179a:	030b      	lsls	r3, r1, #12
 800179c:	0b1b      	lsrs	r3, r3, #12
 800179e:	0016      	movs	r6, r2
 80017a0:	469a      	mov	sl, r3
 80017a2:	0fca      	lsrs	r2, r1, #31
 80017a4:	004b      	lsls	r3, r1, #1
 80017a6:	0004      	movs	r4, r0
 80017a8:	4691      	mov	r9, r2
 80017aa:	b085      	sub	sp, #20
 80017ac:	0d5b      	lsrs	r3, r3, #21
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dmul+0x26>
 80017b0:	e1cf      	b.n	8001b52 <__aeabi_dmul+0x3c6>
 80017b2:	4acd      	ldr	r2, [pc, #820]	@ (8001ae8 <__aeabi_dmul+0x35c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d055      	beq.n	8001864 <__aeabi_dmul+0xd8>
 80017b8:	4651      	mov	r1, sl
 80017ba:	0f42      	lsrs	r2, r0, #29
 80017bc:	00c9      	lsls	r1, r1, #3
 80017be:	430a      	orrs	r2, r1
 80017c0:	2180      	movs	r1, #128	@ 0x80
 80017c2:	0409      	lsls	r1, r1, #16
 80017c4:	4311      	orrs	r1, r2
 80017c6:	00c2      	lsls	r2, r0, #3
 80017c8:	4690      	mov	r8, r2
 80017ca:	4ac8      	ldr	r2, [pc, #800]	@ (8001aec <__aeabi_dmul+0x360>)
 80017cc:	468a      	mov	sl, r1
 80017ce:	4693      	mov	fp, r2
 80017d0:	449b      	add	fp, r3
 80017d2:	2300      	movs	r3, #0
 80017d4:	2500      	movs	r5, #0
 80017d6:	9302      	str	r3, [sp, #8]
 80017d8:	033c      	lsls	r4, r7, #12
 80017da:	007b      	lsls	r3, r7, #1
 80017dc:	0ffa      	lsrs	r2, r7, #31
 80017de:	9601      	str	r6, [sp, #4]
 80017e0:	0b24      	lsrs	r4, r4, #12
 80017e2:	0d5b      	lsrs	r3, r3, #21
 80017e4:	9200      	str	r2, [sp, #0]
 80017e6:	d100      	bne.n	80017ea <__aeabi_dmul+0x5e>
 80017e8:	e188      	b.n	8001afc <__aeabi_dmul+0x370>
 80017ea:	4abf      	ldr	r2, [pc, #764]	@ (8001ae8 <__aeabi_dmul+0x35c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d100      	bne.n	80017f2 <__aeabi_dmul+0x66>
 80017f0:	e092      	b.n	8001918 <__aeabi_dmul+0x18c>
 80017f2:	4abe      	ldr	r2, [pc, #760]	@ (8001aec <__aeabi_dmul+0x360>)
 80017f4:	4694      	mov	ip, r2
 80017f6:	4463      	add	r3, ip
 80017f8:	449b      	add	fp, r3
 80017fa:	2d0a      	cmp	r5, #10
 80017fc:	dc42      	bgt.n	8001884 <__aeabi_dmul+0xf8>
 80017fe:	00e4      	lsls	r4, r4, #3
 8001800:	0f73      	lsrs	r3, r6, #29
 8001802:	4323      	orrs	r3, r4
 8001804:	2480      	movs	r4, #128	@ 0x80
 8001806:	4649      	mov	r1, r9
 8001808:	0424      	lsls	r4, r4, #16
 800180a:	431c      	orrs	r4, r3
 800180c:	00f3      	lsls	r3, r6, #3
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	9b00      	ldr	r3, [sp, #0]
 8001812:	2000      	movs	r0, #0
 8001814:	4059      	eors	r1, r3
 8001816:	b2cb      	uxtb	r3, r1
 8001818:	9303      	str	r3, [sp, #12]
 800181a:	2d02      	cmp	r5, #2
 800181c:	dc00      	bgt.n	8001820 <__aeabi_dmul+0x94>
 800181e:	e094      	b.n	800194a <__aeabi_dmul+0x1be>
 8001820:	2301      	movs	r3, #1
 8001822:	40ab      	lsls	r3, r5
 8001824:	001d      	movs	r5, r3
 8001826:	23a6      	movs	r3, #166	@ 0xa6
 8001828:	002a      	movs	r2, r5
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	401a      	ands	r2, r3
 800182e:	421d      	tst	r5, r3
 8001830:	d000      	beq.n	8001834 <__aeabi_dmul+0xa8>
 8001832:	e229      	b.n	8001c88 <__aeabi_dmul+0x4fc>
 8001834:	2390      	movs	r3, #144	@ 0x90
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	421d      	tst	r5, r3
 800183a:	d100      	bne.n	800183e <__aeabi_dmul+0xb2>
 800183c:	e24d      	b.n	8001cda <__aeabi_dmul+0x54e>
 800183e:	2300      	movs	r3, #0
 8001840:	2480      	movs	r4, #128	@ 0x80
 8001842:	4699      	mov	r9, r3
 8001844:	0324      	lsls	r4, r4, #12
 8001846:	4ba8      	ldr	r3, [pc, #672]	@ (8001ae8 <__aeabi_dmul+0x35c>)
 8001848:	0010      	movs	r0, r2
 800184a:	464a      	mov	r2, r9
 800184c:	051b      	lsls	r3, r3, #20
 800184e:	4323      	orrs	r3, r4
 8001850:	07d2      	lsls	r2, r2, #31
 8001852:	4313      	orrs	r3, r2
 8001854:	0019      	movs	r1, r3
 8001856:	b005      	add	sp, #20
 8001858:	bcf0      	pop	{r4, r5, r6, r7}
 800185a:	46bb      	mov	fp, r7
 800185c:	46b2      	mov	sl, r6
 800185e:	46a9      	mov	r9, r5
 8001860:	46a0      	mov	r8, r4
 8001862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001864:	4652      	mov	r2, sl
 8001866:	4302      	orrs	r2, r0
 8001868:	4690      	mov	r8, r2
 800186a:	d000      	beq.n	800186e <__aeabi_dmul+0xe2>
 800186c:	e1ac      	b.n	8001bc8 <__aeabi_dmul+0x43c>
 800186e:	469b      	mov	fp, r3
 8001870:	2302      	movs	r3, #2
 8001872:	4692      	mov	sl, r2
 8001874:	2508      	movs	r5, #8
 8001876:	9302      	str	r3, [sp, #8]
 8001878:	e7ae      	b.n	80017d8 <__aeabi_dmul+0x4c>
 800187a:	9b00      	ldr	r3, [sp, #0]
 800187c:	46a2      	mov	sl, r4
 800187e:	4699      	mov	r9, r3
 8001880:	9b01      	ldr	r3, [sp, #4]
 8001882:	4698      	mov	r8, r3
 8001884:	9b02      	ldr	r3, [sp, #8]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d100      	bne.n	800188c <__aeabi_dmul+0x100>
 800188a:	e1ca      	b.n	8001c22 <__aeabi_dmul+0x496>
 800188c:	2b03      	cmp	r3, #3
 800188e:	d100      	bne.n	8001892 <__aeabi_dmul+0x106>
 8001890:	e192      	b.n	8001bb8 <__aeabi_dmul+0x42c>
 8001892:	2b01      	cmp	r3, #1
 8001894:	d110      	bne.n	80018b8 <__aeabi_dmul+0x12c>
 8001896:	2300      	movs	r3, #0
 8001898:	2400      	movs	r4, #0
 800189a:	2200      	movs	r2, #0
 800189c:	e7d4      	b.n	8001848 <__aeabi_dmul+0xbc>
 800189e:	2201      	movs	r2, #1
 80018a0:	087b      	lsrs	r3, r7, #1
 80018a2:	403a      	ands	r2, r7
 80018a4:	4313      	orrs	r3, r2
 80018a6:	4652      	mov	r2, sl
 80018a8:	07d2      	lsls	r2, r2, #31
 80018aa:	4313      	orrs	r3, r2
 80018ac:	4698      	mov	r8, r3
 80018ae:	4653      	mov	r3, sl
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	469a      	mov	sl, r3
 80018b4:	9b03      	ldr	r3, [sp, #12]
 80018b6:	4699      	mov	r9, r3
 80018b8:	465b      	mov	r3, fp
 80018ba:	1c58      	adds	r0, r3, #1
 80018bc:	2380      	movs	r3, #128	@ 0x80
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	445b      	add	r3, fp
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	dc00      	bgt.n	80018c8 <__aeabi_dmul+0x13c>
 80018c6:	e1b1      	b.n	8001c2c <__aeabi_dmul+0x4a0>
 80018c8:	4642      	mov	r2, r8
 80018ca:	0752      	lsls	r2, r2, #29
 80018cc:	d00b      	beq.n	80018e6 <__aeabi_dmul+0x15a>
 80018ce:	220f      	movs	r2, #15
 80018d0:	4641      	mov	r1, r8
 80018d2:	400a      	ands	r2, r1
 80018d4:	2a04      	cmp	r2, #4
 80018d6:	d006      	beq.n	80018e6 <__aeabi_dmul+0x15a>
 80018d8:	4642      	mov	r2, r8
 80018da:	1d11      	adds	r1, r2, #4
 80018dc:	4541      	cmp	r1, r8
 80018de:	4192      	sbcs	r2, r2
 80018e0:	4688      	mov	r8, r1
 80018e2:	4252      	negs	r2, r2
 80018e4:	4492      	add	sl, r2
 80018e6:	4652      	mov	r2, sl
 80018e8:	01d2      	lsls	r2, r2, #7
 80018ea:	d506      	bpl.n	80018fa <__aeabi_dmul+0x16e>
 80018ec:	4652      	mov	r2, sl
 80018ee:	4b80      	ldr	r3, [pc, #512]	@ (8001af0 <__aeabi_dmul+0x364>)
 80018f0:	401a      	ands	r2, r3
 80018f2:	2380      	movs	r3, #128	@ 0x80
 80018f4:	4692      	mov	sl, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	18c3      	adds	r3, r0, r3
 80018fa:	4a7e      	ldr	r2, [pc, #504]	@ (8001af4 <__aeabi_dmul+0x368>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	dd00      	ble.n	8001902 <__aeabi_dmul+0x176>
 8001900:	e18f      	b.n	8001c22 <__aeabi_dmul+0x496>
 8001902:	4642      	mov	r2, r8
 8001904:	08d1      	lsrs	r1, r2, #3
 8001906:	4652      	mov	r2, sl
 8001908:	0752      	lsls	r2, r2, #29
 800190a:	430a      	orrs	r2, r1
 800190c:	4651      	mov	r1, sl
 800190e:	055b      	lsls	r3, r3, #21
 8001910:	024c      	lsls	r4, r1, #9
 8001912:	0b24      	lsrs	r4, r4, #12
 8001914:	0d5b      	lsrs	r3, r3, #21
 8001916:	e797      	b.n	8001848 <__aeabi_dmul+0xbc>
 8001918:	4b73      	ldr	r3, [pc, #460]	@ (8001ae8 <__aeabi_dmul+0x35c>)
 800191a:	4326      	orrs	r6, r4
 800191c:	469c      	mov	ip, r3
 800191e:	44e3      	add	fp, ip
 8001920:	2e00      	cmp	r6, #0
 8001922:	d100      	bne.n	8001926 <__aeabi_dmul+0x19a>
 8001924:	e16f      	b.n	8001c06 <__aeabi_dmul+0x47a>
 8001926:	2303      	movs	r3, #3
 8001928:	4649      	mov	r1, r9
 800192a:	431d      	orrs	r5, r3
 800192c:	9b00      	ldr	r3, [sp, #0]
 800192e:	4059      	eors	r1, r3
 8001930:	b2cb      	uxtb	r3, r1
 8001932:	9303      	str	r3, [sp, #12]
 8001934:	2d0a      	cmp	r5, #10
 8001936:	dd00      	ble.n	800193a <__aeabi_dmul+0x1ae>
 8001938:	e133      	b.n	8001ba2 <__aeabi_dmul+0x416>
 800193a:	2301      	movs	r3, #1
 800193c:	40ab      	lsls	r3, r5
 800193e:	001d      	movs	r5, r3
 8001940:	2303      	movs	r3, #3
 8001942:	9302      	str	r3, [sp, #8]
 8001944:	2288      	movs	r2, #136	@ 0x88
 8001946:	422a      	tst	r2, r5
 8001948:	d197      	bne.n	800187a <__aeabi_dmul+0xee>
 800194a:	4642      	mov	r2, r8
 800194c:	4643      	mov	r3, r8
 800194e:	0412      	lsls	r2, r2, #16
 8001950:	0c12      	lsrs	r2, r2, #16
 8001952:	0016      	movs	r6, r2
 8001954:	9801      	ldr	r0, [sp, #4]
 8001956:	0c1d      	lsrs	r5, r3, #16
 8001958:	0c03      	lsrs	r3, r0, #16
 800195a:	0400      	lsls	r0, r0, #16
 800195c:	0c00      	lsrs	r0, r0, #16
 800195e:	4346      	muls	r6, r0
 8001960:	46b4      	mov	ip, r6
 8001962:	001e      	movs	r6, r3
 8001964:	436e      	muls	r6, r5
 8001966:	9600      	str	r6, [sp, #0]
 8001968:	0016      	movs	r6, r2
 800196a:	0007      	movs	r7, r0
 800196c:	435e      	muls	r6, r3
 800196e:	4661      	mov	r1, ip
 8001970:	46b0      	mov	r8, r6
 8001972:	436f      	muls	r7, r5
 8001974:	0c0e      	lsrs	r6, r1, #16
 8001976:	44b8      	add	r8, r7
 8001978:	4446      	add	r6, r8
 800197a:	42b7      	cmp	r7, r6
 800197c:	d905      	bls.n	800198a <__aeabi_dmul+0x1fe>
 800197e:	2180      	movs	r1, #128	@ 0x80
 8001980:	0249      	lsls	r1, r1, #9
 8001982:	4688      	mov	r8, r1
 8001984:	9f00      	ldr	r7, [sp, #0]
 8001986:	4447      	add	r7, r8
 8001988:	9700      	str	r7, [sp, #0]
 800198a:	4661      	mov	r1, ip
 800198c:	0409      	lsls	r1, r1, #16
 800198e:	0c09      	lsrs	r1, r1, #16
 8001990:	0c37      	lsrs	r7, r6, #16
 8001992:	0436      	lsls	r6, r6, #16
 8001994:	468c      	mov	ip, r1
 8001996:	0031      	movs	r1, r6
 8001998:	4461      	add	r1, ip
 800199a:	9101      	str	r1, [sp, #4]
 800199c:	0011      	movs	r1, r2
 800199e:	0c26      	lsrs	r6, r4, #16
 80019a0:	0424      	lsls	r4, r4, #16
 80019a2:	0c24      	lsrs	r4, r4, #16
 80019a4:	4361      	muls	r1, r4
 80019a6:	468c      	mov	ip, r1
 80019a8:	0021      	movs	r1, r4
 80019aa:	4369      	muls	r1, r5
 80019ac:	4689      	mov	r9, r1
 80019ae:	4661      	mov	r1, ip
 80019b0:	0c09      	lsrs	r1, r1, #16
 80019b2:	4688      	mov	r8, r1
 80019b4:	4372      	muls	r2, r6
 80019b6:	444a      	add	r2, r9
 80019b8:	4442      	add	r2, r8
 80019ba:	4375      	muls	r5, r6
 80019bc:	4591      	cmp	r9, r2
 80019be:	d903      	bls.n	80019c8 <__aeabi_dmul+0x23c>
 80019c0:	2180      	movs	r1, #128	@ 0x80
 80019c2:	0249      	lsls	r1, r1, #9
 80019c4:	4688      	mov	r8, r1
 80019c6:	4445      	add	r5, r8
 80019c8:	0c11      	lsrs	r1, r2, #16
 80019ca:	4688      	mov	r8, r1
 80019cc:	4661      	mov	r1, ip
 80019ce:	0409      	lsls	r1, r1, #16
 80019d0:	0c09      	lsrs	r1, r1, #16
 80019d2:	468c      	mov	ip, r1
 80019d4:	0412      	lsls	r2, r2, #16
 80019d6:	4462      	add	r2, ip
 80019d8:	18b9      	adds	r1, r7, r2
 80019da:	9102      	str	r1, [sp, #8]
 80019dc:	4651      	mov	r1, sl
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	468c      	mov	ip, r1
 80019e2:	4651      	mov	r1, sl
 80019e4:	040f      	lsls	r7, r1, #16
 80019e6:	0c3f      	lsrs	r7, r7, #16
 80019e8:	0039      	movs	r1, r7
 80019ea:	4341      	muls	r1, r0
 80019ec:	4445      	add	r5, r8
 80019ee:	4688      	mov	r8, r1
 80019f0:	4661      	mov	r1, ip
 80019f2:	4341      	muls	r1, r0
 80019f4:	468a      	mov	sl, r1
 80019f6:	4641      	mov	r1, r8
 80019f8:	4660      	mov	r0, ip
 80019fa:	0c09      	lsrs	r1, r1, #16
 80019fc:	4689      	mov	r9, r1
 80019fe:	4358      	muls	r0, r3
 8001a00:	437b      	muls	r3, r7
 8001a02:	4453      	add	r3, sl
 8001a04:	444b      	add	r3, r9
 8001a06:	459a      	cmp	sl, r3
 8001a08:	d903      	bls.n	8001a12 <__aeabi_dmul+0x286>
 8001a0a:	2180      	movs	r1, #128	@ 0x80
 8001a0c:	0249      	lsls	r1, r1, #9
 8001a0e:	4689      	mov	r9, r1
 8001a10:	4448      	add	r0, r9
 8001a12:	0c19      	lsrs	r1, r3, #16
 8001a14:	4689      	mov	r9, r1
 8001a16:	4641      	mov	r1, r8
 8001a18:	0409      	lsls	r1, r1, #16
 8001a1a:	0c09      	lsrs	r1, r1, #16
 8001a1c:	4688      	mov	r8, r1
 8001a1e:	0039      	movs	r1, r7
 8001a20:	4361      	muls	r1, r4
 8001a22:	041b      	lsls	r3, r3, #16
 8001a24:	4443      	add	r3, r8
 8001a26:	4688      	mov	r8, r1
 8001a28:	4661      	mov	r1, ip
 8001a2a:	434c      	muls	r4, r1
 8001a2c:	4371      	muls	r1, r6
 8001a2e:	468c      	mov	ip, r1
 8001a30:	4641      	mov	r1, r8
 8001a32:	4377      	muls	r7, r6
 8001a34:	0c0e      	lsrs	r6, r1, #16
 8001a36:	193f      	adds	r7, r7, r4
 8001a38:	19f6      	adds	r6, r6, r7
 8001a3a:	4448      	add	r0, r9
 8001a3c:	42b4      	cmp	r4, r6
 8001a3e:	d903      	bls.n	8001a48 <__aeabi_dmul+0x2bc>
 8001a40:	2180      	movs	r1, #128	@ 0x80
 8001a42:	0249      	lsls	r1, r1, #9
 8001a44:	4689      	mov	r9, r1
 8001a46:	44cc      	add	ip, r9
 8001a48:	9902      	ldr	r1, [sp, #8]
 8001a4a:	9f00      	ldr	r7, [sp, #0]
 8001a4c:	4689      	mov	r9, r1
 8001a4e:	0431      	lsls	r1, r6, #16
 8001a50:	444f      	add	r7, r9
 8001a52:	4689      	mov	r9, r1
 8001a54:	4641      	mov	r1, r8
 8001a56:	4297      	cmp	r7, r2
 8001a58:	4192      	sbcs	r2, r2
 8001a5a:	040c      	lsls	r4, r1, #16
 8001a5c:	0c24      	lsrs	r4, r4, #16
 8001a5e:	444c      	add	r4, r9
 8001a60:	18ff      	adds	r7, r7, r3
 8001a62:	4252      	negs	r2, r2
 8001a64:	1964      	adds	r4, r4, r5
 8001a66:	18a1      	adds	r1, r4, r2
 8001a68:	429f      	cmp	r7, r3
 8001a6a:	419b      	sbcs	r3, r3
 8001a6c:	4688      	mov	r8, r1
 8001a6e:	4682      	mov	sl, r0
 8001a70:	425b      	negs	r3, r3
 8001a72:	4699      	mov	r9, r3
 8001a74:	4590      	cmp	r8, r2
 8001a76:	4192      	sbcs	r2, r2
 8001a78:	42ac      	cmp	r4, r5
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	44c2      	add	sl, r8
 8001a7e:	44d1      	add	r9, sl
 8001a80:	4252      	negs	r2, r2
 8001a82:	4264      	negs	r4, r4
 8001a84:	4314      	orrs	r4, r2
 8001a86:	4599      	cmp	r9, r3
 8001a88:	419b      	sbcs	r3, r3
 8001a8a:	4582      	cmp	sl, r0
 8001a8c:	4192      	sbcs	r2, r2
 8001a8e:	425b      	negs	r3, r3
 8001a90:	4252      	negs	r2, r2
 8001a92:	4313      	orrs	r3, r2
 8001a94:	464a      	mov	r2, r9
 8001a96:	0c36      	lsrs	r6, r6, #16
 8001a98:	19a4      	adds	r4, r4, r6
 8001a9a:	18e3      	adds	r3, r4, r3
 8001a9c:	4463      	add	r3, ip
 8001a9e:	025b      	lsls	r3, r3, #9
 8001aa0:	0dd2      	lsrs	r2, r2, #23
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	9901      	ldr	r1, [sp, #4]
 8001aa6:	4692      	mov	sl, r2
 8001aa8:	027a      	lsls	r2, r7, #9
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	1e50      	subs	r0, r2, #1
 8001aae:	4182      	sbcs	r2, r0
 8001ab0:	0dff      	lsrs	r7, r7, #23
 8001ab2:	4317      	orrs	r7, r2
 8001ab4:	464a      	mov	r2, r9
 8001ab6:	0252      	lsls	r2, r2, #9
 8001ab8:	4317      	orrs	r7, r2
 8001aba:	46b8      	mov	r8, r7
 8001abc:	01db      	lsls	r3, r3, #7
 8001abe:	d500      	bpl.n	8001ac2 <__aeabi_dmul+0x336>
 8001ac0:	e6ed      	b.n	800189e <__aeabi_dmul+0x112>
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <__aeabi_dmul+0x36c>)
 8001ac4:	9a03      	ldr	r2, [sp, #12]
 8001ac6:	445b      	add	r3, fp
 8001ac8:	4691      	mov	r9, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	dc00      	bgt.n	8001ad0 <__aeabi_dmul+0x344>
 8001ace:	e0ac      	b.n	8001c2a <__aeabi_dmul+0x49e>
 8001ad0:	003a      	movs	r2, r7
 8001ad2:	0752      	lsls	r2, r2, #29
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dmul+0x34c>
 8001ad6:	e710      	b.n	80018fa <__aeabi_dmul+0x16e>
 8001ad8:	220f      	movs	r2, #15
 8001ada:	4658      	mov	r0, fp
 8001adc:	403a      	ands	r2, r7
 8001ade:	2a04      	cmp	r2, #4
 8001ae0:	d000      	beq.n	8001ae4 <__aeabi_dmul+0x358>
 8001ae2:	e6f9      	b.n	80018d8 <__aeabi_dmul+0x14c>
 8001ae4:	e709      	b.n	80018fa <__aeabi_dmul+0x16e>
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	000007ff 	.word	0x000007ff
 8001aec:	fffffc01 	.word	0xfffffc01
 8001af0:	feffffff 	.word	0xfeffffff
 8001af4:	000007fe 	.word	0x000007fe
 8001af8:	000003ff 	.word	0x000003ff
 8001afc:	0022      	movs	r2, r4
 8001afe:	4332      	orrs	r2, r6
 8001b00:	d06f      	beq.n	8001be2 <__aeabi_dmul+0x456>
 8001b02:	2c00      	cmp	r4, #0
 8001b04:	d100      	bne.n	8001b08 <__aeabi_dmul+0x37c>
 8001b06:	e0c2      	b.n	8001c8e <__aeabi_dmul+0x502>
 8001b08:	0020      	movs	r0, r4
 8001b0a:	f000 f9ef 	bl	8001eec <__clzsi2>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	0003      	movs	r3, r0
 8001b12:	3a0b      	subs	r2, #11
 8001b14:	201d      	movs	r0, #29
 8001b16:	1a82      	subs	r2, r0, r2
 8001b18:	0030      	movs	r0, r6
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	40d0      	lsrs	r0, r2
 8001b1e:	3908      	subs	r1, #8
 8001b20:	408c      	lsls	r4, r1
 8001b22:	0002      	movs	r2, r0
 8001b24:	4322      	orrs	r2, r4
 8001b26:	0034      	movs	r4, r6
 8001b28:	408c      	lsls	r4, r1
 8001b2a:	4659      	mov	r1, fp
 8001b2c:	1acb      	subs	r3, r1, r3
 8001b2e:	4986      	ldr	r1, [pc, #536]	@ (8001d48 <__aeabi_dmul+0x5bc>)
 8001b30:	468b      	mov	fp, r1
 8001b32:	449b      	add	fp, r3
 8001b34:	2d0a      	cmp	r5, #10
 8001b36:	dd00      	ble.n	8001b3a <__aeabi_dmul+0x3ae>
 8001b38:	e6a4      	b.n	8001884 <__aeabi_dmul+0xf8>
 8001b3a:	4649      	mov	r1, r9
 8001b3c:	9b00      	ldr	r3, [sp, #0]
 8001b3e:	9401      	str	r4, [sp, #4]
 8001b40:	4059      	eors	r1, r3
 8001b42:	b2cb      	uxtb	r3, r1
 8001b44:	0014      	movs	r4, r2
 8001b46:	2000      	movs	r0, #0
 8001b48:	9303      	str	r3, [sp, #12]
 8001b4a:	2d02      	cmp	r5, #2
 8001b4c:	dd00      	ble.n	8001b50 <__aeabi_dmul+0x3c4>
 8001b4e:	e667      	b.n	8001820 <__aeabi_dmul+0x94>
 8001b50:	e6fb      	b.n	800194a <__aeabi_dmul+0x1be>
 8001b52:	4653      	mov	r3, sl
 8001b54:	4303      	orrs	r3, r0
 8001b56:	4698      	mov	r8, r3
 8001b58:	d03c      	beq.n	8001bd4 <__aeabi_dmul+0x448>
 8001b5a:	4653      	mov	r3, sl
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_dmul+0x3d6>
 8001b60:	e0a3      	b.n	8001caa <__aeabi_dmul+0x51e>
 8001b62:	4650      	mov	r0, sl
 8001b64:	f000 f9c2 	bl	8001eec <__clzsi2>
 8001b68:	230b      	movs	r3, #11
 8001b6a:	425b      	negs	r3, r3
 8001b6c:	469c      	mov	ip, r3
 8001b6e:	0002      	movs	r2, r0
 8001b70:	4484      	add	ip, r0
 8001b72:	0011      	movs	r1, r2
 8001b74:	4650      	mov	r0, sl
 8001b76:	3908      	subs	r1, #8
 8001b78:	4088      	lsls	r0, r1
 8001b7a:	231d      	movs	r3, #29
 8001b7c:	4680      	mov	r8, r0
 8001b7e:	4660      	mov	r0, ip
 8001b80:	1a1b      	subs	r3, r3, r0
 8001b82:	0020      	movs	r0, r4
 8001b84:	40d8      	lsrs	r0, r3
 8001b86:	0003      	movs	r3, r0
 8001b88:	4640      	mov	r0, r8
 8001b8a:	4303      	orrs	r3, r0
 8001b8c:	469a      	mov	sl, r3
 8001b8e:	0023      	movs	r3, r4
 8001b90:	408b      	lsls	r3, r1
 8001b92:	4698      	mov	r8, r3
 8001b94:	4b6c      	ldr	r3, [pc, #432]	@ (8001d48 <__aeabi_dmul+0x5bc>)
 8001b96:	2500      	movs	r5, #0
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	469b      	mov	fp, r3
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9302      	str	r3, [sp, #8]
 8001ba0:	e61a      	b.n	80017d8 <__aeabi_dmul+0x4c>
 8001ba2:	2d0f      	cmp	r5, #15
 8001ba4:	d000      	beq.n	8001ba8 <__aeabi_dmul+0x41c>
 8001ba6:	e0c9      	b.n	8001d3c <__aeabi_dmul+0x5b0>
 8001ba8:	2380      	movs	r3, #128	@ 0x80
 8001baa:	4652      	mov	r2, sl
 8001bac:	031b      	lsls	r3, r3, #12
 8001bae:	421a      	tst	r2, r3
 8001bb0:	d002      	beq.n	8001bb8 <__aeabi_dmul+0x42c>
 8001bb2:	421c      	tst	r4, r3
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dmul+0x42c>
 8001bb6:	e092      	b.n	8001cde <__aeabi_dmul+0x552>
 8001bb8:	2480      	movs	r4, #128	@ 0x80
 8001bba:	4653      	mov	r3, sl
 8001bbc:	0324      	lsls	r4, r4, #12
 8001bbe:	431c      	orrs	r4, r3
 8001bc0:	0324      	lsls	r4, r4, #12
 8001bc2:	4642      	mov	r2, r8
 8001bc4:	0b24      	lsrs	r4, r4, #12
 8001bc6:	e63e      	b.n	8001846 <__aeabi_dmul+0xba>
 8001bc8:	469b      	mov	fp, r3
 8001bca:	2303      	movs	r3, #3
 8001bcc:	4680      	mov	r8, r0
 8001bce:	250c      	movs	r5, #12
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	e601      	b.n	80017d8 <__aeabi_dmul+0x4c>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	469a      	mov	sl, r3
 8001bd8:	469b      	mov	fp, r3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	2504      	movs	r5, #4
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	e5fa      	b.n	80017d8 <__aeabi_dmul+0x4c>
 8001be2:	2101      	movs	r1, #1
 8001be4:	430d      	orrs	r5, r1
 8001be6:	2d0a      	cmp	r5, #10
 8001be8:	dd00      	ble.n	8001bec <__aeabi_dmul+0x460>
 8001bea:	e64b      	b.n	8001884 <__aeabi_dmul+0xf8>
 8001bec:	4649      	mov	r1, r9
 8001bee:	9800      	ldr	r0, [sp, #0]
 8001bf0:	4041      	eors	r1, r0
 8001bf2:	b2c9      	uxtb	r1, r1
 8001bf4:	9103      	str	r1, [sp, #12]
 8001bf6:	2d02      	cmp	r5, #2
 8001bf8:	dc00      	bgt.n	8001bfc <__aeabi_dmul+0x470>
 8001bfa:	e096      	b.n	8001d2a <__aeabi_dmul+0x59e>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	2400      	movs	r4, #0
 8001c00:	2001      	movs	r0, #1
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	e60c      	b.n	8001820 <__aeabi_dmul+0x94>
 8001c06:	4649      	mov	r1, r9
 8001c08:	2302      	movs	r3, #2
 8001c0a:	9a00      	ldr	r2, [sp, #0]
 8001c0c:	432b      	orrs	r3, r5
 8001c0e:	4051      	eors	r1, r2
 8001c10:	b2ca      	uxtb	r2, r1
 8001c12:	9203      	str	r2, [sp, #12]
 8001c14:	2b0a      	cmp	r3, #10
 8001c16:	dd00      	ble.n	8001c1a <__aeabi_dmul+0x48e>
 8001c18:	e634      	b.n	8001884 <__aeabi_dmul+0xf8>
 8001c1a:	2d00      	cmp	r5, #0
 8001c1c:	d157      	bne.n	8001cce <__aeabi_dmul+0x542>
 8001c1e:	9b03      	ldr	r3, [sp, #12]
 8001c20:	4699      	mov	r9, r3
 8001c22:	2400      	movs	r4, #0
 8001c24:	2200      	movs	r2, #0
 8001c26:	4b49      	ldr	r3, [pc, #292]	@ (8001d4c <__aeabi_dmul+0x5c0>)
 8001c28:	e60e      	b.n	8001848 <__aeabi_dmul+0xbc>
 8001c2a:	4658      	mov	r0, fp
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	1ac9      	subs	r1, r1, r3
 8001c30:	2938      	cmp	r1, #56	@ 0x38
 8001c32:	dd00      	ble.n	8001c36 <__aeabi_dmul+0x4aa>
 8001c34:	e62f      	b.n	8001896 <__aeabi_dmul+0x10a>
 8001c36:	291f      	cmp	r1, #31
 8001c38:	dd56      	ble.n	8001ce8 <__aeabi_dmul+0x55c>
 8001c3a:	221f      	movs	r2, #31
 8001c3c:	4654      	mov	r4, sl
 8001c3e:	4252      	negs	r2, r2
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	40dc      	lsrs	r4, r3
 8001c44:	2920      	cmp	r1, #32
 8001c46:	d007      	beq.n	8001c58 <__aeabi_dmul+0x4cc>
 8001c48:	4b41      	ldr	r3, [pc, #260]	@ (8001d50 <__aeabi_dmul+0x5c4>)
 8001c4a:	4642      	mov	r2, r8
 8001c4c:	469c      	mov	ip, r3
 8001c4e:	4653      	mov	r3, sl
 8001c50:	4460      	add	r0, ip
 8001c52:	4083      	lsls	r3, r0
 8001c54:	431a      	orrs	r2, r3
 8001c56:	4690      	mov	r8, r2
 8001c58:	4642      	mov	r2, r8
 8001c5a:	2107      	movs	r1, #7
 8001c5c:	1e53      	subs	r3, r2, #1
 8001c5e:	419a      	sbcs	r2, r3
 8001c60:	000b      	movs	r3, r1
 8001c62:	4322      	orrs	r2, r4
 8001c64:	4013      	ands	r3, r2
 8001c66:	2400      	movs	r4, #0
 8001c68:	4211      	tst	r1, r2
 8001c6a:	d009      	beq.n	8001c80 <__aeabi_dmul+0x4f4>
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d05d      	beq.n	8001d30 <__aeabi_dmul+0x5a4>
 8001c74:	1d11      	adds	r1, r2, #4
 8001c76:	4291      	cmp	r1, r2
 8001c78:	419b      	sbcs	r3, r3
 8001c7a:	000a      	movs	r2, r1
 8001c7c:	425b      	negs	r3, r3
 8001c7e:	075b      	lsls	r3, r3, #29
 8001c80:	08d2      	lsrs	r2, r2, #3
 8001c82:	431a      	orrs	r2, r3
 8001c84:	2300      	movs	r3, #0
 8001c86:	e5df      	b.n	8001848 <__aeabi_dmul+0xbc>
 8001c88:	9b03      	ldr	r3, [sp, #12]
 8001c8a:	4699      	mov	r9, r3
 8001c8c:	e5fa      	b.n	8001884 <__aeabi_dmul+0xf8>
 8001c8e:	9801      	ldr	r0, [sp, #4]
 8001c90:	f000 f92c 	bl	8001eec <__clzsi2>
 8001c94:	0002      	movs	r2, r0
 8001c96:	0003      	movs	r3, r0
 8001c98:	3215      	adds	r2, #21
 8001c9a:	3320      	adds	r3, #32
 8001c9c:	2a1c      	cmp	r2, #28
 8001c9e:	dc00      	bgt.n	8001ca2 <__aeabi_dmul+0x516>
 8001ca0:	e738      	b.n	8001b14 <__aeabi_dmul+0x388>
 8001ca2:	9a01      	ldr	r2, [sp, #4]
 8001ca4:	3808      	subs	r0, #8
 8001ca6:	4082      	lsls	r2, r0
 8001ca8:	e73f      	b.n	8001b2a <__aeabi_dmul+0x39e>
 8001caa:	f000 f91f 	bl	8001eec <__clzsi2>
 8001cae:	2315      	movs	r3, #21
 8001cb0:	469c      	mov	ip, r3
 8001cb2:	4484      	add	ip, r0
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	4663      	mov	r3, ip
 8001cb8:	3220      	adds	r2, #32
 8001cba:	2b1c      	cmp	r3, #28
 8001cbc:	dc00      	bgt.n	8001cc0 <__aeabi_dmul+0x534>
 8001cbe:	e758      	b.n	8001b72 <__aeabi_dmul+0x3e6>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	4698      	mov	r8, r3
 8001cc4:	0023      	movs	r3, r4
 8001cc6:	3808      	subs	r0, #8
 8001cc8:	4083      	lsls	r3, r0
 8001cca:	469a      	mov	sl, r3
 8001ccc:	e762      	b.n	8001b94 <__aeabi_dmul+0x408>
 8001cce:	001d      	movs	r5, r3
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2400      	movs	r4, #0
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	e5a2      	b.n	8001820 <__aeabi_dmul+0x94>
 8001cda:	9002      	str	r0, [sp, #8]
 8001cdc:	e632      	b.n	8001944 <__aeabi_dmul+0x1b8>
 8001cde:	431c      	orrs	r4, r3
 8001ce0:	9b00      	ldr	r3, [sp, #0]
 8001ce2:	9a01      	ldr	r2, [sp, #4]
 8001ce4:	4699      	mov	r9, r3
 8001ce6:	e5ae      	b.n	8001846 <__aeabi_dmul+0xba>
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d54 <__aeabi_dmul+0x5c8>)
 8001cea:	4652      	mov	r2, sl
 8001cec:	18c3      	adds	r3, r0, r3
 8001cee:	4640      	mov	r0, r8
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	40c8      	lsrs	r0, r1
 8001cf4:	4302      	orrs	r2, r0
 8001cf6:	4640      	mov	r0, r8
 8001cf8:	4098      	lsls	r0, r3
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	1e58      	subs	r0, r3, #1
 8001cfe:	4183      	sbcs	r3, r0
 8001d00:	4654      	mov	r4, sl
 8001d02:	431a      	orrs	r2, r3
 8001d04:	40cc      	lsrs	r4, r1
 8001d06:	0753      	lsls	r3, r2, #29
 8001d08:	d009      	beq.n	8001d1e <__aeabi_dmul+0x592>
 8001d0a:	230f      	movs	r3, #15
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d005      	beq.n	8001d1e <__aeabi_dmul+0x592>
 8001d12:	1d13      	adds	r3, r2, #4
 8001d14:	4293      	cmp	r3, r2
 8001d16:	4192      	sbcs	r2, r2
 8001d18:	4252      	negs	r2, r2
 8001d1a:	18a4      	adds	r4, r4, r2
 8001d1c:	001a      	movs	r2, r3
 8001d1e:	0223      	lsls	r3, r4, #8
 8001d20:	d508      	bpl.n	8001d34 <__aeabi_dmul+0x5a8>
 8001d22:	2301      	movs	r3, #1
 8001d24:	2400      	movs	r4, #0
 8001d26:	2200      	movs	r2, #0
 8001d28:	e58e      	b.n	8001848 <__aeabi_dmul+0xbc>
 8001d2a:	4689      	mov	r9, r1
 8001d2c:	2400      	movs	r4, #0
 8001d2e:	e58b      	b.n	8001848 <__aeabi_dmul+0xbc>
 8001d30:	2300      	movs	r3, #0
 8001d32:	e7a5      	b.n	8001c80 <__aeabi_dmul+0x4f4>
 8001d34:	0763      	lsls	r3, r4, #29
 8001d36:	0264      	lsls	r4, r4, #9
 8001d38:	0b24      	lsrs	r4, r4, #12
 8001d3a:	e7a1      	b.n	8001c80 <__aeabi_dmul+0x4f4>
 8001d3c:	9b00      	ldr	r3, [sp, #0]
 8001d3e:	46a2      	mov	sl, r4
 8001d40:	4699      	mov	r9, r3
 8001d42:	9b01      	ldr	r3, [sp, #4]
 8001d44:	4698      	mov	r8, r3
 8001d46:	e737      	b.n	8001bb8 <__aeabi_dmul+0x42c>
 8001d48:	fffffc0d 	.word	0xfffffc0d
 8001d4c:	000007ff 	.word	0x000007ff
 8001d50:	0000043e 	.word	0x0000043e
 8001d54:	0000041e 	.word	0x0000041e

08001d58 <__aeabi_f2d>:
 8001d58:	b570      	push	{r4, r5, r6, lr}
 8001d5a:	0242      	lsls	r2, r0, #9
 8001d5c:	0043      	lsls	r3, r0, #1
 8001d5e:	0fc4      	lsrs	r4, r0, #31
 8001d60:	20fe      	movs	r0, #254	@ 0xfe
 8001d62:	0e1b      	lsrs	r3, r3, #24
 8001d64:	1c59      	adds	r1, r3, #1
 8001d66:	0a55      	lsrs	r5, r2, #9
 8001d68:	4208      	tst	r0, r1
 8001d6a:	d00c      	beq.n	8001d86 <__aeabi_f2d+0x2e>
 8001d6c:	21e0      	movs	r1, #224	@ 0xe0
 8001d6e:	0089      	lsls	r1, r1, #2
 8001d70:	468c      	mov	ip, r1
 8001d72:	076d      	lsls	r5, r5, #29
 8001d74:	0b12      	lsrs	r2, r2, #12
 8001d76:	4463      	add	r3, ip
 8001d78:	051b      	lsls	r3, r3, #20
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	07e4      	lsls	r4, r4, #31
 8001d7e:	4323      	orrs	r3, r4
 8001d80:	0028      	movs	r0, r5
 8001d82:	0019      	movs	r1, r3
 8001d84:	bd70      	pop	{r4, r5, r6, pc}
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d114      	bne.n	8001db4 <__aeabi_f2d+0x5c>
 8001d8a:	2d00      	cmp	r5, #0
 8001d8c:	d01b      	beq.n	8001dc6 <__aeabi_f2d+0x6e>
 8001d8e:	0028      	movs	r0, r5
 8001d90:	f000 f8ac 	bl	8001eec <__clzsi2>
 8001d94:	280a      	cmp	r0, #10
 8001d96:	dc1c      	bgt.n	8001dd2 <__aeabi_f2d+0x7a>
 8001d98:	230b      	movs	r3, #11
 8001d9a:	002a      	movs	r2, r5
 8001d9c:	1a1b      	subs	r3, r3, r0
 8001d9e:	40da      	lsrs	r2, r3
 8001da0:	0003      	movs	r3, r0
 8001da2:	3315      	adds	r3, #21
 8001da4:	409d      	lsls	r5, r3
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <__aeabi_f2d+0x88>)
 8001da8:	0312      	lsls	r2, r2, #12
 8001daa:	1a1b      	subs	r3, r3, r0
 8001dac:	055b      	lsls	r3, r3, #21
 8001dae:	0b12      	lsrs	r2, r2, #12
 8001db0:	0d5b      	lsrs	r3, r3, #21
 8001db2:	e7e1      	b.n	8001d78 <__aeabi_f2d+0x20>
 8001db4:	2d00      	cmp	r5, #0
 8001db6:	d009      	beq.n	8001dcc <__aeabi_f2d+0x74>
 8001db8:	0b13      	lsrs	r3, r2, #12
 8001dba:	2280      	movs	r2, #128	@ 0x80
 8001dbc:	0312      	lsls	r2, r2, #12
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	076d      	lsls	r5, r5, #29
 8001dc2:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <__aeabi_f2d+0x8c>)
 8001dc4:	e7d8      	b.n	8001d78 <__aeabi_f2d+0x20>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	2200      	movs	r2, #0
 8001dca:	e7d5      	b.n	8001d78 <__aeabi_f2d+0x20>
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <__aeabi_f2d+0x8c>)
 8001dd0:	e7d2      	b.n	8001d78 <__aeabi_f2d+0x20>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	002a      	movs	r2, r5
 8001dd6:	3b0b      	subs	r3, #11
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	2500      	movs	r5, #0
 8001ddc:	e7e3      	b.n	8001da6 <__aeabi_f2d+0x4e>
 8001dde:	46c0      	nop			@ (mov r8, r8)
 8001de0:	00000389 	.word	0x00000389
 8001de4:	000007ff 	.word	0x000007ff

08001de8 <__aeabi_d2f>:
 8001de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dea:	004b      	lsls	r3, r1, #1
 8001dec:	030f      	lsls	r7, r1, #12
 8001dee:	0d5b      	lsrs	r3, r3, #21
 8001df0:	4c3a      	ldr	r4, [pc, #232]	@ (8001edc <__aeabi_d2f+0xf4>)
 8001df2:	0f45      	lsrs	r5, r0, #29
 8001df4:	b083      	sub	sp, #12
 8001df6:	0a7f      	lsrs	r7, r7, #9
 8001df8:	1c5e      	adds	r6, r3, #1
 8001dfa:	432f      	orrs	r7, r5
 8001dfc:	9000      	str	r0, [sp, #0]
 8001dfe:	9101      	str	r1, [sp, #4]
 8001e00:	0fca      	lsrs	r2, r1, #31
 8001e02:	00c5      	lsls	r5, r0, #3
 8001e04:	4226      	tst	r6, r4
 8001e06:	d00b      	beq.n	8001e20 <__aeabi_d2f+0x38>
 8001e08:	4935      	ldr	r1, [pc, #212]	@ (8001ee0 <__aeabi_d2f+0xf8>)
 8001e0a:	185c      	adds	r4, r3, r1
 8001e0c:	2cfe      	cmp	r4, #254	@ 0xfe
 8001e0e:	dd13      	ble.n	8001e38 <__aeabi_d2f+0x50>
 8001e10:	20ff      	movs	r0, #255	@ 0xff
 8001e12:	2300      	movs	r3, #0
 8001e14:	05c0      	lsls	r0, r0, #23
 8001e16:	4318      	orrs	r0, r3
 8001e18:	07d2      	lsls	r2, r2, #31
 8001e1a:	4310      	orrs	r0, r2
 8001e1c:	b003      	add	sp, #12
 8001e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e20:	433d      	orrs	r5, r7
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <__aeabi_d2f+0x42>
 8001e26:	2000      	movs	r0, #0
 8001e28:	e7f4      	b.n	8001e14 <__aeabi_d2f+0x2c>
 8001e2a:	2d00      	cmp	r5, #0
 8001e2c:	d0f0      	beq.n	8001e10 <__aeabi_d2f+0x28>
 8001e2e:	2380      	movs	r3, #128	@ 0x80
 8001e30:	03db      	lsls	r3, r3, #15
 8001e32:	20ff      	movs	r0, #255	@ 0xff
 8001e34:	433b      	orrs	r3, r7
 8001e36:	e7ed      	b.n	8001e14 <__aeabi_d2f+0x2c>
 8001e38:	2c00      	cmp	r4, #0
 8001e3a:	dd0c      	ble.n	8001e56 <__aeabi_d2f+0x6e>
 8001e3c:	9b00      	ldr	r3, [sp, #0]
 8001e3e:	00ff      	lsls	r7, r7, #3
 8001e40:	019b      	lsls	r3, r3, #6
 8001e42:	1e58      	subs	r0, r3, #1
 8001e44:	4183      	sbcs	r3, r0
 8001e46:	0f69      	lsrs	r1, r5, #29
 8001e48:	433b      	orrs	r3, r7
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	0759      	lsls	r1, r3, #29
 8001e4e:	d127      	bne.n	8001ea0 <__aeabi_d2f+0xb8>
 8001e50:	08db      	lsrs	r3, r3, #3
 8001e52:	b2e0      	uxtb	r0, r4
 8001e54:	e7de      	b.n	8001e14 <__aeabi_d2f+0x2c>
 8001e56:	0021      	movs	r1, r4
 8001e58:	3117      	adds	r1, #23
 8001e5a:	db31      	blt.n	8001ec0 <__aeabi_d2f+0xd8>
 8001e5c:	2180      	movs	r1, #128	@ 0x80
 8001e5e:	201e      	movs	r0, #30
 8001e60:	0409      	lsls	r1, r1, #16
 8001e62:	4339      	orrs	r1, r7
 8001e64:	1b00      	subs	r0, r0, r4
 8001e66:	281f      	cmp	r0, #31
 8001e68:	dd2d      	ble.n	8001ec6 <__aeabi_d2f+0xde>
 8001e6a:	2602      	movs	r6, #2
 8001e6c:	4276      	negs	r6, r6
 8001e6e:	1b34      	subs	r4, r6, r4
 8001e70:	000e      	movs	r6, r1
 8001e72:	40e6      	lsrs	r6, r4
 8001e74:	0034      	movs	r4, r6
 8001e76:	2820      	cmp	r0, #32
 8001e78:	d004      	beq.n	8001e84 <__aeabi_d2f+0x9c>
 8001e7a:	481a      	ldr	r0, [pc, #104]	@ (8001ee4 <__aeabi_d2f+0xfc>)
 8001e7c:	4684      	mov	ip, r0
 8001e7e:	4463      	add	r3, ip
 8001e80:	4099      	lsls	r1, r3
 8001e82:	430d      	orrs	r5, r1
 8001e84:	002b      	movs	r3, r5
 8001e86:	1e59      	subs	r1, r3, #1
 8001e88:	418b      	sbcs	r3, r1
 8001e8a:	4323      	orrs	r3, r4
 8001e8c:	0759      	lsls	r1, r3, #29
 8001e8e:	d003      	beq.n	8001e98 <__aeabi_d2f+0xb0>
 8001e90:	210f      	movs	r1, #15
 8001e92:	4019      	ands	r1, r3
 8001e94:	2904      	cmp	r1, #4
 8001e96:	d10b      	bne.n	8001eb0 <__aeabi_d2f+0xc8>
 8001e98:	019b      	lsls	r3, r3, #6
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	0a5b      	lsrs	r3, r3, #9
 8001e9e:	e7b9      	b.n	8001e14 <__aeabi_d2f+0x2c>
 8001ea0:	210f      	movs	r1, #15
 8001ea2:	4019      	ands	r1, r3
 8001ea4:	2904      	cmp	r1, #4
 8001ea6:	d104      	bne.n	8001eb2 <__aeabi_d2f+0xca>
 8001ea8:	019b      	lsls	r3, r3, #6
 8001eaa:	0a5b      	lsrs	r3, r3, #9
 8001eac:	b2e0      	uxtb	r0, r4
 8001eae:	e7b1      	b.n	8001e14 <__aeabi_d2f+0x2c>
 8001eb0:	2400      	movs	r4, #0
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	0159      	lsls	r1, r3, #5
 8001eb6:	d5f7      	bpl.n	8001ea8 <__aeabi_d2f+0xc0>
 8001eb8:	3401      	adds	r4, #1
 8001eba:	2300      	movs	r3, #0
 8001ebc:	b2e0      	uxtb	r0, r4
 8001ebe:	e7a9      	b.n	8001e14 <__aeabi_d2f+0x2c>
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e7a6      	b.n	8001e14 <__aeabi_d2f+0x2c>
 8001ec6:	4c08      	ldr	r4, [pc, #32]	@ (8001ee8 <__aeabi_d2f+0x100>)
 8001ec8:	191c      	adds	r4, r3, r4
 8001eca:	002b      	movs	r3, r5
 8001ecc:	40a5      	lsls	r5, r4
 8001ece:	40c3      	lsrs	r3, r0
 8001ed0:	40a1      	lsls	r1, r4
 8001ed2:	1e68      	subs	r0, r5, #1
 8001ed4:	4185      	sbcs	r5, r0
 8001ed6:	4329      	orrs	r1, r5
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	e7d7      	b.n	8001e8c <__aeabi_d2f+0xa4>
 8001edc:	000007fe 	.word	0x000007fe
 8001ee0:	fffffc80 	.word	0xfffffc80
 8001ee4:	fffffca2 	.word	0xfffffca2
 8001ee8:	fffffc82 	.word	0xfffffc82

08001eec <__clzsi2>:
 8001eec:	211c      	movs	r1, #28
 8001eee:	2301      	movs	r3, #1
 8001ef0:	041b      	lsls	r3, r3, #16
 8001ef2:	4298      	cmp	r0, r3
 8001ef4:	d301      	bcc.n	8001efa <__clzsi2+0xe>
 8001ef6:	0c00      	lsrs	r0, r0, #16
 8001ef8:	3910      	subs	r1, #16
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	4298      	cmp	r0, r3
 8001efe:	d301      	bcc.n	8001f04 <__clzsi2+0x18>
 8001f00:	0a00      	lsrs	r0, r0, #8
 8001f02:	3908      	subs	r1, #8
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	4298      	cmp	r0, r3
 8001f08:	d301      	bcc.n	8001f0e <__clzsi2+0x22>
 8001f0a:	0900      	lsrs	r0, r0, #4
 8001f0c:	3904      	subs	r1, #4
 8001f0e:	a202      	add	r2, pc, #8	@ (adr r2, 8001f18 <__clzsi2+0x2c>)
 8001f10:	5c10      	ldrb	r0, [r2, r0]
 8001f12:	1840      	adds	r0, r0, r1
 8001f14:	4770      	bx	lr
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	02020304 	.word	0x02020304
 8001f1c:	01010101 	.word	0x01010101
	...

08001f28 <cs_low>:
#include <math.h>
#include "MA330.h"



static void cs_low(MA330_t *encd) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6858      	ldr	r0, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	891b      	ldrh	r3, [r3, #8]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	f002 fe3e 	bl	8004bbc <HAL_GPIO_WritePin>
}
 8001f40:	46c0      	nop			@ (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <cs_high>:

static void cs_high(MA330_t *encd) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6858      	ldr	r0, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	891b      	ldrh	r3, [r3, #8]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	f002 fe2e 	bl	8004bbc <HAL_GPIO_WritePin>
}
 8001f60:	46c0      	nop			@ (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <MA330_Init>:




//attention 20ms minimum apres une ecriture de registre
int MA330_Init(MA330_t *encd, SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin,uint8_t FW){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	001a      	movs	r2, r3
 8001f76:	1cbb      	adds	r3, r7, #2
 8001f78:	801a      	strh	r2, [r3, #0]
    if (encd == NULL || hspi == NULL || cs_port == NULL || cs_pin == 0) {
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d009      	beq.n	8001f94 <MA330_Init+0x2c>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d006      	beq.n	8001f94 <MA330_Init+0x2c>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <MA330_Init+0x2c>
 8001f8c:	1cbb      	adds	r3, r7, #2
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <MA330_Init+0x30>
        return 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e0b5      	b.n	8002104 <MA330_Init+0x19c>
    }

    encd->MA330_spi = hspi;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	601a      	str	r2, [r3, #0]
    encd->MA330_cs_port = cs_port;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	605a      	str	r2, [r3, #4]
    encd->MA330_cs_pin = cs_pin;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1cba      	adds	r2, r7, #2
 8001fa8:	8812      	ldrh	r2, [r2, #0]
 8001faa:	811a      	strh	r2, [r3, #8]
    
    cs_high(encd);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7ff ffca 	bl	8001f48 <cs_high>
    
    HAL_Delay(1);
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f001 f919 	bl	80031ec <HAL_Delay>

    if(FW>0){
 8001fba:	2320      	movs	r3, #32
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d100      	bne.n	8001fc6 <MA330_Init+0x5e>
 8001fc4:	e09d      	b.n	8002102 <MA330_Init+0x19a>
    cs_low(encd);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7ff ffad 	bl	8001f28 <cs_low>
    uint8_t receive_buffer[2];
    uint8_t send_buffer[]={0x4E,0x00};
 8001fce:	2110      	movs	r1, #16
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	224e      	movs	r2, #78	@ 0x4e
 8001fd4:	801a      	strh	r2, [r3, #0]

	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	2314      	movs	r3, #20
 8001fdc:	18fa      	adds	r2, r7, r3
 8001fde:	1879      	adds	r1, r7, r1
 8001fe0:	23fa      	movs	r3, #250	@ 0xfa
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	f003 fd60 	bl	8005aac <HAL_SPI_TransmitReceive>
 8001fec:	1e03      	subs	r3, r0, #0
 8001fee:	d005      	beq.n	8001ffc <MA330_Init+0x94>
		cs_high(encd);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff ffa8 	bl	8001f48 <cs_high>
        return 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e083      	b.n	8002104 <MA330_Init+0x19c>
    }
	cs_high(encd);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	0018      	movs	r0, r3
 8002000:	f7ff ffa2 	bl	8001f48 <cs_high>
	HAL_Delay(1);
 8002004:	2001      	movs	r0, #1
 8002006:	f001 f8f1 	bl	80031ec <HAL_Delay>
	cs_low(encd);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	0018      	movs	r0, r3
 800200e:	f7ff ff8b 	bl	8001f28 <cs_low>

	send_buffer[0]=0x00;
 8002012:	2110      	movs	r1, #16
 8002014:	187b      	adds	r3, r7, r1
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
	send_buffer[1]=0x00;
 800201a:	187b      	adds	r3, r7, r1
 800201c:	2200      	movs	r2, #0
 800201e:	705a      	strb	r2, [r3, #1]
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	2314      	movs	r3, #20
 8002026:	18fa      	adds	r2, r7, r3
 8002028:	1879      	adds	r1, r7, r1
 800202a:	23fa      	movs	r3, #250	@ 0xfa
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	2302      	movs	r3, #2
 8002032:	f003 fd3b 	bl	8005aac <HAL_SPI_TransmitReceive>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d005      	beq.n	8002046 <MA330_Init+0xde>
		cs_high(encd);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	0018      	movs	r0, r3
 800203e:	f7ff ff83 	bl	8001f48 <cs_high>
        return 0;
 8002042:	2300      	movs	r3, #0
 8002044:	e05e      	b.n	8002104 <MA330_Init+0x19c>
    }
	//uint8_t actualfw=receive_buffer[0];
	cs_high(encd);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	0018      	movs	r0, r3
 800204a:	f7ff ff7d 	bl	8001f48 <cs_high>
	HAL_Delay(1);
 800204e:	2001      	movs	r0, #1
 8002050:	f001 f8cc 	bl	80031ec <HAL_Delay>
	cs_low(encd);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	0018      	movs	r0, r3
 8002058:	f7ff ff66 	bl	8001f28 <cs_low>

	send_buffer[0]=0x8E;
 800205c:	2110      	movs	r1, #16
 800205e:	187b      	adds	r3, r7, r1
 8002060:	228e      	movs	r2, #142	@ 0x8e
 8002062:	701a      	strb	r2, [r3, #0]
	send_buffer[1]=FW;
 8002064:	187a      	adds	r2, r7, r1
 8002066:	2320      	movs	r3, #32
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	7053      	strb	r3, [r2, #1]

	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	2314      	movs	r3, #20
 8002074:	18fa      	adds	r2, r7, r3
 8002076:	1879      	adds	r1, r7, r1
 8002078:	23fa      	movs	r3, #250	@ 0xfa
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2302      	movs	r3, #2
 8002080:	f003 fd14 	bl	8005aac <HAL_SPI_TransmitReceive>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d005      	beq.n	8002094 <MA330_Init+0x12c>
		cs_high(encd);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	0018      	movs	r0, r3
 800208c:	f7ff ff5c 	bl	8001f48 <cs_high>
        return 0;
 8002090:	2300      	movs	r3, #0
 8002092:	e037      	b.n	8002104 <MA330_Init+0x19c>
    }

	cs_high(encd);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	0018      	movs	r0, r3
 8002098:	f7ff ff56 	bl	8001f48 <cs_high>
	HAL_Delay(25);
 800209c:	2019      	movs	r0, #25
 800209e:	f001 f8a5 	bl	80031ec <HAL_Delay>
	cs_low(encd);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff ff3f 	bl	8001f28 <cs_low>

	send_buffer[0]=0x00;
 80020aa:	2110      	movs	r1, #16
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
	send_buffer[1]=0x00;
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	2200      	movs	r2, #0
 80020b6:	705a      	strb	r2, [r3, #1]

	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	2314      	movs	r3, #20
 80020be:	18fa      	adds	r2, r7, r3
 80020c0:	1879      	adds	r1, r7, r1
 80020c2:	23fa      	movs	r3, #250	@ 0xfa
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2302      	movs	r3, #2
 80020ca:	f003 fcef 	bl	8005aac <HAL_SPI_TransmitReceive>
 80020ce:	1e03      	subs	r3, r0, #0
 80020d0:	d005      	beq.n	80020de <MA330_Init+0x176>
		cs_high(encd);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7ff ff37 	bl	8001f48 <cs_high>
        return 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	e012      	b.n	8002104 <MA330_Init+0x19c>
    }

	if(receive_buffer[0]!=FW){
 80020de:	2314      	movs	r3, #20
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	2320      	movs	r3, #32
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d005      	beq.n	80020fa <MA330_Init+0x192>
		cs_high(encd);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f7ff ff29 	bl	8001f48 <cs_high>

		return 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e004      	b.n	8002104 <MA330_Init+0x19c>
	}
	cs_high(encd);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	0018      	movs	r0, r3
 80020fe:	f7ff ff23 	bl	8001f48 <cs_high>

    }
    return 1;
 8002102:	2301      	movs	r3, #1
}
 8002104:	0018      	movs	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	b006      	add	sp, #24
 800210a:	bd80      	pop	{r7, pc}

0800210c <MA330_start>:

//14 bit de donnee utile
int MA330_start(MA330_t *encd) {
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    uint8_t dummy[2];
    dummy[0]=0x00;
 8002114:	240c      	movs	r4, #12
 8002116:	193b      	adds	r3, r7, r4
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
    dummy[1]=0x00;
 800211c:	193b      	adds	r3, r7, r4
 800211e:	2200      	movs	r2, #0
 8002120:	705a      	strb	r2, [r3, #1]

	cs_low(encd);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0018      	movs	r0, r3
 8002126:	f7ff feff 	bl	8001f28 <cs_low>
	if (HAL_SPI_TransmitReceive_DMA(encd->MA330_spi, (uint8_t*)dummy, encd->spi_rx_buffer, 2) != HAL_OK) {
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	330a      	adds	r3, #10
 8002132:	001a      	movs	r2, r3
 8002134:	1939      	adds	r1, r7, r4
 8002136:	2302      	movs	r3, #2
 8002138:	f003 fe9a 	bl	8005e70 <HAL_SPI_TransmitReceive_DMA>
 800213c:	1e03      	subs	r3, r0, #0
 800213e:	d001      	beq.n	8002144 <MA330_start+0x38>
        return 0;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <MA330_start+0x3a>
    }

	return 1;
 8002144:	2301      	movs	r3, #1
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b005      	add	sp, #20
 800214c:	bd90      	pop	{r4, r7, pc}
	...

08002150 <MA330_get_degree>:


float MA330_get_degree(MA330_t *encd) {
 8002150:	b5b0      	push	{r4, r5, r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	cs_high(encd);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	0018      	movs	r0, r3
 800215c:	f7ff fef4 	bl	8001f48 <cs_high>

    const uint16_t raw_data =(uint16_t)((encd->spi_rx_buffer[0] << 8) | encd->spi_rx_buffer[1]);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7a9b      	ldrb	r3, [r3, #10]
 8002164:	b21b      	sxth	r3, r3
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	b21a      	sxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	7adb      	ldrb	r3, [r3, #11]
 800216e:	b21b      	sxth	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b21a      	sxth	r2, r3
 8002174:	2116      	movs	r1, #22
 8002176:	187b      	adds	r3, r7, r1
 8002178:	801a      	strh	r2, [r3, #0]

    const float angle_raw = (float)((raw_data >> 2) & 0x3FFF) * ANGLE_SCALE_FACTOR;
 800217a:	187b      	adds	r3, r7, r1
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	b29b      	uxth	r3, r3
 8002182:	049b      	lsls	r3, r3, #18
 8002184:	0c9b      	lsrs	r3, r3, #18
 8002186:	0018      	movs	r0, r3
 8002188:	f7fe feea 	bl	8000f60 <__aeabi_i2f>
 800218c:	1c03      	adds	r3, r0, #0
 800218e:	4958      	ldr	r1, [pc, #352]	@ (80022f0 <MA330_get_degree+0x1a0>)
 8002190:	1c18      	adds	r0, r3, #0
 8002192:	f7fe fb27 	bl	80007e4 <__aeabi_fmul>
 8002196:	1c03      	adds	r3, r0, #0
 8002198:	613b      	str	r3, [r7, #16]



    float angle_diff = angle_raw - encd->prev_raw_angle;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	1c19      	adds	r1, r3, #0
 80021a0:	6938      	ldr	r0, [r7, #16]
 80021a2:	f7fe fc79 	bl	8000a98 <__aeabi_fsub>
 80021a6:	1c03      	adds	r3, r0, #0
 80021a8:	60fb      	str	r3, [r7, #12]
    angle_diff -= 360.0f * floorf((angle_diff + 180.0f) * INV_360);//normalisation entre -180 et 180
 80021aa:	4952      	ldr	r1, [pc, #328]	@ (80022f4 <MA330_get_degree+0x1a4>)
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7fe f86f 	bl	8000290 <__aeabi_fadd>
 80021b2:	1c03      	adds	r3, r0, #0
 80021b4:	4950      	ldr	r1, [pc, #320]	@ (80022f8 <MA330_get_degree+0x1a8>)
 80021b6:	1c18      	adds	r0, r3, #0
 80021b8:	f7fe fb14 	bl	80007e4 <__aeabi_fmul>
 80021bc:	1c03      	adds	r3, r0, #0
 80021be:	1c18      	adds	r0, r3, #0
 80021c0:	f005 ff8c 	bl	80080dc <floorf>
 80021c4:	1c03      	adds	r3, r0, #0
 80021c6:	494d      	ldr	r1, [pc, #308]	@ (80022fc <MA330_get_degree+0x1ac>)
 80021c8:	1c18      	adds	r0, r3, #0
 80021ca:	f7fe fb0b 	bl	80007e4 <__aeabi_fmul>
 80021ce:	1c03      	adds	r3, r0, #0
 80021d0:	1c19      	adds	r1, r3, #0
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f7fe fc60 	bl	8000a98 <__aeabi_fsub>
 80021d8:	1c03      	adds	r3, r0, #0
 80021da:	60fb      	str	r3, [r7, #12]

    if (fabsf(angle_diff) > MAX_ANGLE_JUMP_DEG) {
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	085b      	lsrs	r3, r3, #1
 80021e2:	4947      	ldr	r1, [pc, #284]	@ (8002300 <MA330_get_degree+0x1b0>)
 80021e4:	1c18      	adds	r0, r3, #0
 80021e6:	f7fe f83f 	bl	8000268 <__aeabi_fcmpgt>
 80021ea:	1e03      	subs	r3, r0, #0
 80021ec:	d010      	beq.n	8002210 <MA330_get_degree+0xc0>
        if (++encd->spike_counter < SPIKE_REJECT_COUNT) {
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7e1b      	ldrb	r3, [r3, #24]
 80021f2:	3301      	adds	r3, #1
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	761a      	strb	r2, [r3, #24]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	7e1b      	ldrb	r3, [r3, #24]
 80021fe:	2b09      	cmp	r3, #9
 8002200:	d802      	bhi.n	8002208 <MA330_get_degree+0xb8>
            return encd->angle_filtered;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	e06e      	b.n	80022e6 <MA330_get_degree+0x196>
        }
        encd->spike_counter = 0;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	761a      	strb	r2, [r3, #24]
 800220e:	e002      	b.n	8002216 <MA330_get_degree+0xc6>
    } else {
        encd->spike_counter = 0;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	761a      	strb	r2, [r3, #24]
    }

    encd->prev_raw_angle = angle_raw;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	615a      	str	r2, [r3, #20]

    // Filter IIR dengan wrap-around
    float filtered_diff = angle_raw - encd->angle_filtered;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	1c19      	adds	r1, r3, #0
 8002222:	6938      	ldr	r0, [r7, #16]
 8002224:	f7fe fc38 	bl	8000a98 <__aeabi_fsub>
 8002228:	1c03      	adds	r3, r0, #0
 800222a:	60bb      	str	r3, [r7, #8]
    filtered_diff -= 360.0f * floorf((filtered_diff + 180.0f) * INV_360);
 800222c:	4931      	ldr	r1, [pc, #196]	@ (80022f4 <MA330_get_degree+0x1a4>)
 800222e:	68b8      	ldr	r0, [r7, #8]
 8002230:	f7fe f82e 	bl	8000290 <__aeabi_fadd>
 8002234:	1c03      	adds	r3, r0, #0
 8002236:	4930      	ldr	r1, [pc, #192]	@ (80022f8 <MA330_get_degree+0x1a8>)
 8002238:	1c18      	adds	r0, r3, #0
 800223a:	f7fe fad3 	bl	80007e4 <__aeabi_fmul>
 800223e:	1c03      	adds	r3, r0, #0
 8002240:	1c18      	adds	r0, r3, #0
 8002242:	f005 ff4b 	bl	80080dc <floorf>
 8002246:	1c03      	adds	r3, r0, #0
 8002248:	492c      	ldr	r1, [pc, #176]	@ (80022fc <MA330_get_degree+0x1ac>)
 800224a:	1c18      	adds	r0, r3, #0
 800224c:	f7fe faca 	bl	80007e4 <__aeabi_fmul>
 8002250:	1c03      	adds	r3, r0, #0
 8002252:	1c19      	adds	r1, r3, #0
 8002254:	68b8      	ldr	r0, [r7, #8]
 8002256:	f7fe fc1f 	bl	8000a98 <__aeabi_fsub>
 800225a:	1c03      	adds	r3, r0, #0
 800225c:	60bb      	str	r3, [r7, #8]
    encd->angle_filtered += ANGLE_FILTER_ALPHA * filtered_diff;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	1c18      	adds	r0, r3, #0
 8002264:	f7ff fd78 	bl	8001d58 <__aeabi_f2d>
 8002268:	0004      	movs	r4, r0
 800226a:	000d      	movs	r5, r1
 800226c:	68b8      	ldr	r0, [r7, #8]
 800226e:	f7ff fd73 	bl	8001d58 <__aeabi_f2d>
 8002272:	4a24      	ldr	r2, [pc, #144]	@ (8002304 <MA330_get_degree+0x1b4>)
 8002274:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <MA330_get_degree+0x1b8>)
 8002276:	f7ff fa89 	bl	800178c <__aeabi_dmul>
 800227a:	0002      	movs	r2, r0
 800227c:	000b      	movs	r3, r1
 800227e:	0020      	movs	r0, r4
 8002280:	0029      	movs	r1, r5
 8002282:	f7fe febd 	bl	8001000 <__aeabi_dadd>
 8002286:	0002      	movs	r2, r0
 8002288:	000b      	movs	r3, r1
 800228a:	0010      	movs	r0, r2
 800228c:	0019      	movs	r1, r3
 800228e:	f7ff fdab 	bl	8001de8 <__aeabi_d2f>
 8002292:	1c02      	adds	r2, r0, #0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]

    if (encd->angle_filtered >= 360.0f)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4917      	ldr	r1, [pc, #92]	@ (80022fc <MA330_get_degree+0x1ac>)
 800229e:	1c18      	adds	r0, r3, #0
 80022a0:	f7fd ffec 	bl	800027c <__aeabi_fcmpge>
 80022a4:	1e03      	subs	r3, r0, #0
 80022a6:	d00a      	beq.n	80022be <MA330_get_degree+0x16e>
        encd->angle_filtered -= 360.0f;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4913      	ldr	r1, [pc, #76]	@ (80022fc <MA330_get_degree+0x1ac>)
 80022ae:	1c18      	adds	r0, r3, #0
 80022b0:	f7fe fbf2 	bl	8000a98 <__aeabi_fsub>
 80022b4:	1c03      	adds	r3, r0, #0
 80022b6:	1c1a      	adds	r2, r3, #0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	e011      	b.n	80022e2 <MA330_get_degree+0x192>
    else if (encd->angle_filtered < 0.0f)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2100      	movs	r1, #0
 80022c4:	1c18      	adds	r0, r3, #0
 80022c6:	f7fd ffbb 	bl	8000240 <__aeabi_fcmplt>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d009      	beq.n	80022e2 <MA330_get_degree+0x192>
        encd->angle_filtered += 360.0f;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	490a      	ldr	r1, [pc, #40]	@ (80022fc <MA330_get_degree+0x1ac>)
 80022d4:	1c18      	adds	r0, r3, #0
 80022d6:	f7fd ffdb 	bl	8000290 <__aeabi_fadd>
 80022da:	1c03      	adds	r3, r0, #0
 80022dc:	1c1a      	adds	r2, r3, #0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60da      	str	r2, [r3, #12]

    return encd->angle_filtered;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
}
 80022e6:	1c18      	adds	r0, r3, #0
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b006      	add	sp, #24
 80022ec:	bdb0      	pop	{r4, r5, r7, pc}
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	3cb40000 	.word	0x3cb40000
 80022f4:	43340000 	.word	0x43340000
 80022f8:	3b360b61 	.word	0x3b360b61
 80022fc:	43b40000 	.word	0x43b40000
 8002300:	41a00000 	.word	0x41a00000
 8002304:	9999999a 	.word	0x9999999a
 8002308:	3fc99999 	.word	0x3fc99999

0800230c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	0018      	movs	r0, r3
 8002316:	230c      	movs	r3, #12
 8002318:	001a      	movs	r2, r3
 800231a:	2100      	movs	r1, #0
 800231c:	f005 feb1 	bl	8008082 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002320:	4b4f      	ldr	r3, [pc, #316]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002322:	4a50      	ldr	r2, [pc, #320]	@ (8002464 <MX_ADC1_Init+0x158>)
 8002324:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002326:	4b4e      	ldr	r3, [pc, #312]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002328:	2280      	movs	r2, #128	@ 0x80
 800232a:	05d2      	lsls	r2, r2, #23
 800232c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800232e:	4b4c      	ldr	r3, [pc, #304]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002334:	4b4a      	ldr	r3, [pc, #296]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800233a:	4b49      	ldr	r3, [pc, #292]	@ (8002460 <MX_ADC1_Init+0x154>)
 800233c:	2280      	movs	r2, #128	@ 0x80
 800233e:	0392      	lsls	r2, r2, #14
 8002340:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002342:	4b47      	ldr	r3, [pc, #284]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002344:	2208      	movs	r2, #8
 8002346:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002348:	4b45      	ldr	r3, [pc, #276]	@ (8002460 <MX_ADC1_Init+0x154>)
 800234a:	2200      	movs	r2, #0
 800234c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800234e:	4b44      	ldr	r3, [pc, #272]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002350:	2200      	movs	r2, #0
 8002352:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002354:	4b42      	ldr	r3, [pc, #264]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002356:	2200      	movs	r2, #0
 8002358:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 800235a:	4b41      	ldr	r3, [pc, #260]	@ (8002460 <MX_ADC1_Init+0x154>)
 800235c:	2205      	movs	r2, #5
 800235e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8002360:	4b3f      	ldr	r3, [pc, #252]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002362:	2220      	movs	r2, #32
 8002364:	2101      	movs	r1, #1
 8002366:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8002368:	4b3d      	ldr	r3, [pc, #244]	@ (8002460 <MX_ADC1_Init+0x154>)
 800236a:	2280      	movs	r2, #128	@ 0x80
 800236c:	00d2      	lsls	r2, r2, #3
 800236e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002370:	4b3b      	ldr	r3, [pc, #236]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002372:	2280      	movs	r2, #128	@ 0x80
 8002374:	00d2      	lsls	r2, r2, #3
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002378:	4b39      	ldr	r3, [pc, #228]	@ (8002460 <MX_ADC1_Init+0x154>)
 800237a:	222c      	movs	r2, #44	@ 0x2c
 800237c:	2101      	movs	r1, #1
 800237e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002380:	4b37      	ldr	r3, [pc, #220]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002382:	2200      	movs	r2, #0
 8002384:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002386:	4b36      	ldr	r3, [pc, #216]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002388:	2200      	movs	r2, #0
 800238a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800238c:	4b34      	ldr	r3, [pc, #208]	@ (8002460 <MX_ADC1_Init+0x154>)
 800238e:	2200      	movs	r2, #0
 8002390:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002392:	4b33      	ldr	r3, [pc, #204]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002394:	223c      	movs	r2, #60	@ 0x3c
 8002396:	2100      	movs	r1, #0
 8002398:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800239a:	4b31      	ldr	r3, [pc, #196]	@ (8002460 <MX_ADC1_Init+0x154>)
 800239c:	2200      	movs	r2, #0
 800239e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002460 <MX_ADC1_Init+0x154>)
 80023a2:	0018      	movs	r0, r3
 80023a4:	f001 f89a 	bl	80034dc <HAL_ADC_Init>
 80023a8:	1e03      	subs	r3, r0, #0
 80023aa:	d001      	beq.n	80023b0 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80023ac:	f000 fa9a 	bl	80028e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002468 <MX_ADC1_Init+0x15c>)
 80023b4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	2200      	movs	r2, #0
 80023ba:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023c2:	1d3a      	adds	r2, r7, #4
 80023c4:	4b26      	ldr	r3, [pc, #152]	@ (8002460 <MX_ADC1_Init+0x154>)
 80023c6:	0011      	movs	r1, r2
 80023c8:	0018      	movs	r0, r3
 80023ca:	f001 fbed 	bl	8003ba8 <HAL_ADC_ConfigChannel>
 80023ce:	1e03      	subs	r3, r0, #0
 80023d0:	d001      	beq.n	80023d6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80023d2:	f000 fa87 	bl	80028e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	4a24      	ldr	r2, [pc, #144]	@ (800246c <MX_ADC1_Init+0x160>)
 80023da:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	2204      	movs	r2, #4
 80023e0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023e2:	1d3a      	adds	r2, r7, #4
 80023e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002460 <MX_ADC1_Init+0x154>)
 80023e6:	0011      	movs	r1, r2
 80023e8:	0018      	movs	r0, r3
 80023ea:	f001 fbdd 	bl	8003ba8 <HAL_ADC_ConfigChannel>
 80023ee:	1e03      	subs	r3, r0, #0
 80023f0:	d001      	beq.n	80023f6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80023f2:	f000 fa77 	bl	80028e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002470 <MX_ADC1_Init+0x164>)
 80023fa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	2208      	movs	r2, #8
 8002400:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002402:	1d3a      	adds	r2, r7, #4
 8002404:	4b16      	ldr	r3, [pc, #88]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002406:	0011      	movs	r1, r2
 8002408:	0018      	movs	r0, r3
 800240a:	f001 fbcd 	bl	8003ba8 <HAL_ADC_ConfigChannel>
 800240e:	1e03      	subs	r3, r0, #0
 8002410:	d001      	beq.n	8002416 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8002412:	f000 fa67 	bl	80028e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	4a16      	ldr	r2, [pc, #88]	@ (8002474 <MX_ADC1_Init+0x168>)
 800241a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	220c      	movs	r2, #12
 8002420:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002422:	1d3a      	adds	r2, r7, #4
 8002424:	4b0e      	ldr	r3, [pc, #56]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002426:	0011      	movs	r1, r2
 8002428:	0018      	movs	r0, r3
 800242a:	f001 fbbd 	bl	8003ba8 <HAL_ADC_ConfigChannel>
 800242e:	1e03      	subs	r3, r0, #0
 8002430:	d001      	beq.n	8002436 <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 8002432:	f000 fa57 	bl	80028e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	4a0f      	ldr	r2, [pc, #60]	@ (8002478 <MX_ADC1_Init+0x16c>)
 800243a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	2210      	movs	r2, #16
 8002440:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002442:	1d3a      	adds	r2, r7, #4
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <MX_ADC1_Init+0x154>)
 8002446:	0011      	movs	r1, r2
 8002448:	0018      	movs	r0, r3
 800244a:	f001 fbad 	bl	8003ba8 <HAL_ADC_ConfigChannel>
 800244e:	1e03      	subs	r3, r0, #0
 8002450:	d001      	beq.n	8002456 <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8002452:	f000 fa47 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	b004      	add	sp, #16
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	20000028 	.word	0x20000028
 8002464:	40012400 	.word	0x40012400
 8002468:	18000040 	.word	0x18000040
 800246c:	1c000080 	.word	0x1c000080
 8002470:	24000200 	.word	0x24000200
 8002474:	14000020 	.word	0x14000020
 8002478:	b4002000 	.word	0xb4002000

0800247c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b08b      	sub	sp, #44	@ 0x2c
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	2414      	movs	r4, #20
 8002486:	193b      	adds	r3, r7, r4
 8002488:	0018      	movs	r0, r3
 800248a:	2314      	movs	r3, #20
 800248c:	001a      	movs	r2, r3
 800248e:	2100      	movs	r1, #0
 8002490:	f005 fdf7 	bl	8008082 <memset>
  if(adcHandle->Instance==ADC1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a3f      	ldr	r2, [pc, #252]	@ (8002598 <HAL_ADC_MspInit+0x11c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d177      	bne.n	800258e <HAL_ADC_MspInit+0x112>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800249e:	4b3f      	ldr	r3, [pc, #252]	@ (800259c <HAL_ADC_MspInit+0x120>)
 80024a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024a2:	4b3e      	ldr	r3, [pc, #248]	@ (800259c <HAL_ADC_MspInit+0x120>)
 80024a4:	2180      	movs	r1, #128	@ 0x80
 80024a6:	0349      	lsls	r1, r1, #13
 80024a8:	430a      	orrs	r2, r1
 80024aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80024ac:	4b3b      	ldr	r3, [pc, #236]	@ (800259c <HAL_ADC_MspInit+0x120>)
 80024ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024b0:	2380      	movs	r3, #128	@ 0x80
 80024b2:	035b      	lsls	r3, r3, #13
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	4b38      	ldr	r3, [pc, #224]	@ (800259c <HAL_ADC_MspInit+0x120>)
 80024bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024be:	4b37      	ldr	r3, [pc, #220]	@ (800259c <HAL_ADC_MspInit+0x120>)
 80024c0:	2101      	movs	r1, #1
 80024c2:	430a      	orrs	r2, r1
 80024c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80024c6:	4b35      	ldr	r3, [pc, #212]	@ (800259c <HAL_ADC_MspInit+0x120>)
 80024c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ca:	2201      	movs	r2, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d2:	4b32      	ldr	r3, [pc, #200]	@ (800259c <HAL_ADC_MspInit+0x120>)
 80024d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024d6:	4b31      	ldr	r3, [pc, #196]	@ (800259c <HAL_ADC_MspInit+0x120>)
 80024d8:	2102      	movs	r1, #2
 80024da:	430a      	orrs	r2, r1
 80024dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80024de:	4b2f      	ldr	r3, [pc, #188]	@ (800259c <HAL_ADC_MspInit+0x120>)
 80024e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e2:	2202      	movs	r2, #2
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024ea:	193b      	adds	r3, r7, r4
 80024ec:	22e0      	movs	r2, #224	@ 0xe0
 80024ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f0:	193b      	adds	r3, r7, r4
 80024f2:	2203      	movs	r2, #3
 80024f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	193b      	adds	r3, r7, r4
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fc:	193a      	adds	r2, r7, r4
 80024fe:	23a0      	movs	r3, #160	@ 0xa0
 8002500:	05db      	lsls	r3, r3, #23
 8002502:	0011      	movs	r1, r2
 8002504:	0018      	movs	r0, r3
 8002506:	f002 f9f5 	bl	80048f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800250a:	193b      	adds	r3, r7, r4
 800250c:	2202      	movs	r2, #2
 800250e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002510:	193b      	adds	r3, r7, r4
 8002512:	2203      	movs	r2, #3
 8002514:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	193b      	adds	r3, r7, r4
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	193b      	adds	r3, r7, r4
 800251e:	4a20      	ldr	r2, [pc, #128]	@ (80025a0 <HAL_ADC_MspInit+0x124>)
 8002520:	0019      	movs	r1, r3
 8002522:	0010      	movs	r0, r2
 8002524:	f002 f9e6 	bl	80048f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002528:	4b1e      	ldr	r3, [pc, #120]	@ (80025a4 <HAL_ADC_MspInit+0x128>)
 800252a:	4a1f      	ldr	r2, [pc, #124]	@ (80025a8 <HAL_ADC_MspInit+0x12c>)
 800252c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800252e:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <HAL_ADC_MspInit+0x128>)
 8002530:	2205      	movs	r2, #5
 8002532:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002534:	4b1b      	ldr	r3, [pc, #108]	@ (80025a4 <HAL_ADC_MspInit+0x128>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800253a:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <HAL_ADC_MspInit+0x128>)
 800253c:	2200      	movs	r2, #0
 800253e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002540:	4b18      	ldr	r3, [pc, #96]	@ (80025a4 <HAL_ADC_MspInit+0x128>)
 8002542:	2280      	movs	r2, #128	@ 0x80
 8002544:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002546:	4b17      	ldr	r3, [pc, #92]	@ (80025a4 <HAL_ADC_MspInit+0x128>)
 8002548:	2280      	movs	r2, #128	@ 0x80
 800254a:	0052      	lsls	r2, r2, #1
 800254c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800254e:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <HAL_ADC_MspInit+0x128>)
 8002550:	2280      	movs	r2, #128	@ 0x80
 8002552:	00d2      	lsls	r2, r2, #3
 8002554:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002556:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <HAL_ADC_MspInit+0x128>)
 8002558:	2220      	movs	r2, #32
 800255a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800255c:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_ADC_MspInit+0x128>)
 800255e:	2200      	movs	r2, #0
 8002560:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002562:	4b10      	ldr	r3, [pc, #64]	@ (80025a4 <HAL_ADC_MspInit+0x128>)
 8002564:	0018      	movs	r0, r3
 8002566:	f001 ff09 	bl	800437c <HAL_DMA_Init>
 800256a:	1e03      	subs	r3, r0, #0
 800256c:	d001      	beq.n	8002572 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800256e:	f000 f9b9 	bl	80028e4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a0b      	ldr	r2, [pc, #44]	@ (80025a4 <HAL_ADC_MspInit+0x128>)
 8002576:	651a      	str	r2, [r3, #80]	@ 0x50
 8002578:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <HAL_ADC_MspInit+0x128>)
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	200c      	movs	r0, #12
 8002584:	f001 fec8 	bl	8004318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002588:	200c      	movs	r0, #12
 800258a:	f001 feda 	bl	8004342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	46bd      	mov	sp, r7
 8002592:	b00b      	add	sp, #44	@ 0x2c
 8002594:	bd90      	pop	{r4, r7, pc}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	40012400 	.word	0x40012400
 800259c:	40021000 	.word	0x40021000
 80025a0:	50000400 	.word	0x50000400
 80025a4:	2000008c 	.word	0x2000008c
 80025a8:	40020008 	.word	0x40020008

080025ac <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]





}
 80025b4:	46c0      	nop			@ (mov r8, r8)
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b002      	add	sp, #8
 80025ba:	bd80      	pop	{r7, pc}

080025bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025c2:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <MX_DMA_Init+0x48>)
 80025c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002604 <MX_DMA_Init+0x48>)
 80025c8:	2101      	movs	r1, #1
 80025ca:	430a      	orrs	r2, r1
 80025cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80025ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002604 <MX_DMA_Init+0x48>)
 80025d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d2:	2201      	movs	r2, #1
 80025d4:	4013      	ands	r3, r2
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	2009      	movs	r0, #9
 80025e0:	f001 fe9a 	bl	8004318 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025e4:	2009      	movs	r0, #9
 80025e6:	f001 feac 	bl	8004342 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	200a      	movs	r0, #10
 80025f0:	f001 fe92 	bl	8004318 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80025f4:	200a      	movs	r0, #10
 80025f6:	f001 fea4 	bl	8004342 <HAL_NVIC_EnableIRQ>

}
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b002      	add	sp, #8
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	40021000 	.word	0x40021000

08002608 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b089      	sub	sp, #36	@ 0x24
 800260c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260e:	240c      	movs	r4, #12
 8002610:	193b      	adds	r3, r7, r4
 8002612:	0018      	movs	r0, r3
 8002614:	2314      	movs	r3, #20
 8002616:	001a      	movs	r2, r3
 8002618:	2100      	movs	r1, #0
 800261a:	f005 fd32 	bl	8008082 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800261e:	4b44      	ldr	r3, [pc, #272]	@ (8002730 <MX_GPIO_Init+0x128>)
 8002620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002622:	4b43      	ldr	r3, [pc, #268]	@ (8002730 <MX_GPIO_Init+0x128>)
 8002624:	2120      	movs	r1, #32
 8002626:	430a      	orrs	r2, r1
 8002628:	635a      	str	r2, [r3, #52]	@ 0x34
 800262a:	4b41      	ldr	r3, [pc, #260]	@ (8002730 <MX_GPIO_Init+0x128>)
 800262c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800262e:	2220      	movs	r2, #32
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	4b3e      	ldr	r3, [pc, #248]	@ (8002730 <MX_GPIO_Init+0x128>)
 8002638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800263a:	4b3d      	ldr	r3, [pc, #244]	@ (8002730 <MX_GPIO_Init+0x128>)
 800263c:	2101      	movs	r1, #1
 800263e:	430a      	orrs	r2, r1
 8002640:	635a      	str	r2, [r3, #52]	@ 0x34
 8002642:	4b3b      	ldr	r3, [pc, #236]	@ (8002730 <MX_GPIO_Init+0x128>)
 8002644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002646:	2201      	movs	r2, #1
 8002648:	4013      	ands	r3, r2
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800264e:	4b38      	ldr	r3, [pc, #224]	@ (8002730 <MX_GPIO_Init+0x128>)
 8002650:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002652:	4b37      	ldr	r3, [pc, #220]	@ (8002730 <MX_GPIO_Init+0x128>)
 8002654:	2102      	movs	r1, #2
 8002656:	430a      	orrs	r2, r1
 8002658:	635a      	str	r2, [r3, #52]	@ 0x34
 800265a:	4b35      	ldr	r3, [pc, #212]	@ (8002730 <MX_GPIO_Init+0x128>)
 800265c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265e:	2202      	movs	r2, #2
 8002660:	4013      	ands	r3, r2
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8002666:	4b33      	ldr	r3, [pc, #204]	@ (8002734 <MX_GPIO_Init+0x12c>)
 8002668:	2200      	movs	r2, #0
 800266a:	2101      	movs	r1, #1
 800266c:	0018      	movs	r0, r3
 800266e:	f002 faa5 	bl	8004bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|HALL_CS_Pin, GPIO_PIN_RESET);
 8002672:	4931      	ldr	r1, [pc, #196]	@ (8002738 <MX_GPIO_Init+0x130>)
 8002674:	23a0      	movs	r3, #160	@ 0xa0
 8002676:	05db      	lsls	r3, r3, #23
 8002678:	2200      	movs	r2, #0
 800267a:	0018      	movs	r0, r3
 800267c:	f002 fa9e 	bl	8004bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002680:	193b      	adds	r3, r7, r4
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002686:	193b      	adds	r3, r7, r4
 8002688:	2201      	movs	r2, #1
 800268a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	193b      	adds	r3, r7, r4
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002692:	193b      	adds	r3, r7, r4
 8002694:	2200      	movs	r2, #0
 8002696:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002698:	193b      	adds	r3, r7, r4
 800269a:	4a26      	ldr	r2, [pc, #152]	@ (8002734 <MX_GPIO_Init+0x12c>)
 800269c:	0019      	movs	r1, r3
 800269e:	0010      	movs	r0, r2
 80026a0:	f002 f928 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026a4:	193b      	adds	r3, r7, r4
 80026a6:	220c      	movs	r2, #12
 80026a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026aa:	193b      	adds	r3, r7, r4
 80026ac:	2201      	movs	r2, #1
 80026ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	193b      	adds	r3, r7, r4
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026b6:	193b      	adds	r3, r7, r4
 80026b8:	2202      	movs	r2, #2
 80026ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026bc:	193a      	adds	r2, r7, r4
 80026be:	23a0      	movs	r3, #160	@ 0xa0
 80026c0:	05db      	lsls	r3, r3, #23
 80026c2:	0011      	movs	r1, r2
 80026c4:	0018      	movs	r0, r3
 80026c6:	f002 f915 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026ca:	193b      	adds	r3, r7, r4
 80026cc:	2280      	movs	r2, #128	@ 0x80
 80026ce:	0152      	lsls	r2, r2, #5
 80026d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026d2:	193b      	adds	r3, r7, r4
 80026d4:	2288      	movs	r2, #136	@ 0x88
 80026d6:	0352      	lsls	r2, r2, #13
 80026d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	193b      	adds	r3, r7, r4
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e0:	193a      	adds	r2, r7, r4
 80026e2:	23a0      	movs	r3, #160	@ 0xa0
 80026e4:	05db      	lsls	r3, r3, #23
 80026e6:	0011      	movs	r1, r2
 80026e8:	0018      	movs	r0, r3
 80026ea:	f002 f903 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_CS_Pin */
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 80026ee:	0021      	movs	r1, r4
 80026f0:	187b      	adds	r3, r7, r1
 80026f2:	2280      	movs	r2, #128	@ 0x80
 80026f4:	0212      	lsls	r2, r2, #8
 80026f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	2201      	movs	r2, #1
 80026fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	187b      	adds	r3, r7, r1
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 800270a:	187a      	adds	r2, r7, r1
 800270c:	23a0      	movs	r3, #160	@ 0xa0
 800270e:	05db      	lsls	r3, r3, #23
 8002710:	0011      	movs	r1, r2
 8002712:	0018      	movs	r0, r3
 8002714:	f002 f8ee 	bl	80048f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002718:	2200      	movs	r2, #0
 800271a:	2100      	movs	r1, #0
 800271c:	2007      	movs	r0, #7
 800271e:	f001 fdfb 	bl	8004318 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002722:	2007      	movs	r0, #7
 8002724:	f001 fe0d 	bl	8004342 <HAL_NVIC_EnableIRQ>

}
 8002728:	46c0      	nop			@ (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b009      	add	sp, #36	@ 0x24
 800272e:	bd90      	pop	{r4, r7, pc}
 8002730:	40021000 	.word	0x40021000
 8002734:	50001400 	.word	0x50001400
 8002738:	0000800c 	.word	0x0000800c

0800273c <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	0002      	movs	r2, r0
 8002744:	1dbb      	adds	r3, r7, #6
 8002746:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_0);
 8002748:	4b04      	ldr	r3, [pc, #16]	@ (800275c <HAL_GPIO_EXTI_Rising_Callback+0x20>)
 800274a:	2101      	movs	r1, #1
 800274c:	0018      	movs	r0, r3
 800274e:	f002 fa52 	bl	8004bf6 <HAL_GPIO_TogglePin>


}
 8002752:	46c0      	nop			@ (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b002      	add	sp, #8
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	50001400 	.word	0x50001400

08002760 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	0002      	movs	r2, r0
 8002768:	1dbb      	adds	r3, r7, #6
 800276a:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_0);
 800276c:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <HAL_GPIO_EXTI_Falling_Callback+0x20>)
 800276e:	2101      	movs	r1, #1
 8002770:	0018      	movs	r0, r3
 8002772:	f002 fa40 	bl	8004bf6 <HAL_GPIO_TogglePin>



}
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	b002      	add	sp, #8
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	50001400 	.word	0x50001400

08002784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b083      	sub	sp, #12
 8002788:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800278a:	f000 fca9 	bl	80030e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800278e:	f000 f84b 	bl	8002828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002792:	f7ff ff39 	bl	8002608 <MX_GPIO_Init>
  MX_DMA_Init();
 8002796:	f7ff ff11 	bl	80025bc <MX_DMA_Init>
  MX_ADC1_Init();
 800279a:	f7ff fdb7 	bl	800230c <MX_ADC1_Init>
  MX_SPI2_Init();
 800279e:	f000 f8a7 	bl	80028f0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80027a2:	f000 fa8b 	bl	8002cbc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  MA330_Init(&ma330data, &hspi2, HALL_CS_GPIO_Port, HALL_CS_Pin,NORMAL_FW);
 80027a6:	2380      	movs	r3, #128	@ 0x80
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	22a0      	movs	r2, #160	@ 0xa0
 80027ac:	05d2      	lsls	r2, r2, #23
 80027ae:	4919      	ldr	r1, [pc, #100]	@ (8002814 <main+0x90>)
 80027b0:	4819      	ldr	r0, [pc, #100]	@ (8002818 <main+0x94>)
 80027b2:	2466      	movs	r4, #102	@ 0x66
 80027b4:	9400      	str	r4, [sp, #0]
 80027b6:	f7ff fbd7 	bl	8001f68 <MA330_Init>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80027ba:	4b18      	ldr	r3, [pc, #96]	@ (800281c <main+0x98>)
 80027bc:	2100      	movs	r1, #0
 80027be:	0018      	movs	r0, r3
 80027c0:	f004 f9a2 	bl	8006b08 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80027c4:	4b15      	ldr	r3, [pc, #84]	@ (800281c <main+0x98>)
 80027c6:	2100      	movs	r1, #0
 80027c8:	0018      	movs	r0, r3
 80027ca:	f005 fa7d 	bl	8007cc8 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80027ce:	4b13      	ldr	r3, [pc, #76]	@ (800281c <main+0x98>)
 80027d0:	2104      	movs	r1, #4
 80027d2:	0018      	movs	r0, r3
 80027d4:	f004 f998 	bl	8006b08 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80027d8:	4b10      	ldr	r3, [pc, #64]	@ (800281c <main+0x98>)
 80027da:	2104      	movs	r1, #4
 80027dc:	0018      	movs	r0, r3
 80027de:	f005 fa73 	bl	8007cc8 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80027e2:	4b0e      	ldr	r3, [pc, #56]	@ (800281c <main+0x98>)
 80027e4:	2108      	movs	r1, #8
 80027e6:	0018      	movs	r0, r3
 80027e8:	f004 f98e 	bl	8006b08 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <main+0x98>)
 80027ee:	2108      	movs	r1, #8
 80027f0:	0018      	movs	r0, r3
 80027f2:	f005 fa69 	bl	8007cc8 <HAL_TIMEx_PWMN_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 5);
 80027f6:	490a      	ldr	r1, [pc, #40]	@ (8002820 <main+0x9c>)
 80027f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <main+0xa0>)
 80027fa:	2205      	movs	r2, #5
 80027fc:	0018      	movs	r0, r3
 80027fe:	f001 f815 	bl	800382c <HAL_ADC_Start_DMA>


	//HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4);
//
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8002802:	4b06      	ldr	r3, [pc, #24]	@ (800281c <main+0x98>)
 8002804:	210c      	movs	r1, #12
 8002806:	0018      	movs	r0, r3
 8002808:	f004 fa5c 	bl	8006cc4 <HAL_TIM_PWM_Start_IT>
	while (1)
	{

		//HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_0);

		HAL_Delay(100);
 800280c:	2064      	movs	r0, #100	@ 0x64
 800280e:	f000 fced 	bl	80031ec <HAL_Delay>
 8002812:	e7fb      	b.n	800280c <main+0x88>
 8002814:	20000130 	.word	0x20000130
 8002818:	200000f4 	.word	0x200000f4
 800281c:	2000024c 	.word	0x2000024c
 8002820:	200000e8 	.word	0x200000e8
 8002824:	20000028 	.word	0x20000028

08002828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b093      	sub	sp, #76	@ 0x4c
 800282c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800282e:	2410      	movs	r4, #16
 8002830:	193b      	adds	r3, r7, r4
 8002832:	0018      	movs	r0, r3
 8002834:	2338      	movs	r3, #56	@ 0x38
 8002836:	001a      	movs	r2, r3
 8002838:	2100      	movs	r1, #0
 800283a:	f005 fc22 	bl	8008082 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800283e:	003b      	movs	r3, r7
 8002840:	0018      	movs	r0, r3
 8002842:	2310      	movs	r3, #16
 8002844:	001a      	movs	r2, r3
 8002846:	2100      	movs	r1, #0
 8002848:	f005 fc1b 	bl	8008082 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	0018      	movs	r0, r3
 8002852:	f002 fa15 	bl	8004c80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002856:	193b      	adds	r3, r7, r4
 8002858:	2202      	movs	r2, #2
 800285a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800285c:	193b      	adds	r3, r7, r4
 800285e:	2280      	movs	r2, #128	@ 0x80
 8002860:	0052      	lsls	r2, r2, #1
 8002862:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002864:	0021      	movs	r1, r4
 8002866:	187b      	adds	r3, r7, r1
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2240      	movs	r2, #64	@ 0x40
 8002870:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002872:	187b      	adds	r3, r7, r1
 8002874:	2202      	movs	r2, #2
 8002876:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002878:	187b      	adds	r3, r7, r1
 800287a:	2202      	movs	r2, #2
 800287c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800287e:	187b      	adds	r3, r7, r1
 8002880:	2200      	movs	r2, #0
 8002882:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002884:	187b      	adds	r3, r7, r1
 8002886:	2208      	movs	r2, #8
 8002888:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800288a:	187b      	adds	r3, r7, r1
 800288c:	22c0      	movs	r2, #192	@ 0xc0
 800288e:	02d2      	lsls	r2, r2, #11
 8002890:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002892:	187b      	adds	r3, r7, r1
 8002894:	2280      	movs	r2, #128	@ 0x80
 8002896:	0492      	lsls	r2, r2, #18
 8002898:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800289a:	187b      	adds	r3, r7, r1
 800289c:	2280      	movs	r2, #128	@ 0x80
 800289e:	0592      	lsls	r2, r2, #22
 80028a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	0018      	movs	r0, r3
 80028a6:	f002 fa2b 	bl	8004d00 <HAL_RCC_OscConfig>
 80028aa:	1e03      	subs	r3, r0, #0
 80028ac:	d001      	beq.n	80028b2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80028ae:	f000 f819 	bl	80028e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028b2:	003b      	movs	r3, r7
 80028b4:	2207      	movs	r2, #7
 80028b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028b8:	003b      	movs	r3, r7
 80028ba:	2202      	movs	r2, #2
 80028bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028be:	003b      	movs	r3, r7
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028c4:	003b      	movs	r3, r7
 80028c6:	2200      	movs	r2, #0
 80028c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028ca:	003b      	movs	r3, r7
 80028cc:	2102      	movs	r1, #2
 80028ce:	0018      	movs	r0, r3
 80028d0:	f002 fd30 	bl	8005334 <HAL_RCC_ClockConfig>
 80028d4:	1e03      	subs	r3, r0, #0
 80028d6:	d001      	beq.n	80028dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80028d8:	f000 f804 	bl	80028e4 <Error_Handler>
  }
}
 80028dc:	46c0      	nop			@ (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b013      	add	sp, #76	@ 0x4c
 80028e2:	bd90      	pop	{r4, r7, pc}

080028e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e8:	b672      	cpsid	i
}
 80028ea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80028ec:	46c0      	nop			@ (mov r8, r8)
 80028ee:	e7fd      	b.n	80028ec <Error_Handler+0x8>

080028f0 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80028f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <MX_SPI2_Init+0x74>)
 80028f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002968 <MX_SPI2_Init+0x78>)
 80028f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002964 <MX_SPI2_Init+0x74>)
 80028fc:	2282      	movs	r2, #130	@ 0x82
 80028fe:	0052      	lsls	r2, r2, #1
 8002900:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002902:	4b18      	ldr	r3, [pc, #96]	@ (8002964 <MX_SPI2_Init+0x74>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002908:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <MX_SPI2_Init+0x74>)
 800290a:	22e0      	movs	r2, #224	@ 0xe0
 800290c:	00d2      	lsls	r2, r2, #3
 800290e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002910:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <MX_SPI2_Init+0x74>)
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002916:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <MX_SPI2_Init+0x74>)
 8002918:	2200      	movs	r2, #0
 800291a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800291c:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <MX_SPI2_Init+0x74>)
 800291e:	2280      	movs	r2, #128	@ 0x80
 8002920:	0092      	lsls	r2, r2, #2
 8002922:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002924:	4b0f      	ldr	r3, [pc, #60]	@ (8002964 <MX_SPI2_Init+0x74>)
 8002926:	2208      	movs	r2, #8
 8002928:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800292a:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <MX_SPI2_Init+0x74>)
 800292c:	2200      	movs	r2, #0
 800292e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <MX_SPI2_Init+0x74>)
 8002932:	2200      	movs	r2, #0
 8002934:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002936:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <MX_SPI2_Init+0x74>)
 8002938:	2200      	movs	r2, #0
 800293a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800293c:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <MX_SPI2_Init+0x74>)
 800293e:	2207      	movs	r2, #7
 8002940:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002942:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <MX_SPI2_Init+0x74>)
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002948:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <MX_SPI2_Init+0x74>)
 800294a:	2208      	movs	r2, #8
 800294c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800294e:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <MX_SPI2_Init+0x74>)
 8002950:	0018      	movs	r0, r3
 8002952:	f002 fff3 	bl	800593c <HAL_SPI_Init>
 8002956:	1e03      	subs	r3, r0, #0
 8002958:	d001      	beq.n	800295e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800295a:	f7ff ffc3 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000130 	.word	0x20000130
 8002968:	40003800 	.word	0x40003800

0800296c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b08b      	sub	sp, #44	@ 0x2c
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	2414      	movs	r4, #20
 8002976:	193b      	adds	r3, r7, r4
 8002978:	0018      	movs	r0, r3
 800297a:	2314      	movs	r3, #20
 800297c:	001a      	movs	r2, r3
 800297e:	2100      	movs	r1, #0
 8002980:	f005 fb7f 	bl	8008082 <memset>
  if(spiHandle->Instance==SPI2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a65      	ldr	r2, [pc, #404]	@ (8002b20 <HAL_SPI_MspInit+0x1b4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d000      	beq.n	8002990 <HAL_SPI_MspInit+0x24>
 800298e:	e0c2      	b.n	8002b16 <HAL_SPI_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002990:	4b64      	ldr	r3, [pc, #400]	@ (8002b24 <HAL_SPI_MspInit+0x1b8>)
 8002992:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002994:	4b63      	ldr	r3, [pc, #396]	@ (8002b24 <HAL_SPI_MspInit+0x1b8>)
 8002996:	2180      	movs	r1, #128	@ 0x80
 8002998:	01c9      	lsls	r1, r1, #7
 800299a:	430a      	orrs	r2, r1
 800299c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800299e:	4b61      	ldr	r3, [pc, #388]	@ (8002b24 <HAL_SPI_MspInit+0x1b8>)
 80029a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029a2:	2380      	movs	r3, #128	@ 0x80
 80029a4:	01db      	lsls	r3, r3, #7
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ac:	4b5d      	ldr	r3, [pc, #372]	@ (8002b24 <HAL_SPI_MspInit+0x1b8>)
 80029ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029b0:	4b5c      	ldr	r3, [pc, #368]	@ (8002b24 <HAL_SPI_MspInit+0x1b8>)
 80029b2:	2101      	movs	r1, #1
 80029b4:	430a      	orrs	r2, r1
 80029b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80029b8:	4b5a      	ldr	r3, [pc, #360]	@ (8002b24 <HAL_SPI_MspInit+0x1b8>)
 80029ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029bc:	2201      	movs	r2, #1
 80029be:	4013      	ands	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c4:	4b57      	ldr	r3, [pc, #348]	@ (8002b24 <HAL_SPI_MspInit+0x1b8>)
 80029c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029c8:	4b56      	ldr	r3, [pc, #344]	@ (8002b24 <HAL_SPI_MspInit+0x1b8>)
 80029ca:	2102      	movs	r1, #2
 80029cc:	430a      	orrs	r2, r1
 80029ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80029d0:	4b54      	ldr	r3, [pc, #336]	@ (8002b24 <HAL_SPI_MspInit+0x1b8>)
 80029d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d4:	2202      	movs	r2, #2
 80029d6:	4013      	ands	r3, r2
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029dc:	193b      	adds	r3, r7, r4
 80029de:	2201      	movs	r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	2202      	movs	r2, #2
 80029e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80029f4:	193b      	adds	r3, r7, r4
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fa:	193a      	adds	r2, r7, r4
 80029fc:	23a0      	movs	r3, #160	@ 0xa0
 80029fe:	05db      	lsls	r3, r3, #23
 8002a00:	0011      	movs	r1, r2
 8002a02:	0018      	movs	r0, r3
 8002a04:	f001 ff76 	bl	80048f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	2240      	movs	r2, #64	@ 0x40
 8002a0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	2202      	movs	r2, #2
 8002a12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8002a20:	193b      	adds	r3, r7, r4
 8002a22:	2204      	movs	r2, #4
 8002a24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	4a3f      	ldr	r2, [pc, #252]	@ (8002b28 <HAL_SPI_MspInit+0x1bc>)
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	0010      	movs	r0, r2
 8002a2e:	f001 ff61 	bl	80048f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a32:	0021      	movs	r1, r4
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	2280      	movs	r2, #128	@ 0x80
 8002a38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	187b      	adds	r3, r7, r1
 8002a48:	2200      	movs	r2, #0
 8002a4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2201      	movs	r2, #1
 8002a50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	4a34      	ldr	r2, [pc, #208]	@ (8002b28 <HAL_SPI_MspInit+0x1bc>)
 8002a56:	0019      	movs	r1, r3
 8002a58:	0010      	movs	r0, r2
 8002a5a:	f001 ff4b 	bl	80048f4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8002a5e:	4b33      	ldr	r3, [pc, #204]	@ (8002b2c <HAL_SPI_MspInit+0x1c0>)
 8002a60:	4a33      	ldr	r2, [pc, #204]	@ (8002b30 <HAL_SPI_MspInit+0x1c4>)
 8002a62:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002a64:	4b31      	ldr	r3, [pc, #196]	@ (8002b2c <HAL_SPI_MspInit+0x1c0>)
 8002a66:	2212      	movs	r2, #18
 8002a68:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a6a:	4b30      	ldr	r3, [pc, #192]	@ (8002b2c <HAL_SPI_MspInit+0x1c0>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a70:	4b2e      	ldr	r3, [pc, #184]	@ (8002b2c <HAL_SPI_MspInit+0x1c0>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a76:	4b2d      	ldr	r3, [pc, #180]	@ (8002b2c <HAL_SPI_MspInit+0x1c0>)
 8002a78:	2280      	movs	r2, #128	@ 0x80
 8002a7a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b2c <HAL_SPI_MspInit+0x1c0>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a82:	4b2a      	ldr	r3, [pc, #168]	@ (8002b2c <HAL_SPI_MspInit+0x1c0>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002a88:	4b28      	ldr	r3, [pc, #160]	@ (8002b2c <HAL_SPI_MspInit+0x1c0>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a8e:	4b27      	ldr	r3, [pc, #156]	@ (8002b2c <HAL_SPI_MspInit+0x1c0>)
 8002a90:	2280      	movs	r2, #128	@ 0x80
 8002a92:	0152      	lsls	r2, r2, #5
 8002a94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002a96:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <HAL_SPI_MspInit+0x1c0>)
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f001 fc6f 	bl	800437c <HAL_DMA_Init>
 8002a9e:	1e03      	subs	r3, r0, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_SPI_MspInit+0x13a>
    {
      Error_Handler();
 8002aa2:	f7ff ff1f 	bl	80028e4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a20      	ldr	r2, [pc, #128]	@ (8002b2c <HAL_SPI_MspInit+0x1c0>)
 8002aaa:	659a      	str	r2, [r3, #88]	@ 0x58
 8002aac:	4b1f      	ldr	r3, [pc, #124]	@ (8002b2c <HAL_SPI_MspInit+0x1c0>)
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8002ab2:	4b20      	ldr	r3, [pc, #128]	@ (8002b34 <HAL_SPI_MspInit+0x1c8>)
 8002ab4:	4a20      	ldr	r2, [pc, #128]	@ (8002b38 <HAL_SPI_MspInit+0x1cc>)
 8002ab6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <HAL_SPI_MspInit+0x1c8>)
 8002aba:	2213      	movs	r2, #19
 8002abc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002abe:	4b1d      	ldr	r3, [pc, #116]	@ (8002b34 <HAL_SPI_MspInit+0x1c8>)
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <HAL_SPI_MspInit+0x1c8>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aca:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <HAL_SPI_MspInit+0x1c8>)
 8002acc:	2280      	movs	r2, #128	@ 0x80
 8002ace:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ad0:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <HAL_SPI_MspInit+0x1c8>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ad6:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <HAL_SPI_MspInit+0x1c8>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002adc:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <HAL_SPI_MspInit+0x1c8>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ae2:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <HAL_SPI_MspInit+0x1c8>)
 8002ae4:	2280      	movs	r2, #128	@ 0x80
 8002ae6:	0152      	lsls	r2, r2, #5
 8002ae8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002aea:	4b12      	ldr	r3, [pc, #72]	@ (8002b34 <HAL_SPI_MspInit+0x1c8>)
 8002aec:	0018      	movs	r0, r3
 8002aee:	f001 fc45 	bl	800437c <HAL_DMA_Init>
 8002af2:	1e03      	subs	r3, r0, #0
 8002af4:	d001      	beq.n	8002afa <HAL_SPI_MspInit+0x18e>
    {
      Error_Handler();
 8002af6:	f7ff fef5 	bl	80028e4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b34 <HAL_SPI_MspInit+0x1c8>)
 8002afe:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b00:	4b0c      	ldr	r3, [pc, #48]	@ (8002b34 <HAL_SPI_MspInit+0x1c8>)
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002b06:	2200      	movs	r2, #0
 8002b08:	2100      	movs	r1, #0
 8002b0a:	201a      	movs	r0, #26
 8002b0c:	f001 fc04 	bl	8004318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002b10:	201a      	movs	r0, #26
 8002b12:	f001 fc16 	bl	8004342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b00b      	add	sp, #44	@ 0x2c
 8002b1c:	bd90      	pop	{r4, r7, pc}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	40003800 	.word	0x40003800
 8002b24:	40021000 	.word	0x40021000
 8002b28:	50000400 	.word	0x50000400
 8002b2c:	20000194 	.word	0x20000194
 8002b30:	4002001c 	.word	0x4002001c
 8002b34:	200001f0 	.word	0x200001f0
 8002b38:	40020030 	.word	0x40020030

08002b3c <HAL_SPI_TxRxCpltCallback>:
  /* USER CODE END SPI2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

	if (hspi->Instance == SPI2) {
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0c      	ldr	r2, [pc, #48]	@ (8002b7c <HAL_SPI_TxRxCpltCallback+0x40>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d103      	bne.n	8002b56 <HAL_SPI_TxRxCpltCallback+0x1a>
    MA330_get_degree(&ma330data);
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <HAL_SPI_TxRxCpltCallback+0x44>)
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7ff fafd 	bl	8002150 <MA330_get_degree>
    //foc_calc_electric_angle(&hfoc, DEG_TO_RAD(angle_deg));
	}

	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);
 8002b56:	23a0      	movs	r3, #160	@ 0xa0
 8002b58:	05db      	lsls	r3, r3, #23
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2104      	movs	r1, #4
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f002 f82c 	bl	8004bbc <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,0);
 8002b64:	23a0      	movs	r3, #160	@ 0xa0
 8002b66:	05db      	lsls	r3, r3, #23
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2108      	movs	r1, #8
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f002 f825 	bl	8004bbc <HAL_GPIO_WritePin>



}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b002      	add	sp, #8
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	40003800 	.word	0x40003800
 8002b80:	200000f4 	.word	0x200000f4

08002b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <HAL_MspInit+0x44>)
 8002b8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc8 <HAL_MspInit+0x44>)
 8002b90:	2101      	movs	r1, #1
 8002b92:	430a      	orrs	r2, r1
 8002b94:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b96:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <HAL_MspInit+0x44>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba2:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <HAL_MspInit+0x44>)
 8002ba4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ba6:	4b08      	ldr	r3, [pc, #32]	@ (8002bc8 <HAL_MspInit+0x44>)
 8002ba8:	2180      	movs	r1, #128	@ 0x80
 8002baa:	0549      	lsls	r1, r1, #21
 8002bac:	430a      	orrs	r2, r1
 8002bae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bb0:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <HAL_MspInit+0x44>)
 8002bb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	055b      	lsls	r3, r3, #21
 8002bb8:	4013      	ands	r3, r2
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	b002      	add	sp, #8
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	40021000 	.word	0x40021000

08002bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bd0:	46c0      	nop			@ (mov r8, r8)
 8002bd2:	e7fd      	b.n	8002bd0 <NMI_Handler+0x4>

08002bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd8:	46c0      	nop			@ (mov r8, r8)
 8002bda:	e7fd      	b.n	8002bd8 <HardFault_Handler+0x4>

08002bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002be0:	46c0      	nop			@ (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf4:	f000 fade 	bl	80031b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bf8:	46c0      	nop			@ (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002c02:	2380      	movs	r3, #128	@ 0x80
 8002c04:	015b      	lsls	r3, r3, #5
 8002c06:	0018      	movs	r0, r3
 8002c08:	f002 f810 	bl	8004c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002c0c:	46c0      	nop			@ (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c18:	4b03      	ldr	r3, [pc, #12]	@ (8002c28 <DMA1_Channel1_IRQHandler+0x14>)
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f001 fd28 	bl	8004670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c20:	46c0      	nop			@ (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	2000008c 	.word	0x2000008c

08002c2c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002c30:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002c32:	0018      	movs	r0, r3
 8002c34:	f001 fd1c 	bl	8004670 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002c38:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <DMA1_Channel2_3_IRQHandler+0x20>)
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f001 fd18 	bl	8004670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002c40:	46c0      	nop			@ (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	20000194 	.word	0x20000194
 8002c4c:	200001f0 	.word	0x200001f0

08002c50 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c54:	4b03      	ldr	r3, [pc, #12]	@ (8002c64 <ADC1_IRQHandler+0x14>)
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 fe76 	bl	8003948 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002c5c:	46c0      	nop			@ (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	20000028 	.word	0x20000028

08002c68 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c6c:	4b03      	ldr	r3, [pc, #12]	@ (8002c7c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f004 f94c 	bl	8006f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	2000024c 	.word	0x2000024c

08002c80 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c84:	4b03      	ldr	r3, [pc, #12]	@ (8002c94 <TIM1_CC_IRQHandler+0x14>)
 8002c86:	0018      	movs	r0, r3
 8002c88:	f004 f940 	bl	8006f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002c8c:	46c0      	nop			@ (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			@ (mov r8, r8)
 8002c94:	2000024c 	.word	0x2000024c

08002c98 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002c9c:	4b03      	ldr	r3, [pc, #12]	@ (8002cac <SPI2_IRQHandler+0x14>)
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f003 fa90 	bl	80061c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002ca4:	46c0      	nop			@ (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	20000130 	.word	0x20000130

08002cb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cb4:	46c0      	nop			@ (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b09c      	sub	sp, #112	@ 0x70
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cc2:	2360      	movs	r3, #96	@ 0x60
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	2310      	movs	r3, #16
 8002cca:	001a      	movs	r2, r3
 8002ccc:	2100      	movs	r1, #0
 8002cce:	f005 f9d8 	bl	8008082 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd2:	2354      	movs	r3, #84	@ 0x54
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	230c      	movs	r3, #12
 8002cda:	001a      	movs	r2, r3
 8002cdc:	2100      	movs	r1, #0
 8002cde:	f005 f9d0 	bl	8008082 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ce2:	2338      	movs	r3, #56	@ 0x38
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	231c      	movs	r3, #28
 8002cea:	001a      	movs	r2, r3
 8002cec:	2100      	movs	r1, #0
 8002cee:	f005 f9c8 	bl	8008082 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	2334      	movs	r3, #52	@ 0x34
 8002cf8:	001a      	movs	r2, r3
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	f005 f9c1 	bl	8008082 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d00:	4b64      	ldr	r3, [pc, #400]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002d02:	4a65      	ldr	r2, [pc, #404]	@ (8002e98 <MX_TIM1_Init+0x1dc>)
 8002d04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d06:	4b63      	ldr	r3, [pc, #396]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002d0c:	4b61      	ldr	r3, [pc, #388]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002d0e:	2220      	movs	r2, #32
 8002d10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1600-1;
 8002d12:	4b60      	ldr	r3, [pc, #384]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002d14:	4a61      	ldr	r2, [pc, #388]	@ (8002e9c <MX_TIM1_Init+0x1e0>)
 8002d16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d18:	4b5e      	ldr	r3, [pc, #376]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d24:	4b5b      	ldr	r3, [pc, #364]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f003 fe33 	bl	8006998 <HAL_TIM_Base_Init>
 8002d32:	1e03      	subs	r3, r0, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002d36:	f7ff fdd5 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d3a:	2160      	movs	r1, #96	@ 0x60
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	2280      	movs	r2, #128	@ 0x80
 8002d40:	0152      	lsls	r2, r2, #5
 8002d42:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d44:	187a      	adds	r2, r7, r1
 8002d46:	4b53      	ldr	r3, [pc, #332]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002d48:	0011      	movs	r1, r2
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f004 fae6 	bl	800731c <HAL_TIM_ConfigClockSource>
 8002d50:	1e03      	subs	r3, r0, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002d54:	f7ff fdc6 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d58:	4b4e      	ldr	r3, [pc, #312]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f003 fe74 	bl	8006a48 <HAL_TIM_PWM_Init>
 8002d60:	1e03      	subs	r3, r0, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002d64:	f7ff fdbe 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d68:	2154      	movs	r1, #84	@ 0x54
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC4REF;
 8002d70:	187b      	adds	r3, r7, r1
 8002d72:	22e0      	movs	r2, #224	@ 0xe0
 8002d74:	03d2      	lsls	r2, r2, #15
 8002d76:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d7e:	187a      	adds	r2, r7, r1
 8002d80:	4b44      	ldr	r3, [pc, #272]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002d82:	0011      	movs	r1, r2
 8002d84:	0018      	movs	r0, r3
 8002d86:	f005 f83d 	bl	8007e04 <HAL_TIMEx_MasterConfigSynchronization>
 8002d8a:	1e03      	subs	r3, r0, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002d8e:	f7ff fda9 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d92:	2138      	movs	r1, #56	@ 0x38
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2260      	movs	r2, #96	@ 0x60
 8002d98:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 800;
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	22c8      	movs	r2, #200	@ 0xc8
 8002d9e:	0092      	lsls	r2, r2, #2
 8002da0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002da2:	187b      	adds	r3, r7, r1
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	2200      	movs	r2, #0
 8002dac:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002dae:	187b      	adds	r3, r7, r1
 8002db0:	2204      	movs	r2, #4
 8002db2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	2200      	movs	r2, #0
 8002db8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002dba:	187b      	adds	r3, r7, r1
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc0:	1879      	adds	r1, r7, r1
 8002dc2:	4b34      	ldr	r3, [pc, #208]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f004 f9a8 	bl	800711c <HAL_TIM_PWM_ConfigChannel>
 8002dcc:	1e03      	subs	r3, r0, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002dd0:	f7ff fd88 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dd4:	2338      	movs	r3, #56	@ 0x38
 8002dd6:	18f9      	adds	r1, r7, r3
 8002dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002dda:	2204      	movs	r2, #4
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f004 f99d 	bl	800711c <HAL_TIM_PWM_ConfigChannel>
 8002de2:	1e03      	subs	r3, r0, #0
 8002de4:	d001      	beq.n	8002dea <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002de6:	f7ff fd7d 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dea:	2338      	movs	r3, #56	@ 0x38
 8002dec:	18f9      	adds	r1, r7, r3
 8002dee:	4b29      	ldr	r3, [pc, #164]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002df0:	2208      	movs	r2, #8
 8002df2:	0018      	movs	r0, r3
 8002df4:	f004 f992 	bl	800711c <HAL_TIM_PWM_ConfigChannel>
 8002df8:	1e03      	subs	r3, r0, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8002dfc:	f7ff fd72 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.Pulse = 10;
 8002e00:	2138      	movs	r1, #56	@ 0x38
 8002e02:	187b      	adds	r3, r7, r1
 8002e04:	220a      	movs	r2, #10
 8002e06:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e08:	1879      	adds	r1, r7, r1
 8002e0a:	4b22      	ldr	r3, [pc, #136]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002e0c:	220c      	movs	r2, #12
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f004 f984 	bl	800711c <HAL_TIM_PWM_ConfigChannel>
 8002e14:	1e03      	subs	r3, r0, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8002e18:	f7ff fd64 	bl	80028e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e1c:	1d3b      	adds	r3, r7, #4
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	2200      	movs	r2, #0
 8002e26:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e28:	1d3b      	adds	r3, r7, #4
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 26;
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	221a      	movs	r2, #26
 8002e32:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002e34:	1d3b      	adds	r3, r7, #4
 8002e36:	2280      	movs	r2, #128	@ 0x80
 8002e38:	0152      	lsls	r2, r2, #5
 8002e3a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e3c:	1d3b      	adds	r3, r7, #4
 8002e3e:	2280      	movs	r2, #128	@ 0x80
 8002e40:	0192      	lsls	r2, r2, #6
 8002e42:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 3;
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	2203      	movs	r2, #3
 8002e48:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002e4a:	1d3b      	adds	r3, r7, #4
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	2200      	movs	r2, #0
 8002e54:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	2280      	movs	r2, #128	@ 0x80
 8002e5a:	0492      	lsls	r2, r2, #18
 8002e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	2200      	movs	r2, #0
 8002e62:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	2200      	movs	r2, #0
 8002e68:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e70:	1d3a      	adds	r2, r7, #4
 8002e72:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002e74:	0011      	movs	r1, r2
 8002e76:	0018      	movs	r0, r3
 8002e78:	f005 f82c 	bl	8007ed4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e7c:	1e03      	subs	r3, r0, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM1_Init+0x1c8>
  {
    Error_Handler();
 8002e80:	f7ff fd30 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e84:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <MX_TIM1_Init+0x1d8>)
 8002e86:	0018      	movs	r0, r3
 8002e88:	f000 f87e 	bl	8002f88 <HAL_TIM_MspPostInit>

}
 8002e8c:	46c0      	nop			@ (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b01c      	add	sp, #112	@ 0x70
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	2000024c 	.word	0x2000024c
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	0000063f 	.word	0x0000063f

08002ea0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b095      	sub	sp, #84	@ 0x54
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	233c      	movs	r3, #60	@ 0x3c
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	0018      	movs	r0, r3
 8002eae:	2314      	movs	r3, #20
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	f005 f8e5 	bl	8008082 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eb8:	2414      	movs	r4, #20
 8002eba:	193b      	adds	r3, r7, r4
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	2328      	movs	r3, #40	@ 0x28
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	f005 f8dd 	bl	8008082 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a2b      	ldr	r2, [pc, #172]	@ (8002f7c <HAL_TIM_Base_MspInit+0xdc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d150      	bne.n	8002f74 <HAL_TIM_Base_MspInit+0xd4>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002ed2:	193b      	adds	r3, r7, r4
 8002ed4:	2280      	movs	r2, #128	@ 0x80
 8002ed6:	0392      	lsls	r2, r2, #14
 8002ed8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	2280      	movs	r2, #128	@ 0x80
 8002ede:	03d2      	lsls	r2, r2, #15
 8002ee0:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ee2:	193b      	adds	r3, r7, r4
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f002 fbaf 	bl	8005648 <HAL_RCCEx_PeriphCLKConfig>
 8002eea:	1e03      	subs	r3, r0, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_TIM_Base_MspInit+0x52>
    {
      Error_Handler();
 8002eee:	f7ff fcf9 	bl	80028e4 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ef2:	4b23      	ldr	r3, [pc, #140]	@ (8002f80 <HAL_TIM_Base_MspInit+0xe0>)
 8002ef4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ef6:	4b22      	ldr	r3, [pc, #136]	@ (8002f80 <HAL_TIM_Base_MspInit+0xe0>)
 8002ef8:	2180      	movs	r1, #128	@ 0x80
 8002efa:	0109      	lsls	r1, r1, #4
 8002efc:	430a      	orrs	r2, r1
 8002efe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f00:	4b1f      	ldr	r3, [pc, #124]	@ (8002f80 <HAL_TIM_Base_MspInit+0xe0>)
 8002f02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f04:	2380      	movs	r3, #128	@ 0x80
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f80 <HAL_TIM_Base_MspInit+0xe0>)
 8002f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f12:	4b1b      	ldr	r3, [pc, #108]	@ (8002f80 <HAL_TIM_Base_MspInit+0xe0>)
 8002f14:	2102      	movs	r1, #2
 8002f16:	430a      	orrs	r2, r1
 8002f18:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f1a:	4b19      	ldr	r3, [pc, #100]	@ (8002f80 <HAL_TIM_Base_MspInit+0xe0>)
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f1e:	2202      	movs	r2, #2
 8002f20:	4013      	ands	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f26:	213c      	movs	r1, #60	@ 0x3c
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	2280      	movs	r2, #128	@ 0x80
 8002f2c:	0152      	lsls	r2, r2, #5
 8002f2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	2212      	movs	r2, #18
 8002f34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f36:	187b      	adds	r3, r7, r1
 8002f38:	2201      	movs	r2, #1
 8002f3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	2200      	movs	r2, #0
 8002f40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002f42:	187b      	adds	r3, r7, r1
 8002f44:	2202      	movs	r2, #2
 8002f46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f48:	187b      	adds	r3, r7, r1
 8002f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f84 <HAL_TIM_Base_MspInit+0xe4>)
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	0010      	movs	r0, r2
 8002f50:	f001 fcd0 	bl	80048f4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002f54:	2200      	movs	r2, #0
 8002f56:	2100      	movs	r1, #0
 8002f58:	200d      	movs	r0, #13
 8002f5a:	f001 f9dd 	bl	8004318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002f5e:	200d      	movs	r0, #13
 8002f60:	f001 f9ef 	bl	8004342 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002f64:	2200      	movs	r2, #0
 8002f66:	2100      	movs	r1, #0
 8002f68:	200e      	movs	r0, #14
 8002f6a:	f001 f9d5 	bl	8004318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002f6e:	200e      	movs	r0, #14
 8002f70:	f001 f9e7 	bl	8004342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002f74:	46c0      	nop			@ (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b015      	add	sp, #84	@ 0x54
 8002f7a:	bd90      	pop	{r4, r7, pc}
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40021000 	.word	0x40021000
 8002f84:	50000400 	.word	0x50000400

08002f88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b08b      	sub	sp, #44	@ 0x2c
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	2414      	movs	r4, #20
 8002f92:	193b      	adds	r3, r7, r4
 8002f94:	0018      	movs	r0, r3
 8002f96:	2314      	movs	r3, #20
 8002f98:	001a      	movs	r2, r3
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	f005 f871 	bl	8008082 <memset>
  if(timHandle->Instance==TIM1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a26      	ldr	r2, [pc, #152]	@ (8003040 <HAL_TIM_MspPostInit+0xb8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d145      	bne.n	8003036 <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002faa:	4b26      	ldr	r3, [pc, #152]	@ (8003044 <HAL_TIM_MspPostInit+0xbc>)
 8002fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fae:	4b25      	ldr	r3, [pc, #148]	@ (8003044 <HAL_TIM_MspPostInit+0xbc>)
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fb6:	4b23      	ldr	r3, [pc, #140]	@ (8003044 <HAL_TIM_MspPostInit+0xbc>)
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fba:	2202      	movs	r2, #2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc2:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <HAL_TIM_MspPostInit+0xbc>)
 8002fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8003044 <HAL_TIM_MspPostInit+0xbc>)
 8002fc8:	2101      	movs	r1, #1
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fce:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <HAL_TIM_MspPostInit+0xbc>)
 8002fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002fda:	193b      	adds	r3, r7, r4
 8002fdc:	22e0      	movs	r2, #224	@ 0xe0
 8002fde:	0212      	lsls	r2, r2, #8
 8002fe0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe2:	193b      	adds	r3, r7, r4
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002ff4:	193b      	adds	r3, r7, r4
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffa:	193b      	adds	r3, r7, r4
 8002ffc:	4a12      	ldr	r2, [pc, #72]	@ (8003048 <HAL_TIM_MspPostInit+0xc0>)
 8002ffe:	0019      	movs	r1, r3
 8003000:	0010      	movs	r0, r2
 8003002:	f001 fc77 	bl	80048f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003006:	0021      	movs	r1, r4
 8003008:	187b      	adds	r3, r7, r1
 800300a:	22e0      	movs	r2, #224	@ 0xe0
 800300c:	00d2      	lsls	r2, r2, #3
 800300e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	187b      	adds	r3, r7, r1
 8003012:	2202      	movs	r2, #2
 8003014:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	187b      	adds	r3, r7, r1
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301c:	187b      	adds	r3, r7, r1
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003022:	187b      	adds	r3, r7, r1
 8003024:	2202      	movs	r2, #2
 8003026:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003028:	187a      	adds	r2, r7, r1
 800302a:	23a0      	movs	r3, #160	@ 0xa0
 800302c:	05db      	lsls	r3, r3, #23
 800302e:	0011      	movs	r1, r2
 8003030:	0018      	movs	r0, r3
 8003032:	f001 fc5f 	bl	80048f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b00b      	add	sp, #44	@ 0x2c
 800303c:	bd90      	pop	{r4, r7, pc}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	40012c00 	.word	0x40012c00
 8003044:	40021000 	.word	0x40021000
 8003048:	50000400 	.word	0x50000400

0800304c <HAL_TIM_OC_DelayElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) // Vérifie que c'est le CH4
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	7f1b      	ldrb	r3, [r3, #28]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d111      	bne.n	8003080 <HAL_TIM_OC_DelayElapsedCallback+0x34>
        {
            // Ton code ici : impulsion GPIO par ex.
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800305c:	23a0      	movs	r3, #160	@ 0xa0
 800305e:	05db      	lsls	r3, r3, #23
 8003060:	2201      	movs	r2, #1
 8003062:	2104      	movs	r1, #4
 8003064:	0018      	movs	r0, r3
 8003066:	f001 fda9 	bl	8004bbc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800306a:	23a0      	movs	r3, #160	@ 0xa0
 800306c:	05db      	lsls	r3, r3, #23
 800306e:	2201      	movs	r2, #1
 8003070:	2108      	movs	r1, #8
 8003072:	0018      	movs	r0, r3
 8003074:	f001 fda2 	bl	8004bbc <HAL_GPIO_WritePin>

            MA330_start(&ma330data);
 8003078:	4b03      	ldr	r3, [pc, #12]	@ (8003088 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 800307a:	0018      	movs	r0, r3
 800307c:	f7ff f846 	bl	800210c <MA330_start>
        }
}
 8003080:	46c0      	nop			@ (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}
 8003088:	200000f4 	.word	0x200000f4

0800308c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800308c:	480d      	ldr	r0, [pc, #52]	@ (80030c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800308e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003090:	f7ff fe0e 	bl	8002cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003094:	480c      	ldr	r0, [pc, #48]	@ (80030c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003096:	490d      	ldr	r1, [pc, #52]	@ (80030cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003098:	4a0d      	ldr	r2, [pc, #52]	@ (80030d0 <LoopForever+0xe>)
  movs r3, #0
 800309a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800309c:	e002      	b.n	80030a4 <LoopCopyDataInit>

0800309e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800309e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030a2:	3304      	adds	r3, #4

080030a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030a8:	d3f9      	bcc.n	800309e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030aa:	4a0a      	ldr	r2, [pc, #40]	@ (80030d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030ac:	4c0a      	ldr	r4, [pc, #40]	@ (80030d8 <LoopForever+0x16>)
  movs r3, #0
 80030ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030b0:	e001      	b.n	80030b6 <LoopFillZerobss>

080030b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030b4:	3204      	adds	r2, #4

080030b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030b8:	d3fb      	bcc.n	80030b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80030ba:	f004 ffeb 	bl	8008094 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80030be:	f7ff fb61 	bl	8002784 <main>

080030c2 <LoopForever>:

LoopForever:
  b LoopForever
 80030c2:	e7fe      	b.n	80030c2 <LoopForever>
  ldr   r0, =_estack
 80030c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80030c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80030d0:	08008214 	.word	0x08008214
  ldr r2, =_sbss
 80030d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80030d8:	2000029c 	.word	0x2000029c

080030dc <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030dc:	e7fe      	b.n	80030dc <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

080030e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030e6:	1dfb      	adds	r3, r7, #7
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030ec:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <HAL_Init+0x3c>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <HAL_Init+0x3c>)
 80030f2:	2180      	movs	r1, #128	@ 0x80
 80030f4:	0049      	lsls	r1, r1, #1
 80030f6:	430a      	orrs	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030fa:	2003      	movs	r0, #3
 80030fc:	f000 f810 	bl	8003120 <HAL_InitTick>
 8003100:	1e03      	subs	r3, r0, #0
 8003102:	d003      	beq.n	800310c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003104:	1dfb      	adds	r3, r7, #7
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	e001      	b.n	8003110 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800310c:	f7ff fd3a 	bl	8002b84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	781b      	ldrb	r3, [r3, #0]
}
 8003114:	0018      	movs	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	b002      	add	sp, #8
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40022000 	.word	0x40022000

08003120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003128:	230f      	movs	r3, #15
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003130:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <HAL_InitTick+0x88>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d02b      	beq.n	8003190 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003138:	4b1c      	ldr	r3, [pc, #112]	@ (80031ac <HAL_InitTick+0x8c>)
 800313a:	681c      	ldr	r4, [r3, #0]
 800313c:	4b1a      	ldr	r3, [pc, #104]	@ (80031a8 <HAL_InitTick+0x88>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	0019      	movs	r1, r3
 8003142:	23fa      	movs	r3, #250	@ 0xfa
 8003144:	0098      	lsls	r0, r3, #2
 8003146:	f7fc ffdd 	bl	8000104 <__udivsi3>
 800314a:	0003      	movs	r3, r0
 800314c:	0019      	movs	r1, r3
 800314e:	0020      	movs	r0, r4
 8003150:	f7fc ffd8 	bl	8000104 <__udivsi3>
 8003154:	0003      	movs	r3, r0
 8003156:	0018      	movs	r0, r3
 8003158:	f001 f903 	bl	8004362 <HAL_SYSTICK_Config>
 800315c:	1e03      	subs	r3, r0, #0
 800315e:	d112      	bne.n	8003186 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d80a      	bhi.n	800317c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	2301      	movs	r3, #1
 800316a:	425b      	negs	r3, r3
 800316c:	2200      	movs	r2, #0
 800316e:	0018      	movs	r0, r3
 8003170:	f001 f8d2 	bl	8004318 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003174:	4b0e      	ldr	r3, [pc, #56]	@ (80031b0 <HAL_InitTick+0x90>)
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e00d      	b.n	8003198 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800317c:	230f      	movs	r3, #15
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e008      	b.n	8003198 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003186:	230f      	movs	r3, #15
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	2201      	movs	r2, #1
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	e003      	b.n	8003198 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003190:	230f      	movs	r3, #15
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003198:	230f      	movs	r3, #15
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	781b      	ldrb	r3, [r3, #0]
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b005      	add	sp, #20
 80031a4:	bd90      	pop	{r4, r7, pc}
 80031a6:	46c0      	nop			@ (mov r8, r8)
 80031a8:	20000008 	.word	0x20000008
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <HAL_IncTick+0x1c>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	001a      	movs	r2, r3
 80031be:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <HAL_IncTick+0x20>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	18d2      	adds	r2, r2, r3
 80031c4:	4b03      	ldr	r3, [pc, #12]	@ (80031d4 <HAL_IncTick+0x20>)
 80031c6:	601a      	str	r2, [r3, #0]
}
 80031c8:	46c0      	nop			@ (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	20000008 	.word	0x20000008
 80031d4:	20000298 	.word	0x20000298

080031d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  return uwTick;
 80031dc:	4b02      	ldr	r3, [pc, #8]	@ (80031e8 <HAL_GetTick+0x10>)
 80031de:	681b      	ldr	r3, [r3, #0]
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			@ (mov r8, r8)
 80031e8:	20000298 	.word	0x20000298

080031ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031f4:	f7ff fff0 	bl	80031d8 <HAL_GetTick>
 80031f8:	0003      	movs	r3, r0
 80031fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3301      	adds	r3, #1
 8003204:	d005      	beq.n	8003212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003206:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <HAL_Delay+0x44>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	001a      	movs	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	189b      	adds	r3, r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003212:	46c0      	nop			@ (mov r8, r8)
 8003214:	f7ff ffe0 	bl	80031d8 <HAL_GetTick>
 8003218:	0002      	movs	r2, r0
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	429a      	cmp	r2, r3
 8003222:	d8f7      	bhi.n	8003214 <HAL_Delay+0x28>
  {
  }
}
 8003224:	46c0      	nop			@ (mov r8, r8)
 8003226:	46c0      	nop			@ (mov r8, r8)
 8003228:	46bd      	mov	sp, r7
 800322a:	b004      	add	sp, #16
 800322c:	bd80      	pop	{r7, pc}
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	20000008 	.word	0x20000008

08003234 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a05      	ldr	r2, [pc, #20]	@ (8003258 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003244:	401a      	ands	r2, r3
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b002      	add	sp, #8
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	fe3fffff 	.word	0xfe3fffff

0800325c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	23e0      	movs	r3, #224	@ 0xe0
 800326a:	045b      	lsls	r3, r3, #17
 800326c:	4013      	ands	r3, r2
}
 800326e:	0018      	movs	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	b002      	add	sp, #8
 8003274:	bd80      	pop	{r7, pc}

08003276 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	2104      	movs	r1, #4
 800328a:	400a      	ands	r2, r1
 800328c:	2107      	movs	r1, #7
 800328e:	4091      	lsls	r1, r2
 8003290:	000a      	movs	r2, r1
 8003292:	43d2      	mvns	r2, r2
 8003294:	401a      	ands	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2104      	movs	r1, #4
 800329a:	400b      	ands	r3, r1
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4099      	lsls	r1, r3
 80032a0:	000b      	movs	r3, r1
 80032a2:	431a      	orrs	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80032a8:	46c0      	nop			@ (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b004      	add	sp, #16
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	2104      	movs	r1, #4
 80032c2:	400a      	ands	r2, r1
 80032c4:	2107      	movs	r1, #7
 80032c6:	4091      	lsls	r1, r2
 80032c8:	000a      	movs	r2, r1
 80032ca:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2104      	movs	r1, #4
 80032d0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80032d2:	40da      	lsrs	r2, r3
 80032d4:	0013      	movs	r3, r2
}
 80032d6:	0018      	movs	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	b002      	add	sp, #8
 80032dc:	bd80      	pop	{r7, pc}

080032de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	23c0      	movs	r3, #192	@ 0xc0
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	4013      	ands	r3, r2
 80032f0:	d101      	bne.n	80032f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	0018      	movs	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b002      	add	sp, #8
 80032fe:	bd80      	pop	{r7, pc}

08003300 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	211f      	movs	r1, #31
 8003314:	400a      	ands	r2, r1
 8003316:	210f      	movs	r1, #15
 8003318:	4091      	lsls	r1, r2
 800331a:	000a      	movs	r2, r1
 800331c:	43d2      	mvns	r2, r2
 800331e:	401a      	ands	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	0e9b      	lsrs	r3, r3, #26
 8003324:	210f      	movs	r1, #15
 8003326:	4019      	ands	r1, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	201f      	movs	r0, #31
 800332c:	4003      	ands	r3, r0
 800332e:	4099      	lsls	r1, r3
 8003330:	000b      	movs	r3, r1
 8003332:	431a      	orrs	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003338:	46c0      	nop			@ (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b004      	add	sp, #16
 800333e:	bd80      	pop	{r7, pc}

08003340 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	035b      	lsls	r3, r3, #13
 8003352:	0b5b      	lsrs	r3, r3, #13
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800335a:	46c0      	nop			@ (mov r8, r8)
 800335c:	46bd      	mov	sp, r7
 800335e:	b002      	add	sp, #8
 8003360:	bd80      	pop	{r7, pc}

08003362 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	0352      	lsls	r2, r2, #13
 8003374:	0b52      	lsrs	r2, r2, #13
 8003376:	43d2      	mvns	r2, r2
 8003378:	401a      	ands	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	46bd      	mov	sp, r7
 8003382:	b002      	add	sp, #8
 8003384:	bd80      	pop	{r7, pc}

08003386 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2203      	movs	r2, #3
 8003394:	4013      	ands	r3, r2
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b002      	add	sp, #8
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	0212      	lsls	r2, r2, #8
 80033b4:	43d2      	mvns	r2, r2
 80033b6:	401a      	ands	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	400b      	ands	r3, r1
 80033c0:	4904      	ldr	r1, [pc, #16]	@ (80033d4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80033c2:	400b      	ands	r3, r1
 80033c4:	431a      	orrs	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	07ffff00 	.word	0x07ffff00

080033d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4a05      	ldr	r2, [pc, #20]	@ (80033fc <LL_ADC_EnableInternalRegulator+0x24>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	2280      	movs	r2, #128	@ 0x80
 80033ea:	0552      	lsls	r2, r2, #21
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b002      	add	sp, #8
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	46c0      	nop			@ (mov r8, r8)
 80033fc:	6fffffe8 	.word	0x6fffffe8

08003400 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	2380      	movs	r3, #128	@ 0x80
 800340e:	055b      	lsls	r3, r3, #21
 8003410:	401a      	ands	r2, r3
 8003412:	2380      	movs	r3, #128	@ 0x80
 8003414:	055b      	lsls	r3, r3, #21
 8003416:	429a      	cmp	r2, r3
 8003418:	d101      	bne.n	800341e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800341e:	2300      	movs	r3, #0
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b002      	add	sp, #8
 8003426:	bd80      	pop	{r7, pc}

08003428 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <LL_ADC_Enable+0x20>)
 8003436:	4013      	ands	r3, r2
 8003438:	2201      	movs	r2, #1
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003440:	46c0      	nop			@ (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b002      	add	sp, #8
 8003446:	bd80      	pop	{r7, pc}
 8003448:	7fffffe8 	.word	0x7fffffe8

0800344c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4a04      	ldr	r2, [pc, #16]	@ (800346c <LL_ADC_Disable+0x20>)
 800345a:	4013      	ands	r3, r2
 800345c:	2202      	movs	r2, #2
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003464:	46c0      	nop			@ (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}
 800346c:	7fffffe8 	.word	0x7fffffe8

08003470 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2201      	movs	r2, #1
 800347e:	4013      	ands	r3, r2
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <LL_ADC_IsEnabled+0x18>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <LL_ADC_IsEnabled+0x1a>
 8003488:	2300      	movs	r3, #0
}
 800348a:	0018      	movs	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	b002      	add	sp, #8
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4a04      	ldr	r2, [pc, #16]	@ (80034b4 <LL_ADC_REG_StartConversion+0x20>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	2204      	movs	r2, #4
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034ac:	46c0      	nop			@ (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	7fffffe8 	.word	0x7fffffe8

080034b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2204      	movs	r2, #4
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d101      	bne.n	80034d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	0018      	movs	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b002      	add	sp, #8
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e4:	231f      	movs	r3, #31
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e17f      	b.n	8003802 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10a      	bne.n	8003520 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	0018      	movs	r0, r3
 800350e:	f7fe ffb5 	bl	800247c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2254      	movs	r2, #84	@ 0x54
 800351c:	2100      	movs	r1, #0
 800351e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	0018      	movs	r0, r3
 8003526:	f7ff ff6b 	bl	8003400 <LL_ADC_IsInternalRegulatorEnabled>
 800352a:	1e03      	subs	r3, r0, #0
 800352c:	d115      	bne.n	800355a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	0018      	movs	r0, r3
 8003534:	f7ff ff50 	bl	80033d8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003538:	4bb4      	ldr	r3, [pc, #720]	@ (800380c <HAL_ADC_Init+0x330>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	49b4      	ldr	r1, [pc, #720]	@ (8003810 <HAL_ADC_Init+0x334>)
 800353e:	0018      	movs	r0, r3
 8003540:	f7fc fde0 	bl	8000104 <__udivsi3>
 8003544:	0003      	movs	r3, r0
 8003546:	3301      	adds	r3, #1
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800354c:	e002      	b.n	8003554 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3b01      	subs	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f9      	bne.n	800354e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	0018      	movs	r0, r3
 8003560:	f7ff ff4e 	bl	8003400 <LL_ADC_IsInternalRegulatorEnabled>
 8003564:	1e03      	subs	r3, r0, #0
 8003566:	d10f      	bne.n	8003588 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356c:	2210      	movs	r2, #16
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003578:	2201      	movs	r2, #1
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003580:	231f      	movs	r3, #31
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	0018      	movs	r0, r3
 800358e:	f7ff ff93 	bl	80034b8 <LL_ADC_REG_IsConversionOngoing>
 8003592:	0003      	movs	r3, r0
 8003594:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359a:	2210      	movs	r2, #16
 800359c:	4013      	ands	r3, r2
 800359e:	d000      	beq.n	80035a2 <HAL_ADC_Init+0xc6>
 80035a0:	e122      	b.n	80037e8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d000      	beq.n	80035aa <HAL_ADC_Init+0xce>
 80035a8:	e11e      	b.n	80037e8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ae:	4a99      	ldr	r2, [pc, #612]	@ (8003814 <HAL_ADC_Init+0x338>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	2202      	movs	r2, #2
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	0018      	movs	r0, r3
 80035c0:	f7ff ff56 	bl	8003470 <LL_ADC_IsEnabled>
 80035c4:	1e03      	subs	r3, r0, #0
 80035c6:	d000      	beq.n	80035ca <HAL_ADC_Init+0xee>
 80035c8:	e0ad      	b.n	8003726 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7e1b      	ldrb	r3, [r3, #24]
 80035d2:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80035d4:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7e5b      	ldrb	r3, [r3, #25]
 80035da:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80035dc:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7e9b      	ldrb	r3, [r3, #26]
 80035e2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80035e4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_ADC_Init+0x118>
 80035ee:	2380      	movs	r3, #128	@ 0x80
 80035f0:	015b      	lsls	r3, r3, #5
 80035f2:	e000      	b.n	80035f6 <HAL_ADC_Init+0x11a>
 80035f4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80035f6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80035fc:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	da04      	bge.n	8003610 <HAL_ADC_Init+0x134>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	085b      	lsrs	r3, r3, #1
 800360e:	e001      	b.n	8003614 <HAL_ADC_Init+0x138>
 8003610:	2380      	movs	r3, #128	@ 0x80
 8003612:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8003614:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	212c      	movs	r1, #44	@ 0x2c
 800361a:	5c5b      	ldrb	r3, [r3, r1]
 800361c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800361e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	5c9b      	ldrb	r3, [r3, r2]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d115      	bne.n	800365c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	7e9b      	ldrb	r3, [r3, #26]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2280      	movs	r2, #128	@ 0x80
 800363c:	0252      	lsls	r2, r2, #9
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	e00b      	b.n	800365c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003648:	2220      	movs	r2, #32
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003654:	2201      	movs	r2, #1
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003668:	23e0      	movs	r3, #224	@ 0xe0
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003672:	4313      	orrs	r3, r2
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4a65      	ldr	r2, [pc, #404]	@ (8003818 <HAL_ADC_Init+0x33c>)
 8003682:	4013      	ands	r3, r2
 8003684:	0019      	movs	r1, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	430a      	orrs	r2, r1
 800368e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	0f9b      	lsrs	r3, r3, #30
 8003696:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800369c:	4313      	orrs	r3, r2
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	223c      	movs	r2, #60	@ 0x3c
 80036a8:	5c9b      	ldrb	r3, [r3, r2]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d111      	bne.n	80036d2 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	0f9b      	lsrs	r3, r3, #30
 80036b4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036ba:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80036c0:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80036c6:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	2201      	movs	r2, #1
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	4a50      	ldr	r2, [pc, #320]	@ (800381c <HAL_ADC_Init+0x340>)
 80036da:	4013      	ands	r3, r2
 80036dc:	0019      	movs	r1, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	23c0      	movs	r3, #192	@ 0xc0
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d018      	beq.n	8003726 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80036f8:	2380      	movs	r3, #128	@ 0x80
 80036fa:	05db      	lsls	r3, r3, #23
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d012      	beq.n	8003726 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003704:	2380      	movs	r3, #128	@ 0x80
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	429a      	cmp	r2, r3
 800370a:	d00c      	beq.n	8003726 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800370c:	4b44      	ldr	r3, [pc, #272]	@ (8003820 <HAL_ADC_Init+0x344>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a44      	ldr	r2, [pc, #272]	@ (8003824 <HAL_ADC_Init+0x348>)
 8003712:	4013      	ands	r3, r2
 8003714:	0019      	movs	r1, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	23f0      	movs	r3, #240	@ 0xf0
 800371c:	039b      	lsls	r3, r3, #14
 800371e:	401a      	ands	r2, r3
 8003720:	4b3f      	ldr	r3, [pc, #252]	@ (8003820 <HAL_ADC_Init+0x344>)
 8003722:	430a      	orrs	r2, r1
 8003724:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372e:	001a      	movs	r2, r3
 8003730:	2100      	movs	r1, #0
 8003732:	f7ff fda0 	bl	8003276 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373e:	493a      	ldr	r1, [pc, #232]	@ (8003828 <HAL_ADC_Init+0x34c>)
 8003740:	001a      	movs	r2, r3
 8003742:	f7ff fd98 	bl	8003276 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2110      	movs	r1, #16
 800375a:	4249      	negs	r1, r1
 800375c:	430a      	orrs	r2, r1
 800375e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003760:	e018      	b.n	8003794 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	2380      	movs	r3, #128	@ 0x80
 8003768:	039b      	lsls	r3, r3, #14
 800376a:	429a      	cmp	r2, r3
 800376c:	d112      	bne.n	8003794 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	3b01      	subs	r3, #1
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	221c      	movs	r2, #28
 800377e:	4013      	ands	r3, r2
 8003780:	2210      	movs	r2, #16
 8003782:	4252      	negs	r2, r2
 8003784:	409a      	lsls	r2, r3
 8003786:	0011      	movs	r1, r2
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2100      	movs	r1, #0
 800379a:	0018      	movs	r0, r3
 800379c:	f7ff fd88 	bl	80032b0 <LL_ADC_GetSamplingTimeCommonChannels>
 80037a0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d10b      	bne.n	80037c2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b4:	2203      	movs	r2, #3
 80037b6:	4393      	bics	r3, r2
 80037b8:	2201      	movs	r2, #1
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80037c0:	e01c      	b.n	80037fc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c6:	2212      	movs	r2, #18
 80037c8:	4393      	bics	r3, r2
 80037ca:	2210      	movs	r2, #16
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d6:	2201      	movs	r2, #1
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80037de:	231f      	movs	r3, #31
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80037e6:	e009      	b.n	80037fc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ec:	2210      	movs	r2, #16
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80037f4:	231f      	movs	r3, #31
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80037fc:	231f      	movs	r3, #31
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	781b      	ldrb	r3, [r3, #0]
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b008      	add	sp, #32
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	20000000 	.word	0x20000000
 8003810:	00030d40 	.word	0x00030d40
 8003814:	fffffefd 	.word	0xfffffefd
 8003818:	ffde0201 	.word	0xffde0201
 800381c:	1ffffc02 	.word	0x1ffffc02
 8003820:	40012708 	.word	0x40012708
 8003824:	ffc3ffff 	.word	0xffc3ffff
 8003828:	07ffff04 	.word	0x07ffff04

0800382c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800382c:	b5b0      	push	{r4, r5, r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	0018      	movs	r0, r3
 800383e:	f7ff fe3b 	bl	80034b8 <LL_ADC_REG_IsConversionOngoing>
 8003842:	1e03      	subs	r3, r0, #0
 8003844:	d16c      	bne.n	8003920 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2254      	movs	r2, #84	@ 0x54
 800384a:	5c9b      	ldrb	r3, [r3, r2]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_ADC_Start_DMA+0x28>
 8003850:	2302      	movs	r3, #2
 8003852:	e06c      	b.n	800392e <HAL_ADC_Start_DMA+0x102>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2254      	movs	r2, #84	@ 0x54
 8003858:	2101      	movs	r1, #1
 800385a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	4013      	ands	r3, r2
 8003866:	d113      	bne.n	8003890 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	0018      	movs	r0, r3
 800386e:	f7ff fdff 	bl	8003470 <LL_ADC_IsEnabled>
 8003872:	1e03      	subs	r3, r0, #0
 8003874:	d004      	beq.n	8003880 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	0018      	movs	r0, r3
 800387c:	f7ff fde6 	bl	800344c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2101      	movs	r1, #1
 800388c:	430a      	orrs	r2, r1
 800388e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003890:	2517      	movs	r5, #23
 8003892:	197c      	adds	r4, r7, r5
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	0018      	movs	r0, r3
 8003898:	f000 fb5e 	bl	8003f58 <ADC_Enable>
 800389c:	0003      	movs	r3, r0
 800389e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038a0:	002c      	movs	r4, r5
 80038a2:	193b      	adds	r3, r7, r4
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d13e      	bne.n	8003928 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ae:	4a22      	ldr	r2, [pc, #136]	@ (8003938 <HAL_ADC_Start_DMA+0x10c>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	2280      	movs	r2, #128	@ 0x80
 80038b4:	0052      	lsls	r2, r2, #1
 80038b6:	431a      	orrs	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c6:	4a1d      	ldr	r2, [pc, #116]	@ (800393c <HAL_ADC_Start_DMA+0x110>)
 80038c8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003940 <HAL_ADC_Start_DMA+0x114>)
 80038d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003944 <HAL_ADC_Start_DMA+0x118>)
 80038d8:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	221c      	movs	r2, #28
 80038e0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2254      	movs	r2, #84	@ 0x54
 80038e6:	2100      	movs	r1, #0
 80038e8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2110      	movs	r1, #16
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3340      	adds	r3, #64	@ 0x40
 8003904:	0019      	movs	r1, r3
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	193c      	adds	r4, r7, r4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f000 fdc0 	bl	8004490 <HAL_DMA_Start_IT>
 8003910:	0003      	movs	r3, r0
 8003912:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	0018      	movs	r0, r3
 800391a:	f7ff fdbb 	bl	8003494 <LL_ADC_REG_StartConversion>
 800391e:	e003      	b.n	8003928 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003920:	2317      	movs	r3, #23
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	2202      	movs	r2, #2
 8003926:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003928:	2317      	movs	r3, #23
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	781b      	ldrb	r3, [r3, #0]
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b006      	add	sp, #24
 8003934:	bdb0      	pop	{r4, r5, r7, pc}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	fffff0fe 	.word	0xfffff0fe
 800393c:	08004065 	.word	0x08004065
 8003940:	0800412d 	.word	0x0800412d
 8003944:	0800414b 	.word	0x0800414b

08003948 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2202      	movs	r2, #2
 8003968:	4013      	ands	r3, r2
 800396a:	d017      	beq.n	800399c <HAL_ADC_IRQHandler+0x54>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2202      	movs	r2, #2
 8003970:	4013      	ands	r3, r2
 8003972:	d013      	beq.n	800399c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003978:	2210      	movs	r2, #16
 800397a:	4013      	ands	r3, r2
 800397c:	d106      	bne.n	800398c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003982:	2280      	movs	r2, #128	@ 0x80
 8003984:	0112      	lsls	r2, r2, #4
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	0018      	movs	r0, r3
 8003990:	f000 fc06 	bl	80041a0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2202      	movs	r2, #2
 800399a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2204      	movs	r2, #4
 80039a0:	4013      	ands	r3, r2
 80039a2:	d003      	beq.n	80039ac <HAL_ADC_IRQHandler+0x64>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2204      	movs	r2, #4
 80039a8:	4013      	ands	r3, r2
 80039aa:	d107      	bne.n	80039bc <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2208      	movs	r2, #8
 80039b0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80039b2:	d04d      	beq.n	8003a50 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2208      	movs	r2, #8
 80039b8:	4013      	ands	r3, r2
 80039ba:	d049      	beq.n	8003a50 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c0:	2210      	movs	r2, #16
 80039c2:	4013      	ands	r3, r2
 80039c4:	d106      	bne.n	80039d4 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ca:	2280      	movs	r2, #128	@ 0x80
 80039cc:	0092      	lsls	r2, r2, #2
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	0018      	movs	r0, r3
 80039da:	f7ff fc80 	bl	80032de <LL_ADC_REG_IsTriggerSourceSWStart>
 80039de:	1e03      	subs	r3, r0, #0
 80039e0:	d02e      	beq.n	8003a40 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7e9b      	ldrb	r3, [r3, #26]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d12a      	bne.n	8003a40 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2208      	movs	r2, #8
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d123      	bne.n	8003a40 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7ff fd5b 	bl	80034b8 <LL_ADC_REG_IsConversionOngoing>
 8003a02:	1e03      	subs	r3, r0, #0
 8003a04:	d110      	bne.n	8003a28 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	210c      	movs	r1, #12
 8003a12:	438a      	bics	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1a:	4a56      	ldr	r2, [pc, #344]	@ (8003b74 <HAL_ADC_IRQHandler+0x22c>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2201      	movs	r2, #1
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a26:	e00b      	b.n	8003a40 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a38:	2201      	movs	r2, #1
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f7fe fdb2 	bl	80025ac <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	220c      	movs	r2, #12
 8003a4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2280      	movs	r2, #128	@ 0x80
 8003a54:	4013      	ands	r3, r2
 8003a56:	d012      	beq.n	8003a7e <HAL_ADC_IRQHandler+0x136>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2280      	movs	r2, #128	@ 0x80
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d00e      	beq.n	8003a7e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a64:	2280      	movs	r2, #128	@ 0x80
 8003a66:	0252      	lsls	r2, r2, #9
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 f889 	bl	8003b88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2280      	movs	r2, #128	@ 0x80
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	2380      	movs	r3, #128	@ 0x80
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4013      	ands	r3, r2
 8003a86:	d014      	beq.n	8003ab2 <HAL_ADC_IRQHandler+0x16a>
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	2380      	movs	r3, #128	@ 0x80
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d00f      	beq.n	8003ab2 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a96:	2280      	movs	r2, #128	@ 0x80
 8003a98:	0292      	lsls	r2, r2, #10
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f000 fb6c 	bl	8004180 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2280      	movs	r2, #128	@ 0x80
 8003aae:	0052      	lsls	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	2380      	movs	r3, #128	@ 0x80
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d014      	beq.n	8003ae6 <HAL_ADC_IRQHandler+0x19e>
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	2380      	movs	r3, #128	@ 0x80
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d00f      	beq.n	8003ae6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aca:	2280      	movs	r2, #128	@ 0x80
 8003acc:	02d2      	lsls	r2, r2, #11
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f000 fb5a 	bl	8004190 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2280      	movs	r2, #128	@ 0x80
 8003ae2:	0092      	lsls	r2, r2, #2
 8003ae4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2210      	movs	r2, #16
 8003aea:	4013      	ands	r3, r2
 8003aec:	d02b      	beq.n	8003b46 <HAL_ADC_IRQHandler+0x1fe>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2210      	movs	r2, #16
 8003af2:	4013      	ands	r3, r2
 8003af4:	d027      	beq.n	8003b46 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d102      	bne.n	8003b04 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8003afe:	2301      	movs	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	e008      	b.n	8003b16 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7ff fc3c 	bl	8003386 <LL_ADC_REG_GetDMATransfer>
 8003b0e:	1e03      	subs	r3, r0, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8003b12:	2301      	movs	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d110      	bne.n	8003b3e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b20:	2280      	movs	r2, #128	@ 0x80
 8003b22:	00d2      	lsls	r2, r2, #3
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2e:	2202      	movs	r2, #2
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 f82d 	bl	8003b98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2210      	movs	r2, #16
 8003b44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	2380      	movs	r3, #128	@ 0x80
 8003b4a:	019b      	lsls	r3, r3, #6
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d00d      	beq.n	8003b6c <HAL_ADC_IRQHandler+0x224>
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	019b      	lsls	r3, r3, #6
 8003b56:	4013      	ands	r3, r2
 8003b58:	d008      	beq.n	8003b6c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f000 fb27 	bl	80041b0 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2280      	movs	r2, #128	@ 0x80
 8003b68:	0192      	lsls	r2, r2, #6
 8003b6a:	601a      	str	r2, [r3, #0]
  }
}
 8003b6c:	46c0      	nop			@ (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b006      	add	sp, #24
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	fffffefe 	.word	0xfffffefe

08003b78 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b80:	46c0      	nop			@ (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003b90:	46c0      	nop			@ (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b002      	add	sp, #8
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ba0:	46c0      	nop			@ (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b002      	add	sp, #8
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bb2:	2317      	movs	r3, #23
 8003bb4:	18fb      	adds	r3, r7, r3
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2254      	movs	r2, #84	@ 0x54
 8003bc2:	5c9b      	ldrb	r3, [r3, r2]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x24>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e1c0      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x3a6>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2254      	movs	r2, #84	@ 0x54
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7ff fc6d 	bl	80034b8 <LL_ADC_REG_IsConversionOngoing>
 8003bde:	1e03      	subs	r3, r0, #0
 8003be0:	d000      	beq.n	8003be4 <HAL_ADC_ConfigChannel+0x3c>
 8003be2:	e1a3      	b.n	8003f2c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d100      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x46>
 8003bec:	e143      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	2380      	movs	r3, #128	@ 0x80
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d004      	beq.n	8003c04 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bfe:	4ac1      	ldr	r2, [pc, #772]	@ (8003f04 <HAL_ADC_ConfigChannel+0x35c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d108      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	0010      	movs	r0, r2
 8003c10:	f7ff fb96 	bl	8003340 <LL_ADC_REG_SetSequencerChAdd>
 8003c14:	e0c9      	b.n	8003daa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	211f      	movs	r1, #31
 8003c20:	400b      	ands	r3, r1
 8003c22:	210f      	movs	r1, #15
 8003c24:	4099      	lsls	r1, r3
 8003c26:	000b      	movs	r3, r1
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	035b      	lsls	r3, r3, #13
 8003c34:	0b5b      	lsrs	r3, r3, #13
 8003c36:	d105      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x9c>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	0e9b      	lsrs	r3, r3, #26
 8003c3e:	221f      	movs	r2, #31
 8003c40:	4013      	ands	r3, r2
 8003c42:	e098      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d000      	beq.n	8003c50 <HAL_ADC_ConfigChannel+0xa8>
 8003c4e:	e091      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x1cc>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2202      	movs	r2, #2
 8003c56:	4013      	ands	r3, r2
 8003c58:	d000      	beq.n	8003c5c <HAL_ADC_ConfigChannel+0xb4>
 8003c5a:	e089      	b.n	8003d70 <HAL_ADC_ConfigChannel+0x1c8>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2204      	movs	r2, #4
 8003c62:	4013      	ands	r3, r2
 8003c64:	d000      	beq.n	8003c68 <HAL_ADC_ConfigChannel+0xc0>
 8003c66:	e081      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x1c4>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d000      	beq.n	8003c74 <HAL_ADC_ConfigChannel+0xcc>
 8003c72:	e079      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x1c0>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2210      	movs	r2, #16
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d000      	beq.n	8003c80 <HAL_ADC_ConfigChannel+0xd8>
 8003c7e:	e071      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x1bc>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2220      	movs	r2, #32
 8003c86:	4013      	ands	r3, r2
 8003c88:	d000      	beq.n	8003c8c <HAL_ADC_ConfigChannel+0xe4>
 8003c8a:	e069      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x1b8>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2240      	movs	r2, #64	@ 0x40
 8003c92:	4013      	ands	r3, r2
 8003c94:	d000      	beq.n	8003c98 <HAL_ADC_ConfigChannel+0xf0>
 8003c96:	e061      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x1b4>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2280      	movs	r2, #128	@ 0x80
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d000      	beq.n	8003ca4 <HAL_ADC_ConfigChannel+0xfc>
 8003ca2:	e059      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x1b0>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	2380      	movs	r3, #128	@ 0x80
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4013      	ands	r3, r2
 8003cae:	d151      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x1ac>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	2380      	movs	r3, #128	@ 0x80
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d149      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x1a8>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	2380      	movs	r3, #128	@ 0x80
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d141      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x1a4>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	2380      	movs	r3, #128	@ 0x80
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d139      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x1a0>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	2380      	movs	r3, #128	@ 0x80
 8003cda:	015b      	lsls	r3, r3, #5
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d131      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x19c>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	2380      	movs	r3, #128	@ 0x80
 8003ce6:	019b      	lsls	r3, r3, #6
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d129      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x198>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	2380      	movs	r3, #128	@ 0x80
 8003cf2:	01db      	lsls	r3, r3, #7
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d121      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x194>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	2380      	movs	r3, #128	@ 0x80
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	4013      	ands	r3, r2
 8003d02:	d119      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x190>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	2380      	movs	r3, #128	@ 0x80
 8003d0a:	025b      	lsls	r3, r3, #9
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d111      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x18c>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	@ 0x80
 8003d16:	029b      	lsls	r3, r3, #10
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d109      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x188>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	2380      	movs	r3, #128	@ 0x80
 8003d22:	02db      	lsls	r3, r3, #11
 8003d24:	4013      	ands	r3, r2
 8003d26:	d001      	beq.n	8003d2c <HAL_ADC_ConfigChannel+0x184>
 8003d28:	2312      	movs	r3, #18
 8003d2a:	e024      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e022      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d30:	2311      	movs	r3, #17
 8003d32:	e020      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d34:	2310      	movs	r3, #16
 8003d36:	e01e      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d38:	230f      	movs	r3, #15
 8003d3a:	e01c      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d3c:	230e      	movs	r3, #14
 8003d3e:	e01a      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d40:	230d      	movs	r3, #13
 8003d42:	e018      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d44:	230c      	movs	r3, #12
 8003d46:	e016      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d48:	230b      	movs	r3, #11
 8003d4a:	e014      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d4c:	230a      	movs	r3, #10
 8003d4e:	e012      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d50:	2309      	movs	r3, #9
 8003d52:	e010      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d54:	2308      	movs	r3, #8
 8003d56:	e00e      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d58:	2307      	movs	r3, #7
 8003d5a:	e00c      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d5c:	2306      	movs	r3, #6
 8003d5e:	e00a      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d60:	2305      	movs	r3, #5
 8003d62:	e008      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d64:	2304      	movs	r3, #4
 8003d66:	e006      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e004      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e002      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1ce>
 8003d74:	2300      	movs	r3, #0
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	6852      	ldr	r2, [r2, #4]
 8003d7a:	201f      	movs	r0, #31
 8003d7c:	4002      	ands	r2, r0
 8003d7e:	4093      	lsls	r3, r2
 8003d80:	000a      	movs	r2, r1
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	089b      	lsrs	r3, r3, #2
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d808      	bhi.n	8003daa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	6859      	ldr	r1, [r3, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	001a      	movs	r2, r3
 8003da6:	f7ff faab 	bl	8003300 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6819      	ldr	r1, [r3, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	001a      	movs	r2, r3
 8003db8:	f7ff faf2 	bl	80033a0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	db00      	blt.n	8003dc6 <HAL_ADC_ConfigChannel+0x21e>
 8003dc4:	e0bc      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dc6:	4b50      	ldr	r3, [pc, #320]	@ (8003f08 <HAL_ADC_ConfigChannel+0x360>)
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7ff fa47 	bl	800325c <LL_ADC_GetCommonPathInternalCh>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a4d      	ldr	r2, [pc, #308]	@ (8003f0c <HAL_ADC_ConfigChannel+0x364>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d122      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	2380      	movs	r3, #128	@ 0x80
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003de4:	d11d      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2280      	movs	r2, #128	@ 0x80
 8003dea:	0412      	lsls	r2, r2, #16
 8003dec:	4313      	orrs	r3, r2
 8003dee:	4a46      	ldr	r2, [pc, #280]	@ (8003f08 <HAL_ADC_ConfigChannel+0x360>)
 8003df0:	0019      	movs	r1, r3
 8003df2:	0010      	movs	r0, r2
 8003df4:	f7ff fa1e 	bl	8003234 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003df8:	4b45      	ldr	r3, [pc, #276]	@ (8003f10 <HAL_ADC_ConfigChannel+0x368>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4945      	ldr	r1, [pc, #276]	@ (8003f14 <HAL_ADC_ConfigChannel+0x36c>)
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7fc f980 	bl	8000104 <__udivsi3>
 8003e04:	0003      	movs	r3, r0
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	0013      	movs	r3, r2
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	189b      	adds	r3, r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e12:	e002      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f9      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e20:	e08e      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a3c      	ldr	r2, [pc, #240]	@ (8003f18 <HAL_ADC_ConfigChannel+0x370>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d10e      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	2380      	movs	r3, #128	@ 0x80
 8003e30:	045b      	lsls	r3, r3, #17
 8003e32:	4013      	ands	r3, r2
 8003e34:	d109      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2280      	movs	r2, #128	@ 0x80
 8003e3a:	0452      	lsls	r2, r2, #17
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	4a32      	ldr	r2, [pc, #200]	@ (8003f08 <HAL_ADC_ConfigChannel+0x360>)
 8003e40:	0019      	movs	r1, r3
 8003e42:	0010      	movs	r0, r2
 8003e44:	f7ff f9f6 	bl	8003234 <LL_ADC_SetCommonPathInternalCh>
 8003e48:	e07a      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a33      	ldr	r2, [pc, #204]	@ (8003f1c <HAL_ADC_ConfigChannel+0x374>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d000      	beq.n	8003e56 <HAL_ADC_ConfigChannel+0x2ae>
 8003e54:	e074      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	2380      	movs	r3, #128	@ 0x80
 8003e5a:	03db      	lsls	r3, r3, #15
 8003e5c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e5e:	d000      	beq.n	8003e62 <HAL_ADC_ConfigChannel+0x2ba>
 8003e60:	e06e      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2280      	movs	r2, #128	@ 0x80
 8003e66:	03d2      	lsls	r2, r2, #15
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	4a27      	ldr	r2, [pc, #156]	@ (8003f08 <HAL_ADC_ConfigChannel+0x360>)
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	0010      	movs	r0, r2
 8003e70:	f7ff f9e0 	bl	8003234 <LL_ADC_SetCommonPathInternalCh>
 8003e74:	e064      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	2380      	movs	r3, #128	@ 0x80
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d004      	beq.n	8003e8c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e86:	4a1f      	ldr	r2, [pc, #124]	@ (8003f04 <HAL_ADC_ConfigChannel+0x35c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d107      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0019      	movs	r1, r3
 8003e96:	0010      	movs	r0, r2
 8003e98:	f7ff fa63 	bl	8003362 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	da4d      	bge.n	8003f40 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ea4:	4b18      	ldr	r3, [pc, #96]	@ (8003f08 <HAL_ADC_ConfigChannel+0x360>)
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f7ff f9d8 	bl	800325c <LL_ADC_GetCommonPathInternalCh>
 8003eac:	0003      	movs	r3, r0
 8003eae:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a15      	ldr	r2, [pc, #84]	@ (8003f0c <HAL_ADC_ConfigChannel+0x364>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d108      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4a18      	ldr	r2, [pc, #96]	@ (8003f20 <HAL_ADC_ConfigChannel+0x378>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	4a11      	ldr	r2, [pc, #68]	@ (8003f08 <HAL_ADC_ConfigChannel+0x360>)
 8003ec2:	0019      	movs	r1, r3
 8003ec4:	0010      	movs	r0, r2
 8003ec6:	f7ff f9b5 	bl	8003234 <LL_ADC_SetCommonPathInternalCh>
 8003eca:	e039      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a11      	ldr	r2, [pc, #68]	@ (8003f18 <HAL_ADC_ConfigChannel+0x370>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d108      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4a12      	ldr	r2, [pc, #72]	@ (8003f24 <HAL_ADC_ConfigChannel+0x37c>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	4a0a      	ldr	r2, [pc, #40]	@ (8003f08 <HAL_ADC_ConfigChannel+0x360>)
 8003ede:	0019      	movs	r1, r3
 8003ee0:	0010      	movs	r0, r2
 8003ee2:	f7ff f9a7 	bl	8003234 <LL_ADC_SetCommonPathInternalCh>
 8003ee6:	e02b      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a0b      	ldr	r2, [pc, #44]	@ (8003f1c <HAL_ADC_ConfigChannel+0x374>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d126      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8003f28 <HAL_ADC_ConfigChannel+0x380>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	4a03      	ldr	r2, [pc, #12]	@ (8003f08 <HAL_ADC_ConfigChannel+0x360>)
 8003efa:	0019      	movs	r1, r3
 8003efc:	0010      	movs	r0, r2
 8003efe:	f7ff f999 	bl	8003234 <LL_ADC_SetCommonPathInternalCh>
 8003f02:	e01d      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x398>
 8003f04:	80000004 	.word	0x80000004
 8003f08:	40012708 	.word	0x40012708
 8003f0c:	b0001000 	.word	0xb0001000
 8003f10:	20000000 	.word	0x20000000
 8003f14:	00030d40 	.word	0x00030d40
 8003f18:	b8004000 	.word	0xb8004000
 8003f1c:	b4002000 	.word	0xb4002000
 8003f20:	ff7fffff 	.word	0xff7fffff
 8003f24:	feffffff 	.word	0xfeffffff
 8003f28:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f30:	2220      	movs	r2, #32
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003f38:	2317      	movs	r3, #23
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2254      	movs	r2, #84	@ 0x54
 8003f44:	2100      	movs	r1, #0
 8003f46:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003f48:	2317      	movs	r3, #23
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	781b      	ldrb	r3, [r3, #0]
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b006      	add	sp, #24
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			@ (mov r8, r8)

08003f58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7ff fa81 	bl	8003470 <LL_ADC_IsEnabled>
 8003f6e:	1e03      	subs	r3, r0, #0
 8003f70:	d000      	beq.n	8003f74 <ADC_Enable+0x1c>
 8003f72:	e069      	b.n	8004048 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	4a36      	ldr	r2, [pc, #216]	@ (8004054 <ADC_Enable+0xfc>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d00d      	beq.n	8003f9c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f84:	2210      	movs	r2, #16
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	2201      	movs	r2, #1
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e056      	b.n	800404a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f7ff fa41 	bl	8003428 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8004058 <ADC_Enable+0x100>)
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7ff f957 	bl	800325c <LL_ADC_GetCommonPathInternalCh>
 8003fae:	0002      	movs	r2, r0
 8003fb0:	2380      	movs	r3, #128	@ 0x80
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d00f      	beq.n	8003fd8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fb8:	4b28      	ldr	r3, [pc, #160]	@ (800405c <ADC_Enable+0x104>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4928      	ldr	r1, [pc, #160]	@ (8004060 <ADC_Enable+0x108>)
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f7fc f8a0 	bl	8000104 <__udivsi3>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003fc8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003fca:	e002      	b.n	8003fd2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f9      	bne.n	8003fcc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	7e5b      	ldrb	r3, [r3, #25]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d033      	beq.n	8004048 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003fe0:	f7ff f8fa 	bl	80031d8 <HAL_GetTick>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fe8:	e027      	b.n	800403a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f7ff fa3e 	bl	8003470 <LL_ADC_IsEnabled>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d104      	bne.n	8004002 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f7ff fa13 	bl	8003428 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004002:	f7ff f8e9 	bl	80031d8 <HAL_GetTick>
 8004006:	0002      	movs	r2, r0
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d914      	bls.n	800403a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2201      	movs	r2, #1
 8004018:	4013      	ands	r3, r2
 800401a:	2b01      	cmp	r3, #1
 800401c:	d00d      	beq.n	800403a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004022:	2210      	movs	r2, #16
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402e:	2201      	movs	r2, #1
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e007      	b.n	800404a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2201      	movs	r2, #1
 8004042:	4013      	ands	r3, r2
 8004044:	2b01      	cmp	r3, #1
 8004046:	d1d0      	bne.n	8003fea <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	b004      	add	sp, #16
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	80000017 	.word	0x80000017
 8004058:	40012708 	.word	0x40012708
 800405c:	20000000 	.word	0x20000000
 8004060:	00030d40 	.word	0x00030d40

08004064 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004076:	2250      	movs	r2, #80	@ 0x50
 8004078:	4013      	ands	r3, r2
 800407a:	d141      	bne.n	8004100 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	2280      	movs	r2, #128	@ 0x80
 8004082:	0092      	lsls	r2, r2, #2
 8004084:	431a      	orrs	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	0018      	movs	r0, r3
 8004090:	f7ff f925 	bl	80032de <LL_ADC_REG_IsTriggerSourceSWStart>
 8004094:	1e03      	subs	r3, r0, #0
 8004096:	d02e      	beq.n	80040f6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	7e9b      	ldrb	r3, [r3, #26]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d12a      	bne.n	80040f6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2208      	movs	r2, #8
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d123      	bne.n	80040f6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	0018      	movs	r0, r3
 80040b4:	f7ff fa00 	bl	80034b8 <LL_ADC_REG_IsConversionOngoing>
 80040b8:	1e03      	subs	r3, r0, #0
 80040ba:	d110      	bne.n	80040de <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	210c      	movs	r1, #12
 80040c8:	438a      	bics	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d0:	4a15      	ldr	r2, [pc, #84]	@ (8004128 <ADC_DMAConvCplt+0xc4>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	2201      	movs	r2, #1
 80040d6:	431a      	orrs	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	659a      	str	r2, [r3, #88]	@ 0x58
 80040dc:	e00b      	b.n	80040f6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e2:	2220      	movs	r2, #32
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ee:	2201      	movs	r2, #1
 80040f0:	431a      	orrs	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	0018      	movs	r0, r3
 80040fa:	f7fe fa57 	bl	80025ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80040fe:	e00f      	b.n	8004120 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004104:	2210      	movs	r2, #16
 8004106:	4013      	ands	r3, r2
 8004108:	d004      	beq.n	8004114 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	0018      	movs	r0, r3
 800410e:	f7ff fd43 	bl	8003b98 <HAL_ADC_ErrorCallback>
}
 8004112:	e005      	b.n	8004120 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	0010      	movs	r0, r2
 800411e:	4798      	blx	r3
}
 8004120:	46c0      	nop			@ (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b004      	add	sp, #16
 8004126:	bd80      	pop	{r7, pc}
 8004128:	fffffefe 	.word	0xfffffefe

0800412c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004138:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	0018      	movs	r0, r3
 800413e:	f7ff fd1b 	bl	8003b78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	46bd      	mov	sp, r7
 8004146:	b004      	add	sp, #16
 8004148:	bd80      	pop	{r7, pc}

0800414a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004156:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415c:	2240      	movs	r2, #64	@ 0x40
 800415e:	431a      	orrs	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004168:	2204      	movs	r2, #4
 800416a:	431a      	orrs	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	0018      	movs	r0, r3
 8004174:	f7ff fd10 	bl	8003b98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004178:	46c0      	nop			@ (mov r8, r8)
 800417a:	46bd      	mov	sp, r7
 800417c:	b004      	add	sp, #16
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004188:	46c0      	nop			@ (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	b002      	add	sp, #8
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004198:	46c0      	nop			@ (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b002      	add	sp, #8
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80041a8:	46c0      	nop			@ (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b002      	add	sp, #8
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80041b8:	46c0      	nop			@ (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b002      	add	sp, #8
 80041be:	bd80      	pop	{r7, pc}

080041c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	0002      	movs	r2, r0
 80041c8:	1dfb      	adds	r3, r7, #7
 80041ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041cc:	1dfb      	adds	r3, r7, #7
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80041d2:	d809      	bhi.n	80041e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041d4:	1dfb      	adds	r3, r7, #7
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	001a      	movs	r2, r3
 80041da:	231f      	movs	r3, #31
 80041dc:	401a      	ands	r2, r3
 80041de:	4b04      	ldr	r3, [pc, #16]	@ (80041f0 <__NVIC_EnableIRQ+0x30>)
 80041e0:	2101      	movs	r1, #1
 80041e2:	4091      	lsls	r1, r2
 80041e4:	000a      	movs	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80041e8:	46c0      	nop			@ (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b002      	add	sp, #8
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	e000e100 	.word	0xe000e100

080041f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041f4:	b590      	push	{r4, r7, lr}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	0002      	movs	r2, r0
 80041fc:	6039      	str	r1, [r7, #0]
 80041fe:	1dfb      	adds	r3, r7, #7
 8004200:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004202:	1dfb      	adds	r3, r7, #7
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b7f      	cmp	r3, #127	@ 0x7f
 8004208:	d828      	bhi.n	800425c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800420a:	4a2f      	ldr	r2, [pc, #188]	@ (80042c8 <__NVIC_SetPriority+0xd4>)
 800420c:	1dfb      	adds	r3, r7, #7
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	b25b      	sxtb	r3, r3
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	33c0      	adds	r3, #192	@ 0xc0
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	589b      	ldr	r3, [r3, r2]
 800421a:	1dfa      	adds	r2, r7, #7
 800421c:	7812      	ldrb	r2, [r2, #0]
 800421e:	0011      	movs	r1, r2
 8004220:	2203      	movs	r2, #3
 8004222:	400a      	ands	r2, r1
 8004224:	00d2      	lsls	r2, r2, #3
 8004226:	21ff      	movs	r1, #255	@ 0xff
 8004228:	4091      	lsls	r1, r2
 800422a:	000a      	movs	r2, r1
 800422c:	43d2      	mvns	r2, r2
 800422e:	401a      	ands	r2, r3
 8004230:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	019b      	lsls	r3, r3, #6
 8004236:	22ff      	movs	r2, #255	@ 0xff
 8004238:	401a      	ands	r2, r3
 800423a:	1dfb      	adds	r3, r7, #7
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	0018      	movs	r0, r3
 8004240:	2303      	movs	r3, #3
 8004242:	4003      	ands	r3, r0
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004248:	481f      	ldr	r0, [pc, #124]	@ (80042c8 <__NVIC_SetPriority+0xd4>)
 800424a:	1dfb      	adds	r3, r7, #7
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	b25b      	sxtb	r3, r3
 8004250:	089b      	lsrs	r3, r3, #2
 8004252:	430a      	orrs	r2, r1
 8004254:	33c0      	adds	r3, #192	@ 0xc0
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800425a:	e031      	b.n	80042c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800425c:	4a1b      	ldr	r2, [pc, #108]	@ (80042cc <__NVIC_SetPriority+0xd8>)
 800425e:	1dfb      	adds	r3, r7, #7
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	0019      	movs	r1, r3
 8004264:	230f      	movs	r3, #15
 8004266:	400b      	ands	r3, r1
 8004268:	3b08      	subs	r3, #8
 800426a:	089b      	lsrs	r3, r3, #2
 800426c:	3306      	adds	r3, #6
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	18d3      	adds	r3, r2, r3
 8004272:	3304      	adds	r3, #4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	1dfa      	adds	r2, r7, #7
 8004278:	7812      	ldrb	r2, [r2, #0]
 800427a:	0011      	movs	r1, r2
 800427c:	2203      	movs	r2, #3
 800427e:	400a      	ands	r2, r1
 8004280:	00d2      	lsls	r2, r2, #3
 8004282:	21ff      	movs	r1, #255	@ 0xff
 8004284:	4091      	lsls	r1, r2
 8004286:	000a      	movs	r2, r1
 8004288:	43d2      	mvns	r2, r2
 800428a:	401a      	ands	r2, r3
 800428c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	019b      	lsls	r3, r3, #6
 8004292:	22ff      	movs	r2, #255	@ 0xff
 8004294:	401a      	ands	r2, r3
 8004296:	1dfb      	adds	r3, r7, #7
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	0018      	movs	r0, r3
 800429c:	2303      	movs	r3, #3
 800429e:	4003      	ands	r3, r0
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042a4:	4809      	ldr	r0, [pc, #36]	@ (80042cc <__NVIC_SetPriority+0xd8>)
 80042a6:	1dfb      	adds	r3, r7, #7
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	001c      	movs	r4, r3
 80042ac:	230f      	movs	r3, #15
 80042ae:	4023      	ands	r3, r4
 80042b0:	3b08      	subs	r3, #8
 80042b2:	089b      	lsrs	r3, r3, #2
 80042b4:	430a      	orrs	r2, r1
 80042b6:	3306      	adds	r3, #6
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	18c3      	adds	r3, r0, r3
 80042bc:	3304      	adds	r3, #4
 80042be:	601a      	str	r2, [r3, #0]
}
 80042c0:	46c0      	nop			@ (mov r8, r8)
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b003      	add	sp, #12
 80042c6:	bd90      	pop	{r4, r7, pc}
 80042c8:	e000e100 	.word	0xe000e100
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	1e5a      	subs	r2, r3, #1
 80042dc:	2380      	movs	r3, #128	@ 0x80
 80042de:	045b      	lsls	r3, r3, #17
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d301      	bcc.n	80042e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042e4:	2301      	movs	r3, #1
 80042e6:	e010      	b.n	800430a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004314 <SysTick_Config+0x44>)
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	3a01      	subs	r2, #1
 80042ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042f0:	2301      	movs	r3, #1
 80042f2:	425b      	negs	r3, r3
 80042f4:	2103      	movs	r1, #3
 80042f6:	0018      	movs	r0, r3
 80042f8:	f7ff ff7c 	bl	80041f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042fc:	4b05      	ldr	r3, [pc, #20]	@ (8004314 <SysTick_Config+0x44>)
 80042fe:	2200      	movs	r2, #0
 8004300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004302:	4b04      	ldr	r3, [pc, #16]	@ (8004314 <SysTick_Config+0x44>)
 8004304:	2207      	movs	r2, #7
 8004306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004308:	2300      	movs	r3, #0
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b002      	add	sp, #8
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	e000e010 	.word	0xe000e010

08004318 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	210f      	movs	r1, #15
 8004324:	187b      	adds	r3, r7, r1
 8004326:	1c02      	adds	r2, r0, #0
 8004328:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	187b      	adds	r3, r7, r1
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	b25b      	sxtb	r3, r3
 8004332:	0011      	movs	r1, r2
 8004334:	0018      	movs	r0, r3
 8004336:	f7ff ff5d 	bl	80041f4 <__NVIC_SetPriority>
}
 800433a:	46c0      	nop			@ (mov r8, r8)
 800433c:	46bd      	mov	sp, r7
 800433e:	b004      	add	sp, #16
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	0002      	movs	r2, r0
 800434a:	1dfb      	adds	r3, r7, #7
 800434c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800434e:	1dfb      	adds	r3, r7, #7
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	b25b      	sxtb	r3, r3
 8004354:	0018      	movs	r0, r3
 8004356:	f7ff ff33 	bl	80041c0 <__NVIC_EnableIRQ>
}
 800435a:	46c0      	nop			@ (mov r8, r8)
 800435c:	46bd      	mov	sp, r7
 800435e:	b002      	add	sp, #8
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	0018      	movs	r0, r3
 800436e:	f7ff ffaf 	bl	80042d0 <SysTick_Config>
 8004372:	0003      	movs	r3, r0
}
 8004374:	0018      	movs	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	b002      	add	sp, #8
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e077      	b.n	800447e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a3d      	ldr	r2, [pc, #244]	@ (8004488 <HAL_DMA_Init+0x10c>)
 8004394:	4694      	mov	ip, r2
 8004396:	4463      	add	r3, ip
 8004398:	2114      	movs	r1, #20
 800439a:	0018      	movs	r0, r3
 800439c:	f7fb feb2 	bl	8000104 <__udivsi3>
 80043a0:	0003      	movs	r3, r0
 80043a2:	009a      	lsls	r2, r3, #2
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2225      	movs	r2, #37	@ 0x25
 80043ac:	2102      	movs	r1, #2
 80043ae:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4934      	ldr	r1, [pc, #208]	@ (800448c <HAL_DMA_Init+0x110>)
 80043bc:	400a      	ands	r2, r1
 80043be:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6819      	ldr	r1, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	0018      	movs	r0, r3
 80043fa:	f000 fa2b 	bl	8004854 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	2380      	movs	r3, #128	@ 0x80
 8004404:	01db      	lsls	r3, r3, #7
 8004406:	429a      	cmp	r2, r3
 8004408:	d102      	bne.n	8004410 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004418:	213f      	movs	r1, #63	@ 0x3f
 800441a:	400a      	ands	r2, r1
 800441c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004426:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d011      	beq.n	8004454 <HAL_DMA_Init+0xd8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b04      	cmp	r3, #4
 8004436:	d80d      	bhi.n	8004454 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	0018      	movs	r0, r3
 800443c:	f000 fa36 	bl	80048ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	e008      	b.n	8004466 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2225      	movs	r2, #37	@ 0x25
 8004470:	2101      	movs	r1, #1
 8004472:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2224      	movs	r2, #36	@ 0x24
 8004478:	2100      	movs	r1, #0
 800447a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	0018      	movs	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	b002      	add	sp, #8
 8004484:	bd80      	pop	{r7, pc}
 8004486:	46c0      	nop			@ (mov r8, r8)
 8004488:	bffdfff8 	.word	0xbffdfff8
 800448c:	ffff800f 	.word	0xffff800f

08004490 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800449e:	2317      	movs	r3, #23
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2224      	movs	r2, #36	@ 0x24
 80044aa:	5c9b      	ldrb	r3, [r3, r2]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_DMA_Start_IT+0x24>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e06f      	b.n	8004594 <HAL_DMA_Start_IT+0x104>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2224      	movs	r2, #36	@ 0x24
 80044b8:	2101      	movs	r1, #1
 80044ba:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2225      	movs	r2, #37	@ 0x25
 80044c0:	5c9b      	ldrb	r3, [r3, r2]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d157      	bne.n	8004578 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2225      	movs	r2, #37	@ 0x25
 80044cc:	2102      	movs	r1, #2
 80044ce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2101      	movs	r1, #1
 80044e2:	438a      	bics	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f971 	bl	80047d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d008      	beq.n	800450c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	210e      	movs	r1, #14
 8004506:	430a      	orrs	r2, r1
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e00f      	b.n	800452c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2104      	movs	r1, #4
 8004518:	438a      	bics	r2, r1
 800451a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	210a      	movs	r1, #10
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	2380      	movs	r3, #128	@ 0x80
 8004534:	025b      	lsls	r3, r3, #9
 8004536:	4013      	ands	r3, r2
 8004538:	d008      	beq.n	800454c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004544:	2180      	movs	r1, #128	@ 0x80
 8004546:	0049      	lsls	r1, r1, #1
 8004548:	430a      	orrs	r2, r1
 800454a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800455e:	2180      	movs	r1, #128	@ 0x80
 8004560:	0049      	lsls	r1, r1, #1
 8004562:	430a      	orrs	r2, r1
 8004564:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2101      	movs	r1, #1
 8004572:	430a      	orrs	r2, r1
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e00a      	b.n	800458e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2280      	movs	r2, #128	@ 0x80
 800457c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2224      	movs	r2, #36	@ 0x24
 8004582:	2100      	movs	r1, #0
 8004584:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004586:	2317      	movs	r3, #23
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	2201      	movs	r2, #1
 800458c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800458e:	2317      	movs	r3, #23
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	781b      	ldrb	r3, [r3, #0]
}
 8004594:	0018      	movs	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	b006      	add	sp, #24
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a4:	210f      	movs	r1, #15
 80045a6:	187b      	adds	r3, r7, r1
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2225      	movs	r2, #37	@ 0x25
 80045b0:	5c9b      	ldrb	r3, [r3, r2]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d006      	beq.n	80045c6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2204      	movs	r2, #4
 80045bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80045be:	187b      	adds	r3, r7, r1
 80045c0:	2201      	movs	r2, #1
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	e049      	b.n	800465a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	210e      	movs	r1, #14
 80045d2:	438a      	bics	r2, r1
 80045d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2101      	movs	r1, #1
 80045e2:	438a      	bics	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f0:	491d      	ldr	r1, [pc, #116]	@ (8004668 <HAL_DMA_Abort_IT+0xcc>)
 80045f2:	400a      	ands	r2, r1
 80045f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80045f6:	4b1d      	ldr	r3, [pc, #116]	@ (800466c <HAL_DMA_Abort_IT+0xd0>)
 80045f8:	6859      	ldr	r1, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	221c      	movs	r2, #28
 8004600:	4013      	ands	r3, r2
 8004602:	2201      	movs	r2, #1
 8004604:	409a      	lsls	r2, r3
 8004606:	4b19      	ldr	r3, [pc, #100]	@ (800466c <HAL_DMA_Abort_IT+0xd0>)
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004614:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00c      	beq.n	8004638 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004628:	490f      	ldr	r1, [pc, #60]	@ (8004668 <HAL_DMA_Abort_IT+0xcc>)
 800462a:	400a      	ands	r2, r1
 800462c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004636:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2225      	movs	r2, #37	@ 0x25
 800463c:	2101      	movs	r1, #1
 800463e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2224      	movs	r2, #36	@ 0x24
 8004644:	2100      	movs	r1, #0
 8004646:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	0010      	movs	r0, r2
 8004658:	4798      	blx	r3
    }
  }
  return status;
 800465a:	230f      	movs	r3, #15
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	781b      	ldrb	r3, [r3, #0]
}
 8004660:	0018      	movs	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	b004      	add	sp, #16
 8004666:	bd80      	pop	{r7, pc}
 8004668:	fffffeff 	.word	0xfffffeff
 800466c:	40020000 	.word	0x40020000

08004670 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8004678:	4b55      	ldr	r3, [pc, #340]	@ (80047d0 <HAL_DMA_IRQHandler+0x160>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	221c      	movs	r2, #28
 800468c:	4013      	ands	r3, r2
 800468e:	2204      	movs	r2, #4
 8004690:	409a      	lsls	r2, r3
 8004692:	0013      	movs	r3, r2
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4013      	ands	r3, r2
 8004698:	d027      	beq.n	80046ea <HAL_DMA_IRQHandler+0x7a>
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2204      	movs	r2, #4
 800469e:	4013      	ands	r3, r2
 80046a0:	d023      	beq.n	80046ea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2220      	movs	r2, #32
 80046aa:	4013      	ands	r3, r2
 80046ac:	d107      	bne.n	80046be <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2104      	movs	r1, #4
 80046ba:	438a      	bics	r2, r1
 80046bc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80046be:	4b44      	ldr	r3, [pc, #272]	@ (80047d0 <HAL_DMA_IRQHandler+0x160>)
 80046c0:	6859      	ldr	r1, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	221c      	movs	r2, #28
 80046c8:	4013      	ands	r3, r2
 80046ca:	2204      	movs	r2, #4
 80046cc:	409a      	lsls	r2, r3
 80046ce:	4b40      	ldr	r3, [pc, #256]	@ (80047d0 <HAL_DMA_IRQHandler+0x160>)
 80046d0:	430a      	orrs	r2, r1
 80046d2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d100      	bne.n	80046de <HAL_DMA_IRQHandler+0x6e>
 80046dc:	e073      	b.n	80047c6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	0010      	movs	r0, r2
 80046e6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80046e8:	e06d      	b.n	80047c6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	221c      	movs	r2, #28
 80046f0:	4013      	ands	r3, r2
 80046f2:	2202      	movs	r2, #2
 80046f4:	409a      	lsls	r2, r3
 80046f6:	0013      	movs	r3, r2
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4013      	ands	r3, r2
 80046fc:	d02e      	beq.n	800475c <HAL_DMA_IRQHandler+0xec>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2202      	movs	r2, #2
 8004702:	4013      	ands	r3, r2
 8004704:	d02a      	beq.n	800475c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2220      	movs	r2, #32
 800470e:	4013      	ands	r3, r2
 8004710:	d10b      	bne.n	800472a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	210a      	movs	r1, #10
 800471e:	438a      	bics	r2, r1
 8004720:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2225      	movs	r2, #37	@ 0x25
 8004726:	2101      	movs	r1, #1
 8004728:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800472a:	4b29      	ldr	r3, [pc, #164]	@ (80047d0 <HAL_DMA_IRQHandler+0x160>)
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	221c      	movs	r2, #28
 8004734:	4013      	ands	r3, r2
 8004736:	2202      	movs	r2, #2
 8004738:	409a      	lsls	r2, r3
 800473a:	4b25      	ldr	r3, [pc, #148]	@ (80047d0 <HAL_DMA_IRQHandler+0x160>)
 800473c:	430a      	orrs	r2, r1
 800473e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2224      	movs	r2, #36	@ 0x24
 8004744:	2100      	movs	r1, #0
 8004746:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d03a      	beq.n	80047c6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	0010      	movs	r0, r2
 8004758:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800475a:	e034      	b.n	80047c6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	221c      	movs	r2, #28
 8004762:	4013      	ands	r3, r2
 8004764:	2208      	movs	r2, #8
 8004766:	409a      	lsls	r2, r3
 8004768:	0013      	movs	r3, r2
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4013      	ands	r3, r2
 800476e:	d02b      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x158>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2208      	movs	r2, #8
 8004774:	4013      	ands	r3, r2
 8004776:	d027      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	210e      	movs	r1, #14
 8004784:	438a      	bics	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004788:	4b11      	ldr	r3, [pc, #68]	@ (80047d0 <HAL_DMA_IRQHandler+0x160>)
 800478a:	6859      	ldr	r1, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004790:	221c      	movs	r2, #28
 8004792:	4013      	ands	r3, r2
 8004794:	2201      	movs	r2, #1
 8004796:	409a      	lsls	r2, r3
 8004798:	4b0d      	ldr	r3, [pc, #52]	@ (80047d0 <HAL_DMA_IRQHandler+0x160>)
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2225      	movs	r2, #37	@ 0x25
 80047a8:	2101      	movs	r1, #1
 80047aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2224      	movs	r2, #36	@ 0x24
 80047b0:	2100      	movs	r1, #0
 80047b2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	0010      	movs	r0, r2
 80047c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047c6:	46c0      	nop			@ (mov r8, r8)
 80047c8:	46c0      	nop			@ (mov r8, r8)
}
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b004      	add	sp, #16
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40020000 	.word	0x40020000

080047d4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80047ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80047fc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80047fe:	4b14      	ldr	r3, [pc, #80]	@ (8004850 <DMA_SetConfig+0x7c>)
 8004800:	6859      	ldr	r1, [r3, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	221c      	movs	r2, #28
 8004808:	4013      	ands	r3, r2
 800480a:	2201      	movs	r2, #1
 800480c:	409a      	lsls	r2, r3
 800480e:	4b10      	ldr	r3, [pc, #64]	@ (8004850 <DMA_SetConfig+0x7c>)
 8004810:	430a      	orrs	r2, r1
 8004812:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b10      	cmp	r3, #16
 8004822:	d108      	bne.n	8004836 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004834:	e007      	b.n	8004846 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	60da      	str	r2, [r3, #12]
}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	46bd      	mov	sp, r7
 800484a:	b004      	add	sp, #16
 800484c:	bd80      	pop	{r7, pc}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	40020000 	.word	0x40020000

08004854 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004860:	089b      	lsrs	r3, r3, #2
 8004862:	4a10      	ldr	r2, [pc, #64]	@ (80048a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004864:	4694      	mov	ip, r2
 8004866:	4463      	add	r3, ip
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	001a      	movs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	001a      	movs	r2, r3
 8004876:	23ff      	movs	r3, #255	@ 0xff
 8004878:	4013      	ands	r3, r2
 800487a:	3b08      	subs	r3, #8
 800487c:	2114      	movs	r1, #20
 800487e:	0018      	movs	r0, r3
 8004880:	f7fb fc40 	bl	8000104 <__udivsi3>
 8004884:	0003      	movs	r3, r0
 8004886:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a07      	ldr	r2, [pc, #28]	@ (80048a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800488c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	221f      	movs	r2, #31
 8004892:	4013      	ands	r3, r2
 8004894:	2201      	movs	r2, #1
 8004896:	409a      	lsls	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800489c:	46c0      	nop			@ (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b004      	add	sp, #16
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	10008200 	.word	0x10008200
 80048a8:	40020880 	.word	0x40020880

080048ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	223f      	movs	r2, #63	@ 0x3f
 80048ba:	4013      	ands	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4a0a      	ldr	r2, [pc, #40]	@ (80048ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80048c2:	4694      	mov	ip, r2
 80048c4:	4463      	add	r3, ip
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	001a      	movs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a07      	ldr	r2, [pc, #28]	@ (80048f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80048d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	2203      	movs	r2, #3
 80048da:	4013      	ands	r3, r2
 80048dc:	2201      	movs	r2, #1
 80048de:	409a      	lsls	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80048e4:	46c0      	nop			@ (mov r8, r8)
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b004      	add	sp, #16
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	1000823f 	.word	0x1000823f
 80048f0:	40020940 	.word	0x40020940

080048f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004902:	e147      	b.n	8004b94 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2101      	movs	r1, #1
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4091      	lsls	r1, r2
 800490e:	000a      	movs	r2, r1
 8004910:	4013      	ands	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d100      	bne.n	800491c <HAL_GPIO_Init+0x28>
 800491a:	e138      	b.n	8004b8e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2203      	movs	r2, #3
 8004922:	4013      	ands	r3, r2
 8004924:	2b01      	cmp	r3, #1
 8004926:	d005      	beq.n	8004934 <HAL_GPIO_Init+0x40>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2203      	movs	r2, #3
 800492e:	4013      	ands	r3, r2
 8004930:	2b02      	cmp	r3, #2
 8004932:	d130      	bne.n	8004996 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	2203      	movs	r2, #3
 8004940:	409a      	lsls	r2, r3
 8004942:	0013      	movs	r3, r2
 8004944:	43da      	mvns	r2, r3
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4013      	ands	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	409a      	lsls	r2, r3
 8004956:	0013      	movs	r3, r2
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800496a:	2201      	movs	r2, #1
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	409a      	lsls	r2, r3
 8004970:	0013      	movs	r3, r2
 8004972:	43da      	mvns	r2, r3
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	4013      	ands	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	091b      	lsrs	r3, r3, #4
 8004980:	2201      	movs	r2, #1
 8004982:	401a      	ands	r2, r3
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	409a      	lsls	r2, r3
 8004988:	0013      	movs	r3, r2
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2203      	movs	r2, #3
 800499c:	4013      	ands	r3, r2
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d017      	beq.n	80049d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	2203      	movs	r2, #3
 80049ae:	409a      	lsls	r2, r3
 80049b0:	0013      	movs	r3, r2
 80049b2:	43da      	mvns	r2, r3
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4013      	ands	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	409a      	lsls	r2, r3
 80049c4:	0013      	movs	r3, r2
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2203      	movs	r2, #3
 80049d8:	4013      	ands	r3, r2
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d123      	bne.n	8004a26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	08da      	lsrs	r2, r3, #3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3208      	adds	r2, #8
 80049e6:	0092      	lsls	r2, r2, #2
 80049e8:	58d3      	ldr	r3, [r2, r3]
 80049ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2207      	movs	r2, #7
 80049f0:	4013      	ands	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	220f      	movs	r2, #15
 80049f6:	409a      	lsls	r2, r3
 80049f8:	0013      	movs	r3, r2
 80049fa:	43da      	mvns	r2, r3
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4013      	ands	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2107      	movs	r1, #7
 8004a0a:	400b      	ands	r3, r1
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	0013      	movs	r3, r2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	08da      	lsrs	r2, r3, #3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3208      	adds	r2, #8
 8004a20:	0092      	lsls	r2, r2, #2
 8004a22:	6939      	ldr	r1, [r7, #16]
 8004a24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	2203      	movs	r2, #3
 8004a32:	409a      	lsls	r2, r3
 8004a34:	0013      	movs	r3, r2
 8004a36:	43da      	mvns	r2, r3
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2203      	movs	r2, #3
 8004a44:	401a      	ands	r2, r3
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	0013      	movs	r3, r2
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	23c0      	movs	r3, #192	@ 0xc0
 8004a60:	029b      	lsls	r3, r3, #10
 8004a62:	4013      	ands	r3, r2
 8004a64:	d100      	bne.n	8004a68 <HAL_GPIO_Init+0x174>
 8004a66:	e092      	b.n	8004b8e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004a68:	4a50      	ldr	r2, [pc, #320]	@ (8004bac <HAL_GPIO_Init+0x2b8>)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	089b      	lsrs	r3, r3, #2
 8004a6e:	3318      	adds	r3, #24
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	589b      	ldr	r3, [r3, r2]
 8004a74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2203      	movs	r2, #3
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	220f      	movs	r2, #15
 8004a80:	409a      	lsls	r2, r3
 8004a82:	0013      	movs	r3, r2
 8004a84:	43da      	mvns	r2, r3
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	23a0      	movs	r3, #160	@ 0xa0
 8004a90:	05db      	lsls	r3, r3, #23
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d013      	beq.n	8004abe <HAL_GPIO_Init+0x1ca>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a45      	ldr	r2, [pc, #276]	@ (8004bb0 <HAL_GPIO_Init+0x2bc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00d      	beq.n	8004aba <HAL_GPIO_Init+0x1c6>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a44      	ldr	r2, [pc, #272]	@ (8004bb4 <HAL_GPIO_Init+0x2c0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d007      	beq.n	8004ab6 <HAL_GPIO_Init+0x1c2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a43      	ldr	r2, [pc, #268]	@ (8004bb8 <HAL_GPIO_Init+0x2c4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d101      	bne.n	8004ab2 <HAL_GPIO_Init+0x1be>
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e006      	b.n	8004ac0 <HAL_GPIO_Init+0x1cc>
 8004ab2:	2305      	movs	r3, #5
 8004ab4:	e004      	b.n	8004ac0 <HAL_GPIO_Init+0x1cc>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e002      	b.n	8004ac0 <HAL_GPIO_Init+0x1cc>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <HAL_GPIO_Init+0x1cc>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	2103      	movs	r1, #3
 8004ac4:	400a      	ands	r2, r1
 8004ac6:	00d2      	lsls	r2, r2, #3
 8004ac8:	4093      	lsls	r3, r2
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004ad0:	4936      	ldr	r1, [pc, #216]	@ (8004bac <HAL_GPIO_Init+0x2b8>)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	089b      	lsrs	r3, r3, #2
 8004ad6:	3318      	adds	r3, #24
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ade:	4b33      	ldr	r3, [pc, #204]	@ (8004bac <HAL_GPIO_Init+0x2b8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	43da      	mvns	r2, r3
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4013      	ands	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	2380      	movs	r3, #128	@ 0x80
 8004af4:	035b      	lsls	r3, r3, #13
 8004af6:	4013      	ands	r3, r2
 8004af8:	d003      	beq.n	8004b02 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b02:	4b2a      	ldr	r3, [pc, #168]	@ (8004bac <HAL_GPIO_Init+0x2b8>)
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004b08:	4b28      	ldr	r3, [pc, #160]	@ (8004bac <HAL_GPIO_Init+0x2b8>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	43da      	mvns	r2, r3
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	4013      	ands	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	2380      	movs	r3, #128	@ 0x80
 8004b1e:	039b      	lsls	r3, r3, #14
 8004b20:	4013      	ands	r3, r2
 8004b22:	d003      	beq.n	8004b2c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004bac <HAL_GPIO_Init+0x2b8>)
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004b32:	4a1e      	ldr	r2, [pc, #120]	@ (8004bac <HAL_GPIO_Init+0x2b8>)
 8004b34:	2384      	movs	r3, #132	@ 0x84
 8004b36:	58d3      	ldr	r3, [r2, r3]
 8004b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	43da      	mvns	r2, r3
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4013      	ands	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	2380      	movs	r3, #128	@ 0x80
 8004b4a:	029b      	lsls	r3, r3, #10
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b58:	4914      	ldr	r1, [pc, #80]	@ (8004bac <HAL_GPIO_Init+0x2b8>)
 8004b5a:	2284      	movs	r2, #132	@ 0x84
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004b60:	4a12      	ldr	r2, [pc, #72]	@ (8004bac <HAL_GPIO_Init+0x2b8>)
 8004b62:	2380      	movs	r3, #128	@ 0x80
 8004b64:	58d3      	ldr	r3, [r2, r3]
 8004b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	2380      	movs	r3, #128	@ 0x80
 8004b78:	025b      	lsls	r3, r3, #9
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d003      	beq.n	8004b86 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b86:	4909      	ldr	r1, [pc, #36]	@ (8004bac <HAL_GPIO_Init+0x2b8>)
 8004b88:	2280      	movs	r2, #128	@ 0x80
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	3301      	adds	r3, #1
 8004b92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	40da      	lsrs	r2, r3
 8004b9c:	1e13      	subs	r3, r2, #0
 8004b9e:	d000      	beq.n	8004ba2 <HAL_GPIO_Init+0x2ae>
 8004ba0:	e6b0      	b.n	8004904 <HAL_GPIO_Init+0x10>
  }
}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	46c0      	nop			@ (mov r8, r8)
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b006      	add	sp, #24
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40021800 	.word	0x40021800
 8004bb0:	50000400 	.word	0x50000400
 8004bb4:	50000800 	.word	0x50000800
 8004bb8:	50000c00 	.word	0x50000c00

08004bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	0008      	movs	r0, r1
 8004bc6:	0011      	movs	r1, r2
 8004bc8:	1cbb      	adds	r3, r7, #2
 8004bca:	1c02      	adds	r2, r0, #0
 8004bcc:	801a      	strh	r2, [r3, #0]
 8004bce:	1c7b      	adds	r3, r7, #1
 8004bd0:	1c0a      	adds	r2, r1, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bd4:	1c7b      	adds	r3, r7, #1
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d004      	beq.n	8004be6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bdc:	1cbb      	adds	r3, r7, #2
 8004bde:	881a      	ldrh	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004be4:	e003      	b.n	8004bee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004be6:	1cbb      	adds	r3, r7, #2
 8004be8:	881a      	ldrh	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b002      	add	sp, #8
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	000a      	movs	r2, r1
 8004c00:	1cbb      	adds	r3, r7, #2
 8004c02:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c0a:	1cbb      	adds	r3, r7, #2
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4013      	ands	r3, r2
 8004c12:	041a      	lsls	r2, r3, #16
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	43db      	mvns	r3, r3
 8004c18:	1cb9      	adds	r1, r7, #2
 8004c1a:	8809      	ldrh	r1, [r1, #0]
 8004c1c:	400b      	ands	r3, r1
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	619a      	str	r2, [r3, #24]
}
 8004c24:	46c0      	nop			@ (mov r8, r8)
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b004      	add	sp, #16
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	0002      	movs	r2, r0
 8004c34:	1dbb      	adds	r3, r7, #6
 8004c36:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004c38:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	1dba      	adds	r2, r7, #6
 8004c3e:	8812      	ldrh	r2, [r2, #0]
 8004c40:	4013      	ands	r3, r2
 8004c42:	d008      	beq.n	8004c56 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004c44:	4b0d      	ldr	r3, [pc, #52]	@ (8004c7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c46:	1dba      	adds	r2, r7, #6
 8004c48:	8812      	ldrh	r2, [r2, #0]
 8004c4a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004c4c:	1dbb      	adds	r3, r7, #6
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	0018      	movs	r0, r3
 8004c52:	f7fd fd73 	bl	800273c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004c56:	4b09      	ldr	r3, [pc, #36]	@ (8004c7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	1dba      	adds	r2, r7, #6
 8004c5c:	8812      	ldrh	r2, [r2, #0]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d008      	beq.n	8004c74 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004c62:	4b06      	ldr	r3, [pc, #24]	@ (8004c7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c64:	1dba      	adds	r2, r7, #6
 8004c66:	8812      	ldrh	r2, [r2, #0]
 8004c68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004c6a:	1dbb      	adds	r3, r7, #6
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f7fd fd76 	bl	8002760 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004c74:	46c0      	nop			@ (mov r8, r8)
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b002      	add	sp, #8
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40021800 	.word	0x40021800

08004c80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004c88:	4b19      	ldr	r3, [pc, #100]	@ (8004cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a19      	ldr	r2, [pc, #100]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	0019      	movs	r1, r3
 8004c92:	4b17      	ldr	r3, [pc, #92]	@ (8004cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	2380      	movs	r3, #128	@ 0x80
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d11f      	bne.n	8004ce4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004ca4:	4b14      	ldr	r3, [pc, #80]	@ (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	0013      	movs	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	189b      	adds	r3, r3, r2
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4912      	ldr	r1, [pc, #72]	@ (8004cfc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f7fb fa26 	bl	8000104 <__udivsi3>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	3301      	adds	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cbe:	e008      	b.n	8004cd2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	e001      	b.n	8004cd2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e009      	b.n	8004ce6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cd2:	4b07      	ldr	r3, [pc, #28]	@ (8004cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004cd4:	695a      	ldr	r2, [r3, #20]
 8004cd6:	2380      	movs	r3, #128	@ 0x80
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	401a      	ands	r2, r3
 8004cdc:	2380      	movs	r3, #128	@ 0x80
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d0ed      	beq.n	8004cc0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	b004      	add	sp, #16
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	40007000 	.word	0x40007000
 8004cf4:	fffff9ff 	.word	0xfffff9ff
 8004cf8:	20000000 	.word	0x20000000
 8004cfc:	000f4240 	.word	0x000f4240

08004d00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e2fe      	b.n	8005310 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2201      	movs	r2, #1
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d100      	bne.n	8004d1e <HAL_RCC_OscConfig+0x1e>
 8004d1c:	e07c      	b.n	8004e18 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d1e:	4bc3      	ldr	r3, [pc, #780]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2238      	movs	r2, #56	@ 0x38
 8004d24:	4013      	ands	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d28:	4bc0      	ldr	r3, [pc, #768]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	4013      	ands	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b10      	cmp	r3, #16
 8004d36:	d102      	bne.n	8004d3e <HAL_RCC_OscConfig+0x3e>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d002      	beq.n	8004d44 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d10b      	bne.n	8004d5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d44:	4bb9      	ldr	r3, [pc, #740]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	2380      	movs	r3, #128	@ 0x80
 8004d4a:	029b      	lsls	r3, r3, #10
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d062      	beq.n	8004e16 <HAL_RCC_OscConfig+0x116>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d15e      	bne.n	8004e16 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e2d9      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	2380      	movs	r3, #128	@ 0x80
 8004d62:	025b      	lsls	r3, r3, #9
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_OscConfig+0x78>
 8004d68:	4bb0      	ldr	r3, [pc, #704]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4baf      	ldr	r3, [pc, #700]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004d6e:	2180      	movs	r1, #128	@ 0x80
 8004d70:	0249      	lsls	r1, r1, #9
 8004d72:	430a      	orrs	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	e020      	b.n	8004dba <HAL_RCC_OscConfig+0xba>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	23a0      	movs	r3, #160	@ 0xa0
 8004d7e:	02db      	lsls	r3, r3, #11
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d10e      	bne.n	8004da2 <HAL_RCC_OscConfig+0xa2>
 8004d84:	4ba9      	ldr	r3, [pc, #676]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4ba8      	ldr	r3, [pc, #672]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004d8a:	2180      	movs	r1, #128	@ 0x80
 8004d8c:	02c9      	lsls	r1, r1, #11
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	4ba6      	ldr	r3, [pc, #664]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4ba5      	ldr	r3, [pc, #660]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004d98:	2180      	movs	r1, #128	@ 0x80
 8004d9a:	0249      	lsls	r1, r1, #9
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e00b      	b.n	8004dba <HAL_RCC_OscConfig+0xba>
 8004da2:	4ba2      	ldr	r3, [pc, #648]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4ba1      	ldr	r3, [pc, #644]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004da8:	49a1      	ldr	r1, [pc, #644]	@ (8005030 <HAL_RCC_OscConfig+0x330>)
 8004daa:	400a      	ands	r2, r1
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	4b9f      	ldr	r3, [pc, #636]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b9e      	ldr	r3, [pc, #632]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004db4:	499f      	ldr	r1, [pc, #636]	@ (8005034 <HAL_RCC_OscConfig+0x334>)
 8004db6:	400a      	ands	r2, r1
 8004db8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d014      	beq.n	8004dec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc2:	f7fe fa09 	bl	80031d8 <HAL_GetTick>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dcc:	f7fe fa04 	bl	80031d8 <HAL_GetTick>
 8004dd0:	0002      	movs	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b64      	cmp	r3, #100	@ 0x64
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e298      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dde:	4b93      	ldr	r3, [pc, #588]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	2380      	movs	r3, #128	@ 0x80
 8004de4:	029b      	lsls	r3, r3, #10
 8004de6:	4013      	ands	r3, r2
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCC_OscConfig+0xcc>
 8004dea:	e015      	b.n	8004e18 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fe f9f4 	bl	80031d8 <HAL_GetTick>
 8004df0:	0003      	movs	r3, r0
 8004df2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df6:	f7fe f9ef 	bl	80031d8 <HAL_GetTick>
 8004dfa:	0002      	movs	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b64      	cmp	r3, #100	@ 0x64
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e283      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e08:	4b88      	ldr	r3, [pc, #544]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	2380      	movs	r3, #128	@ 0x80
 8004e0e:	029b      	lsls	r3, r3, #10
 8004e10:	4013      	ands	r3, r2
 8004e12:	d1f0      	bne.n	8004df6 <HAL_RCC_OscConfig+0xf6>
 8004e14:	e000      	b.n	8004e18 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e16:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d100      	bne.n	8004e24 <HAL_RCC_OscConfig+0x124>
 8004e22:	e099      	b.n	8004f58 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e24:	4b81      	ldr	r3, [pc, #516]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2238      	movs	r2, #56	@ 0x38
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	2203      	movs	r2, #3
 8004e34:	4013      	ands	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b10      	cmp	r3, #16
 8004e3c:	d102      	bne.n	8004e44 <HAL_RCC_OscConfig+0x144>
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d002      	beq.n	8004e4a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d135      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e4a:	4b78      	ldr	r3, [pc, #480]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	2380      	movs	r3, #128	@ 0x80
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4013      	ands	r3, r2
 8004e54:	d005      	beq.n	8004e62 <HAL_RCC_OscConfig+0x162>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e256      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e62:	4b72      	ldr	r3, [pc, #456]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	4a74      	ldr	r2, [pc, #464]	@ (8005038 <HAL_RCC_OscConfig+0x338>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	0019      	movs	r1, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	021a      	lsls	r2, r3, #8
 8004e72:	4b6e      	ldr	r3, [pc, #440]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004e74:	430a      	orrs	r2, r1
 8004e76:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d112      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004e7e:	4b6b      	ldr	r3, [pc, #428]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a6e      	ldr	r2, [pc, #440]	@ (800503c <HAL_RCC_OscConfig+0x33c>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	0019      	movs	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	4b67      	ldr	r3, [pc, #412]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004e92:	4b66      	ldr	r3, [pc, #408]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	0adb      	lsrs	r3, r3, #11
 8004e98:	2207      	movs	r2, #7
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	4a68      	ldr	r2, [pc, #416]	@ (8005040 <HAL_RCC_OscConfig+0x340>)
 8004e9e:	40da      	lsrs	r2, r3
 8004ea0:	4b68      	ldr	r3, [pc, #416]	@ (8005044 <HAL_RCC_OscConfig+0x344>)
 8004ea2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ea4:	4b68      	ldr	r3, [pc, #416]	@ (8005048 <HAL_RCC_OscConfig+0x348>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f7fe f939 	bl	8003120 <HAL_InitTick>
 8004eae:	1e03      	subs	r3, r0, #0
 8004eb0:	d051      	beq.n	8004f56 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e22c      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d030      	beq.n	8004f20 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a5e      	ldr	r2, [pc, #376]	@ (800503c <HAL_RCC_OscConfig+0x33c>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	4b57      	ldr	r3, [pc, #348]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004ed2:	4b56      	ldr	r3, [pc, #344]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	4b55      	ldr	r3, [pc, #340]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004ed8:	2180      	movs	r1, #128	@ 0x80
 8004eda:	0049      	lsls	r1, r1, #1
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fe f97a 	bl	80031d8 <HAL_GetTick>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eea:	f7fe f975 	bl	80031d8 <HAL_GetTick>
 8004eee:	0002      	movs	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e209      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004efc:	4b4b      	ldr	r3, [pc, #300]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	2380      	movs	r3, #128	@ 0x80
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4013      	ands	r3, r2
 8004f06:	d0f0      	beq.n	8004eea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f08:	4b48      	ldr	r3, [pc, #288]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4a4a      	ldr	r2, [pc, #296]	@ (8005038 <HAL_RCC_OscConfig+0x338>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	0019      	movs	r1, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	021a      	lsls	r2, r3, #8
 8004f18:	4b44      	ldr	r3, [pc, #272]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
 8004f1e:	e01b      	b.n	8004f58 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004f20:	4b42      	ldr	r3, [pc, #264]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	4b41      	ldr	r3, [pc, #260]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004f26:	4949      	ldr	r1, [pc, #292]	@ (800504c <HAL_RCC_OscConfig+0x34c>)
 8004f28:	400a      	ands	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fe f954 	bl	80031d8 <HAL_GetTick>
 8004f30:	0003      	movs	r3, r0
 8004f32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f36:	f7fe f94f 	bl	80031d8 <HAL_GetTick>
 8004f3a:	0002      	movs	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e1e3      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f48:	4b38      	ldr	r3, [pc, #224]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	2380      	movs	r3, #128	@ 0x80
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4013      	ands	r3, r2
 8004f52:	d1f0      	bne.n	8004f36 <HAL_RCC_OscConfig+0x236>
 8004f54:	e000      	b.n	8004f58 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f56:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d047      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004f62:	4b32      	ldr	r3, [pc, #200]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2238      	movs	r2, #56	@ 0x38
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b18      	cmp	r3, #24
 8004f6c:	d10a      	bne.n	8004f84 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f72:	2202      	movs	r2, #2
 8004f74:	4013      	ands	r3, r2
 8004f76:	d03c      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x2f2>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d138      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e1c5      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d019      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004f8c:	4b27      	ldr	r3, [pc, #156]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004f8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f90:	4b26      	ldr	r3, [pc, #152]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004f92:	2101      	movs	r1, #1
 8004f94:	430a      	orrs	r2, r1
 8004f96:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7fe f91e 	bl	80031d8 <HAL_GetTick>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa2:	f7fe f919 	bl	80031d8 <HAL_GetTick>
 8004fa6:	0002      	movs	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e1ad      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb8:	2202      	movs	r2, #2
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d0f1      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x2a2>
 8004fbe:	e018      	b.n	8004ff2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004fc2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004fc4:	4b19      	ldr	r3, [pc, #100]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	438a      	bics	r2, r1
 8004fca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fe f904 	bl	80031d8 <HAL_GetTick>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fd6:	f7fe f8ff 	bl	80031d8 <HAL_GetTick>
 8004fda:	0002      	movs	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e193      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fe8:	4b10      	ldr	r3, [pc, #64]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8004fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fec:	2202      	movs	r2, #2
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d1f1      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2204      	movs	r2, #4
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d100      	bne.n	8004ffe <HAL_RCC_OscConfig+0x2fe>
 8004ffc:	e0c6      	b.n	800518c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ffe:	231f      	movs	r3, #31
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	2200      	movs	r2, #0
 8005004:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005006:	4b09      	ldr	r3, [pc, #36]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2238      	movs	r2, #56	@ 0x38
 800500c:	4013      	ands	r3, r2
 800500e:	2b20      	cmp	r3, #32
 8005010:	d11e      	bne.n	8005050 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005012:	4b06      	ldr	r3, [pc, #24]	@ (800502c <HAL_RCC_OscConfig+0x32c>)
 8005014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005016:	2202      	movs	r2, #2
 8005018:	4013      	ands	r3, r2
 800501a:	d100      	bne.n	800501e <HAL_RCC_OscConfig+0x31e>
 800501c:	e0b6      	b.n	800518c <HAL_RCC_OscConfig+0x48c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d000      	beq.n	8005028 <HAL_RCC_OscConfig+0x328>
 8005026:	e0b1      	b.n	800518c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e171      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
 800502c:	40021000 	.word	0x40021000
 8005030:	fffeffff 	.word	0xfffeffff
 8005034:	fffbffff 	.word	0xfffbffff
 8005038:	ffff80ff 	.word	0xffff80ff
 800503c:	ffffc7ff 	.word	0xffffc7ff
 8005040:	00f42400 	.word	0x00f42400
 8005044:	20000000 	.word	0x20000000
 8005048:	20000004 	.word	0x20000004
 800504c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005050:	4bb1      	ldr	r3, [pc, #708]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005052:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005054:	2380      	movs	r3, #128	@ 0x80
 8005056:	055b      	lsls	r3, r3, #21
 8005058:	4013      	ands	r3, r2
 800505a:	d101      	bne.n	8005060 <HAL_RCC_OscConfig+0x360>
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <HAL_RCC_OscConfig+0x362>
 8005060:	2300      	movs	r3, #0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d011      	beq.n	800508a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005066:	4bac      	ldr	r3, [pc, #688]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005068:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800506a:	4bab      	ldr	r3, [pc, #684]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 800506c:	2180      	movs	r1, #128	@ 0x80
 800506e:	0549      	lsls	r1, r1, #21
 8005070:	430a      	orrs	r2, r1
 8005072:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005074:	4ba8      	ldr	r3, [pc, #672]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005076:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005078:	2380      	movs	r3, #128	@ 0x80
 800507a:	055b      	lsls	r3, r3, #21
 800507c:	4013      	ands	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005082:	231f      	movs	r3, #31
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	2201      	movs	r2, #1
 8005088:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800508a:	4ba4      	ldr	r3, [pc, #656]	@ (800531c <HAL_RCC_OscConfig+0x61c>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	2380      	movs	r3, #128	@ 0x80
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	4013      	ands	r3, r2
 8005094:	d11a      	bne.n	80050cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005096:	4ba1      	ldr	r3, [pc, #644]	@ (800531c <HAL_RCC_OscConfig+0x61c>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4ba0      	ldr	r3, [pc, #640]	@ (800531c <HAL_RCC_OscConfig+0x61c>)
 800509c:	2180      	movs	r1, #128	@ 0x80
 800509e:	0049      	lsls	r1, r1, #1
 80050a0:	430a      	orrs	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80050a4:	f7fe f898 	bl	80031d8 <HAL_GetTick>
 80050a8:	0003      	movs	r3, r0
 80050aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ae:	f7fe f893 	bl	80031d8 <HAL_GetTick>
 80050b2:	0002      	movs	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e127      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c0:	4b96      	ldr	r3, [pc, #600]	@ (800531c <HAL_RCC_OscConfig+0x61c>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	2380      	movs	r3, #128	@ 0x80
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	4013      	ands	r3, r2
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d106      	bne.n	80050e2 <HAL_RCC_OscConfig+0x3e2>
 80050d4:	4b90      	ldr	r3, [pc, #576]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 80050d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80050d8:	4b8f      	ldr	r3, [pc, #572]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 80050da:	2101      	movs	r1, #1
 80050dc:	430a      	orrs	r2, r1
 80050de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80050e0:	e01c      	b.n	800511c <HAL_RCC_OscConfig+0x41c>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b05      	cmp	r3, #5
 80050e8:	d10c      	bne.n	8005104 <HAL_RCC_OscConfig+0x404>
 80050ea:	4b8b      	ldr	r3, [pc, #556]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 80050ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80050ee:	4b8a      	ldr	r3, [pc, #552]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 80050f0:	2104      	movs	r1, #4
 80050f2:	430a      	orrs	r2, r1
 80050f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80050f6:	4b88      	ldr	r3, [pc, #544]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 80050f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80050fa:	4b87      	ldr	r3, [pc, #540]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 80050fc:	2101      	movs	r1, #1
 80050fe:	430a      	orrs	r2, r1
 8005100:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005102:	e00b      	b.n	800511c <HAL_RCC_OscConfig+0x41c>
 8005104:	4b84      	ldr	r3, [pc, #528]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005106:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005108:	4b83      	ldr	r3, [pc, #524]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 800510a:	2101      	movs	r1, #1
 800510c:	438a      	bics	r2, r1
 800510e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005110:	4b81      	ldr	r3, [pc, #516]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005112:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005114:	4b80      	ldr	r3, [pc, #512]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005116:	2104      	movs	r1, #4
 8005118:	438a      	bics	r2, r1
 800511a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d014      	beq.n	800514e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005124:	f7fe f858 	bl	80031d8 <HAL_GetTick>
 8005128:	0003      	movs	r3, r0
 800512a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800512c:	e009      	b.n	8005142 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512e:	f7fe f853 	bl	80031d8 <HAL_GetTick>
 8005132:	0002      	movs	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	4a79      	ldr	r2, [pc, #484]	@ (8005320 <HAL_RCC_OscConfig+0x620>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e0e6      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005142:	4b75      	ldr	r3, [pc, #468]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005146:	2202      	movs	r2, #2
 8005148:	4013      	ands	r3, r2
 800514a:	d0f0      	beq.n	800512e <HAL_RCC_OscConfig+0x42e>
 800514c:	e013      	b.n	8005176 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7fe f843 	bl	80031d8 <HAL_GetTick>
 8005152:	0003      	movs	r3, r0
 8005154:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005156:	e009      	b.n	800516c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005158:	f7fe f83e 	bl	80031d8 <HAL_GetTick>
 800515c:	0002      	movs	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	4a6f      	ldr	r2, [pc, #444]	@ (8005320 <HAL_RCC_OscConfig+0x620>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e0d1      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800516c:	4b6a      	ldr	r3, [pc, #424]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 800516e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005170:	2202      	movs	r2, #2
 8005172:	4013      	ands	r3, r2
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005176:	231f      	movs	r3, #31
 8005178:	18fb      	adds	r3, r7, r3
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d105      	bne.n	800518c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005180:	4b65      	ldr	r3, [pc, #404]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005184:	4b64      	ldr	r3, [pc, #400]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005186:	4967      	ldr	r1, [pc, #412]	@ (8005324 <HAL_RCC_OscConfig+0x624>)
 8005188:	400a      	ands	r2, r1
 800518a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d100      	bne.n	8005196 <HAL_RCC_OscConfig+0x496>
 8005194:	e0bb      	b.n	800530e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005196:	4b60      	ldr	r3, [pc, #384]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2238      	movs	r2, #56	@ 0x38
 800519c:	4013      	ands	r3, r2
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d100      	bne.n	80051a4 <HAL_RCC_OscConfig+0x4a4>
 80051a2:	e07b      	b.n	800529c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d156      	bne.n	800525a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4b59      	ldr	r3, [pc, #356]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 80051b2:	495d      	ldr	r1, [pc, #372]	@ (8005328 <HAL_RCC_OscConfig+0x628>)
 80051b4:	400a      	ands	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fe f80e 	bl	80031d8 <HAL_GetTick>
 80051bc:	0003      	movs	r3, r0
 80051be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c2:	f7fe f809 	bl	80031d8 <HAL_GetTick>
 80051c6:	0002      	movs	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e09d      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051d4:	4b50      	ldr	r3, [pc, #320]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	2380      	movs	r3, #128	@ 0x80
 80051da:	049b      	lsls	r3, r3, #18
 80051dc:	4013      	ands	r3, r2
 80051de:	d1f0      	bne.n	80051c2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051e0:	4b4d      	ldr	r3, [pc, #308]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a51      	ldr	r2, [pc, #324]	@ (800532c <HAL_RCC_OscConfig+0x62c>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	0019      	movs	r1, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1a      	ldr	r2, [r3, #32]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800520c:	431a      	orrs	r2, r3
 800520e:	4b42      	ldr	r3, [pc, #264]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005210:	430a      	orrs	r2, r1
 8005212:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005214:	4b40      	ldr	r3, [pc, #256]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b3f      	ldr	r3, [pc, #252]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 800521a:	2180      	movs	r1, #128	@ 0x80
 800521c:	0449      	lsls	r1, r1, #17
 800521e:	430a      	orrs	r2, r1
 8005220:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005222:	4b3d      	ldr	r3, [pc, #244]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	4b3c      	ldr	r3, [pc, #240]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005228:	2180      	movs	r1, #128	@ 0x80
 800522a:	0549      	lsls	r1, r1, #21
 800522c:	430a      	orrs	r2, r1
 800522e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fd ffd2 	bl	80031d8 <HAL_GetTick>
 8005234:	0003      	movs	r3, r0
 8005236:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800523a:	f7fd ffcd 	bl	80031d8 <HAL_GetTick>
 800523e:	0002      	movs	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e061      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800524c:	4b32      	ldr	r3, [pc, #200]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	2380      	movs	r3, #128	@ 0x80
 8005252:	049b      	lsls	r3, r3, #18
 8005254:	4013      	ands	r3, r2
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x53a>
 8005258:	e059      	b.n	800530e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	4b2f      	ldr	r3, [pc, #188]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	4b2e      	ldr	r3, [pc, #184]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005260:	4931      	ldr	r1, [pc, #196]	@ (8005328 <HAL_RCC_OscConfig+0x628>)
 8005262:	400a      	ands	r2, r1
 8005264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005266:	f7fd ffb7 	bl	80031d8 <HAL_GetTick>
 800526a:	0003      	movs	r3, r0
 800526c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005270:	f7fd ffb2 	bl	80031d8 <HAL_GetTick>
 8005274:	0002      	movs	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e046      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005282:	4b25      	ldr	r3, [pc, #148]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	2380      	movs	r3, #128	@ 0x80
 8005288:	049b      	lsls	r3, r3, #18
 800528a:	4013      	ands	r3, r2
 800528c:	d1f0      	bne.n	8005270 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800528e:	4b22      	ldr	r3, [pc, #136]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	4b21      	ldr	r3, [pc, #132]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005294:	4926      	ldr	r1, [pc, #152]	@ (8005330 <HAL_RCC_OscConfig+0x630>)
 8005296:	400a      	ands	r2, r1
 8005298:	60da      	str	r2, [r3, #12]
 800529a:	e038      	b.n	800530e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e033      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80052a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2203      	movs	r2, #3
 80052b2:	401a      	ands	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d126      	bne.n	800530a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2270      	movs	r2, #112	@ 0x70
 80052c0:	401a      	ands	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d11f      	bne.n	800530a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	23fe      	movs	r3, #254	@ 0xfe
 80052ce:	01db      	lsls	r3, r3, #7
 80052d0:	401a      	ands	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052d8:	429a      	cmp	r2, r3
 80052da:	d116      	bne.n	800530a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	23f8      	movs	r3, #248	@ 0xf8
 80052e0:	039b      	lsls	r3, r3, #14
 80052e2:	401a      	ands	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d10e      	bne.n	800530a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	23e0      	movs	r3, #224	@ 0xe0
 80052f0:	051b      	lsls	r3, r3, #20
 80052f2:	401a      	ands	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d106      	bne.n	800530a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	0f5b      	lsrs	r3, r3, #29
 8005300:	075a      	lsls	r2, r3, #29
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005306:	429a      	cmp	r2, r3
 8005308:	d001      	beq.n	800530e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	0018      	movs	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	b008      	add	sp, #32
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40021000 	.word	0x40021000
 800531c:	40007000 	.word	0x40007000
 8005320:	00001388 	.word	0x00001388
 8005324:	efffffff 	.word	0xefffffff
 8005328:	feffffff 	.word	0xfeffffff
 800532c:	11c1808c 	.word	0x11c1808c
 8005330:	eefefffc 	.word	0xeefefffc

08005334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0e9      	b.n	800551c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005348:	4b76      	ldr	r3, [pc, #472]	@ (8005524 <HAL_RCC_ClockConfig+0x1f0>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2207      	movs	r2, #7
 800534e:	4013      	ands	r3, r2
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d91e      	bls.n	8005394 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005356:	4b73      	ldr	r3, [pc, #460]	@ (8005524 <HAL_RCC_ClockConfig+0x1f0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2207      	movs	r2, #7
 800535c:	4393      	bics	r3, r2
 800535e:	0019      	movs	r1, r3
 8005360:	4b70      	ldr	r3, [pc, #448]	@ (8005524 <HAL_RCC_ClockConfig+0x1f0>)
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005368:	f7fd ff36 	bl	80031d8 <HAL_GetTick>
 800536c:	0003      	movs	r3, r0
 800536e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005370:	e009      	b.n	8005386 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005372:	f7fd ff31 	bl	80031d8 <HAL_GetTick>
 8005376:	0002      	movs	r2, r0
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	4a6a      	ldr	r2, [pc, #424]	@ (8005528 <HAL_RCC_ClockConfig+0x1f4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e0ca      	b.n	800551c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005386:	4b67      	ldr	r3, [pc, #412]	@ (8005524 <HAL_RCC_ClockConfig+0x1f0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2207      	movs	r2, #7
 800538c:	4013      	ands	r3, r2
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d1ee      	bne.n	8005372 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2202      	movs	r2, #2
 800539a:	4013      	ands	r3, r2
 800539c:	d015      	beq.n	80053ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2204      	movs	r2, #4
 80053a4:	4013      	ands	r3, r2
 80053a6:	d006      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80053a8:	4b60      	ldr	r3, [pc, #384]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	4b5f      	ldr	r3, [pc, #380]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 80053ae:	21e0      	movs	r1, #224	@ 0xe0
 80053b0:	01c9      	lsls	r1, r1, #7
 80053b2:	430a      	orrs	r2, r1
 80053b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b6:	4b5d      	ldr	r3, [pc, #372]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	4a5d      	ldr	r2, [pc, #372]	@ (8005530 <HAL_RCC_ClockConfig+0x1fc>)
 80053bc:	4013      	ands	r3, r2
 80053be:	0019      	movs	r1, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	4b59      	ldr	r3, [pc, #356]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 80053c6:	430a      	orrs	r2, r1
 80053c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2201      	movs	r2, #1
 80053d0:	4013      	ands	r3, r2
 80053d2:	d057      	beq.n	8005484 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d107      	bne.n	80053ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053dc:	4b53      	ldr	r3, [pc, #332]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	2380      	movs	r3, #128	@ 0x80
 80053e2:	029b      	lsls	r3, r3, #10
 80053e4:	4013      	ands	r3, r2
 80053e6:	d12b      	bne.n	8005440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e097      	b.n	800551c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d107      	bne.n	8005404 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053f4:	4b4d      	ldr	r3, [pc, #308]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	2380      	movs	r3, #128	@ 0x80
 80053fa:	049b      	lsls	r3, r3, #18
 80053fc:	4013      	ands	r3, r2
 80053fe:	d11f      	bne.n	8005440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e08b      	b.n	800551c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d107      	bne.n	800541c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800540c:	4b47      	ldr	r3, [pc, #284]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	2380      	movs	r3, #128	@ 0x80
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4013      	ands	r3, r2
 8005416:	d113      	bne.n	8005440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e07f      	b.n	800551c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b03      	cmp	r3, #3
 8005422:	d106      	bne.n	8005432 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005424:	4b41      	ldr	r3, [pc, #260]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 8005426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005428:	2202      	movs	r2, #2
 800542a:	4013      	ands	r3, r2
 800542c:	d108      	bne.n	8005440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e074      	b.n	800551c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005432:	4b3e      	ldr	r3, [pc, #248]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 8005434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005436:	2202      	movs	r2, #2
 8005438:	4013      	ands	r3, r2
 800543a:	d101      	bne.n	8005440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e06d      	b.n	800551c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005440:	4b3a      	ldr	r3, [pc, #232]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2207      	movs	r2, #7
 8005446:	4393      	bics	r3, r2
 8005448:	0019      	movs	r1, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	4b37      	ldr	r3, [pc, #220]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 8005450:	430a      	orrs	r2, r1
 8005452:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005454:	f7fd fec0 	bl	80031d8 <HAL_GetTick>
 8005458:	0003      	movs	r3, r0
 800545a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545c:	e009      	b.n	8005472 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800545e:	f7fd febb 	bl	80031d8 <HAL_GetTick>
 8005462:	0002      	movs	r2, r0
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	4a2f      	ldr	r2, [pc, #188]	@ (8005528 <HAL_RCC_ClockConfig+0x1f4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e054      	b.n	800551c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005472:	4b2e      	ldr	r3, [pc, #184]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2238      	movs	r2, #56	@ 0x38
 8005478:	401a      	ands	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	429a      	cmp	r2, r3
 8005482:	d1ec      	bne.n	800545e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005484:	4b27      	ldr	r3, [pc, #156]	@ (8005524 <HAL_RCC_ClockConfig+0x1f0>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2207      	movs	r2, #7
 800548a:	4013      	ands	r3, r2
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d21e      	bcs.n	80054d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005492:	4b24      	ldr	r3, [pc, #144]	@ (8005524 <HAL_RCC_ClockConfig+0x1f0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2207      	movs	r2, #7
 8005498:	4393      	bics	r3, r2
 800549a:	0019      	movs	r1, r3
 800549c:	4b21      	ldr	r3, [pc, #132]	@ (8005524 <HAL_RCC_ClockConfig+0x1f0>)
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054a4:	f7fd fe98 	bl	80031d8 <HAL_GetTick>
 80054a8:	0003      	movs	r3, r0
 80054aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054ac:	e009      	b.n	80054c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ae:	f7fd fe93 	bl	80031d8 <HAL_GetTick>
 80054b2:	0002      	movs	r2, r0
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005528 <HAL_RCC_ClockConfig+0x1f4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e02c      	b.n	800551c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054c2:	4b18      	ldr	r3, [pc, #96]	@ (8005524 <HAL_RCC_ClockConfig+0x1f0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2207      	movs	r2, #7
 80054c8:	4013      	ands	r3, r2
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d1ee      	bne.n	80054ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2204      	movs	r2, #4
 80054d6:	4013      	ands	r3, r2
 80054d8:	d009      	beq.n	80054ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80054da:	4b14      	ldr	r3, [pc, #80]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	4a15      	ldr	r2, [pc, #84]	@ (8005534 <HAL_RCC_ClockConfig+0x200>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	0019      	movs	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	4b10      	ldr	r3, [pc, #64]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 80054ea:	430a      	orrs	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80054ee:	f000 f829 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 80054f2:	0001      	movs	r1, r0
 80054f4:	4b0d      	ldr	r3, [pc, #52]	@ (800552c <HAL_RCC_ClockConfig+0x1f8>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	220f      	movs	r2, #15
 80054fc:	401a      	ands	r2, r3
 80054fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005538 <HAL_RCC_ClockConfig+0x204>)
 8005500:	0092      	lsls	r2, r2, #2
 8005502:	58d3      	ldr	r3, [r2, r3]
 8005504:	221f      	movs	r2, #31
 8005506:	4013      	ands	r3, r2
 8005508:	000a      	movs	r2, r1
 800550a:	40da      	lsrs	r2, r3
 800550c:	4b0b      	ldr	r3, [pc, #44]	@ (800553c <HAL_RCC_ClockConfig+0x208>)
 800550e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005510:	4b0b      	ldr	r3, [pc, #44]	@ (8005540 <HAL_RCC_ClockConfig+0x20c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	0018      	movs	r0, r3
 8005516:	f7fd fe03 	bl	8003120 <HAL_InitTick>
 800551a:	0003      	movs	r3, r0
}
 800551c:	0018      	movs	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	b004      	add	sp, #16
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40022000 	.word	0x40022000
 8005528:	00001388 	.word	0x00001388
 800552c:	40021000 	.word	0x40021000
 8005530:	fffff0ff 	.word	0xfffff0ff
 8005534:	ffff8fff 	.word	0xffff8fff
 8005538:	08008178 	.word	0x08008178
 800553c:	20000000 	.word	0x20000000
 8005540:	20000004 	.word	0x20000004

08005544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800554a:	4b3c      	ldr	r3, [pc, #240]	@ (800563c <HAL_RCC_GetSysClockFreq+0xf8>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	2238      	movs	r2, #56	@ 0x38
 8005550:	4013      	ands	r3, r2
 8005552:	d10f      	bne.n	8005574 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005554:	4b39      	ldr	r3, [pc, #228]	@ (800563c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	0adb      	lsrs	r3, r3, #11
 800555a:	2207      	movs	r2, #7
 800555c:	4013      	ands	r3, r2
 800555e:	2201      	movs	r2, #1
 8005560:	409a      	lsls	r2, r3
 8005562:	0013      	movs	r3, r2
 8005564:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	4835      	ldr	r0, [pc, #212]	@ (8005640 <HAL_RCC_GetSysClockFreq+0xfc>)
 800556a:	f7fa fdcb 	bl	8000104 <__udivsi3>
 800556e:	0003      	movs	r3, r0
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	e05d      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005574:	4b31      	ldr	r3, [pc, #196]	@ (800563c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2238      	movs	r2, #56	@ 0x38
 800557a:	4013      	ands	r3, r2
 800557c:	2b08      	cmp	r3, #8
 800557e:	d102      	bne.n	8005586 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005580:	4b30      	ldr	r3, [pc, #192]	@ (8005644 <HAL_RCC_GetSysClockFreq+0x100>)
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	e054      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005586:	4b2d      	ldr	r3, [pc, #180]	@ (800563c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2238      	movs	r2, #56	@ 0x38
 800558c:	4013      	ands	r3, r2
 800558e:	2b10      	cmp	r3, #16
 8005590:	d138      	bne.n	8005604 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005592:	4b2a      	ldr	r3, [pc, #168]	@ (800563c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2203      	movs	r2, #3
 8005598:	4013      	ands	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800559c:	4b27      	ldr	r3, [pc, #156]	@ (800563c <HAL_RCC_GetSysClockFreq+0xf8>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	091b      	lsrs	r3, r3, #4
 80055a2:	2207      	movs	r2, #7
 80055a4:	4013      	ands	r3, r2
 80055a6:	3301      	adds	r3, #1
 80055a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d10d      	bne.n	80055cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	4824      	ldr	r0, [pc, #144]	@ (8005644 <HAL_RCC_GetSysClockFreq+0x100>)
 80055b4:	f7fa fda6 	bl	8000104 <__udivsi3>
 80055b8:	0003      	movs	r3, r0
 80055ba:	0019      	movs	r1, r3
 80055bc:	4b1f      	ldr	r3, [pc, #124]	@ (800563c <HAL_RCC_GetSysClockFreq+0xf8>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	0a1b      	lsrs	r3, r3, #8
 80055c2:	227f      	movs	r2, #127	@ 0x7f
 80055c4:	4013      	ands	r3, r2
 80055c6:	434b      	muls	r3, r1
 80055c8:	617b      	str	r3, [r7, #20]
        break;
 80055ca:	e00d      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	481c      	ldr	r0, [pc, #112]	@ (8005640 <HAL_RCC_GetSysClockFreq+0xfc>)
 80055d0:	f7fa fd98 	bl	8000104 <__udivsi3>
 80055d4:	0003      	movs	r3, r0
 80055d6:	0019      	movs	r1, r3
 80055d8:	4b18      	ldr	r3, [pc, #96]	@ (800563c <HAL_RCC_GetSysClockFreq+0xf8>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	227f      	movs	r2, #127	@ 0x7f
 80055e0:	4013      	ands	r3, r2
 80055e2:	434b      	muls	r3, r1
 80055e4:	617b      	str	r3, [r7, #20]
        break;
 80055e6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80055e8:	4b14      	ldr	r3, [pc, #80]	@ (800563c <HAL_RCC_GetSysClockFreq+0xf8>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	0f5b      	lsrs	r3, r3, #29
 80055ee:	2207      	movs	r2, #7
 80055f0:	4013      	ands	r3, r2
 80055f2:	3301      	adds	r3, #1
 80055f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	6978      	ldr	r0, [r7, #20]
 80055fa:	f7fa fd83 	bl	8000104 <__udivsi3>
 80055fe:	0003      	movs	r3, r0
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	e015      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005604:	4b0d      	ldr	r3, [pc, #52]	@ (800563c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2238      	movs	r2, #56	@ 0x38
 800560a:	4013      	ands	r3, r2
 800560c:	2b20      	cmp	r3, #32
 800560e:	d103      	bne.n	8005618 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005610:	2380      	movs	r3, #128	@ 0x80
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	e00b      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005618:	4b08      	ldr	r3, [pc, #32]	@ (800563c <HAL_RCC_GetSysClockFreq+0xf8>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2238      	movs	r2, #56	@ 0x38
 800561e:	4013      	ands	r3, r2
 8005620:	2b18      	cmp	r3, #24
 8005622:	d103      	bne.n	800562c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005624:	23fa      	movs	r3, #250	@ 0xfa
 8005626:	01db      	lsls	r3, r3, #7
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	e001      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005630:	693b      	ldr	r3, [r7, #16]
}
 8005632:	0018      	movs	r0, r3
 8005634:	46bd      	mov	sp, r7
 8005636:	b006      	add	sp, #24
 8005638:	bd80      	pop	{r7, pc}
 800563a:	46c0      	nop			@ (mov r8, r8)
 800563c:	40021000 	.word	0x40021000
 8005640:	00f42400 	.word	0x00f42400
 8005644:	007a1200 	.word	0x007a1200

08005648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005650:	2313      	movs	r3, #19
 8005652:	18fb      	adds	r3, r7, r3
 8005654:	2200      	movs	r2, #0
 8005656:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005658:	2312      	movs	r3, #18
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	2380      	movs	r3, #128	@ 0x80
 8005666:	029b      	lsls	r3, r3, #10
 8005668:	4013      	ands	r3, r2
 800566a:	d100      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800566c:	e0a3      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800566e:	2011      	movs	r0, #17
 8005670:	183b      	adds	r3, r7, r0
 8005672:	2200      	movs	r2, #0
 8005674:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005676:	4ba5      	ldr	r3, [pc, #660]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800567a:	2380      	movs	r3, #128	@ 0x80
 800567c:	055b      	lsls	r3, r3, #21
 800567e:	4013      	ands	r3, r2
 8005680:	d110      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005682:	4ba2      	ldr	r3, [pc, #648]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005684:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005686:	4ba1      	ldr	r3, [pc, #644]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005688:	2180      	movs	r1, #128	@ 0x80
 800568a:	0549      	lsls	r1, r1, #21
 800568c:	430a      	orrs	r2, r1
 800568e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005690:	4b9e      	ldr	r3, [pc, #632]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005692:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005694:	2380      	movs	r3, #128	@ 0x80
 8005696:	055b      	lsls	r3, r3, #21
 8005698:	4013      	ands	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]
 800569c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800569e:	183b      	adds	r3, r7, r0
 80056a0:	2201      	movs	r2, #1
 80056a2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056a4:	4b9a      	ldr	r3, [pc, #616]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b99      	ldr	r3, [pc, #612]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80056aa:	2180      	movs	r1, #128	@ 0x80
 80056ac:	0049      	lsls	r1, r1, #1
 80056ae:	430a      	orrs	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056b2:	f7fd fd91 	bl	80031d8 <HAL_GetTick>
 80056b6:	0003      	movs	r3, r0
 80056b8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056ba:	e00b      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056bc:	f7fd fd8c 	bl	80031d8 <HAL_GetTick>
 80056c0:	0002      	movs	r2, r0
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d904      	bls.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80056ca:	2313      	movs	r3, #19
 80056cc:	18fb      	adds	r3, r7, r3
 80056ce:	2203      	movs	r2, #3
 80056d0:	701a      	strb	r2, [r3, #0]
        break;
 80056d2:	e005      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	2380      	movs	r3, #128	@ 0x80
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	4013      	ands	r3, r2
 80056de:	d0ed      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80056e0:	2313      	movs	r3, #19
 80056e2:	18fb      	adds	r3, r7, r3
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d154      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056ea:	4b88      	ldr	r3, [pc, #544]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80056ee:	23c0      	movs	r3, #192	@ 0xc0
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4013      	ands	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d019      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	429a      	cmp	r2, r3
 8005704:	d014      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005706:	4b81      	ldr	r3, [pc, #516]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800570a:	4a82      	ldr	r2, [pc, #520]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800570c:	4013      	ands	r3, r2
 800570e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005710:	4b7e      	ldr	r3, [pc, #504]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005712:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005714:	4b7d      	ldr	r3, [pc, #500]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005716:	2180      	movs	r1, #128	@ 0x80
 8005718:	0249      	lsls	r1, r1, #9
 800571a:	430a      	orrs	r2, r1
 800571c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800571e:	4b7b      	ldr	r3, [pc, #492]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005720:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005722:	4b7a      	ldr	r3, [pc, #488]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005724:	497c      	ldr	r1, [pc, #496]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005726:	400a      	ands	r2, r1
 8005728:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800572a:	4b78      	ldr	r3, [pc, #480]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	2201      	movs	r2, #1
 8005734:	4013      	ands	r3, r2
 8005736:	d016      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005738:	f7fd fd4e 	bl	80031d8 <HAL_GetTick>
 800573c:	0003      	movs	r3, r0
 800573e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005740:	e00c      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005742:	f7fd fd49 	bl	80031d8 <HAL_GetTick>
 8005746:	0002      	movs	r2, r0
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	4a73      	ldr	r2, [pc, #460]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d904      	bls.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005752:	2313      	movs	r3, #19
 8005754:	18fb      	adds	r3, r7, r3
 8005756:	2203      	movs	r2, #3
 8005758:	701a      	strb	r2, [r3, #0]
            break;
 800575a:	e004      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800575c:	4b6b      	ldr	r3, [pc, #428]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800575e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005760:	2202      	movs	r2, #2
 8005762:	4013      	ands	r3, r2
 8005764:	d0ed      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005766:	2313      	movs	r3, #19
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10a      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005770:	4b66      	ldr	r3, [pc, #408]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005774:	4a67      	ldr	r2, [pc, #412]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005776:	4013      	ands	r3, r2
 8005778:	0019      	movs	r1, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800577e:	4b63      	ldr	r3, [pc, #396]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005780:	430a      	orrs	r2, r1
 8005782:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005784:	e00c      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005786:	2312      	movs	r3, #18
 8005788:	18fb      	adds	r3, r7, r3
 800578a:	2213      	movs	r2, #19
 800578c:	18ba      	adds	r2, r7, r2
 800578e:	7812      	ldrb	r2, [r2, #0]
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	e005      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005794:	2312      	movs	r3, #18
 8005796:	18fb      	adds	r3, r7, r3
 8005798:	2213      	movs	r2, #19
 800579a:	18ba      	adds	r2, r7, r2
 800579c:	7812      	ldrb	r2, [r2, #0]
 800579e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057a0:	2311      	movs	r3, #17
 80057a2:	18fb      	adds	r3, r7, r3
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d105      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057aa:	4b58      	ldr	r3, [pc, #352]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057ae:	4b57      	ldr	r3, [pc, #348]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057b0:	495b      	ldr	r1, [pc, #364]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80057b2:	400a      	ands	r2, r1
 80057b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2201      	movs	r2, #1
 80057bc:	4013      	ands	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057c0:	4b52      	ldr	r3, [pc, #328]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c4:	2203      	movs	r2, #3
 80057c6:	4393      	bics	r3, r2
 80057c8:	0019      	movs	r1, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	4b4f      	ldr	r3, [pc, #316]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057d0:	430a      	orrs	r2, r1
 80057d2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2210      	movs	r2, #16
 80057da:	4013      	ands	r3, r2
 80057dc:	d009      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057de:	4b4b      	ldr	r3, [pc, #300]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e2:	4a50      	ldr	r2, [pc, #320]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	0019      	movs	r1, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	4b47      	ldr	r3, [pc, #284]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057ee:	430a      	orrs	r2, r1
 80057f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	2380      	movs	r3, #128	@ 0x80
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4013      	ands	r3, r2
 80057fc:	d009      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057fe:	4b43      	ldr	r3, [pc, #268]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005802:	4a49      	ldr	r2, [pc, #292]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005804:	4013      	ands	r3, r2
 8005806:	0019      	movs	r1, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	695a      	ldr	r2, [r3, #20]
 800580c:	4b3f      	ldr	r3, [pc, #252]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800580e:	430a      	orrs	r2, r1
 8005810:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	2380      	movs	r3, #128	@ 0x80
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	4013      	ands	r3, r2
 800581c:	d009      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800581e:	4b3b      	ldr	r3, [pc, #236]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005822:	4a42      	ldr	r2, [pc, #264]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005824:	4013      	ands	r3, r2
 8005826:	0019      	movs	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699a      	ldr	r2, [r3, #24]
 800582c:	4b37      	ldr	r3, [pc, #220]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800582e:	430a      	orrs	r2, r1
 8005830:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2220      	movs	r2, #32
 8005838:	4013      	ands	r3, r2
 800583a:	d009      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800583c:	4b33      	ldr	r3, [pc, #204]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800583e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005840:	4a3b      	ldr	r2, [pc, #236]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005842:	4013      	ands	r3, r2
 8005844:	0019      	movs	r1, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	4b30      	ldr	r3, [pc, #192]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800584c:	430a      	orrs	r2, r1
 800584e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	2380      	movs	r3, #128	@ 0x80
 8005856:	01db      	lsls	r3, r3, #7
 8005858:	4013      	ands	r3, r2
 800585a:	d015      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800585c:	4b2b      	ldr	r3, [pc, #172]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800585e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	0899      	lsrs	r1, r3, #2
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	4b28      	ldr	r3, [pc, #160]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800586a:	430a      	orrs	r2, r1
 800586c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69da      	ldr	r2, [r3, #28]
 8005872:	2380      	movs	r3, #128	@ 0x80
 8005874:	05db      	lsls	r3, r3, #23
 8005876:	429a      	cmp	r2, r3
 8005878:	d106      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800587a:	4b24      	ldr	r3, [pc, #144]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	4b23      	ldr	r3, [pc, #140]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005880:	2180      	movs	r1, #128	@ 0x80
 8005882:	0249      	lsls	r1, r1, #9
 8005884:	430a      	orrs	r2, r1
 8005886:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	2380      	movs	r3, #128	@ 0x80
 800588e:	039b      	lsls	r3, r3, #14
 8005890:	4013      	ands	r3, r2
 8005892:	d016      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005894:	4b1d      	ldr	r3, [pc, #116]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005898:	4a26      	ldr	r2, [pc, #152]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800589a:	4013      	ands	r3, r2
 800589c:	0019      	movs	r1, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1a      	ldr	r2, [r3, #32]
 80058a2:	4b1a      	ldr	r3, [pc, #104]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80058a4:	430a      	orrs	r2, r1
 80058a6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1a      	ldr	r2, [r3, #32]
 80058ac:	2380      	movs	r3, #128	@ 0x80
 80058ae:	03db      	lsls	r3, r3, #15
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d106      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80058b4:	4b15      	ldr	r3, [pc, #84]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	4b14      	ldr	r3, [pc, #80]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80058ba:	2180      	movs	r1, #128	@ 0x80
 80058bc:	0449      	lsls	r1, r1, #17
 80058be:	430a      	orrs	r2, r1
 80058c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	2380      	movs	r3, #128	@ 0x80
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	4013      	ands	r3, r2
 80058cc:	d016      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80058ce:	4b0f      	ldr	r3, [pc, #60]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80058d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d2:	4a19      	ldr	r2, [pc, #100]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	0019      	movs	r1, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	4b0b      	ldr	r3, [pc, #44]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80058de:	430a      	orrs	r2, r1
 80058e0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	2380      	movs	r3, #128	@ 0x80
 80058e8:	01db      	lsls	r3, r3, #7
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d106      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80058ee:	4b07      	ldr	r3, [pc, #28]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	4b06      	ldr	r3, [pc, #24]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80058f4:	2180      	movs	r1, #128	@ 0x80
 80058f6:	0249      	lsls	r1, r1, #9
 80058f8:	430a      	orrs	r2, r1
 80058fa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80058fc:	2312      	movs	r3, #18
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	781b      	ldrb	r3, [r3, #0]
}
 8005902:	0018      	movs	r0, r3
 8005904:	46bd      	mov	sp, r7
 8005906:	b006      	add	sp, #24
 8005908:	bd80      	pop	{r7, pc}
 800590a:	46c0      	nop			@ (mov r8, r8)
 800590c:	40021000 	.word	0x40021000
 8005910:	40007000 	.word	0x40007000
 8005914:	fffffcff 	.word	0xfffffcff
 8005918:	fffeffff 	.word	0xfffeffff
 800591c:	00001388 	.word	0x00001388
 8005920:	efffffff 	.word	0xefffffff
 8005924:	fffff3ff 	.word	0xfffff3ff
 8005928:	fff3ffff 	.word	0xfff3ffff
 800592c:	ffcfffff 	.word	0xffcfffff
 8005930:	ffffcfff 	.word	0xffffcfff
 8005934:	ffbfffff 	.word	0xffbfffff
 8005938:	ffff3fff 	.word	0xffff3fff

0800593c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e0a8      	b.n	8005aa0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	2382      	movs	r3, #130	@ 0x82
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	429a      	cmp	r2, r3
 8005960:	d009      	beq.n	8005976 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	61da      	str	r2, [r3, #28]
 8005968:	e005      	b.n	8005976 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	225d      	movs	r2, #93	@ 0x5d
 8005980:	5c9b      	ldrb	r3, [r3, r2]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d107      	bne.n	8005998 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	225c      	movs	r2, #92	@ 0x5c
 800598c:	2100      	movs	r1, #0
 800598e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	0018      	movs	r0, r3
 8005994:	f7fc ffea 	bl	800296c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	225d      	movs	r2, #93	@ 0x5d
 800599c:	2102      	movs	r1, #2
 800599e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2140      	movs	r1, #64	@ 0x40
 80059ac:	438a      	bics	r2, r1
 80059ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	23e0      	movs	r3, #224	@ 0xe0
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d902      	bls.n	80059c2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	e002      	b.n	80059c8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059c2:	2380      	movs	r3, #128	@ 0x80
 80059c4:	015b      	lsls	r3, r3, #5
 80059c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	23f0      	movs	r3, #240	@ 0xf0
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d008      	beq.n	80059e6 <HAL_SPI_Init+0xaa>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	23e0      	movs	r3, #224	@ 0xe0
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	429a      	cmp	r2, r3
 80059de:	d002      	beq.n	80059e6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	2382      	movs	r3, #130	@ 0x82
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	401a      	ands	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6899      	ldr	r1, [r3, #8]
 80059f4:	2384      	movs	r3, #132	@ 0x84
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	400b      	ands	r3, r1
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2102      	movs	r1, #2
 8005a02:	400b      	ands	r3, r1
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	400b      	ands	r3, r1
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6999      	ldr	r1, [r3, #24]
 8005a14:	2380      	movs	r3, #128	@ 0x80
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	400b      	ands	r3, r1
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	2138      	movs	r1, #56	@ 0x38
 8005a22:	400b      	ands	r3, r1
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	2180      	movs	r1, #128	@ 0x80
 8005a2c:	400b      	ands	r3, r1
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	0011      	movs	r1, r2
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a36:	2380      	movs	r3, #128	@ 0x80
 8005a38:	019b      	lsls	r3, r3, #6
 8005a3a:	401a      	ands	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	401a      	ands	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	2110      	movs	r1, #16
 8005a54:	400b      	ands	r3, r1
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a5c:	2108      	movs	r1, #8
 8005a5e:	400b      	ands	r3, r1
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68d9      	ldr	r1, [r3, #12]
 8005a66:	23f0      	movs	r3, #240	@ 0xf0
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	400b      	ands	r3, r1
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	0011      	movs	r1, r2
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	2380      	movs	r3, #128	@ 0x80
 8005a74:	015b      	lsls	r3, r3, #5
 8005a76:	401a      	ands	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69da      	ldr	r2, [r3, #28]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4907      	ldr	r1, [pc, #28]	@ (8005aa8 <HAL_SPI_Init+0x16c>)
 8005a8c:	400a      	ands	r2, r1
 8005a8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	225d      	movs	r2, #93	@ 0x5d
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	b004      	add	sp, #16
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	fffff7ff 	.word	0xfffff7ff

08005aac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08a      	sub	sp, #40	@ 0x28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	001a      	movs	r2, r3
 8005aba:	1cbb      	adds	r3, r7, #2
 8005abc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ac2:	2323      	movs	r3, #35	@ 0x23
 8005ac4:	18fb      	adds	r3, r7, r3
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	225c      	movs	r2, #92	@ 0x5c
 8005ace:	5c9b      	ldrb	r3, [r3, r2]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_SPI_TransmitReceive+0x2c>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e1c4      	b.n	8005e62 <HAL_SPI_TransmitReceive+0x3b6>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	225c      	movs	r2, #92	@ 0x5c
 8005adc:	2101      	movs	r1, #1
 8005ade:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ae0:	f7fd fb7a 	bl	80031d8 <HAL_GetTick>
 8005ae4:	0003      	movs	r3, r0
 8005ae6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ae8:	201b      	movs	r0, #27
 8005aea:	183b      	adds	r3, r7, r0
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	215d      	movs	r1, #93	@ 0x5d
 8005af0:	5c52      	ldrb	r2, [r2, r1]
 8005af2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005afa:	2312      	movs	r3, #18
 8005afc:	18fb      	adds	r3, r7, r3
 8005afe:	1cba      	adds	r2, r7, #2
 8005b00:	8812      	ldrh	r2, [r2, #0]
 8005b02:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b04:	183b      	adds	r3, r7, r0
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d011      	beq.n	8005b30 <HAL_SPI_TransmitReceive+0x84>
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	2382      	movs	r3, #130	@ 0x82
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d107      	bne.n	8005b26 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d103      	bne.n	8005b26 <HAL_SPI_TransmitReceive+0x7a>
 8005b1e:	183b      	adds	r3, r7, r0
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d004      	beq.n	8005b30 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005b26:	2323      	movs	r3, #35	@ 0x23
 8005b28:	18fb      	adds	r3, r7, r3
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	701a      	strb	r2, [r3, #0]
    goto error;
 8005b2e:	e191      	b.n	8005e54 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d006      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0x98>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0x98>
 8005b3c:	1cbb      	adds	r3, r7, #2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d104      	bne.n	8005b4e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005b44:	2323      	movs	r3, #35	@ 0x23
 8005b46:	18fb      	adds	r3, r7, r3
 8005b48:	2201      	movs	r2, #1
 8005b4a:	701a      	strb	r2, [r3, #0]
    goto error;
 8005b4c:	e182      	b.n	8005e54 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	225d      	movs	r2, #93	@ 0x5d
 8005b52:	5c9b      	ldrb	r3, [r3, r2]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d003      	beq.n	8005b62 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	225d      	movs	r2, #93	@ 0x5d
 8005b5e:	2105      	movs	r1, #5
 8005b60:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1cba      	adds	r2, r7, #2
 8005b72:	2146      	movs	r1, #70	@ 0x46
 8005b74:	8812      	ldrh	r2, [r2, #0]
 8005b76:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1cba      	adds	r2, r7, #2
 8005b7c:	2144      	movs	r1, #68	@ 0x44
 8005b7e:	8812      	ldrh	r2, [r2, #0]
 8005b80:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	1cba      	adds	r2, r7, #2
 8005b8c:	8812      	ldrh	r2, [r2, #0]
 8005b8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	1cba      	adds	r2, r7, #2
 8005b94:	8812      	ldrh	r2, [r2, #0]
 8005b96:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	23e0      	movs	r3, #224	@ 0xe0
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d908      	bls.n	8005bc2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	49ac      	ldr	r1, [pc, #688]	@ (8005e6c <HAL_SPI_TransmitReceive+0x3c0>)
 8005bbc:	400a      	ands	r2, r1
 8005bbe:	605a      	str	r2, [r3, #4]
 8005bc0:	e008      	b.n	8005bd4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2180      	movs	r1, #128	@ 0x80
 8005bce:	0149      	lsls	r1, r1, #5
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2240      	movs	r2, #64	@ 0x40
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b40      	cmp	r3, #64	@ 0x40
 8005be0:	d007      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2140      	movs	r1, #64	@ 0x40
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	23e0      	movs	r3, #224	@ 0xe0
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d800      	bhi.n	8005c00 <HAL_SPI_TransmitReceive+0x154>
 8005bfe:	e083      	b.n	8005d08 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <HAL_SPI_TransmitReceive+0x168>
 8005c08:	2312      	movs	r3, #18
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d000      	beq.n	8005c14 <HAL_SPI_TransmitReceive+0x168>
 8005c12:	e06d      	b.n	8005cf0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c18:	881a      	ldrh	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c24:	1c9a      	adds	r2, r3, #2
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c38:	e05a      	b.n	8005cf0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2202      	movs	r2, #2
 8005c42:	4013      	ands	r3, r2
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d11b      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x1d4>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d016      	beq.n	8005c80 <HAL_SPI_TransmitReceive+0x1d4>
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d113      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5c:	881a      	ldrh	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c68:	1c9a      	adds	r2, r3, #2
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2201      	movs	r2, #1
 8005c88:	4013      	ands	r3, r2
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d11c      	bne.n	8005cc8 <HAL_SPI_TransmitReceive+0x21c>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2246      	movs	r2, #70	@ 0x46
 8005c92:	5a9b      	ldrh	r3, [r3, r2]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d016      	beq.n	8005cc8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca4:	b292      	uxth	r2, r2
 8005ca6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cac:	1c9a      	adds	r2, r3, #2
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2246      	movs	r2, #70	@ 0x46
 8005cb6:	5a9b      	ldrh	r3, [r3, r2]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b299      	uxth	r1, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2246      	movs	r2, #70	@ 0x46
 8005cc2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005cc8:	f7fd fa86 	bl	80031d8 <HAL_GetTick>
 8005ccc:	0002      	movs	r2, r0
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d80b      	bhi.n	8005cf0 <HAL_SPI_TransmitReceive+0x244>
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cda:	3301      	adds	r3, #1
 8005cdc:	d008      	beq.n	8005cf0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8005cde:	2323      	movs	r3, #35	@ 0x23
 8005ce0:	18fb      	adds	r3, r7, r3
 8005ce2:	2203      	movs	r2, #3
 8005ce4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	225d      	movs	r2, #93	@ 0x5d
 8005cea:	2101      	movs	r1, #1
 8005cec:	5499      	strb	r1, [r3, r2]
        goto error;
 8005cee:	e0b1      	b.n	8005e54 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d19f      	bne.n	8005c3a <HAL_SPI_TransmitReceive+0x18e>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2246      	movs	r2, #70	@ 0x46
 8005cfe:	5a9b      	ldrh	r3, [r3, r2]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d199      	bne.n	8005c3a <HAL_SPI_TransmitReceive+0x18e>
 8005d06:	e089      	b.n	8005e1c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <HAL_SPI_TransmitReceive+0x270>
 8005d10:	2312      	movs	r3, #18
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d000      	beq.n	8005d1c <HAL_SPI_TransmitReceive+0x270>
 8005d1a:	e074      	b.n	8005e06 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	330c      	adds	r3, #12
 8005d26:	7812      	ldrb	r2, [r2, #0]
 8005d28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d42:	e060      	b.n	8005e06 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d11c      	bne.n	8005d8c <HAL_SPI_TransmitReceive+0x2e0>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d017      	beq.n	8005d8c <HAL_SPI_TransmitReceive+0x2e0>
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d114      	bne.n	8005d8c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	330c      	adds	r3, #12
 8005d6c:	7812      	ldrb	r2, [r2, #0]
 8005d6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2201      	movs	r2, #1
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d11e      	bne.n	8005dd8 <HAL_SPI_TransmitReceive+0x32c>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2246      	movs	r2, #70	@ 0x46
 8005d9e:	5a9b      	ldrh	r3, [r3, r2]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d018      	beq.n	8005dd8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	330c      	adds	r3, #12
 8005dac:	001a      	movs	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	7812      	ldrb	r2, [r2, #0]
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2246      	movs	r2, #70	@ 0x46
 8005dc6:	5a9b      	ldrh	r3, [r3, r2]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b299      	uxth	r1, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2246      	movs	r2, #70	@ 0x46
 8005dd2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005dd8:	f7fd f9fe 	bl	80031d8 <HAL_GetTick>
 8005ddc:	0002      	movs	r2, r0
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d802      	bhi.n	8005dee <HAL_SPI_TransmitReceive+0x342>
 8005de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dea:	3301      	adds	r3, #1
 8005dec:	d102      	bne.n	8005df4 <HAL_SPI_TransmitReceive+0x348>
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d108      	bne.n	8005e06 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8005df4:	2323      	movs	r3, #35	@ 0x23
 8005df6:	18fb      	adds	r3, r7, r3
 8005df8:	2203      	movs	r2, #3
 8005dfa:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	225d      	movs	r2, #93	@ 0x5d
 8005e00:	2101      	movs	r1, #1
 8005e02:	5499      	strb	r1, [r3, r2]
        goto error;
 8005e04:	e026      	b.n	8005e54 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d199      	bne.n	8005d44 <HAL_SPI_TransmitReceive+0x298>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2246      	movs	r2, #70	@ 0x46
 8005e14:	5a9b      	ldrh	r3, [r3, r2]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d193      	bne.n	8005d44 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	0018      	movs	r0, r3
 8005e24:	f000 fd72 	bl	800690c <SPI_EndRxTxTransaction>
 8005e28:	1e03      	subs	r3, r0, #0
 8005e2a:	d006      	beq.n	8005e3a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8005e2c:	2323      	movs	r3, #35	@ 0x23
 8005e2e:	18fb      	adds	r3, r7, r3
 8005e30:	2201      	movs	r2, #1
 8005e32:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2220      	movs	r2, #32
 8005e38:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d004      	beq.n	8005e4c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8005e42:	2323      	movs	r3, #35	@ 0x23
 8005e44:	18fb      	adds	r3, r7, r3
 8005e46:	2201      	movs	r2, #1
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	e003      	b.n	8005e54 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	225d      	movs	r2, #93	@ 0x5d
 8005e50:	2101      	movs	r1, #1
 8005e52:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	225c      	movs	r2, #92	@ 0x5c
 8005e58:	2100      	movs	r1, #0
 8005e5a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005e5c:	2323      	movs	r3, #35	@ 0x23
 8005e5e:	18fb      	adds	r3, r7, r3
 8005e60:	781b      	ldrb	r3, [r3, #0]
}
 8005e62:	0018      	movs	r0, r3
 8005e64:	46bd      	mov	sp, r7
 8005e66:	b00a      	add	sp, #40	@ 0x28
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	46c0      	nop			@ (mov r8, r8)
 8005e6c:	ffffefff 	.word	0xffffefff

08005e70 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005e70:	b590      	push	{r4, r7, lr}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	001a      	movs	r2, r3
 8005e7e:	1cbb      	adds	r3, r7, #2
 8005e80:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e82:	2317      	movs	r3, #23
 8005e84:	18fb      	adds	r3, r7, r3
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	225c      	movs	r2, #92	@ 0x5c
 8005e8e:	5c9b      	ldrb	r3, [r3, r2]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_SPI_TransmitReceive_DMA+0x28>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e17e      	b.n	8006196 <HAL_SPI_TransmitReceive_DMA+0x326>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	225c      	movs	r2, #92	@ 0x5c
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ea0:	2016      	movs	r0, #22
 8005ea2:	183b      	adds	r3, r7, r0
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	215d      	movs	r1, #93	@ 0x5d
 8005ea8:	5c52      	ldrb	r2, [r2, r1]
 8005eaa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005eb2:	0001      	movs	r1, r0
 8005eb4:	187b      	adds	r3, r7, r1
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d011      	beq.n	8005ee0 <HAL_SPI_TransmitReceive_DMA+0x70>
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	2382      	movs	r3, #130	@ 0x82
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d107      	bne.n	8005ed6 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d103      	bne.n	8005ed6 <HAL_SPI_TransmitReceive_DMA+0x66>
 8005ece:	187b      	adds	r3, r7, r1
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d004      	beq.n	8005ee0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8005ed6:	2317      	movs	r3, #23
 8005ed8:	18fb      	adds	r3, r7, r3
 8005eda:	2202      	movs	r2, #2
 8005edc:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ede:	e153      	b.n	8006188 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d006      	beq.n	8005ef4 <HAL_SPI_TransmitReceive_DMA+0x84>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <HAL_SPI_TransmitReceive_DMA+0x84>
 8005eec:	1cbb      	adds	r3, r7, #2
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d104      	bne.n	8005efe <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8005ef4:	2317      	movs	r3, #23
 8005ef6:	18fb      	adds	r3, r7, r3
 8005ef8:	2201      	movs	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
    goto error;
 8005efc:	e144      	b.n	8006188 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	225d      	movs	r2, #93	@ 0x5d
 8005f02:	5c9b      	ldrb	r3, [r3, r2]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d003      	beq.n	8005f12 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	225d      	movs	r2, #93	@ 0x5d
 8005f0e:	2105      	movs	r1, #5
 8005f10:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1cba      	adds	r2, r7, #2
 8005f22:	8812      	ldrh	r2, [r2, #0]
 8005f24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1cba      	adds	r2, r7, #2
 8005f2a:	8812      	ldrh	r2, [r2, #0]
 8005f2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	1cba      	adds	r2, r7, #2
 8005f38:	2144      	movs	r1, #68	@ 0x44
 8005f3a:	8812      	ldrh	r2, [r2, #0]
 8005f3c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1cba      	adds	r2, r7, #2
 8005f42:	2146      	movs	r1, #70	@ 0x46
 8005f44:	8812      	ldrh	r2, [r2, #0]
 8005f46:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4990      	ldr	r1, [pc, #576]	@ (80061a0 <HAL_SPI_TransmitReceive_DMA+0x330>)
 8005f60:	400a      	ands	r2, r1
 8005f62:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	23e0      	movs	r3, #224	@ 0xe0
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d908      	bls.n	8005f82 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	498a      	ldr	r1, [pc, #552]	@ (80061a4 <HAL_SPI_TransmitReceive_DMA+0x334>)
 8005f7c:	400a      	ands	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]
 8005f80:	e074      	b.n	800606c <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2180      	movs	r1, #128	@ 0x80
 8005f8e:	0149      	lsls	r1, r1, #5
 8005f90:	430a      	orrs	r2, r1
 8005f92:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f98:	699a      	ldr	r2, [r3, #24]
 8005f9a:	2380      	movs	r3, #128	@ 0x80
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d127      	bne.n	8005ff2 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8005fa6:	001a      	movs	r2, r3
 8005fa8:	2301      	movs	r3, #1
 8005faa:	4013      	ands	r3, r2
 8005fac:	d10f      	bne.n	8005fce <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	497b      	ldr	r1, [pc, #492]	@ (80061a8 <HAL_SPI_TransmitReceive_DMA+0x338>)
 8005fba:	400a      	ands	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	085b      	lsrs	r3, r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fcc:	e011      	b.n	8005ff2 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2180      	movs	r1, #128	@ 0x80
 8005fda:	01c9      	lsls	r1, r1, #7
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	085b      	lsrs	r3, r3, #1
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3301      	adds	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff6:	699a      	ldr	r2, [r3, #24]
 8005ff8:	2380      	movs	r3, #128	@ 0x80
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d135      	bne.n	800606c <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4966      	ldr	r1, [pc, #408]	@ (80061a4 <HAL_SPI_TransmitReceive_DMA+0x334>)
 800600c:	400a      	ands	r2, r1
 800600e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2246      	movs	r2, #70	@ 0x46
 8006014:	5a9b      	ldrh	r3, [r3, r2]
 8006016:	b29b      	uxth	r3, r3
 8006018:	001a      	movs	r2, r3
 800601a:	2301      	movs	r3, #1
 800601c:	4013      	ands	r3, r2
 800601e:	d111      	bne.n	8006044 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4960      	ldr	r1, [pc, #384]	@ (80061ac <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800602c:	400a      	ands	r2, r1
 800602e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2246      	movs	r2, #70	@ 0x46
 8006034:	5a9b      	ldrh	r3, [r3, r2]
 8006036:	b29b      	uxth	r3, r3
 8006038:	085b      	lsrs	r3, r3, #1
 800603a:	b299      	uxth	r1, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2246      	movs	r2, #70	@ 0x46
 8006040:	5299      	strh	r1, [r3, r2]
 8006042:	e013      	b.n	800606c <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2180      	movs	r1, #128	@ 0x80
 8006050:	0189      	lsls	r1, r1, #6
 8006052:	430a      	orrs	r2, r1
 8006054:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2246      	movs	r2, #70	@ 0x46
 800605a:	5a9b      	ldrh	r3, [r3, r2]
 800605c:	b29b      	uxth	r3, r3
 800605e:	085b      	lsrs	r3, r3, #1
 8006060:	b29b      	uxth	r3, r3
 8006062:	3301      	adds	r3, #1
 8006064:	b299      	uxth	r1, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2246      	movs	r2, #70	@ 0x46
 800606a:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	225d      	movs	r2, #93	@ 0x5d
 8006070:	5c9b      	ldrb	r3, [r3, r2]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b04      	cmp	r3, #4
 8006076:	d108      	bne.n	800608a <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800607c:	4a4c      	ldr	r2, [pc, #304]	@ (80061b0 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800607e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006084:	4a4b      	ldr	r2, [pc, #300]	@ (80061b4 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8006086:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006088:	e007      	b.n	800609a <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608e:	4a4a      	ldr	r2, [pc, #296]	@ (80061b8 <HAL_SPI_TransmitReceive_DMA+0x348>)
 8006090:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006096:	4a49      	ldr	r2, [pc, #292]	@ (80061bc <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8006098:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800609e:	4a48      	ldr	r2, [pc, #288]	@ (80061c0 <HAL_SPI_TransmitReceive_DMA+0x350>)
 80060a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a6:	2200      	movs	r2, #0
 80060a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	0019      	movs	r1, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2246      	movs	r2, #70	@ 0x46
 80060c0:	5a9b      	ldrh	r3, [r3, r2]
 80060c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80060c4:	0022      	movs	r2, r4
 80060c6:	f7fe f9e3 	bl	8004490 <HAL_DMA_Start_IT>
 80060ca:	1e03      	subs	r3, r0, #0
 80060cc:	d00a      	beq.n	80060e4 <HAL_SPI_TransmitReceive_DMA+0x274>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060d2:	2210      	movs	r2, #16
 80060d4:	431a      	orrs	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80060da:	2317      	movs	r3, #23
 80060dc:	18fb      	adds	r3, r7, r3
 80060de:	2201      	movs	r2, #1
 80060e0:	701a      	strb	r2, [r3, #0]

    goto error;
 80060e2:	e051      	b.n	8006188 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2101      	movs	r1, #1
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006100:	2200      	movs	r2, #0
 8006102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006108:	2200      	movs	r2, #0
 800610a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006110:	2200      	movs	r2, #0
 8006112:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611c:	0019      	movs	r1, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800612a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800612c:	f7fe f9b0 	bl	8004490 <HAL_DMA_Start_IT>
 8006130:	1e03      	subs	r3, r0, #0
 8006132:	d00a      	beq.n	800614a <HAL_SPI_TransmitReceive_DMA+0x2da>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006138:	2210      	movs	r2, #16
 800613a:	431a      	orrs	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8006140:	2317      	movs	r3, #23
 8006142:	18fb      	adds	r3, r7, r3
 8006144:	2201      	movs	r2, #1
 8006146:	701a      	strb	r2, [r3, #0]

    goto error;
 8006148:	e01e      	b.n	8006188 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2240      	movs	r2, #64	@ 0x40
 8006152:	4013      	ands	r3, r2
 8006154:	2b40      	cmp	r3, #64	@ 0x40
 8006156:	d007      	beq.n	8006168 <HAL_SPI_TransmitReceive_DMA+0x2f8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2140      	movs	r1, #64	@ 0x40
 8006164:	430a      	orrs	r2, r1
 8006166:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2120      	movs	r1, #32
 8006174:	430a      	orrs	r2, r1
 8006176:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2102      	movs	r1, #2
 8006184:	430a      	orrs	r2, r1
 8006186:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	225c      	movs	r2, #92	@ 0x5c
 800618c:	2100      	movs	r1, #0
 800618e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006190:	2317      	movs	r3, #23
 8006192:	18fb      	adds	r3, r7, r3
 8006194:	781b      	ldrb	r3, [r3, #0]
}
 8006196:	0018      	movs	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	b007      	add	sp, #28
 800619c:	bd90      	pop	{r4, r7, pc}
 800619e:	46c0      	nop			@ (mov r8, r8)
 80061a0:	ffff9fff 	.word	0xffff9fff
 80061a4:	ffffefff 	.word	0xffffefff
 80061a8:	ffffbfff 	.word	0xffffbfff
 80061ac:	ffffdfff 	.word	0xffffdfff
 80061b0:	08006547 	.word	0x08006547
 80061b4:	08006401 	.word	0x08006401
 80061b8:	08006565 	.word	0x08006565
 80061bc:	080064b1 	.word	0x080064b1
 80061c0:	08006583 	.word	0x08006583

080061c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	099b      	lsrs	r3, r3, #6
 80061e0:	001a      	movs	r2, r3
 80061e2:	2301      	movs	r3, #1
 80061e4:	4013      	ands	r3, r2
 80061e6:	d10f      	bne.n	8006208 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	2201      	movs	r2, #1
 80061ec:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80061ee:	d00b      	beq.n	8006208 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	099b      	lsrs	r3, r3, #6
 80061f4:	001a      	movs	r2, r3
 80061f6:	2301      	movs	r3, #1
 80061f8:	4013      	ands	r3, r2
 80061fa:	d005      	beq.n	8006208 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	0010      	movs	r0, r2
 8006204:	4798      	blx	r3
    return;
 8006206:	e0d5      	b.n	80063b4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	001a      	movs	r2, r3
 800620e:	2301      	movs	r3, #1
 8006210:	4013      	ands	r3, r2
 8006212:	d00b      	beq.n	800622c <HAL_SPI_IRQHandler+0x68>
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	09db      	lsrs	r3, r3, #7
 8006218:	001a      	movs	r2, r3
 800621a:	2301      	movs	r3, #1
 800621c:	4013      	ands	r3, r2
 800621e:	d005      	beq.n	800622c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	0010      	movs	r0, r2
 8006228:	4798      	blx	r3
    return;
 800622a:	e0c3      	b.n	80063b4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	001a      	movs	r2, r3
 8006232:	2301      	movs	r3, #1
 8006234:	4013      	ands	r3, r2
 8006236:	d10c      	bne.n	8006252 <HAL_SPI_IRQHandler+0x8e>
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	099b      	lsrs	r3, r3, #6
 800623c:	001a      	movs	r2, r3
 800623e:	2301      	movs	r3, #1
 8006240:	4013      	ands	r3, r2
 8006242:	d106      	bne.n	8006252 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	0a1b      	lsrs	r3, r3, #8
 8006248:	001a      	movs	r2, r3
 800624a:	2301      	movs	r3, #1
 800624c:	4013      	ands	r3, r2
 800624e:	d100      	bne.n	8006252 <HAL_SPI_IRQHandler+0x8e>
 8006250:	e0b0      	b.n	80063b4 <HAL_SPI_IRQHandler+0x1f0>
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	095b      	lsrs	r3, r3, #5
 8006256:	001a      	movs	r2, r3
 8006258:	2301      	movs	r3, #1
 800625a:	4013      	ands	r3, r2
 800625c:	d100      	bne.n	8006260 <HAL_SPI_IRQHandler+0x9c>
 800625e:	e0a9      	b.n	80063b4 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	099b      	lsrs	r3, r3, #6
 8006264:	001a      	movs	r2, r3
 8006266:	2301      	movs	r3, #1
 8006268:	4013      	ands	r3, r2
 800626a:	d023      	beq.n	80062b4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	225d      	movs	r2, #93	@ 0x5d
 8006270:	5c9b      	ldrb	r3, [r3, r2]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b03      	cmp	r3, #3
 8006276:	d011      	beq.n	800629c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627c:	2204      	movs	r2, #4
 800627e:	431a      	orrs	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006284:	2300      	movs	r3, #0
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	e00b      	b.n	80062b4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800629c:	2300      	movs	r3, #0
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	693b      	ldr	r3, [r7, #16]
        return;
 80062b2:	e07f      	b.n	80063b4 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	001a      	movs	r2, r3
 80062ba:	2301      	movs	r3, #1
 80062bc:	4013      	ands	r3, r2
 80062be:	d014      	beq.n	80062ea <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c4:	2201      	movs	r2, #1
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2140      	movs	r1, #64	@ 0x40
 80062e4:	438a      	bics	r2, r1
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	0a1b      	lsrs	r3, r3, #8
 80062ee:	001a      	movs	r2, r3
 80062f0:	2301      	movs	r3, #1
 80062f2:	4013      	ands	r3, r2
 80062f4:	d00c      	beq.n	8006310 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062fa:	2208      	movs	r2, #8
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006302:	2300      	movs	r3, #0
 8006304:	60bb      	str	r3, [r7, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006314:	2b00      	cmp	r3, #0
 8006316:	d04c      	beq.n	80063b2 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	21e0      	movs	r1, #224	@ 0xe0
 8006324:	438a      	bics	r2, r1
 8006326:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	225d      	movs	r2, #93	@ 0x5d
 800632c:	2101      	movs	r1, #1
 800632e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	2202      	movs	r2, #2
 8006334:	4013      	ands	r3, r2
 8006336:	d103      	bne.n	8006340 <HAL_SPI_IRQHandler+0x17c>
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	2201      	movs	r2, #1
 800633c:	4013      	ands	r3, r2
 800633e:	d032      	beq.n	80063a6 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2103      	movs	r1, #3
 800634c:	438a      	bics	r2, r1
 800634e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006354:	2b00      	cmp	r3, #0
 8006356:	d010      	beq.n	800637a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635c:	4a17      	ldr	r2, [pc, #92]	@ (80063bc <HAL_SPI_IRQHandler+0x1f8>)
 800635e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006364:	0018      	movs	r0, r3
 8006366:	f7fe f919 	bl	800459c <HAL_DMA_Abort_IT>
 800636a:	1e03      	subs	r3, r0, #0
 800636c:	d005      	beq.n	800637a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006372:	2240      	movs	r2, #64	@ 0x40
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637e:	2b00      	cmp	r3, #0
 8006380:	d016      	beq.n	80063b0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006386:	4a0d      	ldr	r2, [pc, #52]	@ (80063bc <HAL_SPI_IRQHandler+0x1f8>)
 8006388:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800638e:	0018      	movs	r0, r3
 8006390:	f7fe f904 	bl	800459c <HAL_DMA_Abort_IT>
 8006394:	1e03      	subs	r3, r0, #0
 8006396:	d00b      	beq.n	80063b0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800639c:	2240      	movs	r2, #64	@ 0x40
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80063a4:	e004      	b.n	80063b0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	0018      	movs	r0, r3
 80063aa:	f000 f821 	bl	80063f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80063ae:	e000      	b.n	80063b2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80063b0:	46c0      	nop			@ (mov r8, r8)
    return;
 80063b2:	46c0      	nop			@ (mov r8, r8)
  }
}
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b008      	add	sp, #32
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	46c0      	nop			@ (mov r8, r8)
 80063bc:	080065c5 	.word	0x080065c5

080063c0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80063c8:	46c0      	nop			@ (mov r8, r8)
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b002      	add	sp, #8
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80063d8:	46c0      	nop			@ (mov r8, r8)
 80063da:	46bd      	mov	sp, r7
 80063dc:	b002      	add	sp, #8
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80063e8:	46c0      	nop			@ (mov r8, r8)
 80063ea:	46bd      	mov	sp, r7
 80063ec:	b002      	add	sp, #8
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80063f8:	46c0      	nop			@ (mov r8, r8)
 80063fa:	46bd      	mov	sp, r7
 80063fc:	b002      	add	sp, #8
 80063fe:	bd80      	pop	{r7, pc}

08006400 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800640e:	f7fc fee3 	bl	80031d8 <HAL_GetTick>
 8006412:	0003      	movs	r3, r0
 8006414:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2220      	movs	r2, #32
 800641e:	4013      	ands	r3, r2
 8006420:	2b20      	cmp	r3, #32
 8006422:	d03e      	beq.n	80064a2 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2120      	movs	r1, #32
 8006430:	438a      	bics	r2, r1
 8006432:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10e      	bne.n	800645a <SPI_DMAReceiveCplt+0x5a>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	2382      	movs	r3, #130	@ 0x82
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	429a      	cmp	r2, r3
 8006446:	d108      	bne.n	800645a <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2103      	movs	r1, #3
 8006454:	438a      	bics	r2, r1
 8006456:	605a      	str	r2, [r3, #4]
 8006458:	e007      	b.n	800646a <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2101      	movs	r1, #1
 8006466:	438a      	bics	r2, r1
 8006468:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2164      	movs	r1, #100	@ 0x64
 8006470:	0018      	movs	r0, r3
 8006472:	f000 f9ed 	bl	8006850 <SPI_EndRxTransaction>
 8006476:	1e03      	subs	r3, r0, #0
 8006478:	d002      	beq.n	8006480 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2220      	movs	r2, #32
 800647e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2246      	movs	r2, #70	@ 0x46
 8006484:	2100      	movs	r1, #0
 8006486:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	225d      	movs	r2, #93	@ 0x5d
 800648c:	2101      	movs	r1, #1
 800648e:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	0018      	movs	r0, r3
 800649c:	f7ff ffa8 	bl	80063f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80064a0:	e003      	b.n	80064aa <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	0018      	movs	r0, r3
 80064a6:	f7ff ff8b 	bl	80063c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064aa:	46bd      	mov	sp, r7
 80064ac:	b004      	add	sp, #16
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064bc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064be:	f7fc fe8b 	bl	80031d8 <HAL_GetTick>
 80064c2:	0003      	movs	r3, r0
 80064c4:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2220      	movs	r2, #32
 80064ce:	4013      	ands	r3, r2
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d031      	beq.n	8006538 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2120      	movs	r1, #32
 80064e0:	438a      	bics	r2, r1
 80064e2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2164      	movs	r1, #100	@ 0x64
 80064ea:	0018      	movs	r0, r3
 80064ec:	f000 fa0e 	bl	800690c <SPI_EndRxTxTransaction>
 80064f0:	1e03      	subs	r3, r0, #0
 80064f2:	d005      	beq.n	8006500 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f8:	2220      	movs	r2, #32
 80064fa:	431a      	orrs	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2103      	movs	r1, #3
 800650c:	438a      	bics	r2, r1
 800650e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2246      	movs	r2, #70	@ 0x46
 800651a:	2100      	movs	r1, #0
 800651c:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	225d      	movs	r2, #93	@ 0x5d
 8006522:	2101      	movs	r1, #1
 8006524:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	0018      	movs	r0, r3
 8006532:	f7ff ff5d 	bl	80063f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006536:	e003      	b.n	8006540 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	0018      	movs	r0, r3
 800653c:	f7fc fafe 	bl	8002b3c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006540:	46bd      	mov	sp, r7
 8006542:	b004      	add	sp, #16
 8006544:	bd80      	pop	{r7, pc}

08006546 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006552:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	0018      	movs	r0, r3
 8006558:	f7ff ff3a 	bl	80063d0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800655c:	46c0      	nop			@ (mov r8, r8)
 800655e:	46bd      	mov	sp, r7
 8006560:	b004      	add	sp, #16
 8006562:	bd80      	pop	{r7, pc}

08006564 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006570:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	0018      	movs	r0, r3
 8006576:	f7ff ff33 	bl	80063e0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800657a:	46c0      	nop			@ (mov r8, r8)
 800657c:	46bd      	mov	sp, r7
 800657e:	b004      	add	sp, #16
 8006580:	bd80      	pop	{r7, pc}

08006582 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2103      	movs	r1, #3
 800659c:	438a      	bics	r2, r1
 800659e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065a4:	2210      	movs	r2, #16
 80065a6:	431a      	orrs	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	225d      	movs	r2, #93	@ 0x5d
 80065b0:	2101      	movs	r1, #1
 80065b2:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	0018      	movs	r0, r3
 80065b8:	f7ff ff1a 	bl	80063f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065bc:	46c0      	nop			@ (mov r8, r8)
 80065be:	46bd      	mov	sp, r7
 80065c0:	b004      	add	sp, #16
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2246      	movs	r2, #70	@ 0x46
 80065d6:	2100      	movs	r1, #0
 80065d8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	0018      	movs	r0, r3
 80065e4:	f7ff ff04 	bl	80063f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065e8:	46c0      	nop			@ (mov r8, r8)
 80065ea:	46bd      	mov	sp, r7
 80065ec:	b004      	add	sp, #16
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	1dfb      	adds	r3, r7, #7
 80065fe:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006600:	f7fc fdea 	bl	80031d8 <HAL_GetTick>
 8006604:	0002      	movs	r2, r0
 8006606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006608:	1a9b      	subs	r3, r3, r2
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	18d3      	adds	r3, r2, r3
 800660e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006610:	f7fc fde2 	bl	80031d8 <HAL_GetTick>
 8006614:	0003      	movs	r3, r0
 8006616:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006618:	4b3a      	ldr	r3, [pc, #232]	@ (8006704 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	015b      	lsls	r3, r3, #5
 800661e:	0d1b      	lsrs	r3, r3, #20
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	4353      	muls	r3, r2
 8006624:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006626:	e058      	b.n	80066da <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	3301      	adds	r3, #1
 800662c:	d055      	beq.n	80066da <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800662e:	f7fc fdd3 	bl	80031d8 <HAL_GetTick>
 8006632:	0002      	movs	r2, r0
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	69fa      	ldr	r2, [r7, #28]
 800663a:	429a      	cmp	r2, r3
 800663c:	d902      	bls.n	8006644 <SPI_WaitFlagStateUntilTimeout+0x54>
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d142      	bne.n	80066ca <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	21e0      	movs	r1, #224	@ 0xe0
 8006650:	438a      	bics	r2, r1
 8006652:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	2382      	movs	r3, #130	@ 0x82
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	429a      	cmp	r2, r3
 800665e:	d113      	bne.n	8006688 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	2380      	movs	r3, #128	@ 0x80
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	429a      	cmp	r2, r3
 800666a:	d005      	beq.n	8006678 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	2380      	movs	r3, #128	@ 0x80
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	429a      	cmp	r2, r3
 8006676:	d107      	bne.n	8006688 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2140      	movs	r1, #64	@ 0x40
 8006684:	438a      	bics	r2, r1
 8006686:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800668c:	2380      	movs	r3, #128	@ 0x80
 800668e:	019b      	lsls	r3, r3, #6
 8006690:	429a      	cmp	r2, r3
 8006692:	d110      	bne.n	80066b6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	491a      	ldr	r1, [pc, #104]	@ (8006708 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80066a0:	400a      	ands	r2, r1
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2180      	movs	r1, #128	@ 0x80
 80066b0:	0189      	lsls	r1, r1, #6
 80066b2:	430a      	orrs	r2, r1
 80066b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	225d      	movs	r2, #93	@ 0x5d
 80066ba:	2101      	movs	r1, #1
 80066bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	225c      	movs	r2, #92	@ 0x5c
 80066c2:	2100      	movs	r1, #0
 80066c4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e017      	b.n	80066fa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	4013      	ands	r3, r2
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	425a      	negs	r2, r3
 80066ea:	4153      	adcs	r3, r2
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	001a      	movs	r2, r3
 80066f0:	1dfb      	adds	r3, r7, #7
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d197      	bne.n	8006628 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	0018      	movs	r0, r3
 80066fc:	46bd      	mov	sp, r7
 80066fe:	b008      	add	sp, #32
 8006700:	bd80      	pop	{r7, pc}
 8006702:	46c0      	nop			@ (mov r8, r8)
 8006704:	20000000 	.word	0x20000000
 8006708:	ffffdfff 	.word	0xffffdfff

0800670c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08a      	sub	sp, #40	@ 0x28
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800671a:	2317      	movs	r3, #23
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	2200      	movs	r2, #0
 8006720:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006722:	f7fc fd59 	bl	80031d8 <HAL_GetTick>
 8006726:	0002      	movs	r2, r0
 8006728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	18d3      	adds	r3, r2, r3
 8006730:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006732:	f7fc fd51 	bl	80031d8 <HAL_GetTick>
 8006736:	0003      	movs	r3, r0
 8006738:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	330c      	adds	r3, #12
 8006740:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006742:	4b41      	ldr	r3, [pc, #260]	@ (8006848 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	0013      	movs	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	189b      	adds	r3, r3, r2
 800674c:	00da      	lsls	r2, r3, #3
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	0d1b      	lsrs	r3, r3, #20
 8006752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006754:	4353      	muls	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006758:	e068      	b.n	800682c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	23c0      	movs	r3, #192	@ 0xc0
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	429a      	cmp	r2, r3
 8006762:	d10a      	bne.n	800677a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d107      	bne.n	800677a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	b2da      	uxtb	r2, r3
 8006770:	2117      	movs	r1, #23
 8006772:	187b      	adds	r3, r7, r1
 8006774:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006776:	187b      	adds	r3, r7, r1
 8006778:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	3301      	adds	r3, #1
 800677e:	d055      	beq.n	800682c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006780:	f7fc fd2a 	bl	80031d8 <HAL_GetTick>
 8006784:	0002      	movs	r2, r0
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678c:	429a      	cmp	r2, r3
 800678e:	d902      	bls.n	8006796 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	2b00      	cmp	r3, #0
 8006794:	d142      	bne.n	800681c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	21e0      	movs	r1, #224	@ 0xe0
 80067a2:	438a      	bics	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	2382      	movs	r3, #130	@ 0x82
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d113      	bne.n	80067da <SPI_WaitFifoStateUntilTimeout+0xce>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	2380      	movs	r3, #128	@ 0x80
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d005      	beq.n	80067ca <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	2380      	movs	r3, #128	@ 0x80
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d107      	bne.n	80067da <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2140      	movs	r1, #64	@ 0x40
 80067d6:	438a      	bics	r2, r1
 80067d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067de:	2380      	movs	r3, #128	@ 0x80
 80067e0:	019b      	lsls	r3, r3, #6
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d110      	bne.n	8006808 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4916      	ldr	r1, [pc, #88]	@ (800684c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80067f2:	400a      	ands	r2, r1
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2180      	movs	r1, #128	@ 0x80
 8006802:	0189      	lsls	r1, r1, #6
 8006804:	430a      	orrs	r2, r1
 8006806:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	225d      	movs	r2, #93	@ 0x5d
 800680c:	2101      	movs	r1, #1
 800680e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	225c      	movs	r2, #92	@ 0x5c
 8006814:	2100      	movs	r1, #0
 8006816:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e010      	b.n	800683e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	3b01      	subs	r3, #1
 800682a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	4013      	ands	r3, r2
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	429a      	cmp	r2, r3
 800683a:	d18e      	bne.n	800675a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	0018      	movs	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	b00a      	add	sp, #40	@ 0x28
 8006844:	bd80      	pop	{r7, pc}
 8006846:	46c0      	nop			@ (mov r8, r8)
 8006848:	20000000 	.word	0x20000000
 800684c:	ffffdfff 	.word	0xffffdfff

08006850 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af02      	add	r7, sp, #8
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	2382      	movs	r3, #130	@ 0x82
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	429a      	cmp	r2, r3
 8006866:	d113      	bne.n	8006890 <SPI_EndRxTransaction+0x40>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	2380      	movs	r3, #128	@ 0x80
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	429a      	cmp	r2, r3
 8006872:	d005      	beq.n	8006880 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	2380      	movs	r3, #128	@ 0x80
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	429a      	cmp	r2, r3
 800687e:	d107      	bne.n	8006890 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2140      	movs	r1, #64	@ 0x40
 800688c:	438a      	bics	r2, r1
 800688e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	0013      	movs	r3, r2
 800689a:	2200      	movs	r2, #0
 800689c:	2180      	movs	r1, #128	@ 0x80
 800689e:	f7ff fea7 	bl	80065f0 <SPI_WaitFlagStateUntilTimeout>
 80068a2:	1e03      	subs	r3, r0, #0
 80068a4:	d007      	beq.n	80068b6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068aa:	2220      	movs	r2, #32
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e026      	b.n	8006904 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	2382      	movs	r3, #130	@ 0x82
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	429a      	cmp	r2, r3
 80068c0:	d11f      	bne.n	8006902 <SPI_EndRxTransaction+0xb2>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	2380      	movs	r3, #128	@ 0x80
 80068c8:	021b      	lsls	r3, r3, #8
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d005      	beq.n	80068da <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	2380      	movs	r3, #128	@ 0x80
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d113      	bne.n	8006902 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	23c0      	movs	r3, #192	@ 0xc0
 80068de:	00d9      	lsls	r1, r3, #3
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	0013      	movs	r3, r2
 80068e8:	2200      	movs	r2, #0
 80068ea:	f7ff ff0f 	bl	800670c <SPI_WaitFifoStateUntilTimeout>
 80068ee:	1e03      	subs	r3, r0, #0
 80068f0:	d007      	beq.n	8006902 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068f6:	2220      	movs	r2, #32
 80068f8:	431a      	orrs	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e000      	b.n	8006904 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	0018      	movs	r0, r3
 8006906:	46bd      	mov	sp, r7
 8006908:	b004      	add	sp, #16
 800690a:	bd80      	pop	{r7, pc}

0800690c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	23c0      	movs	r3, #192	@ 0xc0
 800691c:	0159      	lsls	r1, r3, #5
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	0013      	movs	r3, r2
 8006926:	2200      	movs	r2, #0
 8006928:	f7ff fef0 	bl	800670c <SPI_WaitFifoStateUntilTimeout>
 800692c:	1e03      	subs	r3, r0, #0
 800692e:	d007      	beq.n	8006940 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006934:	2220      	movs	r2, #32
 8006936:	431a      	orrs	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e027      	b.n	8006990 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	0013      	movs	r3, r2
 800694a:	2200      	movs	r2, #0
 800694c:	2180      	movs	r1, #128	@ 0x80
 800694e:	f7ff fe4f 	bl	80065f0 <SPI_WaitFlagStateUntilTimeout>
 8006952:	1e03      	subs	r3, r0, #0
 8006954:	d007      	beq.n	8006966 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800695a:	2220      	movs	r2, #32
 800695c:	431a      	orrs	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e014      	b.n	8006990 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	23c0      	movs	r3, #192	@ 0xc0
 800696a:	00d9      	lsls	r1, r3, #3
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	0013      	movs	r3, r2
 8006974:	2200      	movs	r2, #0
 8006976:	f7ff fec9 	bl	800670c <SPI_WaitFifoStateUntilTimeout>
 800697a:	1e03      	subs	r3, r0, #0
 800697c:	d007      	beq.n	800698e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006982:	2220      	movs	r2, #32
 8006984:	431a      	orrs	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e000      	b.n	8006990 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	0018      	movs	r0, r3
 8006992:	46bd      	mov	sp, r7
 8006994:	b004      	add	sp, #16
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e04a      	b.n	8006a40 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	223d      	movs	r2, #61	@ 0x3d
 80069ae:	5c9b      	ldrb	r3, [r3, r2]
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d107      	bne.n	80069c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	223c      	movs	r2, #60	@ 0x3c
 80069ba:	2100      	movs	r1, #0
 80069bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	0018      	movs	r0, r3
 80069c2:	f7fc fa6d 	bl	8002ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	223d      	movs	r2, #61	@ 0x3d
 80069ca:	2102      	movs	r1, #2
 80069cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3304      	adds	r3, #4
 80069d6:	0019      	movs	r1, r3
 80069d8:	0010      	movs	r0, r2
 80069da:	f000 fd95 	bl	8007508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2248      	movs	r2, #72	@ 0x48
 80069e2:	2101      	movs	r1, #1
 80069e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	223e      	movs	r2, #62	@ 0x3e
 80069ea:	2101      	movs	r1, #1
 80069ec:	5499      	strb	r1, [r3, r2]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	223f      	movs	r2, #63	@ 0x3f
 80069f2:	2101      	movs	r1, #1
 80069f4:	5499      	strb	r1, [r3, r2]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2240      	movs	r2, #64	@ 0x40
 80069fa:	2101      	movs	r1, #1
 80069fc:	5499      	strb	r1, [r3, r2]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2241      	movs	r2, #65	@ 0x41
 8006a02:	2101      	movs	r1, #1
 8006a04:	5499      	strb	r1, [r3, r2]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2242      	movs	r2, #66	@ 0x42
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	5499      	strb	r1, [r3, r2]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2243      	movs	r2, #67	@ 0x43
 8006a12:	2101      	movs	r1, #1
 8006a14:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2244      	movs	r2, #68	@ 0x44
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	5499      	strb	r1, [r3, r2]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2245      	movs	r2, #69	@ 0x45
 8006a22:	2101      	movs	r1, #1
 8006a24:	5499      	strb	r1, [r3, r2]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2246      	movs	r2, #70	@ 0x46
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	5499      	strb	r1, [r3, r2]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2247      	movs	r2, #71	@ 0x47
 8006a32:	2101      	movs	r1, #1
 8006a34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	223d      	movs	r2, #61	@ 0x3d
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	0018      	movs	r0, r3
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b002      	add	sp, #8
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e04a      	b.n	8006af0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	223d      	movs	r2, #61	@ 0x3d
 8006a5e:	5c9b      	ldrb	r3, [r3, r2]
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d107      	bne.n	8006a76 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	223c      	movs	r2, #60	@ 0x3c
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	0018      	movs	r0, r3
 8006a72:	f000 f841 	bl	8006af8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	223d      	movs	r2, #61	@ 0x3d
 8006a7a:	2102      	movs	r1, #2
 8006a7c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3304      	adds	r3, #4
 8006a86:	0019      	movs	r1, r3
 8006a88:	0010      	movs	r0, r2
 8006a8a:	f000 fd3d 	bl	8007508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2248      	movs	r2, #72	@ 0x48
 8006a92:	2101      	movs	r1, #1
 8006a94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	223e      	movs	r2, #62	@ 0x3e
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	5499      	strb	r1, [r3, r2]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	223f      	movs	r2, #63	@ 0x3f
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	5499      	strb	r1, [r3, r2]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2240      	movs	r2, #64	@ 0x40
 8006aaa:	2101      	movs	r1, #1
 8006aac:	5499      	strb	r1, [r3, r2]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2241      	movs	r2, #65	@ 0x41
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	5499      	strb	r1, [r3, r2]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2242      	movs	r2, #66	@ 0x42
 8006aba:	2101      	movs	r1, #1
 8006abc:	5499      	strb	r1, [r3, r2]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2243      	movs	r2, #67	@ 0x43
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2244      	movs	r2, #68	@ 0x44
 8006aca:	2101      	movs	r1, #1
 8006acc:	5499      	strb	r1, [r3, r2]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2245      	movs	r2, #69	@ 0x45
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	5499      	strb	r1, [r3, r2]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2246      	movs	r2, #70	@ 0x46
 8006ada:	2101      	movs	r1, #1
 8006adc:	5499      	strb	r1, [r3, r2]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2247      	movs	r2, #71	@ 0x47
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	223d      	movs	r2, #61	@ 0x3d
 8006aea:	2101      	movs	r1, #1
 8006aec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	0018      	movs	r0, r3
 8006af2:	46bd      	mov	sp, r7
 8006af4:	b002      	add	sp, #8
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b00:	46c0      	nop			@ (mov r8, r8)
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b002      	add	sp, #8
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d108      	bne.n	8006b2a <HAL_TIM_PWM_Start+0x22>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	223e      	movs	r2, #62	@ 0x3e
 8006b1c:	5c9b      	ldrb	r3, [r3, r2]
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	1e5a      	subs	r2, r3, #1
 8006b24:	4193      	sbcs	r3, r2
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	e037      	b.n	8006b9a <HAL_TIM_PWM_Start+0x92>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d108      	bne.n	8006b42 <HAL_TIM_PWM_Start+0x3a>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	223f      	movs	r2, #63	@ 0x3f
 8006b34:	5c9b      	ldrb	r3, [r3, r2]
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	1e5a      	subs	r2, r3, #1
 8006b3c:	4193      	sbcs	r3, r2
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	e02b      	b.n	8006b9a <HAL_TIM_PWM_Start+0x92>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d108      	bne.n	8006b5a <HAL_TIM_PWM_Start+0x52>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2240      	movs	r2, #64	@ 0x40
 8006b4c:	5c9b      	ldrb	r3, [r3, r2]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	1e5a      	subs	r2, r3, #1
 8006b54:	4193      	sbcs	r3, r2
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	e01f      	b.n	8006b9a <HAL_TIM_PWM_Start+0x92>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b0c      	cmp	r3, #12
 8006b5e:	d108      	bne.n	8006b72 <HAL_TIM_PWM_Start+0x6a>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2241      	movs	r2, #65	@ 0x41
 8006b64:	5c9b      	ldrb	r3, [r3, r2]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	1e5a      	subs	r2, r3, #1
 8006b6c:	4193      	sbcs	r3, r2
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	e013      	b.n	8006b9a <HAL_TIM_PWM_Start+0x92>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	d108      	bne.n	8006b8a <HAL_TIM_PWM_Start+0x82>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2242      	movs	r2, #66	@ 0x42
 8006b7c:	5c9b      	ldrb	r3, [r3, r2]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	1e5a      	subs	r2, r3, #1
 8006b84:	4193      	sbcs	r3, r2
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	e007      	b.n	8006b9a <HAL_TIM_PWM_Start+0x92>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2243      	movs	r2, #67	@ 0x43
 8006b8e:	5c9b      	ldrb	r3, [r3, r2]
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	1e5a      	subs	r2, r3, #1
 8006b96:	4193      	sbcs	r3, r2
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e081      	b.n	8006ca6 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d104      	bne.n	8006bb2 <HAL_TIM_PWM_Start+0xaa>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	223e      	movs	r2, #62	@ 0x3e
 8006bac:	2102      	movs	r1, #2
 8006bae:	5499      	strb	r1, [r3, r2]
 8006bb0:	e023      	b.n	8006bfa <HAL_TIM_PWM_Start+0xf2>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d104      	bne.n	8006bc2 <HAL_TIM_PWM_Start+0xba>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	223f      	movs	r2, #63	@ 0x3f
 8006bbc:	2102      	movs	r1, #2
 8006bbe:	5499      	strb	r1, [r3, r2]
 8006bc0:	e01b      	b.n	8006bfa <HAL_TIM_PWM_Start+0xf2>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d104      	bne.n	8006bd2 <HAL_TIM_PWM_Start+0xca>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2240      	movs	r2, #64	@ 0x40
 8006bcc:	2102      	movs	r1, #2
 8006bce:	5499      	strb	r1, [r3, r2]
 8006bd0:	e013      	b.n	8006bfa <HAL_TIM_PWM_Start+0xf2>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b0c      	cmp	r3, #12
 8006bd6:	d104      	bne.n	8006be2 <HAL_TIM_PWM_Start+0xda>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2241      	movs	r2, #65	@ 0x41
 8006bdc:	2102      	movs	r1, #2
 8006bde:	5499      	strb	r1, [r3, r2]
 8006be0:	e00b      	b.n	8006bfa <HAL_TIM_PWM_Start+0xf2>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b10      	cmp	r3, #16
 8006be6:	d104      	bne.n	8006bf2 <HAL_TIM_PWM_Start+0xea>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2242      	movs	r2, #66	@ 0x42
 8006bec:	2102      	movs	r1, #2
 8006bee:	5499      	strb	r1, [r3, r2]
 8006bf0:	e003      	b.n	8006bfa <HAL_TIM_PWM_Start+0xf2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2243      	movs	r2, #67	@ 0x43
 8006bf6:	2102      	movs	r1, #2
 8006bf8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	2201      	movs	r2, #1
 8006c02:	0018      	movs	r0, r3
 8006c04:	f001 f83c 	bl	8007c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a28      	ldr	r2, [pc, #160]	@ (8006cb0 <HAL_TIM_PWM_Start+0x1a8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_TIM_PWM_Start+0x11e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a27      	ldr	r2, [pc, #156]	@ (8006cb4 <HAL_TIM_PWM_Start+0x1ac>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_TIM_PWM_Start+0x11e>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a25      	ldr	r2, [pc, #148]	@ (8006cb8 <HAL_TIM_PWM_Start+0x1b0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d101      	bne.n	8006c2a <HAL_TIM_PWM_Start+0x122>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e000      	b.n	8006c2c <HAL_TIM_PWM_Start+0x124>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d008      	beq.n	8006c42 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2180      	movs	r1, #128	@ 0x80
 8006c3c:	0209      	lsls	r1, r1, #8
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1a      	ldr	r2, [pc, #104]	@ (8006cb0 <HAL_TIM_PWM_Start+0x1a8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00a      	beq.n	8006c62 <HAL_TIM_PWM_Start+0x15a>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	2380      	movs	r3, #128	@ 0x80
 8006c52:	05db      	lsls	r3, r3, #23
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d004      	beq.n	8006c62 <HAL_TIM_PWM_Start+0x15a>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a17      	ldr	r2, [pc, #92]	@ (8006cbc <HAL_TIM_PWM_Start+0x1b4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d116      	bne.n	8006c90 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	4a15      	ldr	r2, [pc, #84]	@ (8006cc0 <HAL_TIM_PWM_Start+0x1b8>)
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b06      	cmp	r3, #6
 8006c72:	d016      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x19a>
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	2380      	movs	r3, #128	@ 0x80
 8006c78:	025b      	lsls	r3, r3, #9
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d011      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2101      	movs	r1, #1
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8e:	e008      	b.n	8006ca2 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	e000      	b.n	8006ca4 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	b004      	add	sp, #16
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	46c0      	nop			@ (mov r8, r8)
 8006cb0:	40012c00 	.word	0x40012c00
 8006cb4:	40014400 	.word	0x40014400
 8006cb8:	40014800 	.word	0x40014800
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	00010007 	.word	0x00010007

08006cc4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cce:	230f      	movs	r3, #15
 8006cd0:	18fb      	adds	r3, r7, r3
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d108      	bne.n	8006cee <HAL_TIM_PWM_Start_IT+0x2a>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	223e      	movs	r2, #62	@ 0x3e
 8006ce0:	5c9b      	ldrb	r3, [r3, r2]
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	1e5a      	subs	r2, r3, #1
 8006ce8:	4193      	sbcs	r3, r2
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	e037      	b.n	8006d5e <HAL_TIM_PWM_Start_IT+0x9a>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d108      	bne.n	8006d06 <HAL_TIM_PWM_Start_IT+0x42>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	223f      	movs	r2, #63	@ 0x3f
 8006cf8:	5c9b      	ldrb	r3, [r3, r2]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	1e5a      	subs	r2, r3, #1
 8006d00:	4193      	sbcs	r3, r2
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	e02b      	b.n	8006d5e <HAL_TIM_PWM_Start_IT+0x9a>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d108      	bne.n	8006d1e <HAL_TIM_PWM_Start_IT+0x5a>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2240      	movs	r2, #64	@ 0x40
 8006d10:	5c9b      	ldrb	r3, [r3, r2]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	3b01      	subs	r3, #1
 8006d16:	1e5a      	subs	r2, r3, #1
 8006d18:	4193      	sbcs	r3, r2
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	e01f      	b.n	8006d5e <HAL_TIM_PWM_Start_IT+0x9a>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b0c      	cmp	r3, #12
 8006d22:	d108      	bne.n	8006d36 <HAL_TIM_PWM_Start_IT+0x72>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2241      	movs	r2, #65	@ 0x41
 8006d28:	5c9b      	ldrb	r3, [r3, r2]
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	1e5a      	subs	r2, r3, #1
 8006d30:	4193      	sbcs	r3, r2
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	e013      	b.n	8006d5e <HAL_TIM_PWM_Start_IT+0x9a>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b10      	cmp	r3, #16
 8006d3a:	d108      	bne.n	8006d4e <HAL_TIM_PWM_Start_IT+0x8a>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2242      	movs	r2, #66	@ 0x42
 8006d40:	5c9b      	ldrb	r3, [r3, r2]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	3b01      	subs	r3, #1
 8006d46:	1e5a      	subs	r2, r3, #1
 8006d48:	4193      	sbcs	r3, r2
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	e007      	b.n	8006d5e <HAL_TIM_PWM_Start_IT+0x9a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2243      	movs	r2, #67	@ 0x43
 8006d52:	5c9b      	ldrb	r3, [r3, r2]
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	1e5a      	subs	r2, r3, #1
 8006d5a:	4193      	sbcs	r3, r2
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <HAL_TIM_PWM_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e0c4      	b.n	8006ef0 <HAL_TIM_PWM_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <HAL_TIM_PWM_Start_IT+0xb2>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	223e      	movs	r2, #62	@ 0x3e
 8006d70:	2102      	movs	r1, #2
 8006d72:	5499      	strb	r1, [r3, r2]
 8006d74:	e023      	b.n	8006dbe <HAL_TIM_PWM_Start_IT+0xfa>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d104      	bne.n	8006d86 <HAL_TIM_PWM_Start_IT+0xc2>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	223f      	movs	r2, #63	@ 0x3f
 8006d80:	2102      	movs	r1, #2
 8006d82:	5499      	strb	r1, [r3, r2]
 8006d84:	e01b      	b.n	8006dbe <HAL_TIM_PWM_Start_IT+0xfa>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d104      	bne.n	8006d96 <HAL_TIM_PWM_Start_IT+0xd2>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2240      	movs	r2, #64	@ 0x40
 8006d90:	2102      	movs	r1, #2
 8006d92:	5499      	strb	r1, [r3, r2]
 8006d94:	e013      	b.n	8006dbe <HAL_TIM_PWM_Start_IT+0xfa>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b0c      	cmp	r3, #12
 8006d9a:	d104      	bne.n	8006da6 <HAL_TIM_PWM_Start_IT+0xe2>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2241      	movs	r2, #65	@ 0x41
 8006da0:	2102      	movs	r1, #2
 8006da2:	5499      	strb	r1, [r3, r2]
 8006da4:	e00b      	b.n	8006dbe <HAL_TIM_PWM_Start_IT+0xfa>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b10      	cmp	r3, #16
 8006daa:	d104      	bne.n	8006db6 <HAL_TIM_PWM_Start_IT+0xf2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2242      	movs	r2, #66	@ 0x42
 8006db0:	2102      	movs	r1, #2
 8006db2:	5499      	strb	r1, [r3, r2]
 8006db4:	e003      	b.n	8006dbe <HAL_TIM_PWM_Start_IT+0xfa>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2243      	movs	r2, #67	@ 0x43
 8006dba:	2102      	movs	r1, #2
 8006dbc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b0c      	cmp	r3, #12
 8006dc2:	d02a      	beq.n	8006e1a <HAL_TIM_PWM_Start_IT+0x156>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b0c      	cmp	r3, #12
 8006dc8:	d830      	bhi.n	8006e2c <HAL_TIM_PWM_Start_IT+0x168>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d01b      	beq.n	8006e08 <HAL_TIM_PWM_Start_IT+0x144>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2b08      	cmp	r3, #8
 8006dd4:	d82a      	bhi.n	8006e2c <HAL_TIM_PWM_Start_IT+0x168>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <HAL_TIM_PWM_Start_IT+0x120>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d009      	beq.n	8006df6 <HAL_TIM_PWM_Start_IT+0x132>
 8006de2:	e023      	b.n	8006e2c <HAL_TIM_PWM_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2102      	movs	r1, #2
 8006df0:	430a      	orrs	r2, r1
 8006df2:	60da      	str	r2, [r3, #12]
      break;
 8006df4:	e01f      	b.n	8006e36 <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2104      	movs	r1, #4
 8006e02:	430a      	orrs	r2, r1
 8006e04:	60da      	str	r2, [r3, #12]
      break;
 8006e06:	e016      	b.n	8006e36 <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2108      	movs	r1, #8
 8006e14:	430a      	orrs	r2, r1
 8006e16:	60da      	str	r2, [r3, #12]
      break;
 8006e18:	e00d      	b.n	8006e36 <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2110      	movs	r1, #16
 8006e26:	430a      	orrs	r2, r1
 8006e28:	60da      	str	r2, [r3, #12]
      break;
 8006e2a:	e004      	b.n	8006e36 <HAL_TIM_PWM_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e2c:	230f      	movs	r3, #15
 8006e2e:	18fb      	adds	r3, r7, r3
 8006e30:	2201      	movs	r2, #1
 8006e32:	701a      	strb	r2, [r3, #0]
      break;
 8006e34:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8006e36:	230f      	movs	r3, #15
 8006e38:	18fb      	adds	r3, r7, r3
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d154      	bne.n	8006eea <HAL_TIM_PWM_Start_IT+0x226>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	2201      	movs	r2, #1
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f000 ff19 	bl	8007c80 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a29      	ldr	r2, [pc, #164]	@ (8006ef8 <HAL_TIM_PWM_Start_IT+0x234>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d009      	beq.n	8006e6c <HAL_TIM_PWM_Start_IT+0x1a8>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a27      	ldr	r2, [pc, #156]	@ (8006efc <HAL_TIM_PWM_Start_IT+0x238>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d004      	beq.n	8006e6c <HAL_TIM_PWM_Start_IT+0x1a8>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a26      	ldr	r2, [pc, #152]	@ (8006f00 <HAL_TIM_PWM_Start_IT+0x23c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d101      	bne.n	8006e70 <HAL_TIM_PWM_Start_IT+0x1ac>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e000      	b.n	8006e72 <HAL_TIM_PWM_Start_IT+0x1ae>
 8006e70:	2300      	movs	r3, #0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d008      	beq.n	8006e88 <HAL_TIM_PWM_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2180      	movs	r1, #128	@ 0x80
 8006e82:	0209      	lsls	r1, r1, #8
 8006e84:	430a      	orrs	r2, r1
 8006e86:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ef8 <HAL_TIM_PWM_Start_IT+0x234>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d00a      	beq.n	8006ea8 <HAL_TIM_PWM_Start_IT+0x1e4>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	2380      	movs	r3, #128	@ 0x80
 8006e98:	05db      	lsls	r3, r3, #23
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d004      	beq.n	8006ea8 <HAL_TIM_PWM_Start_IT+0x1e4>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a18      	ldr	r2, [pc, #96]	@ (8006f04 <HAL_TIM_PWM_Start_IT+0x240>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d116      	bne.n	8006ed6 <HAL_TIM_PWM_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	4a16      	ldr	r2, [pc, #88]	@ (8006f08 <HAL_TIM_PWM_Start_IT+0x244>)
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b06      	cmp	r3, #6
 8006eb8:	d016      	beq.n	8006ee8 <HAL_TIM_PWM_Start_IT+0x224>
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	2380      	movs	r3, #128	@ 0x80
 8006ebe:	025b      	lsls	r3, r3, #9
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d011      	beq.n	8006ee8 <HAL_TIM_PWM_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2101      	movs	r1, #1
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed4:	e008      	b.n	8006ee8 <HAL_TIM_PWM_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	e000      	b.n	8006eea <HAL_TIM_PWM_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8006eea:	230f      	movs	r3, #15
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	781b      	ldrb	r3, [r3, #0]
}
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	b004      	add	sp, #16
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	40012c00 	.word	0x40012c00
 8006efc:	40014400 	.word	0x40014400
 8006f00:	40014800 	.word	0x40014800
 8006f04:	40000400 	.word	0x40000400
 8006f08:	00010007 	.word	0x00010007

08006f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2202      	movs	r2, #2
 8006f28:	4013      	ands	r3, r2
 8006f2a:	d021      	beq.n	8006f70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	4013      	ands	r3, r2
 8006f32:	d01d      	beq.n	8006f70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2203      	movs	r2, #3
 8006f3a:	4252      	negs	r2, r2
 8006f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	2203      	movs	r2, #3
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	d004      	beq.n	8006f5a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	0018      	movs	r0, r3
 8006f54:	f000 fac0 	bl	80074d8 <HAL_TIM_IC_CaptureCallback>
 8006f58:	e007      	b.n	8006f6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f7fc f875 	bl	800304c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	0018      	movs	r0, r3
 8006f66:	f000 fabf 	bl	80074e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2204      	movs	r2, #4
 8006f74:	4013      	ands	r3, r2
 8006f76:	d022      	beq.n	8006fbe <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	d01e      	beq.n	8006fbe <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2205      	movs	r2, #5
 8006f86:	4252      	negs	r2, r2
 8006f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	23c0      	movs	r3, #192	@ 0xc0
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f000 fa99 	bl	80074d8 <HAL_TIM_IC_CaptureCallback>
 8006fa6:	e007      	b.n	8006fb8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	0018      	movs	r0, r3
 8006fac:	f7fc f84e 	bl	800304c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	f000 fa98 	bl	80074e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	d021      	beq.n	800700a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2208      	movs	r2, #8
 8006fca:	4013      	ands	r3, r2
 8006fcc:	d01d      	beq.n	800700a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2209      	movs	r2, #9
 8006fd4:	4252      	negs	r2, r2
 8006fd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2204      	movs	r2, #4
 8006fdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	2203      	movs	r2, #3
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	d004      	beq.n	8006ff4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	0018      	movs	r0, r3
 8006fee:	f000 fa73 	bl	80074d8 <HAL_TIM_IC_CaptureCallback>
 8006ff2:	e007      	b.n	8007004 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f7fc f828 	bl	800304c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	0018      	movs	r0, r3
 8007000:	f000 fa72 	bl	80074e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2210      	movs	r2, #16
 800700e:	4013      	ands	r3, r2
 8007010:	d022      	beq.n	8007058 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2210      	movs	r2, #16
 8007016:	4013      	ands	r3, r2
 8007018:	d01e      	beq.n	8007058 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2211      	movs	r2, #17
 8007020:	4252      	negs	r2, r2
 8007022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2208      	movs	r2, #8
 8007028:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	23c0      	movs	r3, #192	@ 0xc0
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4013      	ands	r3, r2
 8007036:	d004      	beq.n	8007042 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	0018      	movs	r0, r3
 800703c:	f000 fa4c 	bl	80074d8 <HAL_TIM_IC_CaptureCallback>
 8007040:	e007      	b.n	8007052 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	0018      	movs	r0, r3
 8007046:	f7fc f801 	bl	800304c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	0018      	movs	r0, r3
 800704e:	f000 fa4b 	bl	80074e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2201      	movs	r2, #1
 800705c:	4013      	ands	r3, r2
 800705e:	d00c      	beq.n	800707a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2201      	movs	r2, #1
 8007064:	4013      	ands	r3, r2
 8007066:	d008      	beq.n	800707a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2202      	movs	r2, #2
 800706e:	4252      	negs	r2, r2
 8007070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	0018      	movs	r0, r3
 8007076:	f000 fa27 	bl	80074c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2280      	movs	r2, #128	@ 0x80
 800707e:	4013      	ands	r3, r2
 8007080:	d104      	bne.n	800708c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	2380      	movs	r3, #128	@ 0x80
 8007086:	019b      	lsls	r3, r3, #6
 8007088:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800708a:	d00b      	beq.n	80070a4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2280      	movs	r2, #128	@ 0x80
 8007090:	4013      	ands	r3, r2
 8007092:	d007      	beq.n	80070a4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a1e      	ldr	r2, [pc, #120]	@ (8007114 <HAL_TIM_IRQHandler+0x208>)
 800709a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	0018      	movs	r0, r3
 80070a0:	f000 ffbc 	bl	800801c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	2380      	movs	r3, #128	@ 0x80
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	4013      	ands	r3, r2
 80070ac:	d00b      	beq.n	80070c6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2280      	movs	r2, #128	@ 0x80
 80070b2:	4013      	ands	r3, r2
 80070b4:	d007      	beq.n	80070c6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a17      	ldr	r2, [pc, #92]	@ (8007118 <HAL_TIM_IRQHandler+0x20c>)
 80070bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	0018      	movs	r0, r3
 80070c2:	f000 ffb3 	bl	800802c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2240      	movs	r2, #64	@ 0x40
 80070ca:	4013      	ands	r3, r2
 80070cc:	d00c      	beq.n	80070e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2240      	movs	r2, #64	@ 0x40
 80070d2:	4013      	ands	r3, r2
 80070d4:	d008      	beq.n	80070e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2241      	movs	r2, #65	@ 0x41
 80070dc:	4252      	negs	r2, r2
 80070de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	0018      	movs	r0, r3
 80070e4:	f000 fa08 	bl	80074f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2220      	movs	r2, #32
 80070ec:	4013      	ands	r3, r2
 80070ee:	d00c      	beq.n	800710a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2220      	movs	r2, #32
 80070f4:	4013      	ands	r3, r2
 80070f6:	d008      	beq.n	800710a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2221      	movs	r2, #33	@ 0x21
 80070fe:	4252      	negs	r2, r2
 8007100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	0018      	movs	r0, r3
 8007106:	f000 ff81 	bl	800800c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800710a:	46c0      	nop			@ (mov r8, r8)
 800710c:	46bd      	mov	sp, r7
 800710e:	b004      	add	sp, #16
 8007110:	bd80      	pop	{r7, pc}
 8007112:	46c0      	nop			@ (mov r8, r8)
 8007114:	ffffdf7f 	.word	0xffffdf7f
 8007118:	fffffeff 	.word	0xfffffeff

0800711c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007128:	2317      	movs	r3, #23
 800712a:	18fb      	adds	r3, r7, r3
 800712c:	2200      	movs	r2, #0
 800712e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	223c      	movs	r2, #60	@ 0x3c
 8007134:	5c9b      	ldrb	r3, [r3, r2]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <HAL_TIM_PWM_ConfigChannel+0x22>
 800713a:	2302      	movs	r3, #2
 800713c:	e0e5      	b.n	800730a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	223c      	movs	r2, #60	@ 0x3c
 8007142:	2101      	movs	r1, #1
 8007144:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b14      	cmp	r3, #20
 800714a:	d900      	bls.n	800714e <HAL_TIM_PWM_ConfigChannel+0x32>
 800714c:	e0d1      	b.n	80072f2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	009a      	lsls	r2, r3, #2
 8007152:	4b70      	ldr	r3, [pc, #448]	@ (8007314 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007154:	18d3      	adds	r3, r2, r3
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	0011      	movs	r1, r2
 8007162:	0018      	movs	r0, r3
 8007164:	f000 fa54 	bl	8007610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2108      	movs	r1, #8
 8007174:	430a      	orrs	r2, r1
 8007176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2104      	movs	r1, #4
 8007184:	438a      	bics	r2, r1
 8007186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6999      	ldr	r1, [r3, #24]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	691a      	ldr	r2, [r3, #16]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	619a      	str	r2, [r3, #24]
      break;
 800719a:	e0af      	b.n	80072fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	0011      	movs	r1, r2
 80071a4:	0018      	movs	r0, r3
 80071a6:	f000 fab3 	bl	8007710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	699a      	ldr	r2, [r3, #24]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2180      	movs	r1, #128	@ 0x80
 80071b6:	0109      	lsls	r1, r1, #4
 80071b8:	430a      	orrs	r2, r1
 80071ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4954      	ldr	r1, [pc, #336]	@ (8007318 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80071c8:	400a      	ands	r2, r1
 80071ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6999      	ldr	r1, [r3, #24]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	021a      	lsls	r2, r3, #8
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	619a      	str	r2, [r3, #24]
      break;
 80071e0:	e08c      	b.n	80072fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	0011      	movs	r1, r2
 80071ea:	0018      	movs	r0, r3
 80071ec:	f000 fb0e 	bl	800780c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69da      	ldr	r2, [r3, #28]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2108      	movs	r1, #8
 80071fc:	430a      	orrs	r2, r1
 80071fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69da      	ldr	r2, [r3, #28]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2104      	movs	r1, #4
 800720c:	438a      	bics	r2, r1
 800720e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	69d9      	ldr	r1, [r3, #28]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	691a      	ldr	r2, [r3, #16]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	61da      	str	r2, [r3, #28]
      break;
 8007222:	e06b      	b.n	80072fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	0011      	movs	r1, r2
 800722c:	0018      	movs	r0, r3
 800722e:	f000 fb6f 	bl	8007910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69da      	ldr	r2, [r3, #28]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2180      	movs	r1, #128	@ 0x80
 800723e:	0109      	lsls	r1, r1, #4
 8007240:	430a      	orrs	r2, r1
 8007242:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	69da      	ldr	r2, [r3, #28]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4932      	ldr	r1, [pc, #200]	@ (8007318 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007250:	400a      	ands	r2, r1
 8007252:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	69d9      	ldr	r1, [r3, #28]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	021a      	lsls	r2, r3, #8
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	61da      	str	r2, [r3, #28]
      break;
 8007268:	e048      	b.n	80072fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	0011      	movs	r1, r2
 8007272:	0018      	movs	r0, r3
 8007274:	f000 fbb0 	bl	80079d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2108      	movs	r1, #8
 8007284:	430a      	orrs	r2, r1
 8007286:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2104      	movs	r1, #4
 8007294:	438a      	bics	r2, r1
 8007296:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	691a      	ldr	r2, [r3, #16]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80072aa:	e027      	b.n	80072fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	0011      	movs	r1, r2
 80072b4:	0018      	movs	r0, r3
 80072b6:	f000 fbe9 	bl	8007a8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2180      	movs	r1, #128	@ 0x80
 80072c6:	0109      	lsls	r1, r1, #4
 80072c8:	430a      	orrs	r2, r1
 80072ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4910      	ldr	r1, [pc, #64]	@ (8007318 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80072d8:	400a      	ands	r2, r1
 80072da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	021a      	lsls	r2, r3, #8
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80072f0:	e004      	b.n	80072fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80072f2:	2317      	movs	r3, #23
 80072f4:	18fb      	adds	r3, r7, r3
 80072f6:	2201      	movs	r2, #1
 80072f8:	701a      	strb	r2, [r3, #0]
      break;
 80072fa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	223c      	movs	r2, #60	@ 0x3c
 8007300:	2100      	movs	r1, #0
 8007302:	5499      	strb	r1, [r3, r2]

  return status;
 8007304:	2317      	movs	r3, #23
 8007306:	18fb      	adds	r3, r7, r3
 8007308:	781b      	ldrb	r3, [r3, #0]
}
 800730a:	0018      	movs	r0, r3
 800730c:	46bd      	mov	sp, r7
 800730e:	b006      	add	sp, #24
 8007310:	bd80      	pop	{r7, pc}
 8007312:	46c0      	nop			@ (mov r8, r8)
 8007314:	080081b8 	.word	0x080081b8
 8007318:	fffffbff 	.word	0xfffffbff

0800731c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007326:	230f      	movs	r3, #15
 8007328:	18fb      	adds	r3, r7, r3
 800732a:	2200      	movs	r2, #0
 800732c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	223c      	movs	r2, #60	@ 0x3c
 8007332:	5c9b      	ldrb	r3, [r3, r2]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_TIM_ConfigClockSource+0x20>
 8007338:	2302      	movs	r3, #2
 800733a:	e0bc      	b.n	80074b6 <HAL_TIM_ConfigClockSource+0x19a>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	223c      	movs	r2, #60	@ 0x3c
 8007340:	2101      	movs	r1, #1
 8007342:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	223d      	movs	r2, #61	@ 0x3d
 8007348:	2102      	movs	r1, #2
 800734a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4a5a      	ldr	r2, [pc, #360]	@ (80074c0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007358:	4013      	ands	r3, r2
 800735a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4a59      	ldr	r2, [pc, #356]	@ (80074c4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8007360:	4013      	ands	r3, r2
 8007362:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2280      	movs	r2, #128	@ 0x80
 8007372:	0192      	lsls	r2, r2, #6
 8007374:	4293      	cmp	r3, r2
 8007376:	d040      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0xde>
 8007378:	2280      	movs	r2, #128	@ 0x80
 800737a:	0192      	lsls	r2, r2, #6
 800737c:	4293      	cmp	r3, r2
 800737e:	d900      	bls.n	8007382 <HAL_TIM_ConfigClockSource+0x66>
 8007380:	e088      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x178>
 8007382:	2280      	movs	r2, #128	@ 0x80
 8007384:	0152      	lsls	r2, r2, #5
 8007386:	4293      	cmp	r3, r2
 8007388:	d100      	bne.n	800738c <HAL_TIM_ConfigClockSource+0x70>
 800738a:	e088      	b.n	800749e <HAL_TIM_ConfigClockSource+0x182>
 800738c:	2280      	movs	r2, #128	@ 0x80
 800738e:	0152      	lsls	r2, r2, #5
 8007390:	4293      	cmp	r3, r2
 8007392:	d900      	bls.n	8007396 <HAL_TIM_ConfigClockSource+0x7a>
 8007394:	e07e      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x178>
 8007396:	2b70      	cmp	r3, #112	@ 0x70
 8007398:	d018      	beq.n	80073cc <HAL_TIM_ConfigClockSource+0xb0>
 800739a:	d900      	bls.n	800739e <HAL_TIM_ConfigClockSource+0x82>
 800739c:	e07a      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x178>
 800739e:	2b60      	cmp	r3, #96	@ 0x60
 80073a0:	d04f      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x126>
 80073a2:	d900      	bls.n	80073a6 <HAL_TIM_ConfigClockSource+0x8a>
 80073a4:	e076      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x178>
 80073a6:	2b50      	cmp	r3, #80	@ 0x50
 80073a8:	d03b      	beq.n	8007422 <HAL_TIM_ConfigClockSource+0x106>
 80073aa:	d900      	bls.n	80073ae <HAL_TIM_ConfigClockSource+0x92>
 80073ac:	e072      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x178>
 80073ae:	2b40      	cmp	r3, #64	@ 0x40
 80073b0:	d057      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0x146>
 80073b2:	d900      	bls.n	80073b6 <HAL_TIM_ConfigClockSource+0x9a>
 80073b4:	e06e      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x178>
 80073b6:	2b30      	cmp	r3, #48	@ 0x30
 80073b8:	d063      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x166>
 80073ba:	d86b      	bhi.n	8007494 <HAL_TIM_ConfigClockSource+0x178>
 80073bc:	2b20      	cmp	r3, #32
 80073be:	d060      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x166>
 80073c0:	d868      	bhi.n	8007494 <HAL_TIM_ConfigClockSource+0x178>
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d05d      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x166>
 80073c6:	2b10      	cmp	r3, #16
 80073c8:	d05b      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x166>
 80073ca:	e063      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073dc:	f000 fc30 	bl	8007c40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2277      	movs	r2, #119	@ 0x77
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	609a      	str	r2, [r3, #8]
      break;
 80073f8:	e052      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800740a:	f000 fc19 	bl	8007c40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2180      	movs	r1, #128	@ 0x80
 800741a:	01c9      	lsls	r1, r1, #7
 800741c:	430a      	orrs	r2, r1
 800741e:	609a      	str	r2, [r3, #8]
      break;
 8007420:	e03e      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800742e:	001a      	movs	r2, r3
 8007430:	f000 fb8a 	bl	8007b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2150      	movs	r1, #80	@ 0x50
 800743a:	0018      	movs	r0, r3
 800743c:	f000 fbe4 	bl	8007c08 <TIM_ITRx_SetConfig>
      break;
 8007440:	e02e      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800744e:	001a      	movs	r2, r3
 8007450:	f000 fba8 	bl	8007ba4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2160      	movs	r1, #96	@ 0x60
 800745a:	0018      	movs	r0, r3
 800745c:	f000 fbd4 	bl	8007c08 <TIM_ITRx_SetConfig>
      break;
 8007460:	e01e      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800746e:	001a      	movs	r2, r3
 8007470:	f000 fb6a 	bl	8007b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2140      	movs	r1, #64	@ 0x40
 800747a:	0018      	movs	r0, r3
 800747c:	f000 fbc4 	bl	8007c08 <TIM_ITRx_SetConfig>
      break;
 8007480:	e00e      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	0019      	movs	r1, r3
 800748c:	0010      	movs	r0, r2
 800748e:	f000 fbbb 	bl	8007c08 <TIM_ITRx_SetConfig>
      break;
 8007492:	e005      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007494:	230f      	movs	r3, #15
 8007496:	18fb      	adds	r3, r7, r3
 8007498:	2201      	movs	r2, #1
 800749a:	701a      	strb	r2, [r3, #0]
      break;
 800749c:	e000      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800749e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	223d      	movs	r2, #61	@ 0x3d
 80074a4:	2101      	movs	r1, #1
 80074a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	223c      	movs	r2, #60	@ 0x3c
 80074ac:	2100      	movs	r1, #0
 80074ae:	5499      	strb	r1, [r3, r2]

  return status;
 80074b0:	230f      	movs	r3, #15
 80074b2:	18fb      	adds	r3, r7, r3
 80074b4:	781b      	ldrb	r3, [r3, #0]
}
 80074b6:	0018      	movs	r0, r3
 80074b8:	46bd      	mov	sp, r7
 80074ba:	b004      	add	sp, #16
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	46c0      	nop			@ (mov r8, r8)
 80074c0:	ffceff88 	.word	0xffceff88
 80074c4:	ffff00ff 	.word	0xffff00ff

080074c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80074d0:	46c0      	nop			@ (mov r8, r8)
 80074d2:	46bd      	mov	sp, r7
 80074d4:	b002      	add	sp, #8
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074e0:	46c0      	nop			@ (mov r8, r8)
 80074e2:	46bd      	mov	sp, r7
 80074e4:	b002      	add	sp, #8
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074f0:	46c0      	nop			@ (mov r8, r8)
 80074f2:	46bd      	mov	sp, r7
 80074f4:	b002      	add	sp, #8
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007500:	46c0      	nop			@ (mov r8, r8)
 8007502:	46bd      	mov	sp, r7
 8007504:	b002      	add	sp, #8
 8007506:	bd80      	pop	{r7, pc}

08007508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a37      	ldr	r2, [pc, #220]	@ (80075f8 <TIM_Base_SetConfig+0xf0>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d008      	beq.n	8007532 <TIM_Base_SetConfig+0x2a>
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	2380      	movs	r3, #128	@ 0x80
 8007524:	05db      	lsls	r3, r3, #23
 8007526:	429a      	cmp	r2, r3
 8007528:	d003      	beq.n	8007532 <TIM_Base_SetConfig+0x2a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a33      	ldr	r2, [pc, #204]	@ (80075fc <TIM_Base_SetConfig+0xf4>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d108      	bne.n	8007544 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2270      	movs	r2, #112	@ 0x70
 8007536:	4393      	bics	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a2c      	ldr	r2, [pc, #176]	@ (80075f8 <TIM_Base_SetConfig+0xf0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d014      	beq.n	8007576 <TIM_Base_SetConfig+0x6e>
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	2380      	movs	r3, #128	@ 0x80
 8007550:	05db      	lsls	r3, r3, #23
 8007552:	429a      	cmp	r2, r3
 8007554:	d00f      	beq.n	8007576 <TIM_Base_SetConfig+0x6e>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a28      	ldr	r2, [pc, #160]	@ (80075fc <TIM_Base_SetConfig+0xf4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00b      	beq.n	8007576 <TIM_Base_SetConfig+0x6e>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a27      	ldr	r2, [pc, #156]	@ (8007600 <TIM_Base_SetConfig+0xf8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d007      	beq.n	8007576 <TIM_Base_SetConfig+0x6e>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a26      	ldr	r2, [pc, #152]	@ (8007604 <TIM_Base_SetConfig+0xfc>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d003      	beq.n	8007576 <TIM_Base_SetConfig+0x6e>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a25      	ldr	r2, [pc, #148]	@ (8007608 <TIM_Base_SetConfig+0x100>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d108      	bne.n	8007588 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4a24      	ldr	r2, [pc, #144]	@ (800760c <TIM_Base_SetConfig+0x104>)
 800757a:	4013      	ands	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2280      	movs	r2, #128	@ 0x80
 800758c:	4393      	bics	r3, r2
 800758e:	001a      	movs	r2, r3
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	4313      	orrs	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	689a      	ldr	r2, [r3, #8]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a11      	ldr	r2, [pc, #68]	@ (80075f8 <TIM_Base_SetConfig+0xf0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d007      	beq.n	80075c6 <TIM_Base_SetConfig+0xbe>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a12      	ldr	r2, [pc, #72]	@ (8007604 <TIM_Base_SetConfig+0xfc>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d003      	beq.n	80075c6 <TIM_Base_SetConfig+0xbe>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a11      	ldr	r2, [pc, #68]	@ (8007608 <TIM_Base_SetConfig+0x100>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d103      	bne.n	80075ce <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	691a      	ldr	r2, [r3, #16]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	2201      	movs	r2, #1
 80075da:	4013      	ands	r3, r2
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d106      	bne.n	80075ee <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	2201      	movs	r2, #1
 80075e6:	4393      	bics	r3, r2
 80075e8:	001a      	movs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	611a      	str	r2, [r3, #16]
  }
}
 80075ee:	46c0      	nop			@ (mov r8, r8)
 80075f0:	46bd      	mov	sp, r7
 80075f2:	b004      	add	sp, #16
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	46c0      	nop			@ (mov r8, r8)
 80075f8:	40012c00 	.word	0x40012c00
 80075fc:	40000400 	.word	0x40000400
 8007600:	40002000 	.word	0x40002000
 8007604:	40014400 	.word	0x40014400
 8007608:	40014800 	.word	0x40014800
 800760c:	fffffcff 	.word	0xfffffcff

08007610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	2201      	movs	r2, #1
 8007626:	4393      	bics	r3, r2
 8007628:	001a      	movs	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4a2e      	ldr	r2, [pc, #184]	@ (80076f8 <TIM_OC1_SetConfig+0xe8>)
 800763e:	4013      	ands	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2203      	movs	r2, #3
 8007646:	4393      	bics	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	4313      	orrs	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	2202      	movs	r2, #2
 8007658:	4393      	bics	r3, r2
 800765a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	4313      	orrs	r3, r2
 8007664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a24      	ldr	r2, [pc, #144]	@ (80076fc <TIM_OC1_SetConfig+0xec>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d007      	beq.n	800767e <TIM_OC1_SetConfig+0x6e>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a23      	ldr	r2, [pc, #140]	@ (8007700 <TIM_OC1_SetConfig+0xf0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d003      	beq.n	800767e <TIM_OC1_SetConfig+0x6e>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a22      	ldr	r2, [pc, #136]	@ (8007704 <TIM_OC1_SetConfig+0xf4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d10c      	bne.n	8007698 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2208      	movs	r2, #8
 8007682:	4393      	bics	r3, r2
 8007684:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	4313      	orrs	r3, r2
 800768e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2204      	movs	r2, #4
 8007694:	4393      	bics	r3, r2
 8007696:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a18      	ldr	r2, [pc, #96]	@ (80076fc <TIM_OC1_SetConfig+0xec>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d007      	beq.n	80076b0 <TIM_OC1_SetConfig+0xa0>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a17      	ldr	r2, [pc, #92]	@ (8007700 <TIM_OC1_SetConfig+0xf0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d003      	beq.n	80076b0 <TIM_OC1_SetConfig+0xa0>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a16      	ldr	r2, [pc, #88]	@ (8007704 <TIM_OC1_SetConfig+0xf4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d111      	bne.n	80076d4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	4a15      	ldr	r2, [pc, #84]	@ (8007708 <TIM_OC1_SetConfig+0xf8>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	4a14      	ldr	r2, [pc, #80]	@ (800770c <TIM_OC1_SetConfig+0xfc>)
 80076bc:	4013      	ands	r3, r2
 80076be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	621a      	str	r2, [r3, #32]
}
 80076ee:	46c0      	nop			@ (mov r8, r8)
 80076f0:	46bd      	mov	sp, r7
 80076f2:	b006      	add	sp, #24
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	46c0      	nop			@ (mov r8, r8)
 80076f8:	fffeff8f 	.word	0xfffeff8f
 80076fc:	40012c00 	.word	0x40012c00
 8007700:	40014400 	.word	0x40014400
 8007704:	40014800 	.word	0x40014800
 8007708:	fffffeff 	.word	0xfffffeff
 800770c:	fffffdff 	.word	0xfffffdff

08007710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	2210      	movs	r2, #16
 8007726:	4393      	bics	r3, r2
 8007728:	001a      	movs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4a2c      	ldr	r2, [pc, #176]	@ (80077f0 <TIM_OC2_SetConfig+0xe0>)
 800773e:	4013      	ands	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4a2b      	ldr	r2, [pc, #172]	@ (80077f4 <TIM_OC2_SetConfig+0xe4>)
 8007746:	4013      	ands	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	021b      	lsls	r3, r3, #8
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2220      	movs	r2, #32
 800775a:	4393      	bics	r3, r2
 800775c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	011b      	lsls	r3, r3, #4
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	4313      	orrs	r3, r2
 8007768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a22      	ldr	r2, [pc, #136]	@ (80077f8 <TIM_OC2_SetConfig+0xe8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d10d      	bne.n	800778e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2280      	movs	r2, #128	@ 0x80
 8007776:	4393      	bics	r3, r2
 8007778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	011b      	lsls	r3, r3, #4
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2240      	movs	r2, #64	@ 0x40
 800778a:	4393      	bics	r3, r2
 800778c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a19      	ldr	r2, [pc, #100]	@ (80077f8 <TIM_OC2_SetConfig+0xe8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d007      	beq.n	80077a6 <TIM_OC2_SetConfig+0x96>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a18      	ldr	r2, [pc, #96]	@ (80077fc <TIM_OC2_SetConfig+0xec>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d003      	beq.n	80077a6 <TIM_OC2_SetConfig+0x96>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a17      	ldr	r2, [pc, #92]	@ (8007800 <TIM_OC2_SetConfig+0xf0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d113      	bne.n	80077ce <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	4a16      	ldr	r2, [pc, #88]	@ (8007804 <TIM_OC2_SetConfig+0xf4>)
 80077aa:	4013      	ands	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	4a15      	ldr	r2, [pc, #84]	@ (8007808 <TIM_OC2_SetConfig+0xf8>)
 80077b2:	4013      	ands	r3, r2
 80077b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	4313      	orrs	r3, r2
 80077c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	621a      	str	r2, [r3, #32]
}
 80077e8:	46c0      	nop			@ (mov r8, r8)
 80077ea:	46bd      	mov	sp, r7
 80077ec:	b006      	add	sp, #24
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	feff8fff 	.word	0xfeff8fff
 80077f4:	fffffcff 	.word	0xfffffcff
 80077f8:	40012c00 	.word	0x40012c00
 80077fc:	40014400 	.word	0x40014400
 8007800:	40014800 	.word	0x40014800
 8007804:	fffffbff 	.word	0xfffffbff
 8007808:	fffff7ff 	.word	0xfffff7ff

0800780c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	4a31      	ldr	r2, [pc, #196]	@ (80078e8 <TIM_OC3_SetConfig+0xdc>)
 8007822:	401a      	ands	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4a2d      	ldr	r2, [pc, #180]	@ (80078ec <TIM_OC3_SetConfig+0xe0>)
 8007838:	4013      	ands	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2203      	movs	r2, #3
 8007840:	4393      	bics	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	4a27      	ldr	r2, [pc, #156]	@ (80078f0 <TIM_OC3_SetConfig+0xe4>)
 8007852:	4013      	ands	r3, r2
 8007854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	021b      	lsls	r3, r3, #8
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	4313      	orrs	r3, r2
 8007860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a23      	ldr	r2, [pc, #140]	@ (80078f4 <TIM_OC3_SetConfig+0xe8>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d10d      	bne.n	8007886 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	4a22      	ldr	r2, [pc, #136]	@ (80078f8 <TIM_OC3_SetConfig+0xec>)
 800786e:	4013      	ands	r3, r2
 8007870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	4313      	orrs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	4a1e      	ldr	r2, [pc, #120]	@ (80078fc <TIM_OC3_SetConfig+0xf0>)
 8007882:	4013      	ands	r3, r2
 8007884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a1a      	ldr	r2, [pc, #104]	@ (80078f4 <TIM_OC3_SetConfig+0xe8>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d007      	beq.n	800789e <TIM_OC3_SetConfig+0x92>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a1b      	ldr	r2, [pc, #108]	@ (8007900 <TIM_OC3_SetConfig+0xf4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d003      	beq.n	800789e <TIM_OC3_SetConfig+0x92>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a1a      	ldr	r2, [pc, #104]	@ (8007904 <TIM_OC3_SetConfig+0xf8>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d113      	bne.n	80078c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	4a19      	ldr	r2, [pc, #100]	@ (8007908 <TIM_OC3_SetConfig+0xfc>)
 80078a2:	4013      	ands	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	4a18      	ldr	r2, [pc, #96]	@ (800790c <TIM_OC3_SetConfig+0x100>)
 80078aa:	4013      	ands	r3, r2
 80078ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	011b      	lsls	r3, r3, #4
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	011b      	lsls	r3, r3, #4
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	621a      	str	r2, [r3, #32]
}
 80078e0:	46c0      	nop			@ (mov r8, r8)
 80078e2:	46bd      	mov	sp, r7
 80078e4:	b006      	add	sp, #24
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	fffffeff 	.word	0xfffffeff
 80078ec:	fffeff8f 	.word	0xfffeff8f
 80078f0:	fffffdff 	.word	0xfffffdff
 80078f4:	40012c00 	.word	0x40012c00
 80078f8:	fffff7ff 	.word	0xfffff7ff
 80078fc:	fffffbff 	.word	0xfffffbff
 8007900:	40014400 	.word	0x40014400
 8007904:	40014800 	.word	0x40014800
 8007908:	ffffefff 	.word	0xffffefff
 800790c:	ffffdfff 	.word	0xffffdfff

08007910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	4a24      	ldr	r2, [pc, #144]	@ (80079b8 <TIM_OC4_SetConfig+0xa8>)
 8007926:	401a      	ands	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4a20      	ldr	r2, [pc, #128]	@ (80079bc <TIM_OC4_SetConfig+0xac>)
 800793c:	4013      	ands	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4a1f      	ldr	r2, [pc, #124]	@ (80079c0 <TIM_OC4_SetConfig+0xb0>)
 8007944:	4013      	ands	r3, r2
 8007946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4313      	orrs	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	4a1b      	ldr	r2, [pc, #108]	@ (80079c4 <TIM_OC4_SetConfig+0xb4>)
 8007958:	4013      	ands	r3, r2
 800795a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	031b      	lsls	r3, r3, #12
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4313      	orrs	r3, r2
 8007966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a17      	ldr	r2, [pc, #92]	@ (80079c8 <TIM_OC4_SetConfig+0xb8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d007      	beq.n	8007980 <TIM_OC4_SetConfig+0x70>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a16      	ldr	r2, [pc, #88]	@ (80079cc <TIM_OC4_SetConfig+0xbc>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d003      	beq.n	8007980 <TIM_OC4_SetConfig+0x70>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a15      	ldr	r2, [pc, #84]	@ (80079d0 <TIM_OC4_SetConfig+0xc0>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d109      	bne.n	8007994 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	4a14      	ldr	r2, [pc, #80]	@ (80079d4 <TIM_OC4_SetConfig+0xc4>)
 8007984:	4013      	ands	r3, r2
 8007986:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	019b      	lsls	r3, r3, #6
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	4313      	orrs	r3, r2
 8007992:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	621a      	str	r2, [r3, #32]
}
 80079ae:	46c0      	nop			@ (mov r8, r8)
 80079b0:	46bd      	mov	sp, r7
 80079b2:	b006      	add	sp, #24
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	46c0      	nop			@ (mov r8, r8)
 80079b8:	ffffefff 	.word	0xffffefff
 80079bc:	feff8fff 	.word	0xfeff8fff
 80079c0:	fffffcff 	.word	0xfffffcff
 80079c4:	ffffdfff 	.word	0xffffdfff
 80079c8:	40012c00 	.word	0x40012c00
 80079cc:	40014400 	.word	0x40014400
 80079d0:	40014800 	.word	0x40014800
 80079d4:	ffffbfff 	.word	0xffffbfff

080079d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	4a21      	ldr	r2, [pc, #132]	@ (8007a74 <TIM_OC5_SetConfig+0x9c>)
 80079ee:	401a      	ands	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4a1d      	ldr	r2, [pc, #116]	@ (8007a78 <TIM_OC5_SetConfig+0xa0>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	4a19      	ldr	r2, [pc, #100]	@ (8007a7c <TIM_OC5_SetConfig+0xa4>)
 8007a16:	4013      	ands	r3, r2
 8007a18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	041b      	lsls	r3, r3, #16
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a15      	ldr	r2, [pc, #84]	@ (8007a80 <TIM_OC5_SetConfig+0xa8>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d007      	beq.n	8007a3e <TIM_OC5_SetConfig+0x66>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a14      	ldr	r2, [pc, #80]	@ (8007a84 <TIM_OC5_SetConfig+0xac>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d003      	beq.n	8007a3e <TIM_OC5_SetConfig+0x66>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a13      	ldr	r2, [pc, #76]	@ (8007a88 <TIM_OC5_SetConfig+0xb0>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d109      	bne.n	8007a52 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	4a0c      	ldr	r2, [pc, #48]	@ (8007a74 <TIM_OC5_SetConfig+0x9c>)
 8007a42:	4013      	ands	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	021b      	lsls	r3, r3, #8
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	621a      	str	r2, [r3, #32]
}
 8007a6c:	46c0      	nop			@ (mov r8, r8)
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b006      	add	sp, #24
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	fffeffff 	.word	0xfffeffff
 8007a78:	fffeff8f 	.word	0xfffeff8f
 8007a7c:	fffdffff 	.word	0xfffdffff
 8007a80:	40012c00 	.word	0x40012c00
 8007a84:	40014400 	.word	0x40014400
 8007a88:	40014800 	.word	0x40014800

08007a8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	4a22      	ldr	r2, [pc, #136]	@ (8007b2c <TIM_OC6_SetConfig+0xa0>)
 8007aa2:	401a      	ands	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8007b30 <TIM_OC6_SetConfig+0xa4>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	021b      	lsls	r3, r3, #8
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	4a1a      	ldr	r2, [pc, #104]	@ (8007b34 <TIM_OC6_SetConfig+0xa8>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	051b      	lsls	r3, r3, #20
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a16      	ldr	r2, [pc, #88]	@ (8007b38 <TIM_OC6_SetConfig+0xac>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d007      	beq.n	8007af4 <TIM_OC6_SetConfig+0x68>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a15      	ldr	r2, [pc, #84]	@ (8007b3c <TIM_OC6_SetConfig+0xb0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d003      	beq.n	8007af4 <TIM_OC6_SetConfig+0x68>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a14      	ldr	r2, [pc, #80]	@ (8007b40 <TIM_OC6_SetConfig+0xb4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d109      	bne.n	8007b08 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	4a13      	ldr	r2, [pc, #76]	@ (8007b44 <TIM_OC6_SetConfig+0xb8>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	029b      	lsls	r3, r3, #10
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	621a      	str	r2, [r3, #32]
}
 8007b22:	46c0      	nop			@ (mov r8, r8)
 8007b24:	46bd      	mov	sp, r7
 8007b26:	b006      	add	sp, #24
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	46c0      	nop			@ (mov r8, r8)
 8007b2c:	ffefffff 	.word	0xffefffff
 8007b30:	feff8fff 	.word	0xfeff8fff
 8007b34:	ffdfffff 	.word	0xffdfffff
 8007b38:	40012c00 	.word	0x40012c00
 8007b3c:	40014400 	.word	0x40014400
 8007b40:	40014800 	.word	0x40014800
 8007b44:	fffbffff 	.word	0xfffbffff

08007b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	4393      	bics	r3, r2
 8007b62:	001a      	movs	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	22f0      	movs	r2, #240	@ 0xf0
 8007b72:	4393      	bics	r3, r2
 8007b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	011b      	lsls	r3, r3, #4
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	220a      	movs	r2, #10
 8007b84:	4393      	bics	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	621a      	str	r2, [r3, #32]
}
 8007b9c:	46c0      	nop			@ (mov r8, r8)
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	b006      	add	sp, #24
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	2210      	movs	r2, #16
 8007bbc:	4393      	bics	r3, r2
 8007bbe:	001a      	movs	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8007c04 <TIM_TI2_ConfigInputStage+0x60>)
 8007bce:	4013      	ands	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	031b      	lsls	r3, r3, #12
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	22a0      	movs	r2, #160	@ 0xa0
 8007be0:	4393      	bics	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	621a      	str	r2, [r3, #32]
}
 8007bfa:	46c0      	nop			@ (mov r8, r8)
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	b006      	add	sp, #24
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	46c0      	nop			@ (mov r8, r8)
 8007c04:	ffff0fff 	.word	0xffff0fff

08007c08 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4a08      	ldr	r2, [pc, #32]	@ (8007c3c <TIM_ITRx_SetConfig+0x34>)
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	2207      	movs	r2, #7
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	609a      	str	r2, [r3, #8]
}
 8007c32:	46c0      	nop			@ (mov r8, r8)
 8007c34:	46bd      	mov	sp, r7
 8007c36:	b004      	add	sp, #16
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	46c0      	nop			@ (mov r8, r8)
 8007c3c:	ffcfff8f 	.word	0xffcfff8f

08007c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	4a09      	ldr	r2, [pc, #36]	@ (8007c7c <TIM_ETR_SetConfig+0x3c>)
 8007c58:	4013      	ands	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	021a      	lsls	r2, r3, #8
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	431a      	orrs	r2, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	609a      	str	r2, [r3, #8]
}
 8007c74:	46c0      	nop			@ (mov r8, r8)
 8007c76:	46bd      	mov	sp, r7
 8007c78:	b006      	add	sp, #24
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	ffff00ff 	.word	0xffff00ff

08007c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	221f      	movs	r2, #31
 8007c90:	4013      	ands	r3, r2
 8007c92:	2201      	movs	r2, #1
 8007c94:	409a      	lsls	r2, r3
 8007c96:	0013      	movs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	43d2      	mvns	r2, r2
 8007ca2:	401a      	ands	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a1a      	ldr	r2, [r3, #32]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	211f      	movs	r1, #31
 8007cb0:	400b      	ands	r3, r1
 8007cb2:	6879      	ldr	r1, [r7, #4]
 8007cb4:	4099      	lsls	r1, r3
 8007cb6:	000b      	movs	r3, r1
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	621a      	str	r2, [r3, #32]
}
 8007cbe:	46c0      	nop			@ (mov r8, r8)
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	b006      	add	sp, #24
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d108      	bne.n	8007cea <HAL_TIMEx_PWMN_Start+0x22>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2244      	movs	r2, #68	@ 0x44
 8007cdc:	5c9b      	ldrb	r3, [r3, r2]
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	1e5a      	subs	r2, r3, #1
 8007ce4:	4193      	sbcs	r3, r2
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	e01f      	b.n	8007d2a <HAL_TIMEx_PWMN_Start+0x62>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d108      	bne.n	8007d02 <HAL_TIMEx_PWMN_Start+0x3a>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2245      	movs	r2, #69	@ 0x45
 8007cf4:	5c9b      	ldrb	r3, [r3, r2]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	1e5a      	subs	r2, r3, #1
 8007cfc:	4193      	sbcs	r3, r2
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	e013      	b.n	8007d2a <HAL_TIMEx_PWMN_Start+0x62>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b08      	cmp	r3, #8
 8007d06:	d108      	bne.n	8007d1a <HAL_TIMEx_PWMN_Start+0x52>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2246      	movs	r2, #70	@ 0x46
 8007d0c:	5c9b      	ldrb	r3, [r3, r2]
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	3b01      	subs	r3, #1
 8007d12:	1e5a      	subs	r2, r3, #1
 8007d14:	4193      	sbcs	r3, r2
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	e007      	b.n	8007d2a <HAL_TIMEx_PWMN_Start+0x62>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2247      	movs	r2, #71	@ 0x47
 8007d1e:	5c9b      	ldrb	r3, [r3, r2]
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	3b01      	subs	r3, #1
 8007d24:	1e5a      	subs	r2, r3, #1
 8007d26:	4193      	sbcs	r3, r2
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e05d      	b.n	8007dee <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <HAL_TIMEx_PWMN_Start+0x7a>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2244      	movs	r2, #68	@ 0x44
 8007d3c:	2102      	movs	r1, #2
 8007d3e:	5499      	strb	r1, [r3, r2]
 8007d40:	e013      	b.n	8007d6a <HAL_TIMEx_PWMN_Start+0xa2>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	d104      	bne.n	8007d52 <HAL_TIMEx_PWMN_Start+0x8a>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2245      	movs	r2, #69	@ 0x45
 8007d4c:	2102      	movs	r1, #2
 8007d4e:	5499      	strb	r1, [r3, r2]
 8007d50:	e00b      	b.n	8007d6a <HAL_TIMEx_PWMN_Start+0xa2>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d104      	bne.n	8007d62 <HAL_TIMEx_PWMN_Start+0x9a>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2246      	movs	r2, #70	@ 0x46
 8007d5c:	2102      	movs	r1, #2
 8007d5e:	5499      	strb	r1, [r3, r2]
 8007d60:	e003      	b.n	8007d6a <HAL_TIMEx_PWMN_Start+0xa2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2247      	movs	r2, #71	@ 0x47
 8007d66:	2102      	movs	r1, #2
 8007d68:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	2204      	movs	r2, #4
 8007d72:	0018      	movs	r0, r3
 8007d74:	f000 f962 	bl	800803c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2180      	movs	r1, #128	@ 0x80
 8007d84:	0209      	lsls	r1, r1, #8
 8007d86:	430a      	orrs	r2, r1
 8007d88:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007df8 <HAL_TIMEx_PWMN_Start+0x130>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00a      	beq.n	8007daa <HAL_TIMEx_PWMN_Start+0xe2>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	2380      	movs	r3, #128	@ 0x80
 8007d9a:	05db      	lsls	r3, r3, #23
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d004      	beq.n	8007daa <HAL_TIMEx_PWMN_Start+0xe2>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a15      	ldr	r2, [pc, #84]	@ (8007dfc <HAL_TIMEx_PWMN_Start+0x134>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d116      	bne.n	8007dd8 <HAL_TIMEx_PWMN_Start+0x110>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	4a13      	ldr	r2, [pc, #76]	@ (8007e00 <HAL_TIMEx_PWMN_Start+0x138>)
 8007db2:	4013      	ands	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b06      	cmp	r3, #6
 8007dba:	d016      	beq.n	8007dea <HAL_TIMEx_PWMN_Start+0x122>
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	2380      	movs	r3, #128	@ 0x80
 8007dc0:	025b      	lsls	r3, r3, #9
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d011      	beq.n	8007dea <HAL_TIMEx_PWMN_Start+0x122>
    {
      __HAL_TIM_ENABLE(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd6:	e008      	b.n	8007dea <HAL_TIMEx_PWMN_Start+0x122>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2101      	movs	r1, #1
 8007de4:	430a      	orrs	r2, r1
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	e000      	b.n	8007dec <HAL_TIMEx_PWMN_Start+0x124>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dea:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	0018      	movs	r0, r3
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b004      	add	sp, #16
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	46c0      	nop			@ (mov r8, r8)
 8007df8:	40012c00 	.word	0x40012c00
 8007dfc:	40000400 	.word	0x40000400
 8007e00:	00010007 	.word	0x00010007

08007e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	223c      	movs	r2, #60	@ 0x3c
 8007e12:	5c9b      	ldrb	r3, [r3, r2]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e050      	b.n	8007ebe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	223c      	movs	r2, #60	@ 0x3c
 8007e20:	2101      	movs	r1, #1
 8007e22:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	223d      	movs	r2, #61	@ 0x3d
 8007e28:	2102      	movs	r1, #2
 8007e2a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a21      	ldr	r2, [pc, #132]	@ (8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d108      	bne.n	8007e58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	4a20      	ldr	r2, [pc, #128]	@ (8007ecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2270      	movs	r2, #112	@ 0x70
 8007e5c:	4393      	bics	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a14      	ldr	r2, [pc, #80]	@ (8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d00a      	beq.n	8007e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	2380      	movs	r3, #128	@ 0x80
 8007e82:	05db      	lsls	r3, r3, #23
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d004      	beq.n	8007e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a10      	ldr	r2, [pc, #64]	@ (8007ed0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d10c      	bne.n	8007eac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2280      	movs	r2, #128	@ 0x80
 8007e96:	4393      	bics	r3, r2
 8007e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	223d      	movs	r2, #61	@ 0x3d
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	223c      	movs	r2, #60	@ 0x3c
 8007eb8:	2100      	movs	r1, #0
 8007eba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	b004      	add	sp, #16
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	46c0      	nop			@ (mov r8, r8)
 8007ec8:	40012c00 	.word	0x40012c00
 8007ecc:	ff0fffff 	.word	0xff0fffff
 8007ed0:	40000400 	.word	0x40000400

08007ed4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	223c      	movs	r2, #60	@ 0x3c
 8007ee6:	5c9b      	ldrb	r3, [r3, r2]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007eec:	2302      	movs	r3, #2
 8007eee:	e06f      	b.n	8007fd0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	223c      	movs	r2, #60	@ 0x3c
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	22ff      	movs	r2, #255	@ 0xff
 8007efc:	4393      	bics	r3, r2
 8007efe:	001a      	movs	r2, r3
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4a33      	ldr	r2, [pc, #204]	@ (8007fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8007f0c:	401a      	ands	r2, r3
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a30      	ldr	r2, [pc, #192]	@ (8007fdc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007f1a:	401a      	ands	r2, r3
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4a2e      	ldr	r2, [pc, #184]	@ (8007fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8007f28:	401a      	ands	r2, r3
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	4a2b      	ldr	r2, [pc, #172]	@ (8007fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007f36:	401a      	ands	r2, r3
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4a29      	ldr	r2, [pc, #164]	@ (8007fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007f44:	401a      	ands	r2, r3
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4a26      	ldr	r2, [pc, #152]	@ (8007fec <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007f52:	401a      	ands	r2, r3
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4a24      	ldr	r2, [pc, #144]	@ (8007ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007f60:	401a      	ands	r2, r3
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	041b      	lsls	r3, r3, #16
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4a21      	ldr	r2, [pc, #132]	@ (8007ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007f70:	401a      	ands	r2, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d11c      	bne.n	8007fbe <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4a1d      	ldr	r2, [pc, #116]	@ (8007ffc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8007f88:	401a      	ands	r2, r3
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8e:	051b      	lsls	r3, r3, #20
 8007f90:	4313      	orrs	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4a1a      	ldr	r2, [pc, #104]	@ (8008000 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8007f98:	401a      	ands	r2, r3
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4a17      	ldr	r2, [pc, #92]	@ (8008004 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8007fa6:	401a      	ands	r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4a15      	ldr	r2, [pc, #84]	@ (8008008 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007fb4:	401a      	ands	r2, r3
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	223c      	movs	r2, #60	@ 0x3c
 8007fca:	2100      	movs	r1, #0
 8007fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	b004      	add	sp, #16
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	fffffcff 	.word	0xfffffcff
 8007fdc:	fffffbff 	.word	0xfffffbff
 8007fe0:	fffff7ff 	.word	0xfffff7ff
 8007fe4:	ffffefff 	.word	0xffffefff
 8007fe8:	ffffdfff 	.word	0xffffdfff
 8007fec:	ffffbfff 	.word	0xffffbfff
 8007ff0:	fff0ffff 	.word	0xfff0ffff
 8007ff4:	efffffff 	.word	0xefffffff
 8007ff8:	40012c00 	.word	0x40012c00
 8007ffc:	ff0fffff 	.word	0xff0fffff
 8008000:	feffffff 	.word	0xfeffffff
 8008004:	fdffffff 	.word	0xfdffffff
 8008008:	dfffffff 	.word	0xdfffffff

0800800c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008014:	46c0      	nop			@ (mov r8, r8)
 8008016:	46bd      	mov	sp, r7
 8008018:	b002      	add	sp, #8
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008024:	46c0      	nop			@ (mov r8, r8)
 8008026:	46bd      	mov	sp, r7
 8008028:	b002      	add	sp, #8
 800802a:	bd80      	pop	{r7, pc}

0800802c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008034:	46c0      	nop			@ (mov r8, r8)
 8008036:	46bd      	mov	sp, r7
 8008038:	b002      	add	sp, #8
 800803a:	bd80      	pop	{r7, pc}

0800803c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	220f      	movs	r2, #15
 800804c:	4013      	ands	r3, r2
 800804e:	2204      	movs	r2, #4
 8008050:	409a      	lsls	r2, r3
 8008052:	0013      	movs	r3, r2
 8008054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	43d2      	mvns	r2, r2
 800805e:	401a      	ands	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a1a      	ldr	r2, [r3, #32]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	210f      	movs	r1, #15
 800806c:	400b      	ands	r3, r1
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	4099      	lsls	r1, r3
 8008072:	000b      	movs	r3, r1
 8008074:	431a      	orrs	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	621a      	str	r2, [r3, #32]
}
 800807a:	46c0      	nop			@ (mov r8, r8)
 800807c:	46bd      	mov	sp, r7
 800807e:	b006      	add	sp, #24
 8008080:	bd80      	pop	{r7, pc}

08008082 <memset>:
 8008082:	0003      	movs	r3, r0
 8008084:	1882      	adds	r2, r0, r2
 8008086:	4293      	cmp	r3, r2
 8008088:	d100      	bne.n	800808c <memset+0xa>
 800808a:	4770      	bx	lr
 800808c:	7019      	strb	r1, [r3, #0]
 800808e:	3301      	adds	r3, #1
 8008090:	e7f9      	b.n	8008086 <memset+0x4>
	...

08008094 <__libc_init_array>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	2600      	movs	r6, #0
 8008098:	4c0c      	ldr	r4, [pc, #48]	@ (80080cc <__libc_init_array+0x38>)
 800809a:	4d0d      	ldr	r5, [pc, #52]	@ (80080d0 <__libc_init_array+0x3c>)
 800809c:	1b64      	subs	r4, r4, r5
 800809e:	10a4      	asrs	r4, r4, #2
 80080a0:	42a6      	cmp	r6, r4
 80080a2:	d109      	bne.n	80080b8 <__libc_init_array+0x24>
 80080a4:	2600      	movs	r6, #0
 80080a6:	f000 f85b 	bl	8008160 <_init>
 80080aa:	4c0a      	ldr	r4, [pc, #40]	@ (80080d4 <__libc_init_array+0x40>)
 80080ac:	4d0a      	ldr	r5, [pc, #40]	@ (80080d8 <__libc_init_array+0x44>)
 80080ae:	1b64      	subs	r4, r4, r5
 80080b0:	10a4      	asrs	r4, r4, #2
 80080b2:	42a6      	cmp	r6, r4
 80080b4:	d105      	bne.n	80080c2 <__libc_init_array+0x2e>
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
 80080b8:	00b3      	lsls	r3, r6, #2
 80080ba:	58eb      	ldr	r3, [r5, r3]
 80080bc:	4798      	blx	r3
 80080be:	3601      	adds	r6, #1
 80080c0:	e7ee      	b.n	80080a0 <__libc_init_array+0xc>
 80080c2:	00b3      	lsls	r3, r6, #2
 80080c4:	58eb      	ldr	r3, [r5, r3]
 80080c6:	4798      	blx	r3
 80080c8:	3601      	adds	r6, #1
 80080ca:	e7f2      	b.n	80080b2 <__libc_init_array+0x1e>
 80080cc:	0800820c 	.word	0x0800820c
 80080d0:	0800820c 	.word	0x0800820c
 80080d4:	08008210 	.word	0x08008210
 80080d8:	0800820c 	.word	0x0800820c

080080dc <floorf>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	0045      	lsls	r5, r0, #1
 80080e0:	086e      	lsrs	r6, r5, #1
 80080e2:	0e2d      	lsrs	r5, r5, #24
 80080e4:	3d7f      	subs	r5, #127	@ 0x7f
 80080e6:	0007      	movs	r7, r0
 80080e8:	2d16      	cmp	r5, #22
 80080ea:	dc2c      	bgt.n	8008146 <floorf+0x6a>
 80080ec:	0004      	movs	r4, r0
 80080ee:	2d00      	cmp	r5, #0
 80080f0:	da15      	bge.n	800811e <floorf+0x42>
 80080f2:	4919      	ldr	r1, [pc, #100]	@ (8008158 <floorf+0x7c>)
 80080f4:	f7f8 f8cc 	bl	8000290 <__aeabi_fadd>
 80080f8:	2100      	movs	r1, #0
 80080fa:	f7f8 f8b5 	bl	8000268 <__aeabi_fcmpgt>
 80080fe:	2800      	cmp	r0, #0
 8008100:	d00b      	beq.n	800811a <floorf+0x3e>
 8008102:	2400      	movs	r4, #0
 8008104:	42a7      	cmp	r7, r4
 8008106:	da08      	bge.n	800811a <floorf+0x3e>
 8008108:	1e73      	subs	r3, r6, #1
 800810a:	419e      	sbcs	r6, r3
 800810c:	23fe      	movs	r3, #254	@ 0xfe
 800810e:	4274      	negs	r4, r6
 8008110:	059b      	lsls	r3, r3, #22
 8008112:	401c      	ands	r4, r3
 8008114:	2380      	movs	r3, #128	@ 0x80
 8008116:	061b      	lsls	r3, r3, #24
 8008118:	18e4      	adds	r4, r4, r3
 800811a:	1c20      	adds	r0, r4, #0
 800811c:	e01a      	b.n	8008154 <floorf+0x78>
 800811e:	4e0f      	ldr	r6, [pc, #60]	@ (800815c <floorf+0x80>)
 8008120:	412e      	asrs	r6, r5
 8008122:	4206      	tst	r6, r0
 8008124:	d016      	beq.n	8008154 <floorf+0x78>
 8008126:	490c      	ldr	r1, [pc, #48]	@ (8008158 <floorf+0x7c>)
 8008128:	f7f8 f8b2 	bl	8000290 <__aeabi_fadd>
 800812c:	2100      	movs	r1, #0
 800812e:	f7f8 f89b 	bl	8000268 <__aeabi_fcmpgt>
 8008132:	2800      	cmp	r0, #0
 8008134:	d0f1      	beq.n	800811a <floorf+0x3e>
 8008136:	2f00      	cmp	r7, #0
 8008138:	da03      	bge.n	8008142 <floorf+0x66>
 800813a:	2380      	movs	r3, #128	@ 0x80
 800813c:	041b      	lsls	r3, r3, #16
 800813e:	412b      	asrs	r3, r5
 8008140:	18fc      	adds	r4, r7, r3
 8008142:	43b4      	bics	r4, r6
 8008144:	e7e9      	b.n	800811a <floorf+0x3e>
 8008146:	23ff      	movs	r3, #255	@ 0xff
 8008148:	05db      	lsls	r3, r3, #23
 800814a:	429e      	cmp	r6, r3
 800814c:	d302      	bcc.n	8008154 <floorf+0x78>
 800814e:	1c01      	adds	r1, r0, #0
 8008150:	f7f8 f89e 	bl	8000290 <__aeabi_fadd>
 8008154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008156:	46c0      	nop			@ (mov r8, r8)
 8008158:	7149f2ca 	.word	0x7149f2ca
 800815c:	007fffff 	.word	0x007fffff

08008160 <_init>:
 8008160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008162:	46c0      	nop			@ (mov r8, r8)
 8008164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008166:	bc08      	pop	{r3}
 8008168:	469e      	mov	lr, r3
 800816a:	4770      	bx	lr

0800816c <_fini>:
 800816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816e:	46c0      	nop			@ (mov r8, r8)
 8008170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008172:	bc08      	pop	{r3}
 8008174:	469e      	mov	lr, r3
 8008176:	4770      	bx	lr
