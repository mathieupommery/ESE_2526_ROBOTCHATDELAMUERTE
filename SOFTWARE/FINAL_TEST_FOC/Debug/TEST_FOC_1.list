
TEST_FOC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007394  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d8  08007450  08007450  00008450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008628  08008628  0000a00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008628  08008628  0000a00c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008628  08008628  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008628  08008628  00009628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800862c  0800862c  0000962c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008630  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  2000000c  0800863c  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  0800863c  0000a42c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9b1  00000000  00000000  0000a034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff5  00000000  00000000  000259e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000e026  00000000  00000000  000299da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00037a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001844  00000000  00000000  000389e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001847f  00000000  00000000  0003a22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000055a2  00000000  00000000  000526ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00057c4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002df0  00000000  00000000  00057c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0005aa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007438 	.word	0x08007438

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08007438 	.word	0x08007438

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_cfrcmple>:
 800021c:	4684      	mov	ip, r0
 800021e:	0008      	movs	r0, r1
 8000220:	4661      	mov	r1, ip
 8000222:	e7ff      	b.n	8000224 <__aeabi_cfcmpeq>

08000224 <__aeabi_cfcmpeq>:
 8000224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000226:	f000 fbab 	bl	8000980 <__lesf2>
 800022a:	2800      	cmp	r0, #0
 800022c:	d401      	bmi.n	8000232 <__aeabi_cfcmpeq+0xe>
 800022e:	2100      	movs	r1, #0
 8000230:	42c8      	cmn	r0, r1
 8000232:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000234 <__aeabi_fcmpeq>:
 8000234:	b510      	push	{r4, lr}
 8000236:	f000 fb33 	bl	80008a0 <__eqsf2>
 800023a:	4240      	negs	r0, r0
 800023c:	3001      	adds	r0, #1
 800023e:	bd10      	pop	{r4, pc}

08000240 <__aeabi_fcmplt>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fb9d 	bl	8000980 <__lesf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	db01      	blt.n	800024e <__aeabi_fcmplt+0xe>
 800024a:	2000      	movs	r0, #0
 800024c:	bd10      	pop	{r4, pc}
 800024e:	2001      	movs	r0, #1
 8000250:	bd10      	pop	{r4, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)

08000254 <__aeabi_fcmple>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 fb93 	bl	8000980 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	dd01      	ble.n	8000262 <__aeabi_fcmple+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)

08000268 <__aeabi_fcmpgt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 fb41 	bl	80008f0 <__gesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dc01      	bgt.n	8000276 <__aeabi_fcmpgt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			@ (mov r8, r8)

0800027c <__aeabi_fcmpge>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 fb37 	bl	80008f0 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	da01      	bge.n	800028a <__aeabi_fcmpge+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			@ (mov r8, r8)

08000290 <__aeabi_fadd>:
 8000290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000292:	024b      	lsls	r3, r1, #9
 8000294:	0a5a      	lsrs	r2, r3, #9
 8000296:	4694      	mov	ip, r2
 8000298:	004a      	lsls	r2, r1, #1
 800029a:	0fc9      	lsrs	r1, r1, #31
 800029c:	46ce      	mov	lr, r9
 800029e:	4647      	mov	r7, r8
 80002a0:	4689      	mov	r9, r1
 80002a2:	0045      	lsls	r5, r0, #1
 80002a4:	0246      	lsls	r6, r0, #9
 80002a6:	0e2d      	lsrs	r5, r5, #24
 80002a8:	0e12      	lsrs	r2, r2, #24
 80002aa:	b580      	push	{r7, lr}
 80002ac:	0999      	lsrs	r1, r3, #6
 80002ae:	0a77      	lsrs	r7, r6, #9
 80002b0:	0fc4      	lsrs	r4, r0, #31
 80002b2:	09b6      	lsrs	r6, r6, #6
 80002b4:	1aab      	subs	r3, r5, r2
 80002b6:	454c      	cmp	r4, r9
 80002b8:	d020      	beq.n	80002fc <__aeabi_fadd+0x6c>
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	dd0c      	ble.n	80002d8 <__aeabi_fadd+0x48>
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d134      	bne.n	800032c <__aeabi_fadd+0x9c>
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d02a      	beq.n	800031c <__aeabi_fadd+0x8c>
 80002c6:	1e5a      	subs	r2, r3, #1
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d100      	bne.n	80002ce <__aeabi_fadd+0x3e>
 80002cc:	e08f      	b.n	80003ee <__aeabi_fadd+0x15e>
 80002ce:	2bff      	cmp	r3, #255	@ 0xff
 80002d0:	d100      	bne.n	80002d4 <__aeabi_fadd+0x44>
 80002d2:	e0cd      	b.n	8000470 <__aeabi_fadd+0x1e0>
 80002d4:	0013      	movs	r3, r2
 80002d6:	e02f      	b.n	8000338 <__aeabi_fadd+0xa8>
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d060      	beq.n	800039e <__aeabi_fadd+0x10e>
 80002dc:	1b53      	subs	r3, r2, r5
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d000      	beq.n	80002e4 <__aeabi_fadd+0x54>
 80002e2:	e0ee      	b.n	80004c2 <__aeabi_fadd+0x232>
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d100      	bne.n	80002ea <__aeabi_fadd+0x5a>
 80002e8:	e13e      	b.n	8000568 <__aeabi_fadd+0x2d8>
 80002ea:	1e5c      	subs	r4, r3, #1
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d100      	bne.n	80002f2 <__aeabi_fadd+0x62>
 80002f0:	e16b      	b.n	80005ca <__aeabi_fadd+0x33a>
 80002f2:	2bff      	cmp	r3, #255	@ 0xff
 80002f4:	d100      	bne.n	80002f8 <__aeabi_fadd+0x68>
 80002f6:	e0b9      	b.n	800046c <__aeabi_fadd+0x1dc>
 80002f8:	0023      	movs	r3, r4
 80002fa:	e0e7      	b.n	80004cc <__aeabi_fadd+0x23c>
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	dc00      	bgt.n	8000302 <__aeabi_fadd+0x72>
 8000300:	e0a4      	b.n	800044c <__aeabi_fadd+0x1bc>
 8000302:	2a00      	cmp	r2, #0
 8000304:	d069      	beq.n	80003da <__aeabi_fadd+0x14a>
 8000306:	2dff      	cmp	r5, #255	@ 0xff
 8000308:	d100      	bne.n	800030c <__aeabi_fadd+0x7c>
 800030a:	e0b1      	b.n	8000470 <__aeabi_fadd+0x1e0>
 800030c:	2280      	movs	r2, #128	@ 0x80
 800030e:	04d2      	lsls	r2, r2, #19
 8000310:	4311      	orrs	r1, r2
 8000312:	2b1b      	cmp	r3, #27
 8000314:	dc00      	bgt.n	8000318 <__aeabi_fadd+0x88>
 8000316:	e0e9      	b.n	80004ec <__aeabi_fadd+0x25c>
 8000318:	002b      	movs	r3, r5
 800031a:	3605      	adds	r6, #5
 800031c:	08f7      	lsrs	r7, r6, #3
 800031e:	2bff      	cmp	r3, #255	@ 0xff
 8000320:	d100      	bne.n	8000324 <__aeabi_fadd+0x94>
 8000322:	e0a5      	b.n	8000470 <__aeabi_fadd+0x1e0>
 8000324:	027a      	lsls	r2, r7, #9
 8000326:	0a52      	lsrs	r2, r2, #9
 8000328:	b2d8      	uxtb	r0, r3
 800032a:	e030      	b.n	800038e <__aeabi_fadd+0xfe>
 800032c:	2dff      	cmp	r5, #255	@ 0xff
 800032e:	d100      	bne.n	8000332 <__aeabi_fadd+0xa2>
 8000330:	e09e      	b.n	8000470 <__aeabi_fadd+0x1e0>
 8000332:	2280      	movs	r2, #128	@ 0x80
 8000334:	04d2      	lsls	r2, r2, #19
 8000336:	4311      	orrs	r1, r2
 8000338:	2001      	movs	r0, #1
 800033a:	2b1b      	cmp	r3, #27
 800033c:	dc08      	bgt.n	8000350 <__aeabi_fadd+0xc0>
 800033e:	0008      	movs	r0, r1
 8000340:	2220      	movs	r2, #32
 8000342:	40d8      	lsrs	r0, r3
 8000344:	1ad3      	subs	r3, r2, r3
 8000346:	4099      	lsls	r1, r3
 8000348:	000b      	movs	r3, r1
 800034a:	1e5a      	subs	r2, r3, #1
 800034c:	4193      	sbcs	r3, r2
 800034e:	4318      	orrs	r0, r3
 8000350:	1a36      	subs	r6, r6, r0
 8000352:	0173      	lsls	r3, r6, #5
 8000354:	d400      	bmi.n	8000358 <__aeabi_fadd+0xc8>
 8000356:	e071      	b.n	800043c <__aeabi_fadd+0x1ac>
 8000358:	01b6      	lsls	r6, r6, #6
 800035a:	09b7      	lsrs	r7, r6, #6
 800035c:	0038      	movs	r0, r7
 800035e:	f002 faab 	bl	80028b8 <__clzsi2>
 8000362:	003b      	movs	r3, r7
 8000364:	3805      	subs	r0, #5
 8000366:	4083      	lsls	r3, r0
 8000368:	4285      	cmp	r5, r0
 800036a:	dd4d      	ble.n	8000408 <__aeabi_fadd+0x178>
 800036c:	4eb4      	ldr	r6, [pc, #720]	@ (8000640 <__aeabi_fadd+0x3b0>)
 800036e:	1a2d      	subs	r5, r5, r0
 8000370:	401e      	ands	r6, r3
 8000372:	075a      	lsls	r2, r3, #29
 8000374:	d068      	beq.n	8000448 <__aeabi_fadd+0x1b8>
 8000376:	220f      	movs	r2, #15
 8000378:	4013      	ands	r3, r2
 800037a:	2b04      	cmp	r3, #4
 800037c:	d064      	beq.n	8000448 <__aeabi_fadd+0x1b8>
 800037e:	3604      	adds	r6, #4
 8000380:	0173      	lsls	r3, r6, #5
 8000382:	d561      	bpl.n	8000448 <__aeabi_fadd+0x1b8>
 8000384:	1c68      	adds	r0, r5, #1
 8000386:	2dfe      	cmp	r5, #254	@ 0xfe
 8000388:	d154      	bne.n	8000434 <__aeabi_fadd+0x1a4>
 800038a:	20ff      	movs	r0, #255	@ 0xff
 800038c:	2200      	movs	r2, #0
 800038e:	05c0      	lsls	r0, r0, #23
 8000390:	4310      	orrs	r0, r2
 8000392:	07e4      	lsls	r4, r4, #31
 8000394:	4320      	orrs	r0, r4
 8000396:	bcc0      	pop	{r6, r7}
 8000398:	46b9      	mov	r9, r7
 800039a:	46b0      	mov	r8, r6
 800039c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800039e:	22fe      	movs	r2, #254	@ 0xfe
 80003a0:	4690      	mov	r8, r2
 80003a2:	1c68      	adds	r0, r5, #1
 80003a4:	0002      	movs	r2, r0
 80003a6:	4640      	mov	r0, r8
 80003a8:	4210      	tst	r0, r2
 80003aa:	d16b      	bne.n	8000484 <__aeabi_fadd+0x1f4>
 80003ac:	2d00      	cmp	r5, #0
 80003ae:	d000      	beq.n	80003b2 <__aeabi_fadd+0x122>
 80003b0:	e0dd      	b.n	800056e <__aeabi_fadd+0x2de>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d100      	bne.n	80003b8 <__aeabi_fadd+0x128>
 80003b6:	e102      	b.n	80005be <__aeabi_fadd+0x32e>
 80003b8:	2900      	cmp	r1, #0
 80003ba:	d0b3      	beq.n	8000324 <__aeabi_fadd+0x94>
 80003bc:	2280      	movs	r2, #128	@ 0x80
 80003be:	1a77      	subs	r7, r6, r1
 80003c0:	04d2      	lsls	r2, r2, #19
 80003c2:	4217      	tst	r7, r2
 80003c4:	d100      	bne.n	80003c8 <__aeabi_fadd+0x138>
 80003c6:	e136      	b.n	8000636 <__aeabi_fadd+0x3a6>
 80003c8:	464c      	mov	r4, r9
 80003ca:	1b8e      	subs	r6, r1, r6
 80003cc:	d061      	beq.n	8000492 <__aeabi_fadd+0x202>
 80003ce:	2001      	movs	r0, #1
 80003d0:	4216      	tst	r6, r2
 80003d2:	d130      	bne.n	8000436 <__aeabi_fadd+0x1a6>
 80003d4:	2300      	movs	r3, #0
 80003d6:	08f7      	lsrs	r7, r6, #3
 80003d8:	e7a4      	b.n	8000324 <__aeabi_fadd+0x94>
 80003da:	2900      	cmp	r1, #0
 80003dc:	d09e      	beq.n	800031c <__aeabi_fadd+0x8c>
 80003de:	1e5a      	subs	r2, r3, #1
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d100      	bne.n	80003e6 <__aeabi_fadd+0x156>
 80003e4:	e0ca      	b.n	800057c <__aeabi_fadd+0x2ec>
 80003e6:	2bff      	cmp	r3, #255	@ 0xff
 80003e8:	d042      	beq.n	8000470 <__aeabi_fadd+0x1e0>
 80003ea:	0013      	movs	r3, r2
 80003ec:	e791      	b.n	8000312 <__aeabi_fadd+0x82>
 80003ee:	1a71      	subs	r1, r6, r1
 80003f0:	014b      	lsls	r3, r1, #5
 80003f2:	d400      	bmi.n	80003f6 <__aeabi_fadd+0x166>
 80003f4:	e0d1      	b.n	800059a <__aeabi_fadd+0x30a>
 80003f6:	018f      	lsls	r7, r1, #6
 80003f8:	09bf      	lsrs	r7, r7, #6
 80003fa:	0038      	movs	r0, r7
 80003fc:	f002 fa5c 	bl	80028b8 <__clzsi2>
 8000400:	003b      	movs	r3, r7
 8000402:	3805      	subs	r0, #5
 8000404:	4083      	lsls	r3, r0
 8000406:	2501      	movs	r5, #1
 8000408:	2220      	movs	r2, #32
 800040a:	1b40      	subs	r0, r0, r5
 800040c:	3001      	adds	r0, #1
 800040e:	1a12      	subs	r2, r2, r0
 8000410:	001e      	movs	r6, r3
 8000412:	4093      	lsls	r3, r2
 8000414:	40c6      	lsrs	r6, r0
 8000416:	1e5a      	subs	r2, r3, #1
 8000418:	4193      	sbcs	r3, r2
 800041a:	431e      	orrs	r6, r3
 800041c:	d039      	beq.n	8000492 <__aeabi_fadd+0x202>
 800041e:	0773      	lsls	r3, r6, #29
 8000420:	d100      	bne.n	8000424 <__aeabi_fadd+0x194>
 8000422:	e11b      	b.n	800065c <__aeabi_fadd+0x3cc>
 8000424:	230f      	movs	r3, #15
 8000426:	2500      	movs	r5, #0
 8000428:	4033      	ands	r3, r6
 800042a:	2b04      	cmp	r3, #4
 800042c:	d1a7      	bne.n	800037e <__aeabi_fadd+0xee>
 800042e:	2001      	movs	r0, #1
 8000430:	0172      	lsls	r2, r6, #5
 8000432:	d57c      	bpl.n	800052e <__aeabi_fadd+0x29e>
 8000434:	b2c0      	uxtb	r0, r0
 8000436:	01b2      	lsls	r2, r6, #6
 8000438:	0a52      	lsrs	r2, r2, #9
 800043a:	e7a8      	b.n	800038e <__aeabi_fadd+0xfe>
 800043c:	0773      	lsls	r3, r6, #29
 800043e:	d003      	beq.n	8000448 <__aeabi_fadd+0x1b8>
 8000440:	230f      	movs	r3, #15
 8000442:	4033      	ands	r3, r6
 8000444:	2b04      	cmp	r3, #4
 8000446:	d19a      	bne.n	800037e <__aeabi_fadd+0xee>
 8000448:	002b      	movs	r3, r5
 800044a:	e767      	b.n	800031c <__aeabi_fadd+0x8c>
 800044c:	2b00      	cmp	r3, #0
 800044e:	d023      	beq.n	8000498 <__aeabi_fadd+0x208>
 8000450:	1b53      	subs	r3, r2, r5
 8000452:	2d00      	cmp	r5, #0
 8000454:	d17b      	bne.n	800054e <__aeabi_fadd+0x2be>
 8000456:	2e00      	cmp	r6, #0
 8000458:	d100      	bne.n	800045c <__aeabi_fadd+0x1cc>
 800045a:	e086      	b.n	800056a <__aeabi_fadd+0x2da>
 800045c:	1e5d      	subs	r5, r3, #1
 800045e:	2b01      	cmp	r3, #1
 8000460:	d100      	bne.n	8000464 <__aeabi_fadd+0x1d4>
 8000462:	e08b      	b.n	800057c <__aeabi_fadd+0x2ec>
 8000464:	2bff      	cmp	r3, #255	@ 0xff
 8000466:	d002      	beq.n	800046e <__aeabi_fadd+0x1de>
 8000468:	002b      	movs	r3, r5
 800046a:	e075      	b.n	8000558 <__aeabi_fadd+0x2c8>
 800046c:	464c      	mov	r4, r9
 800046e:	4667      	mov	r7, ip
 8000470:	2f00      	cmp	r7, #0
 8000472:	d100      	bne.n	8000476 <__aeabi_fadd+0x1e6>
 8000474:	e789      	b.n	800038a <__aeabi_fadd+0xfa>
 8000476:	2280      	movs	r2, #128	@ 0x80
 8000478:	03d2      	lsls	r2, r2, #15
 800047a:	433a      	orrs	r2, r7
 800047c:	0252      	lsls	r2, r2, #9
 800047e:	20ff      	movs	r0, #255	@ 0xff
 8000480:	0a52      	lsrs	r2, r2, #9
 8000482:	e784      	b.n	800038e <__aeabi_fadd+0xfe>
 8000484:	1a77      	subs	r7, r6, r1
 8000486:	017b      	lsls	r3, r7, #5
 8000488:	d46b      	bmi.n	8000562 <__aeabi_fadd+0x2d2>
 800048a:	2f00      	cmp	r7, #0
 800048c:	d000      	beq.n	8000490 <__aeabi_fadd+0x200>
 800048e:	e765      	b.n	800035c <__aeabi_fadd+0xcc>
 8000490:	2400      	movs	r4, #0
 8000492:	2000      	movs	r0, #0
 8000494:	2200      	movs	r2, #0
 8000496:	e77a      	b.n	800038e <__aeabi_fadd+0xfe>
 8000498:	22fe      	movs	r2, #254	@ 0xfe
 800049a:	1c6b      	adds	r3, r5, #1
 800049c:	421a      	tst	r2, r3
 800049e:	d149      	bne.n	8000534 <__aeabi_fadd+0x2a4>
 80004a0:	2d00      	cmp	r5, #0
 80004a2:	d000      	beq.n	80004a6 <__aeabi_fadd+0x216>
 80004a4:	e09f      	b.n	80005e6 <__aeabi_fadd+0x356>
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d100      	bne.n	80004ac <__aeabi_fadd+0x21c>
 80004aa:	e0ba      	b.n	8000622 <__aeabi_fadd+0x392>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_fadd+0x222>
 80004b0:	e0cf      	b.n	8000652 <__aeabi_fadd+0x3c2>
 80004b2:	1872      	adds	r2, r6, r1
 80004b4:	0153      	lsls	r3, r2, #5
 80004b6:	d400      	bmi.n	80004ba <__aeabi_fadd+0x22a>
 80004b8:	e0cd      	b.n	8000656 <__aeabi_fadd+0x3c6>
 80004ba:	0192      	lsls	r2, r2, #6
 80004bc:	2001      	movs	r0, #1
 80004be:	0a52      	lsrs	r2, r2, #9
 80004c0:	e765      	b.n	800038e <__aeabi_fadd+0xfe>
 80004c2:	2aff      	cmp	r2, #255	@ 0xff
 80004c4:	d0d2      	beq.n	800046c <__aeabi_fadd+0x1dc>
 80004c6:	2080      	movs	r0, #128	@ 0x80
 80004c8:	04c0      	lsls	r0, r0, #19
 80004ca:	4306      	orrs	r6, r0
 80004cc:	2001      	movs	r0, #1
 80004ce:	2b1b      	cmp	r3, #27
 80004d0:	dc08      	bgt.n	80004e4 <__aeabi_fadd+0x254>
 80004d2:	0030      	movs	r0, r6
 80004d4:	2420      	movs	r4, #32
 80004d6:	40d8      	lsrs	r0, r3
 80004d8:	1ae3      	subs	r3, r4, r3
 80004da:	409e      	lsls	r6, r3
 80004dc:	0033      	movs	r3, r6
 80004de:	1e5c      	subs	r4, r3, #1
 80004e0:	41a3      	sbcs	r3, r4
 80004e2:	4318      	orrs	r0, r3
 80004e4:	464c      	mov	r4, r9
 80004e6:	0015      	movs	r5, r2
 80004e8:	1a0e      	subs	r6, r1, r0
 80004ea:	e732      	b.n	8000352 <__aeabi_fadd+0xc2>
 80004ec:	0008      	movs	r0, r1
 80004ee:	2220      	movs	r2, #32
 80004f0:	40d8      	lsrs	r0, r3
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	4099      	lsls	r1, r3
 80004f6:	000b      	movs	r3, r1
 80004f8:	1e5a      	subs	r2, r3, #1
 80004fa:	4193      	sbcs	r3, r2
 80004fc:	4303      	orrs	r3, r0
 80004fe:	18f6      	adds	r6, r6, r3
 8000500:	0173      	lsls	r3, r6, #5
 8000502:	d59b      	bpl.n	800043c <__aeabi_fadd+0x1ac>
 8000504:	3501      	adds	r5, #1
 8000506:	2dff      	cmp	r5, #255	@ 0xff
 8000508:	d100      	bne.n	800050c <__aeabi_fadd+0x27c>
 800050a:	e73e      	b.n	800038a <__aeabi_fadd+0xfa>
 800050c:	2301      	movs	r3, #1
 800050e:	494d      	ldr	r1, [pc, #308]	@ (8000644 <__aeabi_fadd+0x3b4>)
 8000510:	0872      	lsrs	r2, r6, #1
 8000512:	4033      	ands	r3, r6
 8000514:	400a      	ands	r2, r1
 8000516:	431a      	orrs	r2, r3
 8000518:	0016      	movs	r6, r2
 800051a:	0753      	lsls	r3, r2, #29
 800051c:	d004      	beq.n	8000528 <__aeabi_fadd+0x298>
 800051e:	230f      	movs	r3, #15
 8000520:	4013      	ands	r3, r2
 8000522:	2b04      	cmp	r3, #4
 8000524:	d000      	beq.n	8000528 <__aeabi_fadd+0x298>
 8000526:	e72a      	b.n	800037e <__aeabi_fadd+0xee>
 8000528:	0173      	lsls	r3, r6, #5
 800052a:	d500      	bpl.n	800052e <__aeabi_fadd+0x29e>
 800052c:	e72a      	b.n	8000384 <__aeabi_fadd+0xf4>
 800052e:	002b      	movs	r3, r5
 8000530:	08f7      	lsrs	r7, r6, #3
 8000532:	e6f7      	b.n	8000324 <__aeabi_fadd+0x94>
 8000534:	2bff      	cmp	r3, #255	@ 0xff
 8000536:	d100      	bne.n	800053a <__aeabi_fadd+0x2aa>
 8000538:	e727      	b.n	800038a <__aeabi_fadd+0xfa>
 800053a:	1871      	adds	r1, r6, r1
 800053c:	0849      	lsrs	r1, r1, #1
 800053e:	074a      	lsls	r2, r1, #29
 8000540:	d02f      	beq.n	80005a2 <__aeabi_fadd+0x312>
 8000542:	220f      	movs	r2, #15
 8000544:	400a      	ands	r2, r1
 8000546:	2a04      	cmp	r2, #4
 8000548:	d02b      	beq.n	80005a2 <__aeabi_fadd+0x312>
 800054a:	1d0e      	adds	r6, r1, #4
 800054c:	e6e6      	b.n	800031c <__aeabi_fadd+0x8c>
 800054e:	2aff      	cmp	r2, #255	@ 0xff
 8000550:	d08d      	beq.n	800046e <__aeabi_fadd+0x1de>
 8000552:	2080      	movs	r0, #128	@ 0x80
 8000554:	04c0      	lsls	r0, r0, #19
 8000556:	4306      	orrs	r6, r0
 8000558:	2b1b      	cmp	r3, #27
 800055a:	dd24      	ble.n	80005a6 <__aeabi_fadd+0x316>
 800055c:	0013      	movs	r3, r2
 800055e:	1d4e      	adds	r6, r1, #5
 8000560:	e6dc      	b.n	800031c <__aeabi_fadd+0x8c>
 8000562:	464c      	mov	r4, r9
 8000564:	1b8f      	subs	r7, r1, r6
 8000566:	e6f9      	b.n	800035c <__aeabi_fadd+0xcc>
 8000568:	464c      	mov	r4, r9
 800056a:	000e      	movs	r6, r1
 800056c:	e6d6      	b.n	800031c <__aeabi_fadd+0x8c>
 800056e:	2e00      	cmp	r6, #0
 8000570:	d149      	bne.n	8000606 <__aeabi_fadd+0x376>
 8000572:	2900      	cmp	r1, #0
 8000574:	d068      	beq.n	8000648 <__aeabi_fadd+0x3b8>
 8000576:	4667      	mov	r7, ip
 8000578:	464c      	mov	r4, r9
 800057a:	e77c      	b.n	8000476 <__aeabi_fadd+0x1e6>
 800057c:	1870      	adds	r0, r6, r1
 800057e:	0143      	lsls	r3, r0, #5
 8000580:	d574      	bpl.n	800066c <__aeabi_fadd+0x3dc>
 8000582:	4930      	ldr	r1, [pc, #192]	@ (8000644 <__aeabi_fadd+0x3b4>)
 8000584:	0840      	lsrs	r0, r0, #1
 8000586:	4001      	ands	r1, r0
 8000588:	0743      	lsls	r3, r0, #29
 800058a:	d009      	beq.n	80005a0 <__aeabi_fadd+0x310>
 800058c:	230f      	movs	r3, #15
 800058e:	4003      	ands	r3, r0
 8000590:	2b04      	cmp	r3, #4
 8000592:	d005      	beq.n	80005a0 <__aeabi_fadd+0x310>
 8000594:	2302      	movs	r3, #2
 8000596:	1d0e      	adds	r6, r1, #4
 8000598:	e6c0      	b.n	800031c <__aeabi_fadd+0x8c>
 800059a:	2301      	movs	r3, #1
 800059c:	08cf      	lsrs	r7, r1, #3
 800059e:	e6c1      	b.n	8000324 <__aeabi_fadd+0x94>
 80005a0:	2302      	movs	r3, #2
 80005a2:	08cf      	lsrs	r7, r1, #3
 80005a4:	e6be      	b.n	8000324 <__aeabi_fadd+0x94>
 80005a6:	2520      	movs	r5, #32
 80005a8:	0030      	movs	r0, r6
 80005aa:	40d8      	lsrs	r0, r3
 80005ac:	1aeb      	subs	r3, r5, r3
 80005ae:	409e      	lsls	r6, r3
 80005b0:	0033      	movs	r3, r6
 80005b2:	1e5d      	subs	r5, r3, #1
 80005b4:	41ab      	sbcs	r3, r5
 80005b6:	4303      	orrs	r3, r0
 80005b8:	0015      	movs	r5, r2
 80005ba:	185e      	adds	r6, r3, r1
 80005bc:	e7a0      	b.n	8000500 <__aeabi_fadd+0x270>
 80005be:	2900      	cmp	r1, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x334>
 80005c2:	e765      	b.n	8000490 <__aeabi_fadd+0x200>
 80005c4:	464c      	mov	r4, r9
 80005c6:	4667      	mov	r7, ip
 80005c8:	e6ac      	b.n	8000324 <__aeabi_fadd+0x94>
 80005ca:	1b8f      	subs	r7, r1, r6
 80005cc:	017b      	lsls	r3, r7, #5
 80005ce:	d52e      	bpl.n	800062e <__aeabi_fadd+0x39e>
 80005d0:	01bf      	lsls	r7, r7, #6
 80005d2:	09bf      	lsrs	r7, r7, #6
 80005d4:	0038      	movs	r0, r7
 80005d6:	f002 f96f 	bl	80028b8 <__clzsi2>
 80005da:	003b      	movs	r3, r7
 80005dc:	3805      	subs	r0, #5
 80005de:	4083      	lsls	r3, r0
 80005e0:	464c      	mov	r4, r9
 80005e2:	3501      	adds	r5, #1
 80005e4:	e710      	b.n	8000408 <__aeabi_fadd+0x178>
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d100      	bne.n	80005ec <__aeabi_fadd+0x35c>
 80005ea:	e740      	b.n	800046e <__aeabi_fadd+0x1de>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0x362>
 80005f0:	e741      	b.n	8000476 <__aeabi_fadd+0x1e6>
 80005f2:	2380      	movs	r3, #128	@ 0x80
 80005f4:	03db      	lsls	r3, r3, #15
 80005f6:	429f      	cmp	r7, r3
 80005f8:	d200      	bcs.n	80005fc <__aeabi_fadd+0x36c>
 80005fa:	e73c      	b.n	8000476 <__aeabi_fadd+0x1e6>
 80005fc:	459c      	cmp	ip, r3
 80005fe:	d300      	bcc.n	8000602 <__aeabi_fadd+0x372>
 8000600:	e739      	b.n	8000476 <__aeabi_fadd+0x1e6>
 8000602:	4667      	mov	r7, ip
 8000604:	e737      	b.n	8000476 <__aeabi_fadd+0x1e6>
 8000606:	2900      	cmp	r1, #0
 8000608:	d100      	bne.n	800060c <__aeabi_fadd+0x37c>
 800060a:	e734      	b.n	8000476 <__aeabi_fadd+0x1e6>
 800060c:	2380      	movs	r3, #128	@ 0x80
 800060e:	03db      	lsls	r3, r3, #15
 8000610:	429f      	cmp	r7, r3
 8000612:	d200      	bcs.n	8000616 <__aeabi_fadd+0x386>
 8000614:	e72f      	b.n	8000476 <__aeabi_fadd+0x1e6>
 8000616:	459c      	cmp	ip, r3
 8000618:	d300      	bcc.n	800061c <__aeabi_fadd+0x38c>
 800061a:	e72c      	b.n	8000476 <__aeabi_fadd+0x1e6>
 800061c:	464c      	mov	r4, r9
 800061e:	4667      	mov	r7, ip
 8000620:	e729      	b.n	8000476 <__aeabi_fadd+0x1e6>
 8000622:	2900      	cmp	r1, #0
 8000624:	d100      	bne.n	8000628 <__aeabi_fadd+0x398>
 8000626:	e734      	b.n	8000492 <__aeabi_fadd+0x202>
 8000628:	2300      	movs	r3, #0
 800062a:	08cf      	lsrs	r7, r1, #3
 800062c:	e67a      	b.n	8000324 <__aeabi_fadd+0x94>
 800062e:	464c      	mov	r4, r9
 8000630:	2301      	movs	r3, #1
 8000632:	08ff      	lsrs	r7, r7, #3
 8000634:	e676      	b.n	8000324 <__aeabi_fadd+0x94>
 8000636:	2f00      	cmp	r7, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x3ac>
 800063a:	e729      	b.n	8000490 <__aeabi_fadd+0x200>
 800063c:	08ff      	lsrs	r7, r7, #3
 800063e:	e671      	b.n	8000324 <__aeabi_fadd+0x94>
 8000640:	fbffffff 	.word	0xfbffffff
 8000644:	7dffffff 	.word	0x7dffffff
 8000648:	2280      	movs	r2, #128	@ 0x80
 800064a:	2400      	movs	r4, #0
 800064c:	20ff      	movs	r0, #255	@ 0xff
 800064e:	03d2      	lsls	r2, r2, #15
 8000650:	e69d      	b.n	800038e <__aeabi_fadd+0xfe>
 8000652:	2300      	movs	r3, #0
 8000654:	e666      	b.n	8000324 <__aeabi_fadd+0x94>
 8000656:	2300      	movs	r3, #0
 8000658:	08d7      	lsrs	r7, r2, #3
 800065a:	e663      	b.n	8000324 <__aeabi_fadd+0x94>
 800065c:	2001      	movs	r0, #1
 800065e:	0172      	lsls	r2, r6, #5
 8000660:	d500      	bpl.n	8000664 <__aeabi_fadd+0x3d4>
 8000662:	e6e7      	b.n	8000434 <__aeabi_fadd+0x1a4>
 8000664:	0031      	movs	r1, r6
 8000666:	2300      	movs	r3, #0
 8000668:	08cf      	lsrs	r7, r1, #3
 800066a:	e65b      	b.n	8000324 <__aeabi_fadd+0x94>
 800066c:	2301      	movs	r3, #1
 800066e:	08c7      	lsrs	r7, r0, #3
 8000670:	e658      	b.n	8000324 <__aeabi_fadd+0x94>
 8000672:	46c0      	nop			@ (mov r8, r8)

08000674 <__aeabi_fdiv>:
 8000674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000676:	4646      	mov	r6, r8
 8000678:	464f      	mov	r7, r9
 800067a:	46d6      	mov	lr, sl
 800067c:	0245      	lsls	r5, r0, #9
 800067e:	b5c0      	push	{r6, r7, lr}
 8000680:	0fc3      	lsrs	r3, r0, #31
 8000682:	0047      	lsls	r7, r0, #1
 8000684:	4698      	mov	r8, r3
 8000686:	1c0e      	adds	r6, r1, #0
 8000688:	0a6d      	lsrs	r5, r5, #9
 800068a:	0e3f      	lsrs	r7, r7, #24
 800068c:	d05b      	beq.n	8000746 <__aeabi_fdiv+0xd2>
 800068e:	2fff      	cmp	r7, #255	@ 0xff
 8000690:	d021      	beq.n	80006d6 <__aeabi_fdiv+0x62>
 8000692:	2380      	movs	r3, #128	@ 0x80
 8000694:	00ed      	lsls	r5, r5, #3
 8000696:	04db      	lsls	r3, r3, #19
 8000698:	431d      	orrs	r5, r3
 800069a:	2300      	movs	r3, #0
 800069c:	4699      	mov	r9, r3
 800069e:	469a      	mov	sl, r3
 80006a0:	3f7f      	subs	r7, #127	@ 0x7f
 80006a2:	0274      	lsls	r4, r6, #9
 80006a4:	0073      	lsls	r3, r6, #1
 80006a6:	0a64      	lsrs	r4, r4, #9
 80006a8:	0e1b      	lsrs	r3, r3, #24
 80006aa:	0ff6      	lsrs	r6, r6, #31
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d020      	beq.n	80006f2 <__aeabi_fdiv+0x7e>
 80006b0:	2bff      	cmp	r3, #255	@ 0xff
 80006b2:	d043      	beq.n	800073c <__aeabi_fdiv+0xc8>
 80006b4:	2280      	movs	r2, #128	@ 0x80
 80006b6:	2000      	movs	r0, #0
 80006b8:	00e4      	lsls	r4, r4, #3
 80006ba:	04d2      	lsls	r2, r2, #19
 80006bc:	4314      	orrs	r4, r2
 80006be:	3b7f      	subs	r3, #127	@ 0x7f
 80006c0:	4642      	mov	r2, r8
 80006c2:	1aff      	subs	r7, r7, r3
 80006c4:	464b      	mov	r3, r9
 80006c6:	4072      	eors	r2, r6
 80006c8:	2b0f      	cmp	r3, #15
 80006ca:	d900      	bls.n	80006ce <__aeabi_fdiv+0x5a>
 80006cc:	e09d      	b.n	800080a <__aeabi_fdiv+0x196>
 80006ce:	4971      	ldr	r1, [pc, #452]	@ (8000894 <__aeabi_fdiv+0x220>)
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	58cb      	ldr	r3, [r1, r3]
 80006d4:	469f      	mov	pc, r3
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	d15a      	bne.n	8000790 <__aeabi_fdiv+0x11c>
 80006da:	2308      	movs	r3, #8
 80006dc:	4699      	mov	r9, r3
 80006de:	3b06      	subs	r3, #6
 80006e0:	0274      	lsls	r4, r6, #9
 80006e2:	469a      	mov	sl, r3
 80006e4:	0073      	lsls	r3, r6, #1
 80006e6:	27ff      	movs	r7, #255	@ 0xff
 80006e8:	0a64      	lsrs	r4, r4, #9
 80006ea:	0e1b      	lsrs	r3, r3, #24
 80006ec:	0ff6      	lsrs	r6, r6, #31
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1de      	bne.n	80006b0 <__aeabi_fdiv+0x3c>
 80006f2:	2c00      	cmp	r4, #0
 80006f4:	d13b      	bne.n	800076e <__aeabi_fdiv+0xfa>
 80006f6:	2301      	movs	r3, #1
 80006f8:	4642      	mov	r2, r8
 80006fa:	4649      	mov	r1, r9
 80006fc:	4072      	eors	r2, r6
 80006fe:	4319      	orrs	r1, r3
 8000700:	290e      	cmp	r1, #14
 8000702:	d818      	bhi.n	8000736 <__aeabi_fdiv+0xc2>
 8000704:	4864      	ldr	r0, [pc, #400]	@ (8000898 <__aeabi_fdiv+0x224>)
 8000706:	0089      	lsls	r1, r1, #2
 8000708:	5841      	ldr	r1, [r0, r1]
 800070a:	468f      	mov	pc, r1
 800070c:	4653      	mov	r3, sl
 800070e:	2b02      	cmp	r3, #2
 8000710:	d100      	bne.n	8000714 <__aeabi_fdiv+0xa0>
 8000712:	e0b8      	b.n	8000886 <__aeabi_fdiv+0x212>
 8000714:	2b03      	cmp	r3, #3
 8000716:	d06e      	beq.n	80007f6 <__aeabi_fdiv+0x182>
 8000718:	4642      	mov	r2, r8
 800071a:	002c      	movs	r4, r5
 800071c:	2b01      	cmp	r3, #1
 800071e:	d140      	bne.n	80007a2 <__aeabi_fdiv+0x12e>
 8000720:	2000      	movs	r0, #0
 8000722:	2400      	movs	r4, #0
 8000724:	05c0      	lsls	r0, r0, #23
 8000726:	4320      	orrs	r0, r4
 8000728:	07d2      	lsls	r2, r2, #31
 800072a:	4310      	orrs	r0, r2
 800072c:	bce0      	pop	{r5, r6, r7}
 800072e:	46ba      	mov	sl, r7
 8000730:	46b1      	mov	r9, r6
 8000732:	46a8      	mov	r8, r5
 8000734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000736:	20ff      	movs	r0, #255	@ 0xff
 8000738:	2400      	movs	r4, #0
 800073a:	e7f3      	b.n	8000724 <__aeabi_fdiv+0xb0>
 800073c:	2c00      	cmp	r4, #0
 800073e:	d120      	bne.n	8000782 <__aeabi_fdiv+0x10e>
 8000740:	2302      	movs	r3, #2
 8000742:	3fff      	subs	r7, #255	@ 0xff
 8000744:	e7d8      	b.n	80006f8 <__aeabi_fdiv+0x84>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d105      	bne.n	8000756 <__aeabi_fdiv+0xe2>
 800074a:	2304      	movs	r3, #4
 800074c:	4699      	mov	r9, r3
 800074e:	3b03      	subs	r3, #3
 8000750:	2700      	movs	r7, #0
 8000752:	469a      	mov	sl, r3
 8000754:	e7a5      	b.n	80006a2 <__aeabi_fdiv+0x2e>
 8000756:	0028      	movs	r0, r5
 8000758:	f002 f8ae 	bl	80028b8 <__clzsi2>
 800075c:	2776      	movs	r7, #118	@ 0x76
 800075e:	1f43      	subs	r3, r0, #5
 8000760:	409d      	lsls	r5, r3
 8000762:	2300      	movs	r3, #0
 8000764:	427f      	negs	r7, r7
 8000766:	4699      	mov	r9, r3
 8000768:	469a      	mov	sl, r3
 800076a:	1a3f      	subs	r7, r7, r0
 800076c:	e799      	b.n	80006a2 <__aeabi_fdiv+0x2e>
 800076e:	0020      	movs	r0, r4
 8000770:	f002 f8a2 	bl	80028b8 <__clzsi2>
 8000774:	1f43      	subs	r3, r0, #5
 8000776:	409c      	lsls	r4, r3
 8000778:	2376      	movs	r3, #118	@ 0x76
 800077a:	425b      	negs	r3, r3
 800077c:	1a1b      	subs	r3, r3, r0
 800077e:	2000      	movs	r0, #0
 8000780:	e79e      	b.n	80006c0 <__aeabi_fdiv+0x4c>
 8000782:	2303      	movs	r3, #3
 8000784:	464a      	mov	r2, r9
 8000786:	431a      	orrs	r2, r3
 8000788:	4691      	mov	r9, r2
 800078a:	2003      	movs	r0, #3
 800078c:	33fc      	adds	r3, #252	@ 0xfc
 800078e:	e797      	b.n	80006c0 <__aeabi_fdiv+0x4c>
 8000790:	230c      	movs	r3, #12
 8000792:	4699      	mov	r9, r3
 8000794:	3b09      	subs	r3, #9
 8000796:	27ff      	movs	r7, #255	@ 0xff
 8000798:	469a      	mov	sl, r3
 800079a:	e782      	b.n	80006a2 <__aeabi_fdiv+0x2e>
 800079c:	2803      	cmp	r0, #3
 800079e:	d02c      	beq.n	80007fa <__aeabi_fdiv+0x186>
 80007a0:	0032      	movs	r2, r6
 80007a2:	0038      	movs	r0, r7
 80007a4:	307f      	adds	r0, #127	@ 0x7f
 80007a6:	2800      	cmp	r0, #0
 80007a8:	dd47      	ble.n	800083a <__aeabi_fdiv+0x1c6>
 80007aa:	0763      	lsls	r3, r4, #29
 80007ac:	d004      	beq.n	80007b8 <__aeabi_fdiv+0x144>
 80007ae:	230f      	movs	r3, #15
 80007b0:	4023      	ands	r3, r4
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fdiv+0x144>
 80007b6:	3404      	adds	r4, #4
 80007b8:	0123      	lsls	r3, r4, #4
 80007ba:	d503      	bpl.n	80007c4 <__aeabi_fdiv+0x150>
 80007bc:	0038      	movs	r0, r7
 80007be:	4b37      	ldr	r3, [pc, #220]	@ (800089c <__aeabi_fdiv+0x228>)
 80007c0:	3080      	adds	r0, #128	@ 0x80
 80007c2:	401c      	ands	r4, r3
 80007c4:	28fe      	cmp	r0, #254	@ 0xfe
 80007c6:	dcb6      	bgt.n	8000736 <__aeabi_fdiv+0xc2>
 80007c8:	01a4      	lsls	r4, r4, #6
 80007ca:	0a64      	lsrs	r4, r4, #9
 80007cc:	b2c0      	uxtb	r0, r0
 80007ce:	e7a9      	b.n	8000724 <__aeabi_fdiv+0xb0>
 80007d0:	2480      	movs	r4, #128	@ 0x80
 80007d2:	2200      	movs	r2, #0
 80007d4:	20ff      	movs	r0, #255	@ 0xff
 80007d6:	03e4      	lsls	r4, r4, #15
 80007d8:	e7a4      	b.n	8000724 <__aeabi_fdiv+0xb0>
 80007da:	2380      	movs	r3, #128	@ 0x80
 80007dc:	03db      	lsls	r3, r3, #15
 80007de:	421d      	tst	r5, r3
 80007e0:	d001      	beq.n	80007e6 <__aeabi_fdiv+0x172>
 80007e2:	421c      	tst	r4, r3
 80007e4:	d00b      	beq.n	80007fe <__aeabi_fdiv+0x18a>
 80007e6:	2480      	movs	r4, #128	@ 0x80
 80007e8:	03e4      	lsls	r4, r4, #15
 80007ea:	432c      	orrs	r4, r5
 80007ec:	0264      	lsls	r4, r4, #9
 80007ee:	4642      	mov	r2, r8
 80007f0:	20ff      	movs	r0, #255	@ 0xff
 80007f2:	0a64      	lsrs	r4, r4, #9
 80007f4:	e796      	b.n	8000724 <__aeabi_fdiv+0xb0>
 80007f6:	4646      	mov	r6, r8
 80007f8:	002c      	movs	r4, r5
 80007fa:	2380      	movs	r3, #128	@ 0x80
 80007fc:	03db      	lsls	r3, r3, #15
 80007fe:	431c      	orrs	r4, r3
 8000800:	0264      	lsls	r4, r4, #9
 8000802:	0032      	movs	r2, r6
 8000804:	20ff      	movs	r0, #255	@ 0xff
 8000806:	0a64      	lsrs	r4, r4, #9
 8000808:	e78c      	b.n	8000724 <__aeabi_fdiv+0xb0>
 800080a:	016d      	lsls	r5, r5, #5
 800080c:	0160      	lsls	r0, r4, #5
 800080e:	4285      	cmp	r5, r0
 8000810:	d22d      	bcs.n	800086e <__aeabi_fdiv+0x1fa>
 8000812:	231b      	movs	r3, #27
 8000814:	2400      	movs	r4, #0
 8000816:	3f01      	subs	r7, #1
 8000818:	2601      	movs	r6, #1
 800081a:	0029      	movs	r1, r5
 800081c:	0064      	lsls	r4, r4, #1
 800081e:	006d      	lsls	r5, r5, #1
 8000820:	2900      	cmp	r1, #0
 8000822:	db01      	blt.n	8000828 <__aeabi_fdiv+0x1b4>
 8000824:	4285      	cmp	r5, r0
 8000826:	d301      	bcc.n	800082c <__aeabi_fdiv+0x1b8>
 8000828:	1a2d      	subs	r5, r5, r0
 800082a:	4334      	orrs	r4, r6
 800082c:	3b01      	subs	r3, #1
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f3      	bne.n	800081a <__aeabi_fdiv+0x1a6>
 8000832:	1e6b      	subs	r3, r5, #1
 8000834:	419d      	sbcs	r5, r3
 8000836:	432c      	orrs	r4, r5
 8000838:	e7b3      	b.n	80007a2 <__aeabi_fdiv+0x12e>
 800083a:	2301      	movs	r3, #1
 800083c:	1a1b      	subs	r3, r3, r0
 800083e:	2b1b      	cmp	r3, #27
 8000840:	dd00      	ble.n	8000844 <__aeabi_fdiv+0x1d0>
 8000842:	e76d      	b.n	8000720 <__aeabi_fdiv+0xac>
 8000844:	0021      	movs	r1, r4
 8000846:	379e      	adds	r7, #158	@ 0x9e
 8000848:	40d9      	lsrs	r1, r3
 800084a:	40bc      	lsls	r4, r7
 800084c:	000b      	movs	r3, r1
 800084e:	1e61      	subs	r1, r4, #1
 8000850:	418c      	sbcs	r4, r1
 8000852:	4323      	orrs	r3, r4
 8000854:	0759      	lsls	r1, r3, #29
 8000856:	d004      	beq.n	8000862 <__aeabi_fdiv+0x1ee>
 8000858:	210f      	movs	r1, #15
 800085a:	4019      	ands	r1, r3
 800085c:	2904      	cmp	r1, #4
 800085e:	d000      	beq.n	8000862 <__aeabi_fdiv+0x1ee>
 8000860:	3304      	adds	r3, #4
 8000862:	0159      	lsls	r1, r3, #5
 8000864:	d413      	bmi.n	800088e <__aeabi_fdiv+0x21a>
 8000866:	019b      	lsls	r3, r3, #6
 8000868:	2000      	movs	r0, #0
 800086a:	0a5c      	lsrs	r4, r3, #9
 800086c:	e75a      	b.n	8000724 <__aeabi_fdiv+0xb0>
 800086e:	231a      	movs	r3, #26
 8000870:	2401      	movs	r4, #1
 8000872:	1a2d      	subs	r5, r5, r0
 8000874:	e7d0      	b.n	8000818 <__aeabi_fdiv+0x1a4>
 8000876:	1e98      	subs	r0, r3, #2
 8000878:	4243      	negs	r3, r0
 800087a:	4158      	adcs	r0, r3
 800087c:	4240      	negs	r0, r0
 800087e:	0032      	movs	r2, r6
 8000880:	2400      	movs	r4, #0
 8000882:	b2c0      	uxtb	r0, r0
 8000884:	e74e      	b.n	8000724 <__aeabi_fdiv+0xb0>
 8000886:	4642      	mov	r2, r8
 8000888:	20ff      	movs	r0, #255	@ 0xff
 800088a:	2400      	movs	r4, #0
 800088c:	e74a      	b.n	8000724 <__aeabi_fdiv+0xb0>
 800088e:	2001      	movs	r0, #1
 8000890:	2400      	movs	r4, #0
 8000892:	e747      	b.n	8000724 <__aeabi_fdiv+0xb0>
 8000894:	08007450 	.word	0x08007450
 8000898:	08007490 	.word	0x08007490
 800089c:	f7ffffff 	.word	0xf7ffffff

080008a0 <__eqsf2>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	0042      	lsls	r2, r0, #1
 80008a4:	024e      	lsls	r6, r1, #9
 80008a6:	004c      	lsls	r4, r1, #1
 80008a8:	0245      	lsls	r5, r0, #9
 80008aa:	0a6d      	lsrs	r5, r5, #9
 80008ac:	0e12      	lsrs	r2, r2, #24
 80008ae:	0fc3      	lsrs	r3, r0, #31
 80008b0:	0a76      	lsrs	r6, r6, #9
 80008b2:	0e24      	lsrs	r4, r4, #24
 80008b4:	0fc9      	lsrs	r1, r1, #31
 80008b6:	2aff      	cmp	r2, #255	@ 0xff
 80008b8:	d010      	beq.n	80008dc <__eqsf2+0x3c>
 80008ba:	2cff      	cmp	r4, #255	@ 0xff
 80008bc:	d00c      	beq.n	80008d8 <__eqsf2+0x38>
 80008be:	2001      	movs	r0, #1
 80008c0:	42a2      	cmp	r2, r4
 80008c2:	d10a      	bne.n	80008da <__eqsf2+0x3a>
 80008c4:	42b5      	cmp	r5, r6
 80008c6:	d108      	bne.n	80008da <__eqsf2+0x3a>
 80008c8:	428b      	cmp	r3, r1
 80008ca:	d00f      	beq.n	80008ec <__eqsf2+0x4c>
 80008cc:	2a00      	cmp	r2, #0
 80008ce:	d104      	bne.n	80008da <__eqsf2+0x3a>
 80008d0:	0028      	movs	r0, r5
 80008d2:	1e43      	subs	r3, r0, #1
 80008d4:	4198      	sbcs	r0, r3
 80008d6:	e000      	b.n	80008da <__eqsf2+0x3a>
 80008d8:	2001      	movs	r0, #1
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	2001      	movs	r0, #1
 80008de:	2cff      	cmp	r4, #255	@ 0xff
 80008e0:	d1fb      	bne.n	80008da <__eqsf2+0x3a>
 80008e2:	4335      	orrs	r5, r6
 80008e4:	d1f9      	bne.n	80008da <__eqsf2+0x3a>
 80008e6:	404b      	eors	r3, r1
 80008e8:	0018      	movs	r0, r3
 80008ea:	e7f6      	b.n	80008da <__eqsf2+0x3a>
 80008ec:	2000      	movs	r0, #0
 80008ee:	e7f4      	b.n	80008da <__eqsf2+0x3a>

080008f0 <__gesf2>:
 80008f0:	b530      	push	{r4, r5, lr}
 80008f2:	0042      	lsls	r2, r0, #1
 80008f4:	0244      	lsls	r4, r0, #9
 80008f6:	024d      	lsls	r5, r1, #9
 80008f8:	0fc3      	lsrs	r3, r0, #31
 80008fa:	0048      	lsls	r0, r1, #1
 80008fc:	0a64      	lsrs	r4, r4, #9
 80008fe:	0e12      	lsrs	r2, r2, #24
 8000900:	0a6d      	lsrs	r5, r5, #9
 8000902:	0e00      	lsrs	r0, r0, #24
 8000904:	0fc9      	lsrs	r1, r1, #31
 8000906:	2aff      	cmp	r2, #255	@ 0xff
 8000908:	d018      	beq.n	800093c <__gesf2+0x4c>
 800090a:	28ff      	cmp	r0, #255	@ 0xff
 800090c:	d00a      	beq.n	8000924 <__gesf2+0x34>
 800090e:	2a00      	cmp	r2, #0
 8000910:	d11e      	bne.n	8000950 <__gesf2+0x60>
 8000912:	2800      	cmp	r0, #0
 8000914:	d10a      	bne.n	800092c <__gesf2+0x3c>
 8000916:	2d00      	cmp	r5, #0
 8000918:	d029      	beq.n	800096e <__gesf2+0x7e>
 800091a:	2c00      	cmp	r4, #0
 800091c:	d12d      	bne.n	800097a <__gesf2+0x8a>
 800091e:	0048      	lsls	r0, r1, #1
 8000920:	3801      	subs	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d125      	bne.n	8000974 <__gesf2+0x84>
 8000928:	2a00      	cmp	r2, #0
 800092a:	d101      	bne.n	8000930 <__gesf2+0x40>
 800092c:	2c00      	cmp	r4, #0
 800092e:	d0f6      	beq.n	800091e <__gesf2+0x2e>
 8000930:	428b      	cmp	r3, r1
 8000932:	d019      	beq.n	8000968 <__gesf2+0x78>
 8000934:	2001      	movs	r0, #1
 8000936:	425b      	negs	r3, r3
 8000938:	4318      	orrs	r0, r3
 800093a:	e7f2      	b.n	8000922 <__gesf2+0x32>
 800093c:	2c00      	cmp	r4, #0
 800093e:	d119      	bne.n	8000974 <__gesf2+0x84>
 8000940:	28ff      	cmp	r0, #255	@ 0xff
 8000942:	d1f7      	bne.n	8000934 <__gesf2+0x44>
 8000944:	2d00      	cmp	r5, #0
 8000946:	d115      	bne.n	8000974 <__gesf2+0x84>
 8000948:	2000      	movs	r0, #0
 800094a:	428b      	cmp	r3, r1
 800094c:	d1f2      	bne.n	8000934 <__gesf2+0x44>
 800094e:	e7e8      	b.n	8000922 <__gesf2+0x32>
 8000950:	2800      	cmp	r0, #0
 8000952:	d0ef      	beq.n	8000934 <__gesf2+0x44>
 8000954:	428b      	cmp	r3, r1
 8000956:	d1ed      	bne.n	8000934 <__gesf2+0x44>
 8000958:	4282      	cmp	r2, r0
 800095a:	dceb      	bgt.n	8000934 <__gesf2+0x44>
 800095c:	db04      	blt.n	8000968 <__gesf2+0x78>
 800095e:	42ac      	cmp	r4, r5
 8000960:	d8e8      	bhi.n	8000934 <__gesf2+0x44>
 8000962:	2000      	movs	r0, #0
 8000964:	42ac      	cmp	r4, r5
 8000966:	d2dc      	bcs.n	8000922 <__gesf2+0x32>
 8000968:	0058      	lsls	r0, r3, #1
 800096a:	3801      	subs	r0, #1
 800096c:	e7d9      	b.n	8000922 <__gesf2+0x32>
 800096e:	2c00      	cmp	r4, #0
 8000970:	d0d7      	beq.n	8000922 <__gesf2+0x32>
 8000972:	e7df      	b.n	8000934 <__gesf2+0x44>
 8000974:	2002      	movs	r0, #2
 8000976:	4240      	negs	r0, r0
 8000978:	e7d3      	b.n	8000922 <__gesf2+0x32>
 800097a:	428b      	cmp	r3, r1
 800097c:	d1da      	bne.n	8000934 <__gesf2+0x44>
 800097e:	e7ee      	b.n	800095e <__gesf2+0x6e>

08000980 <__lesf2>:
 8000980:	b530      	push	{r4, r5, lr}
 8000982:	0042      	lsls	r2, r0, #1
 8000984:	0244      	lsls	r4, r0, #9
 8000986:	024d      	lsls	r5, r1, #9
 8000988:	0fc3      	lsrs	r3, r0, #31
 800098a:	0048      	lsls	r0, r1, #1
 800098c:	0a64      	lsrs	r4, r4, #9
 800098e:	0e12      	lsrs	r2, r2, #24
 8000990:	0a6d      	lsrs	r5, r5, #9
 8000992:	0e00      	lsrs	r0, r0, #24
 8000994:	0fc9      	lsrs	r1, r1, #31
 8000996:	2aff      	cmp	r2, #255	@ 0xff
 8000998:	d017      	beq.n	80009ca <__lesf2+0x4a>
 800099a:	28ff      	cmp	r0, #255	@ 0xff
 800099c:	d00a      	beq.n	80009b4 <__lesf2+0x34>
 800099e:	2a00      	cmp	r2, #0
 80009a0:	d11b      	bne.n	80009da <__lesf2+0x5a>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d10a      	bne.n	80009bc <__lesf2+0x3c>
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d01d      	beq.n	80009e6 <__lesf2+0x66>
 80009aa:	2c00      	cmp	r4, #0
 80009ac:	d12d      	bne.n	8000a0a <__lesf2+0x8a>
 80009ae:	0048      	lsls	r0, r1, #1
 80009b0:	3801      	subs	r0, #1
 80009b2:	e011      	b.n	80009d8 <__lesf2+0x58>
 80009b4:	2d00      	cmp	r5, #0
 80009b6:	d10e      	bne.n	80009d6 <__lesf2+0x56>
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	d101      	bne.n	80009c0 <__lesf2+0x40>
 80009bc:	2c00      	cmp	r4, #0
 80009be:	d0f6      	beq.n	80009ae <__lesf2+0x2e>
 80009c0:	428b      	cmp	r3, r1
 80009c2:	d10c      	bne.n	80009de <__lesf2+0x5e>
 80009c4:	0058      	lsls	r0, r3, #1
 80009c6:	3801      	subs	r0, #1
 80009c8:	e006      	b.n	80009d8 <__lesf2+0x58>
 80009ca:	2c00      	cmp	r4, #0
 80009cc:	d103      	bne.n	80009d6 <__lesf2+0x56>
 80009ce:	28ff      	cmp	r0, #255	@ 0xff
 80009d0:	d105      	bne.n	80009de <__lesf2+0x5e>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d015      	beq.n	8000a02 <__lesf2+0x82>
 80009d6:	2002      	movs	r0, #2
 80009d8:	bd30      	pop	{r4, r5, pc}
 80009da:	2800      	cmp	r0, #0
 80009dc:	d106      	bne.n	80009ec <__lesf2+0x6c>
 80009de:	2001      	movs	r0, #1
 80009e0:	425b      	negs	r3, r3
 80009e2:	4318      	orrs	r0, r3
 80009e4:	e7f8      	b.n	80009d8 <__lesf2+0x58>
 80009e6:	2c00      	cmp	r4, #0
 80009e8:	d0f6      	beq.n	80009d8 <__lesf2+0x58>
 80009ea:	e7f8      	b.n	80009de <__lesf2+0x5e>
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d1f6      	bne.n	80009de <__lesf2+0x5e>
 80009f0:	4282      	cmp	r2, r0
 80009f2:	dcf4      	bgt.n	80009de <__lesf2+0x5e>
 80009f4:	dbe6      	blt.n	80009c4 <__lesf2+0x44>
 80009f6:	42ac      	cmp	r4, r5
 80009f8:	d8f1      	bhi.n	80009de <__lesf2+0x5e>
 80009fa:	2000      	movs	r0, #0
 80009fc:	42ac      	cmp	r4, r5
 80009fe:	d2eb      	bcs.n	80009d8 <__lesf2+0x58>
 8000a00:	e7e0      	b.n	80009c4 <__lesf2+0x44>
 8000a02:	2000      	movs	r0, #0
 8000a04:	428b      	cmp	r3, r1
 8000a06:	d1ea      	bne.n	80009de <__lesf2+0x5e>
 8000a08:	e7e6      	b.n	80009d8 <__lesf2+0x58>
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	d1e7      	bne.n	80009de <__lesf2+0x5e>
 8000a0e:	e7f2      	b.n	80009f6 <__lesf2+0x76>

08000a10 <__aeabi_fmul>:
 8000a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a12:	464f      	mov	r7, r9
 8000a14:	4646      	mov	r6, r8
 8000a16:	46d6      	mov	lr, sl
 8000a18:	0044      	lsls	r4, r0, #1
 8000a1a:	b5c0      	push	{r6, r7, lr}
 8000a1c:	0246      	lsls	r6, r0, #9
 8000a1e:	1c0f      	adds	r7, r1, #0
 8000a20:	0a76      	lsrs	r6, r6, #9
 8000a22:	0e24      	lsrs	r4, r4, #24
 8000a24:	0fc5      	lsrs	r5, r0, #31
 8000a26:	2c00      	cmp	r4, #0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fmul+0x1c>
 8000a2a:	e0da      	b.n	8000be2 <__aeabi_fmul+0x1d2>
 8000a2c:	2cff      	cmp	r4, #255	@ 0xff
 8000a2e:	d074      	beq.n	8000b1a <__aeabi_fmul+0x10a>
 8000a30:	2380      	movs	r3, #128	@ 0x80
 8000a32:	00f6      	lsls	r6, r6, #3
 8000a34:	04db      	lsls	r3, r3, #19
 8000a36:	431e      	orrs	r6, r3
 8000a38:	2300      	movs	r3, #0
 8000a3a:	4699      	mov	r9, r3
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	3c7f      	subs	r4, #127	@ 0x7f
 8000a40:	027b      	lsls	r3, r7, #9
 8000a42:	0a5b      	lsrs	r3, r3, #9
 8000a44:	4698      	mov	r8, r3
 8000a46:	007b      	lsls	r3, r7, #1
 8000a48:	0e1b      	lsrs	r3, r3, #24
 8000a4a:	0fff      	lsrs	r7, r7, #31
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d074      	beq.n	8000b3a <__aeabi_fmul+0x12a>
 8000a50:	2bff      	cmp	r3, #255	@ 0xff
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fmul+0x46>
 8000a54:	e08e      	b.n	8000b74 <__aeabi_fmul+0x164>
 8000a56:	4642      	mov	r2, r8
 8000a58:	2180      	movs	r1, #128	@ 0x80
 8000a5a:	00d2      	lsls	r2, r2, #3
 8000a5c:	04c9      	lsls	r1, r1, #19
 8000a5e:	4311      	orrs	r1, r2
 8000a60:	3b7f      	subs	r3, #127	@ 0x7f
 8000a62:	002a      	movs	r2, r5
 8000a64:	18e4      	adds	r4, r4, r3
 8000a66:	464b      	mov	r3, r9
 8000a68:	407a      	eors	r2, r7
 8000a6a:	4688      	mov	r8, r1
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	2b0a      	cmp	r3, #10
 8000a70:	dc75      	bgt.n	8000b5e <__aeabi_fmul+0x14e>
 8000a72:	464b      	mov	r3, r9
 8000a74:	2000      	movs	r0, #0
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	dd0f      	ble.n	8000a9a <__aeabi_fmul+0x8a>
 8000a7a:	4649      	mov	r1, r9
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	408b      	lsls	r3, r1
 8000a80:	21a6      	movs	r1, #166	@ 0xa6
 8000a82:	00c9      	lsls	r1, r1, #3
 8000a84:	420b      	tst	r3, r1
 8000a86:	d169      	bne.n	8000b5c <__aeabi_fmul+0x14c>
 8000a88:	2190      	movs	r1, #144	@ 0x90
 8000a8a:	0089      	lsls	r1, r1, #2
 8000a8c:	420b      	tst	r3, r1
 8000a8e:	d000      	beq.n	8000a92 <__aeabi_fmul+0x82>
 8000a90:	e100      	b.n	8000c94 <__aeabi_fmul+0x284>
 8000a92:	2188      	movs	r1, #136	@ 0x88
 8000a94:	4219      	tst	r1, r3
 8000a96:	d000      	beq.n	8000a9a <__aeabi_fmul+0x8a>
 8000a98:	e0f5      	b.n	8000c86 <__aeabi_fmul+0x276>
 8000a9a:	4641      	mov	r1, r8
 8000a9c:	0409      	lsls	r1, r1, #16
 8000a9e:	0c09      	lsrs	r1, r1, #16
 8000aa0:	4643      	mov	r3, r8
 8000aa2:	0008      	movs	r0, r1
 8000aa4:	0c35      	lsrs	r5, r6, #16
 8000aa6:	0436      	lsls	r6, r6, #16
 8000aa8:	0c1b      	lsrs	r3, r3, #16
 8000aaa:	0c36      	lsrs	r6, r6, #16
 8000aac:	4370      	muls	r0, r6
 8000aae:	4369      	muls	r1, r5
 8000ab0:	435e      	muls	r6, r3
 8000ab2:	435d      	muls	r5, r3
 8000ab4:	1876      	adds	r6, r6, r1
 8000ab6:	0c03      	lsrs	r3, r0, #16
 8000ab8:	199b      	adds	r3, r3, r6
 8000aba:	4299      	cmp	r1, r3
 8000abc:	d903      	bls.n	8000ac6 <__aeabi_fmul+0xb6>
 8000abe:	2180      	movs	r1, #128	@ 0x80
 8000ac0:	0249      	lsls	r1, r1, #9
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4465      	add	r5, ip
 8000ac6:	0400      	lsls	r0, r0, #16
 8000ac8:	0419      	lsls	r1, r3, #16
 8000aca:	0c00      	lsrs	r0, r0, #16
 8000acc:	1809      	adds	r1, r1, r0
 8000ace:	018e      	lsls	r6, r1, #6
 8000ad0:	1e70      	subs	r0, r6, #1
 8000ad2:	4186      	sbcs	r6, r0
 8000ad4:	0c1b      	lsrs	r3, r3, #16
 8000ad6:	0e89      	lsrs	r1, r1, #26
 8000ad8:	195b      	adds	r3, r3, r5
 8000ada:	430e      	orrs	r6, r1
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	431e      	orrs	r6, r3
 8000ae0:	011b      	lsls	r3, r3, #4
 8000ae2:	d46c      	bmi.n	8000bbe <__aeabi_fmul+0x1ae>
 8000ae4:	0023      	movs	r3, r4
 8000ae6:	337f      	adds	r3, #127	@ 0x7f
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	dc00      	bgt.n	8000aee <__aeabi_fmul+0xde>
 8000aec:	e0b1      	b.n	8000c52 <__aeabi_fmul+0x242>
 8000aee:	0015      	movs	r5, r2
 8000af0:	0771      	lsls	r1, r6, #29
 8000af2:	d00b      	beq.n	8000b0c <__aeabi_fmul+0xfc>
 8000af4:	200f      	movs	r0, #15
 8000af6:	0021      	movs	r1, r4
 8000af8:	4030      	ands	r0, r6
 8000afa:	2804      	cmp	r0, #4
 8000afc:	d006      	beq.n	8000b0c <__aeabi_fmul+0xfc>
 8000afe:	3604      	adds	r6, #4
 8000b00:	0132      	lsls	r2, r6, #4
 8000b02:	d503      	bpl.n	8000b0c <__aeabi_fmul+0xfc>
 8000b04:	4b6e      	ldr	r3, [pc, #440]	@ (8000cc0 <__aeabi_fmul+0x2b0>)
 8000b06:	401e      	ands	r6, r3
 8000b08:	000b      	movs	r3, r1
 8000b0a:	3380      	adds	r3, #128	@ 0x80
 8000b0c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b0e:	dd00      	ble.n	8000b12 <__aeabi_fmul+0x102>
 8000b10:	e0bd      	b.n	8000c8e <__aeabi_fmul+0x27e>
 8000b12:	01b2      	lsls	r2, r6, #6
 8000b14:	0a52      	lsrs	r2, r2, #9
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	e048      	b.n	8000bac <__aeabi_fmul+0x19c>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fmul+0x110>
 8000b1e:	e092      	b.n	8000c46 <__aeabi_fmul+0x236>
 8000b20:	2308      	movs	r3, #8
 8000b22:	4699      	mov	r9, r3
 8000b24:	3b06      	subs	r3, #6
 8000b26:	469a      	mov	sl, r3
 8000b28:	027b      	lsls	r3, r7, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4698      	mov	r8, r3
 8000b2e:	007b      	lsls	r3, r7, #1
 8000b30:	24ff      	movs	r4, #255	@ 0xff
 8000b32:	0e1b      	lsrs	r3, r3, #24
 8000b34:	0fff      	lsrs	r7, r7, #31
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d18a      	bne.n	8000a50 <__aeabi_fmul+0x40>
 8000b3a:	4642      	mov	r2, r8
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	d164      	bne.n	8000c0a <__aeabi_fmul+0x1fa>
 8000b40:	4649      	mov	r1, r9
 8000b42:	3201      	adds	r2, #1
 8000b44:	4311      	orrs	r1, r2
 8000b46:	4689      	mov	r9, r1
 8000b48:	290a      	cmp	r1, #10
 8000b4a:	dc08      	bgt.n	8000b5e <__aeabi_fmul+0x14e>
 8000b4c:	407d      	eors	r5, r7
 8000b4e:	2001      	movs	r0, #1
 8000b50:	b2ea      	uxtb	r2, r5
 8000b52:	2902      	cmp	r1, #2
 8000b54:	dc91      	bgt.n	8000a7a <__aeabi_fmul+0x6a>
 8000b56:	0015      	movs	r5, r2
 8000b58:	2200      	movs	r2, #0
 8000b5a:	e027      	b.n	8000bac <__aeabi_fmul+0x19c>
 8000b5c:	0015      	movs	r5, r2
 8000b5e:	4653      	mov	r3, sl
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d100      	bne.n	8000b66 <__aeabi_fmul+0x156>
 8000b64:	e093      	b.n	8000c8e <__aeabi_fmul+0x27e>
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d01a      	beq.n	8000ba0 <__aeabi_fmul+0x190>
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d12c      	bne.n	8000bc8 <__aeabi_fmul+0x1b8>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2200      	movs	r2, #0
 8000b72:	e01b      	b.n	8000bac <__aeabi_fmul+0x19c>
 8000b74:	4643      	mov	r3, r8
 8000b76:	34ff      	adds	r4, #255	@ 0xff
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d055      	beq.n	8000c28 <__aeabi_fmul+0x218>
 8000b7c:	2103      	movs	r1, #3
 8000b7e:	464b      	mov	r3, r9
 8000b80:	430b      	orrs	r3, r1
 8000b82:	0019      	movs	r1, r3
 8000b84:	2b0a      	cmp	r3, #10
 8000b86:	dc00      	bgt.n	8000b8a <__aeabi_fmul+0x17a>
 8000b88:	e092      	b.n	8000cb0 <__aeabi_fmul+0x2a0>
 8000b8a:	2b0f      	cmp	r3, #15
 8000b8c:	d000      	beq.n	8000b90 <__aeabi_fmul+0x180>
 8000b8e:	e08c      	b.n	8000caa <__aeabi_fmul+0x29a>
 8000b90:	2280      	movs	r2, #128	@ 0x80
 8000b92:	03d2      	lsls	r2, r2, #15
 8000b94:	4216      	tst	r6, r2
 8000b96:	d003      	beq.n	8000ba0 <__aeabi_fmul+0x190>
 8000b98:	4643      	mov	r3, r8
 8000b9a:	4213      	tst	r3, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_fmul+0x190>
 8000b9e:	e07d      	b.n	8000c9c <__aeabi_fmul+0x28c>
 8000ba0:	2280      	movs	r2, #128	@ 0x80
 8000ba2:	03d2      	lsls	r2, r2, #15
 8000ba4:	4332      	orrs	r2, r6
 8000ba6:	0252      	lsls	r2, r2, #9
 8000ba8:	0a52      	lsrs	r2, r2, #9
 8000baa:	23ff      	movs	r3, #255	@ 0xff
 8000bac:	05d8      	lsls	r0, r3, #23
 8000bae:	07ed      	lsls	r5, r5, #31
 8000bb0:	4310      	orrs	r0, r2
 8000bb2:	4328      	orrs	r0, r5
 8000bb4:	bce0      	pop	{r5, r6, r7}
 8000bb6:	46ba      	mov	sl, r7
 8000bb8:	46b1      	mov	r9, r6
 8000bba:	46a8      	mov	r8, r5
 8000bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	0015      	movs	r5, r2
 8000bc2:	0871      	lsrs	r1, r6, #1
 8000bc4:	401e      	ands	r6, r3
 8000bc6:	430e      	orrs	r6, r1
 8000bc8:	0023      	movs	r3, r4
 8000bca:	3380      	adds	r3, #128	@ 0x80
 8000bcc:	1c61      	adds	r1, r4, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	dd41      	ble.n	8000c56 <__aeabi_fmul+0x246>
 8000bd2:	0772      	lsls	r2, r6, #29
 8000bd4:	d094      	beq.n	8000b00 <__aeabi_fmul+0xf0>
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	4032      	ands	r2, r6
 8000bda:	2a04      	cmp	r2, #4
 8000bdc:	d000      	beq.n	8000be0 <__aeabi_fmul+0x1d0>
 8000bde:	e78e      	b.n	8000afe <__aeabi_fmul+0xee>
 8000be0:	e78e      	b.n	8000b00 <__aeabi_fmul+0xf0>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d105      	bne.n	8000bf2 <__aeabi_fmul+0x1e2>
 8000be6:	2304      	movs	r3, #4
 8000be8:	4699      	mov	r9, r3
 8000bea:	3b03      	subs	r3, #3
 8000bec:	2400      	movs	r4, #0
 8000bee:	469a      	mov	sl, r3
 8000bf0:	e726      	b.n	8000a40 <__aeabi_fmul+0x30>
 8000bf2:	0030      	movs	r0, r6
 8000bf4:	f001 fe60 	bl	80028b8 <__clzsi2>
 8000bf8:	2476      	movs	r4, #118	@ 0x76
 8000bfa:	1f43      	subs	r3, r0, #5
 8000bfc:	409e      	lsls	r6, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	4264      	negs	r4, r4
 8000c02:	4699      	mov	r9, r3
 8000c04:	469a      	mov	sl, r3
 8000c06:	1a24      	subs	r4, r4, r0
 8000c08:	e71a      	b.n	8000a40 <__aeabi_fmul+0x30>
 8000c0a:	4640      	mov	r0, r8
 8000c0c:	f001 fe54 	bl	80028b8 <__clzsi2>
 8000c10:	464b      	mov	r3, r9
 8000c12:	1a24      	subs	r4, r4, r0
 8000c14:	3c76      	subs	r4, #118	@ 0x76
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	dca1      	bgt.n	8000b5e <__aeabi_fmul+0x14e>
 8000c1a:	4643      	mov	r3, r8
 8000c1c:	3805      	subs	r0, #5
 8000c1e:	4083      	lsls	r3, r0
 8000c20:	407d      	eors	r5, r7
 8000c22:	4698      	mov	r8, r3
 8000c24:	b2ea      	uxtb	r2, r5
 8000c26:	e724      	b.n	8000a72 <__aeabi_fmul+0x62>
 8000c28:	464a      	mov	r2, r9
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	002a      	movs	r2, r5
 8000c30:	407a      	eors	r2, r7
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	2b0a      	cmp	r3, #10
 8000c36:	dc92      	bgt.n	8000b5e <__aeabi_fmul+0x14e>
 8000c38:	4649      	mov	r1, r9
 8000c3a:	0015      	movs	r5, r2
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	d026      	beq.n	8000c8e <__aeabi_fmul+0x27e>
 8000c40:	4699      	mov	r9, r3
 8000c42:	2002      	movs	r0, #2
 8000c44:	e719      	b.n	8000a7a <__aeabi_fmul+0x6a>
 8000c46:	230c      	movs	r3, #12
 8000c48:	4699      	mov	r9, r3
 8000c4a:	3b09      	subs	r3, #9
 8000c4c:	24ff      	movs	r4, #255	@ 0xff
 8000c4e:	469a      	mov	sl, r3
 8000c50:	e6f6      	b.n	8000a40 <__aeabi_fmul+0x30>
 8000c52:	0015      	movs	r5, r2
 8000c54:	0021      	movs	r1, r4
 8000c56:	2201      	movs	r2, #1
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b1b      	cmp	r3, #27
 8000c5c:	dd00      	ble.n	8000c60 <__aeabi_fmul+0x250>
 8000c5e:	e786      	b.n	8000b6e <__aeabi_fmul+0x15e>
 8000c60:	319e      	adds	r1, #158	@ 0x9e
 8000c62:	0032      	movs	r2, r6
 8000c64:	408e      	lsls	r6, r1
 8000c66:	40da      	lsrs	r2, r3
 8000c68:	1e73      	subs	r3, r6, #1
 8000c6a:	419e      	sbcs	r6, r3
 8000c6c:	4332      	orrs	r2, r6
 8000c6e:	0753      	lsls	r3, r2, #29
 8000c70:	d004      	beq.n	8000c7c <__aeabi_fmul+0x26c>
 8000c72:	230f      	movs	r3, #15
 8000c74:	4013      	ands	r3, r2
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	d000      	beq.n	8000c7c <__aeabi_fmul+0x26c>
 8000c7a:	3204      	adds	r2, #4
 8000c7c:	0153      	lsls	r3, r2, #5
 8000c7e:	d510      	bpl.n	8000ca2 <__aeabi_fmul+0x292>
 8000c80:	2301      	movs	r3, #1
 8000c82:	2200      	movs	r2, #0
 8000c84:	e792      	b.n	8000bac <__aeabi_fmul+0x19c>
 8000c86:	003d      	movs	r5, r7
 8000c88:	4646      	mov	r6, r8
 8000c8a:	4682      	mov	sl, r0
 8000c8c:	e767      	b.n	8000b5e <__aeabi_fmul+0x14e>
 8000c8e:	23ff      	movs	r3, #255	@ 0xff
 8000c90:	2200      	movs	r2, #0
 8000c92:	e78b      	b.n	8000bac <__aeabi_fmul+0x19c>
 8000c94:	2280      	movs	r2, #128	@ 0x80
 8000c96:	2500      	movs	r5, #0
 8000c98:	03d2      	lsls	r2, r2, #15
 8000c9a:	e786      	b.n	8000baa <__aeabi_fmul+0x19a>
 8000c9c:	003d      	movs	r5, r7
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	e783      	b.n	8000baa <__aeabi_fmul+0x19a>
 8000ca2:	0192      	lsls	r2, r2, #6
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	0a52      	lsrs	r2, r2, #9
 8000ca8:	e780      	b.n	8000bac <__aeabi_fmul+0x19c>
 8000caa:	003d      	movs	r5, r7
 8000cac:	4646      	mov	r6, r8
 8000cae:	e777      	b.n	8000ba0 <__aeabi_fmul+0x190>
 8000cb0:	002a      	movs	r2, r5
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	407a      	eors	r2, r7
 8000cb6:	408b      	lsls	r3, r1
 8000cb8:	2003      	movs	r0, #3
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	e6e9      	b.n	8000a92 <__aeabi_fmul+0x82>
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	f7ffffff 	.word	0xf7ffffff

08000cc4 <__aeabi_fsub>:
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	4647      	mov	r7, r8
 8000cc8:	46ce      	mov	lr, r9
 8000cca:	0243      	lsls	r3, r0, #9
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	0a5f      	lsrs	r7, r3, #9
 8000cd0:	099b      	lsrs	r3, r3, #6
 8000cd2:	0045      	lsls	r5, r0, #1
 8000cd4:	004a      	lsls	r2, r1, #1
 8000cd6:	469c      	mov	ip, r3
 8000cd8:	024b      	lsls	r3, r1, #9
 8000cda:	0fc4      	lsrs	r4, r0, #31
 8000cdc:	0fce      	lsrs	r6, r1, #31
 8000cde:	0e2d      	lsrs	r5, r5, #24
 8000ce0:	0a58      	lsrs	r0, r3, #9
 8000ce2:	0e12      	lsrs	r2, r2, #24
 8000ce4:	0999      	lsrs	r1, r3, #6
 8000ce6:	2aff      	cmp	r2, #255	@ 0xff
 8000ce8:	d06b      	beq.n	8000dc2 <__aeabi_fsub+0xfe>
 8000cea:	2301      	movs	r3, #1
 8000cec:	405e      	eors	r6, r3
 8000cee:	1aab      	subs	r3, r5, r2
 8000cf0:	42b4      	cmp	r4, r6
 8000cf2:	d04b      	beq.n	8000d8c <__aeabi_fsub+0xc8>
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	dc00      	bgt.n	8000cfa <__aeabi_fsub+0x36>
 8000cf8:	e0ff      	b.n	8000efa <__aeabi_fsub+0x236>
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_fsub+0x3c>
 8000cfe:	e088      	b.n	8000e12 <__aeabi_fsub+0x14e>
 8000d00:	2dff      	cmp	r5, #255	@ 0xff
 8000d02:	d100      	bne.n	8000d06 <__aeabi_fsub+0x42>
 8000d04:	e0ef      	b.n	8000ee6 <__aeabi_fsub+0x222>
 8000d06:	2280      	movs	r2, #128	@ 0x80
 8000d08:	04d2      	lsls	r2, r2, #19
 8000d0a:	4311      	orrs	r1, r2
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	2b1b      	cmp	r3, #27
 8000d10:	dc08      	bgt.n	8000d24 <__aeabi_fsub+0x60>
 8000d12:	0008      	movs	r0, r1
 8000d14:	2220      	movs	r2, #32
 8000d16:	40d8      	lsrs	r0, r3
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	4099      	lsls	r1, r3
 8000d1c:	000b      	movs	r3, r1
 8000d1e:	1e5a      	subs	r2, r3, #1
 8000d20:	4193      	sbcs	r3, r2
 8000d22:	4318      	orrs	r0, r3
 8000d24:	4663      	mov	r3, ip
 8000d26:	1a1b      	subs	r3, r3, r0
 8000d28:	469c      	mov	ip, r3
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	015b      	lsls	r3, r3, #5
 8000d2e:	d400      	bmi.n	8000d32 <__aeabi_fsub+0x6e>
 8000d30:	e0cd      	b.n	8000ece <__aeabi_fsub+0x20a>
 8000d32:	4663      	mov	r3, ip
 8000d34:	019f      	lsls	r7, r3, #6
 8000d36:	09bf      	lsrs	r7, r7, #6
 8000d38:	0038      	movs	r0, r7
 8000d3a:	f001 fdbd 	bl	80028b8 <__clzsi2>
 8000d3e:	003b      	movs	r3, r7
 8000d40:	3805      	subs	r0, #5
 8000d42:	4083      	lsls	r3, r0
 8000d44:	4285      	cmp	r5, r0
 8000d46:	dc00      	bgt.n	8000d4a <__aeabi_fsub+0x86>
 8000d48:	e0a2      	b.n	8000e90 <__aeabi_fsub+0x1cc>
 8000d4a:	4ab7      	ldr	r2, [pc, #732]	@ (8001028 <__aeabi_fsub+0x364>)
 8000d4c:	1a2d      	subs	r5, r5, r0
 8000d4e:	401a      	ands	r2, r3
 8000d50:	4694      	mov	ip, r2
 8000d52:	075a      	lsls	r2, r3, #29
 8000d54:	d100      	bne.n	8000d58 <__aeabi_fsub+0x94>
 8000d56:	e0c3      	b.n	8000ee0 <__aeabi_fsub+0x21c>
 8000d58:	220f      	movs	r2, #15
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_fsub+0x9e>
 8000d60:	e0be      	b.n	8000ee0 <__aeabi_fsub+0x21c>
 8000d62:	2304      	movs	r3, #4
 8000d64:	4698      	mov	r8, r3
 8000d66:	44c4      	add	ip, r8
 8000d68:	4663      	mov	r3, ip
 8000d6a:	015b      	lsls	r3, r3, #5
 8000d6c:	d400      	bmi.n	8000d70 <__aeabi_fsub+0xac>
 8000d6e:	e0b7      	b.n	8000ee0 <__aeabi_fsub+0x21c>
 8000d70:	1c68      	adds	r0, r5, #1
 8000d72:	2dfe      	cmp	r5, #254	@ 0xfe
 8000d74:	d000      	beq.n	8000d78 <__aeabi_fsub+0xb4>
 8000d76:	e0a5      	b.n	8000ec4 <__aeabi_fsub+0x200>
 8000d78:	20ff      	movs	r0, #255	@ 0xff
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	05c0      	lsls	r0, r0, #23
 8000d7e:	4310      	orrs	r0, r2
 8000d80:	07e4      	lsls	r4, r4, #31
 8000d82:	4320      	orrs	r0, r4
 8000d84:	bcc0      	pop	{r6, r7}
 8000d86:	46b9      	mov	r9, r7
 8000d88:	46b0      	mov	r8, r6
 8000d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	dc00      	bgt.n	8000d92 <__aeabi_fsub+0xce>
 8000d90:	e1eb      	b.n	800116a <__aeabi_fsub+0x4a6>
 8000d92:	2a00      	cmp	r2, #0
 8000d94:	d046      	beq.n	8000e24 <__aeabi_fsub+0x160>
 8000d96:	2dff      	cmp	r5, #255	@ 0xff
 8000d98:	d100      	bne.n	8000d9c <__aeabi_fsub+0xd8>
 8000d9a:	e0a4      	b.n	8000ee6 <__aeabi_fsub+0x222>
 8000d9c:	2280      	movs	r2, #128	@ 0x80
 8000d9e:	04d2      	lsls	r2, r2, #19
 8000da0:	4311      	orrs	r1, r2
 8000da2:	2b1b      	cmp	r3, #27
 8000da4:	dc00      	bgt.n	8000da8 <__aeabi_fsub+0xe4>
 8000da6:	e0fb      	b.n	8000fa0 <__aeabi_fsub+0x2dc>
 8000da8:	2305      	movs	r3, #5
 8000daa:	4698      	mov	r8, r3
 8000dac:	002b      	movs	r3, r5
 8000dae:	44c4      	add	ip, r8
 8000db0:	4662      	mov	r2, ip
 8000db2:	08d7      	lsrs	r7, r2, #3
 8000db4:	2bff      	cmp	r3, #255	@ 0xff
 8000db6:	d100      	bne.n	8000dba <__aeabi_fsub+0xf6>
 8000db8:	e095      	b.n	8000ee6 <__aeabi_fsub+0x222>
 8000dba:	027a      	lsls	r2, r7, #9
 8000dbc:	0a52      	lsrs	r2, r2, #9
 8000dbe:	b2d8      	uxtb	r0, r3
 8000dc0:	e7dc      	b.n	8000d7c <__aeabi_fsub+0xb8>
 8000dc2:	002b      	movs	r3, r5
 8000dc4:	3bff      	subs	r3, #255	@ 0xff
 8000dc6:	4699      	mov	r9, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d118      	bne.n	8000dfe <__aeabi_fsub+0x13a>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	405e      	eors	r6, r3
 8000dd0:	42b4      	cmp	r4, r6
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_fsub+0x112>
 8000dd4:	e0ca      	b.n	8000f6c <__aeabi_fsub+0x2a8>
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d02d      	beq.n	8000e38 <__aeabi_fsub+0x174>
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d000      	beq.n	8000de2 <__aeabi_fsub+0x11e>
 8000de0:	e13c      	b.n	800105c <__aeabi_fsub+0x398>
 8000de2:	23ff      	movs	r3, #255	@ 0xff
 8000de4:	4664      	mov	r4, ip
 8000de6:	2c00      	cmp	r4, #0
 8000de8:	d100      	bne.n	8000dec <__aeabi_fsub+0x128>
 8000dea:	e15f      	b.n	80010ac <__aeabi_fsub+0x3e8>
 8000dec:	1e5d      	subs	r5, r3, #1
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d100      	bne.n	8000df4 <__aeabi_fsub+0x130>
 8000df2:	e174      	b.n	80010de <__aeabi_fsub+0x41a>
 8000df4:	0034      	movs	r4, r6
 8000df6:	2bff      	cmp	r3, #255	@ 0xff
 8000df8:	d074      	beq.n	8000ee4 <__aeabi_fsub+0x220>
 8000dfa:	002b      	movs	r3, r5
 8000dfc:	e103      	b.n	8001006 <__aeabi_fsub+0x342>
 8000dfe:	42b4      	cmp	r4, r6
 8000e00:	d100      	bne.n	8000e04 <__aeabi_fsub+0x140>
 8000e02:	e09c      	b.n	8000f3e <__aeabi_fsub+0x27a>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d017      	beq.n	8000e38 <__aeabi_fsub+0x174>
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0ea      	beq.n	8000de2 <__aeabi_fsub+0x11e>
 8000e0c:	0007      	movs	r7, r0
 8000e0e:	0034      	movs	r4, r6
 8000e10:	e06c      	b.n	8000eec <__aeabi_fsub+0x228>
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d0cc      	beq.n	8000db0 <__aeabi_fsub+0xec>
 8000e16:	1e5a      	subs	r2, r3, #1
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d02b      	beq.n	8000e74 <__aeabi_fsub+0x1b0>
 8000e1c:	2bff      	cmp	r3, #255	@ 0xff
 8000e1e:	d062      	beq.n	8000ee6 <__aeabi_fsub+0x222>
 8000e20:	0013      	movs	r3, r2
 8000e22:	e773      	b.n	8000d0c <__aeabi_fsub+0x48>
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d0c3      	beq.n	8000db0 <__aeabi_fsub+0xec>
 8000e28:	1e5a      	subs	r2, r3, #1
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_fsub+0x16c>
 8000e2e:	e11e      	b.n	800106e <__aeabi_fsub+0x3aa>
 8000e30:	2bff      	cmp	r3, #255	@ 0xff
 8000e32:	d058      	beq.n	8000ee6 <__aeabi_fsub+0x222>
 8000e34:	0013      	movs	r3, r2
 8000e36:	e7b4      	b.n	8000da2 <__aeabi_fsub+0xde>
 8000e38:	22fe      	movs	r2, #254	@ 0xfe
 8000e3a:	1c6b      	adds	r3, r5, #1
 8000e3c:	421a      	tst	r2, r3
 8000e3e:	d10d      	bne.n	8000e5c <__aeabi_fsub+0x198>
 8000e40:	2d00      	cmp	r5, #0
 8000e42:	d060      	beq.n	8000f06 <__aeabi_fsub+0x242>
 8000e44:	4663      	mov	r3, ip
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d000      	beq.n	8000e4c <__aeabi_fsub+0x188>
 8000e4a:	e120      	b.n	800108e <__aeabi_fsub+0x3ca>
 8000e4c:	2900      	cmp	r1, #0
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_fsub+0x18e>
 8000e50:	e128      	b.n	80010a4 <__aeabi_fsub+0x3e0>
 8000e52:	2280      	movs	r2, #128	@ 0x80
 8000e54:	2400      	movs	r4, #0
 8000e56:	20ff      	movs	r0, #255	@ 0xff
 8000e58:	03d2      	lsls	r2, r2, #15
 8000e5a:	e78f      	b.n	8000d7c <__aeabi_fsub+0xb8>
 8000e5c:	4663      	mov	r3, ip
 8000e5e:	1a5f      	subs	r7, r3, r1
 8000e60:	017b      	lsls	r3, r7, #5
 8000e62:	d500      	bpl.n	8000e66 <__aeabi_fsub+0x1a2>
 8000e64:	e0fe      	b.n	8001064 <__aeabi_fsub+0x3a0>
 8000e66:	2f00      	cmp	r7, #0
 8000e68:	d000      	beq.n	8000e6c <__aeabi_fsub+0x1a8>
 8000e6a:	e765      	b.n	8000d38 <__aeabi_fsub+0x74>
 8000e6c:	2400      	movs	r4, #0
 8000e6e:	2000      	movs	r0, #0
 8000e70:	2200      	movs	r2, #0
 8000e72:	e783      	b.n	8000d7c <__aeabi_fsub+0xb8>
 8000e74:	4663      	mov	r3, ip
 8000e76:	1a59      	subs	r1, r3, r1
 8000e78:	014b      	lsls	r3, r1, #5
 8000e7a:	d400      	bmi.n	8000e7e <__aeabi_fsub+0x1ba>
 8000e7c:	e119      	b.n	80010b2 <__aeabi_fsub+0x3ee>
 8000e7e:	018f      	lsls	r7, r1, #6
 8000e80:	09bf      	lsrs	r7, r7, #6
 8000e82:	0038      	movs	r0, r7
 8000e84:	f001 fd18 	bl	80028b8 <__clzsi2>
 8000e88:	003b      	movs	r3, r7
 8000e8a:	3805      	subs	r0, #5
 8000e8c:	4083      	lsls	r3, r0
 8000e8e:	2501      	movs	r5, #1
 8000e90:	2220      	movs	r2, #32
 8000e92:	1b40      	subs	r0, r0, r5
 8000e94:	3001      	adds	r0, #1
 8000e96:	1a12      	subs	r2, r2, r0
 8000e98:	0019      	movs	r1, r3
 8000e9a:	4093      	lsls	r3, r2
 8000e9c:	40c1      	lsrs	r1, r0
 8000e9e:	1e5a      	subs	r2, r3, #1
 8000ea0:	4193      	sbcs	r3, r2
 8000ea2:	4319      	orrs	r1, r3
 8000ea4:	468c      	mov	ip, r1
 8000ea6:	1e0b      	subs	r3, r1, #0
 8000ea8:	d0e1      	beq.n	8000e6e <__aeabi_fsub+0x1aa>
 8000eaa:	075b      	lsls	r3, r3, #29
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_fsub+0x1ec>
 8000eae:	e152      	b.n	8001156 <__aeabi_fsub+0x492>
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	400b      	ands	r3, r1
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	d000      	beq.n	8000ebc <__aeabi_fsub+0x1f8>
 8000eba:	e752      	b.n	8000d62 <__aeabi_fsub+0x9e>
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	014a      	lsls	r2, r1, #5
 8000ec0:	d400      	bmi.n	8000ec4 <__aeabi_fsub+0x200>
 8000ec2:	e092      	b.n	8000fea <__aeabi_fsub+0x326>
 8000ec4:	b2c0      	uxtb	r0, r0
 8000ec6:	4663      	mov	r3, ip
 8000ec8:	019a      	lsls	r2, r3, #6
 8000eca:	0a52      	lsrs	r2, r2, #9
 8000ecc:	e756      	b.n	8000d7c <__aeabi_fsub+0xb8>
 8000ece:	4663      	mov	r3, ip
 8000ed0:	075b      	lsls	r3, r3, #29
 8000ed2:	d005      	beq.n	8000ee0 <__aeabi_fsub+0x21c>
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	4662      	mov	r2, ip
 8000ed8:	4013      	ands	r3, r2
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	d000      	beq.n	8000ee0 <__aeabi_fsub+0x21c>
 8000ede:	e740      	b.n	8000d62 <__aeabi_fsub+0x9e>
 8000ee0:	002b      	movs	r3, r5
 8000ee2:	e765      	b.n	8000db0 <__aeabi_fsub+0xec>
 8000ee4:	0007      	movs	r7, r0
 8000ee6:	2f00      	cmp	r7, #0
 8000ee8:	d100      	bne.n	8000eec <__aeabi_fsub+0x228>
 8000eea:	e745      	b.n	8000d78 <__aeabi_fsub+0xb4>
 8000eec:	2280      	movs	r2, #128	@ 0x80
 8000eee:	03d2      	lsls	r2, r2, #15
 8000ef0:	433a      	orrs	r2, r7
 8000ef2:	0252      	lsls	r2, r2, #9
 8000ef4:	20ff      	movs	r0, #255	@ 0xff
 8000ef6:	0a52      	lsrs	r2, r2, #9
 8000ef8:	e740      	b.n	8000d7c <__aeabi_fsub+0xb8>
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d179      	bne.n	8000ff2 <__aeabi_fsub+0x32e>
 8000efe:	22fe      	movs	r2, #254	@ 0xfe
 8000f00:	1c6b      	adds	r3, r5, #1
 8000f02:	421a      	tst	r2, r3
 8000f04:	d1aa      	bne.n	8000e5c <__aeabi_fsub+0x198>
 8000f06:	4663      	mov	r3, ip
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_fsub+0x24a>
 8000f0c:	e0f5      	b.n	80010fa <__aeabi_fsub+0x436>
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_fsub+0x250>
 8000f12:	e0d1      	b.n	80010b8 <__aeabi_fsub+0x3f4>
 8000f14:	1a5f      	subs	r7, r3, r1
 8000f16:	2380      	movs	r3, #128	@ 0x80
 8000f18:	04db      	lsls	r3, r3, #19
 8000f1a:	421f      	tst	r7, r3
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_fsub+0x25c>
 8000f1e:	e10e      	b.n	800113e <__aeabi_fsub+0x47a>
 8000f20:	4662      	mov	r2, ip
 8000f22:	2401      	movs	r4, #1
 8000f24:	1a8a      	subs	r2, r1, r2
 8000f26:	4694      	mov	ip, r2
 8000f28:	2000      	movs	r0, #0
 8000f2a:	4034      	ands	r4, r6
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0x26e>
 8000f30:	e724      	b.n	8000d7c <__aeabi_fsub+0xb8>
 8000f32:	2001      	movs	r0, #1
 8000f34:	421a      	tst	r2, r3
 8000f36:	d1c6      	bne.n	8000ec6 <__aeabi_fsub+0x202>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	08d7      	lsrs	r7, r2, #3
 8000f3c:	e73d      	b.n	8000dba <__aeabi_fsub+0xf6>
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d017      	beq.n	8000f72 <__aeabi_fsub+0x2ae>
 8000f42:	2d00      	cmp	r5, #0
 8000f44:	d000      	beq.n	8000f48 <__aeabi_fsub+0x284>
 8000f46:	e0af      	b.n	80010a8 <__aeabi_fsub+0x3e4>
 8000f48:	23ff      	movs	r3, #255	@ 0xff
 8000f4a:	4665      	mov	r5, ip
 8000f4c:	2d00      	cmp	r5, #0
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_fsub+0x28e>
 8000f50:	e0ad      	b.n	80010ae <__aeabi_fsub+0x3ea>
 8000f52:	1e5e      	subs	r6, r3, #1
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d100      	bne.n	8000f5a <__aeabi_fsub+0x296>
 8000f58:	e089      	b.n	800106e <__aeabi_fsub+0x3aa>
 8000f5a:	2bff      	cmp	r3, #255	@ 0xff
 8000f5c:	d0c2      	beq.n	8000ee4 <__aeabi_fsub+0x220>
 8000f5e:	2e1b      	cmp	r6, #27
 8000f60:	dc00      	bgt.n	8000f64 <__aeabi_fsub+0x2a0>
 8000f62:	e0ab      	b.n	80010bc <__aeabi_fsub+0x3f8>
 8000f64:	1d4b      	adds	r3, r1, #5
 8000f66:	469c      	mov	ip, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	e721      	b.n	8000db0 <__aeabi_fsub+0xec>
 8000f6c:	464b      	mov	r3, r9
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d170      	bne.n	8001054 <__aeabi_fsub+0x390>
 8000f72:	22fe      	movs	r2, #254	@ 0xfe
 8000f74:	1c6b      	adds	r3, r5, #1
 8000f76:	421a      	tst	r2, r3
 8000f78:	d15e      	bne.n	8001038 <__aeabi_fsub+0x374>
 8000f7a:	2d00      	cmp	r5, #0
 8000f7c:	d000      	beq.n	8000f80 <__aeabi_fsub+0x2bc>
 8000f7e:	e0c3      	b.n	8001108 <__aeabi_fsub+0x444>
 8000f80:	4663      	mov	r3, ip
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0x2c4>
 8000f86:	e0d0      	b.n	800112a <__aeabi_fsub+0x466>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_fsub+0x2ca>
 8000f8c:	e094      	b.n	80010b8 <__aeabi_fsub+0x3f4>
 8000f8e:	000a      	movs	r2, r1
 8000f90:	4462      	add	r2, ip
 8000f92:	0153      	lsls	r3, r2, #5
 8000f94:	d400      	bmi.n	8000f98 <__aeabi_fsub+0x2d4>
 8000f96:	e0d8      	b.n	800114a <__aeabi_fsub+0x486>
 8000f98:	0192      	lsls	r2, r2, #6
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	0a52      	lsrs	r2, r2, #9
 8000f9e:	e6ed      	b.n	8000d7c <__aeabi_fsub+0xb8>
 8000fa0:	0008      	movs	r0, r1
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	40d8      	lsrs	r0, r3
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	4099      	lsls	r1, r3
 8000faa:	000b      	movs	r3, r1
 8000fac:	1e5a      	subs	r2, r3, #1
 8000fae:	4193      	sbcs	r3, r2
 8000fb0:	4303      	orrs	r3, r0
 8000fb2:	449c      	add	ip, r3
 8000fb4:	4663      	mov	r3, ip
 8000fb6:	015b      	lsls	r3, r3, #5
 8000fb8:	d589      	bpl.n	8000ece <__aeabi_fsub+0x20a>
 8000fba:	3501      	adds	r5, #1
 8000fbc:	2dff      	cmp	r5, #255	@ 0xff
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_fsub+0x2fe>
 8000fc0:	e6da      	b.n	8000d78 <__aeabi_fsub+0xb4>
 8000fc2:	4662      	mov	r2, ip
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	4919      	ldr	r1, [pc, #100]	@ (800102c <__aeabi_fsub+0x368>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	0852      	lsrs	r2, r2, #1
 8000fcc:	400a      	ands	r2, r1
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	4694      	mov	ip, r2
 8000fd4:	075b      	lsls	r3, r3, #29
 8000fd6:	d004      	beq.n	8000fe2 <__aeabi_fsub+0x31e>
 8000fd8:	230f      	movs	r3, #15
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d000      	beq.n	8000fe2 <__aeabi_fsub+0x31e>
 8000fe0:	e6bf      	b.n	8000d62 <__aeabi_fsub+0x9e>
 8000fe2:	4663      	mov	r3, ip
 8000fe4:	015b      	lsls	r3, r3, #5
 8000fe6:	d500      	bpl.n	8000fea <__aeabi_fsub+0x326>
 8000fe8:	e6c2      	b.n	8000d70 <__aeabi_fsub+0xac>
 8000fea:	4663      	mov	r3, ip
 8000fec:	08df      	lsrs	r7, r3, #3
 8000fee:	002b      	movs	r3, r5
 8000ff0:	e6e3      	b.n	8000dba <__aeabi_fsub+0xf6>
 8000ff2:	1b53      	subs	r3, r2, r5
 8000ff4:	2d00      	cmp	r5, #0
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_fsub+0x336>
 8000ff8:	e6f4      	b.n	8000de4 <__aeabi_fsub+0x120>
 8000ffa:	2080      	movs	r0, #128	@ 0x80
 8000ffc:	4664      	mov	r4, ip
 8000ffe:	04c0      	lsls	r0, r0, #19
 8001000:	4304      	orrs	r4, r0
 8001002:	46a4      	mov	ip, r4
 8001004:	0034      	movs	r4, r6
 8001006:	2001      	movs	r0, #1
 8001008:	2b1b      	cmp	r3, #27
 800100a:	dc09      	bgt.n	8001020 <__aeabi_fsub+0x35c>
 800100c:	2520      	movs	r5, #32
 800100e:	4660      	mov	r0, ip
 8001010:	40d8      	lsrs	r0, r3
 8001012:	1aeb      	subs	r3, r5, r3
 8001014:	4665      	mov	r5, ip
 8001016:	409d      	lsls	r5, r3
 8001018:	002b      	movs	r3, r5
 800101a:	1e5d      	subs	r5, r3, #1
 800101c:	41ab      	sbcs	r3, r5
 800101e:	4318      	orrs	r0, r3
 8001020:	1a0b      	subs	r3, r1, r0
 8001022:	469c      	mov	ip, r3
 8001024:	0015      	movs	r5, r2
 8001026:	e680      	b.n	8000d2a <__aeabi_fsub+0x66>
 8001028:	fbffffff 	.word	0xfbffffff
 800102c:	7dffffff 	.word	0x7dffffff
 8001030:	22fe      	movs	r2, #254	@ 0xfe
 8001032:	1c6b      	adds	r3, r5, #1
 8001034:	4213      	tst	r3, r2
 8001036:	d0a3      	beq.n	8000f80 <__aeabi_fsub+0x2bc>
 8001038:	2bff      	cmp	r3, #255	@ 0xff
 800103a:	d100      	bne.n	800103e <__aeabi_fsub+0x37a>
 800103c:	e69c      	b.n	8000d78 <__aeabi_fsub+0xb4>
 800103e:	4461      	add	r1, ip
 8001040:	0849      	lsrs	r1, r1, #1
 8001042:	074a      	lsls	r2, r1, #29
 8001044:	d049      	beq.n	80010da <__aeabi_fsub+0x416>
 8001046:	220f      	movs	r2, #15
 8001048:	400a      	ands	r2, r1
 800104a:	2a04      	cmp	r2, #4
 800104c:	d045      	beq.n	80010da <__aeabi_fsub+0x416>
 800104e:	1d0a      	adds	r2, r1, #4
 8001050:	4694      	mov	ip, r2
 8001052:	e6ad      	b.n	8000db0 <__aeabi_fsub+0xec>
 8001054:	2d00      	cmp	r5, #0
 8001056:	d100      	bne.n	800105a <__aeabi_fsub+0x396>
 8001058:	e776      	b.n	8000f48 <__aeabi_fsub+0x284>
 800105a:	e68d      	b.n	8000d78 <__aeabi_fsub+0xb4>
 800105c:	0034      	movs	r4, r6
 800105e:	20ff      	movs	r0, #255	@ 0xff
 8001060:	2200      	movs	r2, #0
 8001062:	e68b      	b.n	8000d7c <__aeabi_fsub+0xb8>
 8001064:	4663      	mov	r3, ip
 8001066:	2401      	movs	r4, #1
 8001068:	1acf      	subs	r7, r1, r3
 800106a:	4034      	ands	r4, r6
 800106c:	e664      	b.n	8000d38 <__aeabi_fsub+0x74>
 800106e:	4461      	add	r1, ip
 8001070:	014b      	lsls	r3, r1, #5
 8001072:	d56d      	bpl.n	8001150 <__aeabi_fsub+0x48c>
 8001074:	0848      	lsrs	r0, r1, #1
 8001076:	4944      	ldr	r1, [pc, #272]	@ (8001188 <__aeabi_fsub+0x4c4>)
 8001078:	4001      	ands	r1, r0
 800107a:	0743      	lsls	r3, r0, #29
 800107c:	d02c      	beq.n	80010d8 <__aeabi_fsub+0x414>
 800107e:	230f      	movs	r3, #15
 8001080:	4003      	ands	r3, r0
 8001082:	2b04      	cmp	r3, #4
 8001084:	d028      	beq.n	80010d8 <__aeabi_fsub+0x414>
 8001086:	1d0b      	adds	r3, r1, #4
 8001088:	469c      	mov	ip, r3
 800108a:	2302      	movs	r3, #2
 800108c:	e690      	b.n	8000db0 <__aeabi_fsub+0xec>
 800108e:	2900      	cmp	r1, #0
 8001090:	d100      	bne.n	8001094 <__aeabi_fsub+0x3d0>
 8001092:	e72b      	b.n	8000eec <__aeabi_fsub+0x228>
 8001094:	2380      	movs	r3, #128	@ 0x80
 8001096:	03db      	lsls	r3, r3, #15
 8001098:	429f      	cmp	r7, r3
 800109a:	d200      	bcs.n	800109e <__aeabi_fsub+0x3da>
 800109c:	e726      	b.n	8000eec <__aeabi_fsub+0x228>
 800109e:	4298      	cmp	r0, r3
 80010a0:	d300      	bcc.n	80010a4 <__aeabi_fsub+0x3e0>
 80010a2:	e723      	b.n	8000eec <__aeabi_fsub+0x228>
 80010a4:	2401      	movs	r4, #1
 80010a6:	4034      	ands	r4, r6
 80010a8:	0007      	movs	r7, r0
 80010aa:	e71f      	b.n	8000eec <__aeabi_fsub+0x228>
 80010ac:	0034      	movs	r4, r6
 80010ae:	468c      	mov	ip, r1
 80010b0:	e67e      	b.n	8000db0 <__aeabi_fsub+0xec>
 80010b2:	2301      	movs	r3, #1
 80010b4:	08cf      	lsrs	r7, r1, #3
 80010b6:	e680      	b.n	8000dba <__aeabi_fsub+0xf6>
 80010b8:	2300      	movs	r3, #0
 80010ba:	e67e      	b.n	8000dba <__aeabi_fsub+0xf6>
 80010bc:	2020      	movs	r0, #32
 80010be:	4665      	mov	r5, ip
 80010c0:	1b80      	subs	r0, r0, r6
 80010c2:	4085      	lsls	r5, r0
 80010c4:	4663      	mov	r3, ip
 80010c6:	0028      	movs	r0, r5
 80010c8:	40f3      	lsrs	r3, r6
 80010ca:	1e45      	subs	r5, r0, #1
 80010cc:	41a8      	sbcs	r0, r5
 80010ce:	4303      	orrs	r3, r0
 80010d0:	469c      	mov	ip, r3
 80010d2:	0015      	movs	r5, r2
 80010d4:	448c      	add	ip, r1
 80010d6:	e76d      	b.n	8000fb4 <__aeabi_fsub+0x2f0>
 80010d8:	2302      	movs	r3, #2
 80010da:	08cf      	lsrs	r7, r1, #3
 80010dc:	e66d      	b.n	8000dba <__aeabi_fsub+0xf6>
 80010de:	1b0f      	subs	r7, r1, r4
 80010e0:	017b      	lsls	r3, r7, #5
 80010e2:	d528      	bpl.n	8001136 <__aeabi_fsub+0x472>
 80010e4:	01bf      	lsls	r7, r7, #6
 80010e6:	09bf      	lsrs	r7, r7, #6
 80010e8:	0038      	movs	r0, r7
 80010ea:	f001 fbe5 	bl	80028b8 <__clzsi2>
 80010ee:	003b      	movs	r3, r7
 80010f0:	3805      	subs	r0, #5
 80010f2:	4083      	lsls	r3, r0
 80010f4:	0034      	movs	r4, r6
 80010f6:	2501      	movs	r5, #1
 80010f8:	e6ca      	b.n	8000e90 <__aeabi_fsub+0x1cc>
 80010fa:	2900      	cmp	r1, #0
 80010fc:	d100      	bne.n	8001100 <__aeabi_fsub+0x43c>
 80010fe:	e6b5      	b.n	8000e6c <__aeabi_fsub+0x1a8>
 8001100:	2401      	movs	r4, #1
 8001102:	0007      	movs	r7, r0
 8001104:	4034      	ands	r4, r6
 8001106:	e658      	b.n	8000dba <__aeabi_fsub+0xf6>
 8001108:	4663      	mov	r3, ip
 800110a:	2b00      	cmp	r3, #0
 800110c:	d100      	bne.n	8001110 <__aeabi_fsub+0x44c>
 800110e:	e6e9      	b.n	8000ee4 <__aeabi_fsub+0x220>
 8001110:	2900      	cmp	r1, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_fsub+0x452>
 8001114:	e6ea      	b.n	8000eec <__aeabi_fsub+0x228>
 8001116:	2380      	movs	r3, #128	@ 0x80
 8001118:	03db      	lsls	r3, r3, #15
 800111a:	429f      	cmp	r7, r3
 800111c:	d200      	bcs.n	8001120 <__aeabi_fsub+0x45c>
 800111e:	e6e5      	b.n	8000eec <__aeabi_fsub+0x228>
 8001120:	4298      	cmp	r0, r3
 8001122:	d300      	bcc.n	8001126 <__aeabi_fsub+0x462>
 8001124:	e6e2      	b.n	8000eec <__aeabi_fsub+0x228>
 8001126:	0007      	movs	r7, r0
 8001128:	e6e0      	b.n	8000eec <__aeabi_fsub+0x228>
 800112a:	2900      	cmp	r1, #0
 800112c:	d100      	bne.n	8001130 <__aeabi_fsub+0x46c>
 800112e:	e69e      	b.n	8000e6e <__aeabi_fsub+0x1aa>
 8001130:	2300      	movs	r3, #0
 8001132:	08cf      	lsrs	r7, r1, #3
 8001134:	e641      	b.n	8000dba <__aeabi_fsub+0xf6>
 8001136:	0034      	movs	r4, r6
 8001138:	2301      	movs	r3, #1
 800113a:	08ff      	lsrs	r7, r7, #3
 800113c:	e63d      	b.n	8000dba <__aeabi_fsub+0xf6>
 800113e:	2f00      	cmp	r7, #0
 8001140:	d100      	bne.n	8001144 <__aeabi_fsub+0x480>
 8001142:	e693      	b.n	8000e6c <__aeabi_fsub+0x1a8>
 8001144:	2300      	movs	r3, #0
 8001146:	08ff      	lsrs	r7, r7, #3
 8001148:	e637      	b.n	8000dba <__aeabi_fsub+0xf6>
 800114a:	2300      	movs	r3, #0
 800114c:	08d7      	lsrs	r7, r2, #3
 800114e:	e634      	b.n	8000dba <__aeabi_fsub+0xf6>
 8001150:	2301      	movs	r3, #1
 8001152:	08cf      	lsrs	r7, r1, #3
 8001154:	e631      	b.n	8000dba <__aeabi_fsub+0xf6>
 8001156:	2280      	movs	r2, #128	@ 0x80
 8001158:	000b      	movs	r3, r1
 800115a:	04d2      	lsls	r2, r2, #19
 800115c:	2001      	movs	r0, #1
 800115e:	4013      	ands	r3, r2
 8001160:	4211      	tst	r1, r2
 8001162:	d000      	beq.n	8001166 <__aeabi_fsub+0x4a2>
 8001164:	e6ae      	b.n	8000ec4 <__aeabi_fsub+0x200>
 8001166:	08cf      	lsrs	r7, r1, #3
 8001168:	e627      	b.n	8000dba <__aeabi_fsub+0xf6>
 800116a:	2b00      	cmp	r3, #0
 800116c:	d100      	bne.n	8001170 <__aeabi_fsub+0x4ac>
 800116e:	e75f      	b.n	8001030 <__aeabi_fsub+0x36c>
 8001170:	1b56      	subs	r6, r2, r5
 8001172:	2d00      	cmp	r5, #0
 8001174:	d101      	bne.n	800117a <__aeabi_fsub+0x4b6>
 8001176:	0033      	movs	r3, r6
 8001178:	e6e7      	b.n	8000f4a <__aeabi_fsub+0x286>
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	4660      	mov	r0, ip
 800117e:	04db      	lsls	r3, r3, #19
 8001180:	4318      	orrs	r0, r3
 8001182:	4684      	mov	ip, r0
 8001184:	e6eb      	b.n	8000f5e <__aeabi_fsub+0x29a>
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	7dffffff 	.word	0x7dffffff

0800118c <__aeabi_f2iz>:
 800118c:	0241      	lsls	r1, r0, #9
 800118e:	0042      	lsls	r2, r0, #1
 8001190:	0fc3      	lsrs	r3, r0, #31
 8001192:	0a49      	lsrs	r1, r1, #9
 8001194:	2000      	movs	r0, #0
 8001196:	0e12      	lsrs	r2, r2, #24
 8001198:	2a7e      	cmp	r2, #126	@ 0x7e
 800119a:	dd03      	ble.n	80011a4 <__aeabi_f2iz+0x18>
 800119c:	2a9d      	cmp	r2, #157	@ 0x9d
 800119e:	dd02      	ble.n	80011a6 <__aeabi_f2iz+0x1a>
 80011a0:	4a09      	ldr	r2, [pc, #36]	@ (80011c8 <__aeabi_f2iz+0x3c>)
 80011a2:	1898      	adds	r0, r3, r2
 80011a4:	4770      	bx	lr
 80011a6:	2080      	movs	r0, #128	@ 0x80
 80011a8:	0400      	lsls	r0, r0, #16
 80011aa:	4301      	orrs	r1, r0
 80011ac:	2a95      	cmp	r2, #149	@ 0x95
 80011ae:	dc07      	bgt.n	80011c0 <__aeabi_f2iz+0x34>
 80011b0:	2096      	movs	r0, #150	@ 0x96
 80011b2:	1a82      	subs	r2, r0, r2
 80011b4:	40d1      	lsrs	r1, r2
 80011b6:	4248      	negs	r0, r1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f3      	bne.n	80011a4 <__aeabi_f2iz+0x18>
 80011bc:	0008      	movs	r0, r1
 80011be:	e7f1      	b.n	80011a4 <__aeabi_f2iz+0x18>
 80011c0:	3a96      	subs	r2, #150	@ 0x96
 80011c2:	4091      	lsls	r1, r2
 80011c4:	e7f7      	b.n	80011b6 <__aeabi_f2iz+0x2a>
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	7fffffff 	.word	0x7fffffff

080011cc <__aeabi_i2f>:
 80011cc:	b570      	push	{r4, r5, r6, lr}
 80011ce:	2800      	cmp	r0, #0
 80011d0:	d012      	beq.n	80011f8 <__aeabi_i2f+0x2c>
 80011d2:	17c3      	asrs	r3, r0, #31
 80011d4:	18c5      	adds	r5, r0, r3
 80011d6:	405d      	eors	r5, r3
 80011d8:	0fc4      	lsrs	r4, r0, #31
 80011da:	0028      	movs	r0, r5
 80011dc:	f001 fb6c 	bl	80028b8 <__clzsi2>
 80011e0:	239e      	movs	r3, #158	@ 0x9e
 80011e2:	1a1b      	subs	r3, r3, r0
 80011e4:	2b96      	cmp	r3, #150	@ 0x96
 80011e6:	dc0f      	bgt.n	8001208 <__aeabi_i2f+0x3c>
 80011e8:	2808      	cmp	r0, #8
 80011ea:	d038      	beq.n	800125e <__aeabi_i2f+0x92>
 80011ec:	3808      	subs	r0, #8
 80011ee:	4085      	lsls	r5, r0
 80011f0:	026d      	lsls	r5, r5, #9
 80011f2:	0a6d      	lsrs	r5, r5, #9
 80011f4:	b2d8      	uxtb	r0, r3
 80011f6:	e002      	b.n	80011fe <__aeabi_i2f+0x32>
 80011f8:	2400      	movs	r4, #0
 80011fa:	2000      	movs	r0, #0
 80011fc:	2500      	movs	r5, #0
 80011fe:	05c0      	lsls	r0, r0, #23
 8001200:	4328      	orrs	r0, r5
 8001202:	07e4      	lsls	r4, r4, #31
 8001204:	4320      	orrs	r0, r4
 8001206:	bd70      	pop	{r4, r5, r6, pc}
 8001208:	2b99      	cmp	r3, #153	@ 0x99
 800120a:	dc14      	bgt.n	8001236 <__aeabi_i2f+0x6a>
 800120c:	1f42      	subs	r2, r0, #5
 800120e:	4095      	lsls	r5, r2
 8001210:	002a      	movs	r2, r5
 8001212:	4915      	ldr	r1, [pc, #84]	@ (8001268 <__aeabi_i2f+0x9c>)
 8001214:	4011      	ands	r1, r2
 8001216:	0755      	lsls	r5, r2, #29
 8001218:	d01c      	beq.n	8001254 <__aeabi_i2f+0x88>
 800121a:	250f      	movs	r5, #15
 800121c:	402a      	ands	r2, r5
 800121e:	2a04      	cmp	r2, #4
 8001220:	d018      	beq.n	8001254 <__aeabi_i2f+0x88>
 8001222:	3104      	adds	r1, #4
 8001224:	08ca      	lsrs	r2, r1, #3
 8001226:	0149      	lsls	r1, r1, #5
 8001228:	d515      	bpl.n	8001256 <__aeabi_i2f+0x8a>
 800122a:	239f      	movs	r3, #159	@ 0x9f
 800122c:	0252      	lsls	r2, r2, #9
 800122e:	1a18      	subs	r0, r3, r0
 8001230:	0a55      	lsrs	r5, r2, #9
 8001232:	b2c0      	uxtb	r0, r0
 8001234:	e7e3      	b.n	80011fe <__aeabi_i2f+0x32>
 8001236:	2205      	movs	r2, #5
 8001238:	0029      	movs	r1, r5
 800123a:	1a12      	subs	r2, r2, r0
 800123c:	40d1      	lsrs	r1, r2
 800123e:	0002      	movs	r2, r0
 8001240:	321b      	adds	r2, #27
 8001242:	4095      	lsls	r5, r2
 8001244:	002a      	movs	r2, r5
 8001246:	1e55      	subs	r5, r2, #1
 8001248:	41aa      	sbcs	r2, r5
 800124a:	430a      	orrs	r2, r1
 800124c:	4906      	ldr	r1, [pc, #24]	@ (8001268 <__aeabi_i2f+0x9c>)
 800124e:	4011      	ands	r1, r2
 8001250:	0755      	lsls	r5, r2, #29
 8001252:	d1e2      	bne.n	800121a <__aeabi_i2f+0x4e>
 8001254:	08ca      	lsrs	r2, r1, #3
 8001256:	0252      	lsls	r2, r2, #9
 8001258:	0a55      	lsrs	r5, r2, #9
 800125a:	b2d8      	uxtb	r0, r3
 800125c:	e7cf      	b.n	80011fe <__aeabi_i2f+0x32>
 800125e:	026d      	lsls	r5, r5, #9
 8001260:	0a6d      	lsrs	r5, r5, #9
 8001262:	308e      	adds	r0, #142	@ 0x8e
 8001264:	e7cb      	b.n	80011fe <__aeabi_i2f+0x32>
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	fbffffff 	.word	0xfbffffff

0800126c <__aeabi_ui2f>:
 800126c:	b510      	push	{r4, lr}
 800126e:	1e04      	subs	r4, r0, #0
 8001270:	d00d      	beq.n	800128e <__aeabi_ui2f+0x22>
 8001272:	f001 fb21 	bl	80028b8 <__clzsi2>
 8001276:	239e      	movs	r3, #158	@ 0x9e
 8001278:	1a1b      	subs	r3, r3, r0
 800127a:	2b96      	cmp	r3, #150	@ 0x96
 800127c:	dc0c      	bgt.n	8001298 <__aeabi_ui2f+0x2c>
 800127e:	2808      	cmp	r0, #8
 8001280:	d034      	beq.n	80012ec <__aeabi_ui2f+0x80>
 8001282:	3808      	subs	r0, #8
 8001284:	4084      	lsls	r4, r0
 8001286:	0264      	lsls	r4, r4, #9
 8001288:	0a64      	lsrs	r4, r4, #9
 800128a:	b2d8      	uxtb	r0, r3
 800128c:	e001      	b.n	8001292 <__aeabi_ui2f+0x26>
 800128e:	2000      	movs	r0, #0
 8001290:	2400      	movs	r4, #0
 8001292:	05c0      	lsls	r0, r0, #23
 8001294:	4320      	orrs	r0, r4
 8001296:	bd10      	pop	{r4, pc}
 8001298:	2b99      	cmp	r3, #153	@ 0x99
 800129a:	dc13      	bgt.n	80012c4 <__aeabi_ui2f+0x58>
 800129c:	1f42      	subs	r2, r0, #5
 800129e:	4094      	lsls	r4, r2
 80012a0:	4a14      	ldr	r2, [pc, #80]	@ (80012f4 <__aeabi_ui2f+0x88>)
 80012a2:	4022      	ands	r2, r4
 80012a4:	0761      	lsls	r1, r4, #29
 80012a6:	d01c      	beq.n	80012e2 <__aeabi_ui2f+0x76>
 80012a8:	210f      	movs	r1, #15
 80012aa:	4021      	ands	r1, r4
 80012ac:	2904      	cmp	r1, #4
 80012ae:	d018      	beq.n	80012e2 <__aeabi_ui2f+0x76>
 80012b0:	3204      	adds	r2, #4
 80012b2:	08d4      	lsrs	r4, r2, #3
 80012b4:	0152      	lsls	r2, r2, #5
 80012b6:	d515      	bpl.n	80012e4 <__aeabi_ui2f+0x78>
 80012b8:	239f      	movs	r3, #159	@ 0x9f
 80012ba:	0264      	lsls	r4, r4, #9
 80012bc:	1a18      	subs	r0, r3, r0
 80012be:	0a64      	lsrs	r4, r4, #9
 80012c0:	b2c0      	uxtb	r0, r0
 80012c2:	e7e6      	b.n	8001292 <__aeabi_ui2f+0x26>
 80012c4:	0002      	movs	r2, r0
 80012c6:	0021      	movs	r1, r4
 80012c8:	321b      	adds	r2, #27
 80012ca:	4091      	lsls	r1, r2
 80012cc:	000a      	movs	r2, r1
 80012ce:	1e51      	subs	r1, r2, #1
 80012d0:	418a      	sbcs	r2, r1
 80012d2:	2105      	movs	r1, #5
 80012d4:	1a09      	subs	r1, r1, r0
 80012d6:	40cc      	lsrs	r4, r1
 80012d8:	4314      	orrs	r4, r2
 80012da:	4a06      	ldr	r2, [pc, #24]	@ (80012f4 <__aeabi_ui2f+0x88>)
 80012dc:	4022      	ands	r2, r4
 80012de:	0761      	lsls	r1, r4, #29
 80012e0:	d1e2      	bne.n	80012a8 <__aeabi_ui2f+0x3c>
 80012e2:	08d4      	lsrs	r4, r2, #3
 80012e4:	0264      	lsls	r4, r4, #9
 80012e6:	0a64      	lsrs	r4, r4, #9
 80012e8:	b2d8      	uxtb	r0, r3
 80012ea:	e7d2      	b.n	8001292 <__aeabi_ui2f+0x26>
 80012ec:	0264      	lsls	r4, r4, #9
 80012ee:	0a64      	lsrs	r4, r4, #9
 80012f0:	308e      	adds	r0, #142	@ 0x8e
 80012f2:	e7ce      	b.n	8001292 <__aeabi_ui2f+0x26>
 80012f4:	fbffffff 	.word	0xfbffffff

080012f8 <__aeabi_dadd>:
 80012f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fa:	464f      	mov	r7, r9
 80012fc:	4646      	mov	r6, r8
 80012fe:	46d6      	mov	lr, sl
 8001300:	b5c0      	push	{r6, r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	9000      	str	r0, [sp, #0]
 8001306:	9101      	str	r1, [sp, #4]
 8001308:	030e      	lsls	r6, r1, #12
 800130a:	004c      	lsls	r4, r1, #1
 800130c:	0fcd      	lsrs	r5, r1, #31
 800130e:	0a71      	lsrs	r1, r6, #9
 8001310:	9e00      	ldr	r6, [sp, #0]
 8001312:	005f      	lsls	r7, r3, #1
 8001314:	0f76      	lsrs	r6, r6, #29
 8001316:	430e      	orrs	r6, r1
 8001318:	9900      	ldr	r1, [sp, #0]
 800131a:	9200      	str	r2, [sp, #0]
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	00c9      	lsls	r1, r1, #3
 8001320:	4689      	mov	r9, r1
 8001322:	0319      	lsls	r1, r3, #12
 8001324:	0d7b      	lsrs	r3, r7, #21
 8001326:	4698      	mov	r8, r3
 8001328:	9b01      	ldr	r3, [sp, #4]
 800132a:	0a49      	lsrs	r1, r1, #9
 800132c:	0fdb      	lsrs	r3, r3, #31
 800132e:	469c      	mov	ip, r3
 8001330:	9b00      	ldr	r3, [sp, #0]
 8001332:	9a00      	ldr	r2, [sp, #0]
 8001334:	0f5b      	lsrs	r3, r3, #29
 8001336:	430b      	orrs	r3, r1
 8001338:	4641      	mov	r1, r8
 800133a:	0d64      	lsrs	r4, r4, #21
 800133c:	00d2      	lsls	r2, r2, #3
 800133e:	1a61      	subs	r1, r4, r1
 8001340:	4565      	cmp	r5, ip
 8001342:	d100      	bne.n	8001346 <__aeabi_dadd+0x4e>
 8001344:	e0a6      	b.n	8001494 <__aeabi_dadd+0x19c>
 8001346:	2900      	cmp	r1, #0
 8001348:	dd72      	ble.n	8001430 <__aeabi_dadd+0x138>
 800134a:	4647      	mov	r7, r8
 800134c:	2f00      	cmp	r7, #0
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0x5a>
 8001350:	e0dd      	b.n	800150e <__aeabi_dadd+0x216>
 8001352:	4fcc      	ldr	r7, [pc, #816]	@ (8001684 <__aeabi_dadd+0x38c>)
 8001354:	42bc      	cmp	r4, r7
 8001356:	d100      	bne.n	800135a <__aeabi_dadd+0x62>
 8001358:	e19a      	b.n	8001690 <__aeabi_dadd+0x398>
 800135a:	2701      	movs	r7, #1
 800135c:	2938      	cmp	r1, #56	@ 0x38
 800135e:	dc17      	bgt.n	8001390 <__aeabi_dadd+0x98>
 8001360:	2780      	movs	r7, #128	@ 0x80
 8001362:	043f      	lsls	r7, r7, #16
 8001364:	433b      	orrs	r3, r7
 8001366:	291f      	cmp	r1, #31
 8001368:	dd00      	ble.n	800136c <__aeabi_dadd+0x74>
 800136a:	e1dd      	b.n	8001728 <__aeabi_dadd+0x430>
 800136c:	2720      	movs	r7, #32
 800136e:	1a78      	subs	r0, r7, r1
 8001370:	001f      	movs	r7, r3
 8001372:	4087      	lsls	r7, r0
 8001374:	46ba      	mov	sl, r7
 8001376:	0017      	movs	r7, r2
 8001378:	40cf      	lsrs	r7, r1
 800137a:	4684      	mov	ip, r0
 800137c:	0038      	movs	r0, r7
 800137e:	4657      	mov	r7, sl
 8001380:	4307      	orrs	r7, r0
 8001382:	4660      	mov	r0, ip
 8001384:	4082      	lsls	r2, r0
 8001386:	40cb      	lsrs	r3, r1
 8001388:	1e50      	subs	r0, r2, #1
 800138a:	4182      	sbcs	r2, r0
 800138c:	1af6      	subs	r6, r6, r3
 800138e:	4317      	orrs	r7, r2
 8001390:	464b      	mov	r3, r9
 8001392:	1bdf      	subs	r7, r3, r7
 8001394:	45b9      	cmp	r9, r7
 8001396:	4180      	sbcs	r0, r0
 8001398:	4240      	negs	r0, r0
 800139a:	1a36      	subs	r6, r6, r0
 800139c:	0233      	lsls	r3, r6, #8
 800139e:	d400      	bmi.n	80013a2 <__aeabi_dadd+0xaa>
 80013a0:	e0ff      	b.n	80015a2 <__aeabi_dadd+0x2aa>
 80013a2:	0276      	lsls	r6, r6, #9
 80013a4:	0a76      	lsrs	r6, r6, #9
 80013a6:	2e00      	cmp	r6, #0
 80013a8:	d100      	bne.n	80013ac <__aeabi_dadd+0xb4>
 80013aa:	e13c      	b.n	8001626 <__aeabi_dadd+0x32e>
 80013ac:	0030      	movs	r0, r6
 80013ae:	f001 fa83 	bl	80028b8 <__clzsi2>
 80013b2:	0003      	movs	r3, r0
 80013b4:	3b08      	subs	r3, #8
 80013b6:	2120      	movs	r1, #32
 80013b8:	0038      	movs	r0, r7
 80013ba:	1aca      	subs	r2, r1, r3
 80013bc:	40d0      	lsrs	r0, r2
 80013be:	409e      	lsls	r6, r3
 80013c0:	0002      	movs	r2, r0
 80013c2:	409f      	lsls	r7, r3
 80013c4:	4332      	orrs	r2, r6
 80013c6:	429c      	cmp	r4, r3
 80013c8:	dd00      	ble.n	80013cc <__aeabi_dadd+0xd4>
 80013ca:	e1a6      	b.n	800171a <__aeabi_dadd+0x422>
 80013cc:	1b18      	subs	r0, r3, r4
 80013ce:	3001      	adds	r0, #1
 80013d0:	1a09      	subs	r1, r1, r0
 80013d2:	003e      	movs	r6, r7
 80013d4:	408f      	lsls	r7, r1
 80013d6:	40c6      	lsrs	r6, r0
 80013d8:	1e7b      	subs	r3, r7, #1
 80013da:	419f      	sbcs	r7, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	408b      	lsls	r3, r1
 80013e0:	4337      	orrs	r7, r6
 80013e2:	431f      	orrs	r7, r3
 80013e4:	40c2      	lsrs	r2, r0
 80013e6:	003b      	movs	r3, r7
 80013e8:	0016      	movs	r6, r2
 80013ea:	2400      	movs	r4, #0
 80013ec:	4313      	orrs	r3, r2
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0xfa>
 80013f0:	e1df      	b.n	80017b2 <__aeabi_dadd+0x4ba>
 80013f2:	077b      	lsls	r3, r7, #29
 80013f4:	d100      	bne.n	80013f8 <__aeabi_dadd+0x100>
 80013f6:	e332      	b.n	8001a5e <__aeabi_dadd+0x766>
 80013f8:	230f      	movs	r3, #15
 80013fa:	003a      	movs	r2, r7
 80013fc:	403b      	ands	r3, r7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d004      	beq.n	800140c <__aeabi_dadd+0x114>
 8001402:	1d3a      	adds	r2, r7, #4
 8001404:	42ba      	cmp	r2, r7
 8001406:	41bf      	sbcs	r7, r7
 8001408:	427f      	negs	r7, r7
 800140a:	19f6      	adds	r6, r6, r7
 800140c:	0233      	lsls	r3, r6, #8
 800140e:	d400      	bmi.n	8001412 <__aeabi_dadd+0x11a>
 8001410:	e323      	b.n	8001a5a <__aeabi_dadd+0x762>
 8001412:	4b9c      	ldr	r3, [pc, #624]	@ (8001684 <__aeabi_dadd+0x38c>)
 8001414:	3401      	adds	r4, #1
 8001416:	429c      	cmp	r4, r3
 8001418:	d100      	bne.n	800141c <__aeabi_dadd+0x124>
 800141a:	e0b4      	b.n	8001586 <__aeabi_dadd+0x28e>
 800141c:	4b9a      	ldr	r3, [pc, #616]	@ (8001688 <__aeabi_dadd+0x390>)
 800141e:	0564      	lsls	r4, r4, #21
 8001420:	401e      	ands	r6, r3
 8001422:	0d64      	lsrs	r4, r4, #21
 8001424:	0777      	lsls	r7, r6, #29
 8001426:	08d2      	lsrs	r2, r2, #3
 8001428:	0276      	lsls	r6, r6, #9
 800142a:	4317      	orrs	r7, r2
 800142c:	0b36      	lsrs	r6, r6, #12
 800142e:	e0ac      	b.n	800158a <__aeabi_dadd+0x292>
 8001430:	2900      	cmp	r1, #0
 8001432:	d100      	bne.n	8001436 <__aeabi_dadd+0x13e>
 8001434:	e07e      	b.n	8001534 <__aeabi_dadd+0x23c>
 8001436:	4641      	mov	r1, r8
 8001438:	1b09      	subs	r1, r1, r4
 800143a:	2c00      	cmp	r4, #0
 800143c:	d000      	beq.n	8001440 <__aeabi_dadd+0x148>
 800143e:	e160      	b.n	8001702 <__aeabi_dadd+0x40a>
 8001440:	0034      	movs	r4, r6
 8001442:	4648      	mov	r0, r9
 8001444:	4304      	orrs	r4, r0
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x152>
 8001448:	e1c9      	b.n	80017de <__aeabi_dadd+0x4e6>
 800144a:	1e4c      	subs	r4, r1, #1
 800144c:	2901      	cmp	r1, #1
 800144e:	d100      	bne.n	8001452 <__aeabi_dadd+0x15a>
 8001450:	e22e      	b.n	80018b0 <__aeabi_dadd+0x5b8>
 8001452:	4d8c      	ldr	r5, [pc, #560]	@ (8001684 <__aeabi_dadd+0x38c>)
 8001454:	42a9      	cmp	r1, r5
 8001456:	d100      	bne.n	800145a <__aeabi_dadd+0x162>
 8001458:	e224      	b.n	80018a4 <__aeabi_dadd+0x5ac>
 800145a:	2701      	movs	r7, #1
 800145c:	2c38      	cmp	r4, #56	@ 0x38
 800145e:	dc11      	bgt.n	8001484 <__aeabi_dadd+0x18c>
 8001460:	0021      	movs	r1, r4
 8001462:	291f      	cmp	r1, #31
 8001464:	dd00      	ble.n	8001468 <__aeabi_dadd+0x170>
 8001466:	e20b      	b.n	8001880 <__aeabi_dadd+0x588>
 8001468:	2420      	movs	r4, #32
 800146a:	0037      	movs	r7, r6
 800146c:	4648      	mov	r0, r9
 800146e:	1a64      	subs	r4, r4, r1
 8001470:	40a7      	lsls	r7, r4
 8001472:	40c8      	lsrs	r0, r1
 8001474:	4307      	orrs	r7, r0
 8001476:	4648      	mov	r0, r9
 8001478:	40a0      	lsls	r0, r4
 800147a:	40ce      	lsrs	r6, r1
 800147c:	1e44      	subs	r4, r0, #1
 800147e:	41a0      	sbcs	r0, r4
 8001480:	1b9b      	subs	r3, r3, r6
 8001482:	4307      	orrs	r7, r0
 8001484:	1bd7      	subs	r7, r2, r7
 8001486:	42ba      	cmp	r2, r7
 8001488:	4192      	sbcs	r2, r2
 800148a:	4252      	negs	r2, r2
 800148c:	4665      	mov	r5, ip
 800148e:	4644      	mov	r4, r8
 8001490:	1a9e      	subs	r6, r3, r2
 8001492:	e783      	b.n	800139c <__aeabi_dadd+0xa4>
 8001494:	2900      	cmp	r1, #0
 8001496:	dc00      	bgt.n	800149a <__aeabi_dadd+0x1a2>
 8001498:	e09c      	b.n	80015d4 <__aeabi_dadd+0x2dc>
 800149a:	4647      	mov	r7, r8
 800149c:	2f00      	cmp	r7, #0
 800149e:	d167      	bne.n	8001570 <__aeabi_dadd+0x278>
 80014a0:	001f      	movs	r7, r3
 80014a2:	4317      	orrs	r7, r2
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dadd+0x1b0>
 80014a6:	e0e4      	b.n	8001672 <__aeabi_dadd+0x37a>
 80014a8:	1e48      	subs	r0, r1, #1
 80014aa:	2901      	cmp	r1, #1
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x1b8>
 80014ae:	e19b      	b.n	80017e8 <__aeabi_dadd+0x4f0>
 80014b0:	4f74      	ldr	r7, [pc, #464]	@ (8001684 <__aeabi_dadd+0x38c>)
 80014b2:	42b9      	cmp	r1, r7
 80014b4:	d100      	bne.n	80014b8 <__aeabi_dadd+0x1c0>
 80014b6:	e0eb      	b.n	8001690 <__aeabi_dadd+0x398>
 80014b8:	2701      	movs	r7, #1
 80014ba:	0001      	movs	r1, r0
 80014bc:	2838      	cmp	r0, #56	@ 0x38
 80014be:	dc11      	bgt.n	80014e4 <__aeabi_dadd+0x1ec>
 80014c0:	291f      	cmp	r1, #31
 80014c2:	dd00      	ble.n	80014c6 <__aeabi_dadd+0x1ce>
 80014c4:	e1c7      	b.n	8001856 <__aeabi_dadd+0x55e>
 80014c6:	2720      	movs	r7, #32
 80014c8:	1a78      	subs	r0, r7, r1
 80014ca:	001f      	movs	r7, r3
 80014cc:	4684      	mov	ip, r0
 80014ce:	4087      	lsls	r7, r0
 80014d0:	0010      	movs	r0, r2
 80014d2:	40c8      	lsrs	r0, r1
 80014d4:	4307      	orrs	r7, r0
 80014d6:	4660      	mov	r0, ip
 80014d8:	4082      	lsls	r2, r0
 80014da:	40cb      	lsrs	r3, r1
 80014dc:	1e50      	subs	r0, r2, #1
 80014de:	4182      	sbcs	r2, r0
 80014e0:	18f6      	adds	r6, r6, r3
 80014e2:	4317      	orrs	r7, r2
 80014e4:	444f      	add	r7, r9
 80014e6:	454f      	cmp	r7, r9
 80014e8:	4180      	sbcs	r0, r0
 80014ea:	4240      	negs	r0, r0
 80014ec:	1836      	adds	r6, r6, r0
 80014ee:	0233      	lsls	r3, r6, #8
 80014f0:	d557      	bpl.n	80015a2 <__aeabi_dadd+0x2aa>
 80014f2:	4b64      	ldr	r3, [pc, #400]	@ (8001684 <__aeabi_dadd+0x38c>)
 80014f4:	3401      	adds	r4, #1
 80014f6:	429c      	cmp	r4, r3
 80014f8:	d045      	beq.n	8001586 <__aeabi_dadd+0x28e>
 80014fa:	2101      	movs	r1, #1
 80014fc:	4b62      	ldr	r3, [pc, #392]	@ (8001688 <__aeabi_dadd+0x390>)
 80014fe:	087a      	lsrs	r2, r7, #1
 8001500:	401e      	ands	r6, r3
 8001502:	4039      	ands	r1, r7
 8001504:	430a      	orrs	r2, r1
 8001506:	07f7      	lsls	r7, r6, #31
 8001508:	4317      	orrs	r7, r2
 800150a:	0876      	lsrs	r6, r6, #1
 800150c:	e771      	b.n	80013f2 <__aeabi_dadd+0xfa>
 800150e:	001f      	movs	r7, r3
 8001510:	4317      	orrs	r7, r2
 8001512:	d100      	bne.n	8001516 <__aeabi_dadd+0x21e>
 8001514:	e0ad      	b.n	8001672 <__aeabi_dadd+0x37a>
 8001516:	1e4f      	subs	r7, r1, #1
 8001518:	46bc      	mov	ip, r7
 800151a:	2901      	cmp	r1, #1
 800151c:	d100      	bne.n	8001520 <__aeabi_dadd+0x228>
 800151e:	e182      	b.n	8001826 <__aeabi_dadd+0x52e>
 8001520:	4f58      	ldr	r7, [pc, #352]	@ (8001684 <__aeabi_dadd+0x38c>)
 8001522:	42b9      	cmp	r1, r7
 8001524:	d100      	bne.n	8001528 <__aeabi_dadd+0x230>
 8001526:	e190      	b.n	800184a <__aeabi_dadd+0x552>
 8001528:	4661      	mov	r1, ip
 800152a:	2701      	movs	r7, #1
 800152c:	2938      	cmp	r1, #56	@ 0x38
 800152e:	dd00      	ble.n	8001532 <__aeabi_dadd+0x23a>
 8001530:	e72e      	b.n	8001390 <__aeabi_dadd+0x98>
 8001532:	e718      	b.n	8001366 <__aeabi_dadd+0x6e>
 8001534:	4f55      	ldr	r7, [pc, #340]	@ (800168c <__aeabi_dadd+0x394>)
 8001536:	1c61      	adds	r1, r4, #1
 8001538:	4239      	tst	r1, r7
 800153a:	d000      	beq.n	800153e <__aeabi_dadd+0x246>
 800153c:	e0d0      	b.n	80016e0 <__aeabi_dadd+0x3e8>
 800153e:	0031      	movs	r1, r6
 8001540:	4648      	mov	r0, r9
 8001542:	001f      	movs	r7, r3
 8001544:	4301      	orrs	r1, r0
 8001546:	4317      	orrs	r7, r2
 8001548:	2c00      	cmp	r4, #0
 800154a:	d000      	beq.n	800154e <__aeabi_dadd+0x256>
 800154c:	e13d      	b.n	80017ca <__aeabi_dadd+0x4d2>
 800154e:	2900      	cmp	r1, #0
 8001550:	d100      	bne.n	8001554 <__aeabi_dadd+0x25c>
 8001552:	e1bc      	b.n	80018ce <__aeabi_dadd+0x5d6>
 8001554:	2f00      	cmp	r7, #0
 8001556:	d000      	beq.n	800155a <__aeabi_dadd+0x262>
 8001558:	e1bf      	b.n	80018da <__aeabi_dadd+0x5e2>
 800155a:	464b      	mov	r3, r9
 800155c:	2100      	movs	r1, #0
 800155e:	08d8      	lsrs	r0, r3, #3
 8001560:	0777      	lsls	r7, r6, #29
 8001562:	4307      	orrs	r7, r0
 8001564:	08f0      	lsrs	r0, r6, #3
 8001566:	0306      	lsls	r6, r0, #12
 8001568:	054c      	lsls	r4, r1, #21
 800156a:	0b36      	lsrs	r6, r6, #12
 800156c:	0d64      	lsrs	r4, r4, #21
 800156e:	e00c      	b.n	800158a <__aeabi_dadd+0x292>
 8001570:	4f44      	ldr	r7, [pc, #272]	@ (8001684 <__aeabi_dadd+0x38c>)
 8001572:	42bc      	cmp	r4, r7
 8001574:	d100      	bne.n	8001578 <__aeabi_dadd+0x280>
 8001576:	e08b      	b.n	8001690 <__aeabi_dadd+0x398>
 8001578:	2701      	movs	r7, #1
 800157a:	2938      	cmp	r1, #56	@ 0x38
 800157c:	dcb2      	bgt.n	80014e4 <__aeabi_dadd+0x1ec>
 800157e:	2780      	movs	r7, #128	@ 0x80
 8001580:	043f      	lsls	r7, r7, #16
 8001582:	433b      	orrs	r3, r7
 8001584:	e79c      	b.n	80014c0 <__aeabi_dadd+0x1c8>
 8001586:	2600      	movs	r6, #0
 8001588:	2700      	movs	r7, #0
 800158a:	0524      	lsls	r4, r4, #20
 800158c:	4334      	orrs	r4, r6
 800158e:	07ed      	lsls	r5, r5, #31
 8001590:	432c      	orrs	r4, r5
 8001592:	0038      	movs	r0, r7
 8001594:	0021      	movs	r1, r4
 8001596:	b002      	add	sp, #8
 8001598:	bce0      	pop	{r5, r6, r7}
 800159a:	46ba      	mov	sl, r7
 800159c:	46b1      	mov	r9, r6
 800159e:	46a8      	mov	r8, r5
 80015a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a2:	077b      	lsls	r3, r7, #29
 80015a4:	d004      	beq.n	80015b0 <__aeabi_dadd+0x2b8>
 80015a6:	230f      	movs	r3, #15
 80015a8:	403b      	ands	r3, r7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d000      	beq.n	80015b0 <__aeabi_dadd+0x2b8>
 80015ae:	e728      	b.n	8001402 <__aeabi_dadd+0x10a>
 80015b0:	08f8      	lsrs	r0, r7, #3
 80015b2:	4b34      	ldr	r3, [pc, #208]	@ (8001684 <__aeabi_dadd+0x38c>)
 80015b4:	0777      	lsls	r7, r6, #29
 80015b6:	4307      	orrs	r7, r0
 80015b8:	08f0      	lsrs	r0, r6, #3
 80015ba:	429c      	cmp	r4, r3
 80015bc:	d000      	beq.n	80015c0 <__aeabi_dadd+0x2c8>
 80015be:	e24a      	b.n	8001a56 <__aeabi_dadd+0x75e>
 80015c0:	003b      	movs	r3, r7
 80015c2:	4303      	orrs	r3, r0
 80015c4:	d059      	beq.n	800167a <__aeabi_dadd+0x382>
 80015c6:	2680      	movs	r6, #128	@ 0x80
 80015c8:	0336      	lsls	r6, r6, #12
 80015ca:	4306      	orrs	r6, r0
 80015cc:	0336      	lsls	r6, r6, #12
 80015ce:	4c2d      	ldr	r4, [pc, #180]	@ (8001684 <__aeabi_dadd+0x38c>)
 80015d0:	0b36      	lsrs	r6, r6, #12
 80015d2:	e7da      	b.n	800158a <__aeabi_dadd+0x292>
 80015d4:	2900      	cmp	r1, #0
 80015d6:	d061      	beq.n	800169c <__aeabi_dadd+0x3a4>
 80015d8:	4641      	mov	r1, r8
 80015da:	1b09      	subs	r1, r1, r4
 80015dc:	2c00      	cmp	r4, #0
 80015de:	d100      	bne.n	80015e2 <__aeabi_dadd+0x2ea>
 80015e0:	e0b9      	b.n	8001756 <__aeabi_dadd+0x45e>
 80015e2:	4c28      	ldr	r4, [pc, #160]	@ (8001684 <__aeabi_dadd+0x38c>)
 80015e4:	45a0      	cmp	r8, r4
 80015e6:	d100      	bne.n	80015ea <__aeabi_dadd+0x2f2>
 80015e8:	e1a5      	b.n	8001936 <__aeabi_dadd+0x63e>
 80015ea:	2701      	movs	r7, #1
 80015ec:	2938      	cmp	r1, #56	@ 0x38
 80015ee:	dc13      	bgt.n	8001618 <__aeabi_dadd+0x320>
 80015f0:	2480      	movs	r4, #128	@ 0x80
 80015f2:	0424      	lsls	r4, r4, #16
 80015f4:	4326      	orrs	r6, r4
 80015f6:	291f      	cmp	r1, #31
 80015f8:	dd00      	ble.n	80015fc <__aeabi_dadd+0x304>
 80015fa:	e1c8      	b.n	800198e <__aeabi_dadd+0x696>
 80015fc:	2420      	movs	r4, #32
 80015fe:	0037      	movs	r7, r6
 8001600:	4648      	mov	r0, r9
 8001602:	1a64      	subs	r4, r4, r1
 8001604:	40a7      	lsls	r7, r4
 8001606:	40c8      	lsrs	r0, r1
 8001608:	4307      	orrs	r7, r0
 800160a:	4648      	mov	r0, r9
 800160c:	40a0      	lsls	r0, r4
 800160e:	40ce      	lsrs	r6, r1
 8001610:	1e44      	subs	r4, r0, #1
 8001612:	41a0      	sbcs	r0, r4
 8001614:	199b      	adds	r3, r3, r6
 8001616:	4307      	orrs	r7, r0
 8001618:	18bf      	adds	r7, r7, r2
 800161a:	4297      	cmp	r7, r2
 800161c:	4192      	sbcs	r2, r2
 800161e:	4252      	negs	r2, r2
 8001620:	4644      	mov	r4, r8
 8001622:	18d6      	adds	r6, r2, r3
 8001624:	e763      	b.n	80014ee <__aeabi_dadd+0x1f6>
 8001626:	0038      	movs	r0, r7
 8001628:	f001 f946 	bl	80028b8 <__clzsi2>
 800162c:	0003      	movs	r3, r0
 800162e:	3318      	adds	r3, #24
 8001630:	2b1f      	cmp	r3, #31
 8001632:	dc00      	bgt.n	8001636 <__aeabi_dadd+0x33e>
 8001634:	e6bf      	b.n	80013b6 <__aeabi_dadd+0xbe>
 8001636:	003a      	movs	r2, r7
 8001638:	3808      	subs	r0, #8
 800163a:	4082      	lsls	r2, r0
 800163c:	429c      	cmp	r4, r3
 800163e:	dd00      	ble.n	8001642 <__aeabi_dadd+0x34a>
 8001640:	e083      	b.n	800174a <__aeabi_dadd+0x452>
 8001642:	1b1b      	subs	r3, r3, r4
 8001644:	1c58      	adds	r0, r3, #1
 8001646:	281f      	cmp	r0, #31
 8001648:	dc00      	bgt.n	800164c <__aeabi_dadd+0x354>
 800164a:	e1b4      	b.n	80019b6 <__aeabi_dadd+0x6be>
 800164c:	0017      	movs	r7, r2
 800164e:	3b1f      	subs	r3, #31
 8001650:	40df      	lsrs	r7, r3
 8001652:	2820      	cmp	r0, #32
 8001654:	d005      	beq.n	8001662 <__aeabi_dadd+0x36a>
 8001656:	2340      	movs	r3, #64	@ 0x40
 8001658:	1a1b      	subs	r3, r3, r0
 800165a:	409a      	lsls	r2, r3
 800165c:	1e53      	subs	r3, r2, #1
 800165e:	419a      	sbcs	r2, r3
 8001660:	4317      	orrs	r7, r2
 8001662:	2400      	movs	r4, #0
 8001664:	2f00      	cmp	r7, #0
 8001666:	d00a      	beq.n	800167e <__aeabi_dadd+0x386>
 8001668:	077b      	lsls	r3, r7, #29
 800166a:	d000      	beq.n	800166e <__aeabi_dadd+0x376>
 800166c:	e6c4      	b.n	80013f8 <__aeabi_dadd+0x100>
 800166e:	0026      	movs	r6, r4
 8001670:	e79e      	b.n	80015b0 <__aeabi_dadd+0x2b8>
 8001672:	464b      	mov	r3, r9
 8001674:	000c      	movs	r4, r1
 8001676:	08d8      	lsrs	r0, r3, #3
 8001678:	e79b      	b.n	80015b2 <__aeabi_dadd+0x2ba>
 800167a:	2700      	movs	r7, #0
 800167c:	4c01      	ldr	r4, [pc, #4]	@ (8001684 <__aeabi_dadd+0x38c>)
 800167e:	2600      	movs	r6, #0
 8001680:	e783      	b.n	800158a <__aeabi_dadd+0x292>
 8001682:	46c0      	nop			@ (mov r8, r8)
 8001684:	000007ff 	.word	0x000007ff
 8001688:	ff7fffff 	.word	0xff7fffff
 800168c:	000007fe 	.word	0x000007fe
 8001690:	464b      	mov	r3, r9
 8001692:	0777      	lsls	r7, r6, #29
 8001694:	08d8      	lsrs	r0, r3, #3
 8001696:	4307      	orrs	r7, r0
 8001698:	08f0      	lsrs	r0, r6, #3
 800169a:	e791      	b.n	80015c0 <__aeabi_dadd+0x2c8>
 800169c:	4fcd      	ldr	r7, [pc, #820]	@ (80019d4 <__aeabi_dadd+0x6dc>)
 800169e:	1c61      	adds	r1, r4, #1
 80016a0:	4239      	tst	r1, r7
 80016a2:	d16b      	bne.n	800177c <__aeabi_dadd+0x484>
 80016a4:	0031      	movs	r1, r6
 80016a6:	4648      	mov	r0, r9
 80016a8:	4301      	orrs	r1, r0
 80016aa:	2c00      	cmp	r4, #0
 80016ac:	d000      	beq.n	80016b0 <__aeabi_dadd+0x3b8>
 80016ae:	e14b      	b.n	8001948 <__aeabi_dadd+0x650>
 80016b0:	001f      	movs	r7, r3
 80016b2:	4317      	orrs	r7, r2
 80016b4:	2900      	cmp	r1, #0
 80016b6:	d100      	bne.n	80016ba <__aeabi_dadd+0x3c2>
 80016b8:	e181      	b.n	80019be <__aeabi_dadd+0x6c6>
 80016ba:	2f00      	cmp	r7, #0
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dadd+0x3c8>
 80016be:	e74c      	b.n	800155a <__aeabi_dadd+0x262>
 80016c0:	444a      	add	r2, r9
 80016c2:	454a      	cmp	r2, r9
 80016c4:	4180      	sbcs	r0, r0
 80016c6:	18f6      	adds	r6, r6, r3
 80016c8:	4240      	negs	r0, r0
 80016ca:	1836      	adds	r6, r6, r0
 80016cc:	0233      	lsls	r3, r6, #8
 80016ce:	d500      	bpl.n	80016d2 <__aeabi_dadd+0x3da>
 80016d0:	e1b0      	b.n	8001a34 <__aeabi_dadd+0x73c>
 80016d2:	0017      	movs	r7, r2
 80016d4:	4691      	mov	r9, r2
 80016d6:	4337      	orrs	r7, r6
 80016d8:	d000      	beq.n	80016dc <__aeabi_dadd+0x3e4>
 80016da:	e73e      	b.n	800155a <__aeabi_dadd+0x262>
 80016dc:	2600      	movs	r6, #0
 80016de:	e754      	b.n	800158a <__aeabi_dadd+0x292>
 80016e0:	4649      	mov	r1, r9
 80016e2:	1a89      	subs	r1, r1, r2
 80016e4:	4688      	mov	r8, r1
 80016e6:	45c1      	cmp	r9, r8
 80016e8:	41bf      	sbcs	r7, r7
 80016ea:	1af1      	subs	r1, r6, r3
 80016ec:	427f      	negs	r7, r7
 80016ee:	1bc9      	subs	r1, r1, r7
 80016f0:	020f      	lsls	r7, r1, #8
 80016f2:	d461      	bmi.n	80017b8 <__aeabi_dadd+0x4c0>
 80016f4:	4647      	mov	r7, r8
 80016f6:	430f      	orrs	r7, r1
 80016f8:	d100      	bne.n	80016fc <__aeabi_dadd+0x404>
 80016fa:	e0bd      	b.n	8001878 <__aeabi_dadd+0x580>
 80016fc:	000e      	movs	r6, r1
 80016fe:	4647      	mov	r7, r8
 8001700:	e651      	b.n	80013a6 <__aeabi_dadd+0xae>
 8001702:	4cb5      	ldr	r4, [pc, #724]	@ (80019d8 <__aeabi_dadd+0x6e0>)
 8001704:	45a0      	cmp	r8, r4
 8001706:	d100      	bne.n	800170a <__aeabi_dadd+0x412>
 8001708:	e100      	b.n	800190c <__aeabi_dadd+0x614>
 800170a:	2701      	movs	r7, #1
 800170c:	2938      	cmp	r1, #56	@ 0x38
 800170e:	dd00      	ble.n	8001712 <__aeabi_dadd+0x41a>
 8001710:	e6b8      	b.n	8001484 <__aeabi_dadd+0x18c>
 8001712:	2480      	movs	r4, #128	@ 0x80
 8001714:	0424      	lsls	r4, r4, #16
 8001716:	4326      	orrs	r6, r4
 8001718:	e6a3      	b.n	8001462 <__aeabi_dadd+0x16a>
 800171a:	4eb0      	ldr	r6, [pc, #704]	@ (80019dc <__aeabi_dadd+0x6e4>)
 800171c:	1ae4      	subs	r4, r4, r3
 800171e:	4016      	ands	r6, r2
 8001720:	077b      	lsls	r3, r7, #29
 8001722:	d000      	beq.n	8001726 <__aeabi_dadd+0x42e>
 8001724:	e73f      	b.n	80015a6 <__aeabi_dadd+0x2ae>
 8001726:	e743      	b.n	80015b0 <__aeabi_dadd+0x2b8>
 8001728:	000f      	movs	r7, r1
 800172a:	0018      	movs	r0, r3
 800172c:	3f20      	subs	r7, #32
 800172e:	40f8      	lsrs	r0, r7
 8001730:	4684      	mov	ip, r0
 8001732:	2920      	cmp	r1, #32
 8001734:	d003      	beq.n	800173e <__aeabi_dadd+0x446>
 8001736:	2740      	movs	r7, #64	@ 0x40
 8001738:	1a79      	subs	r1, r7, r1
 800173a:	408b      	lsls	r3, r1
 800173c:	431a      	orrs	r2, r3
 800173e:	1e53      	subs	r3, r2, #1
 8001740:	419a      	sbcs	r2, r3
 8001742:	4663      	mov	r3, ip
 8001744:	0017      	movs	r7, r2
 8001746:	431f      	orrs	r7, r3
 8001748:	e622      	b.n	8001390 <__aeabi_dadd+0x98>
 800174a:	48a4      	ldr	r0, [pc, #656]	@ (80019dc <__aeabi_dadd+0x6e4>)
 800174c:	1ae1      	subs	r1, r4, r3
 800174e:	4010      	ands	r0, r2
 8001750:	0747      	lsls	r7, r0, #29
 8001752:	08c0      	lsrs	r0, r0, #3
 8001754:	e707      	b.n	8001566 <__aeabi_dadd+0x26e>
 8001756:	0034      	movs	r4, r6
 8001758:	4648      	mov	r0, r9
 800175a:	4304      	orrs	r4, r0
 800175c:	d100      	bne.n	8001760 <__aeabi_dadd+0x468>
 800175e:	e0fa      	b.n	8001956 <__aeabi_dadd+0x65e>
 8001760:	1e4c      	subs	r4, r1, #1
 8001762:	2901      	cmp	r1, #1
 8001764:	d100      	bne.n	8001768 <__aeabi_dadd+0x470>
 8001766:	e0d7      	b.n	8001918 <__aeabi_dadd+0x620>
 8001768:	4f9b      	ldr	r7, [pc, #620]	@ (80019d8 <__aeabi_dadd+0x6e0>)
 800176a:	42b9      	cmp	r1, r7
 800176c:	d100      	bne.n	8001770 <__aeabi_dadd+0x478>
 800176e:	e0e2      	b.n	8001936 <__aeabi_dadd+0x63e>
 8001770:	2701      	movs	r7, #1
 8001772:	2c38      	cmp	r4, #56	@ 0x38
 8001774:	dd00      	ble.n	8001778 <__aeabi_dadd+0x480>
 8001776:	e74f      	b.n	8001618 <__aeabi_dadd+0x320>
 8001778:	0021      	movs	r1, r4
 800177a:	e73c      	b.n	80015f6 <__aeabi_dadd+0x2fe>
 800177c:	4c96      	ldr	r4, [pc, #600]	@ (80019d8 <__aeabi_dadd+0x6e0>)
 800177e:	42a1      	cmp	r1, r4
 8001780:	d100      	bne.n	8001784 <__aeabi_dadd+0x48c>
 8001782:	e0dd      	b.n	8001940 <__aeabi_dadd+0x648>
 8001784:	444a      	add	r2, r9
 8001786:	454a      	cmp	r2, r9
 8001788:	4180      	sbcs	r0, r0
 800178a:	18f3      	adds	r3, r6, r3
 800178c:	4240      	negs	r0, r0
 800178e:	1818      	adds	r0, r3, r0
 8001790:	07c7      	lsls	r7, r0, #31
 8001792:	0852      	lsrs	r2, r2, #1
 8001794:	4317      	orrs	r7, r2
 8001796:	0846      	lsrs	r6, r0, #1
 8001798:	0752      	lsls	r2, r2, #29
 800179a:	d005      	beq.n	80017a8 <__aeabi_dadd+0x4b0>
 800179c:	220f      	movs	r2, #15
 800179e:	000c      	movs	r4, r1
 80017a0:	403a      	ands	r2, r7
 80017a2:	2a04      	cmp	r2, #4
 80017a4:	d000      	beq.n	80017a8 <__aeabi_dadd+0x4b0>
 80017a6:	e62c      	b.n	8001402 <__aeabi_dadd+0x10a>
 80017a8:	0776      	lsls	r6, r6, #29
 80017aa:	08ff      	lsrs	r7, r7, #3
 80017ac:	4337      	orrs	r7, r6
 80017ae:	0900      	lsrs	r0, r0, #4
 80017b0:	e6d9      	b.n	8001566 <__aeabi_dadd+0x26e>
 80017b2:	2700      	movs	r7, #0
 80017b4:	2600      	movs	r6, #0
 80017b6:	e6e8      	b.n	800158a <__aeabi_dadd+0x292>
 80017b8:	4649      	mov	r1, r9
 80017ba:	1a57      	subs	r7, r2, r1
 80017bc:	42ba      	cmp	r2, r7
 80017be:	4192      	sbcs	r2, r2
 80017c0:	1b9e      	subs	r6, r3, r6
 80017c2:	4252      	negs	r2, r2
 80017c4:	4665      	mov	r5, ip
 80017c6:	1ab6      	subs	r6, r6, r2
 80017c8:	e5ed      	b.n	80013a6 <__aeabi_dadd+0xae>
 80017ca:	2900      	cmp	r1, #0
 80017cc:	d000      	beq.n	80017d0 <__aeabi_dadd+0x4d8>
 80017ce:	e0c6      	b.n	800195e <__aeabi_dadd+0x666>
 80017d0:	2f00      	cmp	r7, #0
 80017d2:	d167      	bne.n	80018a4 <__aeabi_dadd+0x5ac>
 80017d4:	2680      	movs	r6, #128	@ 0x80
 80017d6:	2500      	movs	r5, #0
 80017d8:	4c7f      	ldr	r4, [pc, #508]	@ (80019d8 <__aeabi_dadd+0x6e0>)
 80017da:	0336      	lsls	r6, r6, #12
 80017dc:	e6d5      	b.n	800158a <__aeabi_dadd+0x292>
 80017de:	4665      	mov	r5, ip
 80017e0:	000c      	movs	r4, r1
 80017e2:	001e      	movs	r6, r3
 80017e4:	08d0      	lsrs	r0, r2, #3
 80017e6:	e6e4      	b.n	80015b2 <__aeabi_dadd+0x2ba>
 80017e8:	444a      	add	r2, r9
 80017ea:	454a      	cmp	r2, r9
 80017ec:	4180      	sbcs	r0, r0
 80017ee:	18f3      	adds	r3, r6, r3
 80017f0:	4240      	negs	r0, r0
 80017f2:	1818      	adds	r0, r3, r0
 80017f4:	0011      	movs	r1, r2
 80017f6:	0203      	lsls	r3, r0, #8
 80017f8:	d400      	bmi.n	80017fc <__aeabi_dadd+0x504>
 80017fa:	e096      	b.n	800192a <__aeabi_dadd+0x632>
 80017fc:	4b77      	ldr	r3, [pc, #476]	@ (80019dc <__aeabi_dadd+0x6e4>)
 80017fe:	0849      	lsrs	r1, r1, #1
 8001800:	4018      	ands	r0, r3
 8001802:	07c3      	lsls	r3, r0, #31
 8001804:	430b      	orrs	r3, r1
 8001806:	0844      	lsrs	r4, r0, #1
 8001808:	0749      	lsls	r1, r1, #29
 800180a:	d100      	bne.n	800180e <__aeabi_dadd+0x516>
 800180c:	e129      	b.n	8001a62 <__aeabi_dadd+0x76a>
 800180e:	220f      	movs	r2, #15
 8001810:	401a      	ands	r2, r3
 8001812:	2a04      	cmp	r2, #4
 8001814:	d100      	bne.n	8001818 <__aeabi_dadd+0x520>
 8001816:	e0ea      	b.n	80019ee <__aeabi_dadd+0x6f6>
 8001818:	1d1f      	adds	r7, r3, #4
 800181a:	429f      	cmp	r7, r3
 800181c:	41b6      	sbcs	r6, r6
 800181e:	4276      	negs	r6, r6
 8001820:	1936      	adds	r6, r6, r4
 8001822:	2402      	movs	r4, #2
 8001824:	e6c4      	b.n	80015b0 <__aeabi_dadd+0x2b8>
 8001826:	4649      	mov	r1, r9
 8001828:	1a8f      	subs	r7, r1, r2
 800182a:	45b9      	cmp	r9, r7
 800182c:	4180      	sbcs	r0, r0
 800182e:	1af6      	subs	r6, r6, r3
 8001830:	4240      	negs	r0, r0
 8001832:	1a36      	subs	r6, r6, r0
 8001834:	0233      	lsls	r3, r6, #8
 8001836:	d406      	bmi.n	8001846 <__aeabi_dadd+0x54e>
 8001838:	0773      	lsls	r3, r6, #29
 800183a:	08ff      	lsrs	r7, r7, #3
 800183c:	2101      	movs	r1, #1
 800183e:	431f      	orrs	r7, r3
 8001840:	08f0      	lsrs	r0, r6, #3
 8001842:	e690      	b.n	8001566 <__aeabi_dadd+0x26e>
 8001844:	4665      	mov	r5, ip
 8001846:	2401      	movs	r4, #1
 8001848:	e5ab      	b.n	80013a2 <__aeabi_dadd+0xaa>
 800184a:	464b      	mov	r3, r9
 800184c:	0777      	lsls	r7, r6, #29
 800184e:	08d8      	lsrs	r0, r3, #3
 8001850:	4307      	orrs	r7, r0
 8001852:	08f0      	lsrs	r0, r6, #3
 8001854:	e6b4      	b.n	80015c0 <__aeabi_dadd+0x2c8>
 8001856:	000f      	movs	r7, r1
 8001858:	0018      	movs	r0, r3
 800185a:	3f20      	subs	r7, #32
 800185c:	40f8      	lsrs	r0, r7
 800185e:	4684      	mov	ip, r0
 8001860:	2920      	cmp	r1, #32
 8001862:	d003      	beq.n	800186c <__aeabi_dadd+0x574>
 8001864:	2740      	movs	r7, #64	@ 0x40
 8001866:	1a79      	subs	r1, r7, r1
 8001868:	408b      	lsls	r3, r1
 800186a:	431a      	orrs	r2, r3
 800186c:	1e53      	subs	r3, r2, #1
 800186e:	419a      	sbcs	r2, r3
 8001870:	4663      	mov	r3, ip
 8001872:	0017      	movs	r7, r2
 8001874:	431f      	orrs	r7, r3
 8001876:	e635      	b.n	80014e4 <__aeabi_dadd+0x1ec>
 8001878:	2500      	movs	r5, #0
 800187a:	2400      	movs	r4, #0
 800187c:	2600      	movs	r6, #0
 800187e:	e684      	b.n	800158a <__aeabi_dadd+0x292>
 8001880:	000c      	movs	r4, r1
 8001882:	0035      	movs	r5, r6
 8001884:	3c20      	subs	r4, #32
 8001886:	40e5      	lsrs	r5, r4
 8001888:	2920      	cmp	r1, #32
 800188a:	d005      	beq.n	8001898 <__aeabi_dadd+0x5a0>
 800188c:	2440      	movs	r4, #64	@ 0x40
 800188e:	1a61      	subs	r1, r4, r1
 8001890:	408e      	lsls	r6, r1
 8001892:	4649      	mov	r1, r9
 8001894:	4331      	orrs	r1, r6
 8001896:	4689      	mov	r9, r1
 8001898:	4648      	mov	r0, r9
 800189a:	1e41      	subs	r1, r0, #1
 800189c:	4188      	sbcs	r0, r1
 800189e:	0007      	movs	r7, r0
 80018a0:	432f      	orrs	r7, r5
 80018a2:	e5ef      	b.n	8001484 <__aeabi_dadd+0x18c>
 80018a4:	08d2      	lsrs	r2, r2, #3
 80018a6:	075f      	lsls	r7, r3, #29
 80018a8:	4665      	mov	r5, ip
 80018aa:	4317      	orrs	r7, r2
 80018ac:	08d8      	lsrs	r0, r3, #3
 80018ae:	e687      	b.n	80015c0 <__aeabi_dadd+0x2c8>
 80018b0:	1a17      	subs	r7, r2, r0
 80018b2:	42ba      	cmp	r2, r7
 80018b4:	4192      	sbcs	r2, r2
 80018b6:	1b9e      	subs	r6, r3, r6
 80018b8:	4252      	negs	r2, r2
 80018ba:	1ab6      	subs	r6, r6, r2
 80018bc:	0233      	lsls	r3, r6, #8
 80018be:	d4c1      	bmi.n	8001844 <__aeabi_dadd+0x54c>
 80018c0:	0773      	lsls	r3, r6, #29
 80018c2:	08ff      	lsrs	r7, r7, #3
 80018c4:	4665      	mov	r5, ip
 80018c6:	2101      	movs	r1, #1
 80018c8:	431f      	orrs	r7, r3
 80018ca:	08f0      	lsrs	r0, r6, #3
 80018cc:	e64b      	b.n	8001566 <__aeabi_dadd+0x26e>
 80018ce:	2f00      	cmp	r7, #0
 80018d0:	d07b      	beq.n	80019ca <__aeabi_dadd+0x6d2>
 80018d2:	4665      	mov	r5, ip
 80018d4:	001e      	movs	r6, r3
 80018d6:	4691      	mov	r9, r2
 80018d8:	e63f      	b.n	800155a <__aeabi_dadd+0x262>
 80018da:	1a81      	subs	r1, r0, r2
 80018dc:	4688      	mov	r8, r1
 80018de:	45c1      	cmp	r9, r8
 80018e0:	41a4      	sbcs	r4, r4
 80018e2:	1af1      	subs	r1, r6, r3
 80018e4:	4264      	negs	r4, r4
 80018e6:	1b09      	subs	r1, r1, r4
 80018e8:	2480      	movs	r4, #128	@ 0x80
 80018ea:	0424      	lsls	r4, r4, #16
 80018ec:	4221      	tst	r1, r4
 80018ee:	d077      	beq.n	80019e0 <__aeabi_dadd+0x6e8>
 80018f0:	1a10      	subs	r0, r2, r0
 80018f2:	4282      	cmp	r2, r0
 80018f4:	4192      	sbcs	r2, r2
 80018f6:	0007      	movs	r7, r0
 80018f8:	1b9e      	subs	r6, r3, r6
 80018fa:	4252      	negs	r2, r2
 80018fc:	1ab6      	subs	r6, r6, r2
 80018fe:	4337      	orrs	r7, r6
 8001900:	d000      	beq.n	8001904 <__aeabi_dadd+0x60c>
 8001902:	e0a0      	b.n	8001a46 <__aeabi_dadd+0x74e>
 8001904:	4665      	mov	r5, ip
 8001906:	2400      	movs	r4, #0
 8001908:	2600      	movs	r6, #0
 800190a:	e63e      	b.n	800158a <__aeabi_dadd+0x292>
 800190c:	075f      	lsls	r7, r3, #29
 800190e:	08d2      	lsrs	r2, r2, #3
 8001910:	4665      	mov	r5, ip
 8001912:	4317      	orrs	r7, r2
 8001914:	08d8      	lsrs	r0, r3, #3
 8001916:	e653      	b.n	80015c0 <__aeabi_dadd+0x2c8>
 8001918:	1881      	adds	r1, r0, r2
 800191a:	4291      	cmp	r1, r2
 800191c:	4192      	sbcs	r2, r2
 800191e:	18f0      	adds	r0, r6, r3
 8001920:	4252      	negs	r2, r2
 8001922:	1880      	adds	r0, r0, r2
 8001924:	0203      	lsls	r3, r0, #8
 8001926:	d500      	bpl.n	800192a <__aeabi_dadd+0x632>
 8001928:	e768      	b.n	80017fc <__aeabi_dadd+0x504>
 800192a:	0747      	lsls	r7, r0, #29
 800192c:	08c9      	lsrs	r1, r1, #3
 800192e:	430f      	orrs	r7, r1
 8001930:	08c0      	lsrs	r0, r0, #3
 8001932:	2101      	movs	r1, #1
 8001934:	e617      	b.n	8001566 <__aeabi_dadd+0x26e>
 8001936:	08d2      	lsrs	r2, r2, #3
 8001938:	075f      	lsls	r7, r3, #29
 800193a:	4317      	orrs	r7, r2
 800193c:	08d8      	lsrs	r0, r3, #3
 800193e:	e63f      	b.n	80015c0 <__aeabi_dadd+0x2c8>
 8001940:	000c      	movs	r4, r1
 8001942:	2600      	movs	r6, #0
 8001944:	2700      	movs	r7, #0
 8001946:	e620      	b.n	800158a <__aeabi_dadd+0x292>
 8001948:	2900      	cmp	r1, #0
 800194a:	d156      	bne.n	80019fa <__aeabi_dadd+0x702>
 800194c:	075f      	lsls	r7, r3, #29
 800194e:	08d2      	lsrs	r2, r2, #3
 8001950:	4317      	orrs	r7, r2
 8001952:	08d8      	lsrs	r0, r3, #3
 8001954:	e634      	b.n	80015c0 <__aeabi_dadd+0x2c8>
 8001956:	000c      	movs	r4, r1
 8001958:	001e      	movs	r6, r3
 800195a:	08d0      	lsrs	r0, r2, #3
 800195c:	e629      	b.n	80015b2 <__aeabi_dadd+0x2ba>
 800195e:	08c1      	lsrs	r1, r0, #3
 8001960:	0770      	lsls	r0, r6, #29
 8001962:	4301      	orrs	r1, r0
 8001964:	08f0      	lsrs	r0, r6, #3
 8001966:	2f00      	cmp	r7, #0
 8001968:	d062      	beq.n	8001a30 <__aeabi_dadd+0x738>
 800196a:	2480      	movs	r4, #128	@ 0x80
 800196c:	0324      	lsls	r4, r4, #12
 800196e:	4220      	tst	r0, r4
 8001970:	d007      	beq.n	8001982 <__aeabi_dadd+0x68a>
 8001972:	08de      	lsrs	r6, r3, #3
 8001974:	4226      	tst	r6, r4
 8001976:	d104      	bne.n	8001982 <__aeabi_dadd+0x68a>
 8001978:	4665      	mov	r5, ip
 800197a:	0030      	movs	r0, r6
 800197c:	08d1      	lsrs	r1, r2, #3
 800197e:	075b      	lsls	r3, r3, #29
 8001980:	4319      	orrs	r1, r3
 8001982:	0f4f      	lsrs	r7, r1, #29
 8001984:	00c9      	lsls	r1, r1, #3
 8001986:	08c9      	lsrs	r1, r1, #3
 8001988:	077f      	lsls	r7, r7, #29
 800198a:	430f      	orrs	r7, r1
 800198c:	e618      	b.n	80015c0 <__aeabi_dadd+0x2c8>
 800198e:	000c      	movs	r4, r1
 8001990:	0030      	movs	r0, r6
 8001992:	3c20      	subs	r4, #32
 8001994:	40e0      	lsrs	r0, r4
 8001996:	4684      	mov	ip, r0
 8001998:	2920      	cmp	r1, #32
 800199a:	d005      	beq.n	80019a8 <__aeabi_dadd+0x6b0>
 800199c:	2440      	movs	r4, #64	@ 0x40
 800199e:	1a61      	subs	r1, r4, r1
 80019a0:	408e      	lsls	r6, r1
 80019a2:	4649      	mov	r1, r9
 80019a4:	4331      	orrs	r1, r6
 80019a6:	4689      	mov	r9, r1
 80019a8:	4648      	mov	r0, r9
 80019aa:	1e41      	subs	r1, r0, #1
 80019ac:	4188      	sbcs	r0, r1
 80019ae:	4661      	mov	r1, ip
 80019b0:	0007      	movs	r7, r0
 80019b2:	430f      	orrs	r7, r1
 80019b4:	e630      	b.n	8001618 <__aeabi_dadd+0x320>
 80019b6:	2120      	movs	r1, #32
 80019b8:	2700      	movs	r7, #0
 80019ba:	1a09      	subs	r1, r1, r0
 80019bc:	e50e      	b.n	80013dc <__aeabi_dadd+0xe4>
 80019be:	001e      	movs	r6, r3
 80019c0:	2f00      	cmp	r7, #0
 80019c2:	d000      	beq.n	80019c6 <__aeabi_dadd+0x6ce>
 80019c4:	e522      	b.n	800140c <__aeabi_dadd+0x114>
 80019c6:	2400      	movs	r4, #0
 80019c8:	e758      	b.n	800187c <__aeabi_dadd+0x584>
 80019ca:	2500      	movs	r5, #0
 80019cc:	2400      	movs	r4, #0
 80019ce:	2600      	movs	r6, #0
 80019d0:	e5db      	b.n	800158a <__aeabi_dadd+0x292>
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	000007fe 	.word	0x000007fe
 80019d8:	000007ff 	.word	0x000007ff
 80019dc:	ff7fffff 	.word	0xff7fffff
 80019e0:	4647      	mov	r7, r8
 80019e2:	430f      	orrs	r7, r1
 80019e4:	d100      	bne.n	80019e8 <__aeabi_dadd+0x6f0>
 80019e6:	e747      	b.n	8001878 <__aeabi_dadd+0x580>
 80019e8:	000e      	movs	r6, r1
 80019ea:	46c1      	mov	r9, r8
 80019ec:	e5b5      	b.n	800155a <__aeabi_dadd+0x262>
 80019ee:	08df      	lsrs	r7, r3, #3
 80019f0:	0764      	lsls	r4, r4, #29
 80019f2:	2102      	movs	r1, #2
 80019f4:	4327      	orrs	r7, r4
 80019f6:	0900      	lsrs	r0, r0, #4
 80019f8:	e5b5      	b.n	8001566 <__aeabi_dadd+0x26e>
 80019fa:	0019      	movs	r1, r3
 80019fc:	08c0      	lsrs	r0, r0, #3
 80019fe:	0777      	lsls	r7, r6, #29
 8001a00:	4307      	orrs	r7, r0
 8001a02:	4311      	orrs	r1, r2
 8001a04:	08f0      	lsrs	r0, r6, #3
 8001a06:	2900      	cmp	r1, #0
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dadd+0x714>
 8001a0a:	e5d9      	b.n	80015c0 <__aeabi_dadd+0x2c8>
 8001a0c:	2180      	movs	r1, #128	@ 0x80
 8001a0e:	0309      	lsls	r1, r1, #12
 8001a10:	4208      	tst	r0, r1
 8001a12:	d007      	beq.n	8001a24 <__aeabi_dadd+0x72c>
 8001a14:	08dc      	lsrs	r4, r3, #3
 8001a16:	420c      	tst	r4, r1
 8001a18:	d104      	bne.n	8001a24 <__aeabi_dadd+0x72c>
 8001a1a:	08d2      	lsrs	r2, r2, #3
 8001a1c:	075b      	lsls	r3, r3, #29
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	0017      	movs	r7, r2
 8001a22:	0020      	movs	r0, r4
 8001a24:	0f7b      	lsrs	r3, r7, #29
 8001a26:	00ff      	lsls	r7, r7, #3
 8001a28:	08ff      	lsrs	r7, r7, #3
 8001a2a:	075b      	lsls	r3, r3, #29
 8001a2c:	431f      	orrs	r7, r3
 8001a2e:	e5c7      	b.n	80015c0 <__aeabi_dadd+0x2c8>
 8001a30:	000f      	movs	r7, r1
 8001a32:	e5c5      	b.n	80015c0 <__aeabi_dadd+0x2c8>
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <__aeabi_dadd+0x788>)
 8001a36:	08d2      	lsrs	r2, r2, #3
 8001a38:	4033      	ands	r3, r6
 8001a3a:	075f      	lsls	r7, r3, #29
 8001a3c:	025b      	lsls	r3, r3, #9
 8001a3e:	2401      	movs	r4, #1
 8001a40:	4317      	orrs	r7, r2
 8001a42:	0b1e      	lsrs	r6, r3, #12
 8001a44:	e5a1      	b.n	800158a <__aeabi_dadd+0x292>
 8001a46:	4226      	tst	r6, r4
 8001a48:	d012      	beq.n	8001a70 <__aeabi_dadd+0x778>
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <__aeabi_dadd+0x788>)
 8001a4c:	4665      	mov	r5, ip
 8001a4e:	0002      	movs	r2, r0
 8001a50:	2401      	movs	r4, #1
 8001a52:	401e      	ands	r6, r3
 8001a54:	e4e6      	b.n	8001424 <__aeabi_dadd+0x12c>
 8001a56:	0021      	movs	r1, r4
 8001a58:	e585      	b.n	8001566 <__aeabi_dadd+0x26e>
 8001a5a:	0017      	movs	r7, r2
 8001a5c:	e5a8      	b.n	80015b0 <__aeabi_dadd+0x2b8>
 8001a5e:	003a      	movs	r2, r7
 8001a60:	e4d4      	b.n	800140c <__aeabi_dadd+0x114>
 8001a62:	08db      	lsrs	r3, r3, #3
 8001a64:	0764      	lsls	r4, r4, #29
 8001a66:	431c      	orrs	r4, r3
 8001a68:	0027      	movs	r7, r4
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	0900      	lsrs	r0, r0, #4
 8001a6e:	e57a      	b.n	8001566 <__aeabi_dadd+0x26e>
 8001a70:	08c0      	lsrs	r0, r0, #3
 8001a72:	0777      	lsls	r7, r6, #29
 8001a74:	4307      	orrs	r7, r0
 8001a76:	4665      	mov	r5, ip
 8001a78:	2100      	movs	r1, #0
 8001a7a:	08f0      	lsrs	r0, r6, #3
 8001a7c:	e573      	b.n	8001566 <__aeabi_dadd+0x26e>
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	ff7fffff 	.word	0xff7fffff

08001a84 <__aeabi_ddiv>:
 8001a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a86:	46de      	mov	lr, fp
 8001a88:	4645      	mov	r5, r8
 8001a8a:	4657      	mov	r7, sl
 8001a8c:	464e      	mov	r6, r9
 8001a8e:	b5e0      	push	{r5, r6, r7, lr}
 8001a90:	b087      	sub	sp, #28
 8001a92:	9200      	str	r2, [sp, #0]
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	030b      	lsls	r3, r1, #12
 8001a98:	0b1b      	lsrs	r3, r3, #12
 8001a9a:	469b      	mov	fp, r3
 8001a9c:	0fca      	lsrs	r2, r1, #31
 8001a9e:	004b      	lsls	r3, r1, #1
 8001aa0:	0004      	movs	r4, r0
 8001aa2:	4680      	mov	r8, r0
 8001aa4:	0d5b      	lsrs	r3, r3, #21
 8001aa6:	9202      	str	r2, [sp, #8]
 8001aa8:	d100      	bne.n	8001aac <__aeabi_ddiv+0x28>
 8001aaa:	e098      	b.n	8001bde <__aeabi_ddiv+0x15a>
 8001aac:	4a7c      	ldr	r2, [pc, #496]	@ (8001ca0 <__aeabi_ddiv+0x21c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d037      	beq.n	8001b22 <__aeabi_ddiv+0x9e>
 8001ab2:	4659      	mov	r1, fp
 8001ab4:	0f42      	lsrs	r2, r0, #29
 8001ab6:	00c9      	lsls	r1, r1, #3
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	2180      	movs	r1, #128	@ 0x80
 8001abc:	0409      	lsls	r1, r1, #16
 8001abe:	4311      	orrs	r1, r2
 8001ac0:	00c2      	lsls	r2, r0, #3
 8001ac2:	4690      	mov	r8, r2
 8001ac4:	4a77      	ldr	r2, [pc, #476]	@ (8001ca4 <__aeabi_ddiv+0x220>)
 8001ac6:	4689      	mov	r9, r1
 8001ac8:	4692      	mov	sl, r2
 8001aca:	449a      	add	sl, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	2400      	movs	r4, #0
 8001ad0:	9303      	str	r3, [sp, #12]
 8001ad2:	9e00      	ldr	r6, [sp, #0]
 8001ad4:	9f01      	ldr	r7, [sp, #4]
 8001ad6:	033b      	lsls	r3, r7, #12
 8001ad8:	0b1b      	lsrs	r3, r3, #12
 8001ada:	469b      	mov	fp, r3
 8001adc:	007b      	lsls	r3, r7, #1
 8001ade:	0030      	movs	r0, r6
 8001ae0:	0d5b      	lsrs	r3, r3, #21
 8001ae2:	0ffd      	lsrs	r5, r7, #31
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d059      	beq.n	8001b9c <__aeabi_ddiv+0x118>
 8001ae8:	4a6d      	ldr	r2, [pc, #436]	@ (8001ca0 <__aeabi_ddiv+0x21c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d048      	beq.n	8001b80 <__aeabi_ddiv+0xfc>
 8001aee:	4659      	mov	r1, fp
 8001af0:	0f72      	lsrs	r2, r6, #29
 8001af2:	00c9      	lsls	r1, r1, #3
 8001af4:	430a      	orrs	r2, r1
 8001af6:	2180      	movs	r1, #128	@ 0x80
 8001af8:	0409      	lsls	r1, r1, #16
 8001afa:	4311      	orrs	r1, r2
 8001afc:	468b      	mov	fp, r1
 8001afe:	4969      	ldr	r1, [pc, #420]	@ (8001ca4 <__aeabi_ddiv+0x220>)
 8001b00:	00f2      	lsls	r2, r6, #3
 8001b02:	468c      	mov	ip, r1
 8001b04:	4651      	mov	r1, sl
 8001b06:	4463      	add	r3, ip
 8001b08:	1acb      	subs	r3, r1, r3
 8001b0a:	469a      	mov	sl, r3
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	9e02      	ldr	r6, [sp, #8]
 8001b10:	406e      	eors	r6, r5
 8001b12:	b2f6      	uxtb	r6, r6
 8001b14:	2c0f      	cmp	r4, #15
 8001b16:	d900      	bls.n	8001b1a <__aeabi_ddiv+0x96>
 8001b18:	e0ce      	b.n	8001cb8 <__aeabi_ddiv+0x234>
 8001b1a:	4b63      	ldr	r3, [pc, #396]	@ (8001ca8 <__aeabi_ddiv+0x224>)
 8001b1c:	00a4      	lsls	r4, r4, #2
 8001b1e:	591b      	ldr	r3, [r3, r4]
 8001b20:	469f      	mov	pc, r3
 8001b22:	465a      	mov	r2, fp
 8001b24:	4302      	orrs	r2, r0
 8001b26:	4691      	mov	r9, r2
 8001b28:	d000      	beq.n	8001b2c <__aeabi_ddiv+0xa8>
 8001b2a:	e090      	b.n	8001c4e <__aeabi_ddiv+0x1ca>
 8001b2c:	469a      	mov	sl, r3
 8001b2e:	2302      	movs	r3, #2
 8001b30:	4690      	mov	r8, r2
 8001b32:	2408      	movs	r4, #8
 8001b34:	9303      	str	r3, [sp, #12]
 8001b36:	e7cc      	b.n	8001ad2 <__aeabi_ddiv+0x4e>
 8001b38:	46cb      	mov	fp, r9
 8001b3a:	4642      	mov	r2, r8
 8001b3c:	9d02      	ldr	r5, [sp, #8]
 8001b3e:	9903      	ldr	r1, [sp, #12]
 8001b40:	2902      	cmp	r1, #2
 8001b42:	d100      	bne.n	8001b46 <__aeabi_ddiv+0xc2>
 8001b44:	e1de      	b.n	8001f04 <__aeabi_ddiv+0x480>
 8001b46:	2903      	cmp	r1, #3
 8001b48:	d100      	bne.n	8001b4c <__aeabi_ddiv+0xc8>
 8001b4a:	e08d      	b.n	8001c68 <__aeabi_ddiv+0x1e4>
 8001b4c:	2901      	cmp	r1, #1
 8001b4e:	d000      	beq.n	8001b52 <__aeabi_ddiv+0xce>
 8001b50:	e179      	b.n	8001e46 <__aeabi_ddiv+0x3c2>
 8001b52:	002e      	movs	r6, r5
 8001b54:	2200      	movs	r2, #0
 8001b56:	2300      	movs	r3, #0
 8001b58:	2400      	movs	r4, #0
 8001b5a:	4690      	mov	r8, r2
 8001b5c:	051b      	lsls	r3, r3, #20
 8001b5e:	4323      	orrs	r3, r4
 8001b60:	07f6      	lsls	r6, r6, #31
 8001b62:	4333      	orrs	r3, r6
 8001b64:	4640      	mov	r0, r8
 8001b66:	0019      	movs	r1, r3
 8001b68:	b007      	add	sp, #28
 8001b6a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b6c:	46bb      	mov	fp, r7
 8001b6e:	46b2      	mov	sl, r6
 8001b70:	46a9      	mov	r9, r5
 8001b72:	46a0      	mov	r8, r4
 8001b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b76:	2200      	movs	r2, #0
 8001b78:	2400      	movs	r4, #0
 8001b7a:	4690      	mov	r8, r2
 8001b7c:	4b48      	ldr	r3, [pc, #288]	@ (8001ca0 <__aeabi_ddiv+0x21c>)
 8001b7e:	e7ed      	b.n	8001b5c <__aeabi_ddiv+0xd8>
 8001b80:	465a      	mov	r2, fp
 8001b82:	9b00      	ldr	r3, [sp, #0]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	4b49      	ldr	r3, [pc, #292]	@ (8001cac <__aeabi_ddiv+0x228>)
 8001b88:	469c      	mov	ip, r3
 8001b8a:	44e2      	add	sl, ip
 8001b8c:	2a00      	cmp	r2, #0
 8001b8e:	d159      	bne.n	8001c44 <__aeabi_ddiv+0x1c0>
 8001b90:	2302      	movs	r3, #2
 8001b92:	431c      	orrs	r4, r3
 8001b94:	2300      	movs	r3, #0
 8001b96:	2102      	movs	r1, #2
 8001b98:	469b      	mov	fp, r3
 8001b9a:	e7b8      	b.n	8001b0e <__aeabi_ddiv+0x8a>
 8001b9c:	465a      	mov	r2, fp
 8001b9e:	9b00      	ldr	r3, [sp, #0]
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	d049      	beq.n	8001c38 <__aeabi_ddiv+0x1b4>
 8001ba4:	465b      	mov	r3, fp
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d100      	bne.n	8001bac <__aeabi_ddiv+0x128>
 8001baa:	e19c      	b.n	8001ee6 <__aeabi_ddiv+0x462>
 8001bac:	4658      	mov	r0, fp
 8001bae:	f000 fe83 	bl	80028b8 <__clzsi2>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	3a0b      	subs	r2, #11
 8001bb8:	271d      	movs	r7, #29
 8001bba:	9e00      	ldr	r6, [sp, #0]
 8001bbc:	1aba      	subs	r2, r7, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	4658      	mov	r0, fp
 8001bc2:	40d6      	lsrs	r6, r2
 8001bc4:	3908      	subs	r1, #8
 8001bc6:	4088      	lsls	r0, r1
 8001bc8:	0032      	movs	r2, r6
 8001bca:	4302      	orrs	r2, r0
 8001bcc:	4693      	mov	fp, r2
 8001bce:	9a00      	ldr	r2, [sp, #0]
 8001bd0:	408a      	lsls	r2, r1
 8001bd2:	4937      	ldr	r1, [pc, #220]	@ (8001cb0 <__aeabi_ddiv+0x22c>)
 8001bd4:	4453      	add	r3, sl
 8001bd6:	468a      	mov	sl, r1
 8001bd8:	2100      	movs	r1, #0
 8001bda:	449a      	add	sl, r3
 8001bdc:	e797      	b.n	8001b0e <__aeabi_ddiv+0x8a>
 8001bde:	465b      	mov	r3, fp
 8001be0:	4303      	orrs	r3, r0
 8001be2:	4699      	mov	r9, r3
 8001be4:	d021      	beq.n	8001c2a <__aeabi_ddiv+0x1a6>
 8001be6:	465b      	mov	r3, fp
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d100      	bne.n	8001bee <__aeabi_ddiv+0x16a>
 8001bec:	e169      	b.n	8001ec2 <__aeabi_ddiv+0x43e>
 8001bee:	4658      	mov	r0, fp
 8001bf0:	f000 fe62 	bl	80028b8 <__clzsi2>
 8001bf4:	230b      	movs	r3, #11
 8001bf6:	425b      	negs	r3, r3
 8001bf8:	469c      	mov	ip, r3
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	4484      	add	ip, r0
 8001bfe:	4666      	mov	r6, ip
 8001c00:	231d      	movs	r3, #29
 8001c02:	1b9b      	subs	r3, r3, r6
 8001c04:	0026      	movs	r6, r4
 8001c06:	0011      	movs	r1, r2
 8001c08:	4658      	mov	r0, fp
 8001c0a:	40de      	lsrs	r6, r3
 8001c0c:	3908      	subs	r1, #8
 8001c0e:	4088      	lsls	r0, r1
 8001c10:	0033      	movs	r3, r6
 8001c12:	4303      	orrs	r3, r0
 8001c14:	4699      	mov	r9, r3
 8001c16:	0023      	movs	r3, r4
 8001c18:	408b      	lsls	r3, r1
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <__aeabi_ddiv+0x230>)
 8001c1e:	2400      	movs	r4, #0
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	469a      	mov	sl, r3
 8001c24:	2300      	movs	r3, #0
 8001c26:	9303      	str	r3, [sp, #12]
 8001c28:	e753      	b.n	8001ad2 <__aeabi_ddiv+0x4e>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	469a      	mov	sl, r3
 8001c30:	3301      	adds	r3, #1
 8001c32:	2404      	movs	r4, #4
 8001c34:	9303      	str	r3, [sp, #12]
 8001c36:	e74c      	b.n	8001ad2 <__aeabi_ddiv+0x4e>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	431c      	orrs	r4, r3
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	2101      	movs	r1, #1
 8001c40:	469b      	mov	fp, r3
 8001c42:	e764      	b.n	8001b0e <__aeabi_ddiv+0x8a>
 8001c44:	2303      	movs	r3, #3
 8001c46:	0032      	movs	r2, r6
 8001c48:	2103      	movs	r1, #3
 8001c4a:	431c      	orrs	r4, r3
 8001c4c:	e75f      	b.n	8001b0e <__aeabi_ddiv+0x8a>
 8001c4e:	469a      	mov	sl, r3
 8001c50:	2303      	movs	r3, #3
 8001c52:	46d9      	mov	r9, fp
 8001c54:	240c      	movs	r4, #12
 8001c56:	9303      	str	r3, [sp, #12]
 8001c58:	e73b      	b.n	8001ad2 <__aeabi_ddiv+0x4e>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	2480      	movs	r4, #128	@ 0x80
 8001c5e:	4698      	mov	r8, r3
 8001c60:	2600      	movs	r6, #0
 8001c62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca0 <__aeabi_ddiv+0x21c>)
 8001c64:	0324      	lsls	r4, r4, #12
 8001c66:	e779      	b.n	8001b5c <__aeabi_ddiv+0xd8>
 8001c68:	2480      	movs	r4, #128	@ 0x80
 8001c6a:	465b      	mov	r3, fp
 8001c6c:	0324      	lsls	r4, r4, #12
 8001c6e:	431c      	orrs	r4, r3
 8001c70:	0324      	lsls	r4, r4, #12
 8001c72:	002e      	movs	r6, r5
 8001c74:	4690      	mov	r8, r2
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <__aeabi_ddiv+0x21c>)
 8001c78:	0b24      	lsrs	r4, r4, #12
 8001c7a:	e76f      	b.n	8001b5c <__aeabi_ddiv+0xd8>
 8001c7c:	2480      	movs	r4, #128	@ 0x80
 8001c7e:	464b      	mov	r3, r9
 8001c80:	0324      	lsls	r4, r4, #12
 8001c82:	4223      	tst	r3, r4
 8001c84:	d002      	beq.n	8001c8c <__aeabi_ddiv+0x208>
 8001c86:	465b      	mov	r3, fp
 8001c88:	4223      	tst	r3, r4
 8001c8a:	d0f0      	beq.n	8001c6e <__aeabi_ddiv+0x1ea>
 8001c8c:	2480      	movs	r4, #128	@ 0x80
 8001c8e:	464b      	mov	r3, r9
 8001c90:	0324      	lsls	r4, r4, #12
 8001c92:	431c      	orrs	r4, r3
 8001c94:	0324      	lsls	r4, r4, #12
 8001c96:	9e02      	ldr	r6, [sp, #8]
 8001c98:	4b01      	ldr	r3, [pc, #4]	@ (8001ca0 <__aeabi_ddiv+0x21c>)
 8001c9a:	0b24      	lsrs	r4, r4, #12
 8001c9c:	e75e      	b.n	8001b5c <__aeabi_ddiv+0xd8>
 8001c9e:	46c0      	nop			@ (mov r8, r8)
 8001ca0:	000007ff 	.word	0x000007ff
 8001ca4:	fffffc01 	.word	0xfffffc01
 8001ca8:	080074cc 	.word	0x080074cc
 8001cac:	fffff801 	.word	0xfffff801
 8001cb0:	000003f3 	.word	0x000003f3
 8001cb4:	fffffc0d 	.word	0xfffffc0d
 8001cb8:	45cb      	cmp	fp, r9
 8001cba:	d200      	bcs.n	8001cbe <__aeabi_ddiv+0x23a>
 8001cbc:	e0f8      	b.n	8001eb0 <__aeabi_ddiv+0x42c>
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_ddiv+0x23e>
 8001cc0:	e0f3      	b.n	8001eaa <__aeabi_ddiv+0x426>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	425b      	negs	r3, r3
 8001cc6:	469c      	mov	ip, r3
 8001cc8:	4644      	mov	r4, r8
 8001cca:	4648      	mov	r0, r9
 8001ccc:	2500      	movs	r5, #0
 8001cce:	44e2      	add	sl, ip
 8001cd0:	465b      	mov	r3, fp
 8001cd2:	0e17      	lsrs	r7, r2, #24
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	431f      	orrs	r7, r3
 8001cd8:	0c19      	lsrs	r1, r3, #16
 8001cda:	043b      	lsls	r3, r7, #16
 8001cdc:	0212      	lsls	r2, r2, #8
 8001cde:	9700      	str	r7, [sp, #0]
 8001ce0:	0c1f      	lsrs	r7, r3, #16
 8001ce2:	4691      	mov	r9, r2
 8001ce4:	9102      	str	r1, [sp, #8]
 8001ce6:	9703      	str	r7, [sp, #12]
 8001ce8:	f7fe fa92 	bl	8000210 <__aeabi_uidivmod>
 8001cec:	0002      	movs	r2, r0
 8001cee:	437a      	muls	r2, r7
 8001cf0:	040b      	lsls	r3, r1, #16
 8001cf2:	0c21      	lsrs	r1, r4, #16
 8001cf4:	4680      	mov	r8, r0
 8001cf6:	4319      	orrs	r1, r3
 8001cf8:	428a      	cmp	r2, r1
 8001cfa:	d909      	bls.n	8001d10 <__aeabi_ddiv+0x28c>
 8001cfc:	9f00      	ldr	r7, [sp, #0]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	46bc      	mov	ip, r7
 8001d02:	425b      	negs	r3, r3
 8001d04:	4461      	add	r1, ip
 8001d06:	469c      	mov	ip, r3
 8001d08:	44e0      	add	r8, ip
 8001d0a:	428f      	cmp	r7, r1
 8001d0c:	d800      	bhi.n	8001d10 <__aeabi_ddiv+0x28c>
 8001d0e:	e15c      	b.n	8001fca <__aeabi_ddiv+0x546>
 8001d10:	1a88      	subs	r0, r1, r2
 8001d12:	9902      	ldr	r1, [sp, #8]
 8001d14:	f7fe fa7c 	bl	8000210 <__aeabi_uidivmod>
 8001d18:	9a03      	ldr	r2, [sp, #12]
 8001d1a:	0424      	lsls	r4, r4, #16
 8001d1c:	4342      	muls	r2, r0
 8001d1e:	0409      	lsls	r1, r1, #16
 8001d20:	0c24      	lsrs	r4, r4, #16
 8001d22:	0003      	movs	r3, r0
 8001d24:	430c      	orrs	r4, r1
 8001d26:	42a2      	cmp	r2, r4
 8001d28:	d906      	bls.n	8001d38 <__aeabi_ddiv+0x2b4>
 8001d2a:	9900      	ldr	r1, [sp, #0]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	468c      	mov	ip, r1
 8001d30:	4464      	add	r4, ip
 8001d32:	42a1      	cmp	r1, r4
 8001d34:	d800      	bhi.n	8001d38 <__aeabi_ddiv+0x2b4>
 8001d36:	e142      	b.n	8001fbe <__aeabi_ddiv+0x53a>
 8001d38:	1aa0      	subs	r0, r4, r2
 8001d3a:	4642      	mov	r2, r8
 8001d3c:	0412      	lsls	r2, r2, #16
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	4693      	mov	fp, r2
 8001d42:	464b      	mov	r3, r9
 8001d44:	4659      	mov	r1, fp
 8001d46:	0c1b      	lsrs	r3, r3, #16
 8001d48:	001f      	movs	r7, r3
 8001d4a:	9304      	str	r3, [sp, #16]
 8001d4c:	040b      	lsls	r3, r1, #16
 8001d4e:	4649      	mov	r1, r9
 8001d50:	0409      	lsls	r1, r1, #16
 8001d52:	0c09      	lsrs	r1, r1, #16
 8001d54:	000c      	movs	r4, r1
 8001d56:	0c1b      	lsrs	r3, r3, #16
 8001d58:	435c      	muls	r4, r3
 8001d5a:	0c12      	lsrs	r2, r2, #16
 8001d5c:	437b      	muls	r3, r7
 8001d5e:	4688      	mov	r8, r1
 8001d60:	4351      	muls	r1, r2
 8001d62:	437a      	muls	r2, r7
 8001d64:	0c27      	lsrs	r7, r4, #16
 8001d66:	46bc      	mov	ip, r7
 8001d68:	185b      	adds	r3, r3, r1
 8001d6a:	4463      	add	r3, ip
 8001d6c:	4299      	cmp	r1, r3
 8001d6e:	d903      	bls.n	8001d78 <__aeabi_ddiv+0x2f4>
 8001d70:	2180      	movs	r1, #128	@ 0x80
 8001d72:	0249      	lsls	r1, r1, #9
 8001d74:	468c      	mov	ip, r1
 8001d76:	4462      	add	r2, ip
 8001d78:	0c19      	lsrs	r1, r3, #16
 8001d7a:	0424      	lsls	r4, r4, #16
 8001d7c:	041b      	lsls	r3, r3, #16
 8001d7e:	0c24      	lsrs	r4, r4, #16
 8001d80:	188a      	adds	r2, r1, r2
 8001d82:	191c      	adds	r4, r3, r4
 8001d84:	4290      	cmp	r0, r2
 8001d86:	d302      	bcc.n	8001d8e <__aeabi_ddiv+0x30a>
 8001d88:	d116      	bne.n	8001db8 <__aeabi_ddiv+0x334>
 8001d8a:	42a5      	cmp	r5, r4
 8001d8c:	d214      	bcs.n	8001db8 <__aeabi_ddiv+0x334>
 8001d8e:	465b      	mov	r3, fp
 8001d90:	9f00      	ldr	r7, [sp, #0]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	444d      	add	r5, r9
 8001d96:	9305      	str	r3, [sp, #20]
 8001d98:	454d      	cmp	r5, r9
 8001d9a:	419b      	sbcs	r3, r3
 8001d9c:	46bc      	mov	ip, r7
 8001d9e:	425b      	negs	r3, r3
 8001da0:	4463      	add	r3, ip
 8001da2:	18c0      	adds	r0, r0, r3
 8001da4:	4287      	cmp	r7, r0
 8001da6:	d300      	bcc.n	8001daa <__aeabi_ddiv+0x326>
 8001da8:	e102      	b.n	8001fb0 <__aeabi_ddiv+0x52c>
 8001daa:	4282      	cmp	r2, r0
 8001dac:	d900      	bls.n	8001db0 <__aeabi_ddiv+0x32c>
 8001dae:	e129      	b.n	8002004 <__aeabi_ddiv+0x580>
 8001db0:	d100      	bne.n	8001db4 <__aeabi_ddiv+0x330>
 8001db2:	e124      	b.n	8001ffe <__aeabi_ddiv+0x57a>
 8001db4:	9b05      	ldr	r3, [sp, #20]
 8001db6:	469b      	mov	fp, r3
 8001db8:	1b2c      	subs	r4, r5, r4
 8001dba:	42a5      	cmp	r5, r4
 8001dbc:	41ad      	sbcs	r5, r5
 8001dbe:	9b00      	ldr	r3, [sp, #0]
 8001dc0:	1a80      	subs	r0, r0, r2
 8001dc2:	426d      	negs	r5, r5
 8001dc4:	1b40      	subs	r0, r0, r5
 8001dc6:	4283      	cmp	r3, r0
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_ddiv+0x348>
 8001dca:	e10f      	b.n	8001fec <__aeabi_ddiv+0x568>
 8001dcc:	9902      	ldr	r1, [sp, #8]
 8001dce:	f7fe fa1f 	bl	8000210 <__aeabi_uidivmod>
 8001dd2:	9a03      	ldr	r2, [sp, #12]
 8001dd4:	040b      	lsls	r3, r1, #16
 8001dd6:	4342      	muls	r2, r0
 8001dd8:	0c21      	lsrs	r1, r4, #16
 8001dda:	0005      	movs	r5, r0
 8001ddc:	4319      	orrs	r1, r3
 8001dde:	428a      	cmp	r2, r1
 8001de0:	d900      	bls.n	8001de4 <__aeabi_ddiv+0x360>
 8001de2:	e0cb      	b.n	8001f7c <__aeabi_ddiv+0x4f8>
 8001de4:	1a88      	subs	r0, r1, r2
 8001de6:	9902      	ldr	r1, [sp, #8]
 8001de8:	f7fe fa12 	bl	8000210 <__aeabi_uidivmod>
 8001dec:	9a03      	ldr	r2, [sp, #12]
 8001dee:	0424      	lsls	r4, r4, #16
 8001df0:	4342      	muls	r2, r0
 8001df2:	0409      	lsls	r1, r1, #16
 8001df4:	0c24      	lsrs	r4, r4, #16
 8001df6:	0003      	movs	r3, r0
 8001df8:	430c      	orrs	r4, r1
 8001dfa:	42a2      	cmp	r2, r4
 8001dfc:	d900      	bls.n	8001e00 <__aeabi_ddiv+0x37c>
 8001dfe:	e0ca      	b.n	8001f96 <__aeabi_ddiv+0x512>
 8001e00:	4641      	mov	r1, r8
 8001e02:	1aa4      	subs	r4, r4, r2
 8001e04:	042a      	lsls	r2, r5, #16
 8001e06:	431a      	orrs	r2, r3
 8001e08:	9f04      	ldr	r7, [sp, #16]
 8001e0a:	0413      	lsls	r3, r2, #16
 8001e0c:	0c1b      	lsrs	r3, r3, #16
 8001e0e:	4359      	muls	r1, r3
 8001e10:	4640      	mov	r0, r8
 8001e12:	437b      	muls	r3, r7
 8001e14:	469c      	mov	ip, r3
 8001e16:	0c15      	lsrs	r5, r2, #16
 8001e18:	4368      	muls	r0, r5
 8001e1a:	0c0b      	lsrs	r3, r1, #16
 8001e1c:	4484      	add	ip, r0
 8001e1e:	4463      	add	r3, ip
 8001e20:	437d      	muls	r5, r7
 8001e22:	4298      	cmp	r0, r3
 8001e24:	d903      	bls.n	8001e2e <__aeabi_ddiv+0x3aa>
 8001e26:	2080      	movs	r0, #128	@ 0x80
 8001e28:	0240      	lsls	r0, r0, #9
 8001e2a:	4684      	mov	ip, r0
 8001e2c:	4465      	add	r5, ip
 8001e2e:	0c18      	lsrs	r0, r3, #16
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	041b      	lsls	r3, r3, #16
 8001e34:	0c09      	lsrs	r1, r1, #16
 8001e36:	1940      	adds	r0, r0, r5
 8001e38:	185b      	adds	r3, r3, r1
 8001e3a:	4284      	cmp	r4, r0
 8001e3c:	d327      	bcc.n	8001e8e <__aeabi_ddiv+0x40a>
 8001e3e:	d023      	beq.n	8001e88 <__aeabi_ddiv+0x404>
 8001e40:	2301      	movs	r3, #1
 8001e42:	0035      	movs	r5, r6
 8001e44:	431a      	orrs	r2, r3
 8001e46:	4b94      	ldr	r3, [pc, #592]	@ (8002098 <__aeabi_ddiv+0x614>)
 8001e48:	4453      	add	r3, sl
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	dd60      	ble.n	8001f10 <__aeabi_ddiv+0x48c>
 8001e4e:	0751      	lsls	r1, r2, #29
 8001e50:	d000      	beq.n	8001e54 <__aeabi_ddiv+0x3d0>
 8001e52:	e086      	b.n	8001f62 <__aeabi_ddiv+0x4de>
 8001e54:	002e      	movs	r6, r5
 8001e56:	08d1      	lsrs	r1, r2, #3
 8001e58:	465a      	mov	r2, fp
 8001e5a:	01d2      	lsls	r2, r2, #7
 8001e5c:	d506      	bpl.n	8001e6c <__aeabi_ddiv+0x3e8>
 8001e5e:	465a      	mov	r2, fp
 8001e60:	4b8e      	ldr	r3, [pc, #568]	@ (800209c <__aeabi_ddiv+0x618>)
 8001e62:	401a      	ands	r2, r3
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	4693      	mov	fp, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4453      	add	r3, sl
 8001e6c:	4a8c      	ldr	r2, [pc, #560]	@ (80020a0 <__aeabi_ddiv+0x61c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	dd00      	ble.n	8001e74 <__aeabi_ddiv+0x3f0>
 8001e72:	e680      	b.n	8001b76 <__aeabi_ddiv+0xf2>
 8001e74:	465a      	mov	r2, fp
 8001e76:	0752      	lsls	r2, r2, #29
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	4690      	mov	r8, r2
 8001e7c:	465a      	mov	r2, fp
 8001e7e:	055b      	lsls	r3, r3, #21
 8001e80:	0254      	lsls	r4, r2, #9
 8001e82:	0b24      	lsrs	r4, r4, #12
 8001e84:	0d5b      	lsrs	r3, r3, #21
 8001e86:	e669      	b.n	8001b5c <__aeabi_ddiv+0xd8>
 8001e88:	0035      	movs	r5, r6
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0db      	beq.n	8001e46 <__aeabi_ddiv+0x3c2>
 8001e8e:	9d00      	ldr	r5, [sp, #0]
 8001e90:	1e51      	subs	r1, r2, #1
 8001e92:	46ac      	mov	ip, r5
 8001e94:	4464      	add	r4, ip
 8001e96:	42ac      	cmp	r4, r5
 8001e98:	d200      	bcs.n	8001e9c <__aeabi_ddiv+0x418>
 8001e9a:	e09e      	b.n	8001fda <__aeabi_ddiv+0x556>
 8001e9c:	4284      	cmp	r4, r0
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0x41e>
 8001ea0:	e0e1      	b.n	8002066 <__aeabi_ddiv+0x5e2>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0x422>
 8001ea4:	e0ee      	b.n	8002084 <__aeabi_ddiv+0x600>
 8001ea6:	000a      	movs	r2, r1
 8001ea8:	e7ca      	b.n	8001e40 <__aeabi_ddiv+0x3bc>
 8001eaa:	4542      	cmp	r2, r8
 8001eac:	d900      	bls.n	8001eb0 <__aeabi_ddiv+0x42c>
 8001eae:	e708      	b.n	8001cc2 <__aeabi_ddiv+0x23e>
 8001eb0:	464b      	mov	r3, r9
 8001eb2:	07dc      	lsls	r4, r3, #31
 8001eb4:	0858      	lsrs	r0, r3, #1
 8001eb6:	4643      	mov	r3, r8
 8001eb8:	085b      	lsrs	r3, r3, #1
 8001eba:	431c      	orrs	r4, r3
 8001ebc:	4643      	mov	r3, r8
 8001ebe:	07dd      	lsls	r5, r3, #31
 8001ec0:	e706      	b.n	8001cd0 <__aeabi_ddiv+0x24c>
 8001ec2:	f000 fcf9 	bl	80028b8 <__clzsi2>
 8001ec6:	2315      	movs	r3, #21
 8001ec8:	469c      	mov	ip, r3
 8001eca:	4484      	add	ip, r0
 8001ecc:	0002      	movs	r2, r0
 8001ece:	4663      	mov	r3, ip
 8001ed0:	3220      	adds	r2, #32
 8001ed2:	2b1c      	cmp	r3, #28
 8001ed4:	dc00      	bgt.n	8001ed8 <__aeabi_ddiv+0x454>
 8001ed6:	e692      	b.n	8001bfe <__aeabi_ddiv+0x17a>
 8001ed8:	0023      	movs	r3, r4
 8001eda:	3808      	subs	r0, #8
 8001edc:	4083      	lsls	r3, r0
 8001ede:	4699      	mov	r9, r3
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	4698      	mov	r8, r3
 8001ee4:	e69a      	b.n	8001c1c <__aeabi_ddiv+0x198>
 8001ee6:	f000 fce7 	bl	80028b8 <__clzsi2>
 8001eea:	0002      	movs	r2, r0
 8001eec:	0003      	movs	r3, r0
 8001eee:	3215      	adds	r2, #21
 8001ef0:	3320      	adds	r3, #32
 8001ef2:	2a1c      	cmp	r2, #28
 8001ef4:	dc00      	bgt.n	8001ef8 <__aeabi_ddiv+0x474>
 8001ef6:	e65f      	b.n	8001bb8 <__aeabi_ddiv+0x134>
 8001ef8:	9900      	ldr	r1, [sp, #0]
 8001efa:	3808      	subs	r0, #8
 8001efc:	4081      	lsls	r1, r0
 8001efe:	2200      	movs	r2, #0
 8001f00:	468b      	mov	fp, r1
 8001f02:	e666      	b.n	8001bd2 <__aeabi_ddiv+0x14e>
 8001f04:	2200      	movs	r2, #0
 8001f06:	002e      	movs	r6, r5
 8001f08:	2400      	movs	r4, #0
 8001f0a:	4690      	mov	r8, r2
 8001f0c:	4b65      	ldr	r3, [pc, #404]	@ (80020a4 <__aeabi_ddiv+0x620>)
 8001f0e:	e625      	b.n	8001b5c <__aeabi_ddiv+0xd8>
 8001f10:	002e      	movs	r6, r5
 8001f12:	2101      	movs	r1, #1
 8001f14:	1ac9      	subs	r1, r1, r3
 8001f16:	2938      	cmp	r1, #56	@ 0x38
 8001f18:	dd00      	ble.n	8001f1c <__aeabi_ddiv+0x498>
 8001f1a:	e61b      	b.n	8001b54 <__aeabi_ddiv+0xd0>
 8001f1c:	291f      	cmp	r1, #31
 8001f1e:	dc7e      	bgt.n	800201e <__aeabi_ddiv+0x59a>
 8001f20:	4861      	ldr	r0, [pc, #388]	@ (80020a8 <__aeabi_ddiv+0x624>)
 8001f22:	0014      	movs	r4, r2
 8001f24:	4450      	add	r0, sl
 8001f26:	465b      	mov	r3, fp
 8001f28:	4082      	lsls	r2, r0
 8001f2a:	4083      	lsls	r3, r0
 8001f2c:	40cc      	lsrs	r4, r1
 8001f2e:	1e50      	subs	r0, r2, #1
 8001f30:	4182      	sbcs	r2, r0
 8001f32:	4323      	orrs	r3, r4
 8001f34:	431a      	orrs	r2, r3
 8001f36:	465b      	mov	r3, fp
 8001f38:	40cb      	lsrs	r3, r1
 8001f3a:	0751      	lsls	r1, r2, #29
 8001f3c:	d009      	beq.n	8001f52 <__aeabi_ddiv+0x4ce>
 8001f3e:	210f      	movs	r1, #15
 8001f40:	4011      	ands	r1, r2
 8001f42:	2904      	cmp	r1, #4
 8001f44:	d005      	beq.n	8001f52 <__aeabi_ddiv+0x4ce>
 8001f46:	1d11      	adds	r1, r2, #4
 8001f48:	4291      	cmp	r1, r2
 8001f4a:	4192      	sbcs	r2, r2
 8001f4c:	4252      	negs	r2, r2
 8001f4e:	189b      	adds	r3, r3, r2
 8001f50:	000a      	movs	r2, r1
 8001f52:	0219      	lsls	r1, r3, #8
 8001f54:	d400      	bmi.n	8001f58 <__aeabi_ddiv+0x4d4>
 8001f56:	e09b      	b.n	8002090 <__aeabi_ddiv+0x60c>
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	2400      	movs	r4, #0
 8001f5e:	4690      	mov	r8, r2
 8001f60:	e5fc      	b.n	8001b5c <__aeabi_ddiv+0xd8>
 8001f62:	210f      	movs	r1, #15
 8001f64:	4011      	ands	r1, r2
 8001f66:	2904      	cmp	r1, #4
 8001f68:	d100      	bne.n	8001f6c <__aeabi_ddiv+0x4e8>
 8001f6a:	e773      	b.n	8001e54 <__aeabi_ddiv+0x3d0>
 8001f6c:	1d11      	adds	r1, r2, #4
 8001f6e:	4291      	cmp	r1, r2
 8001f70:	4192      	sbcs	r2, r2
 8001f72:	4252      	negs	r2, r2
 8001f74:	002e      	movs	r6, r5
 8001f76:	08c9      	lsrs	r1, r1, #3
 8001f78:	4493      	add	fp, r2
 8001f7a:	e76d      	b.n	8001e58 <__aeabi_ddiv+0x3d4>
 8001f7c:	9b00      	ldr	r3, [sp, #0]
 8001f7e:	3d01      	subs	r5, #1
 8001f80:	469c      	mov	ip, r3
 8001f82:	4461      	add	r1, ip
 8001f84:	428b      	cmp	r3, r1
 8001f86:	d900      	bls.n	8001f8a <__aeabi_ddiv+0x506>
 8001f88:	e72c      	b.n	8001de4 <__aeabi_ddiv+0x360>
 8001f8a:	428a      	cmp	r2, r1
 8001f8c:	d800      	bhi.n	8001f90 <__aeabi_ddiv+0x50c>
 8001f8e:	e729      	b.n	8001de4 <__aeabi_ddiv+0x360>
 8001f90:	1e85      	subs	r5, r0, #2
 8001f92:	4461      	add	r1, ip
 8001f94:	e726      	b.n	8001de4 <__aeabi_ddiv+0x360>
 8001f96:	9900      	ldr	r1, [sp, #0]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	468c      	mov	ip, r1
 8001f9c:	4464      	add	r4, ip
 8001f9e:	42a1      	cmp	r1, r4
 8001fa0:	d900      	bls.n	8001fa4 <__aeabi_ddiv+0x520>
 8001fa2:	e72d      	b.n	8001e00 <__aeabi_ddiv+0x37c>
 8001fa4:	42a2      	cmp	r2, r4
 8001fa6:	d800      	bhi.n	8001faa <__aeabi_ddiv+0x526>
 8001fa8:	e72a      	b.n	8001e00 <__aeabi_ddiv+0x37c>
 8001faa:	1e83      	subs	r3, r0, #2
 8001fac:	4464      	add	r4, ip
 8001fae:	e727      	b.n	8001e00 <__aeabi_ddiv+0x37c>
 8001fb0:	4287      	cmp	r7, r0
 8001fb2:	d000      	beq.n	8001fb6 <__aeabi_ddiv+0x532>
 8001fb4:	e6fe      	b.n	8001db4 <__aeabi_ddiv+0x330>
 8001fb6:	45a9      	cmp	r9, r5
 8001fb8:	d900      	bls.n	8001fbc <__aeabi_ddiv+0x538>
 8001fba:	e6fb      	b.n	8001db4 <__aeabi_ddiv+0x330>
 8001fbc:	e6f5      	b.n	8001daa <__aeabi_ddiv+0x326>
 8001fbe:	42a2      	cmp	r2, r4
 8001fc0:	d800      	bhi.n	8001fc4 <__aeabi_ddiv+0x540>
 8001fc2:	e6b9      	b.n	8001d38 <__aeabi_ddiv+0x2b4>
 8001fc4:	1e83      	subs	r3, r0, #2
 8001fc6:	4464      	add	r4, ip
 8001fc8:	e6b6      	b.n	8001d38 <__aeabi_ddiv+0x2b4>
 8001fca:	428a      	cmp	r2, r1
 8001fcc:	d800      	bhi.n	8001fd0 <__aeabi_ddiv+0x54c>
 8001fce:	e69f      	b.n	8001d10 <__aeabi_ddiv+0x28c>
 8001fd0:	46bc      	mov	ip, r7
 8001fd2:	1e83      	subs	r3, r0, #2
 8001fd4:	4698      	mov	r8, r3
 8001fd6:	4461      	add	r1, ip
 8001fd8:	e69a      	b.n	8001d10 <__aeabi_ddiv+0x28c>
 8001fda:	000a      	movs	r2, r1
 8001fdc:	4284      	cmp	r4, r0
 8001fde:	d000      	beq.n	8001fe2 <__aeabi_ddiv+0x55e>
 8001fe0:	e72e      	b.n	8001e40 <__aeabi_ddiv+0x3bc>
 8001fe2:	454b      	cmp	r3, r9
 8001fe4:	d000      	beq.n	8001fe8 <__aeabi_ddiv+0x564>
 8001fe6:	e72b      	b.n	8001e40 <__aeabi_ddiv+0x3bc>
 8001fe8:	0035      	movs	r5, r6
 8001fea:	e72c      	b.n	8001e46 <__aeabi_ddiv+0x3c2>
 8001fec:	4b2a      	ldr	r3, [pc, #168]	@ (8002098 <__aeabi_ddiv+0x614>)
 8001fee:	4a2f      	ldr	r2, [pc, #188]	@ (80020ac <__aeabi_ddiv+0x628>)
 8001ff0:	4453      	add	r3, sl
 8001ff2:	4592      	cmp	sl, r2
 8001ff4:	db43      	blt.n	800207e <__aeabi_ddiv+0x5fa>
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4493      	add	fp, r2
 8001ffc:	e72c      	b.n	8001e58 <__aeabi_ddiv+0x3d4>
 8001ffe:	42ac      	cmp	r4, r5
 8002000:	d800      	bhi.n	8002004 <__aeabi_ddiv+0x580>
 8002002:	e6d7      	b.n	8001db4 <__aeabi_ddiv+0x330>
 8002004:	2302      	movs	r3, #2
 8002006:	425b      	negs	r3, r3
 8002008:	469c      	mov	ip, r3
 800200a:	9900      	ldr	r1, [sp, #0]
 800200c:	444d      	add	r5, r9
 800200e:	454d      	cmp	r5, r9
 8002010:	419b      	sbcs	r3, r3
 8002012:	44e3      	add	fp, ip
 8002014:	468c      	mov	ip, r1
 8002016:	425b      	negs	r3, r3
 8002018:	4463      	add	r3, ip
 800201a:	18c0      	adds	r0, r0, r3
 800201c:	e6cc      	b.n	8001db8 <__aeabi_ddiv+0x334>
 800201e:	201f      	movs	r0, #31
 8002020:	4240      	negs	r0, r0
 8002022:	1ac3      	subs	r3, r0, r3
 8002024:	4658      	mov	r0, fp
 8002026:	40d8      	lsrs	r0, r3
 8002028:	2920      	cmp	r1, #32
 800202a:	d004      	beq.n	8002036 <__aeabi_ddiv+0x5b2>
 800202c:	4659      	mov	r1, fp
 800202e:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <__aeabi_ddiv+0x62c>)
 8002030:	4453      	add	r3, sl
 8002032:	4099      	lsls	r1, r3
 8002034:	430a      	orrs	r2, r1
 8002036:	1e53      	subs	r3, r2, #1
 8002038:	419a      	sbcs	r2, r3
 800203a:	2307      	movs	r3, #7
 800203c:	0019      	movs	r1, r3
 800203e:	4302      	orrs	r2, r0
 8002040:	2400      	movs	r4, #0
 8002042:	4011      	ands	r1, r2
 8002044:	4213      	tst	r3, r2
 8002046:	d009      	beq.n	800205c <__aeabi_ddiv+0x5d8>
 8002048:	3308      	adds	r3, #8
 800204a:	4013      	ands	r3, r2
 800204c:	2b04      	cmp	r3, #4
 800204e:	d01d      	beq.n	800208c <__aeabi_ddiv+0x608>
 8002050:	1d13      	adds	r3, r2, #4
 8002052:	4293      	cmp	r3, r2
 8002054:	4189      	sbcs	r1, r1
 8002056:	001a      	movs	r2, r3
 8002058:	4249      	negs	r1, r1
 800205a:	0749      	lsls	r1, r1, #29
 800205c:	08d2      	lsrs	r2, r2, #3
 800205e:	430a      	orrs	r2, r1
 8002060:	4690      	mov	r8, r2
 8002062:	2300      	movs	r3, #0
 8002064:	e57a      	b.n	8001b5c <__aeabi_ddiv+0xd8>
 8002066:	4649      	mov	r1, r9
 8002068:	9f00      	ldr	r7, [sp, #0]
 800206a:	004d      	lsls	r5, r1, #1
 800206c:	454d      	cmp	r5, r9
 800206e:	4189      	sbcs	r1, r1
 8002070:	46bc      	mov	ip, r7
 8002072:	4249      	negs	r1, r1
 8002074:	4461      	add	r1, ip
 8002076:	46a9      	mov	r9, r5
 8002078:	3a02      	subs	r2, #2
 800207a:	1864      	adds	r4, r4, r1
 800207c:	e7ae      	b.n	8001fdc <__aeabi_ddiv+0x558>
 800207e:	2201      	movs	r2, #1
 8002080:	4252      	negs	r2, r2
 8002082:	e746      	b.n	8001f12 <__aeabi_ddiv+0x48e>
 8002084:	4599      	cmp	r9, r3
 8002086:	d3ee      	bcc.n	8002066 <__aeabi_ddiv+0x5e2>
 8002088:	000a      	movs	r2, r1
 800208a:	e7aa      	b.n	8001fe2 <__aeabi_ddiv+0x55e>
 800208c:	2100      	movs	r1, #0
 800208e:	e7e5      	b.n	800205c <__aeabi_ddiv+0x5d8>
 8002090:	0759      	lsls	r1, r3, #29
 8002092:	025b      	lsls	r3, r3, #9
 8002094:	0b1c      	lsrs	r4, r3, #12
 8002096:	e7e1      	b.n	800205c <__aeabi_ddiv+0x5d8>
 8002098:	000003ff 	.word	0x000003ff
 800209c:	feffffff 	.word	0xfeffffff
 80020a0:	000007fe 	.word	0x000007fe
 80020a4:	000007ff 	.word	0x000007ff
 80020a8:	0000041e 	.word	0x0000041e
 80020ac:	fffffc02 	.word	0xfffffc02
 80020b0:	0000043e 	.word	0x0000043e

080020b4 <__aeabi_dmul>:
 80020b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b6:	4657      	mov	r7, sl
 80020b8:	464e      	mov	r6, r9
 80020ba:	46de      	mov	lr, fp
 80020bc:	4645      	mov	r5, r8
 80020be:	b5e0      	push	{r5, r6, r7, lr}
 80020c0:	001f      	movs	r7, r3
 80020c2:	030b      	lsls	r3, r1, #12
 80020c4:	0b1b      	lsrs	r3, r3, #12
 80020c6:	0016      	movs	r6, r2
 80020c8:	469a      	mov	sl, r3
 80020ca:	0fca      	lsrs	r2, r1, #31
 80020cc:	004b      	lsls	r3, r1, #1
 80020ce:	0004      	movs	r4, r0
 80020d0:	4691      	mov	r9, r2
 80020d2:	b085      	sub	sp, #20
 80020d4:	0d5b      	lsrs	r3, r3, #21
 80020d6:	d100      	bne.n	80020da <__aeabi_dmul+0x26>
 80020d8:	e1cf      	b.n	800247a <__aeabi_dmul+0x3c6>
 80020da:	4acd      	ldr	r2, [pc, #820]	@ (8002410 <__aeabi_dmul+0x35c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d055      	beq.n	800218c <__aeabi_dmul+0xd8>
 80020e0:	4651      	mov	r1, sl
 80020e2:	0f42      	lsrs	r2, r0, #29
 80020e4:	00c9      	lsls	r1, r1, #3
 80020e6:	430a      	orrs	r2, r1
 80020e8:	2180      	movs	r1, #128	@ 0x80
 80020ea:	0409      	lsls	r1, r1, #16
 80020ec:	4311      	orrs	r1, r2
 80020ee:	00c2      	lsls	r2, r0, #3
 80020f0:	4690      	mov	r8, r2
 80020f2:	4ac8      	ldr	r2, [pc, #800]	@ (8002414 <__aeabi_dmul+0x360>)
 80020f4:	468a      	mov	sl, r1
 80020f6:	4693      	mov	fp, r2
 80020f8:	449b      	add	fp, r3
 80020fa:	2300      	movs	r3, #0
 80020fc:	2500      	movs	r5, #0
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	033c      	lsls	r4, r7, #12
 8002102:	007b      	lsls	r3, r7, #1
 8002104:	0ffa      	lsrs	r2, r7, #31
 8002106:	9601      	str	r6, [sp, #4]
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	9200      	str	r2, [sp, #0]
 800210e:	d100      	bne.n	8002112 <__aeabi_dmul+0x5e>
 8002110:	e188      	b.n	8002424 <__aeabi_dmul+0x370>
 8002112:	4abf      	ldr	r2, [pc, #764]	@ (8002410 <__aeabi_dmul+0x35c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d100      	bne.n	800211a <__aeabi_dmul+0x66>
 8002118:	e092      	b.n	8002240 <__aeabi_dmul+0x18c>
 800211a:	4abe      	ldr	r2, [pc, #760]	@ (8002414 <__aeabi_dmul+0x360>)
 800211c:	4694      	mov	ip, r2
 800211e:	4463      	add	r3, ip
 8002120:	449b      	add	fp, r3
 8002122:	2d0a      	cmp	r5, #10
 8002124:	dc42      	bgt.n	80021ac <__aeabi_dmul+0xf8>
 8002126:	00e4      	lsls	r4, r4, #3
 8002128:	0f73      	lsrs	r3, r6, #29
 800212a:	4323      	orrs	r3, r4
 800212c:	2480      	movs	r4, #128	@ 0x80
 800212e:	4649      	mov	r1, r9
 8002130:	0424      	lsls	r4, r4, #16
 8002132:	431c      	orrs	r4, r3
 8002134:	00f3      	lsls	r3, r6, #3
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	9b00      	ldr	r3, [sp, #0]
 800213a:	2000      	movs	r0, #0
 800213c:	4059      	eors	r1, r3
 800213e:	b2cb      	uxtb	r3, r1
 8002140:	9303      	str	r3, [sp, #12]
 8002142:	2d02      	cmp	r5, #2
 8002144:	dc00      	bgt.n	8002148 <__aeabi_dmul+0x94>
 8002146:	e094      	b.n	8002272 <__aeabi_dmul+0x1be>
 8002148:	2301      	movs	r3, #1
 800214a:	40ab      	lsls	r3, r5
 800214c:	001d      	movs	r5, r3
 800214e:	23a6      	movs	r3, #166	@ 0xa6
 8002150:	002a      	movs	r2, r5
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	401a      	ands	r2, r3
 8002156:	421d      	tst	r5, r3
 8002158:	d000      	beq.n	800215c <__aeabi_dmul+0xa8>
 800215a:	e229      	b.n	80025b0 <__aeabi_dmul+0x4fc>
 800215c:	2390      	movs	r3, #144	@ 0x90
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	421d      	tst	r5, r3
 8002162:	d100      	bne.n	8002166 <__aeabi_dmul+0xb2>
 8002164:	e24d      	b.n	8002602 <__aeabi_dmul+0x54e>
 8002166:	2300      	movs	r3, #0
 8002168:	2480      	movs	r4, #128	@ 0x80
 800216a:	4699      	mov	r9, r3
 800216c:	0324      	lsls	r4, r4, #12
 800216e:	4ba8      	ldr	r3, [pc, #672]	@ (8002410 <__aeabi_dmul+0x35c>)
 8002170:	0010      	movs	r0, r2
 8002172:	464a      	mov	r2, r9
 8002174:	051b      	lsls	r3, r3, #20
 8002176:	4323      	orrs	r3, r4
 8002178:	07d2      	lsls	r2, r2, #31
 800217a:	4313      	orrs	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	b005      	add	sp, #20
 8002180:	bcf0      	pop	{r4, r5, r6, r7}
 8002182:	46bb      	mov	fp, r7
 8002184:	46b2      	mov	sl, r6
 8002186:	46a9      	mov	r9, r5
 8002188:	46a0      	mov	r8, r4
 800218a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800218c:	4652      	mov	r2, sl
 800218e:	4302      	orrs	r2, r0
 8002190:	4690      	mov	r8, r2
 8002192:	d000      	beq.n	8002196 <__aeabi_dmul+0xe2>
 8002194:	e1ac      	b.n	80024f0 <__aeabi_dmul+0x43c>
 8002196:	469b      	mov	fp, r3
 8002198:	2302      	movs	r3, #2
 800219a:	4692      	mov	sl, r2
 800219c:	2508      	movs	r5, #8
 800219e:	9302      	str	r3, [sp, #8]
 80021a0:	e7ae      	b.n	8002100 <__aeabi_dmul+0x4c>
 80021a2:	9b00      	ldr	r3, [sp, #0]
 80021a4:	46a2      	mov	sl, r4
 80021a6:	4699      	mov	r9, r3
 80021a8:	9b01      	ldr	r3, [sp, #4]
 80021aa:	4698      	mov	r8, r3
 80021ac:	9b02      	ldr	r3, [sp, #8]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dmul+0x100>
 80021b2:	e1ca      	b.n	800254a <__aeabi_dmul+0x496>
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d100      	bne.n	80021ba <__aeabi_dmul+0x106>
 80021b8:	e192      	b.n	80024e0 <__aeabi_dmul+0x42c>
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d110      	bne.n	80021e0 <__aeabi_dmul+0x12c>
 80021be:	2300      	movs	r3, #0
 80021c0:	2400      	movs	r4, #0
 80021c2:	2200      	movs	r2, #0
 80021c4:	e7d4      	b.n	8002170 <__aeabi_dmul+0xbc>
 80021c6:	2201      	movs	r2, #1
 80021c8:	087b      	lsrs	r3, r7, #1
 80021ca:	403a      	ands	r2, r7
 80021cc:	4313      	orrs	r3, r2
 80021ce:	4652      	mov	r2, sl
 80021d0:	07d2      	lsls	r2, r2, #31
 80021d2:	4313      	orrs	r3, r2
 80021d4:	4698      	mov	r8, r3
 80021d6:	4653      	mov	r3, sl
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	469a      	mov	sl, r3
 80021dc:	9b03      	ldr	r3, [sp, #12]
 80021de:	4699      	mov	r9, r3
 80021e0:	465b      	mov	r3, fp
 80021e2:	1c58      	adds	r0, r3, #1
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	445b      	add	r3, fp
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	dc00      	bgt.n	80021f0 <__aeabi_dmul+0x13c>
 80021ee:	e1b1      	b.n	8002554 <__aeabi_dmul+0x4a0>
 80021f0:	4642      	mov	r2, r8
 80021f2:	0752      	lsls	r2, r2, #29
 80021f4:	d00b      	beq.n	800220e <__aeabi_dmul+0x15a>
 80021f6:	220f      	movs	r2, #15
 80021f8:	4641      	mov	r1, r8
 80021fa:	400a      	ands	r2, r1
 80021fc:	2a04      	cmp	r2, #4
 80021fe:	d006      	beq.n	800220e <__aeabi_dmul+0x15a>
 8002200:	4642      	mov	r2, r8
 8002202:	1d11      	adds	r1, r2, #4
 8002204:	4541      	cmp	r1, r8
 8002206:	4192      	sbcs	r2, r2
 8002208:	4688      	mov	r8, r1
 800220a:	4252      	negs	r2, r2
 800220c:	4492      	add	sl, r2
 800220e:	4652      	mov	r2, sl
 8002210:	01d2      	lsls	r2, r2, #7
 8002212:	d506      	bpl.n	8002222 <__aeabi_dmul+0x16e>
 8002214:	4652      	mov	r2, sl
 8002216:	4b80      	ldr	r3, [pc, #512]	@ (8002418 <__aeabi_dmul+0x364>)
 8002218:	401a      	ands	r2, r3
 800221a:	2380      	movs	r3, #128	@ 0x80
 800221c:	4692      	mov	sl, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	18c3      	adds	r3, r0, r3
 8002222:	4a7e      	ldr	r2, [pc, #504]	@ (800241c <__aeabi_dmul+0x368>)
 8002224:	4293      	cmp	r3, r2
 8002226:	dd00      	ble.n	800222a <__aeabi_dmul+0x176>
 8002228:	e18f      	b.n	800254a <__aeabi_dmul+0x496>
 800222a:	4642      	mov	r2, r8
 800222c:	08d1      	lsrs	r1, r2, #3
 800222e:	4652      	mov	r2, sl
 8002230:	0752      	lsls	r2, r2, #29
 8002232:	430a      	orrs	r2, r1
 8002234:	4651      	mov	r1, sl
 8002236:	055b      	lsls	r3, r3, #21
 8002238:	024c      	lsls	r4, r1, #9
 800223a:	0b24      	lsrs	r4, r4, #12
 800223c:	0d5b      	lsrs	r3, r3, #21
 800223e:	e797      	b.n	8002170 <__aeabi_dmul+0xbc>
 8002240:	4b73      	ldr	r3, [pc, #460]	@ (8002410 <__aeabi_dmul+0x35c>)
 8002242:	4326      	orrs	r6, r4
 8002244:	469c      	mov	ip, r3
 8002246:	44e3      	add	fp, ip
 8002248:	2e00      	cmp	r6, #0
 800224a:	d100      	bne.n	800224e <__aeabi_dmul+0x19a>
 800224c:	e16f      	b.n	800252e <__aeabi_dmul+0x47a>
 800224e:	2303      	movs	r3, #3
 8002250:	4649      	mov	r1, r9
 8002252:	431d      	orrs	r5, r3
 8002254:	9b00      	ldr	r3, [sp, #0]
 8002256:	4059      	eors	r1, r3
 8002258:	b2cb      	uxtb	r3, r1
 800225a:	9303      	str	r3, [sp, #12]
 800225c:	2d0a      	cmp	r5, #10
 800225e:	dd00      	ble.n	8002262 <__aeabi_dmul+0x1ae>
 8002260:	e133      	b.n	80024ca <__aeabi_dmul+0x416>
 8002262:	2301      	movs	r3, #1
 8002264:	40ab      	lsls	r3, r5
 8002266:	001d      	movs	r5, r3
 8002268:	2303      	movs	r3, #3
 800226a:	9302      	str	r3, [sp, #8]
 800226c:	2288      	movs	r2, #136	@ 0x88
 800226e:	422a      	tst	r2, r5
 8002270:	d197      	bne.n	80021a2 <__aeabi_dmul+0xee>
 8002272:	4642      	mov	r2, r8
 8002274:	4643      	mov	r3, r8
 8002276:	0412      	lsls	r2, r2, #16
 8002278:	0c12      	lsrs	r2, r2, #16
 800227a:	0016      	movs	r6, r2
 800227c:	9801      	ldr	r0, [sp, #4]
 800227e:	0c1d      	lsrs	r5, r3, #16
 8002280:	0c03      	lsrs	r3, r0, #16
 8002282:	0400      	lsls	r0, r0, #16
 8002284:	0c00      	lsrs	r0, r0, #16
 8002286:	4346      	muls	r6, r0
 8002288:	46b4      	mov	ip, r6
 800228a:	001e      	movs	r6, r3
 800228c:	436e      	muls	r6, r5
 800228e:	9600      	str	r6, [sp, #0]
 8002290:	0016      	movs	r6, r2
 8002292:	0007      	movs	r7, r0
 8002294:	435e      	muls	r6, r3
 8002296:	4661      	mov	r1, ip
 8002298:	46b0      	mov	r8, r6
 800229a:	436f      	muls	r7, r5
 800229c:	0c0e      	lsrs	r6, r1, #16
 800229e:	44b8      	add	r8, r7
 80022a0:	4446      	add	r6, r8
 80022a2:	42b7      	cmp	r7, r6
 80022a4:	d905      	bls.n	80022b2 <__aeabi_dmul+0x1fe>
 80022a6:	2180      	movs	r1, #128	@ 0x80
 80022a8:	0249      	lsls	r1, r1, #9
 80022aa:	4688      	mov	r8, r1
 80022ac:	9f00      	ldr	r7, [sp, #0]
 80022ae:	4447      	add	r7, r8
 80022b0:	9700      	str	r7, [sp, #0]
 80022b2:	4661      	mov	r1, ip
 80022b4:	0409      	lsls	r1, r1, #16
 80022b6:	0c09      	lsrs	r1, r1, #16
 80022b8:	0c37      	lsrs	r7, r6, #16
 80022ba:	0436      	lsls	r6, r6, #16
 80022bc:	468c      	mov	ip, r1
 80022be:	0031      	movs	r1, r6
 80022c0:	4461      	add	r1, ip
 80022c2:	9101      	str	r1, [sp, #4]
 80022c4:	0011      	movs	r1, r2
 80022c6:	0c26      	lsrs	r6, r4, #16
 80022c8:	0424      	lsls	r4, r4, #16
 80022ca:	0c24      	lsrs	r4, r4, #16
 80022cc:	4361      	muls	r1, r4
 80022ce:	468c      	mov	ip, r1
 80022d0:	0021      	movs	r1, r4
 80022d2:	4369      	muls	r1, r5
 80022d4:	4689      	mov	r9, r1
 80022d6:	4661      	mov	r1, ip
 80022d8:	0c09      	lsrs	r1, r1, #16
 80022da:	4688      	mov	r8, r1
 80022dc:	4372      	muls	r2, r6
 80022de:	444a      	add	r2, r9
 80022e0:	4442      	add	r2, r8
 80022e2:	4375      	muls	r5, r6
 80022e4:	4591      	cmp	r9, r2
 80022e6:	d903      	bls.n	80022f0 <__aeabi_dmul+0x23c>
 80022e8:	2180      	movs	r1, #128	@ 0x80
 80022ea:	0249      	lsls	r1, r1, #9
 80022ec:	4688      	mov	r8, r1
 80022ee:	4445      	add	r5, r8
 80022f0:	0c11      	lsrs	r1, r2, #16
 80022f2:	4688      	mov	r8, r1
 80022f4:	4661      	mov	r1, ip
 80022f6:	0409      	lsls	r1, r1, #16
 80022f8:	0c09      	lsrs	r1, r1, #16
 80022fa:	468c      	mov	ip, r1
 80022fc:	0412      	lsls	r2, r2, #16
 80022fe:	4462      	add	r2, ip
 8002300:	18b9      	adds	r1, r7, r2
 8002302:	9102      	str	r1, [sp, #8]
 8002304:	4651      	mov	r1, sl
 8002306:	0c09      	lsrs	r1, r1, #16
 8002308:	468c      	mov	ip, r1
 800230a:	4651      	mov	r1, sl
 800230c:	040f      	lsls	r7, r1, #16
 800230e:	0c3f      	lsrs	r7, r7, #16
 8002310:	0039      	movs	r1, r7
 8002312:	4341      	muls	r1, r0
 8002314:	4445      	add	r5, r8
 8002316:	4688      	mov	r8, r1
 8002318:	4661      	mov	r1, ip
 800231a:	4341      	muls	r1, r0
 800231c:	468a      	mov	sl, r1
 800231e:	4641      	mov	r1, r8
 8002320:	4660      	mov	r0, ip
 8002322:	0c09      	lsrs	r1, r1, #16
 8002324:	4689      	mov	r9, r1
 8002326:	4358      	muls	r0, r3
 8002328:	437b      	muls	r3, r7
 800232a:	4453      	add	r3, sl
 800232c:	444b      	add	r3, r9
 800232e:	459a      	cmp	sl, r3
 8002330:	d903      	bls.n	800233a <__aeabi_dmul+0x286>
 8002332:	2180      	movs	r1, #128	@ 0x80
 8002334:	0249      	lsls	r1, r1, #9
 8002336:	4689      	mov	r9, r1
 8002338:	4448      	add	r0, r9
 800233a:	0c19      	lsrs	r1, r3, #16
 800233c:	4689      	mov	r9, r1
 800233e:	4641      	mov	r1, r8
 8002340:	0409      	lsls	r1, r1, #16
 8002342:	0c09      	lsrs	r1, r1, #16
 8002344:	4688      	mov	r8, r1
 8002346:	0039      	movs	r1, r7
 8002348:	4361      	muls	r1, r4
 800234a:	041b      	lsls	r3, r3, #16
 800234c:	4443      	add	r3, r8
 800234e:	4688      	mov	r8, r1
 8002350:	4661      	mov	r1, ip
 8002352:	434c      	muls	r4, r1
 8002354:	4371      	muls	r1, r6
 8002356:	468c      	mov	ip, r1
 8002358:	4641      	mov	r1, r8
 800235a:	4377      	muls	r7, r6
 800235c:	0c0e      	lsrs	r6, r1, #16
 800235e:	193f      	adds	r7, r7, r4
 8002360:	19f6      	adds	r6, r6, r7
 8002362:	4448      	add	r0, r9
 8002364:	42b4      	cmp	r4, r6
 8002366:	d903      	bls.n	8002370 <__aeabi_dmul+0x2bc>
 8002368:	2180      	movs	r1, #128	@ 0x80
 800236a:	0249      	lsls	r1, r1, #9
 800236c:	4689      	mov	r9, r1
 800236e:	44cc      	add	ip, r9
 8002370:	9902      	ldr	r1, [sp, #8]
 8002372:	9f00      	ldr	r7, [sp, #0]
 8002374:	4689      	mov	r9, r1
 8002376:	0431      	lsls	r1, r6, #16
 8002378:	444f      	add	r7, r9
 800237a:	4689      	mov	r9, r1
 800237c:	4641      	mov	r1, r8
 800237e:	4297      	cmp	r7, r2
 8002380:	4192      	sbcs	r2, r2
 8002382:	040c      	lsls	r4, r1, #16
 8002384:	0c24      	lsrs	r4, r4, #16
 8002386:	444c      	add	r4, r9
 8002388:	18ff      	adds	r7, r7, r3
 800238a:	4252      	negs	r2, r2
 800238c:	1964      	adds	r4, r4, r5
 800238e:	18a1      	adds	r1, r4, r2
 8002390:	429f      	cmp	r7, r3
 8002392:	419b      	sbcs	r3, r3
 8002394:	4688      	mov	r8, r1
 8002396:	4682      	mov	sl, r0
 8002398:	425b      	negs	r3, r3
 800239a:	4699      	mov	r9, r3
 800239c:	4590      	cmp	r8, r2
 800239e:	4192      	sbcs	r2, r2
 80023a0:	42ac      	cmp	r4, r5
 80023a2:	41a4      	sbcs	r4, r4
 80023a4:	44c2      	add	sl, r8
 80023a6:	44d1      	add	r9, sl
 80023a8:	4252      	negs	r2, r2
 80023aa:	4264      	negs	r4, r4
 80023ac:	4314      	orrs	r4, r2
 80023ae:	4599      	cmp	r9, r3
 80023b0:	419b      	sbcs	r3, r3
 80023b2:	4582      	cmp	sl, r0
 80023b4:	4192      	sbcs	r2, r2
 80023b6:	425b      	negs	r3, r3
 80023b8:	4252      	negs	r2, r2
 80023ba:	4313      	orrs	r3, r2
 80023bc:	464a      	mov	r2, r9
 80023be:	0c36      	lsrs	r6, r6, #16
 80023c0:	19a4      	adds	r4, r4, r6
 80023c2:	18e3      	adds	r3, r4, r3
 80023c4:	4463      	add	r3, ip
 80023c6:	025b      	lsls	r3, r3, #9
 80023c8:	0dd2      	lsrs	r2, r2, #23
 80023ca:	431a      	orrs	r2, r3
 80023cc:	9901      	ldr	r1, [sp, #4]
 80023ce:	4692      	mov	sl, r2
 80023d0:	027a      	lsls	r2, r7, #9
 80023d2:	430a      	orrs	r2, r1
 80023d4:	1e50      	subs	r0, r2, #1
 80023d6:	4182      	sbcs	r2, r0
 80023d8:	0dff      	lsrs	r7, r7, #23
 80023da:	4317      	orrs	r7, r2
 80023dc:	464a      	mov	r2, r9
 80023de:	0252      	lsls	r2, r2, #9
 80023e0:	4317      	orrs	r7, r2
 80023e2:	46b8      	mov	r8, r7
 80023e4:	01db      	lsls	r3, r3, #7
 80023e6:	d500      	bpl.n	80023ea <__aeabi_dmul+0x336>
 80023e8:	e6ed      	b.n	80021c6 <__aeabi_dmul+0x112>
 80023ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <__aeabi_dmul+0x36c>)
 80023ec:	9a03      	ldr	r2, [sp, #12]
 80023ee:	445b      	add	r3, fp
 80023f0:	4691      	mov	r9, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	dc00      	bgt.n	80023f8 <__aeabi_dmul+0x344>
 80023f6:	e0ac      	b.n	8002552 <__aeabi_dmul+0x49e>
 80023f8:	003a      	movs	r2, r7
 80023fa:	0752      	lsls	r2, r2, #29
 80023fc:	d100      	bne.n	8002400 <__aeabi_dmul+0x34c>
 80023fe:	e710      	b.n	8002222 <__aeabi_dmul+0x16e>
 8002400:	220f      	movs	r2, #15
 8002402:	4658      	mov	r0, fp
 8002404:	403a      	ands	r2, r7
 8002406:	2a04      	cmp	r2, #4
 8002408:	d000      	beq.n	800240c <__aeabi_dmul+0x358>
 800240a:	e6f9      	b.n	8002200 <__aeabi_dmul+0x14c>
 800240c:	e709      	b.n	8002222 <__aeabi_dmul+0x16e>
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	000007ff 	.word	0x000007ff
 8002414:	fffffc01 	.word	0xfffffc01
 8002418:	feffffff 	.word	0xfeffffff
 800241c:	000007fe 	.word	0x000007fe
 8002420:	000003ff 	.word	0x000003ff
 8002424:	0022      	movs	r2, r4
 8002426:	4332      	orrs	r2, r6
 8002428:	d06f      	beq.n	800250a <__aeabi_dmul+0x456>
 800242a:	2c00      	cmp	r4, #0
 800242c:	d100      	bne.n	8002430 <__aeabi_dmul+0x37c>
 800242e:	e0c2      	b.n	80025b6 <__aeabi_dmul+0x502>
 8002430:	0020      	movs	r0, r4
 8002432:	f000 fa41 	bl	80028b8 <__clzsi2>
 8002436:	0002      	movs	r2, r0
 8002438:	0003      	movs	r3, r0
 800243a:	3a0b      	subs	r2, #11
 800243c:	201d      	movs	r0, #29
 800243e:	1a82      	subs	r2, r0, r2
 8002440:	0030      	movs	r0, r6
 8002442:	0019      	movs	r1, r3
 8002444:	40d0      	lsrs	r0, r2
 8002446:	3908      	subs	r1, #8
 8002448:	408c      	lsls	r4, r1
 800244a:	0002      	movs	r2, r0
 800244c:	4322      	orrs	r2, r4
 800244e:	0034      	movs	r4, r6
 8002450:	408c      	lsls	r4, r1
 8002452:	4659      	mov	r1, fp
 8002454:	1acb      	subs	r3, r1, r3
 8002456:	4986      	ldr	r1, [pc, #536]	@ (8002670 <__aeabi_dmul+0x5bc>)
 8002458:	468b      	mov	fp, r1
 800245a:	449b      	add	fp, r3
 800245c:	2d0a      	cmp	r5, #10
 800245e:	dd00      	ble.n	8002462 <__aeabi_dmul+0x3ae>
 8002460:	e6a4      	b.n	80021ac <__aeabi_dmul+0xf8>
 8002462:	4649      	mov	r1, r9
 8002464:	9b00      	ldr	r3, [sp, #0]
 8002466:	9401      	str	r4, [sp, #4]
 8002468:	4059      	eors	r1, r3
 800246a:	b2cb      	uxtb	r3, r1
 800246c:	0014      	movs	r4, r2
 800246e:	2000      	movs	r0, #0
 8002470:	9303      	str	r3, [sp, #12]
 8002472:	2d02      	cmp	r5, #2
 8002474:	dd00      	ble.n	8002478 <__aeabi_dmul+0x3c4>
 8002476:	e667      	b.n	8002148 <__aeabi_dmul+0x94>
 8002478:	e6fb      	b.n	8002272 <__aeabi_dmul+0x1be>
 800247a:	4653      	mov	r3, sl
 800247c:	4303      	orrs	r3, r0
 800247e:	4698      	mov	r8, r3
 8002480:	d03c      	beq.n	80024fc <__aeabi_dmul+0x448>
 8002482:	4653      	mov	r3, sl
 8002484:	2b00      	cmp	r3, #0
 8002486:	d100      	bne.n	800248a <__aeabi_dmul+0x3d6>
 8002488:	e0a3      	b.n	80025d2 <__aeabi_dmul+0x51e>
 800248a:	4650      	mov	r0, sl
 800248c:	f000 fa14 	bl	80028b8 <__clzsi2>
 8002490:	230b      	movs	r3, #11
 8002492:	425b      	negs	r3, r3
 8002494:	469c      	mov	ip, r3
 8002496:	0002      	movs	r2, r0
 8002498:	4484      	add	ip, r0
 800249a:	0011      	movs	r1, r2
 800249c:	4650      	mov	r0, sl
 800249e:	3908      	subs	r1, #8
 80024a0:	4088      	lsls	r0, r1
 80024a2:	231d      	movs	r3, #29
 80024a4:	4680      	mov	r8, r0
 80024a6:	4660      	mov	r0, ip
 80024a8:	1a1b      	subs	r3, r3, r0
 80024aa:	0020      	movs	r0, r4
 80024ac:	40d8      	lsrs	r0, r3
 80024ae:	0003      	movs	r3, r0
 80024b0:	4640      	mov	r0, r8
 80024b2:	4303      	orrs	r3, r0
 80024b4:	469a      	mov	sl, r3
 80024b6:	0023      	movs	r3, r4
 80024b8:	408b      	lsls	r3, r1
 80024ba:	4698      	mov	r8, r3
 80024bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002670 <__aeabi_dmul+0x5bc>)
 80024be:	2500      	movs	r5, #0
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	469b      	mov	fp, r3
 80024c4:	2300      	movs	r3, #0
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	e61a      	b.n	8002100 <__aeabi_dmul+0x4c>
 80024ca:	2d0f      	cmp	r5, #15
 80024cc:	d000      	beq.n	80024d0 <__aeabi_dmul+0x41c>
 80024ce:	e0c9      	b.n	8002664 <__aeabi_dmul+0x5b0>
 80024d0:	2380      	movs	r3, #128	@ 0x80
 80024d2:	4652      	mov	r2, sl
 80024d4:	031b      	lsls	r3, r3, #12
 80024d6:	421a      	tst	r2, r3
 80024d8:	d002      	beq.n	80024e0 <__aeabi_dmul+0x42c>
 80024da:	421c      	tst	r4, r3
 80024dc:	d100      	bne.n	80024e0 <__aeabi_dmul+0x42c>
 80024de:	e092      	b.n	8002606 <__aeabi_dmul+0x552>
 80024e0:	2480      	movs	r4, #128	@ 0x80
 80024e2:	4653      	mov	r3, sl
 80024e4:	0324      	lsls	r4, r4, #12
 80024e6:	431c      	orrs	r4, r3
 80024e8:	0324      	lsls	r4, r4, #12
 80024ea:	4642      	mov	r2, r8
 80024ec:	0b24      	lsrs	r4, r4, #12
 80024ee:	e63e      	b.n	800216e <__aeabi_dmul+0xba>
 80024f0:	469b      	mov	fp, r3
 80024f2:	2303      	movs	r3, #3
 80024f4:	4680      	mov	r8, r0
 80024f6:	250c      	movs	r5, #12
 80024f8:	9302      	str	r3, [sp, #8]
 80024fa:	e601      	b.n	8002100 <__aeabi_dmul+0x4c>
 80024fc:	2300      	movs	r3, #0
 80024fe:	469a      	mov	sl, r3
 8002500:	469b      	mov	fp, r3
 8002502:	3301      	adds	r3, #1
 8002504:	2504      	movs	r5, #4
 8002506:	9302      	str	r3, [sp, #8]
 8002508:	e5fa      	b.n	8002100 <__aeabi_dmul+0x4c>
 800250a:	2101      	movs	r1, #1
 800250c:	430d      	orrs	r5, r1
 800250e:	2d0a      	cmp	r5, #10
 8002510:	dd00      	ble.n	8002514 <__aeabi_dmul+0x460>
 8002512:	e64b      	b.n	80021ac <__aeabi_dmul+0xf8>
 8002514:	4649      	mov	r1, r9
 8002516:	9800      	ldr	r0, [sp, #0]
 8002518:	4041      	eors	r1, r0
 800251a:	b2c9      	uxtb	r1, r1
 800251c:	9103      	str	r1, [sp, #12]
 800251e:	2d02      	cmp	r5, #2
 8002520:	dc00      	bgt.n	8002524 <__aeabi_dmul+0x470>
 8002522:	e096      	b.n	8002652 <__aeabi_dmul+0x59e>
 8002524:	2300      	movs	r3, #0
 8002526:	2400      	movs	r4, #0
 8002528:	2001      	movs	r0, #1
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	e60c      	b.n	8002148 <__aeabi_dmul+0x94>
 800252e:	4649      	mov	r1, r9
 8002530:	2302      	movs	r3, #2
 8002532:	9a00      	ldr	r2, [sp, #0]
 8002534:	432b      	orrs	r3, r5
 8002536:	4051      	eors	r1, r2
 8002538:	b2ca      	uxtb	r2, r1
 800253a:	9203      	str	r2, [sp, #12]
 800253c:	2b0a      	cmp	r3, #10
 800253e:	dd00      	ble.n	8002542 <__aeabi_dmul+0x48e>
 8002540:	e634      	b.n	80021ac <__aeabi_dmul+0xf8>
 8002542:	2d00      	cmp	r5, #0
 8002544:	d157      	bne.n	80025f6 <__aeabi_dmul+0x542>
 8002546:	9b03      	ldr	r3, [sp, #12]
 8002548:	4699      	mov	r9, r3
 800254a:	2400      	movs	r4, #0
 800254c:	2200      	movs	r2, #0
 800254e:	4b49      	ldr	r3, [pc, #292]	@ (8002674 <__aeabi_dmul+0x5c0>)
 8002550:	e60e      	b.n	8002170 <__aeabi_dmul+0xbc>
 8002552:	4658      	mov	r0, fp
 8002554:	2101      	movs	r1, #1
 8002556:	1ac9      	subs	r1, r1, r3
 8002558:	2938      	cmp	r1, #56	@ 0x38
 800255a:	dd00      	ble.n	800255e <__aeabi_dmul+0x4aa>
 800255c:	e62f      	b.n	80021be <__aeabi_dmul+0x10a>
 800255e:	291f      	cmp	r1, #31
 8002560:	dd56      	ble.n	8002610 <__aeabi_dmul+0x55c>
 8002562:	221f      	movs	r2, #31
 8002564:	4654      	mov	r4, sl
 8002566:	4252      	negs	r2, r2
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	40dc      	lsrs	r4, r3
 800256c:	2920      	cmp	r1, #32
 800256e:	d007      	beq.n	8002580 <__aeabi_dmul+0x4cc>
 8002570:	4b41      	ldr	r3, [pc, #260]	@ (8002678 <__aeabi_dmul+0x5c4>)
 8002572:	4642      	mov	r2, r8
 8002574:	469c      	mov	ip, r3
 8002576:	4653      	mov	r3, sl
 8002578:	4460      	add	r0, ip
 800257a:	4083      	lsls	r3, r0
 800257c:	431a      	orrs	r2, r3
 800257e:	4690      	mov	r8, r2
 8002580:	4642      	mov	r2, r8
 8002582:	2107      	movs	r1, #7
 8002584:	1e53      	subs	r3, r2, #1
 8002586:	419a      	sbcs	r2, r3
 8002588:	000b      	movs	r3, r1
 800258a:	4322      	orrs	r2, r4
 800258c:	4013      	ands	r3, r2
 800258e:	2400      	movs	r4, #0
 8002590:	4211      	tst	r1, r2
 8002592:	d009      	beq.n	80025a8 <__aeabi_dmul+0x4f4>
 8002594:	230f      	movs	r3, #15
 8002596:	4013      	ands	r3, r2
 8002598:	2b04      	cmp	r3, #4
 800259a:	d05d      	beq.n	8002658 <__aeabi_dmul+0x5a4>
 800259c:	1d11      	adds	r1, r2, #4
 800259e:	4291      	cmp	r1, r2
 80025a0:	419b      	sbcs	r3, r3
 80025a2:	000a      	movs	r2, r1
 80025a4:	425b      	negs	r3, r3
 80025a6:	075b      	lsls	r3, r3, #29
 80025a8:	08d2      	lsrs	r2, r2, #3
 80025aa:	431a      	orrs	r2, r3
 80025ac:	2300      	movs	r3, #0
 80025ae:	e5df      	b.n	8002170 <__aeabi_dmul+0xbc>
 80025b0:	9b03      	ldr	r3, [sp, #12]
 80025b2:	4699      	mov	r9, r3
 80025b4:	e5fa      	b.n	80021ac <__aeabi_dmul+0xf8>
 80025b6:	9801      	ldr	r0, [sp, #4]
 80025b8:	f000 f97e 	bl	80028b8 <__clzsi2>
 80025bc:	0002      	movs	r2, r0
 80025be:	0003      	movs	r3, r0
 80025c0:	3215      	adds	r2, #21
 80025c2:	3320      	adds	r3, #32
 80025c4:	2a1c      	cmp	r2, #28
 80025c6:	dc00      	bgt.n	80025ca <__aeabi_dmul+0x516>
 80025c8:	e738      	b.n	800243c <__aeabi_dmul+0x388>
 80025ca:	9a01      	ldr	r2, [sp, #4]
 80025cc:	3808      	subs	r0, #8
 80025ce:	4082      	lsls	r2, r0
 80025d0:	e73f      	b.n	8002452 <__aeabi_dmul+0x39e>
 80025d2:	f000 f971 	bl	80028b8 <__clzsi2>
 80025d6:	2315      	movs	r3, #21
 80025d8:	469c      	mov	ip, r3
 80025da:	4484      	add	ip, r0
 80025dc:	0002      	movs	r2, r0
 80025de:	4663      	mov	r3, ip
 80025e0:	3220      	adds	r2, #32
 80025e2:	2b1c      	cmp	r3, #28
 80025e4:	dc00      	bgt.n	80025e8 <__aeabi_dmul+0x534>
 80025e6:	e758      	b.n	800249a <__aeabi_dmul+0x3e6>
 80025e8:	2300      	movs	r3, #0
 80025ea:	4698      	mov	r8, r3
 80025ec:	0023      	movs	r3, r4
 80025ee:	3808      	subs	r0, #8
 80025f0:	4083      	lsls	r3, r0
 80025f2:	469a      	mov	sl, r3
 80025f4:	e762      	b.n	80024bc <__aeabi_dmul+0x408>
 80025f6:	001d      	movs	r5, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	2400      	movs	r4, #0
 80025fc:	2002      	movs	r0, #2
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	e5a2      	b.n	8002148 <__aeabi_dmul+0x94>
 8002602:	9002      	str	r0, [sp, #8]
 8002604:	e632      	b.n	800226c <__aeabi_dmul+0x1b8>
 8002606:	431c      	orrs	r4, r3
 8002608:	9b00      	ldr	r3, [sp, #0]
 800260a:	9a01      	ldr	r2, [sp, #4]
 800260c:	4699      	mov	r9, r3
 800260e:	e5ae      	b.n	800216e <__aeabi_dmul+0xba>
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <__aeabi_dmul+0x5c8>)
 8002612:	4652      	mov	r2, sl
 8002614:	18c3      	adds	r3, r0, r3
 8002616:	4640      	mov	r0, r8
 8002618:	409a      	lsls	r2, r3
 800261a:	40c8      	lsrs	r0, r1
 800261c:	4302      	orrs	r2, r0
 800261e:	4640      	mov	r0, r8
 8002620:	4098      	lsls	r0, r3
 8002622:	0003      	movs	r3, r0
 8002624:	1e58      	subs	r0, r3, #1
 8002626:	4183      	sbcs	r3, r0
 8002628:	4654      	mov	r4, sl
 800262a:	431a      	orrs	r2, r3
 800262c:	40cc      	lsrs	r4, r1
 800262e:	0753      	lsls	r3, r2, #29
 8002630:	d009      	beq.n	8002646 <__aeabi_dmul+0x592>
 8002632:	230f      	movs	r3, #15
 8002634:	4013      	ands	r3, r2
 8002636:	2b04      	cmp	r3, #4
 8002638:	d005      	beq.n	8002646 <__aeabi_dmul+0x592>
 800263a:	1d13      	adds	r3, r2, #4
 800263c:	4293      	cmp	r3, r2
 800263e:	4192      	sbcs	r2, r2
 8002640:	4252      	negs	r2, r2
 8002642:	18a4      	adds	r4, r4, r2
 8002644:	001a      	movs	r2, r3
 8002646:	0223      	lsls	r3, r4, #8
 8002648:	d508      	bpl.n	800265c <__aeabi_dmul+0x5a8>
 800264a:	2301      	movs	r3, #1
 800264c:	2400      	movs	r4, #0
 800264e:	2200      	movs	r2, #0
 8002650:	e58e      	b.n	8002170 <__aeabi_dmul+0xbc>
 8002652:	4689      	mov	r9, r1
 8002654:	2400      	movs	r4, #0
 8002656:	e58b      	b.n	8002170 <__aeabi_dmul+0xbc>
 8002658:	2300      	movs	r3, #0
 800265a:	e7a5      	b.n	80025a8 <__aeabi_dmul+0x4f4>
 800265c:	0763      	lsls	r3, r4, #29
 800265e:	0264      	lsls	r4, r4, #9
 8002660:	0b24      	lsrs	r4, r4, #12
 8002662:	e7a1      	b.n	80025a8 <__aeabi_dmul+0x4f4>
 8002664:	9b00      	ldr	r3, [sp, #0]
 8002666:	46a2      	mov	sl, r4
 8002668:	4699      	mov	r9, r3
 800266a:	9b01      	ldr	r3, [sp, #4]
 800266c:	4698      	mov	r8, r3
 800266e:	e737      	b.n	80024e0 <__aeabi_dmul+0x42c>
 8002670:	fffffc0d 	.word	0xfffffc0d
 8002674:	000007ff 	.word	0x000007ff
 8002678:	0000043e 	.word	0x0000043e
 800267c:	0000041e 	.word	0x0000041e

08002680 <__aeabi_i2d>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	2800      	cmp	r0, #0
 8002684:	d016      	beq.n	80026b4 <__aeabi_i2d+0x34>
 8002686:	17c3      	asrs	r3, r0, #31
 8002688:	18c5      	adds	r5, r0, r3
 800268a:	405d      	eors	r5, r3
 800268c:	0fc4      	lsrs	r4, r0, #31
 800268e:	0028      	movs	r0, r5
 8002690:	f000 f912 	bl	80028b8 <__clzsi2>
 8002694:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <__aeabi_i2d+0x58>)
 8002696:	1a1b      	subs	r3, r3, r0
 8002698:	055b      	lsls	r3, r3, #21
 800269a:	0d5b      	lsrs	r3, r3, #21
 800269c:	280a      	cmp	r0, #10
 800269e:	dc14      	bgt.n	80026ca <__aeabi_i2d+0x4a>
 80026a0:	0002      	movs	r2, r0
 80026a2:	002e      	movs	r6, r5
 80026a4:	3215      	adds	r2, #21
 80026a6:	4096      	lsls	r6, r2
 80026a8:	220b      	movs	r2, #11
 80026aa:	1a12      	subs	r2, r2, r0
 80026ac:	40d5      	lsrs	r5, r2
 80026ae:	032d      	lsls	r5, r5, #12
 80026b0:	0b2d      	lsrs	r5, r5, #12
 80026b2:	e003      	b.n	80026bc <__aeabi_i2d+0x3c>
 80026b4:	2400      	movs	r4, #0
 80026b6:	2300      	movs	r3, #0
 80026b8:	2500      	movs	r5, #0
 80026ba:	2600      	movs	r6, #0
 80026bc:	051b      	lsls	r3, r3, #20
 80026be:	432b      	orrs	r3, r5
 80026c0:	07e4      	lsls	r4, r4, #31
 80026c2:	4323      	orrs	r3, r4
 80026c4:	0030      	movs	r0, r6
 80026c6:	0019      	movs	r1, r3
 80026c8:	bd70      	pop	{r4, r5, r6, pc}
 80026ca:	380b      	subs	r0, #11
 80026cc:	4085      	lsls	r5, r0
 80026ce:	032d      	lsls	r5, r5, #12
 80026d0:	2600      	movs	r6, #0
 80026d2:	0b2d      	lsrs	r5, r5, #12
 80026d4:	e7f2      	b.n	80026bc <__aeabi_i2d+0x3c>
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	0000041e 	.word	0x0000041e

080026dc <__aeabi_ui2d>:
 80026dc:	b510      	push	{r4, lr}
 80026de:	1e04      	subs	r4, r0, #0
 80026e0:	d010      	beq.n	8002704 <__aeabi_ui2d+0x28>
 80026e2:	f000 f8e9 	bl	80028b8 <__clzsi2>
 80026e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <__aeabi_ui2d+0x44>)
 80026e8:	1a1b      	subs	r3, r3, r0
 80026ea:	055b      	lsls	r3, r3, #21
 80026ec:	0d5b      	lsrs	r3, r3, #21
 80026ee:	280a      	cmp	r0, #10
 80026f0:	dc0f      	bgt.n	8002712 <__aeabi_ui2d+0x36>
 80026f2:	220b      	movs	r2, #11
 80026f4:	0021      	movs	r1, r4
 80026f6:	1a12      	subs	r2, r2, r0
 80026f8:	40d1      	lsrs	r1, r2
 80026fa:	3015      	adds	r0, #21
 80026fc:	030a      	lsls	r2, r1, #12
 80026fe:	4084      	lsls	r4, r0
 8002700:	0b12      	lsrs	r2, r2, #12
 8002702:	e001      	b.n	8002708 <__aeabi_ui2d+0x2c>
 8002704:	2300      	movs	r3, #0
 8002706:	2200      	movs	r2, #0
 8002708:	051b      	lsls	r3, r3, #20
 800270a:	4313      	orrs	r3, r2
 800270c:	0020      	movs	r0, r4
 800270e:	0019      	movs	r1, r3
 8002710:	bd10      	pop	{r4, pc}
 8002712:	0022      	movs	r2, r4
 8002714:	380b      	subs	r0, #11
 8002716:	4082      	lsls	r2, r0
 8002718:	0312      	lsls	r2, r2, #12
 800271a:	2400      	movs	r4, #0
 800271c:	0b12      	lsrs	r2, r2, #12
 800271e:	e7f3      	b.n	8002708 <__aeabi_ui2d+0x2c>
 8002720:	0000041e 	.word	0x0000041e

08002724 <__aeabi_f2d>:
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	0242      	lsls	r2, r0, #9
 8002728:	0043      	lsls	r3, r0, #1
 800272a:	0fc4      	lsrs	r4, r0, #31
 800272c:	20fe      	movs	r0, #254	@ 0xfe
 800272e:	0e1b      	lsrs	r3, r3, #24
 8002730:	1c59      	adds	r1, r3, #1
 8002732:	0a55      	lsrs	r5, r2, #9
 8002734:	4208      	tst	r0, r1
 8002736:	d00c      	beq.n	8002752 <__aeabi_f2d+0x2e>
 8002738:	21e0      	movs	r1, #224	@ 0xe0
 800273a:	0089      	lsls	r1, r1, #2
 800273c:	468c      	mov	ip, r1
 800273e:	076d      	lsls	r5, r5, #29
 8002740:	0b12      	lsrs	r2, r2, #12
 8002742:	4463      	add	r3, ip
 8002744:	051b      	lsls	r3, r3, #20
 8002746:	4313      	orrs	r3, r2
 8002748:	07e4      	lsls	r4, r4, #31
 800274a:	4323      	orrs	r3, r4
 800274c:	0028      	movs	r0, r5
 800274e:	0019      	movs	r1, r3
 8002750:	bd70      	pop	{r4, r5, r6, pc}
 8002752:	2b00      	cmp	r3, #0
 8002754:	d114      	bne.n	8002780 <__aeabi_f2d+0x5c>
 8002756:	2d00      	cmp	r5, #0
 8002758:	d01b      	beq.n	8002792 <__aeabi_f2d+0x6e>
 800275a:	0028      	movs	r0, r5
 800275c:	f000 f8ac 	bl	80028b8 <__clzsi2>
 8002760:	280a      	cmp	r0, #10
 8002762:	dc1c      	bgt.n	800279e <__aeabi_f2d+0x7a>
 8002764:	230b      	movs	r3, #11
 8002766:	002a      	movs	r2, r5
 8002768:	1a1b      	subs	r3, r3, r0
 800276a:	40da      	lsrs	r2, r3
 800276c:	0003      	movs	r3, r0
 800276e:	3315      	adds	r3, #21
 8002770:	409d      	lsls	r5, r3
 8002772:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <__aeabi_f2d+0x88>)
 8002774:	0312      	lsls	r2, r2, #12
 8002776:	1a1b      	subs	r3, r3, r0
 8002778:	055b      	lsls	r3, r3, #21
 800277a:	0b12      	lsrs	r2, r2, #12
 800277c:	0d5b      	lsrs	r3, r3, #21
 800277e:	e7e1      	b.n	8002744 <__aeabi_f2d+0x20>
 8002780:	2d00      	cmp	r5, #0
 8002782:	d009      	beq.n	8002798 <__aeabi_f2d+0x74>
 8002784:	0b13      	lsrs	r3, r2, #12
 8002786:	2280      	movs	r2, #128	@ 0x80
 8002788:	0312      	lsls	r2, r2, #12
 800278a:	431a      	orrs	r2, r3
 800278c:	076d      	lsls	r5, r5, #29
 800278e:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <__aeabi_f2d+0x8c>)
 8002790:	e7d8      	b.n	8002744 <__aeabi_f2d+0x20>
 8002792:	2300      	movs	r3, #0
 8002794:	2200      	movs	r2, #0
 8002796:	e7d5      	b.n	8002744 <__aeabi_f2d+0x20>
 8002798:	2200      	movs	r2, #0
 800279a:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <__aeabi_f2d+0x8c>)
 800279c:	e7d2      	b.n	8002744 <__aeabi_f2d+0x20>
 800279e:	0003      	movs	r3, r0
 80027a0:	002a      	movs	r2, r5
 80027a2:	3b0b      	subs	r3, #11
 80027a4:	409a      	lsls	r2, r3
 80027a6:	2500      	movs	r5, #0
 80027a8:	e7e3      	b.n	8002772 <__aeabi_f2d+0x4e>
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	00000389 	.word	0x00000389
 80027b0:	000007ff 	.word	0x000007ff

080027b4 <__aeabi_d2f>:
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	004b      	lsls	r3, r1, #1
 80027b8:	030f      	lsls	r7, r1, #12
 80027ba:	0d5b      	lsrs	r3, r3, #21
 80027bc:	4c3a      	ldr	r4, [pc, #232]	@ (80028a8 <__aeabi_d2f+0xf4>)
 80027be:	0f45      	lsrs	r5, r0, #29
 80027c0:	b083      	sub	sp, #12
 80027c2:	0a7f      	lsrs	r7, r7, #9
 80027c4:	1c5e      	adds	r6, r3, #1
 80027c6:	432f      	orrs	r7, r5
 80027c8:	9000      	str	r0, [sp, #0]
 80027ca:	9101      	str	r1, [sp, #4]
 80027cc:	0fca      	lsrs	r2, r1, #31
 80027ce:	00c5      	lsls	r5, r0, #3
 80027d0:	4226      	tst	r6, r4
 80027d2:	d00b      	beq.n	80027ec <__aeabi_d2f+0x38>
 80027d4:	4935      	ldr	r1, [pc, #212]	@ (80028ac <__aeabi_d2f+0xf8>)
 80027d6:	185c      	adds	r4, r3, r1
 80027d8:	2cfe      	cmp	r4, #254	@ 0xfe
 80027da:	dd13      	ble.n	8002804 <__aeabi_d2f+0x50>
 80027dc:	20ff      	movs	r0, #255	@ 0xff
 80027de:	2300      	movs	r3, #0
 80027e0:	05c0      	lsls	r0, r0, #23
 80027e2:	4318      	orrs	r0, r3
 80027e4:	07d2      	lsls	r2, r2, #31
 80027e6:	4310      	orrs	r0, r2
 80027e8:	b003      	add	sp, #12
 80027ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ec:	433d      	orrs	r5, r7
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <__aeabi_d2f+0x42>
 80027f2:	2000      	movs	r0, #0
 80027f4:	e7f4      	b.n	80027e0 <__aeabi_d2f+0x2c>
 80027f6:	2d00      	cmp	r5, #0
 80027f8:	d0f0      	beq.n	80027dc <__aeabi_d2f+0x28>
 80027fa:	2380      	movs	r3, #128	@ 0x80
 80027fc:	03db      	lsls	r3, r3, #15
 80027fe:	20ff      	movs	r0, #255	@ 0xff
 8002800:	433b      	orrs	r3, r7
 8002802:	e7ed      	b.n	80027e0 <__aeabi_d2f+0x2c>
 8002804:	2c00      	cmp	r4, #0
 8002806:	dd0c      	ble.n	8002822 <__aeabi_d2f+0x6e>
 8002808:	9b00      	ldr	r3, [sp, #0]
 800280a:	00ff      	lsls	r7, r7, #3
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	1e58      	subs	r0, r3, #1
 8002810:	4183      	sbcs	r3, r0
 8002812:	0f69      	lsrs	r1, r5, #29
 8002814:	433b      	orrs	r3, r7
 8002816:	430b      	orrs	r3, r1
 8002818:	0759      	lsls	r1, r3, #29
 800281a:	d127      	bne.n	800286c <__aeabi_d2f+0xb8>
 800281c:	08db      	lsrs	r3, r3, #3
 800281e:	b2e0      	uxtb	r0, r4
 8002820:	e7de      	b.n	80027e0 <__aeabi_d2f+0x2c>
 8002822:	0021      	movs	r1, r4
 8002824:	3117      	adds	r1, #23
 8002826:	db31      	blt.n	800288c <__aeabi_d2f+0xd8>
 8002828:	2180      	movs	r1, #128	@ 0x80
 800282a:	201e      	movs	r0, #30
 800282c:	0409      	lsls	r1, r1, #16
 800282e:	4339      	orrs	r1, r7
 8002830:	1b00      	subs	r0, r0, r4
 8002832:	281f      	cmp	r0, #31
 8002834:	dd2d      	ble.n	8002892 <__aeabi_d2f+0xde>
 8002836:	2602      	movs	r6, #2
 8002838:	4276      	negs	r6, r6
 800283a:	1b34      	subs	r4, r6, r4
 800283c:	000e      	movs	r6, r1
 800283e:	40e6      	lsrs	r6, r4
 8002840:	0034      	movs	r4, r6
 8002842:	2820      	cmp	r0, #32
 8002844:	d004      	beq.n	8002850 <__aeabi_d2f+0x9c>
 8002846:	481a      	ldr	r0, [pc, #104]	@ (80028b0 <__aeabi_d2f+0xfc>)
 8002848:	4684      	mov	ip, r0
 800284a:	4463      	add	r3, ip
 800284c:	4099      	lsls	r1, r3
 800284e:	430d      	orrs	r5, r1
 8002850:	002b      	movs	r3, r5
 8002852:	1e59      	subs	r1, r3, #1
 8002854:	418b      	sbcs	r3, r1
 8002856:	4323      	orrs	r3, r4
 8002858:	0759      	lsls	r1, r3, #29
 800285a:	d003      	beq.n	8002864 <__aeabi_d2f+0xb0>
 800285c:	210f      	movs	r1, #15
 800285e:	4019      	ands	r1, r3
 8002860:	2904      	cmp	r1, #4
 8002862:	d10b      	bne.n	800287c <__aeabi_d2f+0xc8>
 8002864:	019b      	lsls	r3, r3, #6
 8002866:	2000      	movs	r0, #0
 8002868:	0a5b      	lsrs	r3, r3, #9
 800286a:	e7b9      	b.n	80027e0 <__aeabi_d2f+0x2c>
 800286c:	210f      	movs	r1, #15
 800286e:	4019      	ands	r1, r3
 8002870:	2904      	cmp	r1, #4
 8002872:	d104      	bne.n	800287e <__aeabi_d2f+0xca>
 8002874:	019b      	lsls	r3, r3, #6
 8002876:	0a5b      	lsrs	r3, r3, #9
 8002878:	b2e0      	uxtb	r0, r4
 800287a:	e7b1      	b.n	80027e0 <__aeabi_d2f+0x2c>
 800287c:	2400      	movs	r4, #0
 800287e:	3304      	adds	r3, #4
 8002880:	0159      	lsls	r1, r3, #5
 8002882:	d5f7      	bpl.n	8002874 <__aeabi_d2f+0xc0>
 8002884:	3401      	adds	r4, #1
 8002886:	2300      	movs	r3, #0
 8002888:	b2e0      	uxtb	r0, r4
 800288a:	e7a9      	b.n	80027e0 <__aeabi_d2f+0x2c>
 800288c:	2000      	movs	r0, #0
 800288e:	2300      	movs	r3, #0
 8002890:	e7a6      	b.n	80027e0 <__aeabi_d2f+0x2c>
 8002892:	4c08      	ldr	r4, [pc, #32]	@ (80028b4 <__aeabi_d2f+0x100>)
 8002894:	191c      	adds	r4, r3, r4
 8002896:	002b      	movs	r3, r5
 8002898:	40a5      	lsls	r5, r4
 800289a:	40c3      	lsrs	r3, r0
 800289c:	40a1      	lsls	r1, r4
 800289e:	1e68      	subs	r0, r5, #1
 80028a0:	4185      	sbcs	r5, r0
 80028a2:	4329      	orrs	r1, r5
 80028a4:	430b      	orrs	r3, r1
 80028a6:	e7d7      	b.n	8002858 <__aeabi_d2f+0xa4>
 80028a8:	000007fe 	.word	0x000007fe
 80028ac:	fffffc80 	.word	0xfffffc80
 80028b0:	fffffca2 	.word	0xfffffca2
 80028b4:	fffffc82 	.word	0xfffffc82

080028b8 <__clzsi2>:
 80028b8:	211c      	movs	r1, #28
 80028ba:	2301      	movs	r3, #1
 80028bc:	041b      	lsls	r3, r3, #16
 80028be:	4298      	cmp	r0, r3
 80028c0:	d301      	bcc.n	80028c6 <__clzsi2+0xe>
 80028c2:	0c00      	lsrs	r0, r0, #16
 80028c4:	3910      	subs	r1, #16
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	4298      	cmp	r0, r3
 80028ca:	d301      	bcc.n	80028d0 <__clzsi2+0x18>
 80028cc:	0a00      	lsrs	r0, r0, #8
 80028ce:	3908      	subs	r1, #8
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	4298      	cmp	r0, r3
 80028d4:	d301      	bcc.n	80028da <__clzsi2+0x22>
 80028d6:	0900      	lsrs	r0, r0, #4
 80028d8:	3904      	subs	r1, #4
 80028da:	a202      	add	r2, pc, #8	@ (adr r2, 80028e4 <__clzsi2+0x2c>)
 80028dc:	5c10      	ldrb	r0, [r2, r0]
 80028de:	1840      	adds	r0, r0, r1
 80028e0:	4770      	bx	lr
 80028e2:	46c0      	nop			@ (mov r8, r8)
 80028e4:	02020304 	.word	0x02020304
 80028e8:	01010101 	.word	0x01010101
	...

080028f4 <pre_calc_sin_cos>:

float fast_cos(float theta) {
    return fast_sin(theta + HALF_PI_F);
}

void pre_calc_sin_cos(float theta, float *sin_theta, float *cos_theta) {
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	46de      	mov	lr, fp
 80028f8:	4645      	mov	r5, r8
 80028fa:	4657      	mov	r7, sl
 80028fc:	464e      	mov	r6, r9
 80028fe:	4688      	mov	r8, r1
 8002900:	b5e0      	push	{r5, r6, r7, lr}
    int k = (int)(*theta * INV_TWO_PI_F);
 8002902:	4949      	ldr	r1, [pc, #292]	@ (8002a28 <pre_calc_sin_cos+0x134>)
void pre_calc_sin_cos(float theta, float *sin_theta, float *cos_theta) {
 8002904:	0015      	movs	r5, r2
 8002906:	1c07      	adds	r7, r0, #0
    int k = (int)(*theta * INV_TWO_PI_F);
 8002908:	f7fe f882 	bl	8000a10 <__aeabi_fmul>
 800290c:	f7fe fc3e 	bl	800118c <__aeabi_f2iz>
    *theta -= (float)k * TWO_PI_F;
 8002910:	f7fe fc5c 	bl	80011cc <__aeabi_i2f>
 8002914:	4945      	ldr	r1, [pc, #276]	@ (8002a2c <pre_calc_sin_cos+0x138>)
 8002916:	f7fe f87b 	bl	8000a10 <__aeabi_fmul>
 800291a:	1c01      	adds	r1, r0, #0
 800291c:	1c38      	adds	r0, r7, #0
 800291e:	f7fe f9d1 	bl	8000cc4 <__aeabi_fsub>
    if (*theta < 0.0f) {
 8002922:	2100      	movs	r1, #0
    *theta -= (float)k * TWO_PI_F;
 8002924:	1c04      	adds	r4, r0, #0
    if (*theta < 0.0f) {
 8002926:	f7fd fc8b 	bl	8000240 <__aeabi_fcmplt>
 800292a:	2800      	cmp	r0, #0
 800292c:	d004      	beq.n	8002938 <pre_calc_sin_cos+0x44>
        *theta += TWO_PI_F;
 800292e:	1c20      	adds	r0, r4, #0
 8002930:	493e      	ldr	r1, [pc, #248]	@ (8002a2c <pre_calc_sin_cos+0x138>)
 8002932:	f7fd fcad 	bl	8000290 <__aeabi_fadd>
 8002936:	1c04      	adds	r4, r0, #0
    float index_f = theta * LUT_INV_STEP;   // [0, LUT_SIZE)
 8002938:	493d      	ldr	r1, [pc, #244]	@ (8002a30 <pre_calc_sin_cos+0x13c>)
 800293a:	1c20      	adds	r0, r4, #0
 800293c:	f7fe f868 	bl	8000a10 <__aeabi_fmul>
 8002940:	4681      	mov	r9, r0
    int   index   = (int)index_f;           // floor
 8002942:	f7fe fc23 	bl	800118c <__aeabi_f2iz>
 8002946:	0004      	movs	r4, r0
    float frac    = index_f - (float)index; // [0,1)
 8002948:	f7fe fc40 	bl	80011cc <__aeabi_i2f>
    int next_index = (index + 1) & (LUT_SIZE - 1);
 800294c:	1c63      	adds	r3, r4, #1
 800294e:	059b      	lsls	r3, r3, #22
    return sin_lut[index] * (1.0f - frac) + sin_lut[next_index] * frac;
 8002950:	0d1b      	lsrs	r3, r3, #20
 8002952:	469a      	mov	sl, r3
    float frac    = index_f - (float)index; // [0,1)
 8002954:	1c01      	adds	r1, r0, #0
 8002956:	4683      	mov	fp, r0
 8002958:	4648      	mov	r0, r9
 800295a:	f7fe f9b3 	bl	8000cc4 <__aeabi_fsub>
    return sin_lut[index] * (1.0f - frac) + sin_lut[next_index] * frac;
 800295e:	4653      	mov	r3, sl
 8002960:	4e34      	ldr	r6, [pc, #208]	@ (8002a34 <pre_calc_sin_cos+0x140>)
 8002962:	00a4      	lsls	r4, r4, #2
 8002964:	58f1      	ldr	r1, [r6, r3]
 8002966:	f7fe f853 	bl	8000a10 <__aeabi_fmul>
 800296a:	4682      	mov	sl, r0
 800296c:	20fe      	movs	r0, #254	@ 0xfe
 800296e:	4649      	mov	r1, r9
 8002970:	0580      	lsls	r0, r0, #22
 8002972:	f7fe f9a7 	bl	8000cc4 <__aeabi_fsub>
 8002976:	4659      	mov	r1, fp
 8002978:	f7fd fc8a 	bl	8000290 <__aeabi_fadd>
 800297c:	5931      	ldr	r1, [r6, r4]
 800297e:	f7fe f847 	bl	8000a10 <__aeabi_fmul>
 8002982:	1c01      	adds	r1, r0, #0
 8002984:	4650      	mov	r0, sl
 8002986:	f7fd fc83 	bl	8000290 <__aeabi_fadd>
    float s = fast_sin(theta);
    *sin_theta = s;
 800298a:	4643      	mov	r3, r8
    return fast_sin(theta + HALF_PI_F);
 800298c:	492a      	ldr	r1, [pc, #168]	@ (8002a38 <pre_calc_sin_cos+0x144>)
    *sin_theta = s;
 800298e:	6018      	str	r0, [r3, #0]
    return fast_sin(theta + HALF_PI_F);
 8002990:	1c38      	adds	r0, r7, #0
 8002992:	f7fd fc7d 	bl	8000290 <__aeabi_fadd>
    int k = (int)(*theta * INV_TWO_PI_F);
 8002996:	4924      	ldr	r1, [pc, #144]	@ (8002a28 <pre_calc_sin_cos+0x134>)
    return fast_sin(theta + HALF_PI_F);
 8002998:	1c04      	adds	r4, r0, #0
    int k = (int)(*theta * INV_TWO_PI_F);
 800299a:	f7fe f839 	bl	8000a10 <__aeabi_fmul>
 800299e:	f7fe fbf5 	bl	800118c <__aeabi_f2iz>
    *theta -= (float)k * TWO_PI_F;
 80029a2:	f7fe fc13 	bl	80011cc <__aeabi_i2f>
 80029a6:	4921      	ldr	r1, [pc, #132]	@ (8002a2c <pre_calc_sin_cos+0x138>)
 80029a8:	f7fe f832 	bl	8000a10 <__aeabi_fmul>
 80029ac:	1c01      	adds	r1, r0, #0
 80029ae:	1c20      	adds	r0, r4, #0
 80029b0:	f7fe f988 	bl	8000cc4 <__aeabi_fsub>
    if (*theta < 0.0f) {
 80029b4:	2100      	movs	r1, #0
    *theta -= (float)k * TWO_PI_F;
 80029b6:	1c04      	adds	r4, r0, #0
    if (*theta < 0.0f) {
 80029b8:	f7fd fc42 	bl	8000240 <__aeabi_fcmplt>
 80029bc:	2800      	cmp	r0, #0
 80029be:	d004      	beq.n	80029ca <pre_calc_sin_cos+0xd6>
        *theta += TWO_PI_F;
 80029c0:	1c20      	adds	r0, r4, #0
 80029c2:	491a      	ldr	r1, [pc, #104]	@ (8002a2c <pre_calc_sin_cos+0x138>)
 80029c4:	f7fd fc64 	bl	8000290 <__aeabi_fadd>
 80029c8:	1c04      	adds	r4, r0, #0
    float index_f = theta * LUT_INV_STEP;   // [0, LUT_SIZE)
 80029ca:	4919      	ldr	r1, [pc, #100]	@ (8002a30 <pre_calc_sin_cos+0x13c>)
 80029cc:	1c20      	adds	r0, r4, #0
 80029ce:	f7fe f81f 	bl	8000a10 <__aeabi_fmul>
 80029d2:	1c07      	adds	r7, r0, #0
    int   index   = (int)index_f;           // floor
 80029d4:	f7fe fbda 	bl	800118c <__aeabi_f2iz>
 80029d8:	0004      	movs	r4, r0
    float frac    = index_f - (float)index; // [0,1)
 80029da:	f7fe fbf7 	bl	80011cc <__aeabi_i2f>
    int next_index = (index + 1) & (LUT_SIZE - 1);
 80029de:	1c63      	adds	r3, r4, #1
 80029e0:	059b      	lsls	r3, r3, #22
    return sin_lut[index] * (1.0f - frac) + sin_lut[next_index] * frac;
 80029e2:	0d1b      	lsrs	r3, r3, #20
 80029e4:	4698      	mov	r8, r3
    float frac    = index_f - (float)index; // [0,1)
 80029e6:	4681      	mov	r9, r0
 80029e8:	1c01      	adds	r1, r0, #0
 80029ea:	1c38      	adds	r0, r7, #0
 80029ec:	f7fe f96a 	bl	8000cc4 <__aeabi_fsub>
    return sin_lut[index] * (1.0f - frac) + sin_lut[next_index] * frac;
 80029f0:	4643      	mov	r3, r8
 80029f2:	58f1      	ldr	r1, [r6, r3]
 80029f4:	f7fe f80c 	bl	8000a10 <__aeabi_fmul>
 80029f8:	4680      	mov	r8, r0
 80029fa:	20fe      	movs	r0, #254	@ 0xfe
 80029fc:	1c39      	adds	r1, r7, #0
 80029fe:	0580      	lsls	r0, r0, #22
 8002a00:	f7fe f960 	bl	8000cc4 <__aeabi_fsub>
 8002a04:	00a4      	lsls	r4, r4, #2
 8002a06:	4649      	mov	r1, r9
 8002a08:	f7fd fc42 	bl	8000290 <__aeabi_fadd>
 8002a0c:	5931      	ldr	r1, [r6, r4]
 8002a0e:	f7fd ffff 	bl	8000a10 <__aeabi_fmul>
 8002a12:	1c01      	adds	r1, r0, #0
 8002a14:	4640      	mov	r0, r8
 8002a16:	f7fd fc3b 	bl	8000290 <__aeabi_fadd>
    *cos_theta = fast_cos(theta);
 8002a1a:	6028      	str	r0, [r5, #0]
}
 8002a1c:	bcf0      	pop	{r4, r5, r6, r7}
 8002a1e:	46bb      	mov	fp, r7
 8002a20:	46b2      	mov	sl, r6
 8002a22:	46a9      	mov	r9, r5
 8002a24:	46a0      	mov	r8, r4
 8002a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a28:	3e22f983 	.word	0x3e22f983
 8002a2c:	40c90fdb 	.word	0x40c90fdb
 8002a30:	4322f983 	.word	0x4322f983
 8002a34:	0800750c 	.word	0x0800750c
 8002a38:	3fc90fdb 	.word	0x3fc90fdb

08002a3c <inverse_park_transform>:
    *id = i_alpha * cos_theta + i_beta * sin_theta;
    *iq = i_beta * cos_theta - i_alpha * sin_theta;
}

// Inverse Park Transform
void inverse_park_transform(float vd, float vq, float sin_theta, float cos_theta, float *valpha, float *vbeta) {
 8002a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3e:	46c6      	mov	lr, r8
 8002a40:	1c0d      	adds	r5, r1, #0
 8002a42:	b500      	push	{lr}
    *valpha = vd * cos_theta - vq * sin_theta;
 8002a44:	1c19      	adds	r1, r3, #0
void inverse_park_transform(float vd, float vq, float sin_theta, float cos_theta, float *valpha, float *vbeta) {
 8002a46:	1c17      	adds	r7, r2, #0
 8002a48:	1c1c      	adds	r4, r3, #0
 8002a4a:	1c06      	adds	r6, r0, #0
    *valpha = vd * cos_theta - vq * sin_theta;
 8002a4c:	f7fd ffe0 	bl	8000a10 <__aeabi_fmul>
 8002a50:	4680      	mov	r8, r0
 8002a52:	1c39      	adds	r1, r7, #0
 8002a54:	1c28      	adds	r0, r5, #0
 8002a56:	f7fd ffdb 	bl	8000a10 <__aeabi_fmul>
 8002a5a:	1c01      	adds	r1, r0, #0
 8002a5c:	4640      	mov	r0, r8
 8002a5e:	f7fe f931 	bl	8000cc4 <__aeabi_fsub>
 8002a62:	9b06      	ldr	r3, [sp, #24]
    *vbeta  = vd * sin_theta + vq * cos_theta;
 8002a64:	1c39      	adds	r1, r7, #0
    *valpha = vd * cos_theta - vq * sin_theta;
 8002a66:	6018      	str	r0, [r3, #0]
    *vbeta  = vd * sin_theta + vq * cos_theta;
 8002a68:	1c30      	adds	r0, r6, #0
 8002a6a:	f7fd ffd1 	bl	8000a10 <__aeabi_fmul>
 8002a6e:	1c29      	adds	r1, r5, #0
 8002a70:	1c06      	adds	r6, r0, #0
 8002a72:	1c20      	adds	r0, r4, #0
 8002a74:	f7fd ffcc 	bl	8000a10 <__aeabi_fmul>
 8002a78:	1c01      	adds	r1, r0, #0
 8002a7a:	1c30      	adds	r0, r6, #0
 8002a7c:	f7fd fc08 	bl	8000290 <__aeabi_fadd>
 8002a80:	9b07      	ldr	r3, [sp, #28]
 8002a82:	6018      	str	r0, [r3, #0]
}
 8002a84:	bc80      	pop	{r7}
 8002a86:	46b8      	mov	r8, r7
 8002a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a8a:	46c0      	nop			@ (mov r8, r8)

08002a8c <svpwm>:
 * @param pwm_v Output duty cycle for phase V
 * @param pwm_w Output duty cycle for phase W
 */
void svpwm(float valpha, float vbeta, float vbus, uint32_t pwm_period,
          uint32_t *pwm_u, uint32_t *pwm_v, uint32_t *pwm_w)
{
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8e:	46de      	mov	lr, fp
 8002a90:	4657      	mov	r7, sl
 8002a92:	464e      	mov	r6, r9
 8002a94:	4645      	mov	r5, r8
 8002a96:	b5e0      	push	{r5, r6, r7, lr}
 8002a98:	1c05      	adds	r5, r0, #0
 8002a9a:	20fe      	movs	r0, #254	@ 0xfe
 8002a9c:	001c      	movs	r4, r3
 8002a9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002aa0:	1c0f      	adds	r7, r1, #0
 8002aa2:	469a      	mov	sl, r3
 8002aa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002aa6:	1c11      	adds	r1, r2, #0
 8002aa8:	4699      	mov	r9, r3
 8002aaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002aac:	0580      	lsls	r0, r0, #22
 8002aae:	4698      	mov	r8, r3
 8002ab0:	f7fd fde0 	bl	8000674 <__aeabi_fdiv>
 8002ab4:	1c06      	adds	r6, r0, #0
    // 1. Normalize voltages by vbus
    float alpha = valpha / vbus;
 8002ab6:	1c01      	adds	r1, r0, #0
 8002ab8:	1c28      	adds	r0, r5, #0
 8002aba:	f7fd ffa9 	bl	8000a10 <__aeabi_fmul>
    float beta = vbeta / vbus;
 8002abe:	1c31      	adds	r1, r6, #0
    float alpha = valpha / vbus;
 8002ac0:	1c05      	adds	r5, r0, #0
    float beta = vbeta / vbus;
 8002ac2:	1c38      	adds	r0, r7, #0
 8002ac4:	f7fd ffa4 	bl	8000a10 <__aeabi_fmul>

    // 2. Sector determination
    uint8_t sector;
    if (beta >= 0.0f) {
        if (alpha >= 0.0f) {
            sector = (ONE_BY_SQRT3 * beta > alpha) ? 2 : 1;  // 1/sqrt(3) ≈ 0.577
 8002ac8:	498a      	ldr	r1, [pc, #552]	@ (8002cf4 <svpwm+0x268>)
    float beta = vbeta / vbus;
 8002aca:	1c06      	adds	r6, r0, #0
            sector = (ONE_BY_SQRT3 * beta > alpha) ? 2 : 1;  // 1/sqrt(3) ≈ 0.577
 8002acc:	f7fd ffa0 	bl	8000a10 <__aeabi_fmul>
 8002ad0:	1c07      	adds	r7, r0, #0

    // 3. Calculate active vector times
    int32_t t1, t2;
    switch(sector) {
        case 1:
            t1 = (int32_t)((alpha - ONE_BY_SQRT3 * beta) * pwm_period);
 8002ad2:	0020      	movs	r0, r4
 8002ad4:	f7fe fbca 	bl	800126c <__aeabi_ui2f>
    if (beta >= 0.0f) {
 8002ad8:	2100      	movs	r1, #0
            t1 = (int32_t)((alpha - ONE_BY_SQRT3 * beta) * pwm_period);
 8002ada:	4683      	mov	fp, r0
    if (beta >= 0.0f) {
 8002adc:	1c30      	adds	r0, r6, #0
 8002ade:	f7fd fbcd 	bl	800027c <__aeabi_fcmpge>
        if (alpha >= 0.0f) {
 8002ae2:	2100      	movs	r1, #0
    if (beta >= 0.0f) {
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d06e      	beq.n	8002bc6 <svpwm+0x13a>
        if (alpha >= 0.0f) {
 8002ae8:	1c28      	adds	r0, r5, #0
 8002aea:	f7fd fbc7 	bl	800027c <__aeabi_fcmpge>
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d040      	beq.n	8002b74 <svpwm+0xe8>
            sector = (ONE_BY_SQRT3 * beta > alpha) ? 2 : 1;  // 1/sqrt(3) ≈ 0.577
 8002af2:	1c39      	adds	r1, r7, #0
 8002af4:	1c28      	adds	r0, r5, #0
 8002af6:	f7fd fba3 	bl	8000240 <__aeabi_fcmplt>
 8002afa:	2800      	cmp	r0, #0
 8002afc:	d100      	bne.n	8002b00 <svpwm+0x74>
 8002afe:	e094      	b.n	8002c2a <svpwm+0x19e>
            *pwm_v = *pwm_u - t1;
            *pwm_w = *pwm_v - t2;
            break;

        case 2:
            t1 = (int32_t)((alpha + ONE_BY_SQRT3 * beta) * pwm_period);
 8002b00:	1c39      	adds	r1, r7, #0
 8002b02:	1c28      	adds	r0, r5, #0
 8002b04:	f7fd fbc4 	bl	8000290 <__aeabi_fadd>
 8002b08:	4659      	mov	r1, fp
 8002b0a:	f7fd ff81 	bl	8000a10 <__aeabi_fmul>
 8002b0e:	f7fe fb3d 	bl	800118c <__aeabi_f2iz>
            t2 = (int32_t)((-alpha + ONE_BY_SQRT3 * beta) * pwm_period);
 8002b12:	1c29      	adds	r1, r5, #0
            t1 = (int32_t)((alpha + ONE_BY_SQRT3 * beta) * pwm_period);
 8002b14:	0006      	movs	r6, r0
            t2 = (int32_t)((-alpha + ONE_BY_SQRT3 * beta) * pwm_period);
 8002b16:	1c38      	adds	r0, r7, #0
 8002b18:	f7fe f8d4 	bl	8000cc4 <__aeabi_fsub>
 8002b1c:	4659      	mov	r1, fp
 8002b1e:	f7fd ff77 	bl	8000a10 <__aeabi_fmul>
 8002b22:	f7fe fb33 	bl	800118c <__aeabi_f2iz>
            *pwm_v = (pwm_period + t1 + t2) / 2;
 8002b26:	464a      	mov	r2, r9
 8002b28:	1833      	adds	r3, r6, r0
 8002b2a:	191b      	adds	r3, r3, r4
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	6013      	str	r3, [r2, #0]
            *pwm_u = *pwm_v - t2;
 8002b30:	1a18      	subs	r0, r3, r0
 8002b32:	4653      	mov	r3, sl
 8002b34:	6018      	str	r0, [r3, #0]
            *pwm_w = *pwm_u - t1;
 8002b36:	4643      	mov	r3, r8
 8002b38:	1b80      	subs	r0, r0, r6
 8002b3a:	6018      	str	r0, [r3, #0]
            *pwm_v = *pwm_w - t1;
            break;
    }

    // 4. Clamp outputs to valid range
    *pwm_u = (*pwm_u > pwm_period) ? pwm_period : *pwm_u;
 8002b3c:	4653      	mov	r3, sl
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	0023      	movs	r3, r4
 8002b42:	4284      	cmp	r4, r0
 8002b44:	d900      	bls.n	8002b48 <svpwm+0xbc>
 8002b46:	0003      	movs	r3, r0
 8002b48:	4652      	mov	r2, sl
 8002b4a:	6013      	str	r3, [r2, #0]
    *pwm_v = (*pwm_v > pwm_period) ? pwm_period : *pwm_v;
 8002b4c:	464b      	mov	r3, r9
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	42a3      	cmp	r3, r4
 8002b52:	d900      	bls.n	8002b56 <svpwm+0xca>
 8002b54:	0023      	movs	r3, r4
 8002b56:	464a      	mov	r2, r9
 8002b58:	6013      	str	r3, [r2, #0]
    *pwm_w = (*pwm_w > pwm_period) ? pwm_period : *pwm_w;
 8002b5a:	4643      	mov	r3, r8
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	42a3      	cmp	r3, r4
 8002b60:	d900      	bls.n	8002b64 <svpwm+0xd8>
 8002b62:	0023      	movs	r3, r4
 8002b64:	4642      	mov	r2, r8
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bcf0      	pop	{r4, r5, r6, r7}
 8002b6a:	46bb      	mov	fp, r7
 8002b6c:	46b2      	mov	sl, r6
 8002b6e:	46a9      	mov	r9, r5
 8002b70:	46a0      	mov	r8, r4
 8002b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            sector = (-ONE_BY_SQRT3 * beta > alpha) ? 3 : 2;
 8002b74:	2380      	movs	r3, #128	@ 0x80
 8002b76:	061b      	lsls	r3, r3, #24
 8002b78:	18f9      	adds	r1, r7, r3
 8002b7a:	1c28      	adds	r0, r5, #0
 8002b7c:	f7fd fb60 	bl	8000240 <__aeabi_fcmplt>
 8002b80:	2800      	cmp	r0, #0
 8002b82:	d0bd      	beq.n	8002b00 <svpwm+0x74>
            t1 = (int32_t)(TWO_BY_SQRT3 * beta * pwm_period);
 8002b84:	495c      	ldr	r1, [pc, #368]	@ (8002cf8 <svpwm+0x26c>)
 8002b86:	4658      	mov	r0, fp
 8002b88:	f7fd ff42 	bl	8000a10 <__aeabi_fmul>
 8002b8c:	1c31      	adds	r1, r6, #0
 8002b8e:	f7fd ff3f 	bl	8000a10 <__aeabi_fmul>
 8002b92:	f7fe fafb 	bl	800118c <__aeabi_f2iz>
            t2 = (int32_t)((-alpha - ONE_BY_SQRT3 * beta) * pwm_period);
 8002b96:	1c39      	adds	r1, r7, #0
            t1 = (int32_t)(TWO_BY_SQRT3 * beta * pwm_period);
 8002b98:	0006      	movs	r6, r0
            t2 = (int32_t)((-alpha - ONE_BY_SQRT3 * beta) * pwm_period);
 8002b9a:	1c28      	adds	r0, r5, #0
 8002b9c:	f7fd fb78 	bl	8000290 <__aeabi_fadd>
 8002ba0:	4659      	mov	r1, fp
 8002ba2:	f7fd ff35 	bl	8000a10 <__aeabi_fmul>
 8002ba6:	2380      	movs	r3, #128	@ 0x80
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	469c      	mov	ip, r3
 8002bac:	4460      	add	r0, ip
 8002bae:	f7fe faed 	bl	800118c <__aeabi_f2iz>
            *pwm_v = (pwm_period + t1 + t2) / 2;
 8002bb2:	464a      	mov	r2, r9
 8002bb4:	1933      	adds	r3, r6, r4
 8002bb6:	181b      	adds	r3, r3, r0
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	6013      	str	r3, [r2, #0]
            *pwm_w = *pwm_v - t1;
 8002bbc:	4642      	mov	r2, r8
 8002bbe:	1b9b      	subs	r3, r3, r6
 8002bc0:	6013      	str	r3, [r2, #0]
            *pwm_u = *pwm_w - t2;
 8002bc2:	1a18      	subs	r0, r3, r0
            break;
 8002bc4:	e7bc      	b.n	8002b40 <svpwm+0xb4>
        if (alpha >= 0.0f) {
 8002bc6:	1c28      	adds	r0, r5, #0
 8002bc8:	f7fd fb58 	bl	800027c <__aeabi_fcmpge>
 8002bcc:	2800      	cmp	r0, #0
 8002bce:	d06d      	beq.n	8002cac <svpwm+0x220>
            sector = (-ONE_BY_SQRT3 * beta > alpha) ? 5 : 6;
 8002bd0:	2380      	movs	r3, #128	@ 0x80
 8002bd2:	061b      	lsls	r3, r3, #24
 8002bd4:	18f9      	adds	r1, r7, r3
 8002bd6:	1c28      	adds	r0, r5, #0
 8002bd8:	f7fd fb32 	bl	8000240 <__aeabi_fcmplt>
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d045      	beq.n	8002c6c <svpwm+0x1e0>
            t1 = (int32_t)((-alpha - ONE_BY_SQRT3 * beta) * pwm_period);
 8002be0:	1c39      	adds	r1, r7, #0
 8002be2:	1c28      	adds	r0, r5, #0
 8002be4:	f7fd fb54 	bl	8000290 <__aeabi_fadd>
 8002be8:	4659      	mov	r1, fp
 8002bea:	f7fd ff11 	bl	8000a10 <__aeabi_fmul>
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	469c      	mov	ip, r3
 8002bf4:	4460      	add	r0, ip
 8002bf6:	f7fe fac9 	bl	800118c <__aeabi_f2iz>
            t2 = (int32_t)((alpha - ONE_BY_SQRT3 * beta) * pwm_period);
 8002bfa:	1c39      	adds	r1, r7, #0
            t1 = (int32_t)((-alpha - ONE_BY_SQRT3 * beta) * pwm_period);
 8002bfc:	0006      	movs	r6, r0
            t2 = (int32_t)((alpha - ONE_BY_SQRT3 * beta) * pwm_period);
 8002bfe:	1c28      	adds	r0, r5, #0
 8002c00:	f7fe f860 	bl	8000cc4 <__aeabi_fsub>
 8002c04:	4659      	mov	r1, fp
 8002c06:	f7fd ff03 	bl	8000a10 <__aeabi_fmul>
 8002c0a:	f7fe fabf 	bl	800118c <__aeabi_f2iz>
            *pwm_w = (pwm_period + t1 + t2) / 2;
 8002c0e:	4642      	mov	r2, r8
 8002c10:	1833      	adds	r3, r6, r0
 8002c12:	191b      	adds	r3, r3, r4
 8002c14:	085b      	lsrs	r3, r3, #1
 8002c16:	6013      	str	r3, [r2, #0]
            *pwm_u = *pwm_w - t1;
 8002c18:	4652      	mov	r2, sl
 8002c1a:	1b9b      	subs	r3, r3, r6
 8002c1c:	6013      	str	r3, [r2, #0]
            *pwm_v = *pwm_u - t2;
 8002c1e:	464a      	mov	r2, r9
 8002c20:	1a1b      	subs	r3, r3, r0
 8002c22:	6013      	str	r3, [r2, #0]
    *pwm_u = (*pwm_u > pwm_period) ? pwm_period : *pwm_u;
 8002c24:	4653      	mov	r3, sl
 8002c26:	6818      	ldr	r0, [r3, #0]
            break;
 8002c28:	e78a      	b.n	8002b40 <svpwm+0xb4>
            t1 = (int32_t)((alpha - ONE_BY_SQRT3 * beta) * pwm_period);
 8002c2a:	1c39      	adds	r1, r7, #0
 8002c2c:	1c28      	adds	r0, r5, #0
 8002c2e:	f7fe f849 	bl	8000cc4 <__aeabi_fsub>
 8002c32:	4659      	mov	r1, fp
 8002c34:	f7fd feec 	bl	8000a10 <__aeabi_fmul>
 8002c38:	f7fe faa8 	bl	800118c <__aeabi_f2iz>
            t2 = (int32_t)(TWO_BY_SQRT3 * beta * pwm_period);
 8002c3c:	492e      	ldr	r1, [pc, #184]	@ (8002cf8 <svpwm+0x26c>)
            t1 = (int32_t)((alpha - ONE_BY_SQRT3 * beta) * pwm_period);
 8002c3e:	0005      	movs	r5, r0
            t2 = (int32_t)(TWO_BY_SQRT3 * beta * pwm_period);
 8002c40:	4658      	mov	r0, fp
 8002c42:	f7fd fee5 	bl	8000a10 <__aeabi_fmul>
 8002c46:	1c31      	adds	r1, r6, #0
 8002c48:	f7fd fee2 	bl	8000a10 <__aeabi_fmul>
 8002c4c:	f7fe fa9e 	bl	800118c <__aeabi_f2iz>
            *pwm_u = (pwm_period + t1 + t2) / 2;
 8002c50:	4652      	mov	r2, sl
 8002c52:	1903      	adds	r3, r0, r4
 8002c54:	195b      	adds	r3, r3, r5
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	6013      	str	r3, [r2, #0]
            *pwm_v = *pwm_u - t1;
 8002c5a:	464a      	mov	r2, r9
 8002c5c:	1b5b      	subs	r3, r3, r5
 8002c5e:	6013      	str	r3, [r2, #0]
            *pwm_w = *pwm_v - t2;
 8002c60:	4642      	mov	r2, r8
 8002c62:	1a1b      	subs	r3, r3, r0
 8002c64:	6013      	str	r3, [r2, #0]
    *pwm_u = (*pwm_u > pwm_period) ? pwm_period : *pwm_u;
 8002c66:	4653      	mov	r3, sl
 8002c68:	6818      	ldr	r0, [r3, #0]
            break;
 8002c6a:	e769      	b.n	8002b40 <svpwm+0xb4>
            t1 = (int32_t)(-TWO_BY_SQRT3 * beta * pwm_period);
 8002c6c:	4923      	ldr	r1, [pc, #140]	@ (8002cfc <svpwm+0x270>)
 8002c6e:	4658      	mov	r0, fp
 8002c70:	f7fd fece 	bl	8000a10 <__aeabi_fmul>
 8002c74:	1c31      	adds	r1, r6, #0
 8002c76:	f7fd fecb 	bl	8000a10 <__aeabi_fmul>
 8002c7a:	f7fe fa87 	bl	800118c <__aeabi_f2iz>
            t2 = (int32_t)((alpha + ONE_BY_SQRT3 * beta) * pwm_period);
 8002c7e:	1c39      	adds	r1, r7, #0
            t1 = (int32_t)(-TWO_BY_SQRT3 * beta * pwm_period);
 8002c80:	0006      	movs	r6, r0
            t2 = (int32_t)((alpha + ONE_BY_SQRT3 * beta) * pwm_period);
 8002c82:	1c28      	adds	r0, r5, #0
 8002c84:	f7fd fb04 	bl	8000290 <__aeabi_fadd>
 8002c88:	4659      	mov	r1, fp
 8002c8a:	f7fd fec1 	bl	8000a10 <__aeabi_fmul>
 8002c8e:	f7fe fa7d 	bl	800118c <__aeabi_f2iz>
            *pwm_u = (pwm_period + t1 + t2) / 2;
 8002c92:	4652      	mov	r2, sl
 8002c94:	1933      	adds	r3, r6, r4
 8002c96:	181b      	adds	r3, r3, r0
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	6013      	str	r3, [r2, #0]
            *pwm_w = *pwm_u - t2;
 8002c9c:	1a18      	subs	r0, r3, r0
 8002c9e:	4643      	mov	r3, r8
 8002ca0:	6018      	str	r0, [r3, #0]
            *pwm_v = *pwm_w - t1;
 8002ca2:	464b      	mov	r3, r9
 8002ca4:	1b80      	subs	r0, r0, r6
 8002ca6:	6018      	str	r0, [r3, #0]
    *pwm_u = (*pwm_u > pwm_period) ? pwm_period : *pwm_u;
 8002ca8:	6810      	ldr	r0, [r2, #0]
            break;
 8002caa:	e749      	b.n	8002b40 <svpwm+0xb4>
            sector = (ONE_BY_SQRT3 * beta > alpha) ? 4 : 5;
 8002cac:	1c39      	adds	r1, r7, #0
 8002cae:	1c28      	adds	r0, r5, #0
 8002cb0:	f7fd fac6 	bl	8000240 <__aeabi_fcmplt>
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d093      	beq.n	8002be0 <svpwm+0x154>
            t1 = (int32_t)((-alpha + ONE_BY_SQRT3 * beta) * pwm_period);
 8002cb8:	1c29      	adds	r1, r5, #0
 8002cba:	1c38      	adds	r0, r7, #0
 8002cbc:	f7fe f802 	bl	8000cc4 <__aeabi_fsub>
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	f7fd fea5 	bl	8000a10 <__aeabi_fmul>
 8002cc6:	f7fe fa61 	bl	800118c <__aeabi_f2iz>
            t2 = (int32_t)(-TWO_BY_SQRT3 * beta * pwm_period);
 8002cca:	490c      	ldr	r1, [pc, #48]	@ (8002cfc <svpwm+0x270>)
            t1 = (int32_t)((-alpha + ONE_BY_SQRT3 * beta) * pwm_period);
 8002ccc:	0005      	movs	r5, r0
            t2 = (int32_t)(-TWO_BY_SQRT3 * beta * pwm_period);
 8002cce:	4658      	mov	r0, fp
 8002cd0:	f7fd fe9e 	bl	8000a10 <__aeabi_fmul>
 8002cd4:	1c31      	adds	r1, r6, #0
 8002cd6:	f7fd fe9b 	bl	8000a10 <__aeabi_fmul>
 8002cda:	f7fe fa57 	bl	800118c <__aeabi_f2iz>
            *pwm_w = (pwm_period + t1 + t2) / 2;
 8002cde:	4642      	mov	r2, r8
 8002ce0:	1903      	adds	r3, r0, r4
 8002ce2:	195b      	adds	r3, r3, r5
 8002ce4:	085b      	lsrs	r3, r3, #1
            *pwm_v = *pwm_w - t2;
 8002ce6:	1a18      	subs	r0, r3, r0
            *pwm_w = (pwm_period + t1 + t2) / 2;
 8002ce8:	6013      	str	r3, [r2, #0]
            *pwm_v = *pwm_w - t2;
 8002cea:	464b      	mov	r3, r9
 8002cec:	6018      	str	r0, [r3, #0]
            *pwm_u = *pwm_v - t1;
 8002cee:	1b40      	subs	r0, r0, r5
            break;
 8002cf0:	e726      	b.n	8002b40 <svpwm+0xb4>
 8002cf2:	46c0      	nop			@ (mov r8, r8)
 8002cf4:	3f13cd3a 	.word	0x3f13cd3a
 8002cf8:	3f93cd3a 	.word	0x3f93cd3a
 8002cfc:	bf93cd3a 	.word	0xbf93cd3a

08002d00 <MA330_Init>:




//attention 20ms minimum apres une ecriture de registre
int MA330_Init(MA330_t *encd, SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin,uint8_t FW){
 8002d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d02:	b085      	sub	sp, #20
 8002d04:	000d      	movs	r5, r1
 8002d06:	0019      	movs	r1, r3
 8002d08:	ab0a      	add	r3, sp, #40	@ 0x28
 8002d0a:	0004      	movs	r4, r0
 8002d0c:	781e      	ldrb	r6, [r3, #0]
 8002d0e:	0010      	movs	r0, r2
    if (encd == NULL || hspi == NULL || cs_port == NULL || cs_pin == 0) {
 8002d10:	2c00      	cmp	r4, #0
 8002d12:	d005      	beq.n	8002d20 <MA330_Init+0x20>
 8002d14:	2d00      	cmp	r5, #0
 8002d16:	d003      	beq.n	8002d20 <MA330_Init+0x20>
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	d001      	beq.n	8002d20 <MA330_Init+0x20>
 8002d1c:	2900      	cmp	r1, #0
 8002d1e:	d102      	bne.n	8002d26 <MA330_Init+0x26>
        return 0;
 8002d20:	2000      	movs	r0, #0
	}
	cs_high(encd);

    }
    return 1;
}
 8002d22:	b005      	add	sp, #20
 8002d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    encd->MA330_cs_port = cs_port;
 8002d26:	6062      	str	r2, [r4, #4]
    encd->MA330_spi = hspi;
 8002d28:	6025      	str	r5, [r4, #0]
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8002d2a:	2201      	movs	r2, #1
    encd->MA330_cs_pin = cs_pin;
 8002d2c:	8121      	strh	r1, [r4, #8]
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8002d2e:	f002 f8fd 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002d32:	2001      	movs	r0, #1
 8002d34:	f001 f940 	bl	8003fb8 <HAL_Delay>
    if(FW>0){
 8002d38:	2e00      	cmp	r6, #0
 8002d3a:	d101      	bne.n	8002d40 <MA330_Init+0x40>
    return 1;
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	e7f0      	b.n	8002d22 <MA330_Init+0x22>
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8002d40:	2200      	movs	r2, #0
 8002d42:	8921      	ldrh	r1, [r4, #8]
 8002d44:	6860      	ldr	r0, [r4, #4]
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8002d46:	27fa      	movs	r7, #250	@ 0xfa
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8002d48:	f002 f8f0 	bl	8004f2c <HAL_GPIO_WritePin>
    uint8_t send_buffer[]={0x4E,0x00};
 8002d4c:	234e      	movs	r3, #78	@ 0x4e
 8002d4e:	466a      	mov	r2, sp
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8002d50:	00bf      	lsls	r7, r7, #2
    uint8_t send_buffer[]={0x4E,0x00};
 8002d52:	8193      	strh	r3, [r2, #12]
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8002d54:	6820      	ldr	r0, [r4, #0]
 8002d56:	aa02      	add	r2, sp, #8
 8002d58:	a903      	add	r1, sp, #12
 8002d5a:	9700      	str	r7, [sp, #0]
 8002d5c:	3b4c      	subs	r3, #76	@ 0x4c
 8002d5e:	f003 f86d 	bl	8005e3c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8002d62:	2201      	movs	r2, #1
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8002d64:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8002d66:	8921      	ldrh	r1, [r4, #8]
 8002d68:	6860      	ldr	r0, [r4, #4]
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8002d6a:	2d00      	cmp	r5, #0
 8002d6c:	d155      	bne.n	8002e1a <MA330_Init+0x11a>
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8002d6e:	f002 f8dd 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002d72:	2001      	movs	r0, #1
 8002d74:	f001 f920 	bl	8003fb8 <HAL_Delay>
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	8921      	ldrh	r1, [r4, #8]
 8002d7c:	6860      	ldr	r0, [r4, #4]
 8002d7e:	f002 f8d5 	bl	8004f2c <HAL_GPIO_WritePin>
	send_buffer[0]=0x00;
 8002d82:	466b      	mov	r3, sp
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8002d84:	6820      	ldr	r0, [r4, #0]
	send_buffer[0]=0x00;
 8002d86:	819d      	strh	r5, [r3, #12]
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8002d88:	a903      	add	r1, sp, #12
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	9700      	str	r7, [sp, #0]
 8002d8e:	aa02      	add	r2, sp, #8
 8002d90:	f003 f854 	bl	8005e3c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8002d94:	8921      	ldrh	r1, [r4, #8]
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d13d      	bne.n	8002e16 <MA330_Init+0x116>
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	6860      	ldr	r0, [r4, #4]
 8002d9e:	f002 f8c5 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002da2:	2001      	movs	r0, #1
 8002da4:	f001 f908 	bl	8003fb8 <HAL_Delay>
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8002da8:	2200      	movs	r2, #0
 8002daa:	8921      	ldrh	r1, [r4, #8]
 8002dac:	6860      	ldr	r0, [r4, #4]
 8002dae:	f002 f8bd 	bl	8004f2c <HAL_GPIO_WritePin>
	send_buffer[0]=0x8E;
 8002db2:	466a      	mov	r2, sp
 8002db4:	238e      	movs	r3, #142	@ 0x8e
	send_buffer[1]=FW;
 8002db6:	7356      	strb	r6, [r2, #13]
	send_buffer[0]=0x8E;
 8002db8:	7313      	strb	r3, [r2, #12]
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8002dba:	6820      	ldr	r0, [r4, #0]
 8002dbc:	aa02      	add	r2, sp, #8
 8002dbe:	a903      	add	r1, sp, #12
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	9700      	str	r7, [sp, #0]
 8002dc4:	f003 f83a 	bl	8005e3c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8002dc8:	2201      	movs	r2, #1
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8002dca:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8002dcc:	8921      	ldrh	r1, [r4, #8]
 8002dce:	6860      	ldr	r0, [r4, #4]
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8002dd0:	2d00      	cmp	r5, #0
 8002dd2:	d122      	bne.n	8002e1a <MA330_Init+0x11a>
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8002dd4:	f002 f8aa 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_Delay(25);
 8002dd8:	2019      	movs	r0, #25
 8002dda:	f001 f8ed 	bl	8003fb8 <HAL_Delay>
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8002dde:	2200      	movs	r2, #0
 8002de0:	8921      	ldrh	r1, [r4, #8]
 8002de2:	6860      	ldr	r0, [r4, #4]
 8002de4:	f002 f8a2 	bl	8004f2c <HAL_GPIO_WritePin>
	send_buffer[0]=0x00;
 8002de8:	466b      	mov	r3, sp
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8002dea:	6820      	ldr	r0, [r4, #0]
	send_buffer[0]=0x00;
 8002dec:	819d      	strh	r5, [r3, #12]
	if (HAL_SPI_TransmitReceive(encd->MA330_spi, send_buffer, receive_buffer, 2, 1000) != HAL_OK) {
 8002dee:	aa02      	add	r2, sp, #8
 8002df0:	2302      	movs	r3, #2
 8002df2:	9700      	str	r7, [sp, #0]
 8002df4:	a903      	add	r1, sp, #12
 8002df6:	f003 f821 	bl	8005e3c <HAL_SPI_TransmitReceive>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	d10a      	bne.n	8002e14 <MA330_Init+0x114>
	if(receive_buffer[0]!=FW){
 8002dfe:	466b      	mov	r3, sp
 8002e00:	7a1b      	ldrb	r3, [r3, #8]
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8002e02:	2201      	movs	r2, #1
 8002e04:	6860      	ldr	r0, [r4, #4]
 8002e06:	8921      	ldrh	r1, [r4, #8]
	if(receive_buffer[0]!=FW){
 8002e08:	42b3      	cmp	r3, r6
 8002e0a:	d106      	bne.n	8002e1a <MA330_Init+0x11a>
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8002e0c:	f002 f88e 	bl	8004f2c <HAL_GPIO_WritePin>
    return 1;
 8002e10:	2001      	movs	r0, #1
 8002e12:	e786      	b.n	8002d22 <MA330_Init+0x22>
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8002e14:	8921      	ldrh	r1, [r4, #8]
 8002e16:	2201      	movs	r2, #1
 8002e18:	6860      	ldr	r0, [r4, #4]
 8002e1a:	f002 f887 	bl	8004f2c <HAL_GPIO_WritePin>
        return 0;
 8002e1e:	e77f      	b.n	8002d20 <MA330_Init+0x20>

08002e20 <MA330_start>:

//14 bit de donnee utile
int MA330_start(MA330_t *encd) {
    uint8_t dummy[2];
    dummy[0]=0x00;
 8002e20:	2300      	movs	r3, #0
int MA330_start(MA330_t *encd) {
 8002e22:	b530      	push	{r4, r5, lr}
 8002e24:	0004      	movs	r4, r0
 8002e26:	b083      	sub	sp, #12
    dummy[0]=0x00;
 8002e28:	ad01      	add	r5, sp, #4
 8002e2a:	802b      	strh	r3, [r5, #0]
    HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_RESET);
 8002e2c:	8901      	ldrh	r1, [r0, #8]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	6840      	ldr	r0, [r0, #4]
 8002e32:	f002 f87b 	bl	8004f2c <HAL_GPIO_WritePin>
    dummy[1]=0x00;

	cs_low(encd);
	if (HAL_SPI_TransmitReceive_DMA(encd->MA330_spi, (uint8_t*)dummy, encd->spi_rx_buffer, 2) != HAL_OK) {
 8002e36:	0022      	movs	r2, r4
 8002e38:	2302      	movs	r3, #2
 8002e3a:	0029      	movs	r1, r5
 8002e3c:	6820      	ldr	r0, [r4, #0]
 8002e3e:	320a      	adds	r2, #10
 8002e40:	f003 f984 	bl	800614c <HAL_SPI_TransmitReceive_DMA>
 8002e44:	4243      	negs	r3, r0
 8002e46:	4158      	adcs	r0, r3
        return 0;
    }

	return 1;
}
 8002e48:	b003      	add	sp, #12
 8002e4a:	bd30      	pop	{r4, r5, pc}

08002e4c <MA330_get_degree>:


float MA330_get_degree(MA330_t *encd) {
 8002e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4e:	46c6      	mov	lr, r8
 8002e50:	0004      	movs	r4, r0
 8002e52:	b500      	push	{lr}
	HAL_GPIO_WritePin(encd->MA330_cs_port, encd->MA330_cs_pin, GPIO_PIN_SET);
 8002e54:	2201      	movs	r2, #1
 8002e56:	8901      	ldrh	r1, [r0, #8]
 8002e58:	6840      	ldr	r0, [r0, #4]
 8002e5a:	f002 f867 	bl	8004f2c <HAL_GPIO_WritePin>
	cs_high(encd);

    const uint16_t raw_data =(uint16_t)((encd->spi_rx_buffer[0] << 8) | encd->spi_rx_buffer[1]);

    const float angle_raw = (float)((raw_data >> 2) & 0x3FFF) * ANGLE_SCALE_FACTOR;
 8002e5e:	8960      	ldrh	r0, [r4, #10]
 8002e60:	ba40      	rev16	r0, r0
 8002e62:	b280      	uxth	r0, r0
 8002e64:	0880      	lsrs	r0, r0, #2
 8002e66:	f7fe f9b1 	bl	80011cc <__aeabi_i2f>
 8002e6a:	4938      	ldr	r1, [pc, #224]	@ (8002f4c <MA330_get_degree+0x100>)
 8002e6c:	f7fd fdd0 	bl	8000a10 <__aeabi_fmul>



    float angle_diff = angle_raw - encd->prev_raw_angle;
 8002e70:	6961      	ldr	r1, [r4, #20]
    const float angle_raw = (float)((raw_data >> 2) & 0x3FFF) * ANGLE_SCALE_FACTOR;
 8002e72:	1c06      	adds	r6, r0, #0
    float angle_diff = angle_raw - encd->prev_raw_angle;
 8002e74:	f7fd ff26 	bl	8000cc4 <__aeabi_fsub>
    angle_diff -= 360.0f * floorf((angle_diff + 180.0f) * INV_360);//normalisation entre -180 et 180
 8002e78:	4935      	ldr	r1, [pc, #212]	@ (8002f50 <MA330_get_degree+0x104>)
    float angle_diff = angle_raw - encd->prev_raw_angle;
 8002e7a:	1c05      	adds	r5, r0, #0
    angle_diff -= 360.0f * floorf((angle_diff + 180.0f) * INV_360);//normalisation entre -180 et 180
 8002e7c:	f7fd fa08 	bl	8000290 <__aeabi_fadd>
 8002e80:	4934      	ldr	r1, [pc, #208]	@ (8002f54 <MA330_get_degree+0x108>)
 8002e82:	f7fd fdc5 	bl	8000a10 <__aeabi_fmul>
 8002e86:	f004 fa95 	bl	80073b4 <floorf>
 8002e8a:	4933      	ldr	r1, [pc, #204]	@ (8002f58 <MA330_get_degree+0x10c>)
 8002e8c:	f7fd fdc0 	bl	8000a10 <__aeabi_fmul>
 8002e90:	1c01      	adds	r1, r0, #0
 8002e92:	1c28      	adds	r0, r5, #0
 8002e94:	f7fd ff16 	bl	8000cc4 <__aeabi_fsub>

    if (fabsf(angle_diff) > MAX_ANGLE_JUMP_DEG) {
 8002e98:	0040      	lsls	r0, r0, #1
 8002e9a:	4930      	ldr	r1, [pc, #192]	@ (8002f5c <MA330_get_degree+0x110>)
 8002e9c:	0840      	lsrs	r0, r0, #1
 8002e9e:	f7fd f9e3 	bl	8000268 <__aeabi_fcmpgt>
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d13b      	bne.n	8002f1e <MA330_get_degree+0xd2>
 8002ea6:	68e3      	ldr	r3, [r4, #12]
 8002ea8:	4698      	mov	r8, r3
        if (++encd->spike_counter < SPIKE_REJECT_COUNT) {
            return encd->angle_filtered;
        }
        encd->spike_counter = 0;
 8002eaa:	2300      	movs	r3, #0
    }

    encd->prev_raw_angle = angle_raw;

    // Filter IIR dengan wrap-around
    float filtered_diff = angle_raw - encd->angle_filtered;
 8002eac:	4641      	mov	r1, r8
        encd->spike_counter = 0;
 8002eae:	7623      	strb	r3, [r4, #24]
    encd->prev_raw_angle = angle_raw;
 8002eb0:	6166      	str	r6, [r4, #20]
    float filtered_diff = angle_raw - encd->angle_filtered;
 8002eb2:	1c30      	adds	r0, r6, #0
 8002eb4:	f7fd ff06 	bl	8000cc4 <__aeabi_fsub>
    filtered_diff -= 360.0f * floorf((filtered_diff + 180.0f) * INV_360);
 8002eb8:	4925      	ldr	r1, [pc, #148]	@ (8002f50 <MA330_get_degree+0x104>)
    float filtered_diff = angle_raw - encd->angle_filtered;
 8002eba:	1c05      	adds	r5, r0, #0
    filtered_diff -= 360.0f * floorf((filtered_diff + 180.0f) * INV_360);
 8002ebc:	f7fd f9e8 	bl	8000290 <__aeabi_fadd>
 8002ec0:	4924      	ldr	r1, [pc, #144]	@ (8002f54 <MA330_get_degree+0x108>)
 8002ec2:	f7fd fda5 	bl	8000a10 <__aeabi_fmul>
 8002ec6:	f004 fa75 	bl	80073b4 <floorf>
 8002eca:	4923      	ldr	r1, [pc, #140]	@ (8002f58 <MA330_get_degree+0x10c>)
 8002ecc:	f7fd fda0 	bl	8000a10 <__aeabi_fmul>
 8002ed0:	1c01      	adds	r1, r0, #0
 8002ed2:	1c28      	adds	r0, r5, #0
 8002ed4:	f7fd fef6 	bl	8000cc4 <__aeabi_fsub>
    encd->angle_filtered += ANGLE_FILTER_ALPHA * filtered_diff;
 8002ed8:	f7ff fc24 	bl	8002724 <__aeabi_f2d>
 8002edc:	4a20      	ldr	r2, [pc, #128]	@ (8002f60 <MA330_get_degree+0x114>)
 8002ede:	4b21      	ldr	r3, [pc, #132]	@ (8002f64 <MA330_get_degree+0x118>)
 8002ee0:	f7ff f8e8 	bl	80020b4 <__aeabi_dmul>
 8002ee4:	0006      	movs	r6, r0
 8002ee6:	4640      	mov	r0, r8
 8002ee8:	000f      	movs	r7, r1
 8002eea:	f7ff fc1b 	bl	8002724 <__aeabi_f2d>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	000b      	movs	r3, r1
 8002ef2:	0030      	movs	r0, r6
 8002ef4:	0039      	movs	r1, r7
 8002ef6:	f7fe f9ff 	bl	80012f8 <__aeabi_dadd>
 8002efa:	f7ff fc5b 	bl	80027b4 <__aeabi_d2f>

    if (encd->angle_filtered >= 360.0f)
 8002efe:	4916      	ldr	r1, [pc, #88]	@ (8002f58 <MA330_get_degree+0x10c>)
    encd->angle_filtered += ANGLE_FILTER_ALPHA * filtered_diff;
 8002f00:	1c05      	adds	r5, r0, #0
    if (encd->angle_filtered >= 360.0f)
 8002f02:	f7fd f9bb 	bl	800027c <__aeabi_fcmpge>
 8002f06:	2800      	cmp	r0, #0
 8002f08:	d013      	beq.n	8002f32 <MA330_get_degree+0xe6>
        encd->angle_filtered -= 360.0f;
 8002f0a:	1c28      	adds	r0, r5, #0
 8002f0c:	4912      	ldr	r1, [pc, #72]	@ (8002f58 <MA330_get_degree+0x10c>)
 8002f0e:	f7fd fed9 	bl	8000cc4 <__aeabi_fsub>
 8002f12:	1c05      	adds	r5, r0, #0
 8002f14:	60e5      	str	r5, [r4, #12]
    else if (encd->angle_filtered < 0.0f)
        encd->angle_filtered += 360.0f;

    return encd->angle_filtered;
}
 8002f16:	1c28      	adds	r0, r5, #0
 8002f18:	bc80      	pop	{r7}
 8002f1a:	46b8      	mov	r8, r7
 8002f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (++encd->spike_counter < SPIKE_REJECT_COUNT) {
 8002f1e:	7e23      	ldrb	r3, [r4, #24]
            return encd->angle_filtered;
 8002f20:	68e2      	ldr	r2, [r4, #12]
        if (++encd->spike_counter < SPIKE_REJECT_COUNT) {
 8002f22:	3301      	adds	r3, #1
 8002f24:	b2db      	uxtb	r3, r3
            return encd->angle_filtered;
 8002f26:	4690      	mov	r8, r2
        if (++encd->spike_counter < SPIKE_REJECT_COUNT) {
 8002f28:	7623      	strb	r3, [r4, #24]
            return encd->angle_filtered;
 8002f2a:	1c15      	adds	r5, r2, #0
        if (++encd->spike_counter < SPIKE_REJECT_COUNT) {
 8002f2c:	2b09      	cmp	r3, #9
 8002f2e:	d8bc      	bhi.n	8002eaa <MA330_get_degree+0x5e>
 8002f30:	e7f1      	b.n	8002f16 <MA330_get_degree+0xca>
    else if (encd->angle_filtered < 0.0f)
 8002f32:	2100      	movs	r1, #0
 8002f34:	1c28      	adds	r0, r5, #0
 8002f36:	f7fd f983 	bl	8000240 <__aeabi_fcmplt>
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	d0ea      	beq.n	8002f14 <MA330_get_degree+0xc8>
        encd->angle_filtered += 360.0f;
 8002f3e:	1c28      	adds	r0, r5, #0
 8002f40:	4905      	ldr	r1, [pc, #20]	@ (8002f58 <MA330_get_degree+0x10c>)
 8002f42:	f7fd f9a5 	bl	8000290 <__aeabi_fadd>
 8002f46:	1c05      	adds	r5, r0, #0
        encd->angle_filtered -= 360.0f;
 8002f48:	60e5      	str	r5, [r4, #12]
    return encd->angle_filtered;
 8002f4a:	e7e4      	b.n	8002f16 <MA330_get_degree+0xca>
 8002f4c:	3cb40000 	.word	0x3cb40000
 8002f50:	43340000 	.word	0x43340000
 8002f54:	3b360b61 	.word	0x3b360b61
 8002f58:	43b40000 	.word	0x43b40000
 8002f5c:	41a00000 	.word	0x41a00000
 8002f60:	9999999a 	.word	0x9999999a
 8002f64:	3fc99999 	.word	0x3fc99999

08002f68 <MA330_get_actual_degree>:
    encd->filtered_rpm = filtered;

    return encd->filtered_rpm;
}

float MA330_get_actual_degree(MA330_t *encd) {
 8002f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const float m_current_angle = encd->angle_filtered;
 8002f6a:	68c7      	ldr	r7, [r0, #12]
	float angle_dif = (m_current_angle - encd->output_prev_angle);
 8002f6c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
float MA330_get_actual_degree(MA330_t *encd) {
 8002f6e:	0006      	movs	r6, r0
	float angle_dif = (m_current_angle - encd->output_prev_angle);
 8002f70:	1c38      	adds	r0, r7, #0
 8002f72:	f7fd fea7 	bl	8000cc4 <__aeabi_fsub>

	if (angle_dif< -180) {
 8002f76:	4925      	ldr	r1, [pc, #148]	@ (800300c <MA330_get_actual_degree+0xa4>)
		encd->output_angle_ovf++;
 8002f78:	6b74      	ldr	r4, [r6, #52]	@ 0x34
	float angle_dif = (m_current_angle - encd->output_prev_angle);
 8002f7a:	1c05      	adds	r5, r0, #0
	if (angle_dif< -180) {
 8002f7c:	f7fd f960 	bl	8000240 <__aeabi_fcmplt>
 8002f80:	2800      	cmp	r0, #0
 8002f82:	d034      	beq.n	8002fee <MA330_get_actual_degree+0x86>
		encd->output_angle_ovf++;
 8002f84:	21fe      	movs	r1, #254	@ 0xfe
 8002f86:	1c20      	adds	r0, r4, #0
 8002f88:	0589      	lsls	r1, r1, #22
 8002f8a:	f7fd f981 	bl	8000290 <__aeabi_fadd>
 8002f8e:	1c04      	adds	r4, r0, #0
 8002f90:	6370      	str	r0, [r6, #52]	@ 0x34
	}
	else if (angle_dif> 180) {
		encd->output_angle_ovf--;
	}
	float out_deg = (m_current_angle + encd->output_angle_ovf * 360.0);
 8002f92:	1c20      	adds	r0, r4, #0
 8002f94:	f7ff fbc6 	bl	8002724 <__aeabi_f2d>
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <MA330_get_actual_degree+0xa8>)
 8002f9c:	f7ff f88a 	bl	80020b4 <__aeabi_dmul>
 8002fa0:	0004      	movs	r4, r0
 8002fa2:	1c38      	adds	r0, r7, #0
 8002fa4:	000d      	movs	r5, r1
 8002fa6:	f7ff fbbd 	bl	8002724 <__aeabi_f2d>
 8002faa:	0002      	movs	r2, r0
 8002fac:	000b      	movs	r3, r1
 8002fae:	0020      	movs	r0, r4
 8002fb0:	0029      	movs	r1, r5
 8002fb2:	f7fe f9a1 	bl	80012f8 <__aeabi_dadd>
 8002fb6:	f7ff fbfd 	bl	80027b4 <__aeabi_d2f>
    encd->output_angle_filtered = (1.0f - ACTUAL_ANGLE_FILTER_ALPHA) * encd->output_angle_filtered + ACTUAL_ANGLE_FILTER_ALPHA * out_deg;
 8002fba:	f7ff fbb3 	bl	8002724 <__aeabi_f2d>
 8002fbe:	4a15      	ldr	r2, [pc, #84]	@ (8003014 <MA330_get_actual_degree+0xac>)
 8002fc0:	4b15      	ldr	r3, [pc, #84]	@ (8003018 <MA330_get_actual_degree+0xb0>)
 8002fc2:	f7ff f877 	bl	80020b4 <__aeabi_dmul>
 8002fc6:	0004      	movs	r4, r0
 8002fc8:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 8002fca:	000d      	movs	r5, r1
 8002fcc:	f7ff fbaa 	bl	8002724 <__aeabi_f2d>
 8002fd0:	4a12      	ldr	r2, [pc, #72]	@ (800301c <MA330_get_actual_degree+0xb4>)
 8002fd2:	4b13      	ldr	r3, [pc, #76]	@ (8003020 <MA330_get_actual_degree+0xb8>)
 8002fd4:	f7ff f86e 	bl	80020b4 <__aeabi_dmul>
 8002fd8:	0002      	movs	r2, r0
 8002fda:	000b      	movs	r3, r1
 8002fdc:	0020      	movs	r0, r4
 8002fde:	0029      	movs	r1, r5
 8002fe0:	f7fe f98a 	bl	80012f8 <__aeabi_dadd>
 8002fe4:	f7ff fbe6 	bl	80027b4 <__aeabi_d2f>
	encd->output_prev_angle = m_current_angle;
 8002fe8:	6337      	str	r7, [r6, #48]	@ 0x30
    encd->output_angle_filtered = (1.0f - ACTUAL_ANGLE_FILTER_ALPHA) * encd->output_angle_filtered + ACTUAL_ANGLE_FILTER_ALPHA * out_deg;
 8002fea:	63b0      	str	r0, [r6, #56]	@ 0x38

	// return out_deg;
    return encd->output_angle_filtered;
}
 8002fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (angle_dif> 180) {
 8002fee:	490d      	ldr	r1, [pc, #52]	@ (8003024 <MA330_get_actual_degree+0xbc>)
 8002ff0:	1c28      	adds	r0, r5, #0
 8002ff2:	f7fd f939 	bl	8000268 <__aeabi_fcmpgt>
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	d0cb      	beq.n	8002f92 <MA330_get_actual_degree+0x2a>
		encd->output_angle_ovf--;
 8002ffa:	21fe      	movs	r1, #254	@ 0xfe
 8002ffc:	1c20      	adds	r0, r4, #0
 8002ffe:	0589      	lsls	r1, r1, #22
 8003000:	f7fd fe60 	bl	8000cc4 <__aeabi_fsub>
 8003004:	1c04      	adds	r4, r0, #0
 8003006:	6370      	str	r0, [r6, #52]	@ 0x34
 8003008:	e7c3      	b.n	8002f92 <MA330_get_actual_degree+0x2a>
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	c3340000 	.word	0xc3340000
 8003010:	40768000 	.word	0x40768000
 8003014:	33333333 	.word	0x33333333
 8003018:	3fd33333 	.word	0x3fd33333
 800301c:	66666666 	.word	0x66666666
 8003020:	3fe66666 	.word	0x3fe66666
 8003024:	43340000 	.word	0x43340000

08003028 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003028:	b510      	push	{r4, lr}
 800302a:	b084      	sub	sp, #16

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800302c:	220c      	movs	r2, #12
 800302e:	2100      	movs	r1, #0
 8003030:	a801      	add	r0, sp, #4
 8003032:	f004 f993 	bl	800735c <memset>
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003036:	2280      	movs	r2, #128	@ 0x80
  hadc1.Instance = ADC1;
 8003038:	4c37      	ldr	r4, [pc, #220]	@ (8003118 <MX_ADC1_Init+0xf0>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800303a:	0392      	lsls	r2, r2, #14
 800303c:	6122      	str	r2, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800303e:	2208      	movs	r2, #8
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 5;
 8003040:	2105      	movs	r1, #5
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003042:	6162      	str	r2, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003044:	2200      	movs	r2, #0
  hadc1.Init.NbrOfConversion = 5;
 8003046:	61e1      	str	r1, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003048:	311b      	adds	r1, #27
 800304a:	5462      	strb	r2, [r4, r1]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 800304c:	2180      	movs	r1, #128	@ 0x80
 800304e:	00c9      	lsls	r1, r1, #3
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003050:	2001      	movs	r0, #1
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8003052:	6261      	str	r1, [r4, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003054:	62a1      	str	r1, [r4, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003056:	212c      	movs	r1, #44	@ 0x2c
  hadc1.Instance = ADC1;
 8003058:	4b30      	ldr	r3, [pc, #192]	@ (800311c <MX_ADC1_Init+0xf4>)
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800305a:	5460      	strb	r0, [r4, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800305c:	2180      	movs	r1, #128	@ 0x80
  hadc1.Instance = ADC1;
 800305e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003060:	2380      	movs	r3, #128	@ 0x80
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003062:	0149      	lsls	r1, r1, #5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003064:	05db      	lsls	r3, r3, #23
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003066:	6321      	str	r1, [r4, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 8003068:	2102      	movs	r1, #2
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800306a:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800306c:	2300      	movs	r3, #0
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 800306e:	6361      	str	r1, [r4, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.OversamplingMode = DISABLE;
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003070:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 8003072:	313a      	adds	r1, #58	@ 0x3a
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003074:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003076:	60e3      	str	r3, [r4, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003078:	8323      	strh	r3, [r4, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800307a:	76a2      	strb	r2, [r4, #26]
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800307c:	63a3      	str	r3, [r4, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800307e:	5462      	strb	r2, [r4, r1]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003080:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003082:	f000 ffab 	bl	8003fdc <HAL_ADC_Init>
 8003086:	2800      	cmp	r0, #0
 8003088:	d134      	bne.n	80030f4 <MX_ADC1_Init+0xcc>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800308a:	4b25      	ldr	r3, [pc, #148]	@ (8003120 <MX_ADC1_Init+0xf8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800308c:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_6;
 800308e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003090:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003092:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003094:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003096:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003098:	f001 f9c8 	bl	800442c <HAL_ADC_ConfigChannel>
 800309c:	2800      	cmp	r0, #0
 800309e:	d138      	bne.n	8003112 <MX_ADC1_Init+0xea>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80030a0:	4b20      	ldr	r3, [pc, #128]	@ (8003124 <MX_ADC1_Init+0xfc>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030a2:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_7;
 80030a4:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80030a6:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030a8:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80030aa:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030ac:	f001 f9be 	bl	800442c <HAL_ADC_ConfigChannel>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d12b      	bne.n	800310c <MX_ADC1_Init+0xe4>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80030b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003128 <MX_ADC1_Init+0x100>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030b6:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 80030b8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80030ba:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030bc:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80030be:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030c0:	f001 f9b4 	bl	800442c <HAL_ADC_ConfigChannel>
 80030c4:	2800      	cmp	r0, #0
 80030c6:	d11e      	bne.n	8003106 <MX_ADC1_Init+0xde>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80030c8:	4b18      	ldr	r3, [pc, #96]	@ (800312c <MX_ADC1_Init+0x104>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030ca:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 80030cc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80030ce:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030d0:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80030d2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030d4:	f001 f9aa 	bl	800442c <HAL_ADC_ConfigChannel>
 80030d8:	2800      	cmp	r0, #0
 80030da:	d111      	bne.n	8003100 <MX_ADC1_Init+0xd8>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80030dc:	4b14      	ldr	r3, [pc, #80]	@ (8003130 <MX_ADC1_Init+0x108>)
  sConfig.Rank = ADC_REGULAR_RANK_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030de:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80030e0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80030e2:	2310      	movs	r3, #16
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030e4:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80030e6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030e8:	f001 f9a0 	bl	800442c <HAL_ADC_ConfigChannel>
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d104      	bne.n	80030fa <MX_ADC1_Init+0xd2>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80030f0:	b004      	add	sp, #16
 80030f2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80030f4:	f000 fb50 	bl	8003798 <Error_Handler>
 80030f8:	e7c7      	b.n	800308a <MX_ADC1_Init+0x62>
    Error_Handler();
 80030fa:	f000 fb4d 	bl	8003798 <Error_Handler>
}
 80030fe:	e7f7      	b.n	80030f0 <MX_ADC1_Init+0xc8>
    Error_Handler();
 8003100:	f000 fb4a 	bl	8003798 <Error_Handler>
 8003104:	e7ea      	b.n	80030dc <MX_ADC1_Init+0xb4>
    Error_Handler();
 8003106:	f000 fb47 	bl	8003798 <Error_Handler>
 800310a:	e7dd      	b.n	80030c8 <MX_ADC1_Init+0xa0>
    Error_Handler();
 800310c:	f000 fb44 	bl	8003798 <Error_Handler>
 8003110:	e7d0      	b.n	80030b4 <MX_ADC1_Init+0x8c>
    Error_Handler();
 8003112:	f000 fb41 	bl	8003798 <Error_Handler>
 8003116:	e7c3      	b.n	80030a0 <MX_ADC1_Init+0x78>
 8003118:	20000084 	.word	0x20000084
 800311c:	40012400 	.word	0x40012400
 8003120:	18000040 	.word	0x18000040
 8003124:	1c000080 	.word	0x1c000080
 8003128:	24000200 	.word	0x24000200
 800312c:	14000020 	.word	0x14000020
 8003130:	b4002000 	.word	0xb4002000

08003134 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003134:	b570      	push	{r4, r5, r6, lr}
 8003136:	0004      	movs	r4, r0
 8003138:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313a:	2214      	movs	r2, #20
 800313c:	2100      	movs	r1, #0
 800313e:	a804      	add	r0, sp, #16
 8003140:	f004 f90c 	bl	800735c <memset>
  if(adcHandle->Instance==ADC1)
 8003144:	4b2b      	ldr	r3, [pc, #172]	@ (80031f4 <HAL_ADC_MspInit+0xc0>)
 8003146:	6822      	ldr	r2, [r4, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800314c:	b00a      	add	sp, #40	@ 0x28
 800314e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 8003150:	2180      	movs	r1, #128	@ 0x80
 8003152:	4b29      	ldr	r3, [pc, #164]	@ (80031f8 <HAL_ADC_MspInit+0xc4>)
 8003154:	0349      	lsls	r1, r1, #13
 8003156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003158:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 800315a:	430a      	orrs	r2, r1
 800315c:	641a      	str	r2, [r3, #64]	@ 0x40
 800315e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003160:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC_CLK_ENABLE();
 8003162:	400a      	ands	r2, r1
 8003164:	9201      	str	r2, [sp, #4]
 8003166:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003168:	2201      	movs	r2, #1
 800316a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316e:	4311      	orrs	r1, r2
 8003170:	6359      	str	r1, [r3, #52]	@ 0x34
 8003172:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003174:	400a      	ands	r2, r1
 8003176:	9202      	str	r2, [sp, #8]
 8003178:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317a:	2202      	movs	r2, #2
 800317c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800317e:	4311      	orrs	r1, r2
 8003180:	6359      	str	r1, [r3, #52]	@ 0x34
 8003182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003184:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003186:	401a      	ands	r2, r3
 8003188:	9203      	str	r2, [sp, #12]
 800318a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800318c:	22e0      	movs	r2, #224	@ 0xe0
 800318e:	2303      	movs	r3, #3
 8003190:	9204      	str	r2, [sp, #16]
 8003192:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003194:	f001 fd1a 	bl	8004bcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003198:	2303      	movs	r3, #3
 800319a:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800319c:	4817      	ldr	r0, [pc, #92]	@ (80031fc <HAL_ADC_MspInit+0xc8>)
 800319e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80031a0:	9204      	str	r2, [sp, #16]
 80031a2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a6:	f001 fd11 	bl	8004bcc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80031aa:	4d15      	ldr	r5, [pc, #84]	@ (8003200 <HAL_ADC_MspInit+0xcc>)
 80031ac:	4b15      	ldr	r3, [pc, #84]	@ (8003204 <HAL_ADC_MspInit+0xd0>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031ae:	0028      	movs	r0, r5
    hdma_adc1.Instance = DMA1_Channel1;
 80031b0:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80031b2:	2305      	movs	r3, #5
 80031b4:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031b6:	337b      	adds	r3, #123	@ 0x7b
 80031b8:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031ba:	3380      	adds	r3, #128	@ 0x80
 80031bc:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031be:	2380      	movs	r3, #128	@ 0x80
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031c4:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031c6:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c8:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031ca:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031cc:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031ce:	f001 fb87 	bl	80048e0 <HAL_DMA_Init>
 80031d2:	2800      	cmp	r0, #0
 80031d4:	d10a      	bne.n	80031ec <HAL_ADC_MspInit+0xb8>
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2101      	movs	r1, #1
 80031da:	200c      	movs	r0, #12
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80031dc:	6525      	str	r5, [r4, #80]	@ 0x50
 80031de:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 80031e0:	f001 fb2e 	bl	8004840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80031e4:	200c      	movs	r0, #12
 80031e6:	f001 fb55 	bl	8004894 <HAL_NVIC_EnableIRQ>
}
 80031ea:	e7af      	b.n	800314c <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80031ec:	f000 fad4 	bl	8003798 <Error_Handler>
 80031f0:	e7f1      	b.n	80031d6 <HAL_ADC_MspInit+0xa2>
 80031f2:	46c0      	nop			@ (mov r8, r8)
 80031f4:	40012400 	.word	0x40012400
 80031f8:	40021000 	.word	0x40021000
 80031fc:	50000400 	.word	0x50000400
 8003200:	20000028 	.word	0x20000028
 8003204:	40020008 	.word	0x40020008

08003208 <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8003208:	b5f0      	push	{r4, r5, r6, r7, lr}
	tps1=TIM2->CNT;
 800320a:	2580      	movs	r5, #128	@ 0x80
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800320c:	46c6      	mov	lr, r8
	tps1=TIM2->CNT;
 800320e:	05ed      	lsls	r5, r5, #23
 8003210:	4b37      	ldr	r3, [pc, #220]	@ (80032f0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8003212:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8003214:	b500      	push	{lr}

	if (hadc->Instance == ADC1) {
 8003216:	6802      	ldr	r2, [r0, #0]
	tps1=TIM2->CNT;
 8003218:	601c      	str	r4, [r3, #0]
	if (hadc->Instance == ADC1) {
 800321a:	4b36      	ldr	r3, [pc, #216]	@ (80032f4 <HAL_ADC_ConvCpltCallback+0xec>)
 800321c:	429a      	cmp	r2, r3
 800321e:	d002      	beq.n	8003226 <HAL_ADC_ConvCpltCallback+0x1e>



	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);

}
 8003220:	bc80      	pop	{r7}
 8003222:	46b8      	mov	r8, r7
 8003224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    float VDDA=3.0 * VREFINT_CAL / adc_data[4];
 8003226:	4b34      	ldr	r3, [pc, #208]	@ (80032f8 <HAL_ADC_ConvCpltCallback+0xf0>)
 8003228:	8858      	ldrh	r0, [r3, #2]
 800322a:	881a      	ldrh	r2, [r3, #0]
 800322c:	0400      	lsls	r0, r0, #16
 800322e:	4310      	orrs	r0, r2
 8003230:	f7ff fa54 	bl	80026dc <__aeabi_ui2d>
 8003234:	2200      	movs	r2, #0
 8003236:	4b31      	ldr	r3, [pc, #196]	@ (80032fc <HAL_ADC_ConvCpltCallback+0xf4>)
 8003238:	f7fe ff3c 	bl	80020b4 <__aeabi_dmul>
 800323c:	4b30      	ldr	r3, [pc, #192]	@ (8003300 <HAL_ADC_ConvCpltCallback+0xf8>)
 800323e:	0006      	movs	r6, r0
 8003240:	8918      	ldrh	r0, [r3, #8]
 8003242:	4698      	mov	r8, r3
 8003244:	000f      	movs	r7, r1
 8003246:	f7ff fa1b 	bl	8002680 <__aeabi_i2d>
 800324a:	0002      	movs	r2, r0
 800324c:	000b      	movs	r3, r1
 800324e:	0030      	movs	r0, r6
 8003250:	0039      	movs	r1, r7
 8003252:	f7fe fc17 	bl	8001a84 <__aeabi_ddiv>
 8003256:	f7ff faad 	bl	80027b4 <__aeabi_d2f>
	hfoc.ia=(float) (RESISTOR * ((adc_data[1] * VDDA)-(VDDA/2))) / 4095.0;
 800325a:	4643      	mov	r3, r8
    float VDDA=3.0 * VREFINT_CAL / adc_data[4];
 800325c:	1c06      	adds	r6, r0, #0
	hfoc.ia=(float) (RESISTOR * ((adc_data[1] * VDDA)-(VDDA/2))) / 4095.0;
 800325e:	8858      	ldrh	r0, [r3, #2]
 8003260:	f7fd ffb4 	bl	80011cc <__aeabi_i2f>
 8003264:	21fc      	movs	r1, #252	@ 0xfc
 8003266:	0589      	lsls	r1, r1, #22
 8003268:	f7fd fd2c 	bl	8000cc4 <__aeabi_fsub>
 800326c:	4925      	ldr	r1, [pc, #148]	@ (8003304 <HAL_ADC_ConvCpltCallback+0xfc>)
 800326e:	f7fd fbcf 	bl	8000a10 <__aeabi_fmul>
 8003272:	1c31      	adds	r1, r6, #0
 8003274:	f7fd fbcc 	bl	8000a10 <__aeabi_fmul>
 8003278:	f7ff fa54 	bl	8002724 <__aeabi_f2d>
 800327c:	4a22      	ldr	r2, [pc, #136]	@ (8003308 <HAL_ADC_ConvCpltCallback+0x100>)
 800327e:	4b23      	ldr	r3, [pc, #140]	@ (800330c <HAL_ADC_ConvCpltCallback+0x104>)
 8003280:	f7fe ff18 	bl	80020b4 <__aeabi_dmul>
 8003284:	f7ff fa96 	bl	80027b4 <__aeabi_d2f>
	hfoc.ic=(float) (RESISTOR * ((adc_data[2] * VDDA)-(VDDA/2))) / 4095.0;
 8003288:	4643      	mov	r3, r8
	hfoc.ia=(float) (RESISTOR * ((adc_data[1] * VDDA)-(VDDA/2))) / 4095.0;
 800328a:	4f21      	ldr	r7, [pc, #132]	@ (8003310 <HAL_ADC_ConvCpltCallback+0x108>)
 800328c:	65b8      	str	r0, [r7, #88]	@ 0x58
	hfoc.ic=(float) (RESISTOR * ((adc_data[2] * VDDA)-(VDDA/2))) / 4095.0;
 800328e:	8898      	ldrh	r0, [r3, #4]
 8003290:	f7fd ff9c 	bl	80011cc <__aeabi_i2f>
 8003294:	21fc      	movs	r1, #252	@ 0xfc
 8003296:	0589      	lsls	r1, r1, #22
 8003298:	f7fd fd14 	bl	8000cc4 <__aeabi_fsub>
 800329c:	4919      	ldr	r1, [pc, #100]	@ (8003304 <HAL_ADC_ConvCpltCallback+0xfc>)
 800329e:	f7fd fbb7 	bl	8000a10 <__aeabi_fmul>
 80032a2:	1c31      	adds	r1, r6, #0
 80032a4:	f7fd fbb4 	bl	8000a10 <__aeabi_fmul>
 80032a8:	f7ff fa3c 	bl	8002724 <__aeabi_f2d>
 80032ac:	4a16      	ldr	r2, [pc, #88]	@ (8003308 <HAL_ADC_ConvCpltCallback+0x100>)
 80032ae:	4b17      	ldr	r3, [pc, #92]	@ (800330c <HAL_ADC_ConvCpltCallback+0x104>)
 80032b0:	f7fe ff00 	bl	80020b4 <__aeabi_dmul>
 80032b4:	f7ff fa7e 	bl	80027b4 <__aeabi_d2f>
	hfoc.v_bus=(float) (VBUSDIVIDER * (adc_data[3] * VDDA)) / 4095.0;
 80032b8:	4643      	mov	r3, r8
	hfoc.ic=(float) (RESISTOR * ((adc_data[2] * VDDA)-(VDDA/2))) / 4095.0;
 80032ba:	6638      	str	r0, [r7, #96]	@ 0x60
	hfoc.v_bus=(float) (VBUSDIVIDER * (adc_data[3] * VDDA)) / 4095.0;
 80032bc:	88d8      	ldrh	r0, [r3, #6]
 80032be:	f7fd ff85 	bl	80011cc <__aeabi_i2f>
 80032c2:	4914      	ldr	r1, [pc, #80]	@ (8003314 <HAL_ADC_ConvCpltCallback+0x10c>)
 80032c4:	f7fd fba4 	bl	8000a10 <__aeabi_fmul>
 80032c8:	1c31      	adds	r1, r6, #0
 80032ca:	f7fd fba1 	bl	8000a10 <__aeabi_fmul>
 80032ce:	f7ff fa29 	bl	8002724 <__aeabi_f2d>
 80032d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <HAL_ADC_ConvCpltCallback+0x100>)
 80032d4:	4b0d      	ldr	r3, [pc, #52]	@ (800330c <HAL_ADC_ConvCpltCallback+0x104>)
 80032d6:	f7fe feed 	bl	80020b4 <__aeabi_dmul>
 80032da:	f7ff fa6b 	bl	80027b4 <__aeabi_d2f>
	tps_tot=TIM2->CNT-tps1;
 80032de:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80032e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003318 <HAL_ADC_ConvCpltCallback+0x110>)
	hfoc.v_bus=(float) (VBUSDIVIDER * (adc_data[3] * VDDA)) / 4095.0;
 80032e2:	6678      	str	r0, [r7, #100]	@ 0x64
	tps_tot=TIM2->CNT-tps1;
 80032e4:	1b1b      	subs	r3, r3, r4
    MA330_start(&ma330data);
 80032e6:	480d      	ldr	r0, [pc, #52]	@ (800331c <HAL_ADC_ConvCpltCallback+0x114>)
	tps_tot=TIM2->CNT-tps1;
 80032e8:	6013      	str	r3, [r2, #0]
    MA330_start(&ma330data);
 80032ea:	f7ff fd99 	bl	8002e20 <MA330_start>
}
 80032ee:	e797      	b.n	8003220 <HAL_ADC_ConvCpltCallback+0x18>
 80032f0:	200000f0 	.word	0x200000f0
 80032f4:	40012400 	.word	0x40012400
 80032f8:	1fff75aa 	.word	0x1fff75aa
 80032fc:	40080000 	.word	0x40080000
 8003300:	20000268 	.word	0x20000268
 8003304:	3c23d70a 	.word	0x3c23d70a
 8003308:	10010010 	.word	0x10010010
 800330c:	3f300100 	.word	0x3f300100
 8003310:	200000fc 	.word	0x200000fc
 8003314:	40e00000 	.word	0x40e00000
 8003318:	200000ec 	.word	0x200000ec
 800331c:	2000022c 	.word	0x2000022c

08003320 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003320:	2301      	movs	r3, #1
{
 8003322:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003324:	4a0d      	ldr	r2, [pc, #52]	@ (800335c <MX_DMA_Init+0x3c>)
{
 8003326:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003328:	6b91      	ldr	r1, [r2, #56]	@ 0x38

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800332a:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800332c:	4319      	orrs	r1, r3
 800332e:	6391      	str	r1, [r2, #56]	@ 0x38
 8003330:	6b92      	ldr	r2, [r2, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003332:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003334:	4013      	ands	r3, r2
 8003336:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003338:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800333a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800333c:	f001 fa80 	bl	8004840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003340:	2009      	movs	r0, #9
 8003342:	f001 faa7 	bl	8004894 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003346:	2200      	movs	r2, #0
 8003348:	2100      	movs	r1, #0
 800334a:	200a      	movs	r0, #10
 800334c:	f001 fa78 	bl	8004840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003350:	200a      	movs	r0, #10
 8003352:	f001 fa9f 	bl	8004894 <HAL_NVIC_EnableIRQ>

}
 8003356:	b003      	add	sp, #12
 8003358:	bd00      	pop	{pc}
 800335a:	46c0      	nop			@ (mov r8, r8)
 800335c:	40021000 	.word	0x40021000

08003360 <foc_speed_control_update>:
    *(hfoc->pwm_a) = CONSTRAIN(da, 0, hfoc->pwm_res);
    *(hfoc->pwm_b) = CONSTRAIN(db, 0, hfoc->pwm_res);
    *(hfoc->pwm_c) = CONSTRAIN(dc, 0, hfoc->pwm_res);
}

void foc_speed_control_update(foc_t *hfoc, float rpm_reference) {
 8003360:	b510      	push	{r4, lr}
 8003362:	0004      	movs	r4, r0
 8003364:	1c08      	adds	r0, r1, #0
	if (hfoc == NULL || (hfoc->control_mode != SPEED_CONTROL_MODE && hfoc->control_mode != POSITION_CONTROL_MODE)) {
 8003366:	2c00      	cmp	r4, #0
 8003368:	d005      	beq.n	8003376 <foc_speed_control_update+0x16>
 800336a:	2392      	movs	r3, #146	@ 0x92
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	5ce3      	ldrb	r3, [r4, r3]
 8003370:	3b01      	subs	r3, #1
 8003372:	2b01      	cmp	r3, #1
 8003374:	d905      	bls.n	8003382 <foc_speed_control_update+0x22>
		hfoc->speed_ctrl.integral = 0.0f;
 8003376:	2300      	movs	r3, #0
 8003378:	22e8      	movs	r2, #232	@ 0xe8
 800337a:	50a3      	str	r3, [r4, r2]
		hfoc->speed_ctrl.last_error = 0.0f;
 800337c:	3210      	adds	r2, #16
 800337e:	50a3      	str	r3, [r4, r2]
		return;
	}

    hfoc->id_ref = 0.0f;
    hfoc->iq_ref = -pi_control(&hfoc->speed_ctrl, rpm_reference - hfoc->actual_rpm);
}
 8003380:	bd10      	pop	{r4, pc}
    hfoc->id_ref = 0.0f;
 8003382:	2300      	movs	r3, #0
    hfoc->iq_ref = -pi_control(&hfoc->speed_ctrl, rpm_reference - hfoc->actual_rpm);
 8003384:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    hfoc->id_ref = 0.0f;
 8003386:	6763      	str	r3, [r4, #116]	@ 0x74
    hfoc->iq_ref = -pi_control(&hfoc->speed_ctrl, rpm_reference - hfoc->actual_rpm);
 8003388:	f7fd fc9c 	bl	8000cc4 <__aeabi_fsub>
 800338c:	1c01      	adds	r1, r0, #0
 800338e:	0020      	movs	r0, r4
 8003390:	30dc      	adds	r0, #220	@ 0xdc
 8003392:	f000 fa03 	bl	800379c <pi_control>
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	469c      	mov	ip, r3
 800339c:	4460      	add	r0, ip
 800339e:	67a0      	str	r0, [r4, #120]	@ 0x78
 80033a0:	e7ee      	b.n	8003380 <foc_speed_control_update+0x20>
 80033a2:	46c0      	nop			@ (mov r8, r8)

080033a4 <foc_position_control_update>:

void foc_position_control_update(foc_t *hfoc, float deg_reference) {
 80033a4:	b510      	push	{r4, lr}
 80033a6:	0004      	movs	r4, r0
 80033a8:	1c08      	adds	r0, r1, #0
	if (hfoc == NULL || hfoc->control_mode != POSITION_CONTROL_MODE) {
 80033aa:	2c00      	cmp	r4, #0
 80033ac:	d004      	beq.n	80033b8 <foc_position_control_update+0x14>
 80033ae:	2392      	movs	r3, #146	@ 0x92
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	5ce3      	ldrb	r3, [r4, r3]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d006      	beq.n	80033c6 <foc_position_control_update+0x22>
		hfoc->pos_ctrl.integral = 0.0f;
 80033b8:	2286      	movs	r2, #134	@ 0x86
 80033ba:	2300      	movs	r3, #0
 80033bc:	0052      	lsls	r2, r2, #1
 80033be:	50a3      	str	r3, [r4, r2]
		hfoc->pos_ctrl.last_error = 0.0f;
 80033c0:	3210      	adds	r2, #16
 80033c2:	50a3      	str	r3, [r4, r2]
    foc_speed_control_update(hfoc, hfoc->rpm_ref);
#else
    hfoc->id_ref = 0.0f;
    hfoc->iq_ref = -pd_control(&hfoc->pos_ctrl, deg_reference - hfoc->actual_angle);
#endif
}
 80033c4:	bd10      	pop	{r4, pc}
    hfoc->id_ref = 0.0f;
 80033c6:	2300      	movs	r3, #0
    hfoc->iq_ref = -pd_control(&hfoc->pos_ctrl, deg_reference - hfoc->actual_angle);
 80033c8:	6f21      	ldr	r1, [r4, #112]	@ 0x70
    hfoc->id_ref = 0.0f;
 80033ca:	6763      	str	r3, [r4, #116]	@ 0x74
    hfoc->iq_ref = -pd_control(&hfoc->pos_ctrl, deg_reference - hfoc->actual_angle);
 80033cc:	f7fd fc7a 	bl	8000cc4 <__aeabi_fsub>
 80033d0:	1c01      	adds	r1, r0, #0
 80033d2:	1c60      	adds	r0, r4, #1
 80033d4:	30ff      	adds	r0, #255	@ 0xff
 80033d6:	f000 fa4d 	bl	8003874 <pd_control>
 80033da:	2380      	movs	r3, #128	@ 0x80
 80033dc:	061b      	lsls	r3, r3, #24
 80033de:	469c      	mov	ip, r3
 80033e0:	4460      	add	r0, ip
 80033e2:	67a0      	str	r0, [r4, #120]	@ 0x78
 80033e4:	e7ee      	b.n	80033c4 <foc_position_control_update+0x20>
 80033e6:	46c0      	nop			@ (mov r8, r8)

080033e8 <open_loop_voltage_control>:
    norm_angle_rad(&e_rad);

    hfoc->e_angle_rad_comp = e_rad;
}

void open_loop_voltage_control(foc_t *hfoc, float vd_ref, float vq_ref, float angle_rad) {
 80033e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ea:	0004      	movs	r4, r0
 80033ec:	1c18      	adds	r0, r3, #0
    float valpha, vbeta;
    uint32_t da, db, dc;
    const uint32_t pwm_res = hfoc->pwm_res;
 80033ee:	2390      	movs	r3, #144	@ 0x90
void open_loop_voltage_control(foc_t *hfoc, float vd_ref, float vq_ref, float angle_rad) {
 80033f0:	b08d      	sub	sp, #52	@ 0x34
 80033f2:	1c0e      	adds	r6, r1, #0
 80033f4:	1c17      	adds	r7, r2, #0

    float sin_theta, cos_theta;
    pre_calc_sin_cos(angle_rad, &sin_theta, &cos_theta);
 80033f6:	a90a      	add	r1, sp, #40	@ 0x28
 80033f8:	aa0b      	add	r2, sp, #44	@ 0x2c
    const uint32_t pwm_res = hfoc->pwm_res;
 80033fa:	58e5      	ldr	r5, [r4, r3]
    pre_calc_sin_cos(angle_rad, &sin_theta, &cos_theta);
 80033fc:	f7ff fa7a 	bl	80028f4 <pre_calc_sin_cos>
    inverse_park_transform(vd_ref, vq_ref, sin_theta, cos_theta, &valpha, &vbeta);
 8003400:	a906      	add	r1, sp, #24
 8003402:	9101      	str	r1, [sp, #4]
 8003404:	a905      	add	r1, sp, #20
 8003406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003408:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800340a:	9100      	str	r1, [sp, #0]
 800340c:	1c30      	adds	r0, r6, #0
 800340e:	1c39      	adds	r1, r7, #0
 8003410:	f7ff fb14 	bl	8002a3c <inverse_park_transform>
    svpwm(valpha, vbeta, hfoc->v_bus, pwm_res, &da, &db, &dc);
 8003414:	ab09      	add	r3, sp, #36	@ 0x24
 8003416:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003418:	9302      	str	r3, [sp, #8]
 800341a:	ab08      	add	r3, sp, #32
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	ab07      	add	r3, sp, #28
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	9906      	ldr	r1, [sp, #24]
 8003424:	002b      	movs	r3, r5
 8003426:	9805      	ldr	r0, [sp, #20]
 8003428:	f7ff fb30 	bl	8002a8c <svpwm>

    *(hfoc->pwm_a) = CONSTRAIN(da, 0, pwm_res);
 800342c:	9b07      	ldr	r3, [sp, #28]
 800342e:	42ab      	cmp	r3, r5
 8003430:	d900      	bls.n	8003434 <open_loop_voltage_control+0x4c>
 8003432:	002b      	movs	r3, r5
 8003434:	2284      	movs	r2, #132	@ 0x84
 8003436:	58a2      	ldr	r2, [r4, r2]
 8003438:	6013      	str	r3, [r2, #0]
    *(hfoc->pwm_b) = CONSTRAIN(db, 0, pwm_res);
 800343a:	9b08      	ldr	r3, [sp, #32]
 800343c:	42ab      	cmp	r3, r5
 800343e:	d900      	bls.n	8003442 <open_loop_voltage_control+0x5a>
 8003440:	002b      	movs	r3, r5
 8003442:	2288      	movs	r2, #136	@ 0x88
 8003444:	58a2      	ldr	r2, [r4, r2]
 8003446:	6013      	str	r3, [r2, #0]
    *(hfoc->pwm_c) = CONSTRAIN(dc, 0, pwm_res);
 8003448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800344a:	42ab      	cmp	r3, r5
 800344c:	d900      	bls.n	8003450 <open_loop_voltage_control+0x68>
 800344e:	002b      	movs	r3, r5
 8003450:	228c      	movs	r2, #140	@ 0x8c
 8003452:	58a2      	ldr	r2, [r4, r2]
 8003454:	6013      	str	r3, [r2, #0]
}
 8003456:	b00d      	add	sp, #52	@ 0x34
 8003458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800345a:	46c0      	nop			@ (mov r8, r8)

0800345c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800345c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345e:	46c6      	mov	lr, r8
 8003460:	b500      	push	{lr}
 8003462:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	2214      	movs	r2, #20
 8003466:	2100      	movs	r1, #0
 8003468:	a804      	add	r0, sp, #16
 800346a:	f003 ff77 	bl	800735c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800346e:	2220      	movs	r2, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003470:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003472:	2702      	movs	r7, #2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003474:	4b2b      	ldr	r3, [pc, #172]	@ (8003524 <MX_GPIO_Init+0xc8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|HALL_CS_Pin, GPIO_PIN_RESET);
 8003476:	26a0      	movs	r6, #160	@ 0xa0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003478:	6b59      	ldr	r1, [r3, #52]	@ 0x34

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800347c:	4311      	orrs	r1, r2
 800347e:	6359      	str	r1, [r3, #52]	@ 0x34
 8003480:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|HALL_CS_Pin, GPIO_PIN_RESET);
 8003482:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003484:	400a      	ands	r2, r1
 8003486:	9201      	str	r2, [sp, #4]
 8003488:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800348a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 800348c:	2101      	movs	r1, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800348e:	432a      	orrs	r2, r5
 8003490:	635a      	str	r2, [r3, #52]	@ 0x34
 8003492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003494:	402a      	ands	r2, r5
 8003496:	9202      	str	r2, [sp, #8]
 8003498:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800349a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800349c:	433a      	orrs	r2, r7
 800349e:	635a      	str	r2, [r3, #52]	@ 0x34
 80034a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80034a2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a4:	403b      	ands	r3, r7
 80034a6:	9303      	str	r3, [sp, #12]
 80034a8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80034aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003528 <MX_GPIO_Init+0xcc>)
 80034ac:	4698      	mov	r8, r3
 80034ae:	0018      	movs	r0, r3
 80034b0:	f001 fd3c 	bl	8004f2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|HALL_CS_Pin, GPIO_PIN_RESET);
 80034b4:	2200      	movs	r2, #0
 80034b6:	0030      	movs	r0, r6
 80034b8:	491c      	ldr	r1, [pc, #112]	@ (800352c <MX_GPIO_Init+0xd0>)
 80034ba:	f001 fd37 	bl	8004f2c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034be:	4640      	mov	r0, r8
 80034c0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80034c2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034ca:	f001 fb7f 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034ce:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d0:	0030      	movs	r0, r6
 80034d2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034d4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034da:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034dc:	f001 fb76 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034e0:	2280      	movs	r2, #128	@ 0x80
 80034e2:	2388      	movs	r3, #136	@ 0x88
 80034e4:	0152      	lsls	r2, r2, #5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e6:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034e8:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ea:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034ec:	9204      	str	r2, [sp, #16]
 80034ee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	f001 fb6b 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_CS_Pin */
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 80034f6:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 80034f8:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 80034fa:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 80034fc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = HALL_CS_Pin;
 80034fe:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003500:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(HALL_CS_GPIO_Port, &GPIO_InitStruct);
 8003506:	f001 fb61 	bl	8004bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800350a:	2200      	movs	r2, #0
 800350c:	2100      	movs	r1, #0
 800350e:	2007      	movs	r0, #7
 8003510:	f001 f996 	bl	8004840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003514:	2007      	movs	r0, #7
 8003516:	f001 f9bd 	bl	8004894 <HAL_NVIC_EnableIRQ>

}
 800351a:	b00a      	add	sp, #40	@ 0x28
 800351c:	bc80      	pop	{r7}
 800351e:	46b8      	mov	r8, r7
 8003520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	40021000 	.word	0x40021000
 8003528:	50001400 	.word	0x50001400
 800352c:	0000800c 	.word	0x0000800c

08003530 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8003530:	b510      	push	{r4, lr}

	HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_0);
 8003532:	2101      	movs	r1, #1
 8003534:	4801      	ldr	r0, [pc, #4]	@ (800353c <HAL_GPIO_EXTI_Rising_Callback+0xc>)
 8003536:	f001 fcff 	bl	8004f38 <HAL_GPIO_TogglePin>


}
 800353a:	bd10      	pop	{r4, pc}
 800353c:	50001400 	.word	0x50001400

08003540 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003540:	b510      	push	{r4, lr}
 8003542:	2101      	movs	r1, #1
 8003544:	4801      	ldr	r0, [pc, #4]	@ (800354c <HAL_GPIO_EXTI_Falling_Callback+0xc>)
 8003546:	f001 fcf7 	bl	8004f38 <HAL_GPIO_TogglePin>
 800354a:	bd10      	pop	{r4, pc}
 800354c:	50001400 	.word	0x50001400

08003550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003550:	b500      	push	{lr}
 8003552:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003554:	2238      	movs	r2, #56	@ 0x38
 8003556:	2100      	movs	r1, #0
 8003558:	a804      	add	r0, sp, #16
 800355a:	f003 feff 	bl	800735c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800355e:	2210      	movs	r2, #16
 8003560:	2100      	movs	r1, #0
 8003562:	4668      	mov	r0, sp
 8003564:	f003 fefa 	bl	800735c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003568:	2080      	movs	r0, #128	@ 0x80
 800356a:	0080      	lsls	r0, r0, #2
 800356c:	f001 fd06 	bl	8004f7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003570:	2302      	movs	r3, #2
 8003572:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003574:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003576:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003578:	330e      	adds	r3, #14
 800357a:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800357c:	23e0      	movs	r3, #224	@ 0xe0
 800357e:	031b      	lsls	r3, r3, #12
 8003580:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8003582:	23e0      	movs	r3, #224	@ 0xe0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003584:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8003586:	051b      	lsls	r3, r3, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003588:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800358a:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800358c:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800358e:	2140      	movs	r1, #64	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003590:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003592:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8003594:	05db      	lsls	r3, r3, #23
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003596:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003598:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800359a:	9109      	str	r1, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800359c:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800359e:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035a0:	f001 fd1c 	bl	8004fdc <HAL_RCC_OscConfig>
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d001      	beq.n	80035ac <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035a8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80035aa:	e7fe      	b.n	80035aa <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ac:	2207      	movs	r2, #7
 80035ae:	2302      	movs	r3, #2
 80035b0:	9200      	str	r2, [sp, #0]
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035b8:	2102      	movs	r1, #2
 80035ba:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035bc:	9202      	str	r2, [sp, #8]
 80035be:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035c0:	f001 ffc2 	bl	8005548 <HAL_RCC_ClockConfig>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d001      	beq.n	80035cc <SystemClock_Config+0x7c>
 80035c8:	b672      	cpsid	i
	while (1)
 80035ca:	e7fe      	b.n	80035ca <SystemClock_Config+0x7a>
}
 80035cc:	b013      	add	sp, #76	@ 0x4c
 80035ce:	bd00      	pop	{pc}

080035d0 <main>:
{
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d2:	46de      	mov	lr, fp
 80035d4:	4657      	mov	r7, sl
 80035d6:	464e      	mov	r6, r9
 80035d8:	4645      	mov	r5, r8
 80035da:	b5e0      	push	{r5, r6, r7, lr}
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 80035dc:	2510      	movs	r5, #16
{
 80035de:	b083      	sub	sp, #12
  HAL_Init();
 80035e0:	f000 fcc4 	bl	8003f6c <HAL_Init>
  SystemClock_Config();
 80035e4:	f7ff ffb4 	bl	8003550 <SystemClock_Config>
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 80035e8:	4c5c      	ldr	r4, [pc, #368]	@ (800375c <main+0x18c>)
 80035ea:	6822      	ldr	r2, [r4, #0]
 80035ec:	68d3      	ldr	r3, [r2, #12]
 80035ee:	432b      	orrs	r3, r5
 80035f0:	60d3      	str	r3, [r2, #12]
  MX_GPIO_Init();
 80035f2:	f7ff ff33 	bl	800345c <MX_GPIO_Init>
  MX_DMA_Init();
 80035f6:	f7ff fe93 	bl	8003320 <MX_DMA_Init>
  MX_ADC1_Init();
 80035fa:	f7ff fd15 	bl	8003028 <MX_ADC1_Init>
  MX_SPI2_Init();
 80035fe:	f000 f979 	bl	80038f4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003602:	f000 fb91 	bl	8003d28 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003606:	f000 fab9 	bl	8003b7c <MX_TIM2_Init>
  MA330_Init(&ma330data, &hspi2, HALL_CS_GPIO_Port, HALL_CS_Pin,NORMAL_FW);
 800360a:	2366      	movs	r3, #102	@ 0x66
 800360c:	22a0      	movs	r2, #160	@ 0xa0
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	2380      	movs	r3, #128	@ 0x80
 8003612:	4e53      	ldr	r6, [pc, #332]	@ (8003760 <main+0x190>)
 8003614:	4953      	ldr	r1, [pc, #332]	@ (8003764 <main+0x194>)
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	05d2      	lsls	r2, r2, #23
 800361a:	0030      	movs	r0, r6
 800361c:	f7ff fb70 	bl	8002d00 <MA330_Init>
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4 | TIM_IT_TRIGGER | TIM_IT_COM | TIM_IT_BREAK);
 8003620:	21ff      	movs	r1, #255	@ 0xff
 8003622:	6823      	ldr	r3, [r4, #0]
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8003624:	0020      	movs	r0, r4
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4 | TIM_IT_TRIGGER | TIM_IT_COM | TIM_IT_BREAK);
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	438a      	bics	r2, r1
 800362a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4 | TIM_IT_TRIGGER | TIM_IT_COM | TIM_IT_BREAK);
 800362c:	4a4e      	ldr	r2, [pc, #312]	@ (8003768 <main+0x198>)
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800362e:	2100      	movs	r1, #0
  __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4 | TIM_IT_TRIGGER | TIM_IT_COM | TIM_IT_BREAK);
 8003630:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	432a      	orrs	r2, r5
 8003636:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8003638:	f003 f96c 	bl	8006914 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 800363c:	2100      	movs	r1, #0
 800363e:	0020      	movs	r0, r4
 8003640:	f003 fd6a 	bl	8007118 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8003644:	2104      	movs	r1, #4
 8003646:	0020      	movs	r0, r4
 8003648:	f003 f964 	bl	8006914 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 800364c:	2104      	movs	r1, #4
 800364e:	0020      	movs	r0, r4
 8003650:	f003 fd62 	bl	8007118 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8003654:	2108      	movs	r1, #8
 8003656:	0020      	movs	r0, r4
 8003658:	f003 f95c 	bl	8006914 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 800365c:	2108      	movs	r1, #8
 800365e:	0020      	movs	r0, r4
 8003660:	f003 fd5a 	bl	8007118 <HAL_TIMEx_PWMN_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 5);
 8003664:	2205      	movs	r2, #5
 8003666:	4941      	ldr	r1, [pc, #260]	@ (800376c <main+0x19c>)
 8003668:	4841      	ldr	r0, [pc, #260]	@ (8003770 <main+0x1a0>)
 800366a:	f001 f887 	bl	800477c <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 800366e:	210c      	movs	r1, #12
 8003670:	0020      	movs	r0, r4
 8003672:	f003 f9b7 	bl	80069e4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8003676:	483f      	ldr	r0, [pc, #252]	@ (8003774 <main+0x1a4>)
 8003678:	f003 f894 	bl	80067a4 <HAL_TIM_Base_Start>
 800367c:	4b3e      	ldr	r3, [pc, #248]	@ (8003778 <main+0x1a8>)
 800367e:	4f3f      	ldr	r7, [pc, #252]	@ (800377c <main+0x1ac>)
 8003680:	4698      	mov	r8, r3
 8003682:	4b3f      	ldr	r3, [pc, #252]	@ (8003780 <main+0x1b0>)
 8003684:	469b      	mov	fp, r3
 8003686:	4b3f      	ldr	r3, [pc, #252]	@ (8003784 <main+0x1b4>)
 8003688:	469a      	mov	sl, r3
		      switch (hfoc.control_mode) {
 800368a:	2392      	movs	r3, #146	@ 0x92
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4699      	mov	r9, r3
 8003690:	e002      	b.n	8003698 <main+0xc8>
		HAL_Delay(1);
 8003692:	2001      	movs	r0, #1
 8003694:	f000 fc90 	bl	8003fb8 <HAL_Delay>
		    if (is_foc_ready()) {
 8003698:	4642      	mov	r2, r8
		      switch (hfoc.control_mode) {
 800369a:	464b      	mov	r3, r9
		    if (is_foc_ready()) {
 800369c:	7812      	ldrb	r2, [r2, #0]
		      switch (hfoc.control_mode) {
 800369e:	5cfb      	ldrb	r3, [r7, r3]
		    if (is_foc_ready()) {
 80036a0:	2a00      	cmp	r2, #0
 80036a2:	d00e      	beq.n	80036c2 <main+0xf2>
		      foc_reset_flag();
 80036a4:	2200      	movs	r2, #0
 80036a6:	4641      	mov	r1, r8
 80036a8:	700a      	strb	r2, [r1, #0]
		      switch (hfoc.control_mode) {
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d049      	beq.n	8003742 <main+0x172>
 80036ae:	d837      	bhi.n	8003720 <main+0x150>
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d040      	beq.n	8003736 <main+0x166>
		        foc_speed_control_update(&hfoc, sp_input);
 80036b4:	465b      	mov	r3, fp
 80036b6:	0038      	movs	r0, r7
 80036b8:	6819      	ldr	r1, [r3, #0]
 80036ba:	f7ff fe51 	bl	8003360 <foc_speed_control_update>
		    if (hfoc.control_mode == CALIBRATION_MODE) {
 80036be:	464b      	mov	r3, r9
 80036c0:	5cfb      	ldrb	r3, [r7, r3]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d1e5      	bne.n	8003692 <main+0xc2>
		      if (start_cal == 1) {
 80036c6:	4653      	mov	r3, sl
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d1e1      	bne.n	8003692 <main+0xc2>
	  open_loop_voltage_control(&hfoc, VD_CAL, VQ_CAL, 0.0f);
 80036ce:	2300      	movs	r3, #0
 80036d0:	0038      	movs	r0, r7
 80036d2:	492d      	ldr	r1, [pc, #180]	@ (8003788 <main+0x1b8>)
 80036d4:	1c1a      	adds	r2, r3, #0
 80036d6:	f7ff fe87 	bl	80033e8 <open_loop_voltage_control>
	  HAL_Delay(500);
 80036da:	20fa      	movs	r0, #250	@ 0xfa
 80036dc:	0040      	lsls	r0, r0, #1
 80036de:	f000 fc6b 	bl	8003fb8 <HAL_Delay>
 80036e2:	2564      	movs	r5, #100	@ 0x64
	  float rad_offset = 0.0f;
 80036e4:	2400      	movs	r4, #0
	    rad_offset += DEG_TO_RAD(ma330data.angle_filtered);
 80036e6:	4929      	ldr	r1, [pc, #164]	@ (800378c <main+0x1bc>)
 80036e8:	68f0      	ldr	r0, [r6, #12]
 80036ea:	f7fd f991 	bl	8000a10 <__aeabi_fmul>
 80036ee:	1c01      	adds	r1, r0, #0
 80036f0:	1c20      	adds	r0, r4, #0
 80036f2:	f7fc fdcd 	bl	8000290 <__aeabi_fadd>
	  for (int i = 0; i < CAL_ITERATION; i++) {
 80036f6:	3d01      	subs	r5, #1
	    rad_offset += DEG_TO_RAD(ma330data.angle_filtered);
 80036f8:	1c04      	adds	r4, r0, #0
	    HAL_Delay(1);
 80036fa:	2001      	movs	r0, #1
 80036fc:	f000 fc5c 	bl	8003fb8 <HAL_Delay>
	  for (int i = 0; i < CAL_ITERATION; i++) {
 8003700:	2d00      	cmp	r5, #0
 8003702:	d1f0      	bne.n	80036e6 <main+0x116>
	  open_loop_voltage_control(&hfoc, 0.0f, 0.0f, 0.0f);
 8003704:	2300      	movs	r3, #0
 8003706:	0038      	movs	r0, r7
 8003708:	1c19      	adds	r1, r3, #0
 800370a:	1c1a      	adds	r2, r3, #0
 800370c:	f7ff fe6c 	bl	80033e8 <open_loop_voltage_control>
	  rad_offset = rad_offset / (float)CAL_ITERATION;
 8003710:	491f      	ldr	r1, [pc, #124]	@ (8003790 <main+0x1c0>)
 8003712:	1c20      	adds	r0, r4, #0
 8003714:	f7fd f97c 	bl	8000a10 <__aeabi_fmul>
		        start_cal = 0;
 8003718:	4653      	mov	r3, sl
	  hfoc.m_angle_offset = rad_offset;
 800371a:	6338      	str	r0, [r7, #48]	@ 0x30
		        start_cal = 0;
 800371c:	601d      	str	r5, [r3, #0]
 800371e:	e7b8      	b.n	8003692 <main+0xc2>
		      switch (hfoc.control_mode) {
 8003720:	2b05      	cmp	r3, #5
 8003722:	d1ce      	bne.n	80036c2 <main+0xf2>
		        open_loop_voltage_control(&hfoc, 0.0f, 0.1f, 0.0f);
 8003724:	2300      	movs	r3, #0
 8003726:	0038      	movs	r0, r7
 8003728:	1c19      	adds	r1, r3, #0
 800372a:	4a1a      	ldr	r2, [pc, #104]	@ (8003794 <main+0x1c4>)
 800372c:	f7ff fe5c 	bl	80033e8 <open_loop_voltage_control>
		    if (hfoc.control_mode == CALIBRATION_MODE) {
 8003730:	464b      	mov	r3, r9
 8003732:	5cfb      	ldrb	r3, [r7, r3]
		        break;
 8003734:	e7c5      	b.n	80036c2 <main+0xf2>
		        hfoc.id_ref = 0.0f;
 8003736:	2300      	movs	r3, #0
 8003738:	677b      	str	r3, [r7, #116]	@ 0x74
		        hfoc.iq_ref = sp_input;
 800373a:	465b      	mov	r3, fp
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	67bb      	str	r3, [r7, #120]	@ 0x78
		    if (hfoc.control_mode == CALIBRATION_MODE) {
 8003740:	e7a7      	b.n	8003692 <main+0xc2>
		        hfoc.actual_angle = MA330_get_actual_degree(&ma330data);
 8003742:	0030      	movs	r0, r6
 8003744:	f7ff fc10 	bl	8002f68 <MA330_get_actual_degree>
		        foc_position_control_update(&hfoc, sp_input);
 8003748:	465b      	mov	r3, fp
		        hfoc.actual_angle = MA330_get_actual_degree(&ma330data);
 800374a:	6738      	str	r0, [r7, #112]	@ 0x70
		        foc_position_control_update(&hfoc, sp_input);
 800374c:	6819      	ldr	r1, [r3, #0]
 800374e:	0038      	movs	r0, r7
 8003750:	f7ff fe28 	bl	80033a4 <foc_position_control_update>
		    if (hfoc.control_mode == CALIBRATION_MODE) {
 8003754:	464b      	mov	r3, r9
 8003756:	5cfb      	ldrb	r3, [r7, r3]
		        break;
 8003758:	e7b3      	b.n	80036c2 <main+0xf2>
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	200003dc 	.word	0x200003dc
 8003760:	2000022c 	.word	0x2000022c
 8003764:	2000032c 	.word	0x2000032c
 8003768:	ffffff00 	.word	0xffffff00
 800376c:	20000268 	.word	0x20000268
 8003770:	20000084 	.word	0x20000084
 8003774:	20000390 	.word	0x20000390
 8003778:	200000e8 	.word	0x200000e8
 800377c:	200000fc 	.word	0x200000fc
 8003780:	200000f8 	.word	0x200000f8
 8003784:	200000f4 	.word	0x200000f4
 8003788:	3f19999a 	.word	0x3f19999a
 800378c:	3c8efa35 	.word	0x3c8efa35
 8003790:	3c23d70a 	.word	0x3c23d70a
 8003794:	3dcccccd 	.word	0x3dcccccd

08003798 <Error_Handler>:
 8003798:	b672      	cpsid	i
	while (1)
 800379a:	e7fe      	b.n	800379a <Error_Handler+0x2>

0800379c <pi_control>:
 */

#include "pid_utils.h"

float pi_control(PID_Controller_t *pi, float error) {
    if (error >= -pi->e_deadband && error <= pi->e_deadband) {
 800379c:	6983      	ldr	r3, [r0, #24]
float pi_control(PID_Controller_t *pi, float error) {
 800379e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a0:	4646      	mov	r6, r8
    if (error >= -pi->e_deadband && error <= pi->e_deadband) {
 80037a2:	4698      	mov	r8, r3
        error = 0.0f;
    }

    float p_term = pi->kp * error;

    float new_integral = pi->integral + error * pi->ki * pi->ts;
 80037a4:	6943      	ldr	r3, [r0, #20]
float pi_control(PID_Controller_t *pi, float error) {
 80037a6:	46d6      	mov	lr, sl
    float new_integral = pi->integral + error * pi->ki * pi->ts;
 80037a8:	469a      	mov	sl, r3
    if (error >= -pi->e_deadband && error <= pi->e_deadband) {
 80037aa:	2380      	movs	r3, #128	@ 0x80
float pi_control(PID_Controller_t *pi, float error) {
 80037ac:	464f      	mov	r7, r9
    if (error >= -pi->e_deadband && error <= pi->e_deadband) {
 80037ae:	061b      	lsls	r3, r3, #24
 80037b0:	4443      	add	r3, r8
float pi_control(PID_Controller_t *pi, float error) {
 80037b2:	b5c0      	push	{r6, r7, lr}
 80037b4:	0004      	movs	r4, r0
    float new_integral = pi->integral + error * pi->ki * pi->ts;
 80037b6:	68c7      	ldr	r7, [r0, #12]

    float output = p_term + new_integral;

    // Anti-windup with clamping
    if (output > pi->out_max) {
 80037b8:	6905      	ldr	r5, [r0, #16]
    if (error >= -pi->e_deadband && error <= pi->e_deadband) {
 80037ba:	0018      	movs	r0, r3
float pi_control(PID_Controller_t *pi, float error) {
 80037bc:	1c0e      	adds	r6, r1, #0
    if (error >= -pi->e_deadband && error <= pi->e_deadband) {
 80037be:	f7fc fd49 	bl	8000254 <__aeabi_fcmple>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d013      	beq.n	80037ee <pi_control+0x52>
 80037c6:	4640      	mov	r0, r8
 80037c8:	1c31      	adds	r1, r6, #0
 80037ca:	f7fc fd57 	bl	800027c <__aeabi_fcmpge>
 80037ce:	2800      	cmp	r0, #0
 80037d0:	d00d      	beq.n	80037ee <pi_control+0x52>
    if (output > pi->out_max) {
 80037d2:	1c29      	adds	r1, r5, #0
 80037d4:	1c38      	adds	r0, r7, #0
 80037d6:	f7fc fd47 	bl	8000268 <__aeabi_fcmpgt>
 80037da:	2800      	cmp	r0, #0
 80037dc:	d03d      	beq.n	800385a <pi_control+0xbe>
        }
    }
    else if (output < -pi->out_max) {
        output = -pi->out_max;
        if (error * (output - p_term) <= 0) {
            pi->integral = new_integral;
 80037de:	60e7      	str	r7, [r4, #12]
    }

    pi->mv = output;

    return output;
}
 80037e0:	1c28      	adds	r0, r5, #0
    pi->mv = output;
 80037e2:	6225      	str	r5, [r4, #32]
}
 80037e4:	bce0      	pop	{r5, r6, r7}
 80037e6:	46ba      	mov	sl, r7
 80037e8:	46b1      	mov	r9, r6
 80037ea:	46a8      	mov	r8, r5
 80037ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    float p_term = pi->kp * error;
 80037ee:	6821      	ldr	r1, [r4, #0]
 80037f0:	1c30      	adds	r0, r6, #0
 80037f2:	f7fd f90d 	bl	8000a10 <__aeabi_fmul>
    float new_integral = pi->integral + error * pi->ki * pi->ts;
 80037f6:	6861      	ldr	r1, [r4, #4]
    float p_term = pi->kp * error;
 80037f8:	4681      	mov	r9, r0
    float new_integral = pi->integral + error * pi->ki * pi->ts;
 80037fa:	4650      	mov	r0, sl
 80037fc:	f7fd f908 	bl	8000a10 <__aeabi_fmul>
 8003800:	1c31      	adds	r1, r6, #0
 8003802:	f7fd f905 	bl	8000a10 <__aeabi_fmul>
 8003806:	1c01      	adds	r1, r0, #0
 8003808:	1c38      	adds	r0, r7, #0
 800380a:	f7fc fd41 	bl	8000290 <__aeabi_fadd>
    float output = p_term + new_integral;
 800380e:	1c01      	adds	r1, r0, #0
    float new_integral = pi->integral + error * pi->ki * pi->ts;
 8003810:	1c07      	adds	r7, r0, #0
    float output = p_term + new_integral;
 8003812:	4648      	mov	r0, r9
 8003814:	f7fc fd3c 	bl	8000290 <__aeabi_fadd>
    if (output > pi->out_max) {
 8003818:	1c29      	adds	r1, r5, #0
    float output = p_term + new_integral;
 800381a:	4680      	mov	r8, r0
 800381c:	4682      	mov	sl, r0
    if (output > pi->out_max) {
 800381e:	f7fc fd23 	bl	8000268 <__aeabi_fcmpgt>
 8003822:	2800      	cmp	r0, #0
 8003824:	d00c      	beq.n	8003840 <pi_control+0xa4>
        if (error * (output - p_term) <= 0) {
 8003826:	4649      	mov	r1, r9
 8003828:	1c28      	adds	r0, r5, #0
 800382a:	f7fd fa4b 	bl	8000cc4 <__aeabi_fsub>
 800382e:	1c31      	adds	r1, r6, #0
 8003830:	f7fd f8ee 	bl	8000a10 <__aeabi_fmul>
 8003834:	2100      	movs	r1, #0
 8003836:	f7fc fd0d 	bl	8000254 <__aeabi_fcmple>
 800383a:	2800      	cmp	r0, #0
 800383c:	d0d0      	beq.n	80037e0 <pi_control+0x44>
 800383e:	e7ce      	b.n	80037de <pi_control+0x42>
    else if (output < -pi->out_max) {
 8003840:	2380      	movs	r3, #128	@ 0x80
 8003842:	061b      	lsls	r3, r3, #24
 8003844:	469c      	mov	ip, r3
 8003846:	4465      	add	r5, ip
 8003848:	4641      	mov	r1, r8
 800384a:	1c28      	adds	r0, r5, #0
 800384c:	f7fc fd0c 	bl	8000268 <__aeabi_fcmpgt>
 8003850:	2800      	cmp	r0, #0
 8003852:	d1e8      	bne.n	8003826 <pi_control+0x8a>
    float output = p_term + new_integral;
 8003854:	4655      	mov	r5, sl
        pi->integral = new_integral;
 8003856:	60e7      	str	r7, [r4, #12]
 8003858:	e7c2      	b.n	80037e0 <pi_control+0x44>
    else if (output < -pi->out_max) {
 800385a:	2380      	movs	r3, #128	@ 0x80
 800385c:	061b      	lsls	r3, r3, #24
 800385e:	469c      	mov	ip, r3
 8003860:	4465      	add	r5, ip
 8003862:	1c29      	adds	r1, r5, #0
 8003864:	1c38      	adds	r0, r7, #0
 8003866:	f7fc fceb 	bl	8000240 <__aeabi_fcmplt>
    float output = p_term + new_integral;
 800386a:	46ba      	mov	sl, r7
    else if (output < -pi->out_max) {
 800386c:	2800      	cmp	r0, #0
 800386e:	d0f1      	beq.n	8003854 <pi_control+0xb8>
 8003870:	e7b5      	b.n	80037de <pi_control+0x42>
 8003872:	46c0      	nop			@ (mov r8, r8)

08003874 <pd_control>:

float pd_control(PID_Controller_t *pd, float error) {
    if (error >= -pd->e_deadband && error <= pd->e_deadband) {
 8003874:	2380      	movs	r3, #128	@ 0x80
float pd_control(PID_Controller_t *pd, float error) {
 8003876:	b570      	push	{r4, r5, r6, lr}
    if (error >= -pd->e_deadband && error <= pd->e_deadband) {
 8003878:	6986      	ldr	r6, [r0, #24]
 800387a:	061b      	lsls	r3, r3, #24
float pd_control(PID_Controller_t *pd, float error) {
 800387c:	0004      	movs	r4, r0
    if (error >= -pd->e_deadband && error <= pd->e_deadband) {
 800387e:	18f0      	adds	r0, r6, r3
float pd_control(PID_Controller_t *pd, float error) {
 8003880:	1c0d      	adds	r5, r1, #0
    if (error >= -pd->e_deadband && error <= pd->e_deadband) {
 8003882:	f7fc fce7 	bl	8000254 <__aeabi_fcmple>
 8003886:	2800      	cmp	r0, #0
 8003888:	d005      	beq.n	8003896 <pd_control+0x22>
 800388a:	1c29      	adds	r1, r5, #0
 800388c:	1c30      	adds	r0, r6, #0
 800388e:	f7fc fcf5 	bl	800027c <__aeabi_fcmpge>
 8003892:	2800      	cmp	r0, #0
 8003894:	d12a      	bne.n	80038ec <pd_control+0x78>
        pd->last_error = 0.0f;  // Reset last_error ketika dalam deadband
        return 0.0f;
    }

    float derivative = (error - pd->last_error);
 8003896:	69e1      	ldr	r1, [r4, #28]
 8003898:	1c28      	adds	r0, r5, #0
 800389a:	f7fd fa13 	bl	8000cc4 <__aeabi_fsub>

    pd->last_error = error;

    float p_term = pd->kp * error;
    float d_term = pd->kd / pd->ts * derivative;
 800389e:	6961      	ldr	r1, [r4, #20]
    float derivative = (error - pd->last_error);
 80038a0:	1c06      	adds	r6, r0, #0
    pd->last_error = error;
 80038a2:	61e5      	str	r5, [r4, #28]
    float d_term = pd->kd / pd->ts * derivative;
 80038a4:	68a0      	ldr	r0, [r4, #8]
 80038a6:	f7fc fee5 	bl	8000674 <__aeabi_fdiv>
 80038aa:	1c31      	adds	r1, r6, #0
 80038ac:	f7fd f8b0 	bl	8000a10 <__aeabi_fmul>
    float p_term = pd->kp * error;
 80038b0:	6821      	ldr	r1, [r4, #0]
    float d_term = pd->kd / pd->ts * derivative;
 80038b2:	1c06      	adds	r6, r0, #0
    float p_term = pd->kp * error;
 80038b4:	1c28      	adds	r0, r5, #0
 80038b6:	f7fd f8ab 	bl	8000a10 <__aeabi_fmul>
 80038ba:	1c01      	adds	r1, r0, #0

    float output = p_term + d_term;
 80038bc:	1c30      	adds	r0, r6, #0
 80038be:	f7fc fce7 	bl	8000290 <__aeabi_fadd>

    // Output clamping
    if (output > pd->out_max) {
 80038c2:	6924      	ldr	r4, [r4, #16]
    float output = p_term + d_term;
 80038c4:	1c05      	adds	r5, r0, #0
    if (output > pd->out_max) {
 80038c6:	1c01      	adds	r1, r0, #0
 80038c8:	1c20      	adds	r0, r4, #0
 80038ca:	f7fc fcb9 	bl	8000240 <__aeabi_fcmplt>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d10a      	bne.n	80038e8 <pd_control+0x74>
        output = pd->out_max;
    }
    else if (output < -pd->out_max) {
 80038d2:	2380      	movs	r3, #128	@ 0x80
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	469c      	mov	ip, r3
 80038d8:	4464      	add	r4, ip
 80038da:	1c29      	adds	r1, r5, #0
 80038dc:	1c20      	adds	r0, r4, #0
 80038de:	f7fc fccd 	bl	800027c <__aeabi_fcmpge>
 80038e2:	2800      	cmp	r0, #0
 80038e4:	d100      	bne.n	80038e8 <pd_control+0x74>
 80038e6:	1c2c      	adds	r4, r5, #0
        output = -pd->out_max;
    }

    return output;
}
 80038e8:	1c20      	adds	r0, r4, #0
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
        pd->last_error = 0.0f;  // Reset last_error ketika dalam deadband
 80038ec:	2300      	movs	r3, #0
 80038ee:	61e3      	str	r3, [r4, #28]
        return 0.0f;
 80038f0:	1c1c      	adds	r4, r3, #0
 80038f2:	e7f9      	b.n	80038e8 <pd_control+0x74>

080038f4 <MX_SPI2_Init>:

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80038f4:	22e0      	movs	r2, #224	@ 0xe0
  hspi2.Instance = SPI2;
 80038f6:	4811      	ldr	r0, [pc, #68]	@ (800393c <MX_SPI2_Init+0x48>)
 80038f8:	4b11      	ldr	r3, [pc, #68]	@ (8003940 <MX_SPI2_Init+0x4c>)
{
 80038fa:	b510      	push	{r4, lr}
  hspi2.Instance = SPI2;
 80038fc:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038fe:	2382      	movs	r3, #130	@ 0x82
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003900:	00d2      	lsls	r2, r2, #3
 8003902:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003904:	2280      	movs	r2, #128	@ 0x80
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800390a:	2300      	movs	r3, #0
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800390c:	0092      	lsls	r2, r2, #2
 800390e:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003910:	3af1      	subs	r2, #241	@ 0xf1
 8003912:	3aff      	subs	r2, #255	@ 0xff
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003914:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003916:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003918:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800391a:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800391c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800391e:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003920:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003922:	3a09      	subs	r2, #9
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003924:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003926:	3308      	adds	r3, #8
  hspi2.Init.CRCPolynomial = 7;
 8003928:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800392a:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800392c:	f002 f9e0 	bl	8005cf0 <HAL_SPI_Init>
 8003930:	2800      	cmp	r0, #0
 8003932:	d100      	bne.n	8003936 <MX_SPI2_Init+0x42>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003934:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003936:	f7ff ff2f 	bl	8003798 <Error_Handler>
}
 800393a:	e7fb      	b.n	8003934 <MX_SPI2_Init+0x40>
 800393c:	2000032c 	.word	0x2000032c
 8003940:	40003800 	.word	0x40003800

08003944 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003946:	46c6      	mov	lr, r8
 8003948:	0004      	movs	r4, r0
 800394a:	b500      	push	{lr}
 800394c:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394e:	2214      	movs	r2, #20
 8003950:	2100      	movs	r1, #0
 8003952:	a804      	add	r0, sp, #16
 8003954:	f003 fd02 	bl	800735c <memset>
  if(spiHandle->Instance==SPI2)
 8003958:	4b3f      	ldr	r3, [pc, #252]	@ (8003a58 <HAL_SPI_MspInit+0x114>)
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d003      	beq.n	8003968 <HAL_SPI_MspInit+0x24>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003960:	b00a      	add	sp, #40	@ 0x28
 8003962:	bc80      	pop	{r7}
 8003964:	46b8      	mov	r8, r7
 8003966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003968:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396a:	2701      	movs	r7, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800396c:	2502      	movs	r5, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 800396e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a5c <HAL_SPI_MspInit+0x118>)
 8003970:	01c9      	lsls	r1, r1, #7
 8003972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003974:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003976:	430a      	orrs	r2, r1
 8003978:	63da      	str	r2, [r3, #60]	@ 0x3c
 800397a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI2_CLK_ENABLE();
 800397e:	400a      	ands	r2, r1
 8003980:	9201      	str	r2, [sp, #4]
 8003982:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003986:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003988:	433a      	orrs	r2, r7
 800398a:	635a      	str	r2, [r3, #52]	@ 0x34
 800398c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003990:	403a      	ands	r2, r7
 8003992:	9202      	str	r2, [sp, #8]
 8003994:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003998:	432a      	orrs	r2, r5
 800399a:	635a      	str	r2, [r3, #52]	@ 0x34
 800399c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800399e:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a0:	402b      	ands	r3, r5
 80039a2:	9303      	str	r3, [sp, #12]
 80039a4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80039a6:	2302      	movs	r3, #2
 80039a8:	9204      	str	r2, [sp, #16]
 80039aa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ac:	f001 f90e 	bl	8004bcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039b0:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b2:	482b      	ldr	r0, [pc, #172]	@ (8003a60 <HAL_SPI_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039b4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 80039b8:	3b3c      	subs	r3, #60	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ba:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 80039bc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039be:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c0:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c2:	f001 f903 	bl	8004bcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039c6:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c8:	4825      	ldr	r0, [pc, #148]	@ (8003a60 <HAL_SPI_MspInit+0x11c>)
 80039ca:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039cc:	4698      	mov	r8, r3
 80039ce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d4:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80039d6:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039d8:	f001 f8f8 	bl	8004bcc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel2;
 80039dc:	4d21      	ldr	r5, [pc, #132]	@ (8003a64 <HAL_SPI_MspInit+0x120>)
 80039de:	4b22      	ldr	r3, [pc, #136]	@ (8003a68 <HAL_SPI_MspInit+0x124>)
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80039e0:	0028      	movs	r0, r5
    hdma_spi2_rx.Instance = DMA1_Channel2;
 80039e2:	602b      	str	r3, [r5, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80039e4:	2312      	movs	r3, #18
 80039e6:	606b      	str	r3, [r5, #4]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039e8:	4643      	mov	r3, r8
 80039ea:	612b      	str	r3, [r5, #16]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80039ec:	2380      	movs	r3, #128	@ 0x80
 80039ee:	015b      	lsls	r3, r3, #5
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039f0:	60ae      	str	r6, [r5, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039f2:	60ee      	str	r6, [r5, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039f4:	616e      	str	r6, [r5, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039f6:	61ae      	str	r6, [r5, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80039f8:	61ee      	str	r6, [r5, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80039fa:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80039fc:	f000 ff70 	bl	80048e0 <HAL_DMA_Init>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d122      	bne.n	8003a4a <HAL_SPI_MspInit+0x106>
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8003a04:	4b19      	ldr	r3, [pc, #100]	@ (8003a6c <HAL_SPI_MspInit+0x128>)
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8003a06:	65a5      	str	r5, [r4, #88]	@ 0x58
 8003a08:	62ac      	str	r4, [r5, #40]	@ 0x28
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8003a0a:	4d19      	ldr	r5, [pc, #100]	@ (8003a70 <HAL_SPI_MspInit+0x12c>)
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a0c:	2280      	movs	r2, #128	@ 0x80
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8003a0e:	602b      	str	r3, [r5, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8003a10:	2313      	movs	r3, #19
 8003a12:	606b      	str	r3, [r5, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a14:	3b03      	subs	r3, #3
 8003a16:	60ab      	str	r3, [r5, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60eb      	str	r3, [r5, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a1c:	616b      	str	r3, [r5, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a1e:	61ab      	str	r3, [r5, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003a20:	61eb      	str	r3, [r5, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003a22:	2380      	movs	r3, #128	@ 0x80
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003a24:	0028      	movs	r0, r5
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003a26:	015b      	lsls	r3, r3, #5
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a28:	612a      	str	r2, [r5, #16]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003a2a:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003a2c:	f000 ff58 	bl	80048e0 <HAL_DMA_Init>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d10d      	bne.n	8003a50 <HAL_SPI_MspInit+0x10c>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003a34:	2200      	movs	r2, #0
 8003a36:	2100      	movs	r1, #0
 8003a38:	201a      	movs	r0, #26
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8003a3a:	6565      	str	r5, [r4, #84]	@ 0x54
 8003a3c:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003a3e:	f000 feff 	bl	8004840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003a42:	201a      	movs	r0, #26
 8003a44:	f000 ff26 	bl	8004894 <HAL_NVIC_EnableIRQ>
}
 8003a48:	e78a      	b.n	8003960 <HAL_SPI_MspInit+0x1c>
      Error_Handler();
 8003a4a:	f7ff fea5 	bl	8003798 <Error_Handler>
 8003a4e:	e7d9      	b.n	8003a04 <HAL_SPI_MspInit+0xc0>
      Error_Handler();
 8003a50:	f7ff fea2 	bl	8003798 <Error_Handler>
 8003a54:	e7ee      	b.n	8003a34 <HAL_SPI_MspInit+0xf0>
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	40003800 	.word	0x40003800
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	50000400 	.word	0x50000400
 8003a64:	200002d0 	.word	0x200002d0
 8003a68:	4002001c 	.word	0x4002001c
 8003a6c:	40020030 	.word	0x40020030
 8003a70:	20000274 	.word	0x20000274

08003a74 <HAL_SPI_TxRxCpltCallback>:
}

/* USER CODE BEGIN 1 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){

	if (hspi->Instance == SPI2) {
 8003a74:	4b04      	ldr	r3, [pc, #16]	@ (8003a88 <HAL_SPI_TxRxCpltCallback+0x14>)
 8003a76:	6802      	ldr	r2, [r0, #0]
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8003a78:	b510      	push	{r4, lr}
	if (hspi->Instance == SPI2) {
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d000      	beq.n	8003a80 <HAL_SPI_TxRxCpltCallback+0xc>





}
 8003a7e:	bd10      	pop	{r4, pc}
		MA330_get_degree(&ma330data);
 8003a80:	4802      	ldr	r0, [pc, #8]	@ (8003a8c <HAL_SPI_TxRxCpltCallback+0x18>)
 8003a82:	f7ff f9e3 	bl	8002e4c <MA330_get_degree>
}
 8003a86:	e7fa      	b.n	8003a7e <HAL_SPI_TxRxCpltCallback+0xa>
 8003a88:	40003800 	.word	0x40003800
 8003a8c:	2000022c 	.word	0x2000022c

08003a90 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a90:	2201      	movs	r2, #1
 8003a92:	4b0a      	ldr	r3, [pc, #40]	@ (8003abc <HAL_MspInit+0x2c>)
{
 8003a94:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a96:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003a98:	4311      	orrs	r1, r2
 8003a9a:	6419      	str	r1, [r3, #64]	@ 0x40
 8003a9c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003a9e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa2:	9200      	str	r2, [sp, #0]
 8003aa4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003aa8:	0549      	lsls	r1, r1, #21
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab0:	400b      	ands	r3, r1
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ab6:	b002      	add	sp, #8
 8003ab8:	4770      	bx	lr
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	40021000 	.word	0x40021000

08003ac0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ac0:	e7fe      	b.n	8003ac0 <NMI_Handler>
 8003ac2:	46c0      	nop			@ (mov r8, r8)

08003ac4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ac4:	e7fe      	b.n	8003ac4 <HardFault_Handler>
 8003ac6:	46c0      	nop			@ (mov r8, r8)

08003ac8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003ac8:	4770      	bx	lr
 8003aca:	46c0      	nop			@ (mov r8, r8)

08003acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8003acc:	4770      	bx	lr
 8003ace:	46c0      	nop			@ (mov r8, r8)

08003ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ad0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ad2:	f000 fa5f 	bl	8003f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ad6:	bd10      	pop	{r4, pc}

08003ad8 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003ad8:	2080      	movs	r0, #128	@ 0x80
{
 8003ada:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003adc:	0140      	lsls	r0, r0, #5
 8003ade:	f001 fa33 	bl	8004f48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003ae2:	bd10      	pop	{r4, pc}

08003ae4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ae4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ae6:	4802      	ldr	r0, [pc, #8]	@ (8003af0 <DMA1_Channel1_IRQHandler+0xc>)
 8003ae8:	f001 f814 	bl	8004b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003aec:	bd10      	pop	{r4, pc}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	20000028 	.word	0x20000028

08003af4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003af4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003af6:	4803      	ldr	r0, [pc, #12]	@ (8003b04 <DMA1_Channel2_3_IRQHandler+0x10>)
 8003af8:	f001 f80c 	bl	8004b14 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003afc:	4802      	ldr	r0, [pc, #8]	@ (8003b08 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003afe:	f001 f809 	bl	8004b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003b02:	bd10      	pop	{r4, pc}
 8003b04:	200002d0 	.word	0x200002d0
 8003b08:	20000274 	.word	0x20000274

08003b0c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003b0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003b0e:	4802      	ldr	r0, [pc, #8]	@ (8003b18 <ADC1_IRQHandler+0xc>)
 8003b10:	f000 fbda 	bl	80042c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003b14:	bd10      	pop	{r4, pc}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	20000084 	.word	0x20000084

08003b1c <TIM1_CC_IRQHandler>:
  */
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
    // Teste ET la source ET le flag (pattern HAL)
    if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC4) &&
 8003b1c:	2310      	movs	r3, #16
{
 8003b1e:	b510      	push	{r4, lr}
    if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC4) &&
 8003b20:	4c0f      	ldr	r4, [pc, #60]	@ (8003b60 <TIM1_CC_IRQHandler+0x44>)
 8003b22:	6822      	ldr	r2, [r4, #0]
 8003b24:	68d1      	ldr	r1, [r2, #12]
 8003b26:	420b      	tst	r3, r1
 8003b28:	d00f      	beq.n	8003b4a <TIM1_CC_IRQHandler+0x2e>
        __HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC4))
 8003b2a:	6911      	ldr	r1, [r2, #16]
    if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC4) &&
 8003b2c:	420b      	tst	r3, r1
 8003b2e:	d00c      	beq.n	8003b4a <TIM1_CC_IRQHandler+0x2e>
    {
        __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC4);   // efface CC4IF
 8003b30:	2111      	movs	r1, #17
 8003b32:	4249      	negs	r1, r1
 8003b34:	6111      	str	r1, [r2, #16]

        // Direction: 0 = montée, 1 = descente
        if ((TIM1->CR1 & TIM_CR1_DIR) == 0) {
 8003b36:	4a0b      	ldr	r2, [pc, #44]	@ (8003b64 <TIM1_CC_IRQHandler+0x48>)
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	4213      	tst	r3, r2
 8003b3c:	d109      	bne.n	8003b52 <TIM1_CC_IRQHandler+0x36>
            // Montée
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8003b3e:	20a0      	movs	r0, #160	@ 0xa0
 8003b40:	2201      	movs	r2, #1
 8003b42:	3115      	adds	r1, #21
 8003b44:	05c0      	lsls	r0, r0, #23
 8003b46:	f001 f9f1 	bl	8004f2c <HAL_GPIO_WritePin>

        // (tes mesures temps avec TIM2 ici si tu veux)
    }

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b4a:	0020      	movs	r0, r4
 8003b4c:	f003 fa2e 	bl	8006fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003b50:	bd10      	pop	{r4, pc}
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8003b52:	20a0      	movs	r0, #160	@ 0xa0
 8003b54:	2200      	movs	r2, #0
 8003b56:	2104      	movs	r1, #4
 8003b58:	05c0      	lsls	r0, r0, #23
 8003b5a:	f001 f9e7 	bl	8004f2c <HAL_GPIO_WritePin>
 8003b5e:	e7f4      	b.n	8003b4a <TIM1_CC_IRQHandler+0x2e>
 8003b60:	200003dc 	.word	0x200003dc
 8003b64:	40012c00 	.word	0x40012c00

08003b68 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003b68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003b6a:	4802      	ldr	r0, [pc, #8]	@ (8003b74 <SPI2_IRQHandler+0xc>)
 8003b6c:	f002 fcda 	bl	8006524 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003b70:	bd10      	pop	{r4, pc}
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	2000032c 	.word	0x2000032c

08003b78 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b78:	4770      	bx	lr
 8003b7a:	46c0      	nop			@ (mov r8, r8)

08003b7c <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b7c:	b510      	push	{r4, lr}
 8003b7e:	b088      	sub	sp, #32

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b80:	2210      	movs	r2, #16
 8003b82:	2100      	movs	r1, #0
 8003b84:	a804      	add	r0, sp, #16
 8003b86:	f003 fbe9 	bl	800735c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b8a:	220c      	movs	r2, #12
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	a801      	add	r0, sp, #4
 8003b90:	f003 fbe4 	bl	800735c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b94:	2380      	movs	r3, #128	@ 0x80
 8003b96:	4c16      	ldr	r4, [pc, #88]	@ (8003bf0 <MX_TIM2_Init+0x74>)
 8003b98:	05db      	lsls	r3, r3, #23
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
 8003b9a:	2201      	movs	r2, #1
  htim2.Instance = TIM2;
 8003b9c:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 8003b9e:	2300      	movs	r3, #0
  htim2.Init.Period = 4294967295;
 8003ba0:	4252      	negs	r2, r2
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ba2:	0020      	movs	r0, r4
  htim2.Init.Prescaler = 0;
 8003ba4:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba6:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 4294967295;
 8003ba8:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003baa:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bac:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003bae:	f002 fd71 	bl	8006694 <HAL_TIM_Base_Init>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d113      	bne.n	8003bde <MX_TIM2_Init+0x62>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bb6:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003bb8:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bba:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003bbc:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bbe:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003bc0:	f003 f938 	bl	8006e34 <HAL_TIM_ConfigClockSource>
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	d110      	bne.n	8003bea <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bc8:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003bca:	0020      	movs	r0, r4
 8003bcc:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bce:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bd0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003bd2:	f003 faed 	bl	80071b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d104      	bne.n	8003be4 <MX_TIM2_Init+0x68>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003bda:	b008      	add	sp, #32
 8003bdc:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003bde:	f7ff fddb 	bl	8003798 <Error_Handler>
 8003be2:	e7e8      	b.n	8003bb6 <MX_TIM2_Init+0x3a>
    Error_Handler();
 8003be4:	f7ff fdd8 	bl	8003798 <Error_Handler>
}
 8003be8:	e7f7      	b.n	8003bda <MX_TIM2_Init+0x5e>
    Error_Handler();
 8003bea:	f7ff fdd5 	bl	8003798 <Error_Handler>
 8003bee:	e7eb      	b.n	8003bc8 <MX_TIM2_Init+0x4c>
 8003bf0:	20000390 	.word	0x20000390

08003bf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	0004      	movs	r4, r0
 8003bf8:	b094      	sub	sp, #80	@ 0x50

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfa:	2214      	movs	r2, #20
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	a804      	add	r0, sp, #16
 8003c00:	f003 fbac 	bl	800735c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c04:	2228      	movs	r2, #40	@ 0x28
 8003c06:	2100      	movs	r1, #0
 8003c08:	a80a      	add	r0, sp, #40	@ 0x28
 8003c0a:	f003 fba7 	bl	800735c <memset>
  if(tim_baseHandle->Instance==TIM1)
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	4a23      	ldr	r2, [pc, #140]	@ (8003ca0 <HAL_TIM_Base_MspInit+0xac>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00f      	beq.n	8003c36 <HAL_TIM_Base_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8003c16:	2280      	movs	r2, #128	@ 0x80
 8003c18:	05d2      	lsls	r2, r2, #23
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d001      	beq.n	8003c22 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003c1e:	b014      	add	sp, #80	@ 0x50
 8003c20:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c22:	2301      	movs	r3, #1
 8003c24:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca4 <HAL_TIM_Base_MspInit+0xb0>)
 8003c26:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003c28:	4319      	orrs	r1, r3
 8003c2a:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8003c2c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c2e:	4013      	ands	r3, r2
 8003c30:	9303      	str	r3, [sp, #12]
 8003c32:	9b03      	ldr	r3, [sp, #12]
}
 8003c34:	e7f3      	b.n	8003c1e <HAL_TIM_Base_MspInit+0x2a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8003c36:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c38:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8003c3a:	039b      	lsls	r3, r3, #14
 8003c3c:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c3e:	f001 fd4b 	bl	80056d8 <HAL_RCCEx_PeriphCLKConfig>
 8003c42:	2800      	cmp	r0, #0
 8003c44:	d128      	bne.n	8003c98 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c46:	2180      	movs	r1, #128	@ 0x80
 8003c48:	4b16      	ldr	r3, [pc, #88]	@ (8003ca4 <HAL_TIM_Base_MspInit+0xb0>)
 8003c4a:	0109      	lsls	r1, r1, #4
 8003c4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c4e:	2080      	movs	r0, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c50:	430a      	orrs	r2, r1
 8003c52:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c56:	0140      	lsls	r0, r0, #5
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c58:	400a      	ands	r2, r1
 8003c5a:	9201      	str	r2, [sp, #4]
 8003c5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c5e:	2202      	movs	r2, #2
 8003c60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c62:	4311      	orrs	r1, r2
 8003c64:	6359      	str	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c66:	2112      	movs	r1, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c6a:	9004      	str	r0, [sp, #16]
 8003c6c:	9105      	str	r1, [sp, #20]
 8003c6e:	2001      	movs	r0, #1
 8003c70:	2100      	movs	r1, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c72:	4013      	ands	r3, r2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c74:	9006      	str	r0, [sp, #24]
 8003c76:	9107      	str	r1, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c78:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c7a:	a904      	add	r1, sp, #16
 8003c7c:	480a      	ldr	r0, [pc, #40]	@ (8003ca8 <HAL_TIM_Base_MspInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003c80:	9208      	str	r2, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c82:	f000 ffa3 	bl	8004bcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003c86:	2200      	movs	r2, #0
 8003c88:	2100      	movs	r1, #0
 8003c8a:	200e      	movs	r0, #14
 8003c8c:	f000 fdd8 	bl	8004840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003c90:	200e      	movs	r0, #14
 8003c92:	f000 fdff 	bl	8004894 <HAL_NVIC_EnableIRQ>
 8003c96:	e7c2      	b.n	8003c1e <HAL_TIM_Base_MspInit+0x2a>
      Error_Handler();
 8003c98:	f7ff fd7e 	bl	8003798 <Error_Handler>
 8003c9c:	e7d3      	b.n	8003c46 <HAL_TIM_Base_MspInit+0x52>
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	50000400 	.word	0x50000400

08003cac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003cac:	b510      	push	{r4, lr}
 8003cae:	0004      	movs	r4, r0
 8003cb0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb2:	2214      	movs	r2, #20
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	a802      	add	r0, sp, #8
 8003cb8:	f003 fb50 	bl	800735c <memset>
  if(timHandle->Instance==TIM1)
 8003cbc:	4b17      	ldr	r3, [pc, #92]	@ (8003d1c <HAL_TIM_MspPostInit+0x70>)
 8003cbe:	6822      	ldr	r2, [r4, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003cc4:	b008      	add	sp, #32
 8003cc6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc8:	2402      	movs	r4, #2
 8003cca:	4b15      	ldr	r3, [pc, #84]	@ (8003d20 <HAL_TIM_MspPostInit+0x74>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ccc:	4815      	ldr	r0, [pc, #84]	@ (8003d24 <HAL_TIM_MspPostInit+0x78>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cd0:	4322      	orrs	r2, r4
 8003cd2:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cd6:	4022      	ands	r2, r4
 8003cd8:	9200      	str	r2, [sp, #0]
 8003cda:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cdc:	2201      	movs	r2, #1
 8003cde:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ce0:	4311      	orrs	r1, r2
 8003ce2:	6359      	str	r1, [r3, #52]	@ 0x34
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce8:	401a      	ands	r2, r3
 8003cea:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003cec:	22e0      	movs	r2, #224	@ 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	0212      	lsls	r2, r2, #8
 8003cf4:	9202      	str	r2, [sp, #8]
 8003cf6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003cf8:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cfa:	f000 ff67 	bl	8004bcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003cfe:	23e0      	movs	r3, #224	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d00:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d06:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d08:	a902      	add	r1, sp, #8
 8003d0a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d10:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003d12:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d14:	f000 ff5a 	bl	8004bcc <HAL_GPIO_Init>
}
 8003d18:	e7d4      	b.n	8003cc4 <HAL_TIM_MspPostInit+0x18>
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	40012c00 	.word	0x40012c00
 8003d20:	40021000 	.word	0x40021000
 8003d24:	50000400 	.word	0x50000400

08003d28 <MX_TIM1_Init>:
{
 8003d28:	b510      	push	{r4, lr}
 8003d2a:	b0a0      	sub	sp, #128	@ 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	2100      	movs	r1, #0
 8003d30:	a808      	add	r0, sp, #32
 8003d32:	f003 fb13 	bl	800735c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d36:	220c      	movs	r2, #12
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4668      	mov	r0, sp
 8003d3c:	f003 fb0e 	bl	800735c <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8003d40:	220c      	movs	r2, #12
 8003d42:	2100      	movs	r1, #0
 8003d44:	a804      	add	r0, sp, #16
 8003d46:	f003 fb09 	bl	800735c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d4a:	221c      	movs	r2, #28
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	a80c      	add	r0, sp, #48	@ 0x30
 8003d50:	f003 fb04 	bl	800735c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d54:	2234      	movs	r2, #52	@ 0x34
 8003d56:	2100      	movs	r1, #0
 8003d58:	a813      	add	r0, sp, #76	@ 0x4c
 8003d5a:	f003 faff 	bl	800735c <memset>
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003d5e:	2220      	movs	r2, #32
  htim1.Instance = TIM1;
 8003d60:	4c56      	ldr	r4, [pc, #344]	@ (8003ebc <MX_TIM1_Init+0x194>)
 8003d62:	4b57      	ldr	r3, [pc, #348]	@ (8003ec0 <MX_TIM1_Init+0x198>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003d64:	60a2      	str	r2, [r4, #8]
  htim1.Init.Period = 1600;
 8003d66:	22c8      	movs	r2, #200	@ 0xc8
  htim1.Instance = TIM1;
 8003d68:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
 8003d6a:	2300      	movs	r3, #0
  htim1.Init.Period = 1600;
 8003d6c:	00d2      	lsls	r2, r2, #3
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d6e:	0020      	movs	r0, r4
  htim1.Init.Prescaler = 0;
 8003d70:	6063      	str	r3, [r4, #4]
  htim1.Init.Period = 1600;
 8003d72:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d74:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d76:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d78:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d7a:	f002 fc8b 	bl	8006694 <HAL_TIM_Base_Init>
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	d000      	beq.n	8003d84 <MX_TIM1_Init+0x5c>
 8003d82:	e07d      	b.n	8003e80 <MX_TIM1_Init+0x158>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d84:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003d86:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d88:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003d8a:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d8c:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003d8e:	f003 f851 	bl	8006e34 <HAL_TIM_ConfigClockSource>
 8003d92:	2800      	cmp	r0, #0
 8003d94:	d000      	beq.n	8003d98 <MX_TIM1_Init+0x70>
 8003d96:	e08e      	b.n	8003eb6 <MX_TIM1_Init+0x18e>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d98:	0020      	movs	r0, r4
 8003d9a:	f002 fd33 	bl	8006804 <HAL_TIM_PWM_Init>
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d000      	beq.n	8003da4 <MX_TIM1_Init+0x7c>
 8003da2:	e085      	b.n	8003eb0 <MX_TIM1_Init+0x188>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003da4:	23e0      	movs	r3, #224	@ 0xe0
 8003da6:	2200      	movs	r2, #0
 8003da8:	03db      	lsls	r3, r3, #15
 8003daa:	9200      	str	r2, [sp, #0]
 8003dac:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dae:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003db0:	4669      	mov	r1, sp
 8003db2:	0020      	movs	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003db4:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003db6:	f003 f9fb 	bl	80071b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	d000      	beq.n	8003dc0 <MX_TIM1_Init+0x98>
 8003dbe:	e074      	b.n	8003eaa <MX_TIM1_Init+0x182>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	9204      	str	r2, [sp, #16]
 8003dc6:	9305      	str	r3, [sp, #20]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8003dc8:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8003dca:	2101      	movs	r1, #1
 8003dcc:	0020      	movs	r0, r4
 8003dce:	aa04      	add	r2, sp, #16
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8003dd0:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8003dd2:	f003 fa85 	bl	80072e0 <HAL_TIMEx_ConfigBreakInput>
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d164      	bne.n	8003ea4 <MX_TIM1_Init+0x17c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dda:	2360      	movs	r3, #96	@ 0x60
 8003ddc:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfigOC.Pulse = 400;
 8003dde:	3331      	adds	r3, #49	@ 0x31
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003de0:	2004      	movs	r0, #4
 8003de2:	2100      	movs	r1, #0
  sConfigOC.Pulse = 400;
 8003de4:	33ff      	adds	r3, #255	@ 0xff
 8003de6:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003de8:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003dea:	9010      	str	r0, [sp, #64]	@ 0x40
 8003dec:	9111      	str	r1, [sp, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003dee:	2200      	movs	r2, #0
 8003df0:	0020      	movs	r0, r4
 8003df2:	a90c      	add	r1, sp, #48	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003df4:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003df6:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003df8:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003dfa:	f002 fe73 	bl	8006ae4 <HAL_TIM_PWM_ConfigChannel>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	d14d      	bne.n	8003e9e <MX_TIM1_Init+0x176>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e02:	2204      	movs	r2, #4
 8003e04:	0020      	movs	r0, r4
 8003e06:	a90c      	add	r1, sp, #48	@ 0x30
 8003e08:	f002 fe6c 	bl	8006ae4 <HAL_TIM_PWM_ConfigChannel>
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	d143      	bne.n	8003e98 <MX_TIM1_Init+0x170>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e10:	2208      	movs	r2, #8
 8003e12:	0020      	movs	r0, r4
 8003e14:	a90c      	add	r1, sp, #48	@ 0x30
 8003e16:	f002 fe65 	bl	8006ae4 <HAL_TIM_PWM_ConfigChannel>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d139      	bne.n	8003e92 <MX_TIM1_Init+0x16a>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003e1e:	2270      	movs	r2, #112	@ 0x70
 8003e20:	4b28      	ldr	r3, [pc, #160]	@ (8003ec4 <MX_TIM1_Init+0x19c>)
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e22:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003e24:	920c      	str	r2, [sp, #48]	@ 0x30
 8003e26:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e28:	a90c      	add	r1, sp, #48	@ 0x30
 8003e2a:	3a64      	subs	r2, #100	@ 0x64
 8003e2c:	f002 fe5a 	bl	8006ae4 <HAL_TIM_PWM_ConfigChannel>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d12b      	bne.n	8003e8c <MX_TIM1_Init+0x164>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	4924      	ldr	r1, [pc, #144]	@ (8003ec8 <MX_TIM1_Init+0x1a0>)
 8003e38:	69d3      	ldr	r3, [r2, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e3a:	0020      	movs	r0, r4
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8003e3c:	400b      	ands	r3, r1
 8003e3e:	61d3      	str	r3, [r2, #28]
  sBreakDeadTimeConfig.DeadTime = 26;
 8003e40:	221a      	movs	r2, #26
 8003e42:	9216      	str	r2, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8003e44:	2280      	movs	r2, #128	@ 0x80
 8003e46:	0152      	lsls	r2, r2, #5
 8003e48:	9217      	str	r2, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e4a:	2280      	movs	r2, #128	@ 0x80
 8003e4c:	0192      	lsls	r2, r2, #6
 8003e4e:	9218      	str	r2, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.BreakFilter = 3;
 8003e50:	2203      	movs	r2, #3
 8003e52:	9219      	str	r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003e54:	2280      	movs	r2, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e56:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003e58:	0492      	lsls	r2, r2, #18
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e5a:	a913      	add	r1, sp, #76	@ 0x4c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e5c:	9313      	str	r3, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e5e:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e60:	9315      	str	r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003e62:	931a      	str	r3, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003e64:	931b      	str	r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003e66:	921c      	str	r2, [sp, #112]	@ 0x70
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003e68:	931d      	str	r3, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003e6a:	931e      	str	r3, [sp, #120]	@ 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e6c:	931f      	str	r3, [sp, #124]	@ 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e6e:	f003 f9d7 	bl	8007220 <HAL_TIMEx_ConfigBreakDeadTime>
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d107      	bne.n	8003e86 <MX_TIM1_Init+0x15e>
  HAL_TIM_MspPostInit(&htim1);
 8003e76:	0020      	movs	r0, r4
 8003e78:	f7ff ff18 	bl	8003cac <HAL_TIM_MspPostInit>
}
 8003e7c:	b020      	add	sp, #128	@ 0x80
 8003e7e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003e80:	f7ff fc8a 	bl	8003798 <Error_Handler>
 8003e84:	e77e      	b.n	8003d84 <MX_TIM1_Init+0x5c>
    Error_Handler();
 8003e86:	f7ff fc87 	bl	8003798 <Error_Handler>
 8003e8a:	e7f4      	b.n	8003e76 <MX_TIM1_Init+0x14e>
    Error_Handler();
 8003e8c:	f7ff fc84 	bl	8003798 <Error_Handler>
 8003e90:	e7d0      	b.n	8003e34 <MX_TIM1_Init+0x10c>
    Error_Handler();
 8003e92:	f7ff fc81 	bl	8003798 <Error_Handler>
 8003e96:	e7c2      	b.n	8003e1e <MX_TIM1_Init+0xf6>
    Error_Handler();
 8003e98:	f7ff fc7e 	bl	8003798 <Error_Handler>
 8003e9c:	e7b8      	b.n	8003e10 <MX_TIM1_Init+0xe8>
    Error_Handler();
 8003e9e:	f7ff fc7b 	bl	8003798 <Error_Handler>
 8003ea2:	e7ae      	b.n	8003e02 <MX_TIM1_Init+0xda>
    Error_Handler();
 8003ea4:	f7ff fc78 	bl	8003798 <Error_Handler>
 8003ea8:	e797      	b.n	8003dda <MX_TIM1_Init+0xb2>
    Error_Handler();
 8003eaa:	f7ff fc75 	bl	8003798 <Error_Handler>
 8003eae:	e787      	b.n	8003dc0 <MX_TIM1_Init+0x98>
    Error_Handler();
 8003eb0:	f7ff fc72 	bl	8003798 <Error_Handler>
 8003eb4:	e776      	b.n	8003da4 <MX_TIM1_Init+0x7c>
    Error_Handler();
 8003eb6:	f7ff fc6f 	bl	8003798 <Error_Handler>
 8003eba:	e76d      	b.n	8003d98 <MX_TIM1_Init+0x70>
 8003ebc:	200003dc 	.word	0x200003dc
 8003ec0:	40012c00 	.word	0x40012c00
 8003ec4:	0000060d 	.word	0x0000060d
 8003ec8:	fffff7ff 	.word	0xfffff7ff

08003ecc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ecc:	480d      	ldr	r0, [pc, #52]	@ (8003f04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ece:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ed0:	f7ff fe52 	bl	8003b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ed4:	480c      	ldr	r0, [pc, #48]	@ (8003f08 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ed6:	490d      	ldr	r1, [pc, #52]	@ (8003f0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f10 <LoopForever+0xe>)
  movs r3, #0
 8003eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003edc:	e002      	b.n	8003ee4 <LoopCopyDataInit>

08003ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ee2:	3304      	adds	r3, #4

08003ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ee8:	d3f9      	bcc.n	8003ede <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eea:	4a0a      	ldr	r2, [pc, #40]	@ (8003f14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003eec:	4c0a      	ldr	r4, [pc, #40]	@ (8003f18 <LoopForever+0x16>)
  movs r3, #0
 8003eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ef0:	e001      	b.n	8003ef6 <LoopFillZerobss>

08003ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ef4:	3204      	adds	r2, #4

08003ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ef8:	d3fb      	bcc.n	8003ef2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003efa:	f003 fa37 	bl	800736c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003efe:	f7ff fb67 	bl	80035d0 <main>

08003f02 <LoopForever>:

LoopForever:
  b LoopForever
 8003f02:	e7fe      	b.n	8003f02 <LoopForever>
  ldr   r0, =_estack
 8003f04:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003f10:	08008630 	.word	0x08008630
  ldr r2, =_sbss
 8003f14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003f18:	2000042c 	.word	0x2000042c

08003f1c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f1c:	e7fe      	b.n	8003f1c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08003f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f20:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003f22:	4b0f      	ldr	r3, [pc, #60]	@ (8003f60 <HAL_InitTick+0x40>)
{
 8003f24:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8003f26:	7819      	ldrb	r1, [r3, #0]
 8003f28:	2900      	cmp	r1, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f2c:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003f30:	20fa      	movs	r0, #250	@ 0xfa
 8003f32:	0080      	lsls	r0, r0, #2
 8003f34:	f7fc f8e6 	bl	8000104 <__udivsi3>
 8003f38:	4d0a      	ldr	r5, [pc, #40]	@ (8003f64 <HAL_InitTick+0x44>)
 8003f3a:	0001      	movs	r1, r0
 8003f3c:	6828      	ldr	r0, [r5, #0]
 8003f3e:	f7fc f8e1 	bl	8000104 <__udivsi3>
 8003f42:	f000 fcb3 	bl	80048ac <HAL_SYSTICK_Config>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f4a:	2c03      	cmp	r4, #3
 8003f4c:	d8ee      	bhi.n	8003f2c <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f4e:	3801      	subs	r0, #1
 8003f50:	2200      	movs	r2, #0
 8003f52:	0021      	movs	r1, r4
 8003f54:	f000 fc74 	bl	8004840 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f58:	4b03      	ldr	r3, [pc, #12]	@ (8003f68 <HAL_InitTick+0x48>)
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	601c      	str	r4, [r3, #0]
  return status;
 8003f5e:	e7e6      	b.n	8003f2e <HAL_InitTick+0xe>
 8003f60:	20000004 	.word	0x20000004
 8003f64:	20000000 	.word	0x20000000
 8003f68:	20000008 	.word	0x20000008

08003f6c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f6c:	2380      	movs	r3, #128	@ 0x80
 8003f6e:	4a08      	ldr	r2, [pc, #32]	@ (8003f90 <HAL_Init+0x24>)
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	6811      	ldr	r1, [r2, #0]
{
 8003f74:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f76:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f78:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f7a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f7c:	f7ff ffd0 	bl	8003f20 <HAL_InitTick>
 8003f80:	1e04      	subs	r4, r0, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_Init+0x1e>
    status = HAL_ERROR;
 8003f84:	2401      	movs	r4, #1
}
 8003f86:	0020      	movs	r0, r4
 8003f88:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8003f8a:	f7ff fd81 	bl	8003a90 <HAL_MspInit>
 8003f8e:	e7fa      	b.n	8003f86 <HAL_Init+0x1a>
 8003f90:	40022000 	.word	0x40022000

08003f94 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003f94:	4a03      	ldr	r2, [pc, #12]	@ (8003fa4 <HAL_IncTick+0x10>)
 8003f96:	4b04      	ldr	r3, [pc, #16]	@ (8003fa8 <HAL_IncTick+0x14>)
 8003f98:	6811      	ldr	r1, [r2, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	185b      	adds	r3, r3, r1
 8003f9e:	6013      	str	r3, [r2, #0]
}
 8003fa0:	4770      	bx	lr
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	20000428 	.word	0x20000428
 8003fa8:	20000004 	.word	0x20000004

08003fac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003fac:	4b01      	ldr	r3, [pc, #4]	@ (8003fb4 <HAL_GetTick+0x8>)
 8003fae:	6818      	ldr	r0, [r3, #0]
}
 8003fb0:	4770      	bx	lr
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	20000428 	.word	0x20000428

08003fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003fbc:	f7ff fff6 	bl	8003fac <HAL_GetTick>
 8003fc0:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fc2:	1c63      	adds	r3, r4, #1
 8003fc4:	d002      	beq.n	8003fcc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fc6:	4b04      	ldr	r3, [pc, #16]	@ (8003fd8 <HAL_Delay+0x20>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fcc:	f7ff ffee 	bl	8003fac <HAL_GetTick>
 8003fd0:	1b40      	subs	r0, r0, r5
 8003fd2:	42a0      	cmp	r0, r4
 8003fd4:	d3fa      	bcc.n	8003fcc <HAL_Delay+0x14>
  {
  }
}
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
 8003fd8:	20000004 	.word	0x20000004

08003fdc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fde:	46d6      	mov	lr, sl
 8003fe0:	464f      	mov	r7, r9
 8003fe2:	4646      	mov	r6, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fe4:	2300      	movs	r3, #0
{
 8003fe6:	b5c0      	push	{r6, r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8003fec:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fee:	d02c      	beq.n	800404a <HAL_ADC_Init+0x6e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ff0:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8003ff2:	2d00      	cmp	r5, #0
 8003ff4:	d100      	bne.n	8003ff8 <HAL_ADC_Init+0x1c>
 8003ff6:	e0cc      	b.n	8004192 <HAL_ADC_Init+0x1b6>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ff8:	2380      	movs	r3, #128	@ 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ffa:	6825      	ldr	r5, [r4, #0]
 8003ffc:	055b      	lsls	r3, r3, #21
 8003ffe:	68aa      	ldr	r2, [r5, #8]
 8004000:	421a      	tst	r2, r3
 8004002:	d115      	bne.n	8004030 <HAL_ADC_Init+0x54>
  MODIFY_REG(ADCx->CR,
 8004004:	68aa      	ldr	r2, [r5, #8]
 8004006:	497b      	ldr	r1, [pc, #492]	@ (80041f4 <HAL_ADC_Init+0x218>)
 8004008:	400a      	ands	r2, r1
 800400a:	4313      	orrs	r3, r2
 800400c:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800400e:	4b7a      	ldr	r3, [pc, #488]	@ (80041f8 <HAL_ADC_Init+0x21c>)
 8004010:	497a      	ldr	r1, [pc, #488]	@ (80041fc <HAL_ADC_Init+0x220>)
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	f7fc f876 	bl	8000104 <__udivsi3>
 8004018:	3001      	adds	r0, #1
 800401a:	0040      	lsls	r0, r0, #1
 800401c:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 800401e:	9b01      	ldr	r3, [sp, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_ADC_Init+0x54>
    {
      wait_loop_index--;
 8004024:	9b01      	ldr	r3, [sp, #4]
 8004026:	3b01      	subs	r3, #1
 8004028:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800402a:	9b01      	ldr	r3, [sp, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f9      	bne.n	8004024 <HAL_ADC_Init+0x48>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004030:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004032:	2000      	movs	r0, #0
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	d400      	bmi.n	800403a <HAL_ADC_Init+0x5e>
 8004038:	e09d      	b.n	8004176 <HAL_ADC_Init+0x19a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800403a:	68ab      	ldr	r3, [r5, #8]
 800403c:	075b      	lsls	r3, r3, #29
 800403e:	d50b      	bpl.n	8004058 <HAL_ADC_Init+0x7c>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004040:	6da3      	ldr	r3, [r4, #88]	@ 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004042:	2210      	movs	r2, #16
 8004044:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004046:	4313      	orrs	r3, r2
 8004048:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 800404a:	2001      	movs	r0, #1

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 800404c:	b002      	add	sp, #8
 800404e:	bce0      	pop	{r5, r6, r7}
 8004050:	46ba      	mov	sl, r7
 8004052:	46b1      	mov	r9, r6
 8004054:	46a8      	mov	r8, r5
 8004056:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004058:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800405a:	06db      	lsls	r3, r3, #27
 800405c:	d4f1      	bmi.n	8004042 <HAL_ADC_Init+0x66>
    ADC_STATE_CLR_SET(hadc->State,
 800405e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004060:	4a67      	ldr	r2, [pc, #412]	@ (8004200 <HAL_ADC_Init+0x224>)
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004062:	6921      	ldr	r1, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 8004064:	4013      	ands	r3, r2
 8004066:	3206      	adds	r2, #6
 8004068:	32ff      	adds	r2, #255	@ 0xff
 800406a:	4313      	orrs	r3, r2
 800406c:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800406e:	68ab      	ldr	r3, [r5, #8]
 8004070:	07db      	lsls	r3, r3, #31
 8004072:	d45c      	bmi.n	800412e <HAL_ADC_Init+0x152>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004074:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8004076:	68a2      	ldr	r2, [r4, #8]
 8004078:	1e7b      	subs	r3, r7, #1
 800407a:	419f      	sbcs	r7, r3
 800407c:	68e3      	ldr	r3, [r4, #12]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800407e:	7ea6      	ldrb	r6, [r4, #26]
 8004080:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004082:	7e23      	ldrb	r3, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004084:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004086:	039b      	lsls	r3, r3, #14
 8004088:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800408a:	7e63      	ldrb	r3, [r4, #25]
 800408c:	03db      	lsls	r3, r3, #15
 800408e:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004090:	0373      	lsls	r3, r6, #13
 8004092:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004094:	2900      	cmp	r1, #0
 8004096:	da00      	bge.n	800409a <HAL_ADC_Init+0xbe>
 8004098:	e09b      	b.n	80041d2 <HAL_ADC_Init+0x1f6>
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	039b      	lsls	r3, r3, #14
 800409e:	469c      	mov	ip, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80040a0:	232c      	movs	r3, #44	@ 0x2c
 80040a2:	5ce3      	ldrb	r3, [r4, r3]
 80040a4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80040a6:	4313      	orrs	r3, r2
 80040a8:	433b      	orrs	r3, r7
 80040aa:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040ac:	2720      	movs	r7, #32
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80040ae:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040b0:	5de2      	ldrb	r2, [r4, r7]
 80040b2:	2a01      	cmp	r2, #1
 80040b4:	d100      	bne.n	80040b8 <HAL_ADC_Init+0xdc>
 80040b6:	e090      	b.n	80041da <HAL_ADC_Init+0x1fe>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040b8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80040ba:	2a00      	cmp	r2, #0
 80040bc:	d005      	beq.n	80040ca <HAL_ADC_Init+0xee>
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80040be:	26e0      	movs	r6, #224	@ 0xe0
 80040c0:	0076      	lsls	r6, r6, #1
 80040c2:	4032      	ands	r2, r6
 80040c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80040c6:	4332      	orrs	r2, r6
 80040c8:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 80040ca:	273c      	movs	r7, #60	@ 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 80040cc:	68ea      	ldr	r2, [r5, #12]
 80040ce:	4e4d      	ldr	r6, [pc, #308]	@ (8004204 <HAL_ADC_Init+0x228>)
 80040d0:	4032      	ands	r2, r6
 80040d2:	4313      	orrs	r3, r2
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80040d4:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 80040d6:	60eb      	str	r3, [r5, #12]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80040d8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 80040da:	5de7      	ldrb	r7, [r4, r7]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80040dc:	0fb3      	lsrs	r3, r6, #30
 80040de:	079b      	lsls	r3, r3, #30
 80040e0:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80040e2:	46bc      	mov	ip, r7
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80040e4:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80040e6:	2f01      	cmp	r7, #1
 80040e8:	d109      	bne.n	80040fe <HAL_ADC_Init+0x122>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80040ea:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 80040ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80040ee:	433b      	orrs	r3, r7
 80040f0:	431a      	orrs	r2, r3
 80040f2:	4653      	mov	r3, sl
 80040f4:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
 80040f6:	433a      	orrs	r2, r7
 80040f8:	431a      	orrs	r2, r3
 80040fa:	4663      	mov	r3, ip
 80040fc:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 80040fe:	692b      	ldr	r3, [r5, #16]
 8004100:	4f41      	ldr	r7, [pc, #260]	@ (8004208 <HAL_ADC_Init+0x22c>)
 8004102:	403b      	ands	r3, r7
 8004104:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004106:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8004108:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800410a:	0073      	lsls	r3, r6, #1
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	05d2      	lsls	r2, r2, #23
 8004110:	4293      	cmp	r3, r2
 8004112:	d00c      	beq.n	800412e <HAL_ADC_Init+0x152>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004114:	2380      	movs	r3, #128	@ 0x80
 8004116:	061b      	lsls	r3, r3, #24
 8004118:	429e      	cmp	r6, r3
 800411a:	d008      	beq.n	800412e <HAL_ADC_Init+0x152>
        MODIFY_REG(ADC1_COMMON->CCR,
 800411c:	4a3b      	ldr	r2, [pc, #236]	@ (800420c <HAL_ADC_Init+0x230>)
 800411e:	4f3c      	ldr	r7, [pc, #240]	@ (8004210 <HAL_ADC_Init+0x234>)
 8004120:	6813      	ldr	r3, [r2, #0]
 8004122:	403b      	ands	r3, r7
 8004124:	27f0      	movs	r7, #240	@ 0xf0
 8004126:	03bf      	lsls	r7, r7, #14
 8004128:	403e      	ands	r6, r7
 800412a:	4333      	orrs	r3, r6
 800412c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->SMPR,
 800412e:	2607      	movs	r6, #7
 8004130:	2770      	movs	r7, #112	@ 0x70
 8004132:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004134:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004136:	43b3      	bics	r3, r6
 8004138:	4313      	orrs	r3, r2
 800413a:	616b      	str	r3, [r5, #20]
 800413c:	696e      	ldr	r6, [r5, #20]
 800413e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004140:	43be      	bics	r6, r7
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	4333      	orrs	r3, r6
 8004146:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004148:	2900      	cmp	r1, #0
 800414a:	d128      	bne.n	800419e <HAL_ADC_Init+0x1c2>
      SET_BIT(hadc->Instance->CHSELR,
 800414c:	2310      	movs	r3, #16
 800414e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8004150:	425b      	negs	r3, r3
 8004152:	430b      	orrs	r3, r1
 8004154:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004156:	2307      	movs	r3, #7
 8004158:	6969      	ldr	r1, [r5, #20]
 800415a:	400b      	ands	r3, r1
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800415c:	429a      	cmp	r2, r3
 800415e:	d02f      	beq.n	80041c0 <HAL_ADC_Init+0x1e4>
      ADC_STATE_CLR_SET(hadc->State,
 8004160:	2212      	movs	r2, #18
 8004162:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004164:	4393      	bics	r3, r2
 8004166:	3a02      	subs	r2, #2
 8004168:	4313      	orrs	r3, r2
 800416a:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800416e:	3a0f      	subs	r2, #15
 8004170:	4313      	orrs	r3, r2
 8004172:	65e3      	str	r3, [r4, #92]	@ 0x5c
      tmp_hal_status = HAL_ERROR;
 8004174:	e769      	b.n	800404a <HAL_ADC_Init+0x6e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004176:	2210      	movs	r2, #16
 8004178:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800417a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800417c:	4313      	orrs	r3, r2
 800417e:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004180:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004182:	3a0f      	subs	r2, #15
 8004184:	4313      	orrs	r3, r2
 8004186:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004188:	68ab      	ldr	r3, [r5, #8]
 800418a:	075b      	lsls	r3, r3, #29
 800418c:	d400      	bmi.n	8004190 <HAL_ADC_Init+0x1b4>
 800418e:	e763      	b.n	8004058 <HAL_ADC_Init+0x7c>
 8004190:	e756      	b.n	8004040 <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 8004192:	f7fe ffcf 	bl	8003134 <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 8004196:	2354      	movs	r3, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8004198:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800419a:	54e5      	strb	r5, [r4, r3]
 800419c:	e72c      	b.n	8003ff8 <HAL_ADC_Init+0x1c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800419e:	2380      	movs	r3, #128	@ 0x80
 80041a0:	039b      	lsls	r3, r3, #14
 80041a2:	4299      	cmp	r1, r3
 80041a4:	d1d7      	bne.n	8004156 <HAL_ADC_Init+0x17a>
      MODIFY_REG(hadc->Instance->CHSELR,
 80041a6:	211c      	movs	r1, #28
 80041a8:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80041aa:	69e3      	ldr	r3, [r4, #28]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4019      	ands	r1, r3
 80041b2:	2310      	movs	r3, #16
 80041b4:	425b      	negs	r3, r3
 80041b6:	408b      	lsls	r3, r1
 80041b8:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80041ba:	430b      	orrs	r3, r1
 80041bc:	62ab      	str	r3, [r5, #40]	@ 0x28
 80041be:	e7ca      	b.n	8004156 <HAL_ADC_Init+0x17a>
      ADC_CLEAR_ERRORCODE(hadc);
 80041c0:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 80041c2:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80041c4:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80041c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041c8:	4393      	bics	r3, r2
 80041ca:	3a02      	subs	r2, #2
 80041cc:	4313      	orrs	r3, r2
 80041ce:	65a3      	str	r3, [r4, #88]	@ 0x58
 80041d0:	e73c      	b.n	800404c <HAL_ADC_Init+0x70>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80041d2:	004b      	lsls	r3, r1, #1
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	469c      	mov	ip, r3
 80041d8:	e762      	b.n	80040a0 <HAL_ADC_Init+0xc4>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80041da:	2e00      	cmp	r6, #0
 80041dc:	d103      	bne.n	80041e6 <HAL_ADC_Init+0x20a>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80041de:	2280      	movs	r2, #128	@ 0x80
 80041e0:	0252      	lsls	r2, r2, #9
 80041e2:	4313      	orrs	r3, r2
 80041e4:	e768      	b.n	80040b8 <HAL_ADC_Init+0xdc>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041e6:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 80041e8:	433e      	orrs	r6, r7
 80041ea:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ec:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
 80041ee:	4332      	orrs	r2, r6
 80041f0:	65e2      	str	r2, [r4, #92]	@ 0x5c
 80041f2:	e761      	b.n	80040b8 <HAL_ADC_Init+0xdc>
 80041f4:	6fffffe8 	.word	0x6fffffe8
 80041f8:	20000000 	.word	0x20000000
 80041fc:	00030d40 	.word	0x00030d40
 8004200:	fffffefd 	.word	0xfffffefd
 8004204:	ffde0201 	.word	0xffde0201
 8004208:	1ffffc02 	.word	0x1ffffc02
 800420c:	40012708 	.word	0x40012708
 8004210:	ffc3ffff 	.word	0xffc3ffff

08004214 <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8004214:	4770      	bx	lr
 8004216:	46c0      	nop			@ (mov r8, r8)

08004218 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004218:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800421a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800421c:	f7ff fffa 	bl	8004214 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004220:	bd10      	pop	{r4, pc}
 8004222:	46c0      	nop			@ (mov r8, r8)

08004224 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 8004224:	4770      	bx	lr
 8004226:	46c0      	nop			@ (mov r8, r8)

08004228 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8004228:	4770      	bx	lr
 800422a:	46c0      	nop			@ (mov r8, r8)

0800422c <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800422c:	2240      	movs	r2, #64	@ 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800422e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8004230:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004232:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8004234:	4313      	orrs	r3, r2
 8004236:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004238:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800423a:	3a3c      	subs	r2, #60	@ 0x3c
 800423c:	4313      	orrs	r3, r2
 800423e:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004240:	f7ff fff2 	bl	8004228 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004244:	bd10      	pop	{r4, pc}
 8004246:	46c0      	nop			@ (mov r8, r8)

08004248 <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004248:	2150      	movs	r1, #80	@ 0x50
{
 800424a:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800424c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 800424e:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004250:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004252:	4211      	tst	r1, r2
 8004254:	d10d      	bne.n	8004272 <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004256:	2380      	movs	r3, #128	@ 0x80
 8004258:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4313      	orrs	r3, r2
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800425e:	22c0      	movs	r2, #192	@ 0xc0
 8004260:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004262:	6803      	ldr	r3, [r0, #0]
 8004264:	0112      	lsls	r2, r2, #4
 8004266:	68d9      	ldr	r1, [r3, #12]
 8004268:	4211      	tst	r1, r2
 800426a:	d00a      	beq.n	8004282 <ADC_DMAConvCplt+0x3a>
    HAL_ADC_ConvCpltCallback(hadc);
 800426c:	f7fe ffcc 	bl	8003208 <HAL_ADC_ConvCpltCallback>
}
 8004270:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004272:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004274:	06d2      	lsls	r2, r2, #27
 8004276:	d416      	bmi.n	80042a6 <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004278:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800427a:	0018      	movs	r0, r3
 800427c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800427e:	4790      	blx	r2
}
 8004280:	e7f6      	b.n	8004270 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004282:	7e82      	ldrb	r2, [r0, #26]
 8004284:	2a00      	cmp	r2, #0
 8004286:	d1f1      	bne.n	800426c <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	0712      	lsls	r2, r2, #28
 800428c:	d5ee      	bpl.n	800426c <ADC_DMAConvCplt+0x24>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	0752      	lsls	r2, r2, #29
 8004292:	d50b      	bpl.n	80042ac <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004294:	2220      	movs	r2, #32
 8004296:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8004298:	4313      	orrs	r3, r2
 800429a:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800429c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800429e:	3a1f      	subs	r2, #31
 80042a0:	4313      	orrs	r3, r2
 80042a2:	65c3      	str	r3, [r0, #92]	@ 0x5c
 80042a4:	e7e2      	b.n	800426c <ADC_DMAConvCplt+0x24>
      HAL_ADC_ErrorCallback(hadc);
 80042a6:	f7ff ffbf 	bl	8004228 <HAL_ADC_ErrorCallback>
 80042aa:	e7e1      	b.n	8004270 <ADC_DMAConvCplt+0x28>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80042ac:	210c      	movs	r1, #12
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	438a      	bics	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80042b4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80042b6:	4a03      	ldr	r2, [pc, #12]	@ (80042c4 <ADC_DMAConvCplt+0x7c>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	3204      	adds	r2, #4
 80042bc:	32ff      	adds	r2, #255	@ 0xff
 80042be:	4313      	orrs	r3, r2
 80042c0:	6583      	str	r3, [r0, #88]	@ 0x58
 80042c2:	e7d3      	b.n	800426c <ADC_DMAConvCplt+0x24>
 80042c4:	fffffefe 	.word	0xfffffefe

080042c8 <HAL_ADC_IRQHandler>:
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80042c8:	2202      	movs	r2, #2
{
 80042ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 80042cc:	6803      	ldr	r3, [r0, #0]
{
 80042ce:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80042d0:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80042d2:	685e      	ldr	r6, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80042d4:	422a      	tst	r2, r5
 80042d6:	d001      	beq.n	80042dc <HAL_ADC_IRQHandler+0x14>
 80042d8:	4232      	tst	r2, r6
 80042da:	d14c      	bne.n	8004376 <HAL_ADC_IRQHandler+0xae>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80042dc:	2204      	movs	r2, #4
 80042de:	422a      	tst	r2, r5
 80042e0:	d043      	beq.n	800436a <HAL_ADC_IRQHandler+0xa2>
 80042e2:	4232      	tst	r2, r6
 80042e4:	d041      	beq.n	800436a <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042e6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80042e8:	06d2      	lsls	r2, r2, #27
 80042ea:	d404      	bmi.n	80042f6 <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042ec:	2280      	movs	r2, #128	@ 0x80
 80042ee:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80042f0:	0092      	lsls	r2, r2, #2
 80042f2:	430a      	orrs	r2, r1
 80042f4:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80042f6:	22c0      	movs	r2, #192	@ 0xc0
 80042f8:	68d9      	ldr	r1, [r3, #12]
 80042fa:	0112      	lsls	r2, r2, #4
 80042fc:	4211      	tst	r1, r2
 80042fe:	d111      	bne.n	8004324 <HAL_ADC_IRQHandler+0x5c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004300:	7ea2      	ldrb	r2, [r4, #26]
 8004302:	2a00      	cmp	r2, #0
 8004304:	d10e      	bne.n	8004324 <HAL_ADC_IRQHandler+0x5c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	0712      	lsls	r2, r2, #28
 800430a:	d50b      	bpl.n	8004324 <HAL_ADC_IRQHandler+0x5c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	0752      	lsls	r2, r2, #29
 8004310:	d400      	bmi.n	8004314 <HAL_ADC_IRQHandler+0x4c>
 8004312:	e07c      	b.n	800440e <HAL_ADC_IRQHandler+0x146>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004314:	2220      	movs	r2, #32
 8004316:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004318:	4313      	orrs	r3, r2
 800431a:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800431c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800431e:	3a1f      	subs	r2, #31
 8004320:	4313      	orrs	r3, r2
 8004322:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8004324:	0020      	movs	r0, r4
 8004326:	f7fe ff6f 	bl	8003208 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800432a:	220c      	movs	r2, #12
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004330:	2780      	movs	r7, #128	@ 0x80
 8004332:	422f      	tst	r7, r5
 8004334:	d001      	beq.n	800433a <HAL_ADC_IRQHandler+0x72>
 8004336:	4237      	tst	r7, r6
 8004338:	d14d      	bne.n	80043d6 <HAL_ADC_IRQHandler+0x10e>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800433a:	2780      	movs	r7, #128	@ 0x80
 800433c:	007f      	lsls	r7, r7, #1
 800433e:	423d      	tst	r5, r7
 8004340:	d001      	beq.n	8004346 <HAL_ADC_IRQHandler+0x7e>
 8004342:	423e      	tst	r6, r7
 8004344:	d152      	bne.n	80043ec <HAL_ADC_IRQHandler+0x124>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004346:	2780      	movs	r7, #128	@ 0x80
 8004348:	00bf      	lsls	r7, r7, #2
 800434a:	423d      	tst	r5, r7
 800434c:	d001      	beq.n	8004352 <HAL_ADC_IRQHandler+0x8a>
 800434e:	423e      	tst	r6, r7
 8004350:	d136      	bne.n	80043c0 <HAL_ADC_IRQHandler+0xf8>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004352:	2210      	movs	r2, #16
 8004354:	422a      	tst	r2, r5
 8004356:	d001      	beq.n	800435c <HAL_ADC_IRQHandler+0x94>
 8004358:	4232      	tst	r2, r6
 800435a:	d11b      	bne.n	8004394 <HAL_ADC_IRQHandler+0xcc>
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800435c:	2780      	movs	r7, #128	@ 0x80
 800435e:	01bf      	lsls	r7, r7, #6
 8004360:	423d      	tst	r5, r7
 8004362:	d001      	beq.n	8004368 <HAL_ADC_IRQHandler+0xa0>
 8004364:	423e      	tst	r6, r7
 8004366:	d14c      	bne.n	8004402 <HAL_ADC_IRQHandler+0x13a>
}
 8004368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800436a:	2208      	movs	r2, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800436c:	422a      	tst	r2, r5
 800436e:	d0df      	beq.n	8004330 <HAL_ADC_IRQHandler+0x68>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004370:	4232      	tst	r2, r6
 8004372:	d0dd      	beq.n	8004330 <HAL_ADC_IRQHandler+0x68>
 8004374:	e7b7      	b.n	80042e6 <HAL_ADC_IRQHandler+0x1e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004376:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8004378:	06db      	lsls	r3, r3, #27
 800437a:	d404      	bmi.n	8004386 <HAL_ADC_IRQHandler+0xbe>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800437c:	2380      	movs	r3, #128	@ 0x80
 800437e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	4313      	orrs	r3, r2
 8004384:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004386:	0020      	movs	r0, r4
 8004388:	f000 fa56 	bl	8004838 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800438c:	2202      	movs	r2, #2
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	e7a3      	b.n	80042dc <HAL_ADC_IRQHandler+0x14>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004394:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004396:	2a00      	cmp	r2, #0
 8004398:	d002      	beq.n	80043a0 <HAL_ADC_IRQHandler+0xd8>
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800439a:	68da      	ldr	r2, [r3, #12]
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800439c:	0792      	lsls	r2, r2, #30
 800439e:	d00c      	beq.n	80043ba <HAL_ADC_IRQHandler+0xf2>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80043a0:	2380      	movs	r3, #128	@ 0x80
 80043a2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4313      	orrs	r3, r2
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80043a8:	2202      	movs	r2, #2
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80043aa:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80043ac:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 80043ae:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80043b0:	4313      	orrs	r3, r2
 80043b2:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 80043b4:	f7ff ff38 	bl	8004228 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	2210      	movs	r2, #16
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e7cd      	b.n	800435c <HAL_ADC_IRQHandler+0x94>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80043c0:	2380      	movs	r3, #128	@ 0x80
 80043c2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80043c4:	02db      	lsls	r3, r3, #11
 80043c6:	4313      	orrs	r3, r2
 80043c8:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80043ca:	0020      	movs	r0, r4
 80043cc:	f000 fa32 	bl	8004834 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	601f      	str	r7, [r3, #0]
 80043d4:	e7bd      	b.n	8004352 <HAL_ADC_IRQHandler+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80043d6:	2380      	movs	r3, #128	@ 0x80
 80043d8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80043da:	025b      	lsls	r3, r3, #9
 80043dc:	4313      	orrs	r3, r2
 80043de:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80043e0:	0020      	movs	r0, r4
 80043e2:	f7ff ff1f 	bl	8004224 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	601f      	str	r7, [r3, #0]
 80043ea:	e7a6      	b.n	800433a <HAL_ADC_IRQHandler+0x72>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80043ec:	2380      	movs	r3, #128	@ 0x80
 80043ee:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80043f0:	029b      	lsls	r3, r3, #10
 80043f2:	4313      	orrs	r3, r2
 80043f4:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80043f6:	0020      	movs	r0, r4
 80043f8:	f000 fa1a 	bl	8004830 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	601f      	str	r7, [r3, #0]
 8004400:	e7a1      	b.n	8004346 <HAL_ADC_IRQHandler+0x7e>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8004402:	0020      	movs	r0, r4
 8004404:	f000 fa1a 	bl	800483c <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	601f      	str	r7, [r3, #0]
}
 800440c:	e7ac      	b.n	8004368 <HAL_ADC_IRQHandler+0xa0>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800440e:	210c      	movs	r1, #12
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	438a      	bics	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8004416:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004418:	4a03      	ldr	r2, [pc, #12]	@ (8004428 <HAL_ADC_IRQHandler+0x160>)
 800441a:	4013      	ands	r3, r2
 800441c:	3204      	adds	r2, #4
 800441e:	32ff      	adds	r2, #255	@ 0xff
 8004420:	4313      	orrs	r3, r2
 8004422:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004424:	e77e      	b.n	8004324 <HAL_ADC_IRQHandler+0x5c>
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	fffffefe 	.word	0xfffffefe

0800442c <HAL_ADC_ConfigChannel>:
{
 800442c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442e:	46de      	mov	lr, fp
 8004430:	4657      	mov	r7, sl
 8004432:	464e      	mov	r6, r9
 8004434:	4645      	mov	r5, r8
  __IO uint32_t wait_loop_index = 0UL;
 8004436:	2300      	movs	r3, #0
{
 8004438:	0004      	movs	r4, r0
 800443a:	b5e0      	push	{r5, r6, r7, lr}
 800443c:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 800443e:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8004440:	3354      	adds	r3, #84	@ 0x54
 8004442:	5ce2      	ldrb	r2, [r4, r3]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004444:	6900      	ldr	r0, [r0, #16]
  __HAL_LOCK(hadc);
 8004446:	2a01      	cmp	r2, #1
 8004448:	d100      	bne.n	800444c <HAL_ADC_ConfigChannel+0x20>
 800444a:	e09a      	b.n	8004582 <HAL_ADC_ConfigChannel+0x156>
 800444c:	2201      	movs	r2, #1
 800444e:	54e2      	strb	r2, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004450:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004452:	3203      	adds	r2, #3
 8004454:	689e      	ldr	r6, [r3, #8]
 8004456:	4232      	tst	r2, r6
 8004458:	d00e      	beq.n	8004478 <HAL_ADC_ConfigChannel+0x4c>
    tmp_hal_status = HAL_ERROR;
 800445a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800445c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800445e:	321c      	adds	r2, #28
 8004460:	4313      	orrs	r3, r2
 8004462:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8004464:	2354      	movs	r3, #84	@ 0x54
 8004466:	2200      	movs	r2, #0
 8004468:	54e2      	strb	r2, [r4, r3]
}
 800446a:	b005      	add	sp, #20
 800446c:	bcf0      	pop	{r4, r5, r6, r7}
 800446e:	46bb      	mov	fp, r7
 8004470:	46b2      	mov	sl, r6
 8004472:	46a9      	mov	r9, r5
 8004474:	46a0      	mov	r8, r4
 8004476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8004478:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800447a:	4390      	bics	r0, r2
 800447c:	4684      	mov	ip, r0
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800447e:	6808      	ldr	r0, [r1, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 8004480:	2e02      	cmp	r6, #2
 8004482:	d05e      	beq.n	8004542 <HAL_ADC_ConfigChannel+0x116>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004484:	0347      	lsls	r7, r0, #13
 8004486:	0b7d      	lsrs	r5, r7, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004488:	2780      	movs	r7, #128	@ 0x80
 800448a:	9500      	str	r5, [sp, #0]
 800448c:	063f      	lsls	r7, r7, #24
 800448e:	45bc      	cmp	ip, r7
 8004490:	d053      	beq.n	800453a <HAL_ADC_ConfigChannel+0x10e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004492:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 8004494:	46bb      	mov	fp, r7
 8004496:	271f      	movs	r7, #31
 8004498:	46b8      	mov	r8, r7
 800449a:	4037      	ands	r7, r6
 800449c:	46ba      	mov	sl, r7
 800449e:	270f      	movs	r7, #15
 80044a0:	4655      	mov	r5, sl
 80044a2:	40af      	lsls	r7, r5
 80044a4:	43fd      	mvns	r5, r7
 80044a6:	46bc      	mov	ip, r7
 80044a8:	9501      	str	r5, [sp, #4]
 80044aa:	465f      	mov	r7, fp
 80044ac:	4665      	mov	r5, ip
 80044ae:	43af      	bics	r7, r5
 80044b0:	9d00      	ldr	r5, [sp, #0]
 80044b2:	46b9      	mov	r9, r7
 80044b4:	2d00      	cmp	r5, #0
 80044b6:	d166      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x15a>
 80044b8:	4645      	mov	r5, r8
 80044ba:	0e82      	lsrs	r2, r0, #26
 80044bc:	4015      	ands	r5, r2
 80044be:	002a      	movs	r2, r5
 80044c0:	4655      	mov	r5, sl
 80044c2:	40aa      	lsls	r2, r5
 80044c4:	464d      	mov	r5, r9
 80044c6:	4315      	orrs	r5, r2
 80044c8:	46a9      	mov	r9, r5
 80044ca:	464a      	mov	r2, r9
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80044cc:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80044ce:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80044d0:	69e2      	ldr	r2, [r4, #28]
 80044d2:	3601      	adds	r6, #1
 80044d4:	4296      	cmp	r6, r2
 80044d6:	d808      	bhi.n	80044ea <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCx->CHSELR,
 80044d8:	4656      	mov	r6, sl
 80044da:	0082      	lsls	r2, r0, #2
 80044dc:	0f12      	lsrs	r2, r2, #28
 80044de:	40b2      	lsls	r2, r6
 80044e0:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80044e2:	9e01      	ldr	r6, [sp, #4]
 80044e4:	4035      	ands	r5, r6
 80044e6:	432a      	orrs	r2, r5
 80044e8:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 80044ea:	0205      	lsls	r5, r0, #8
 80044ec:	688a      	ldr	r2, [r1, #8]
 80044ee:	0029      	movs	r1, r5
 80044f0:	695e      	ldr	r6, [r3, #20]
 80044f2:	402a      	ands	r2, r5
 80044f4:	4d66      	ldr	r5, [pc, #408]	@ (8004690 <HAL_ADC_ConfigChannel+0x264>)
 80044f6:	438e      	bics	r6, r1
 80044f8:	402a      	ands	r2, r5
 80044fa:	4332      	orrs	r2, r6
 80044fc:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044fe:	2800      	cmp	r0, #0
 8004500:	db01      	blt.n	8004506 <HAL_ADC_ConfigChannel+0xda>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004502:	2000      	movs	r0, #0
 8004504:	e7ae      	b.n	8004464 <HAL_ADC_ConfigChannel+0x38>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004506:	21e0      	movs	r1, #224	@ 0xe0
 8004508:	4d62      	ldr	r5, [pc, #392]	@ (8004694 <HAL_ADC_ConfigChannel+0x268>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800450a:	4a63      	ldr	r2, [pc, #396]	@ (8004698 <HAL_ADC_ConfigChannel+0x26c>)
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	0449      	lsls	r1, r1, #17
 8004510:	4019      	ands	r1, r3
 8004512:	4290      	cmp	r0, r2
 8004514:	d04c      	beq.n	80045b0 <HAL_ADC_ConfigChannel+0x184>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004516:	4a61      	ldr	r2, [pc, #388]	@ (800469c <HAL_ADC_ConfigChannel+0x270>)
 8004518:	4290      	cmp	r0, r2
 800451a:	d040      	beq.n	800459e <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800451c:	4a60      	ldr	r2, [pc, #384]	@ (80046a0 <HAL_ADC_ConfigChannel+0x274>)
 800451e:	4290      	cmp	r0, r2
 8004520:	d1ef      	bne.n	8004502 <HAL_ADC_ConfigChannel+0xd6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004522:	2280      	movs	r2, #128	@ 0x80
 8004524:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004526:	4213      	tst	r3, r2
 8004528:	d1eb      	bne.n	8004502 <HAL_ADC_ConfigChannel+0xd6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800452a:	682b      	ldr	r3, [r5, #0]
 800452c:	485d      	ldr	r0, [pc, #372]	@ (80046a4 <HAL_ADC_ConfigChannel+0x278>)
 800452e:	4003      	ands	r3, r0
 8004530:	430b      	orrs	r3, r1
 8004532:	431a      	orrs	r2, r3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004534:	2000      	movs	r0, #0
 8004536:	602a      	str	r2, [r5, #0]
 8004538:	e794      	b.n	8004464 <HAL_ADC_ConfigChannel+0x38>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800453a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800453c:	432a      	orrs	r2, r5
 800453e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004540:	e7d3      	b.n	80044ea <HAL_ADC_ConfigChannel+0xbe>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004542:	2280      	movs	r2, #128	@ 0x80
 8004544:	0612      	lsls	r2, r2, #24
 8004546:	4594      	cmp	ip, r2
 8004548:	d104      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x128>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800454a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800454c:	0341      	lsls	r1, r0, #13
 800454e:	0b49      	lsrs	r1, r1, #13
 8004550:	438a      	bics	r2, r1
 8004552:	629a      	str	r2, [r3, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004554:	2800      	cmp	r0, #0
 8004556:	dad4      	bge.n	8004502 <HAL_ADC_ConfigChannel+0xd6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004558:	4a4e      	ldr	r2, [pc, #312]	@ (8004694 <HAL_ADC_ConfigChannel+0x268>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800455a:	494f      	ldr	r1, [pc, #316]	@ (8004698 <HAL_ADC_ConfigChannel+0x26c>)
 800455c:	6813      	ldr	r3, [r2, #0]
 800455e:	4288      	cmp	r0, r1
 8004560:	d023      	beq.n	80045aa <HAL_ADC_ConfigChannel+0x17e>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004562:	494e      	ldr	r1, [pc, #312]	@ (800469c <HAL_ADC_ConfigChannel+0x270>)
 8004564:	4288      	cmp	r0, r1
 8004566:	d04a      	beq.n	80045fe <HAL_ADC_ConfigChannel+0x1d2>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004568:	494d      	ldr	r1, [pc, #308]	@ (80046a0 <HAL_ADC_ConfigChannel+0x274>)
 800456a:	4288      	cmp	r0, r1
 800456c:	d1c9      	bne.n	8004502 <HAL_ADC_ConfigChannel+0xd6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800456e:	20c0      	movs	r0, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004570:	6811      	ldr	r1, [r2, #0]
 8004572:	0440      	lsls	r0, r0, #17
 8004574:	4003      	ands	r3, r0
 8004576:	484b      	ldr	r0, [pc, #300]	@ (80046a4 <HAL_ADC_ConfigChannel+0x278>)
 8004578:	4001      	ands	r1, r0
 800457a:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800457c:	2000      	movs	r0, #0
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	e770      	b.n	8004464 <HAL_ADC_ConfigChannel+0x38>
  __HAL_LOCK(hadc);
 8004582:	2002      	movs	r0, #2
 8004584:	e771      	b.n	800446a <HAL_ADC_ConfigChannel+0x3e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004586:	2501      	movs	r5, #1
 8004588:	4205      	tst	r5, r0
 800458a:	d19e      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x9e>
 800458c:	2702      	movs	r7, #2
 800458e:	4207      	tst	r7, r0
 8004590:	d02d      	beq.n	80045ee <HAL_ADC_ConfigChannel+0x1c2>
 8004592:	4652      	mov	r2, sl
 8004594:	4095      	lsls	r5, r2
 8004596:	464a      	mov	r2, r9
 8004598:	432a      	orrs	r2, r5
 800459a:	4691      	mov	r9, r2
 800459c:	e795      	b.n	80044ca <HAL_ADC_ConfigChannel+0x9e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800459e:	2280      	movs	r2, #128	@ 0x80
 80045a0:	0452      	lsls	r2, r2, #17
 80045a2:	4213      	tst	r3, r2
 80045a4:	d0c1      	beq.n	800452a <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045a6:	2000      	movs	r0, #0
 80045a8:	e75c      	b.n	8004464 <HAL_ADC_ConfigChannel+0x38>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045aa:	20a0      	movs	r0, #160	@ 0xa0
 80045ac:	6811      	ldr	r1, [r2, #0]
 80045ae:	e7e0      	b.n	8004572 <HAL_ADC_ConfigChannel+0x146>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045b0:	2280      	movs	r2, #128	@ 0x80
 80045b2:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045b4:	4213      	tst	r3, r2
 80045b6:	d1a4      	bne.n	8004502 <HAL_ADC_ConfigChannel+0xd6>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	483a      	ldr	r0, [pc, #232]	@ (80046a4 <HAL_ADC_ConfigChannel+0x278>)
 80045bc:	4003      	ands	r3, r0
 80045be:	430b      	orrs	r3, r1
 80045c0:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045c2:	4b39      	ldr	r3, [pc, #228]	@ (80046a8 <HAL_ADC_ConfigChannel+0x27c>)
 80045c4:	602a      	str	r2, [r5, #0]
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	4938      	ldr	r1, [pc, #224]	@ (80046ac <HAL_ADC_ConfigChannel+0x280>)
 80045ca:	f7fb fd9b 	bl	8000104 <__udivsi3>
 80045ce:	3001      	adds	r0, #1
 80045d0:	0043      	lsls	r3, r0, #1
 80045d2:	181b      	adds	r3, r3, r0
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 80045d8:	9b03      	ldr	r3, [sp, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d091      	beq.n	8004502 <HAL_ADC_ConfigChannel+0xd6>
            wait_loop_index--;
 80045de:	9b03      	ldr	r3, [sp, #12]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 80045e4:	9b03      	ldr	r3, [sp, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f9      	bne.n	80045de <HAL_ADC_ConfigChannel+0x1b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045ea:	2000      	movs	r0, #0
 80045ec:	e73a      	b.n	8004464 <HAL_ADC_ConfigChannel+0x38>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80045ee:	4202      	tst	r2, r0
 80045f0:	d009      	beq.n	8004606 <HAL_ADC_ConfigChannel+0x1da>
 80045f2:	4652      	mov	r2, sl
 80045f4:	4097      	lsls	r7, r2
 80045f6:	464a      	mov	r2, r9
 80045f8:	433a      	orrs	r2, r7
 80045fa:	4691      	mov	r9, r2
 80045fc:	e765      	b.n	80044ca <HAL_ADC_ConfigChannel+0x9e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045fe:	20c0      	movs	r0, #192	@ 0xc0
 8004600:	6811      	ldr	r1, [r2, #0]
 8004602:	0400      	lsls	r0, r0, #16
 8004604:	e7b6      	b.n	8004574 <HAL_ADC_ConfigChannel+0x148>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004606:	0702      	lsls	r2, r0, #28
 8004608:	d501      	bpl.n	800460e <HAL_ADC_ConfigChannel+0x1e2>
 800460a:	2203      	movs	r2, #3
 800460c:	e758      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 800460e:	06c2      	lsls	r2, r0, #27
 8004610:	d501      	bpl.n	8004616 <HAL_ADC_ConfigChannel+0x1ea>
 8004612:	2204      	movs	r2, #4
 8004614:	e754      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 8004616:	0682      	lsls	r2, r0, #26
 8004618:	d501      	bpl.n	800461e <HAL_ADC_ConfigChannel+0x1f2>
 800461a:	2205      	movs	r2, #5
 800461c:	e750      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 800461e:	0642      	lsls	r2, r0, #25
 8004620:	d501      	bpl.n	8004626 <HAL_ADC_ConfigChannel+0x1fa>
 8004622:	2206      	movs	r2, #6
 8004624:	e74c      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 8004626:	0602      	lsls	r2, r0, #24
 8004628:	d501      	bpl.n	800462e <HAL_ADC_ConfigChannel+0x202>
 800462a:	2207      	movs	r2, #7
 800462c:	e748      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 800462e:	05c2      	lsls	r2, r0, #23
 8004630:	d501      	bpl.n	8004636 <HAL_ADC_ConfigChannel+0x20a>
 8004632:	2208      	movs	r2, #8
 8004634:	e744      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 8004636:	0582      	lsls	r2, r0, #22
 8004638:	d501      	bpl.n	800463e <HAL_ADC_ConfigChannel+0x212>
 800463a:	2209      	movs	r2, #9
 800463c:	e740      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 800463e:	0542      	lsls	r2, r0, #21
 8004640:	d501      	bpl.n	8004646 <HAL_ADC_ConfigChannel+0x21a>
 8004642:	220a      	movs	r2, #10
 8004644:	e73c      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 8004646:	0502      	lsls	r2, r0, #20
 8004648:	d501      	bpl.n	800464e <HAL_ADC_ConfigChannel+0x222>
 800464a:	220b      	movs	r2, #11
 800464c:	e738      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 800464e:	04c2      	lsls	r2, r0, #19
 8004650:	d501      	bpl.n	8004656 <HAL_ADC_ConfigChannel+0x22a>
 8004652:	220c      	movs	r2, #12
 8004654:	e734      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 8004656:	0482      	lsls	r2, r0, #18
 8004658:	d501      	bpl.n	800465e <HAL_ADC_ConfigChannel+0x232>
 800465a:	220d      	movs	r2, #13
 800465c:	e730      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 800465e:	0442      	lsls	r2, r0, #17
 8004660:	d501      	bpl.n	8004666 <HAL_ADC_ConfigChannel+0x23a>
 8004662:	220e      	movs	r2, #14
 8004664:	e72c      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 8004666:	0402      	lsls	r2, r0, #16
 8004668:	d504      	bpl.n	8004674 <HAL_ADC_ConfigChannel+0x248>
 800466a:	465a      	mov	r2, fp
 800466c:	4665      	mov	r5, ip
 800466e:	432a      	orrs	r2, r5
 8004670:	4691      	mov	r9, r2
 8004672:	e72a      	b.n	80044ca <HAL_ADC_ConfigChannel+0x9e>
 8004674:	03c2      	lsls	r2, r0, #15
 8004676:	d501      	bpl.n	800467c <HAL_ADC_ConfigChannel+0x250>
 8004678:	2210      	movs	r2, #16
 800467a:	e721      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 800467c:	0382      	lsls	r2, r0, #14
 800467e:	d501      	bpl.n	8004684 <HAL_ADC_ConfigChannel+0x258>
 8004680:	2211      	movs	r2, #17
 8004682:	e71d      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 8004684:	0342      	lsls	r2, r0, #13
 8004686:	d400      	bmi.n	800468a <HAL_ADC_ConfigChannel+0x25e>
 8004688:	e71f      	b.n	80044ca <HAL_ADC_ConfigChannel+0x9e>
 800468a:	2212      	movs	r2, #18
 800468c:	e718      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x94>
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	07ffff00 	.word	0x07ffff00
 8004694:	40012708 	.word	0x40012708
 8004698:	b0001000 	.word	0xb0001000
 800469c:	b8004000 	.word	0xb8004000
 80046a0:	b4002000 	.word	0xb4002000
 80046a4:	fe3fffff 	.word	0xfe3fffff
 80046a8:	20000000 	.word	0x20000000
 80046ac:	00030d40 	.word	0x00030d40

080046b0 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 80046b0:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046b2:	2201      	movs	r2, #1
{
 80046b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046b6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80046b8:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046ba:	6803      	ldr	r3, [r0, #0]
{
 80046bc:	0004      	movs	r4, r0
 80046be:	6899      	ldr	r1, [r3, #8]
 80046c0:	420a      	tst	r2, r1
 80046c2:	d11f      	bne.n	8004704 <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80046c4:	6898      	ldr	r0, [r3, #8]
 80046c6:	4928      	ldr	r1, [pc, #160]	@ (8004768 <ADC_Enable+0xb8>)
 80046c8:	4208      	tst	r0, r1
 80046ca:	d11e      	bne.n	800470a <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 80046cc:	6899      	ldr	r1, [r3, #8]
 80046ce:	4827      	ldr	r0, [pc, #156]	@ (800476c <ADC_Enable+0xbc>)
 80046d0:	4001      	ands	r1, r0
 80046d2:	430a      	orrs	r2, r1
 80046d4:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80046d6:	4b26      	ldr	r3, [pc, #152]	@ (8004770 <ADC_Enable+0xc0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	d50f      	bpl.n	80046fe <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046de:	4b25      	ldr	r3, [pc, #148]	@ (8004774 <ADC_Enable+0xc4>)
 80046e0:	4925      	ldr	r1, [pc, #148]	@ (8004778 <ADC_Enable+0xc8>)
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	f7fb fd0e 	bl	8000104 <__udivsi3>
 80046e8:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80046ea:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80046ec:	9b01      	ldr	r3, [sp, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <ADC_Enable+0x4e>
        wait_loop_index--;
 80046f2:	9b01      	ldr	r3, [sp, #4]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80046f8:	9b01      	ldr	r3, [sp, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f9      	bne.n	80046f2 <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80046fe:	7e63      	ldrb	r3, [r4, #25]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d10b      	bne.n	800471c <ADC_Enable+0x6c>
  return HAL_OK;
 8004704:	2000      	movs	r0, #0
}
 8004706:	b003      	add	sp, #12
 8004708:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800470a:	2110      	movs	r1, #16
 800470c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 800470e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004710:	430b      	orrs	r3, r1
 8004712:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004714:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004716:	4313      	orrs	r3, r2
 8004718:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 800471a:	e7f4      	b.n	8004706 <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 800471c:	f7ff fc46 	bl	8003fac <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004720:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8004722:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	07d2      	lsls	r2, r2, #31
 8004728:	d4ec      	bmi.n	8004704 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800472a:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 800472c:	4f0f      	ldr	r7, [pc, #60]	@ (800476c <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	4215      	tst	r5, r2
 8004732:	d103      	bne.n	800473c <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	403a      	ands	r2, r7
 8004738:	432a      	orrs	r2, r5
 800473a:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800473c:	f7ff fc36 	bl	8003fac <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004740:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004742:	1b80      	subs	r0, r0, r6
 8004744:	2802      	cmp	r0, #2
 8004746:	d902      	bls.n	800474e <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4215      	tst	r5, r2
 800474c:	d003      	beq.n	8004756 <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	4215      	tst	r5, r2
 8004752:	d0ec      	beq.n	800472e <ADC_Enable+0x7e>
 8004754:	e7d6      	b.n	8004704 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004756:	2210      	movs	r2, #16
 8004758:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 800475a:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800475c:	4313      	orrs	r3, r2
 800475e:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004760:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004762:	432b      	orrs	r3, r5
 8004764:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8004766:	e7ce      	b.n	8004706 <ADC_Enable+0x56>
 8004768:	80000017 	.word	0x80000017
 800476c:	7fffffe8 	.word	0x7fffffe8
 8004770:	40012708 	.word	0x40012708
 8004774:	20000000 	.word	0x20000000
 8004778:	00030d40 	.word	0x00030d40

0800477c <HAL_ADC_Start_DMA>:
{
 800477c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477e:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004780:	6805      	ldr	r5, [r0, #0]
{
 8004782:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004784:	68ae      	ldr	r6, [r5, #8]
 8004786:	4688      	mov	r8, r1
 8004788:	0017      	movs	r7, r2
    __HAL_LOCK(hadc);
 800478a:	2002      	movs	r0, #2
{
 800478c:	b500      	push	{lr}
 800478e:	0776      	lsls	r6, r6, #29
 8004790:	d414      	bmi.n	80047bc <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 8004792:	2254      	movs	r2, #84	@ 0x54
 8004794:	5ca3      	ldrb	r3, [r4, r2]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d010      	beq.n	80047bc <HAL_ADC_Start_DMA+0x40>
 800479a:	2301      	movs	r3, #1
 800479c:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800479e:	68ea      	ldr	r2, [r5, #12]
 80047a0:	4213      	tst	r3, r2
 80047a2:	d106      	bne.n	80047b2 <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047a4:	68aa      	ldr	r2, [r5, #8]
 80047a6:	4213      	tst	r3, r2
 80047a8:	d131      	bne.n	800480e <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80047aa:	2201      	movs	r2, #1
 80047ac:	68eb      	ldr	r3, [r5, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 80047b2:	0020      	movs	r0, r4
 80047b4:	f7ff ff7c 	bl	80046b0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d002      	beq.n	80047c2 <HAL_ADC_Start_DMA+0x46>
}
 80047bc:	bc80      	pop	{r7}
 80047be:	46b8      	mov	r8, r7
 80047c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80047c2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80047c4:	4b15      	ldr	r3, [pc, #84]	@ (800481c <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047c6:	6d25      	ldr	r5, [r4, #80]	@ 0x50
      ADC_STATE_CLR_SET(hadc->State,
 80047c8:	401a      	ands	r2, r3
 80047ca:	2380      	movs	r3, #128	@ 0x80
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	65a3      	str	r3, [r4, #88]	@ 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047d2:	4b13      	ldr	r3, [pc, #76]	@ (8004820 <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 80047d4:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047d6:	62eb      	str	r3, [r5, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047d8:	4b12      	ldr	r3, [pc, #72]	@ (8004824 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047da:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047dc:	632b      	str	r3, [r5, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047de:	4b12      	ldr	r3, [pc, #72]	@ (8004828 <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047e0:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047e2:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047e4:	231c      	movs	r3, #28
 80047e6:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 80047e8:	3338      	adds	r3, #56	@ 0x38
 80047ea:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047ec:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047ee:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047f0:	4313      	orrs	r3, r2
 80047f2:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047f4:	4642      	mov	r2, r8
 80047f6:	003b      	movs	r3, r7
 80047f8:	3140      	adds	r1, #64	@ 0x40
 80047fa:	f000 f8e7 	bl	80049cc <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 80047fe:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004800:	490a      	ldr	r1, [pc, #40]	@ (800482c <HAL_ADC_Start_DMA+0xb0>)
 8004802:	6893      	ldr	r3, [r2, #8]
 8004804:	400b      	ands	r3, r1
 8004806:	2104      	movs	r1, #4
 8004808:	430b      	orrs	r3, r1
 800480a:	6093      	str	r3, [r2, #8]
}
 800480c:	e7d6      	b.n	80047bc <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 800480e:	68ab      	ldr	r3, [r5, #8]
 8004810:	4a06      	ldr	r2, [pc, #24]	@ (800482c <HAL_ADC_Start_DMA+0xb0>)
 8004812:	4013      	ands	r3, r2
 8004814:	4303      	orrs	r3, r0
 8004816:	60ab      	str	r3, [r5, #8]
}
 8004818:	e7c7      	b.n	80047aa <HAL_ADC_Start_DMA+0x2e>
 800481a:	46c0      	nop			@ (mov r8, r8)
 800481c:	fffff0fe 	.word	0xfffff0fe
 8004820:	08004249 	.word	0x08004249
 8004824:	08004219 	.word	0x08004219
 8004828:	0800422d 	.word	0x0800422d
 800482c:	7fffffe8 	.word	0x7fffffe8

08004830 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004830:	4770      	bx	lr
 8004832:	46c0      	nop			@ (mov r8, r8)

08004834 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8004834:	4770      	bx	lr
 8004836:	46c0      	nop			@ (mov r8, r8)

08004838 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 8004838:	4770      	bx	lr
 800483a:	46c0      	nop			@ (mov r8, r8)

0800483c <HAL_ADCEx_ChannelConfigReadyCallback>:
/**
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
 800483c:	4770      	bx	lr
 800483e:	46c0      	nop			@ (mov r8, r8)

08004840 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004840:	22ff      	movs	r2, #255	@ 0xff
 8004842:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004844:	b510      	push	{r4, lr}
 8004846:	0014      	movs	r4, r2
 8004848:	4003      	ands	r3, r0
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800484e:	0189      	lsls	r1, r1, #6
 8004850:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004852:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004854:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8004856:	2800      	cmp	r0, #0
 8004858:	db0b      	blt.n	8004872 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800485a:	4b0c      	ldr	r3, [pc, #48]	@ (800488c <HAL_NVIC_SetPriority+0x4c>)
 800485c:	21c0      	movs	r1, #192	@ 0xc0
 800485e:	469c      	mov	ip, r3
 8004860:	0880      	lsrs	r0, r0, #2
 8004862:	0080      	lsls	r0, r0, #2
 8004864:	4460      	add	r0, ip
 8004866:	0089      	lsls	r1, r1, #2
 8004868:	5843      	ldr	r3, [r0, r1]
 800486a:	4023      	ands	r3, r4
 800486c:	4313      	orrs	r3, r2
 800486e:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8004870:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004872:	230f      	movs	r3, #15
 8004874:	4906      	ldr	r1, [pc, #24]	@ (8004890 <HAL_NVIC_SetPriority+0x50>)
 8004876:	4003      	ands	r3, r0
 8004878:	468c      	mov	ip, r1
 800487a:	3b08      	subs	r3, #8
 800487c:	089b      	lsrs	r3, r3, #2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4463      	add	r3, ip
 8004882:	69d9      	ldr	r1, [r3, #28]
 8004884:	400c      	ands	r4, r1
 8004886:	4314      	orrs	r4, r2
 8004888:	61dc      	str	r4, [r3, #28]
 800488a:	e7f1      	b.n	8004870 <HAL_NVIC_SetPriority+0x30>
 800488c:	e000e100 	.word	0xe000e100
 8004890:	e000ed00 	.word	0xe000ed00

08004894 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004894:	2800      	cmp	r0, #0
 8004896:	db05      	blt.n	80048a4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004898:	221f      	movs	r2, #31
 800489a:	2301      	movs	r3, #1
 800489c:	4002      	ands	r2, r0
 800489e:	4093      	lsls	r3, r2
 80048a0:	4a01      	ldr	r2, [pc, #4]	@ (80048a8 <HAL_NVIC_EnableIRQ+0x14>)
 80048a2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80048a4:	4770      	bx	lr
 80048a6:	46c0      	nop			@ (mov r8, r8)
 80048a8:	e000e100 	.word	0xe000e100

080048ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048ac:	2280      	movs	r2, #128	@ 0x80
 80048ae:	1e43      	subs	r3, r0, #1
 80048b0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80048b2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d20e      	bcs.n	80048d6 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048b8:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ba:	4a07      	ldr	r2, [pc, #28]	@ (80048d8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048bc:	4807      	ldr	r0, [pc, #28]	@ (80048dc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048be:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048c0:	6a03      	ldr	r3, [r0, #32]
 80048c2:	0609      	lsls	r1, r1, #24
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048cc:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048ce:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048d0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048d2:	3307      	adds	r3, #7
 80048d4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80048d6:	4770      	bx	lr
 80048d8:	e000e010 	.word	0xe000e010
 80048dc:	e000ed00 	.word	0xe000ed00

080048e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e2:	46c6      	mov	lr, r8
 80048e4:	0004      	movs	r4, r0
 80048e6:	b500      	push	{lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d060      	beq.n	80049ae <HAL_DMA_Init+0xce>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80048ec:	6805      	ldr	r5, [r0, #0]
 80048ee:	4b31      	ldr	r3, [pc, #196]	@ (80049b4 <HAL_DMA_Init+0xd4>)
 80048f0:	2114      	movs	r1, #20
 80048f2:	18e8      	adds	r0, r5, r3
 80048f4:	f7fb fc06 	bl	8000104 <__udivsi3>
 80048f8:	0083      	lsls	r3, r0, #2
 80048fa:	6423      	str	r3, [r4, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048fc:	2202      	movs	r2, #2
 80048fe:	2325      	movs	r3, #37	@ 0x25
 8004900:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004902:	682b      	ldr	r3, [r5, #0]
 8004904:	4a2c      	ldr	r2, [pc, #176]	@ (80049b8 <HAL_DMA_Init+0xd8>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004906:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004908:	4013      	ands	r3, r2
 800490a:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800490c:	68e3      	ldr	r3, [r4, #12]
 800490e:	6921      	ldr	r1, [r4, #16]
 8004910:	4333      	orrs	r3, r6
 8004912:	430b      	orrs	r3, r1
 8004914:	6961      	ldr	r1, [r4, #20]
 8004916:	682a      	ldr	r2, [r5, #0]
 8004918:	430b      	orrs	r3, r1
 800491a:	69a1      	ldr	r1, [r4, #24]
 800491c:	430b      	orrs	r3, r1
 800491e:	69e1      	ldr	r1, [r4, #28]
 8004920:	430b      	orrs	r3, r1
 8004922:	6a21      	ldr	r1, [r4, #32]
 8004924:	430b      	orrs	r3, r1
 8004926:	4313      	orrs	r3, r2
 8004928:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800492a:	4b24      	ldr	r3, [pc, #144]	@ (80049bc <HAL_DMA_Init+0xdc>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800492c:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800492e:	469c      	mov	ip, r3
 8004930:	4460      	add	r0, ip
 8004932:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004934:	20ff      	movs	r0, #255	@ 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004936:	4b22      	ldr	r3, [pc, #136]	@ (80049c0 <HAL_DMA_Init+0xe0>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004938:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800493a:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800493c:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800493e:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004940:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004942:	f7fb fbdf 	bl	8000104 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004946:	231f      	movs	r3, #31
 8004948:	2201      	movs	r2, #1
 800494a:	4003      	ands	r3, r0
 800494c:	0010      	movs	r0, r2
 800494e:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004950:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004952:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004954:	01db      	lsls	r3, r3, #7
 8004956:	429e      	cmp	r6, r3
 8004958:	d01f      	beq.n	800499a <HAL_DMA_Init+0xba>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800495a:	233f      	movs	r3, #63	@ 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800495c:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800495e:	6861      	ldr	r1, [r4, #4]
 8004960:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004962:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004964:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004966:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004968:	2903      	cmp	r1, #3
 800496a:	d81b      	bhi.n	80049a4 <HAL_DMA_Init+0xc4>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800496c:	4915      	ldr	r1, [pc, #84]	@ (80049c4 <HAL_DMA_Init+0xe4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800496e:	4816      	ldr	r0, [pc, #88]	@ (80049c8 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004970:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004972:	3b01      	subs	r3, #1
 8004974:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004976:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004978:	0089      	lsls	r1, r1, #2
 800497a:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800497c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800497e:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004980:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004982:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004984:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004986:	2225      	movs	r2, #37	@ 0x25
 8004988:	2101      	movs	r1, #1
  return HAL_OK;
 800498a:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800498c:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800498e:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8004990:	3a01      	subs	r2, #1
 8004992:	54a3      	strb	r3, [r4, r2]
}
 8004994:	bc80      	pop	{r7}
 8004996:	46b8      	mov	r8, r7
 8004998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800499a:	2300      	movs	r3, #0
 800499c:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800499e:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049a0:	4643      	mov	r3, r8
 80049a2:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80049a8:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80049aa:	65a3      	str	r3, [r4, #88]	@ 0x58
 80049ac:	e7ea      	b.n	8004984 <HAL_DMA_Init+0xa4>
    return HAL_ERROR;
 80049ae:	2001      	movs	r0, #1
 80049b0:	e7f0      	b.n	8004994 <HAL_DMA_Init+0xb4>
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	bffdfff8 	.word	0xbffdfff8
 80049b8:	ffff800f 	.word	0xffff800f
 80049bc:	10008200 	.word	0x10008200
 80049c0:	40020880 	.word	0x40020880
 80049c4:	1000823f 	.word	0x1000823f
 80049c8:	40020940 	.word	0x40020940

080049cc <HAL_DMA_Start_IT>:
{
 80049cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ce:	46c6      	mov	lr, r8
  __HAL_LOCK(hdma);
 80049d0:	2424      	movs	r4, #36	@ 0x24
{
 80049d2:	b500      	push	{lr}
  __HAL_LOCK(hdma);
 80049d4:	5d05      	ldrb	r5, [r0, r4]
 80049d6:	2d01      	cmp	r5, #1
 80049d8:	d04f      	beq.n	8004a7a <HAL_DMA_Start_IT+0xae>
 80049da:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 80049dc:	2625      	movs	r6, #37	@ 0x25
  __HAL_LOCK(hdma);
 80049de:	5505      	strb	r5, [r0, r4]
  if (hdma->State == HAL_DMA_STATE_READY)
 80049e0:	5d85      	ldrb	r5, [r0, r6]
 80049e2:	b2ef      	uxtb	r7, r5
 80049e4:	2d01      	cmp	r5, #1
 80049e6:	d007      	beq.n	80049f8 <HAL_DMA_Start_IT+0x2c>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80049e8:	2380      	movs	r3, #128	@ 0x80
 80049ea:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80049ec:	2300      	movs	r3, #0
 80049ee:	5503      	strb	r3, [r0, r4]
    status = HAL_ERROR;
 80049f0:	2001      	movs	r0, #1
}
 80049f2:	bc80      	pop	{r7}
 80049f4:	46b8      	mov	r8, r7
 80049f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80049f8:	3c22      	subs	r4, #34	@ 0x22
 80049fa:	5584      	strb	r4, [r0, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049fc:	2400      	movs	r4, #0
 80049fe:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004a00:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a02:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 8004a04:	6825      	ldr	r5, [r4, #0]
 8004a06:	43bd      	bics	r5, r7
 8004a08:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a0a:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 8004a0c:	606e      	str	r6, [r5, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8004a0e:	6d06      	ldr	r6, [r0, #80]	@ 0x50
 8004a10:	2e00      	cmp	r6, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_DMA_Start_IT+0x4e>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a14:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8004a16:	6d87      	ldr	r7, [r0, #88]	@ 0x58
 8004a18:	606f      	str	r7, [r5, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004a1a:	4d1f      	ldr	r5, [pc, #124]	@ (8004a98 <HAL_DMA_Start_IT+0xcc>)
 8004a1c:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8004a1e:	46ac      	mov	ip, r5
 8004a20:	686d      	ldr	r5, [r5, #4]
 8004a22:	46a8      	mov	r8, r5
 8004a24:	251c      	movs	r5, #28
 8004a26:	402f      	ands	r7, r5
 8004a28:	3d1b      	subs	r5, #27
 8004a2a:	40bd      	lsls	r5, r7
 8004a2c:	4647      	mov	r7, r8
 8004a2e:	433d      	orrs	r5, r7
 8004a30:	4667      	mov	r7, ip
 8004a32:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8004a34:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a36:	6883      	ldr	r3, [r0, #8]
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d020      	beq.n	8004a7e <HAL_DMA_Start_IT+0xb2>
    hdma->Instance->CPAR = SrcAddress;
 8004a3c:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a3e:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8004a40:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d01e      	beq.n	8004a84 <HAL_DMA_Start_IT+0xb8>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a46:	220e      	movs	r2, #14
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a4e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004a50:	6813      	ldr	r3, [r2, #0]
 8004a52:	03db      	lsls	r3, r3, #15
 8004a54:	d504      	bpl.n	8004a60 <HAL_DMA_Start_IT+0x94>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a56:	2380      	movs	r3, #128	@ 0x80
 8004a58:	6811      	ldr	r1, [r2, #0]
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004a60:	2e00      	cmp	r6, #0
 8004a62:	d004      	beq.n	8004a6e <HAL_DMA_Start_IT+0xa2>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a64:	2380      	movs	r3, #128	@ 0x80
 8004a66:	6832      	ldr	r2, [r6, #0]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	6033      	str	r3, [r6, #0]
    __HAL_DMA_ENABLE(hdma);
 8004a6e:	2201      	movs	r2, #1
 8004a70:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a72:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004a74:	4313      	orrs	r3, r2
 8004a76:	6023      	str	r3, [r4, #0]
 8004a78:	e7bb      	b.n	80049f2 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8004a7a:	2002      	movs	r0, #2
 8004a7c:	e7b9      	b.n	80049f2 <HAL_DMA_Start_IT+0x26>
    hdma->Instance->CPAR = DstAddress;
 8004a7e:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004a80:	60e1      	str	r1, [r4, #12]
 8004a82:	e7dd      	b.n	8004a40 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a84:	2204      	movs	r2, #4
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	4393      	bics	r3, r2
 8004a8a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	3206      	adds	r2, #6
 8004a90:	4313      	orrs	r3, r2
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	e7db      	b.n	8004a4e <HAL_DMA_Start_IT+0x82>
 8004a96:	46c0      	nop			@ (mov r8, r8)
 8004a98:	40020000 	.word	0x40020000

08004a9c <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004a9c:	2325      	movs	r3, #37	@ 0x25
{
 8004a9e:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004aa0:	5cc3      	ldrb	r3, [r0, r3]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d003      	beq.n	8004aae <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8004aaa:	2001      	movs	r0, #1
}
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aae:	210e      	movs	r1, #14
 8004ab0:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004ab2:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ab4:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ab6:	4c15      	ldr	r4, [pc, #84]	@ (8004b0c <HAL_DMA_Abort_IT+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ab8:	438b      	bics	r3, r1
 8004aba:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004abc:	2301      	movs	r3, #1
 8004abe:	6811      	ldr	r1, [r2, #0]
 8004ac0:	4399      	bics	r1, r3
 8004ac2:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ac4:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8004ac6:	680a      	ldr	r2, [r1, #0]
 8004ac8:	4022      	ands	r2, r4
 8004aca:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004acc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004ace:	4910      	ldr	r1, [pc, #64]	@ (8004b10 <HAL_DMA_Abort_IT+0x74>)
 8004ad0:	4032      	ands	r2, r6
 8004ad2:	4093      	lsls	r3, r2
 8004ad4:	684d      	ldr	r5, [r1, #4]
 8004ad6:	432b      	orrs	r3, r5
 8004ad8:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ada:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8004adc:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8004ade:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004ae0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	4022      	ands	r2, r4
 8004aea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aec:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004aee:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004af0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004af2:	2325      	movs	r3, #37	@ 0x25
 8004af4:	2201      	movs	r2, #1
 8004af6:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8004af8:	2200      	movs	r2, #0
 8004afa:	3b01      	subs	r3, #1
 8004afc:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8004afe:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d000      	beq.n	8004b06 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8004b04:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004b06:	2000      	movs	r0, #0
 8004b08:	e7d0      	b.n	8004aac <HAL_DMA_Abort_IT+0x10>
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	fffffeff 	.word	0xfffffeff
 8004b10:	40020000 	.word	0x40020000

08004b14 <HAL_DMA_IRQHandler>:
{
 8004b14:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b16:	211c      	movs	r1, #28
 8004b18:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8004b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc8 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8004b1c:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 8004b1e:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b20:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8004b22:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b24:	400b      	ands	r3, r1
 8004b26:	0021      	movs	r1, r4
 8004b28:	4099      	lsls	r1, r3
 8004b2a:	420a      	tst	r2, r1
 8004b2c:	d010      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x3c>
 8004b2e:	422c      	tst	r4, r5
 8004b30:	d00e      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b32:	6833      	ldr	r3, [r6, #0]
 8004b34:	069b      	lsls	r3, r3, #26
 8004b36:	d402      	bmi.n	8004b3e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b38:	6833      	ldr	r3, [r6, #0]
 8004b3a:	43a3      	bics	r3, r4
 8004b3c:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004b3e:	4b22      	ldr	r3, [pc, #136]	@ (8004bc8 <HAL_DMA_IRQHandler+0xb4>)
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	4311      	orrs	r1, r2
 8004b44:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004b46:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d000      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8004b4c:	4798      	blx	r3
}
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004b50:	2402      	movs	r4, #2
 8004b52:	0021      	movs	r1, r4
 8004b54:	4099      	lsls	r1, r3
 8004b56:	420a      	tst	r2, r1
 8004b58:	d017      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x76>
 8004b5a:	422c      	tst	r4, r5
 8004b5c:	d015      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b5e:	6833      	ldr	r3, [r6, #0]
 8004b60:	069b      	lsls	r3, r3, #26
 8004b62:	d406      	bmi.n	8004b72 <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b64:	220a      	movs	r2, #10
 8004b66:	6833      	ldr	r3, [r6, #0]
 8004b68:	4393      	bics	r3, r2
 8004b6a:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004b6c:	2325      	movs	r3, #37	@ 0x25
 8004b6e:	3a09      	subs	r2, #9
 8004b70:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004b72:	4b15      	ldr	r3, [pc, #84]	@ (8004bc8 <HAL_DMA_IRQHandler+0xb4>)
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	4311      	orrs	r1, r2
 8004b78:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2324      	movs	r3, #36	@ 0x24
 8004b7e:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8004b80:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0e3      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8004b86:	4798      	blx	r3
  return;
 8004b88:	e7e1      	b.n	8004b4e <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004b8a:	2108      	movs	r1, #8
 8004b8c:	000c      	movs	r4, r1
 8004b8e:	409c      	lsls	r4, r3
 8004b90:	4222      	tst	r2, r4
 8004b92:	d0dc      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x3a>
 8004b94:	4229      	tst	r1, r5
 8004b96:	d0da      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b98:	6832      	ldr	r2, [r6, #0]
 8004b9a:	3106      	adds	r1, #6
 8004b9c:	438a      	bics	r2, r1
 8004b9e:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	0015      	movs	r5, r2
 8004ba4:	409d      	lsls	r5, r3
 8004ba6:	002b      	movs	r3, r5
 8004ba8:	4907      	ldr	r1, [pc, #28]	@ (8004bc8 <HAL_DMA_IRQHandler+0xb4>)
 8004baa:	684c      	ldr	r4, [r1, #4]
 8004bac:	4323      	orrs	r3, r4
 8004bae:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004bb0:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bb2:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004bb4:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8004bbc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0c5      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8004bc2:	4798      	blx	r3
  return;
 8004bc4:	e7c3      	b.n	8004b4e <HAL_DMA_IRQHandler+0x3a>
 8004bc6:	46c0      	nop			@ (mov r8, r8)
 8004bc8:	40020000 	.word	0x40020000

08004bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bce:	46de      	mov	lr, fp
 8004bd0:	4657      	mov	r7, sl
 8004bd2:	464e      	mov	r6, r9
 8004bd4:	4645      	mov	r5, r8
 8004bd6:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bd8:	680a      	ldr	r2, [r1, #0]
{
 8004bda:	468b      	mov	fp, r1
 8004bdc:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	d06a      	beq.n	8004cb8 <HAL_GPIO_Init+0xec>
 8004be2:	21a0      	movs	r1, #160	@ 0xa0
  uint32_t position = 0x00u;
 8004be4:	2300      	movs	r3, #0
 8004be6:	05c9      	lsls	r1, r1, #23
 8004be8:	4288      	cmp	r0, r1
 8004bea:	d100      	bne.n	8004bee <HAL_GPIO_Init+0x22>
 8004bec:	e0c5      	b.n	8004d7a <HAL_GPIO_Init+0x1ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bee:	2101      	movs	r1, #1
 8004bf0:	4099      	lsls	r1, r3
 8004bf2:	468c      	mov	ip, r1
 8004bf4:	4011      	ands	r1, r2
 8004bf6:	468a      	mov	sl, r1

    if (iocurrent != 0x00u)
 8004bf8:	4661      	mov	r1, ip
 8004bfa:	420a      	tst	r2, r1
 8004bfc:	d058      	beq.n	8004cb0 <HAL_GPIO_Init+0xe4>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bfe:	2503      	movs	r5, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c00:	4659      	mov	r1, fp
 8004c02:	005e      	lsls	r6, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c04:	40b5      	lsls	r5, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c06:	684c      	ldr	r4, [r1, #4]
 8004c08:	2103      	movs	r1, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c0a:	43ed      	mvns	r5, r5
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c0c:	4021      	ands	r1, r4
 8004c0e:	1e4f      	subs	r7, r1, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c10:	9501      	str	r5, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c12:	2f01      	cmp	r7, #1
 8004c14:	d957      	bls.n	8004cc6 <HAL_GPIO_Init+0xfa>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c16:	2903      	cmp	r1, #3
 8004c18:	d000      	beq.n	8004c1c <HAL_GPIO_Init+0x50>
 8004c1a:	e15f      	b.n	8004edc <HAL_GPIO_Init+0x310>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c1c:	40b1      	lsls	r1, r6
      temp = GPIOx->MODER;
 8004c1e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c20:	9d01      	ldr	r5, [sp, #4]
 8004c22:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c24:	4329      	orrs	r1, r5
      GPIOx->MODER = temp;
 8004c26:	6001      	str	r1, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c28:	21c0      	movs	r1, #192	@ 0xc0
 8004c2a:	0289      	lsls	r1, r1, #10
 8004c2c:	420c      	tst	r4, r1
 8004c2e:	d03f      	beq.n	8004cb0 <HAL_GPIO_Init+0xe4>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004c30:	2603      	movs	r6, #3
 8004c32:	270f      	movs	r7, #15
 8004c34:	4db9      	ldr	r5, [pc, #740]	@ (8004f1c <HAL_GPIO_Init+0x350>)
 8004c36:	401e      	ands	r6, r3
 8004c38:	46ac      	mov	ip, r5
 8004c3a:	00f6      	lsls	r6, r6, #3
 8004c3c:	40b7      	lsls	r7, r6
        temp = EXTI->EXTICR[position >> 2u];
 8004c3e:	0899      	lsrs	r1, r3, #2
 8004c40:	0089      	lsls	r1, r1, #2
 8004c42:	4461      	add	r1, ip
 8004c44:	6e0d      	ldr	r5, [r1, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004c46:	43bd      	bics	r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004c48:	4fb5      	ldr	r7, [pc, #724]	@ (8004f20 <HAL_GPIO_Init+0x354>)
 8004c4a:	42b8      	cmp	r0, r7
 8004c4c:	d100      	bne.n	8004c50 <HAL_GPIO_Init+0x84>
 8004c4e:	e090      	b.n	8004d72 <HAL_GPIO_Init+0x1a6>
 8004c50:	4fb4      	ldr	r7, [pc, #720]	@ (8004f24 <HAL_GPIO_Init+0x358>)
 8004c52:	42b8      	cmp	r0, r7
 8004c54:	d100      	bne.n	8004c58 <HAL_GPIO_Init+0x8c>
 8004c56:	e07b      	b.n	8004d50 <HAL_GPIO_Init+0x184>
 8004c58:	4fb3      	ldr	r7, [pc, #716]	@ (8004f28 <HAL_GPIO_Init+0x35c>)
 8004c5a:	42b8      	cmp	r0, r7
 8004c5c:	d100      	bne.n	8004c60 <HAL_GPIO_Init+0x94>
 8004c5e:	e139      	b.n	8004ed4 <HAL_GPIO_Init+0x308>
 8004c60:	2705      	movs	r7, #5
 8004c62:	40b7      	lsls	r7, r6
 8004c64:	433d      	orrs	r5, r7
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c66:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8004c68:	660d      	str	r5, [r1, #96]	@ 0x60
        temp &= ~(iocurrent);
 8004c6a:	4655      	mov	r5, sl
        temp = EXTI->RTSR1;
 8004c6c:	49ab      	ldr	r1, [pc, #684]	@ (8004f1c <HAL_GPIO_Init+0x350>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c6e:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8004c70:	43ed      	mvns	r5, r5
        temp = EXTI->RTSR1;
 8004c72:	6809      	ldr	r1, [r1, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c74:	4234      	tst	r4, r6
 8004c76:	d000      	beq.n	8004c7a <HAL_GPIO_Init+0xae>
 8004c78:	e078      	b.n	8004d6c <HAL_GPIO_Init+0x1a0>
        temp &= ~(iocurrent);
 8004c7a:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004c7c:	4ea7      	ldr	r6, [pc, #668]	@ (8004f1c <HAL_GPIO_Init+0x350>)
 8004c7e:	6031      	str	r1, [r6, #0]

        temp = EXTI->FTSR1;
 8004c80:	6871      	ldr	r1, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c82:	2680      	movs	r6, #128	@ 0x80
 8004c84:	03b6      	lsls	r6, r6, #14
 8004c86:	4234      	tst	r4, r6
 8004c88:	d16d      	bne.n	8004d66 <HAL_GPIO_Init+0x19a>
        temp &= ~(iocurrent);
 8004c8a:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004c8c:	4ea3      	ldr	r6, [pc, #652]	@ (8004f1c <HAL_GPIO_Init+0x350>)
 8004c8e:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c90:	2184      	movs	r1, #132	@ 0x84
 8004c92:	5871      	ldr	r1, [r6, r1]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c94:	03a6      	lsls	r6, r4, #14
 8004c96:	d463      	bmi.n	8004d60 <HAL_GPIO_Init+0x194>
        temp &= ~(iocurrent);
 8004c98:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8004c9a:	2684      	movs	r6, #132	@ 0x84
 8004c9c:	4f9f      	ldr	r7, [pc, #636]	@ (8004f1c <HAL_GPIO_Init+0x350>)
 8004c9e:	51b9      	str	r1, [r7, r6]

        temp = EXTI->IMR1;
 8004ca0:	2180      	movs	r1, #128	@ 0x80
 8004ca2:	5879      	ldr	r1, [r7, r1]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ca4:	03e4      	lsls	r4, r4, #15
 8004ca6:	d457      	bmi.n	8004d58 <HAL_GPIO_Init+0x18c>
        temp &= ~(iocurrent);
 8004ca8:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8004caa:	2480      	movs	r4, #128	@ 0x80
 8004cac:	4d9b      	ldr	r5, [pc, #620]	@ (8004f1c <HAL_GPIO_Init+0x350>)
 8004cae:	5129      	str	r1, [r5, r4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cb0:	0011      	movs	r1, r2
      }
    }

    position++;
 8004cb2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cb4:	40d9      	lsrs	r1, r3
 8004cb6:	d19a      	bne.n	8004bee <HAL_GPIO_Init+0x22>
  }
}
 8004cb8:	b005      	add	sp, #20
 8004cba:	bcf0      	pop	{r4, r5, r6, r7}
 8004cbc:	46bb      	mov	fp, r7
 8004cbe:	46b2      	mov	sl, r6
 8004cc0:	46a9      	mov	r9, r5
 8004cc2:	46a0      	mov	r8, r4
 8004cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8004cc6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004cc8:	402f      	ands	r7, r5
 8004cca:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ccc:	465f      	mov	r7, fp
 8004cce:	68ff      	ldr	r7, [r7, #12]
 8004cd0:	40b7      	lsls	r7, r6
 8004cd2:	46b8      	mov	r8, r7
 8004cd4:	464f      	mov	r7, r9
 8004cd6:	4645      	mov	r5, r8
 8004cd8:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8004cda:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004cdc:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cde:	002f      	movs	r7, r5
 8004ce0:	4665      	mov	r5, ip
 8004ce2:	43af      	bics	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ce4:	0925      	lsrs	r5, r4, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ce6:	46b8      	mov	r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ce8:	002f      	movs	r7, r5
 8004cea:	2501      	movs	r5, #1
 8004cec:	402f      	ands	r7, r5
 8004cee:	409f      	lsls	r7, r3
 8004cf0:	46bc      	mov	ip, r7
 8004cf2:	4647      	mov	r7, r8
 8004cf4:	4665      	mov	r5, ip
 8004cf6:	432f      	orrs	r7, r5
        GPIOx->OTYPER = temp;
 8004cf8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004cfa:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004cfc:	002f      	movs	r7, r5
 8004cfe:	9d01      	ldr	r5, [sp, #4]
 8004d00:	402f      	ands	r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d02:	465d      	mov	r5, fp
 8004d04:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004d06:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d08:	002f      	movs	r7, r5
 8004d0a:	40b7      	lsls	r7, r6
 8004d0c:	46bc      	mov	ip, r7
 8004d0e:	4647      	mov	r7, r8
 8004d10:	4665      	mov	r5, ip
 8004d12:	432f      	orrs	r7, r5
        GPIOx->PUPDR = temp;
 8004d14:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d16:	2902      	cmp	r1, #2
 8004d18:	d000      	beq.n	8004d1c <HAL_GPIO_Init+0x150>
 8004d1a:	e77f      	b.n	8004c1c <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 8004d1c:	08dd      	lsrs	r5, r3, #3
 8004d1e:	00ad      	lsls	r5, r5, #2
 8004d20:	46ac      	mov	ip, r5
 8004d22:	4484      	add	ip, r0
 8004d24:	4665      	mov	r5, ip
 8004d26:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d28:	2507      	movs	r5, #7
 8004d2a:	401d      	ands	r5, r3
 8004d2c:	00ad      	lsls	r5, r5, #2
 8004d2e:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8004d30:	9702      	str	r7, [sp, #8]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d32:	250f      	movs	r5, #15
 8004d34:	4647      	mov	r7, r8
 8004d36:	40bd      	lsls	r5, r7
 8004d38:	9f02      	ldr	r7, [sp, #8]
 8004d3a:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d3c:	465d      	mov	r5, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d3e:	9702      	str	r7, [sp, #8]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d40:	4647      	mov	r7, r8
 8004d42:	692d      	ldr	r5, [r5, #16]
 8004d44:	40bd      	lsls	r5, r7
 8004d46:	9f02      	ldr	r7, [sp, #8]
 8004d48:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8004d4a:	4665      	mov	r5, ip
 8004d4c:	622f      	str	r7, [r5, #32]
 8004d4e:	e765      	b.n	8004c1c <HAL_GPIO_Init+0x50>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004d50:	2702      	movs	r7, #2
 8004d52:	40b7      	lsls	r7, r6
 8004d54:	433d      	orrs	r5, r7
 8004d56:	e786      	b.n	8004c66 <HAL_GPIO_Init+0x9a>
          temp |= iocurrent;
 8004d58:	4654      	mov	r4, sl
 8004d5a:	430c      	orrs	r4, r1
 8004d5c:	0021      	movs	r1, r4
 8004d5e:	e7a4      	b.n	8004caa <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 8004d60:	4656      	mov	r6, sl
 8004d62:	4331      	orrs	r1, r6
 8004d64:	e799      	b.n	8004c9a <HAL_GPIO_Init+0xce>
          temp |= iocurrent;
 8004d66:	4656      	mov	r6, sl
 8004d68:	4331      	orrs	r1, r6
 8004d6a:	e78f      	b.n	8004c8c <HAL_GPIO_Init+0xc0>
          temp |= iocurrent;
 8004d6c:	4656      	mov	r6, sl
 8004d6e:	4331      	orrs	r1, r6
 8004d70:	e784      	b.n	8004c7c <HAL_GPIO_Init+0xb0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004d72:	2701      	movs	r7, #1
 8004d74:	40b7      	lsls	r7, r6
 8004d76:	433d      	orrs	r5, r7
 8004d78:	e775      	b.n	8004c66 <HAL_GPIO_Init+0x9a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	468a      	mov	sl, r1
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d7e:	4659      	mov	r1, fp
 8004d80:	9102      	str	r1, [sp, #8]
 8004d82:	e040      	b.n	8004e06 <HAL_GPIO_Init+0x23a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d84:	2903      	cmp	r1, #3
 8004d86:	d000      	beq.n	8004d8a <HAL_GPIO_Init+0x1be>
 8004d88:	e0b5      	b.n	8004ef6 <HAL_GPIO_Init+0x32a>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d8a:	40b1      	lsls	r1, r6
      temp = GPIOx->MODER;
 8004d8c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d8e:	9d01      	ldr	r5, [sp, #4]
 8004d90:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d92:	4329      	orrs	r1, r5
      GPIOx->MODER = temp;
 8004d94:	6001      	str	r1, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d96:	21c0      	movs	r1, #192	@ 0xc0
 8004d98:	0289      	lsls	r1, r1, #10
 8004d9a:	420c      	tst	r4, r1
 8004d9c:	d02e      	beq.n	8004dfc <HAL_GPIO_Init+0x230>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004d9e:	2603      	movs	r6, #3
 8004da0:	270f      	movs	r7, #15
 8004da2:	4d5e      	ldr	r5, [pc, #376]	@ (8004f1c <HAL_GPIO_Init+0x350>)
 8004da4:	401e      	ands	r6, r3
 8004da6:	46ac      	mov	ip, r5
 8004da8:	00f6      	lsls	r6, r6, #3
 8004daa:	40b7      	lsls	r7, r6
        temp = EXTI->EXTICR[position >> 2u];
 8004dac:	0899      	lsrs	r1, r3, #2
 8004dae:	0089      	lsls	r1, r1, #2
 8004db0:	4461      	add	r1, ip
 8004db2:	6e0d      	ldr	r5, [r1, #96]	@ 0x60
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004db4:	2680      	movs	r6, #128	@ 0x80
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004db6:	43bd      	bics	r5, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8004db8:	660d      	str	r5, [r1, #96]	@ 0x60
        temp = EXTI->RTSR1;
 8004dba:	4661      	mov	r1, ip
        temp &= ~(iocurrent);
 8004dbc:	465d      	mov	r5, fp
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004dbe:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8004dc0:	43ed      	mvns	r5, r5
        temp = EXTI->RTSR1;
 8004dc2:	6809      	ldr	r1, [r1, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004dc4:	4234      	tst	r4, r6
 8004dc6:	d000      	beq.n	8004dca <HAL_GPIO_Init+0x1fe>
 8004dc8:	e081      	b.n	8004ece <HAL_GPIO_Init+0x302>
        temp &= ~(iocurrent);
 8004dca:	4029      	ands	r1, r5
        EXTI->RTSR1 = temp;
 8004dcc:	4e53      	ldr	r6, [pc, #332]	@ (8004f1c <HAL_GPIO_Init+0x350>)
 8004dce:	6031      	str	r1, [r6, #0]
        temp = EXTI->FTSR1;
 8004dd0:	6871      	ldr	r1, [r6, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004dd2:	02a6      	lsls	r6, r4, #10
 8004dd4:	d478      	bmi.n	8004ec8 <HAL_GPIO_Init+0x2fc>
        temp &= ~(iocurrent);
 8004dd6:	4029      	ands	r1, r5
        EXTI->FTSR1 = temp;
 8004dd8:	4e50      	ldr	r6, [pc, #320]	@ (8004f1c <HAL_GPIO_Init+0x350>)
 8004dda:	6071      	str	r1, [r6, #4]
        temp = EXTI->EMR1;
 8004ddc:	2184      	movs	r1, #132	@ 0x84
 8004dde:	5871      	ldr	r1, [r6, r1]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004de0:	03a6      	lsls	r6, r4, #14
 8004de2:	d46e      	bmi.n	8004ec2 <HAL_GPIO_Init+0x2f6>
        temp &= ~(iocurrent);
 8004de4:	4029      	ands	r1, r5
        EXTI->EMR1 = temp;
 8004de6:	2684      	movs	r6, #132	@ 0x84
 8004de8:	4f4c      	ldr	r7, [pc, #304]	@ (8004f1c <HAL_GPIO_Init+0x350>)
 8004dea:	51b9      	str	r1, [r7, r6]
        temp = EXTI->IMR1;
 8004dec:	2180      	movs	r1, #128	@ 0x80
 8004dee:	5879      	ldr	r1, [r7, r1]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004df0:	03e4      	lsls	r4, r4, #15
 8004df2:	d463      	bmi.n	8004ebc <HAL_GPIO_Init+0x2f0>
        temp &= ~(iocurrent);
 8004df4:	4029      	ands	r1, r5
        EXTI->IMR1 = temp;
 8004df6:	2480      	movs	r4, #128	@ 0x80
 8004df8:	4d48      	ldr	r5, [pc, #288]	@ (8004f1c <HAL_GPIO_Init+0x350>)
 8004dfa:	5129      	str	r1, [r5, r4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dfc:	0011      	movs	r1, r2
    position++;
 8004dfe:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e00:	40d9      	lsrs	r1, r3
 8004e02:	d100      	bne.n	8004e06 <HAL_GPIO_Init+0x23a>
 8004e04:	e758      	b.n	8004cb8 <HAL_GPIO_Init+0xec>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e06:	4651      	mov	r1, sl
 8004e08:	4099      	lsls	r1, r3
 8004e0a:	468c      	mov	ip, r1
 8004e0c:	4011      	ands	r1, r2
 8004e0e:	468b      	mov	fp, r1
    if (iocurrent != 0x00u)
 8004e10:	4661      	mov	r1, ip
 8004e12:	4211      	tst	r1, r2
 8004e14:	d0f2      	beq.n	8004dfc <HAL_GPIO_Init+0x230>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e16:	2503      	movs	r5, #3
 8004e18:	005e      	lsls	r6, r3, #1
 8004e1a:	40b5      	lsls	r5, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e1c:	9902      	ldr	r1, [sp, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e1e:	43ed      	mvns	r5, r5
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e20:	684c      	ldr	r4, [r1, #4]
 8004e22:	2103      	movs	r1, #3
 8004e24:	4021      	ands	r1, r4
 8004e26:	1e4f      	subs	r7, r1, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e28:	9501      	str	r5, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e2a:	2f01      	cmp	r7, #1
 8004e2c:	d8aa      	bhi.n	8004d84 <HAL_GPIO_Init+0x1b8>
        temp = GPIOx->OSPEEDR;
 8004e2e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e30:	402f      	ands	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e32:	9d02      	ldr	r5, [sp, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e34:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e36:	68ef      	ldr	r7, [r5, #12]
 8004e38:	40b7      	lsls	r7, r6
 8004e3a:	46b8      	mov	r8, r7
 8004e3c:	464f      	mov	r7, r9
 8004e3e:	4645      	mov	r5, r8
 8004e40:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8004e42:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004e44:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e46:	002f      	movs	r7, r5
 8004e48:	4665      	mov	r5, ip
 8004e4a:	43af      	bics	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e4c:	0925      	lsrs	r5, r4, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e4e:	46b8      	mov	r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e50:	002f      	movs	r7, r5
 8004e52:	4655      	mov	r5, sl
 8004e54:	402f      	ands	r7, r5
 8004e56:	409f      	lsls	r7, r3
 8004e58:	46bc      	mov	ip, r7
 8004e5a:	4647      	mov	r7, r8
 8004e5c:	4665      	mov	r5, ip
 8004e5e:	432f      	orrs	r7, r5
        GPIOx->OTYPER = temp;
 8004e60:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004e62:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e64:	002f      	movs	r7, r5
 8004e66:	9d01      	ldr	r5, [sp, #4]
 8004e68:	402f      	ands	r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e6a:	9d02      	ldr	r5, [sp, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e6c:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e6e:	68ad      	ldr	r5, [r5, #8]
 8004e70:	002f      	movs	r7, r5
 8004e72:	40b7      	lsls	r7, r6
 8004e74:	46bc      	mov	ip, r7
 8004e76:	4647      	mov	r7, r8
 8004e78:	4665      	mov	r5, ip
 8004e7a:	432f      	orrs	r7, r5
        GPIOx->PUPDR = temp;
 8004e7c:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e7e:	2902      	cmp	r1, #2
 8004e80:	d183      	bne.n	8004d8a <HAL_GPIO_Init+0x1be>
        temp = GPIOx->AFR[position >> 3u];
 8004e82:	08dd      	lsrs	r5, r3, #3
 8004e84:	00ad      	lsls	r5, r5, #2
 8004e86:	46ac      	mov	ip, r5
 8004e88:	25a0      	movs	r5, #160	@ 0xa0
 8004e8a:	05ed      	lsls	r5, r5, #23
 8004e8c:	46a8      	mov	r8, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e8e:	44c4      	add	ip, r8
        temp = GPIOx->AFR[position >> 3u];
 8004e90:	4665      	mov	r5, ip
 8004e92:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e94:	2507      	movs	r5, #7
 8004e96:	401d      	ands	r5, r3
 8004e98:	00ad      	lsls	r5, r5, #2
 8004e9a:	46a9      	mov	r9, r5
        temp = GPIOx->AFR[position >> 3u];
 8004e9c:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e9e:	250f      	movs	r5, #15
 8004ea0:	464f      	mov	r7, r9
 8004ea2:	40bd      	lsls	r5, r7
 8004ea4:	9f03      	ldr	r7, [sp, #12]
 8004ea6:	43af      	bics	r7, r5
 8004ea8:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004eaa:	464f      	mov	r7, r9
 8004eac:	9d02      	ldr	r5, [sp, #8]
 8004eae:	692d      	ldr	r5, [r5, #16]
 8004eb0:	40bd      	lsls	r5, r7
 8004eb2:	9f03      	ldr	r7, [sp, #12]
 8004eb4:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8004eb6:	4665      	mov	r5, ip
 8004eb8:	622f      	str	r7, [r5, #32]
 8004eba:	e766      	b.n	8004d8a <HAL_GPIO_Init+0x1be>
          temp |= iocurrent;
 8004ebc:	465c      	mov	r4, fp
 8004ebe:	4321      	orrs	r1, r4
 8004ec0:	e799      	b.n	8004df6 <HAL_GPIO_Init+0x22a>
          temp |= iocurrent;
 8004ec2:	465e      	mov	r6, fp
 8004ec4:	4331      	orrs	r1, r6
 8004ec6:	e78e      	b.n	8004de6 <HAL_GPIO_Init+0x21a>
          temp |= iocurrent;
 8004ec8:	465e      	mov	r6, fp
 8004eca:	4331      	orrs	r1, r6
 8004ecc:	e784      	b.n	8004dd8 <HAL_GPIO_Init+0x20c>
          temp |= iocurrent;
 8004ece:	465e      	mov	r6, fp
 8004ed0:	4331      	orrs	r1, r6
 8004ed2:	e77b      	b.n	8004dcc <HAL_GPIO_Init+0x200>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004ed4:	2703      	movs	r7, #3
 8004ed6:	40b7      	lsls	r7, r6
 8004ed8:	433d      	orrs	r5, r7
 8004eda:	e6c4      	b.n	8004c66 <HAL_GPIO_Init+0x9a>
 8004edc:	002f      	movs	r7, r5
        temp = GPIOx->PUPDR;
 8004ede:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004ee0:	403d      	ands	r5, r7
 8004ee2:	46a8      	mov	r8, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004ee4:	465d      	mov	r5, fp
 8004ee6:	68ad      	ldr	r5, [r5, #8]
 8004ee8:	40b5      	lsls	r5, r6
 8004eea:	46ac      	mov	ip, r5
 8004eec:	4645      	mov	r5, r8
 8004eee:	4667      	mov	r7, ip
 8004ef0:	433d      	orrs	r5, r7
        GPIOx->PUPDR = temp;
 8004ef2:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ef4:	e692      	b.n	8004c1c <HAL_GPIO_Init+0x50>
 8004ef6:	002f      	movs	r7, r5
        temp = GPIOx->PUPDR;
 8004ef8:	25a0      	movs	r5, #160	@ 0xa0
 8004efa:	05ed      	lsls	r5, r5, #23
 8004efc:	46a8      	mov	r8, r5
 8004efe:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004f00:	403d      	ands	r5, r7
 8004f02:	46a9      	mov	r9, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004f04:	9d02      	ldr	r5, [sp, #8]
 8004f06:	68ad      	ldr	r5, [r5, #8]
 8004f08:	40b5      	lsls	r5, r6
 8004f0a:	46ac      	mov	ip, r5
 8004f0c:	464d      	mov	r5, r9
 8004f0e:	4667      	mov	r7, ip
 8004f10:	433d      	orrs	r5, r7
 8004f12:	46ac      	mov	ip, r5
        GPIOx->PUPDR = temp;
 8004f14:	4645      	mov	r5, r8
 8004f16:	4667      	mov	r7, ip
 8004f18:	60ef      	str	r7, [r5, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f1a:	e736      	b.n	8004d8a <HAL_GPIO_Init+0x1be>
 8004f1c:	40021800 	.word	0x40021800
 8004f20:	50000400 	.word	0x50000400
 8004f24:	50000800 	.word	0x50000800
 8004f28:	50000c00 	.word	0x50000c00

08004f2c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f2c:	2a00      	cmp	r2, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f30:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f32:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f34:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8004f36:	e7fc      	b.n	8004f32 <HAL_GPIO_WritePin+0x6>

08004f38 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f38:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f3a:	0013      	movs	r3, r2
 8004f3c:	400b      	ands	r3, r1
 8004f3e:	041b      	lsls	r3, r3, #16
 8004f40:	4391      	bics	r1, r2
 8004f42:	430b      	orrs	r3, r1
 8004f44:	6183      	str	r3, [r0, #24]
}
 8004f46:	4770      	bx	lr

08004f48 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004f48:	4b0b      	ldr	r3, [pc, #44]	@ (8004f78 <HAL_GPIO_EXTI_IRQHandler+0x30>)
{
 8004f4a:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004f4c:	68da      	ldr	r2, [r3, #12]
{
 8004f4e:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004f50:	4210      	tst	r0, r2
 8004f52:	d104      	bne.n	8004f5e <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004f54:	4b08      	ldr	r3, [pc, #32]	@ (8004f78 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	4222      	tst	r2, r4
 8004f5a:	d107      	bne.n	8004f6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 8004f5c:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004f5e:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004f60:	f7fe fae6 	bl	8003530 <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004f64:	4b04      	ldr	r3, [pc, #16]	@ (8004f78 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	4222      	tst	r2, r4
 8004f6a:	d0f7      	beq.n	8004f5c <HAL_GPIO_EXTI_IRQHandler+0x14>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004f6c:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004f6e:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004f70:	f7fe fae6 	bl	8003540 <HAL_GPIO_EXTI_Falling_Callback>
}
 8004f74:	e7f2      	b.n	8004f5c <HAL_GPIO_EXTI_IRQHandler+0x14>
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	40021800 	.word	0x40021800

08004f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f7c:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004f7e:	4c13      	ldr	r4, [pc, #76]	@ (8004fcc <HAL_PWREx_ControlVoltageScaling+0x50>)
 8004f80:	4a13      	ldr	r2, [pc, #76]	@ (8004fd0 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8004f82:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004f84:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004f86:	4013      	ands	r3, r2
 8004f88:	4303      	orrs	r3, r0
 8004f8a:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f8c:	2380      	movs	r3, #128	@ 0x80
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4298      	cmp	r0, r3
 8004f92:	d001      	beq.n	8004f98 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8004f94:	0028      	movs	r0, r5
 8004f96:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004f98:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd4 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8004f9a:	490f      	ldr	r1, [pc, #60]	@ (8004fd8 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	0058      	lsls	r0, r3, #1
 8004fa0:	18c0      	adds	r0, r0, r3
 8004fa2:	0040      	lsls	r0, r0, #1
 8004fa4:	f7fb f8ae 	bl	8000104 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fa8:	2280      	movs	r2, #128	@ 0x80
 8004faa:	6963      	ldr	r3, [r4, #20]
 8004fac:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004fae:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fb0:	4213      	tst	r3, r2
 8004fb2:	d102      	bne.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x3e>
 8004fb4:	e7ee      	b.n	8004f94 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d005      	beq.n	8004fc6 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fba:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8004fbc:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fbe:	4213      	tst	r3, r2
 8004fc0:	d1f9      	bne.n	8004fb6 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8004fc2:	2500      	movs	r5, #0
 8004fc4:	e7e6      	b.n	8004f94 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8004fc6:	2503      	movs	r5, #3
 8004fc8:	e7e4      	b.n	8004f94 <HAL_PWREx_ControlVoltageScaling+0x18>
 8004fca:	46c0      	nop			@ (mov r8, r8)
 8004fcc:	40007000 	.word	0x40007000
 8004fd0:	fffff9ff 	.word	0xfffff9ff
 8004fd4:	20000000 	.word	0x20000000
 8004fd8:	000f4240 	.word	0x000f4240

08004fdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fde:	46ce      	mov	lr, r9
 8004fe0:	4647      	mov	r7, r8
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	0004      	movs	r4, r0
 8004fe6:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	d027      	beq.n	800503c <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fec:	6803      	ldr	r3, [r0, #0]
 8004fee:	07da      	lsls	r2, r3, #31
 8004ff0:	d511      	bpl.n	8005016 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ff2:	2238      	movs	r2, #56	@ 0x38
 8004ff4:	49c0      	ldr	r1, [pc, #768]	@ (80052f8 <HAL_RCC_OscConfig+0x31c>)
 8004ff6:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ff8:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ffa:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004ffc:	2a10      	cmp	r2, #16
 8004ffe:	d100      	bne.n	8005002 <HAL_RCC_OscConfig+0x26>
 8005000:	e0cc      	b.n	800519c <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005002:	2a08      	cmp	r2, #8
 8005004:	d000      	beq.n	8005008 <HAL_RCC_OscConfig+0x2c>
 8005006:	e0cd      	b.n	80051a4 <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005008:	4abb      	ldr	r2, [pc, #748]	@ (80052f8 <HAL_RCC_OscConfig+0x31c>)
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	0392      	lsls	r2, r2, #14
 800500e:	d502      	bpl.n	8005016 <HAL_RCC_OscConfig+0x3a>
 8005010:	6862      	ldr	r2, [r4, #4]
 8005012:	2a00      	cmp	r2, #0
 8005014:	d012      	beq.n	800503c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005016:	079a      	lsls	r2, r3, #30
 8005018:	d532      	bpl.n	8005080 <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800501a:	2338      	movs	r3, #56	@ 0x38
 800501c:	4ab6      	ldr	r2, [pc, #728]	@ (80052f8 <HAL_RCC_OscConfig+0x31c>)
 800501e:	6891      	ldr	r1, [r2, #8]
 8005020:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005022:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005024:	2b10      	cmp	r3, #16
 8005026:	d100      	bne.n	800502a <HAL_RCC_OscConfig+0x4e>
 8005028:	e10b      	b.n	8005242 <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800502a:	2b00      	cmp	r3, #0
 800502c:	d000      	beq.n	8005030 <HAL_RCC_OscConfig+0x54>
 800502e:	e10d      	b.n	800524c <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005030:	6813      	ldr	r3, [r2, #0]
 8005032:	055b      	lsls	r3, r3, #21
 8005034:	d508      	bpl.n	8005048 <HAL_RCC_OscConfig+0x6c>
 8005036:	68e3      	ldr	r3, [r4, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d105      	bne.n	8005048 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 800503c:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 800503e:	b003      	add	sp, #12
 8005040:	bcc0      	pop	{r6, r7}
 8005042:	46b9      	mov	r9, r7
 8005044:	46b0      	mov	r8, r6
 8005046:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005048:	6851      	ldr	r1, [r2, #4]
 800504a:	6963      	ldr	r3, [r4, #20]
 800504c:	48ab      	ldr	r0, [pc, #684]	@ (80052fc <HAL_RCC_OscConfig+0x320>)
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	4001      	ands	r1, r0
 8005052:	430b      	orrs	r3, r1
 8005054:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005056:	4aa8      	ldr	r2, [pc, #672]	@ (80052f8 <HAL_RCC_OscConfig+0x31c>)
 8005058:	49a9      	ldr	r1, [pc, #676]	@ (8005300 <HAL_RCC_OscConfig+0x324>)
 800505a:	6813      	ldr	r3, [r2, #0]
 800505c:	400b      	ands	r3, r1
 800505e:	6921      	ldr	r1, [r4, #16]
 8005060:	430b      	orrs	r3, r1
 8005062:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005064:	6813      	ldr	r3, [r2, #0]
 8005066:	4aa7      	ldr	r2, [pc, #668]	@ (8005304 <HAL_RCC_OscConfig+0x328>)
 8005068:	049b      	lsls	r3, r3, #18
 800506a:	0f5b      	lsrs	r3, r3, #29
 800506c:	40da      	lsrs	r2, r3
 800506e:	49a6      	ldr	r1, [pc, #664]	@ (8005308 <HAL_RCC_OscConfig+0x32c>)
 8005070:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005072:	4ba6      	ldr	r3, [pc, #664]	@ (800530c <HAL_RCC_OscConfig+0x330>)
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	f7fe ff53 	bl	8003f20 <HAL_InitTick>
 800507a:	2800      	cmp	r0, #0
 800507c:	d1de      	bne.n	800503c <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	071a      	lsls	r2, r3, #28
 8005082:	d46d      	bmi.n	8005160 <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005084:	075b      	lsls	r3, r3, #29
 8005086:	d545      	bpl.n	8005114 <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005088:	2338      	movs	r3, #56	@ 0x38
 800508a:	4a9b      	ldr	r2, [pc, #620]	@ (80052f8 <HAL_RCC_OscConfig+0x31c>)
 800508c:	6891      	ldr	r1, [r2, #8]
 800508e:	400b      	ands	r3, r1
 8005090:	2b20      	cmp	r3, #32
 8005092:	d100      	bne.n	8005096 <HAL_RCC_OscConfig+0xba>
 8005094:	e0cc      	b.n	8005230 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005096:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8005098:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800509a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800509c:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800509e:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050a0:	4219      	tst	r1, r3
 80050a2:	d108      	bne.n	80050b6 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 80050a4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80050a6:	4319      	orrs	r1, r3
 80050a8:	63d1      	str	r1, [r2, #60]	@ 0x3c
 80050aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050ac:	4013      	ands	r3, r2
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80050b2:	2301      	movs	r3, #1
 80050b4:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050b6:	2780      	movs	r7, #128	@ 0x80
 80050b8:	4e95      	ldr	r6, [pc, #596]	@ (8005310 <HAL_RCC_OscConfig+0x334>)
 80050ba:	007f      	lsls	r7, r7, #1
 80050bc:	6833      	ldr	r3, [r6, #0]
 80050be:	423b      	tst	r3, r7
 80050c0:	d100      	bne.n	80050c4 <HAL_RCC_OscConfig+0xe8>
 80050c2:	e0ff      	b.n	80052c4 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c4:	68a3      	ldr	r3, [r4, #8]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d100      	bne.n	80050cc <HAL_RCC_OscConfig+0xf0>
 80050ca:	e0e5      	b.n	8005298 <HAL_RCC_OscConfig+0x2bc>
 80050cc:	2b05      	cmp	r3, #5
 80050ce:	d100      	bne.n	80050d2 <HAL_RCC_OscConfig+0xf6>
 80050d0:	e1d1      	b.n	8005476 <HAL_RCC_OscConfig+0x49a>
 80050d2:	2101      	movs	r1, #1
 80050d4:	4e88      	ldr	r6, [pc, #544]	@ (80052f8 <HAL_RCC_OscConfig+0x31c>)
 80050d6:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 80050d8:	438a      	bics	r2, r1
 80050da:	65f2      	str	r2, [r6, #92]	@ 0x5c
 80050dc:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 80050de:	3103      	adds	r1, #3
 80050e0:	438a      	bics	r2, r1
 80050e2:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d000      	beq.n	80050ea <HAL_RCC_OscConfig+0x10e>
 80050e8:	e0da      	b.n	80052a0 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 80050ea:	f7fe ff5f 	bl	8003fac <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050ee:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 80050f0:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050f2:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f4:	4d87      	ldr	r5, [pc, #540]	@ (8005314 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050f6:	e005      	b.n	8005104 <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f8:	f7fe ff58 	bl	8003fac <HAL_GetTick>
 80050fc:	1bc0      	subs	r0, r0, r7
 80050fe:	42a8      	cmp	r0, r5
 8005100:	d900      	bls.n	8005104 <HAL_RCC_OscConfig+0x128>
 8005102:	e0ee      	b.n	80052e2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005104:	4642      	mov	r2, r8
 8005106:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8005108:	421a      	tst	r2, r3
 800510a:	d1f5      	bne.n	80050f8 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 800510c:	464b      	mov	r3, r9
 800510e:	2b01      	cmp	r3, #1
 8005110:	d100      	bne.n	8005114 <HAL_RCC_OscConfig+0x138>
 8005112:	e16a      	b.n	80053ea <HAL_RCC_OscConfig+0x40e>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005114:	69e3      	ldr	r3, [r4, #28]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d020      	beq.n	800515c <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800511a:	2238      	movs	r2, #56	@ 0x38
 800511c:	4d76      	ldr	r5, [pc, #472]	@ (80052f8 <HAL_RCC_OscConfig+0x31c>)
 800511e:	68a9      	ldr	r1, [r5, #8]
 8005120:	400a      	ands	r2, r1
 8005122:	2a10      	cmp	r2, #16
 8005124:	d100      	bne.n	8005128 <HAL_RCC_OscConfig+0x14c>
 8005126:	e11d      	b.n	8005364 <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005128:	2b02      	cmp	r3, #2
 800512a:	d100      	bne.n	800512e <HAL_RCC_OscConfig+0x152>
 800512c:	e163      	b.n	80053f6 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_PLL_DISABLE();
 800512e:	682b      	ldr	r3, [r5, #0]
 8005130:	4a79      	ldr	r2, [pc, #484]	@ (8005318 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005132:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8005134:	4013      	ands	r3, r2
 8005136:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005138:	f7fe ff38 	bl	8003fac <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800513c:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800513e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005140:	e005      	b.n	800514e <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005142:	f7fe ff33 	bl	8003fac <HAL_GetTick>
 8005146:	1b00      	subs	r0, r0, r4
 8005148:	2802      	cmp	r0, #2
 800514a:	d900      	bls.n	800514e <HAL_RCC_OscConfig+0x172>
 800514c:	e0c9      	b.n	80052e2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800514e:	682b      	ldr	r3, [r5, #0]
 8005150:	4233      	tst	r3, r6
 8005152:	d1f6      	bne.n	8005142 <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005154:	68eb      	ldr	r3, [r5, #12]
 8005156:	4a71      	ldr	r2, [pc, #452]	@ (800531c <HAL_RCC_OscConfig+0x340>)
 8005158:	4013      	ands	r3, r2
 800515a:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800515c:	2000      	movs	r0, #0
 800515e:	e76e      	b.n	800503e <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005160:	2238      	movs	r2, #56	@ 0x38
 8005162:	4d65      	ldr	r5, [pc, #404]	@ (80052f8 <HAL_RCC_OscConfig+0x31c>)
 8005164:	68a9      	ldr	r1, [r5, #8]
 8005166:	400a      	ands	r2, r1
 8005168:	2a18      	cmp	r2, #24
 800516a:	d043      	beq.n	80051f4 <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800516c:	69a3      	ldr	r3, [r4, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d100      	bne.n	8005174 <HAL_RCC_OscConfig+0x198>
 8005172:	e0b8      	b.n	80052e6 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8005174:	2201      	movs	r2, #1
 8005176:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005178:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 800517a:	4313      	orrs	r3, r2
 800517c:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800517e:	f7fe ff15 	bl	8003fac <HAL_GetTick>
 8005182:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005184:	e005      	b.n	8005192 <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005186:	f7fe ff11 	bl	8003fac <HAL_GetTick>
 800518a:	1b80      	subs	r0, r0, r6
 800518c:	2802      	cmp	r0, #2
 800518e:	d900      	bls.n	8005192 <HAL_RCC_OscConfig+0x1b6>
 8005190:	e0a7      	b.n	80052e2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005192:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8005194:	421f      	tst	r7, r3
 8005196:	d0f6      	beq.n	8005186 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	e773      	b.n	8005084 <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800519c:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800519e:	0789      	lsls	r1, r1, #30
 80051a0:	d100      	bne.n	80051a4 <HAL_RCC_OscConfig+0x1c8>
 80051a2:	e731      	b.n	8005008 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051a4:	2280      	movs	r2, #128	@ 0x80
 80051a6:	6863      	ldr	r3, [r4, #4]
 80051a8:	0252      	lsls	r2, r2, #9
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d02b      	beq.n	8005206 <HAL_RCC_OscConfig+0x22a>
 80051ae:	21a0      	movs	r1, #160	@ 0xa0
 80051b0:	02c9      	lsls	r1, r1, #11
 80051b2:	428b      	cmp	r3, r1
 80051b4:	d100      	bne.n	80051b8 <HAL_RCC_OscConfig+0x1dc>
 80051b6:	e103      	b.n	80053c0 <HAL_RCC_OscConfig+0x3e4>
 80051b8:	4d4f      	ldr	r5, [pc, #316]	@ (80052f8 <HAL_RCC_OscConfig+0x31c>)
 80051ba:	4959      	ldr	r1, [pc, #356]	@ (8005320 <HAL_RCC_OscConfig+0x344>)
 80051bc:	682a      	ldr	r2, [r5, #0]
 80051be:	400a      	ands	r2, r1
 80051c0:	602a      	str	r2, [r5, #0]
 80051c2:	682a      	ldr	r2, [r5, #0]
 80051c4:	4957      	ldr	r1, [pc, #348]	@ (8005324 <HAL_RCC_OscConfig+0x348>)
 80051c6:	400a      	ands	r2, r1
 80051c8:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d11f      	bne.n	800520e <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 80051ce:	f7fe feed 	bl	8003fac <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051d2:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80051d4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051d6:	02bf      	lsls	r7, r7, #10
 80051d8:	e004      	b.n	80051e4 <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051da:	f7fe fee7 	bl	8003fac <HAL_GetTick>
 80051de:	1b80      	subs	r0, r0, r6
 80051e0:	2864      	cmp	r0, #100	@ 0x64
 80051e2:	d87e      	bhi.n	80052e2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	423b      	tst	r3, r7
 80051e8:	d1f7      	bne.n	80051da <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	079a      	lsls	r2, r3, #30
 80051ee:	d400      	bmi.n	80051f2 <HAL_RCC_OscConfig+0x216>
 80051f0:	e746      	b.n	8005080 <HAL_RCC_OscConfig+0xa4>
 80051f2:	e712      	b.n	800501a <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80051f4:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 80051f6:	0792      	lsls	r2, r2, #30
 80051f8:	d400      	bmi.n	80051fc <HAL_RCC_OscConfig+0x220>
 80051fa:	e743      	b.n	8005084 <HAL_RCC_OscConfig+0xa8>
 80051fc:	69a2      	ldr	r2, [r4, #24]
 80051fe:	2a00      	cmp	r2, #0
 8005200:	d000      	beq.n	8005204 <HAL_RCC_OscConfig+0x228>
 8005202:	e73f      	b.n	8005084 <HAL_RCC_OscConfig+0xa8>
 8005204:	e71a      	b.n	800503c <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005206:	4a3c      	ldr	r2, [pc, #240]	@ (80052f8 <HAL_RCC_OscConfig+0x31c>)
 8005208:	6811      	ldr	r1, [r2, #0]
 800520a:	430b      	orrs	r3, r1
 800520c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800520e:	f7fe fecd 	bl	8003fac <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005212:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8005214:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005216:	4f38      	ldr	r7, [pc, #224]	@ (80052f8 <HAL_RCC_OscConfig+0x31c>)
 8005218:	02b6      	lsls	r6, r6, #10
 800521a:	e004      	b.n	8005226 <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800521c:	f7fe fec6 	bl	8003fac <HAL_GetTick>
 8005220:	1b40      	subs	r0, r0, r5
 8005222:	2864      	cmp	r0, #100	@ 0x64
 8005224:	d85d      	bhi.n	80052e2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	4233      	tst	r3, r6
 800522a:	d0f7      	beq.n	800521c <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	e7dd      	b.n	80051ec <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005230:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8005232:	079b      	lsls	r3, r3, #30
 8005234:	d400      	bmi.n	8005238 <HAL_RCC_OscConfig+0x25c>
 8005236:	e76d      	b.n	8005114 <HAL_RCC_OscConfig+0x138>
 8005238:	68a3      	ldr	r3, [r4, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d000      	beq.n	8005240 <HAL_RCC_OscConfig+0x264>
 800523e:	e769      	b.n	8005114 <HAL_RCC_OscConfig+0x138>
 8005240:	e6fc      	b.n	800503c <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005242:	3b0d      	subs	r3, #13
 8005244:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005246:	2b02      	cmp	r3, #2
 8005248:	d100      	bne.n	800524c <HAL_RCC_OscConfig+0x270>
 800524a:	e0c3      	b.n	80053d4 <HAL_RCC_OscConfig+0x3f8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800524c:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800524e:	4d2a      	ldr	r5, [pc, #168]	@ (80052f8 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005250:	2b00      	cmp	r3, #0
 8005252:	d073      	beq.n	800533c <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	4a2a      	ldr	r2, [pc, #168]	@ (8005300 <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005258:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800525a:	4013      	ands	r3, r2
 800525c:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800525e:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005260:	4313      	orrs	r3, r2
 8005262:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8005264:	2380      	movs	r3, #128	@ 0x80
 8005266:	682a      	ldr	r2, [r5, #0]
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	4313      	orrs	r3, r2
 800526c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800526e:	f7fe fe9d 	bl	8003fac <HAL_GetTick>
 8005272:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005274:	e004      	b.n	8005280 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005276:	f7fe fe99 	bl	8003fac <HAL_GetTick>
 800527a:	1b80      	subs	r0, r0, r6
 800527c:	2802      	cmp	r0, #2
 800527e:	d830      	bhi.n	80052e2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	423b      	tst	r3, r7
 8005284:	d0f7      	beq.n	8005276 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005286:	686a      	ldr	r2, [r5, #4]
 8005288:	6963      	ldr	r3, [r4, #20]
 800528a:	491c      	ldr	r1, [pc, #112]	@ (80052fc <HAL_RCC_OscConfig+0x320>)
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	400a      	ands	r2, r1
 8005290:	4313      	orrs	r3, r2
 8005292:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	e6f3      	b.n	8005080 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005298:	4917      	ldr	r1, [pc, #92]	@ (80052f8 <HAL_RCC_OscConfig+0x31c>)
 800529a:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 800529c:	4313      	orrs	r3, r2
 800529e:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 80052a0:	f7fe fe84 	bl	8003fac <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a4:	4b14      	ldr	r3, [pc, #80]	@ (80052f8 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 80052a6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a8:	4698      	mov	r8, r3
 80052aa:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ac:	4d19      	ldr	r5, [pc, #100]	@ (8005314 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ae:	e004      	b.n	80052ba <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b0:	f7fe fe7c 	bl	8003fac <HAL_GetTick>
 80052b4:	1b80      	subs	r0, r0, r6
 80052b6:	42a8      	cmp	r0, r5
 80052b8:	d813      	bhi.n	80052e2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ba:	4643      	mov	r3, r8
 80052bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052be:	421f      	tst	r7, r3
 80052c0:	d0f6      	beq.n	80052b0 <HAL_RCC_OscConfig+0x2d4>
 80052c2:	e723      	b.n	800510c <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052c4:	6833      	ldr	r3, [r6, #0]
 80052c6:	433b      	orrs	r3, r7
 80052c8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80052ca:	f7fe fe6f 	bl	8003fac <HAL_GetTick>
 80052ce:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052d0:	6833      	ldr	r3, [r6, #0]
 80052d2:	423b      	tst	r3, r7
 80052d4:	d000      	beq.n	80052d8 <HAL_RCC_OscConfig+0x2fc>
 80052d6:	e6f5      	b.n	80050c4 <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d8:	f7fe fe68 	bl	8003fac <HAL_GetTick>
 80052dc:	1b40      	subs	r0, r0, r5
 80052de:	2802      	cmp	r0, #2
 80052e0:	d9f6      	bls.n	80052d0 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 80052e2:	2003      	movs	r0, #3
 80052e4:	e6ab      	b.n	800503e <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 80052e6:	2201      	movs	r2, #1
 80052e8:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052ea:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 80052ec:	4393      	bics	r3, r2
 80052ee:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80052f0:	f7fe fe5c 	bl	8003fac <HAL_GetTick>
 80052f4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052f6:	e01c      	b.n	8005332 <HAL_RCC_OscConfig+0x356>
 80052f8:	40021000 	.word	0x40021000
 80052fc:	ffff80ff 	.word	0xffff80ff
 8005300:	ffffc7ff 	.word	0xffffc7ff
 8005304:	00f42400 	.word	0x00f42400
 8005308:	20000000 	.word	0x20000000
 800530c:	20000008 	.word	0x20000008
 8005310:	40007000 	.word	0x40007000
 8005314:	00001388 	.word	0x00001388
 8005318:	feffffff 	.word	0xfeffffff
 800531c:	eefefffc 	.word	0xeefefffc
 8005320:	fffeffff 	.word	0xfffeffff
 8005324:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005328:	f7fe fe40 	bl	8003fac <HAL_GetTick>
 800532c:	1b80      	subs	r0, r0, r6
 800532e:	2802      	cmp	r0, #2
 8005330:	d8d7      	bhi.n	80052e2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005332:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8005334:	421f      	tst	r7, r3
 8005336:	d1f7      	bne.n	8005328 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	e6a3      	b.n	8005084 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	4a55      	ldr	r2, [pc, #340]	@ (8005494 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005340:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8005342:	4013      	ands	r3, r2
 8005344:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005346:	f7fe fe31 	bl	8003fac <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800534a:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 800534c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800534e:	e004      	b.n	800535a <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005350:	f7fe fe2c 	bl	8003fac <HAL_GetTick>
 8005354:	1b80      	subs	r0, r0, r6
 8005356:	2802      	cmp	r0, #2
 8005358:	d8c3      	bhi.n	80052e2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800535a:	682b      	ldr	r3, [r5, #0]
 800535c:	423b      	tst	r3, r7
 800535e:	d1f7      	bne.n	8005350 <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	e68d      	b.n	8005080 <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005364:	2b01      	cmp	r3, #1
 8005366:	d100      	bne.n	800536a <HAL_RCC_OscConfig+0x38e>
 8005368:	e668      	b.n	800503c <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536a:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 800536c:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536e:	6a21      	ldr	r1, [r4, #32]
 8005370:	4002      	ands	r2, r0
 8005372:	428a      	cmp	r2, r1
 8005374:	d000      	beq.n	8005378 <HAL_RCC_OscConfig+0x39c>
 8005376:	e661      	b.n	800503c <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005378:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800537a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800537c:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800537e:	428a      	cmp	r2, r1
 8005380:	d000      	beq.n	8005384 <HAL_RCC_OscConfig+0x3a8>
 8005382:	e65b      	b.n	800503c <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005384:	21fe      	movs	r1, #254	@ 0xfe
 8005386:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005388:	01c9      	lsls	r1, r1, #7
 800538a:	4001      	ands	r1, r0
 800538c:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800538e:	4291      	cmp	r1, r2
 8005390:	d000      	beq.n	8005394 <HAL_RCC_OscConfig+0x3b8>
 8005392:	e653      	b.n	800503c <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005394:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005396:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005398:	0392      	lsls	r2, r2, #14
 800539a:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800539c:	428a      	cmp	r2, r1
 800539e:	d000      	beq.n	80053a2 <HAL_RCC_OscConfig+0x3c6>
 80053a0:	e64c      	b.n	800503c <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80053a2:	22e0      	movs	r2, #224	@ 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80053a6:	0512      	lsls	r2, r2, #20
 80053a8:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053aa:	428a      	cmp	r2, r1
 80053ac:	d000      	beq.n	80053b0 <HAL_RCC_OscConfig+0x3d4>
 80053ae:	e645      	b.n	800503c <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80053b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80053b2:	0f40      	lsrs	r0, r0, #29
 80053b4:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80053b6:	1ac0      	subs	r0, r0, r3
 80053b8:	1e43      	subs	r3, r0, #1
 80053ba:	4198      	sbcs	r0, r3
 80053bc:	b2c0      	uxtb	r0, r0
 80053be:	e63e      	b.n	800503e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053c0:	2180      	movs	r1, #128	@ 0x80
 80053c2:	4b35      	ldr	r3, [pc, #212]	@ (8005498 <HAL_RCC_OscConfig+0x4bc>)
 80053c4:	02c9      	lsls	r1, r1, #11
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	4301      	orrs	r1, r0
 80053ca:	6019      	str	r1, [r3, #0]
 80053cc:	6819      	ldr	r1, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053d2:	e71c      	b.n	800520e <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053d4:	6813      	ldr	r3, [r2, #0]
 80053d6:	055b      	lsls	r3, r3, #21
 80053d8:	d457      	bmi.n	800548a <HAL_RCC_OscConfig+0x4ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053da:	6851      	ldr	r1, [r2, #4]
 80053dc:	6963      	ldr	r3, [r4, #20]
 80053de:	482f      	ldr	r0, [pc, #188]	@ (800549c <HAL_RCC_OscConfig+0x4c0>)
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	4001      	ands	r1, r0
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053e8:	e643      	b.n	8005072 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 80053ea:	4a2b      	ldr	r2, [pc, #172]	@ (8005498 <HAL_RCC_OscConfig+0x4bc>)
 80053ec:	492c      	ldr	r1, [pc, #176]	@ (80054a0 <HAL_RCC_OscConfig+0x4c4>)
 80053ee:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80053f0:	400b      	ands	r3, r1
 80053f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80053f4:	e68e      	b.n	8005114 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 80053f6:	682b      	ldr	r3, [r5, #0]
 80053f8:	4a2a      	ldr	r2, [pc, #168]	@ (80054a4 <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053fa:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80053fc:	4013      	ands	r3, r2
 80053fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005400:	f7fe fdd4 	bl	8003fac <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005404:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8005406:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005408:	e005      	b.n	8005416 <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540a:	f7fe fdcf 	bl	8003fac <HAL_GetTick>
 800540e:	1b80      	subs	r0, r0, r6
 8005410:	2802      	cmp	r0, #2
 8005412:	d900      	bls.n	8005416 <HAL_RCC_OscConfig+0x43a>
 8005414:	e765      	b.n	80052e2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005416:	682b      	ldr	r3, [r5, #0]
 8005418:	423b      	tst	r3, r7
 800541a:	d1f6      	bne.n	800540a <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800541c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800541e:	6a23      	ldr	r3, [r4, #32]
 8005420:	68ea      	ldr	r2, [r5, #12]
 8005422:	430b      	orrs	r3, r1
 8005424:	4920      	ldr	r1, [pc, #128]	@ (80054a8 <HAL_RCC_OscConfig+0x4cc>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005426:	4e1c      	ldr	r6, [pc, #112]	@ (8005498 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005428:	400a      	ands	r2, r1
 800542a:	4313      	orrs	r3, r2
 800542c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800542e:	4313      	orrs	r3, r2
 8005430:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005432:	4313      	orrs	r3, r2
 8005434:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005436:	4313      	orrs	r3, r2
 8005438:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800543a:	0212      	lsls	r2, r2, #8
 800543c:	4313      	orrs	r3, r2
 800543e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005440:	2380      	movs	r3, #128	@ 0x80
 8005442:	682a      	ldr	r2, [r5, #0]
 8005444:	045b      	lsls	r3, r3, #17
 8005446:	4313      	orrs	r3, r2
 8005448:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800544a:	2380      	movs	r3, #128	@ 0x80
 800544c:	68ea      	ldr	r2, [r5, #12]
 800544e:	055b      	lsls	r3, r3, #21
 8005450:	4313      	orrs	r3, r2
 8005452:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005454:	f7fe fdaa 	bl	8003fac <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005458:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 800545a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545c:	04ad      	lsls	r5, r5, #18
 800545e:	e005      	b.n	800546c <HAL_RCC_OscConfig+0x490>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005460:	f7fe fda4 	bl	8003fac <HAL_GetTick>
 8005464:	1b00      	subs	r0, r0, r4
 8005466:	2802      	cmp	r0, #2
 8005468:	d900      	bls.n	800546c <HAL_RCC_OscConfig+0x490>
 800546a:	e73a      	b.n	80052e2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800546c:	6833      	ldr	r3, [r6, #0]
 800546e:	422b      	tst	r3, r5
 8005470:	d0f6      	beq.n	8005460 <HAL_RCC_OscConfig+0x484>
  return HAL_OK;
 8005472:	2000      	movs	r0, #0
 8005474:	e5e3      	b.n	800503e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005476:	2104      	movs	r1, #4
 8005478:	4b07      	ldr	r3, [pc, #28]	@ (8005498 <HAL_RCC_OscConfig+0x4bc>)
 800547a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800547c:	430a      	orrs	r2, r1
 800547e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005480:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005482:	3903      	subs	r1, #3
 8005484:	430a      	orrs	r2, r1
 8005486:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005488:	e70a      	b.n	80052a0 <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800548a:	68e3      	ldr	r3, [r4, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1a4      	bne.n	80053da <HAL_RCC_OscConfig+0x3fe>
 8005490:	e5d4      	b.n	800503c <HAL_RCC_OscConfig+0x60>
 8005492:	46c0      	nop			@ (mov r8, r8)
 8005494:	fffffeff 	.word	0xfffffeff
 8005498:	40021000 	.word	0x40021000
 800549c:	ffff80ff 	.word	0xffff80ff
 80054a0:	efffffff 	.word	0xefffffff
 80054a4:	feffffff 	.word	0xfeffffff
 80054a8:	11c1808c 	.word	0x11c1808c

080054ac <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054ac:	2338      	movs	r3, #56	@ 0x38
 80054ae:	4a22      	ldr	r2, [pc, #136]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 80054b0:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054b2:	6891      	ldr	r1, [r2, #8]
 80054b4:	420b      	tst	r3, r1
 80054b6:	d105      	bne.n	80054c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80054b8:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80054ba:	4820      	ldr	r0, [pc, #128]	@ (800553c <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80054bc:	049b      	lsls	r3, r3, #18
 80054be:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 80054c0:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80054c2:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054c4:	6891      	ldr	r1, [r2, #8]
 80054c6:	4019      	ands	r1, r3
 80054c8:	2908      	cmp	r1, #8
 80054ca:	d014      	beq.n	80054f6 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054cc:	6891      	ldr	r1, [r2, #8]
 80054ce:	4019      	ands	r1, r3
 80054d0:	2910      	cmp	r1, #16
 80054d2:	d012      	beq.n	80054fa <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80054d4:	6891      	ldr	r1, [r2, #8]
 80054d6:	4019      	ands	r1, r3
 80054d8:	2920      	cmp	r1, #32
 80054da:	d024      	beq.n	8005526 <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80054dc:	6890      	ldr	r0, [r2, #8]
 80054de:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 80054e0:	3818      	subs	r0, #24
 80054e2:	1e43      	subs	r3, r0, #1
 80054e4:	4198      	sbcs	r0, r3
 80054e6:	4b16      	ldr	r3, [pc, #88]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x94>)
 80054e8:	4240      	negs	r0, r0
 80054ea:	4018      	ands	r0, r3
 80054ec:	23fa      	movs	r3, #250	@ 0xfa
 80054ee:	01db      	lsls	r3, r3, #7
 80054f0:	469c      	mov	ip, r3
 80054f2:	4460      	add	r0, ip
 80054f4:	e7e5      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 80054f6:	4813      	ldr	r0, [pc, #76]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x98>)
 80054f8:	e7e3      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80054fa:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054fc:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80054fe:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005500:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005502:	0649      	lsls	r1, r1, #25
 8005504:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005506:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005508:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800550a:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 800550c:	079b      	lsls	r3, r3, #30
 800550e:	d00d      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005510:	480a      	ldr	r0, [pc, #40]	@ (800553c <HAL_RCC_GetSysClockFreq+0x90>)
 8005512:	f7fa fdf7 	bl	8000104 <__udivsi3>
 8005516:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005518:	4b07      	ldr	r3, [pc, #28]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x8c>)
 800551a:	68d9      	ldr	r1, [r3, #12]
 800551c:	0f49      	lsrs	r1, r1, #29
 800551e:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8005520:	f7fa fdf0 	bl	8000104 <__udivsi3>
  return sysclockfreq;
 8005524:	e7cd      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8005526:	2080      	movs	r0, #128	@ 0x80
 8005528:	0200      	lsls	r0, r0, #8
 800552a:	e7ca      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800552c:	4805      	ldr	r0, [pc, #20]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x98>)
 800552e:	f7fa fde9 	bl	8000104 <__udivsi3>
 8005532:	4360      	muls	r0, r4
        break;
 8005534:	e7f0      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x6c>
 8005536:	46c0      	nop			@ (mov r8, r8)
 8005538:	40021000 	.word	0x40021000
 800553c:	00f42400 	.word	0x00f42400
 8005540:	ffff8300 	.word	0xffff8300
 8005544:	007a1200 	.word	0x007a1200

08005548 <HAL_RCC_ClockConfig>:
{
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	46ce      	mov	lr, r9
 800554c:	4647      	mov	r7, r8
 800554e:	0005      	movs	r5, r0
 8005550:	000c      	movs	r4, r1
 8005552:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8005554:	2800      	cmp	r0, #0
 8005556:	d026      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005558:	2207      	movs	r2, #7
 800555a:	4e57      	ldr	r6, [pc, #348]	@ (80056b8 <HAL_RCC_ClockConfig+0x170>)
 800555c:	6833      	ldr	r3, [r6, #0]
 800555e:	4013      	ands	r3, r2
 8005560:	428b      	cmp	r3, r1
 8005562:	d35e      	bcc.n	8005622 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	079a      	lsls	r2, r3, #30
 8005568:	d50e      	bpl.n	8005588 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800556a:	075a      	lsls	r2, r3, #29
 800556c:	d505      	bpl.n	800557a <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800556e:	22e0      	movs	r2, #224	@ 0xe0
 8005570:	4952      	ldr	r1, [pc, #328]	@ (80056bc <HAL_RCC_ClockConfig+0x174>)
 8005572:	01d2      	lsls	r2, r2, #7
 8005574:	6888      	ldr	r0, [r1, #8]
 8005576:	4302      	orrs	r2, r0
 8005578:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800557a:	4950      	ldr	r1, [pc, #320]	@ (80056bc <HAL_RCC_ClockConfig+0x174>)
 800557c:	4850      	ldr	r0, [pc, #320]	@ (80056c0 <HAL_RCC_ClockConfig+0x178>)
 800557e:	688a      	ldr	r2, [r1, #8]
 8005580:	4002      	ands	r2, r0
 8005582:	68a8      	ldr	r0, [r5, #8]
 8005584:	4302      	orrs	r2, r0
 8005586:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005588:	07db      	lsls	r3, r3, #31
 800558a:	d52b      	bpl.n	80055e4 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800558c:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800558e:	4a4b      	ldr	r2, [pc, #300]	@ (80056bc <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005590:	2b01      	cmp	r3, #1
 8005592:	d100      	bne.n	8005596 <HAL_RCC_ClockConfig+0x4e>
 8005594:	e07c      	b.n	8005690 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005596:	2b02      	cmp	r3, #2
 8005598:	d007      	beq.n	80055aa <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800559a:	2b00      	cmp	r3, #0
 800559c:	d000      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x58>
 800559e:	e07d      	b.n	800569c <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	0552      	lsls	r2, r2, #21
 80055a4:	d404      	bmi.n	80055b0 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80055a6:	2001      	movs	r0, #1
 80055a8:	e037      	b.n	800561a <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	0192      	lsls	r2, r2, #6
 80055ae:	d5fa      	bpl.n	80055a6 <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055b0:	2107      	movs	r1, #7
 80055b2:	4e42      	ldr	r6, [pc, #264]	@ (80056bc <HAL_RCC_ClockConfig+0x174>)
 80055b4:	68b2      	ldr	r2, [r6, #8]
 80055b6:	438a      	bics	r2, r1
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80055bc:	f7fe fcf6 	bl	8003fac <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c0:	2338      	movs	r3, #56	@ 0x38
 80055c2:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c4:	4b3f      	ldr	r3, [pc, #252]	@ (80056c4 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80055c6:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c8:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ca:	e004      	b.n	80055d6 <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055cc:	f7fe fcee 	bl	8003fac <HAL_GetTick>
 80055d0:	1bc0      	subs	r0, r0, r7
 80055d2:	4548      	cmp	r0, r9
 80055d4:	d83b      	bhi.n	800564e <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d6:	4643      	mov	r3, r8
 80055d8:	68b2      	ldr	r2, [r6, #8]
 80055da:	401a      	ands	r2, r3
 80055dc:	686b      	ldr	r3, [r5, #4]
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d1f3      	bne.n	80055cc <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055e4:	2207      	movs	r2, #7
 80055e6:	4e34      	ldr	r6, [pc, #208]	@ (80056b8 <HAL_RCC_ClockConfig+0x170>)
 80055e8:	6833      	ldr	r3, [r6, #0]
 80055ea:	4013      	ands	r3, r2
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	d838      	bhi.n	8005662 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	075b      	lsls	r3, r3, #29
 80055f4:	d42d      	bmi.n	8005652 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80055f6:	f7ff ff59 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 80055fa:	4b30      	ldr	r3, [pc, #192]	@ (80056bc <HAL_RCC_ClockConfig+0x174>)
 80055fc:	4a32      	ldr	r2, [pc, #200]	@ (80056c8 <HAL_RCC_ClockConfig+0x180>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	4932      	ldr	r1, [pc, #200]	@ (80056cc <HAL_RCC_ClockConfig+0x184>)
 8005602:	051b      	lsls	r3, r3, #20
 8005604:	0f1b      	lsrs	r3, r3, #28
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	589b      	ldr	r3, [r3, r2]
 800560a:	221f      	movs	r2, #31
 800560c:	4013      	ands	r3, r2
 800560e:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8005610:	4b2f      	ldr	r3, [pc, #188]	@ (80056d0 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005612:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	f7fe fc83 	bl	8003f20 <HAL_InitTick>
}
 800561a:	bcc0      	pop	{r6, r7}
 800561c:	46b9      	mov	r9, r7
 800561e:	46b0      	mov	r8, r6
 8005620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005622:	6833      	ldr	r3, [r6, #0]
 8005624:	4393      	bics	r3, r2
 8005626:	430b      	orrs	r3, r1
 8005628:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800562a:	f7fe fcbf 	bl	8003fac <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800562e:	2307      	movs	r3, #7
 8005630:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005632:	4b24      	ldr	r3, [pc, #144]	@ (80056c4 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8005634:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005636:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005638:	4642      	mov	r2, r8
 800563a:	6833      	ldr	r3, [r6, #0]
 800563c:	4013      	ands	r3, r2
 800563e:	42a3      	cmp	r3, r4
 8005640:	d100      	bne.n	8005644 <HAL_RCC_ClockConfig+0xfc>
 8005642:	e78f      	b.n	8005564 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005644:	f7fe fcb2 	bl	8003fac <HAL_GetTick>
 8005648:	1bc0      	subs	r0, r0, r7
 800564a:	4548      	cmp	r0, r9
 800564c:	d9f4      	bls.n	8005638 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 800564e:	2003      	movs	r0, #3
 8005650:	e7e3      	b.n	800561a <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005652:	4a1a      	ldr	r2, [pc, #104]	@ (80056bc <HAL_RCC_ClockConfig+0x174>)
 8005654:	491f      	ldr	r1, [pc, #124]	@ (80056d4 <HAL_RCC_ClockConfig+0x18c>)
 8005656:	6893      	ldr	r3, [r2, #8]
 8005658:	400b      	ands	r3, r1
 800565a:	68e9      	ldr	r1, [r5, #12]
 800565c:	430b      	orrs	r3, r1
 800565e:	6093      	str	r3, [r2, #8]
 8005660:	e7c9      	b.n	80055f6 <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	6833      	ldr	r3, [r6, #0]
 8005664:	4393      	bics	r3, r2
 8005666:	4323      	orrs	r3, r4
 8005668:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800566a:	f7fe fc9f 	bl	8003fac <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800566e:	2307      	movs	r3, #7
 8005670:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005672:	4b14      	ldr	r3, [pc, #80]	@ (80056c4 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8005674:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005676:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005678:	4642      	mov	r2, r8
 800567a:	6833      	ldr	r3, [r6, #0]
 800567c:	4013      	ands	r3, r2
 800567e:	42a3      	cmp	r3, r4
 8005680:	d0b6      	beq.n	80055f0 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005682:	f7fe fc93 	bl	8003fac <HAL_GetTick>
 8005686:	1bc0      	subs	r0, r0, r7
 8005688:	4548      	cmp	r0, r9
 800568a:	d9f5      	bls.n	8005678 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 800568c:	2003      	movs	r0, #3
 800568e:	e7c4      	b.n	800561a <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	0392      	lsls	r2, r2, #14
 8005694:	d500      	bpl.n	8005698 <HAL_RCC_ClockConfig+0x150>
 8005696:	e78b      	b.n	80055b0 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8005698:	2001      	movs	r0, #1
 800569a:	e7be      	b.n	800561a <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800569c:	2b03      	cmp	r3, #3
 800569e:	d005      	beq.n	80056ac <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056a2:	0792      	lsls	r2, r2, #30
 80056a4:	d500      	bpl.n	80056a8 <HAL_RCC_ClockConfig+0x160>
 80056a6:	e783      	b.n	80055b0 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80056a8:	2001      	movs	r0, #1
 80056aa:	e7b6      	b.n	800561a <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056ac:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80056ae:	0792      	lsls	r2, r2, #30
 80056b0:	d500      	bpl.n	80056b4 <HAL_RCC_ClockConfig+0x16c>
 80056b2:	e77d      	b.n	80055b0 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80056b4:	2001      	movs	r0, #1
 80056b6:	e7b0      	b.n	800561a <HAL_RCC_ClockConfig+0xd2>
 80056b8:	40022000 	.word	0x40022000
 80056bc:	40021000 	.word	0x40021000
 80056c0:	fffff0ff 	.word	0xfffff0ff
 80056c4:	00001388 	.word	0x00001388
 80056c8:	0800850c 	.word	0x0800850c
 80056cc:	20000000 	.word	0x20000000
 80056d0:	20000008 	.word	0x20000008
 80056d4:	ffff8fff 	.word	0xffff8fff

080056d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056da:	46d6      	mov	lr, sl
 80056dc:	464f      	mov	r7, r9
 80056de:	4646      	mov	r6, r8
 80056e0:	b5c0      	push	{r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056e2:	6803      	ldr	r3, [r0, #0]
{
 80056e4:	0004      	movs	r4, r0
 80056e6:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056e8:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056ea:	039a      	lsls	r2, r3, #14
 80056ec:	d543      	bpl.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x9e>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ee:	2280      	movs	r2, #128	@ 0x80
 80056f0:	4b68      	ldr	r3, [pc, #416]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056f2:	0552      	lsls	r2, r2, #21
 80056f4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80056f6:	4682      	mov	sl, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f8:	4211      	tst	r1, r2
 80056fa:	d100      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x26>
 80056fc:	e095      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x152>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056fe:	2780      	movs	r7, #128	@ 0x80
 8005700:	4d65      	ldr	r5, [pc, #404]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005702:	007f      	lsls	r7, r7, #1
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	433b      	orrs	r3, r7
 8005708:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800570a:	f7fe fc4f 	bl	8003fac <HAL_GetTick>
 800570e:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005710:	e004      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005712:	f7fe fc4b 	bl	8003fac <HAL_GetTick>
 8005716:	1b80      	subs	r0, r0, r6
 8005718:	2802      	cmp	r0, #2
 800571a:	d827      	bhi.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x94>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	423b      	tst	r3, r7
 8005720:	d0f7      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005722:	4d5c      	ldr	r5, [pc, #368]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005724:	23c0      	movs	r3, #192	@ 0xc0
 8005726:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	0010      	movs	r0, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800572c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800572e:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005730:	421a      	tst	r2, r3
 8005732:	d100      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8005734:	e0a6      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8005736:	4288      	cmp	r0, r1
 8005738:	d100      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800573a:	e0a3      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800573c:	2080      	movs	r0, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800573e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8005740:	6dee      	ldr	r6, [r5, #92]	@ 0x5c
 8005742:	0240      	lsls	r0, r0, #9
 8005744:	4330      	orrs	r0, r6
 8005746:	65e8      	str	r0, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005748:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800574a:	4a54      	ldr	r2, [pc, #336]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 800574c:	4e54      	ldr	r6, [pc, #336]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800574e:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005750:	4030      	ands	r0, r6
 8005752:	65e8      	str	r0, [r5, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005754:	65ea      	str	r2, [r5, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005756:	07db      	lsls	r3, r3, #31
 8005758:	d400      	bmi.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x84>
 800575a:	e093      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575c:	f7fe fc26 	bl	8003fac <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005760:	2302      	movs	r3, #2
 8005762:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005764:	4b4f      	ldr	r3, [pc, #316]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
        tickstart = HAL_GetTick();
 8005766:	0006      	movs	r6, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005768:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800576a:	e086      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 800576c:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800576e:	4652      	mov	r2, sl
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005770:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 8005772:	2a01      	cmp	r2, #1
 8005774:	d063      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x166>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005776:	07da      	lsls	r2, r3, #31
 8005778:	d506      	bpl.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800577a:	2503      	movs	r5, #3
 800577c:	4945      	ldr	r1, [pc, #276]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800577e:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8005780:	43aa      	bics	r2, r5
 8005782:	6865      	ldr	r5, [r4, #4]
 8005784:	432a      	orrs	r2, r5
 8005786:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005788:	06da      	lsls	r2, r3, #27
 800578a:	d506      	bpl.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800578c:	4941      	ldr	r1, [pc, #260]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800578e:	4d46      	ldr	r5, [pc, #280]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005790:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8005792:	402a      	ands	r2, r5
 8005794:	68a5      	ldr	r5, [r4, #8]
 8005796:	432a      	orrs	r2, r5
 8005798:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800579a:	059a      	lsls	r2, r3, #22
 800579c:	d506      	bpl.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800579e:	493d      	ldr	r1, [pc, #244]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057a0:	4d42      	ldr	r5, [pc, #264]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057a2:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80057a4:	402a      	ands	r2, r5
 80057a6:	6965      	ldr	r5, [r4, #20]
 80057a8:	432a      	orrs	r2, r5
 80057aa:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057ac:	055a      	lsls	r2, r3, #21
 80057ae:	d506      	bpl.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057b0:	4938      	ldr	r1, [pc, #224]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057b2:	4d3f      	ldr	r5, [pc, #252]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057b4:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80057b6:	402a      	ands	r2, r5
 80057b8:	69a5      	ldr	r5, [r4, #24]
 80057ba:	432a      	orrs	r2, r5
 80057bc:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057be:	069a      	lsls	r2, r3, #26
 80057c0:	d506      	bpl.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057c2:	4934      	ldr	r1, [pc, #208]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057c4:	4d3b      	ldr	r5, [pc, #236]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80057c6:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80057c8:	402a      	ands	r2, r5
 80057ca:	68e5      	ldr	r5, [r4, #12]
 80057cc:	432a      	orrs	r2, r5
 80057ce:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057d0:	045a      	lsls	r2, r3, #17
 80057d2:	d50a      	bpl.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057d4:	492f      	ldr	r1, [pc, #188]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057d6:	69e5      	ldr	r5, [r4, #28]
 80057d8:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80057da:	0092      	lsls	r2, r2, #2
 80057dc:	0892      	lsrs	r2, r2, #2
 80057de:	432a      	orrs	r2, r5
 80057e0:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80057e2:	2280      	movs	r2, #128	@ 0x80
 80057e4:	05d2      	lsls	r2, r2, #23
 80057e6:	4295      	cmp	r5, r2
 80057e8:	d02f      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x172>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80057ea:	029a      	lsls	r2, r3, #10
 80057ec:	d50a      	bpl.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80057ee:	4929      	ldr	r1, [pc, #164]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057f0:	4e31      	ldr	r6, [pc, #196]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057f2:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80057f4:	6a25      	ldr	r5, [r4, #32]
 80057f6:	4032      	ands	r2, r6
 80057f8:	432a      	orrs	r2, r5
 80057fa:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80057fc:	2280      	movs	r2, #128	@ 0x80
 80057fe:	03d2      	lsls	r2, r2, #15
 8005800:	4295      	cmp	r5, r2
 8005802:	d028      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005804:	051b      	lsls	r3, r3, #20
 8005806:	d50a      	bpl.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005808:	4a22      	ldr	r2, [pc, #136]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800580a:	6921      	ldr	r1, [r4, #16]
 800580c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800580e:	4c2b      	ldr	r4, [pc, #172]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005810:	4023      	ands	r3, r4
 8005812:	430b      	orrs	r3, r1
 8005814:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005816:	2380      	movs	r3, #128	@ 0x80
 8005818:	01db      	lsls	r3, r3, #7
 800581a:	4299      	cmp	r1, r3
 800581c:	d021      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 800581e:	b002      	add	sp, #8
 8005820:	bce0      	pop	{r5, r6, r7}
 8005822:	46ba      	mov	sl, r7
 8005824:	46b1      	mov	r9, r6
 8005826:	46a8      	mov	r8, r5
 8005828:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800582a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800582c:	4311      	orrs	r1, r2
 800582e:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8005830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005832:	4013      	ands	r3, r2
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005838:	2301      	movs	r3, #1
 800583a:	469a      	mov	sl, r3
 800583c:	e75f      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 800583e:	4915      	ldr	r1, [pc, #84]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005840:	4d1f      	ldr	r5, [pc, #124]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005842:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8005844:	402a      	ands	r2, r5
 8005846:	63ca      	str	r2, [r1, #60]	@ 0x3c
 8005848:	e795      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800584a:	2280      	movs	r2, #128	@ 0x80
 800584c:	68cd      	ldr	r5, [r1, #12]
 800584e:	0252      	lsls	r2, r2, #9
 8005850:	432a      	orrs	r2, r5
 8005852:	60ca      	str	r2, [r1, #12]
 8005854:	e7c9      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005856:	2280      	movs	r2, #128	@ 0x80
 8005858:	68cd      	ldr	r5, [r1, #12]
 800585a:	0452      	lsls	r2, r2, #17
 800585c:	432a      	orrs	r2, r5
 800585e:	60ca      	str	r2, [r1, #12]
 8005860:	e7d0      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005862:	2380      	movs	r3, #128	@ 0x80
 8005864:	68d1      	ldr	r1, [r2, #12]
 8005866:	025b      	lsls	r3, r3, #9
 8005868:	430b      	orrs	r3, r1
 800586a:	60d3      	str	r3, [r2, #12]
  return status;
 800586c:	e7d7      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x146>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800586e:	f7fe fb9d 	bl	8003fac <HAL_GetTick>
 8005872:	1b80      	subs	r0, r0, r6
 8005874:	4548      	cmp	r0, r9
 8005876:	d900      	bls.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005878:	e778      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800587a:	4642      	mov	r2, r8
 800587c:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800587e:	421a      	tst	r2, r3
 8005880:	d0f5      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x196>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005882:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005884:	4a03      	ldr	r2, [pc, #12]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005886:	4805      	ldr	r0, [pc, #20]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005888:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 800588a:	4003      	ands	r3, r0
 800588c:	430b      	orrs	r3, r1
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800588e:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005890:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8005892:	e76c      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x96>
 8005894:	40021000 	.word	0x40021000
 8005898:	40007000 	.word	0x40007000
 800589c:	fffffcff 	.word	0xfffffcff
 80058a0:	fffeffff 	.word	0xfffeffff
 80058a4:	00001388 	.word	0x00001388
 80058a8:	fffff3ff 	.word	0xfffff3ff
 80058ac:	fff3ffff 	.word	0xfff3ffff
 80058b0:	ffcfffff 	.word	0xffcfffff
 80058b4:	ffffcfff 	.word	0xffffcfff
 80058b8:	ffbfffff 	.word	0xffbfffff
 80058bc:	ffff3fff 	.word	0xffff3fff
 80058c0:	efffffff 	.word	0xefffffff

080058c4 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80058c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058c6:	46ce      	mov	lr, r9
 80058c8:	4647      	mov	r7, r8
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80058ce:	466b      	mov	r3, sp
 80058d0:	1cdc      	adds	r4, r3, #3
 80058d2:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80058d4:	0016      	movs	r6, r2
 80058d6:	000f      	movs	r7, r1
  __IO uint8_t  tmpreg8 = 0;
 80058d8:	7023      	strb	r3, [r4, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80058da:	4680      	mov	r8, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80058dc:	f7fe fb66 	bl	8003fac <HAL_GetTick>
 80058e0:	19f6      	adds	r6, r6, r7
 80058e2:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 80058e4:	f7fe fb62 	bl	8003fac <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80058e8:	4643      	mov	r3, r8
 80058ea:	681d      	ldr	r5, [r3, #0]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80058ec:	4b34      	ldr	r3, [pc, #208]	@ (80059c0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfc>)
  tmp_tickstart = HAL_GetTick();
 80058ee:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	009a      	lsls	r2, r3, #2
 80058f4:	18d2      	adds	r2, r2, r3
 80058f6:	00d3      	lsls	r3, r2, #3
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	0d1b      	lsrs	r3, r3, #20
 80058fc:	4373      	muls	r3, r6
 80058fe:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005900:	3701      	adds	r7, #1
 8005902:	d111      	bne.n	8005928 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x64>
 8005904:	22c0      	movs	r2, #192	@ 0xc0
 8005906:	68ab      	ldr	r3, [r5, #8]
 8005908:	00d2      	lsls	r2, r2, #3
 800590a:	4213      	tst	r3, r2
 800590c:	d006      	beq.n	800591c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800590e:	7b2b      	ldrb	r3, [r5, #12]
 8005910:	b2db      	uxtb	r3, r3
 8005912:	7023      	strb	r3, [r4, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005914:	7823      	ldrb	r3, [r4, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005916:	68ab      	ldr	r3, [r5, #8]
 8005918:	4213      	tst	r3, r2
 800591a:	d1f8      	bne.n	800590e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4a>
      }
      count--;
    }
  }

  return HAL_OK;
 800591c:	2000      	movs	r0, #0
}
 800591e:	b003      	add	sp, #12
 8005920:	bcc0      	pop	{r6, r7}
 8005922:	46b9      	mov	r9, r7
 8005924:	46b0      	mov	r8, r6
 8005926:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8005928:	27c0      	movs	r7, #192	@ 0xc0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800592a:	002b      	movs	r3, r5
  while ((hspi->Instance->SR & Fifo) != State)
 800592c:	00ff      	lsls	r7, r7, #3
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	423b      	tst	r3, r7
 8005932:	d0f3      	beq.n	800591c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
      tmpreg8 = *ptmpreg8;
 8005934:	7b2b      	ldrb	r3, [r5, #12]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	7023      	strb	r3, [r4, #0]
      UNUSED(tmpreg8);
 800593a:	7823      	ldrb	r3, [r4, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800593c:	f7fe fb36 	bl	8003fac <HAL_GetTick>
 8005940:	464b      	mov	r3, r9
 8005942:	1ac0      	subs	r0, r0, r3
 8005944:	42b0      	cmp	r0, r6
 8005946:	d20a      	bcs.n	800595e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9a>
      if (count == 0U)
 8005948:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800594a:	1e5a      	subs	r2, r3, #1
 800594c:	4193      	sbcs	r3, r2
 800594e:	425b      	negs	r3, r3
 8005950:	401e      	ands	r6, r3
      count--;
 8005952:	9b01      	ldr	r3, [sp, #4]
 8005954:	3b01      	subs	r3, #1
 8005956:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005958:	4643      	mov	r3, r8
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	e7e7      	b.n	800592e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6a>
 800595e:	4643      	mov	r3, r8
 8005960:	21e0      	movs	r1, #224	@ 0xe0
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005968:	4641      	mov	r1, r8
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800596a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800596c:	2282      	movs	r2, #130	@ 0x82
 800596e:	6849      	ldr	r1, [r1, #4]
 8005970:	0052      	lsls	r2, r2, #1
 8005972:	4291      	cmp	r1, r2
 8005974:	d015      	beq.n	80059a2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xde>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005976:	4642      	mov	r2, r8
 8005978:	2180      	movs	r1, #128	@ 0x80
 800597a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800597c:	0189      	lsls	r1, r1, #6
 800597e:	428a      	cmp	r2, r1
 8005980:	d106      	bne.n	8005990 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xcc>
          SPI_RESET_CRC(hspi);
 8005982:	6819      	ldr	r1, [r3, #0]
 8005984:	480f      	ldr	r0, [pc, #60]	@ (80059c4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x100>)
 8005986:	4001      	ands	r1, r0
 8005988:	6019      	str	r1, [r3, #0]
 800598a:	6819      	ldr	r1, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005990:	235d      	movs	r3, #93	@ 0x5d
 8005992:	2201      	movs	r2, #1
 8005994:	4641      	mov	r1, r8
 8005996:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8005998:	2200      	movs	r2, #0
 800599a:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 800599c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800599e:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 80059a0:	e7bd      	b.n	800591e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059a2:	4642      	mov	r2, r8
 80059a4:	2180      	movs	r1, #128	@ 0x80
 80059a6:	6892      	ldr	r2, [r2, #8]
 80059a8:	0209      	lsls	r1, r1, #8
 80059aa:	428a      	cmp	r2, r1
 80059ac:	d003      	beq.n	80059b6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xf2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059ae:	2180      	movs	r1, #128	@ 0x80
 80059b0:	00c9      	lsls	r1, r1, #3
 80059b2:	428a      	cmp	r2, r1
 80059b4:	d1df      	bne.n	8005976 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
          __HAL_SPI_DISABLE(hspi);
 80059b6:	2140      	movs	r1, #64	@ 0x40
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	438a      	bics	r2, r1
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	e7da      	b.n	8005976 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
 80059c0:	20000000 	.word	0x20000000
 80059c4:	ffffdfff 	.word	0xffffdfff

080059c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ca:	46de      	mov	lr, fp
 80059cc:	4657      	mov	r7, sl
 80059ce:	464e      	mov	r6, r9
 80059d0:	4645      	mov	r5, r8
 80059d2:	b5e0      	push	{r5, r6, r7, lr}
 80059d4:	000f      	movs	r7, r1
 80059d6:	b085      	sub	sp, #20
 80059d8:	4690      	mov	r8, r2
 80059da:	46ba      	mov	sl, r7
  __IO uint8_t  tmpreg8 = 0;
 80059dc:	2200      	movs	r2, #0
 80059de:	466b      	mov	r3, sp
 80059e0:	44c2      	add	sl, r8
 80059e2:	71da      	strb	r2, [r3, #7]
{
 80059e4:	0006      	movs	r6, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059e6:	f7fe fae1 	bl	8003fac <HAL_GetTick>
 80059ea:	4653      	mov	r3, sl
 80059ec:	1a1c      	subs	r4, r3, r0
  tmp_tickstart = HAL_GetTick();
 80059ee:	f7fe fadd 	bl	8003fac <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80059f2:	4b50      	ldr	r3, [pc, #320]	@ (8005b34 <SPI_EndRxTxTransaction+0x16c>)
  tmp_tickstart = HAL_GetTick();
 80059f4:	0005      	movs	r5, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80059f6:	4699      	mov	r9, r3
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	009a      	lsls	r2, r3, #2
 80059fc:	18d2      	adds	r2, r2, r3
 80059fe:	00d3      	lsls	r3, r2, #3
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	0d1b      	lsrs	r3, r3, #20
 8005a04:	4363      	muls	r3, r4
 8005a06:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a08:	1c7b      	adds	r3, r7, #1
 8005a0a:	d12a      	bne.n	8005a62 <SPI_EndRxTxTransaction+0x9a>
 8005a0c:	24c0      	movs	r4, #192	@ 0xc0
 8005a0e:	6835      	ldr	r5, [r6, #0]
 8005a10:	0164      	lsls	r4, r4, #5
 8005a12:	68ab      	ldr	r3, [r5, #8]
 8005a14:	4223      	tst	r3, r4
 8005a16:	d1fc      	bne.n	8005a12 <SPI_EndRxTxTransaction+0x4a>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a18:	f7fe fac8 	bl	8003fac <HAL_GetTick>
 8005a1c:	4653      	mov	r3, sl
 8005a1e:	1a1c      	subs	r4, r3, r0
  tmp_tickstart = HAL_GetTick();
 8005a20:	f7fe fac4 	bl	8003fac <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a24:	464b      	mov	r3, r9
 8005a26:	681b      	ldr	r3, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a28:	6832      	ldr	r2, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a2a:	015b      	lsls	r3, r3, #5
 8005a2c:	0d1b      	lsrs	r3, r3, #20
 8005a2e:	435c      	muls	r4, r3
 8005a30:	9403      	str	r4, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a32:	2480      	movs	r4, #128	@ 0x80
 8005a34:	6893      	ldr	r3, [r2, #8]
 8005a36:	421c      	tst	r4, r3
 8005a38:	d1fc      	bne.n	8005a34 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a3a:	4642      	mov	r2, r8
 8005a3c:	0039      	movs	r1, r7
 8005a3e:	0030      	movs	r0, r6
 8005a40:	f7ff ff40 	bl	80058c4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d106      	bne.n	8005a56 <SPI_EndRxTxTransaction+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8005a48:	b005      	add	sp, #20
 8005a4a:	bcf0      	pop	{r4, r5, r6, r7}
 8005a4c:	46bb      	mov	fp, r7
 8005a4e:	46b2      	mov	sl, r6
 8005a50:	46a9      	mov	r9, r5
 8005a52:	46a0      	mov	r8, r4
 8005a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a56:	2220      	movs	r2, #32
 8005a58:	6e33      	ldr	r3, [r6, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005a5a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	6633      	str	r3, [r6, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005a60:	e7f2      	b.n	8005a48 <SPI_EndRxTxTransaction+0x80>
  while ((hspi->Instance->SR & Fifo) != State)
 8005a62:	23c0      	movs	r3, #192	@ 0xc0
 8005a64:	015b      	lsls	r3, r3, #5
 8005a66:	469b      	mov	fp, r3
 8005a68:	465a      	mov	r2, fp
 8005a6a:	6833      	ldr	r3, [r6, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	4213      	tst	r3, r2
 8005a70:	d00d      	beq.n	8005a8e <SPI_EndRxTxTransaction+0xc6>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a72:	f7fe fa9b 	bl	8003fac <HAL_GetTick>
 8005a76:	1b40      	subs	r0, r0, r5
 8005a78:	42a0      	cmp	r0, r4
 8005a7a:	d221      	bcs.n	8005ac0 <SPI_EndRxTxTransaction+0xf8>
      if (count == 0U)
 8005a7c:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8005a7e:	1e5a      	subs	r2, r3, #1
 8005a80:	4193      	sbcs	r3, r2
 8005a82:	425b      	negs	r3, r3
 8005a84:	401c      	ands	r4, r3
      count--;
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	9302      	str	r3, [sp, #8]
 8005a8c:	e7ec      	b.n	8005a68 <SPI_EndRxTxTransaction+0xa0>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a8e:	f7fe fa8d 	bl	8003fac <HAL_GetTick>
 8005a92:	4653      	mov	r3, sl
 8005a94:	1a1c      	subs	r4, r3, r0
  tmp_tickstart = HAL_GetTick();
 8005a96:	f7fe fa89 	bl	8003fac <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a9a:	464b      	mov	r3, r9
 8005a9c:	681b      	ldr	r3, [r3, #0]
  tmp_tickstart = HAL_GetTick();
 8005a9e:	0005      	movs	r5, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aa0:	015b      	lsls	r3, r3, #5
 8005aa2:	0d1b      	lsrs	r3, r3, #20
 8005aa4:	4363      	muls	r3, r4
 8005aa6:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aa8:	2380      	movs	r3, #128	@ 0x80
 8005aaa:	4699      	mov	r9, r3
 8005aac:	464a      	mov	r2, r9
 8005aae:	6833      	ldr	r3, [r6, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	421a      	tst	r2, r3
 8005ab4:	d0c1      	beq.n	8005a3a <SPI_EndRxTxTransaction+0x72>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ab6:	f7fe fa79 	bl	8003fac <HAL_GetTick>
 8005aba:	1b40      	subs	r0, r0, r5
 8005abc:	42a0      	cmp	r0, r4
 8005abe:	d321      	bcc.n	8005b04 <SPI_EndRxTxTransaction+0x13c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ac0:	21e0      	movs	r1, #224	@ 0xe0
 8005ac2:	6833      	ldr	r3, [r6, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	438a      	bics	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aca:	2282      	movs	r2, #130	@ 0x82
 8005acc:	6871      	ldr	r1, [r6, #4]
 8005ace:	0052      	lsls	r2, r2, #1
 8005ad0:	4291      	cmp	r1, r2
 8005ad2:	d020      	beq.n	8005b16 <SPI_EndRxTxTransaction+0x14e>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ad4:	2180      	movs	r1, #128	@ 0x80
 8005ad6:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 8005ad8:	0189      	lsls	r1, r1, #6
 8005ada:	428a      	cmp	r2, r1
 8005adc:	d106      	bne.n	8005aec <SPI_EndRxTxTransaction+0x124>
          SPI_RESET_CRC(hspi);
 8005ade:	6819      	ldr	r1, [r3, #0]
 8005ae0:	4815      	ldr	r0, [pc, #84]	@ (8005b38 <SPI_EndRxTxTransaction+0x170>)
 8005ae2:	4001      	ands	r1, r0
 8005ae4:	6019      	str	r1, [r3, #0]
 8005ae6:	6819      	ldr	r1, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005aec:	235d      	movs	r3, #93	@ 0x5d
 8005aee:	2201      	movs	r2, #1
 8005af0:	54f2      	strb	r2, [r6, r3]
        __HAL_UNLOCK(hspi);
 8005af2:	2200      	movs	r2, #0
 8005af4:	3b01      	subs	r3, #1
 8005af6:	54f2      	strb	r2, [r6, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af8:	6e33      	ldr	r3, [r6, #96]	@ 0x60
 8005afa:	3220      	adds	r2, #32
 8005afc:	4313      	orrs	r3, r2
    return HAL_TIMEOUT;
 8005afe:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b00:	6633      	str	r3, [r6, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b02:	e7a1      	b.n	8005a48 <SPI_EndRxTxTransaction+0x80>
      if (count == 0U)
 8005b04:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8005b06:	1e5a      	subs	r2, r3, #1
 8005b08:	4193      	sbcs	r3, r2
 8005b0a:	425b      	negs	r3, r3
 8005b0c:	401c      	ands	r4, r3
      count--;
 8005b0e:	9b03      	ldr	r3, [sp, #12]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	9303      	str	r3, [sp, #12]
 8005b14:	e7ca      	b.n	8005aac <SPI_EndRxTxTransaction+0xe4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b16:	2180      	movs	r1, #128	@ 0x80
 8005b18:	68b2      	ldr	r2, [r6, #8]
 8005b1a:	0209      	lsls	r1, r1, #8
 8005b1c:	428a      	cmp	r2, r1
 8005b1e:	d003      	beq.n	8005b28 <SPI_EndRxTxTransaction+0x160>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b20:	2180      	movs	r1, #128	@ 0x80
 8005b22:	00c9      	lsls	r1, r1, #3
 8005b24:	428a      	cmp	r2, r1
 8005b26:	d1d5      	bne.n	8005ad4 <SPI_EndRxTxTransaction+0x10c>
          __HAL_SPI_DISABLE(hspi);
 8005b28:	2140      	movs	r1, #64	@ 0x40
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	438a      	bics	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	e7d0      	b.n	8005ad4 <SPI_EndRxTxTransaction+0x10c>
 8005b32:	46c0      	nop			@ (mov r8, r8)
 8005b34:	20000000 	.word	0x20000000
 8005b38:	ffffdfff 	.word	0xffffdfff

08005b3c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b3e:	000c      	movs	r4, r1
 8005b40:	b083      	sub	sp, #12
 8005b42:	0005      	movs	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b44:	f7fe fa32 	bl	8003fac <HAL_GetTick>
 8005b48:	3464      	adds	r4, #100	@ 0x64
 8005b4a:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8005b4c:	f7fe fa2e 	bl	8003fac <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b50:	4b26      	ldr	r3, [pc, #152]	@ (8005bec <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8005b52:	0006      	movs	r6, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	015b      	lsls	r3, r3, #5
 8005b58:	0d1b      	lsrs	r3, r3, #20
 8005b5a:	4363      	muls	r3, r4
 8005b5c:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b5e:	682b      	ldr	r3, [r5, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	061b      	lsls	r3, r3, #24
 8005b64:	d530      	bpl.n	8005bc8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
 8005b66:	2780      	movs	r7, #128	@ 0x80
 8005b68:	e00b      	b.n	8005b82 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x46>
      if (count == 0U)
 8005b6a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8005b6c:	1e5a      	subs	r2, r3, #1
 8005b6e:	4193      	sbcs	r3, r2
 8005b70:	425b      	negs	r3, r3
 8005b72:	401c      	ands	r4, r3
      count--;
 8005b74:	9b01      	ldr	r3, [sp, #4]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b7a:	682b      	ldr	r3, [r5, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	421f      	tst	r7, r3
 8005b80:	d022      	beq.n	8005bc8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b82:	f7fe fa13 	bl	8003fac <HAL_GetTick>
 8005b86:	1b80      	subs	r0, r0, r6
 8005b88:	42a0      	cmp	r0, r4
 8005b8a:	d3ee      	bcc.n	8005b6a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b8c:	21e0      	movs	r1, #224	@ 0xe0
 8005b8e:	682b      	ldr	r3, [r5, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	438a      	bics	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b96:	2282      	movs	r2, #130	@ 0x82
 8005b98:	6869      	ldr	r1, [r5, #4]
 8005b9a:	0052      	lsls	r2, r2, #1
 8005b9c:	4291      	cmp	r1, r2
 8005b9e:	d016      	beq.n	8005bce <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ba0:	2180      	movs	r1, #128	@ 0x80
 8005ba2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005ba4:	0189      	lsls	r1, r1, #6
 8005ba6:	428a      	cmp	r2, r1
 8005ba8:	d106      	bne.n	8005bb8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
          SPI_RESET_CRC(hspi);
 8005baa:	6819      	ldr	r1, [r3, #0]
 8005bac:	4810      	ldr	r0, [pc, #64]	@ (8005bf0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8005bae:	4001      	ands	r1, r0
 8005bb0:	6019      	str	r1, [r3, #0]
 8005bb2:	6819      	ldr	r1, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005bb8:	235d      	movs	r3, #93	@ 0x5d
 8005bba:	2201      	movs	r2, #1
 8005bbc:	54ea      	strb	r2, [r5, r3]
        __HAL_UNLOCK(hspi);
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	2003      	movs	r0, #3
 8005bc4:	54ea      	strb	r2, [r5, r3]
        return HAL_TIMEOUT;
 8005bc6:	e000      	b.n	8005bca <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8e>
  return HAL_OK;
 8005bc8:	2000      	movs	r0, #0
}
 8005bca:	b003      	add	sp, #12
 8005bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bce:	2180      	movs	r1, #128	@ 0x80
 8005bd0:	68aa      	ldr	r2, [r5, #8]
 8005bd2:	0209      	lsls	r1, r1, #8
 8005bd4:	428a      	cmp	r2, r1
 8005bd6:	d003      	beq.n	8005be0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bd8:	2180      	movs	r1, #128	@ 0x80
 8005bda:	00c9      	lsls	r1, r1, #3
 8005bdc:	428a      	cmp	r2, r1
 8005bde:	d1df      	bne.n	8005ba0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
          __HAL_SPI_DISABLE(hspi);
 8005be0:	2140      	movs	r1, #64	@ 0x40
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	438a      	bics	r2, r1
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e7da      	b.n	8005ba0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
 8005bea:	46c0      	nop			@ (mov r8, r8)
 8005bec:	20000000 	.word	0x20000000
 8005bf0:	ffffdfff 	.word	0xffffdfff

08005bf4 <SPI_EndRxTxTransaction.constprop.0>:
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 8005bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bf6:	46c6      	mov	lr, r8
 8005bf8:	b500      	push	{lr}
 8005bfa:	4688      	mov	r8, r1
 8005bfc:	b082      	sub	sp, #8
  __IO uint8_t  tmpreg8 = 0;
 8005bfe:	466b      	mov	r3, sp
 8005c00:	2200      	movs	r2, #0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c02:	4644      	mov	r4, r8
  __IO uint8_t  tmpreg8 = 0;
 8005c04:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 8005c06:	0005      	movs	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c08:	f7fe f9d0 	bl	8003fac <HAL_GetTick>
  while ((hspi->Instance->SR & Fifo) != State)
 8005c0c:	27c0      	movs	r7, #192	@ 0xc0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c0e:	3464      	adds	r4, #100	@ 0x64
 8005c10:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8005c12:	f7fe f9cb 	bl	8003fac <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c16:	4b34      	ldr	r3, [pc, #208]	@ (8005ce8 <SPI_EndRxTxTransaction.constprop.0+0xf4>)
  while ((hspi->Instance->SR & Fifo) != State)
 8005c18:	017f      	lsls	r7, r7, #5
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c1a:	681b      	ldr	r3, [r3, #0]
  tmp_tickstart = HAL_GetTick();
 8005c1c:	0006      	movs	r6, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c1e:	009a      	lsls	r2, r3, #2
 8005c20:	18d2      	adds	r2, r2, r3
 8005c22:	00d3      	lsls	r3, r2, #3
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	0d1b      	lsrs	r3, r3, #20
 8005c28:	4363      	muls	r3, r4
 8005c2a:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	423b      	tst	r3, r7
 8005c32:	d10c      	bne.n	8005c4e <SPI_EndRxTxTransaction.constprop.0+0x5a>
 8005c34:	e032      	b.n	8005c9c <SPI_EndRxTxTransaction.constprop.0+0xa8>
      if (count == 0U)
 8005c36:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8005c38:	1e5a      	subs	r2, r3, #1
 8005c3a:	4193      	sbcs	r3, r2
 8005c3c:	425b      	negs	r3, r3
 8005c3e:	401c      	ands	r4, r3
      count--;
 8005c40:	9b01      	ldr	r3, [sp, #4]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c46:	682b      	ldr	r3, [r5, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	423b      	tst	r3, r7
 8005c4c:	d026      	beq.n	8005c9c <SPI_EndRxTxTransaction.constprop.0+0xa8>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c4e:	f7fe f9ad 	bl	8003fac <HAL_GetTick>
 8005c52:	1b80      	subs	r0, r0, r6
 8005c54:	4284      	cmp	r4, r0
 8005c56:	d8ee      	bhi.n	8005c36 <SPI_EndRxTxTransaction.constprop.0+0x42>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c58:	21e0      	movs	r1, #224	@ 0xe0
 8005c5a:	682b      	ldr	r3, [r5, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	438a      	bics	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c62:	2282      	movs	r2, #130	@ 0x82
 8005c64:	6869      	ldr	r1, [r5, #4]
 8005c66:	0052      	lsls	r2, r2, #1
 8005c68:	4291      	cmp	r1, r2
 8005c6a:	d02e      	beq.n	8005cca <SPI_EndRxTxTransaction.constprop.0+0xd6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c6c:	2180      	movs	r1, #128	@ 0x80
 8005c6e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005c70:	0189      	lsls	r1, r1, #6
 8005c72:	428a      	cmp	r2, r1
 8005c74:	d106      	bne.n	8005c84 <SPI_EndRxTxTransaction.constprop.0+0x90>
          SPI_RESET_CRC(hspi);
 8005c76:	6819      	ldr	r1, [r3, #0]
 8005c78:	481c      	ldr	r0, [pc, #112]	@ (8005cec <SPI_EndRxTxTransaction.constprop.0+0xf8>)
 8005c7a:	4001      	ands	r1, r0
 8005c7c:	6019      	str	r1, [r3, #0]
 8005c7e:	6819      	ldr	r1, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005c84:	235d      	movs	r3, #93	@ 0x5d
 8005c86:	2201      	movs	r2, #1
 8005c88:	54ea      	strb	r2, [r5, r3]
        __HAL_UNLOCK(hspi);
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	54ea      	strb	r2, [r5, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c90:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8005c92:	3220      	adds	r2, #32
 8005c94:	4313      	orrs	r3, r2
    return HAL_TIMEOUT;
 8005c96:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c98:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005c9a:	e00c      	b.n	8005cb6 <SPI_EndRxTxTransaction.constprop.0+0xc2>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	0028      	movs	r0, r5
 8005ca0:	f7ff ff4c 	bl	8005b3c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d10a      	bne.n	8005cbe <SPI_EndRxTxTransaction.constprop.0+0xca>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ca8:	4642      	mov	r2, r8
 8005caa:	2164      	movs	r1, #100	@ 0x64
 8005cac:	0028      	movs	r0, r5
 8005cae:	f7ff fe09 	bl	80058c4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d103      	bne.n	8005cbe <SPI_EndRxTxTransaction.constprop.0+0xca>
}
 8005cb6:	b002      	add	sp, #8
 8005cb8:	bc80      	pop	{r7}
 8005cba:	46b8      	mov	r8, r7
 8005cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005cc2:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005cc8:	e7f5      	b.n	8005cb6 <SPI_EndRxTxTransaction.constprop.0+0xc2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cca:	2180      	movs	r1, #128	@ 0x80
 8005ccc:	68aa      	ldr	r2, [r5, #8]
 8005cce:	0209      	lsls	r1, r1, #8
 8005cd0:	428a      	cmp	r2, r1
 8005cd2:	d003      	beq.n	8005cdc <SPI_EndRxTxTransaction.constprop.0+0xe8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cd4:	2180      	movs	r1, #128	@ 0x80
 8005cd6:	00c9      	lsls	r1, r1, #3
 8005cd8:	428a      	cmp	r2, r1
 8005cda:	d1c7      	bne.n	8005c6c <SPI_EndRxTxTransaction.constprop.0+0x78>
          __HAL_SPI_DISABLE(hspi);
 8005cdc:	2140      	movs	r1, #64	@ 0x40
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	438a      	bics	r2, r1
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	e7c2      	b.n	8005c6c <SPI_EndRxTxTransaction.constprop.0+0x78>
 8005ce6:	46c0      	nop			@ (mov r8, r8)
 8005ce8:	20000000 	.word	0x20000000
 8005cec:	ffffdfff 	.word	0xffffdfff

08005cf0 <HAL_SPI_Init>:
{
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	46de      	mov	lr, fp
 8005cf4:	4657      	mov	r7, sl
 8005cf6:	464e      	mov	r6, r9
 8005cf8:	4645      	mov	r5, r8
 8005cfa:	0004      	movs	r4, r0
 8005cfc:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d100      	bne.n	8005d04 <HAL_SPI_Init+0x14>
 8005d02:	e093      	b.n	8005e2c <HAL_SPI_Init+0x13c>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d04:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8005d06:	2d00      	cmp	r5, #0
 8005d08:	d069      	beq.n	8005dde <HAL_SPI_Init+0xee>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d0e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d14:	335d      	adds	r3, #93	@ 0x5d
 8005d16:	5ce3      	ldrb	r3, [r4, r3]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d06c      	beq.n	8005df8 <HAL_SPI_Init+0x108>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005d1e:	235d      	movs	r3, #93	@ 0x5d
 8005d20:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 8005d22:	2140      	movs	r1, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8005d24:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8005d26:	6822      	ldr	r2, [r4, #0]
 8005d28:	6813      	ldr	r3, [r2, #0]
 8005d2a:	438b      	bics	r3, r1
 8005d2c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d2e:	23e0      	movs	r3, #224	@ 0xe0
 8005d30:	68e1      	ldr	r1, [r4, #12]
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	4299      	cmp	r1, r3
 8005d36:	d866      	bhi.n	8005e06 <HAL_SPI_Init+0x116>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d38:	d000      	beq.n	8005d3c <HAL_SPI_Init+0x4c>
 8005d3a:	e070      	b.n	8005e1e <HAL_SPI_Init+0x12e>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d3c:	2380      	movs	r3, #128	@ 0x80
 8005d3e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005d40:	019b      	lsls	r3, r3, #6
 8005d42:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d44:	2380      	movs	r3, #128	@ 0x80
 8005d46:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d48:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d4a:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d4c:	2682      	movs	r6, #130	@ 0x82
 8005d4e:	2784      	movs	r7, #132	@ 0x84
 8005d50:	6863      	ldr	r3, [r4, #4]
 8005d52:	0076      	lsls	r6, r6, #1
 8005d54:	4033      	ands	r3, r6
 8005d56:	68a6      	ldr	r6, [r4, #8]
 8005d58:	023f      	lsls	r7, r7, #8
 8005d5a:	403e      	ands	r6, r7
 8005d5c:	2702      	movs	r7, #2
 8005d5e:	4333      	orrs	r3, r6
 8005d60:	6926      	ldr	r6, [r4, #16]
 8005d62:	69a0      	ldr	r0, [r4, #24]
 8005d64:	403e      	ands	r6, r7
 8005d66:	4333      	orrs	r3, r6
 8005d68:	2601      	movs	r6, #1
 8005d6a:	6967      	ldr	r7, [r4, #20]
 8005d6c:	46b2      	mov	sl, r6
 8005d6e:	4037      	ands	r7, r6
 8005d70:	433b      	orrs	r3, r7
 8005d72:	2780      	movs	r7, #128	@ 0x80
 8005d74:	00bf      	lsls	r7, r7, #2
 8005d76:	4007      	ands	r7, r0
 8005d78:	433b      	orrs	r3, r7
 8005d7a:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d7c:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d7e:	46b8      	mov	r8, r7
 8005d80:	2738      	movs	r7, #56	@ 0x38
 8005d82:	46b9      	mov	r9, r7
 8005d84:	4647      	mov	r7, r8
 8005d86:	464e      	mov	r6, r9
 8005d88:	4037      	ands	r7, r6
 8005d8a:	6a26      	ldr	r6, [r4, #32]
 8005d8c:	433b      	orrs	r3, r7
 8005d8e:	46b0      	mov	r8, r6
 8005d90:	2680      	movs	r6, #128	@ 0x80
 8005d92:	4647      	mov	r7, r8
 8005d94:	4037      	ands	r7, r6
 8005d96:	4666      	mov	r6, ip
 8005d98:	433b      	orrs	r3, r7
 8005d9a:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d9c:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d9e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005da0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005da2:	4033      	ands	r3, r6
 8005da4:	26f0      	movs	r6, #240	@ 0xf0
 8005da6:	0136      	lsls	r6, r6, #4
 8005da8:	4031      	ands	r1, r6
 8005daa:	4319      	orrs	r1, r3
 8005dac:	2304      	movs	r3, #4
 8005dae:	4003      	ands	r3, r0
 8005db0:	4319      	orrs	r1, r3
 8005db2:	2310      	movs	r3, #16
 8005db4:	402b      	ands	r3, r5
 8005db6:	4319      	orrs	r1, r3
 8005db8:	465b      	mov	r3, fp
 8005dba:	4319      	orrs	r1, r3
 8005dbc:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dbe:	69d3      	ldr	r3, [r2, #28]
 8005dc0:	491d      	ldr	r1, [pc, #116]	@ (8005e38 <HAL_SPI_Init+0x148>)
  return HAL_OK;
 8005dc2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dc4:	400b      	ands	r3, r1
 8005dc6:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dc8:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005dca:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dcc:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dce:	335d      	adds	r3, #93	@ 0x5d
 8005dd0:	54e2      	strb	r2, [r4, r3]
}
 8005dd2:	bcf0      	pop	{r4, r5, r6, r7}
 8005dd4:	46bb      	mov	fp, r7
 8005dd6:	46b2      	mov	sl, r6
 8005dd8:	46a9      	mov	r9, r5
 8005dda:	46a0      	mov	r8, r4
 8005ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dde:	2382      	movs	r3, #130	@ 0x82
 8005de0:	6842      	ldr	r2, [r0, #4]
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d093      	beq.n	8005d10 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005de8:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dea:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dec:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dee:	335d      	adds	r3, #93	@ 0x5d
 8005df0:	5ce3      	ldrb	r3, [r4, r3]
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d192      	bne.n	8005d1e <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8005df8:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8005dfa:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005dfc:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8005dfe:	f7fd fda1 	bl	8003944 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e02:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005e04:	e78b      	b.n	8005d1e <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e06:	23f0      	movs	r3, #240	@ 0xf0
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	4299      	cmp	r1, r3
 8005e0c:	d110      	bne.n	8005e30 <HAL_SPI_Init+0x140>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e0e:	2380      	movs	r3, #128	@ 0x80
 8005e10:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005e12:	019b      	lsls	r3, r3, #6
 8005e14:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e16:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e18:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e1a:	469b      	mov	fp, r3
 8005e1c:	e796      	b.n	8005d4c <HAL_SPI_Init+0x5c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e1e:	2380      	movs	r3, #128	@ 0x80
 8005e20:	015b      	lsls	r3, r3, #5
 8005e22:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	469c      	mov	ip, r3
 8005e28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e2a:	e78f      	b.n	8005d4c <HAL_SPI_Init+0x5c>
    return HAL_ERROR;
 8005e2c:	2001      	movs	r0, #1
 8005e2e:	e7d0      	b.n	8005dd2 <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e30:	2300      	movs	r3, #0
 8005e32:	469b      	mov	fp, r3
 8005e34:	e7f6      	b.n	8005e24 <HAL_SPI_Init+0x134>
 8005e36:	46c0      	nop			@ (mov r8, r8)
 8005e38:	fffff7ff 	.word	0xfffff7ff

08005e3c <HAL_SPI_TransmitReceive>:
{
 8005e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3e:	4647      	mov	r7, r8
 8005e40:	46ce      	mov	lr, r9
 8005e42:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8005e44:	235c      	movs	r3, #92	@ 0x5c
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8005e4a:	5cc2      	ldrb	r2, [r0, r3]
{
 8005e4c:	0004      	movs	r4, r0
 8005e4e:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 8005e50:	2a01      	cmp	r2, #1
 8005e52:	d100      	bne.n	8005e56 <HAL_SPI_TransmitReceive+0x1a>
 8005e54:	e09a      	b.n	8005f8c <HAL_SPI_TransmitReceive+0x150>
 8005e56:	2201      	movs	r2, #1
 8005e58:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8005e5a:	f7fe f8a7 	bl	8003fac <HAL_GetTick>
  tmp_state           = hspi->State;
 8005e5e:	235d      	movs	r3, #93	@ 0x5d
 8005e60:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 8005e62:	0006      	movs	r6, r0
  tmp_mode            = hspi->Init.Mode;
 8005e64:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8005e66:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d010      	beq.n	8005e8e <HAL_SPI_TransmitReceive+0x52>
 8005e6c:	2382      	movs	r3, #130	@ 0x82
    errorcode = HAL_BUSY;
 8005e6e:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d006      	beq.n	8005e84 <HAL_SPI_TransmitReceive+0x48>
  __HAL_UNLOCK(hspi);
 8005e76:	235c      	movs	r3, #92	@ 0x5c
 8005e78:	2200      	movs	r2, #0
 8005e7a:	54e2      	strb	r2, [r4, r3]
}
 8005e7c:	bcc0      	pop	{r6, r7}
 8005e7e:	46b9      	mov	r9, r7
 8005e80:	46b0      	mov	r8, r6
 8005e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e84:	68a3      	ldr	r3, [r4, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1f5      	bne.n	8005e76 <HAL_SPI_TransmitReceive+0x3a>
 8005e8a:	2904      	cmp	r1, #4
 8005e8c:	d1f3      	bne.n	8005e76 <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e8e:	2f00      	cmp	r7, #0
 8005e90:	d100      	bne.n	8005e94 <HAL_SPI_TransmitReceive+0x58>
 8005e92:	e079      	b.n	8005f88 <HAL_SPI_TransmitReceive+0x14c>
 8005e94:	4643      	mov	r3, r8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d076      	beq.n	8005f88 <HAL_SPI_TransmitReceive+0x14c>
 8005e9a:	2d00      	cmp	r5, #0
 8005e9c:	d074      	beq.n	8005f88 <HAL_SPI_TransmitReceive+0x14c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e9e:	235d      	movs	r3, #93	@ 0x5d
 8005ea0:	5ce1      	ldrb	r1, [r4, r3]
 8005ea2:	2904      	cmp	r1, #4
 8005ea4:	d001      	beq.n	8005eaa <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ea6:	2105      	movs	r1, #5
 8005ea8:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005eaa:	4641      	mov	r1, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eac:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005eae:	6421      	str	r1, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005eb0:	2146      	movs	r1, #70	@ 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eb2:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxXferCount = Size;
 8005eb4:	5265      	strh	r5, [r4, r1]
  hspi->RxXferSize  = Size;
 8005eb6:	3902      	subs	r1, #2
 8005eb8:	5265      	strh	r5, [r4, r1]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005eba:	21e0      	movs	r1, #224	@ 0xe0
 8005ebc:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8005ebe:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005ec0:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ec2:	63a7      	str	r7, [r4, #56]	@ 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ec4:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 8005ec6:	87e5      	strh	r5, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005ec8:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005eca:	00c9      	lsls	r1, r1, #3
 8005ecc:	4288      	cmp	r0, r1
 8005ece:	d95f      	bls.n	8005f90 <HAL_SPI_TransmitReceive+0x154>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ed0:	6859      	ldr	r1, [r3, #4]
 8005ed2:	489d      	ldr	r0, [pc, #628]	@ (8006148 <HAL_SPI_TransmitReceive+0x30c>)
 8005ed4:	4001      	ands	r1, r0
 8005ed6:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ed8:	2140      	movs	r1, #64	@ 0x40
 8005eda:	6818      	ldr	r0, [r3, #0]
 8005edc:	4201      	tst	r1, r0
 8005ede:	d102      	bne.n	8005ee6 <HAL_SPI_TransmitReceive+0xaa>
    __HAL_SPI_ENABLE(hspi);
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	4301      	orrs	r1, r0
 8005ee4:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ee6:	2a00      	cmp	r2, #0
 8005ee8:	d000      	beq.n	8005eec <HAL_SPI_TransmitReceive+0xb0>
 8005eea:	e0ab      	b.n	8006044 <HAL_SPI_TransmitReceive+0x208>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eec:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eee:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ef0:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005ef2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef4:	63a7      	str	r7, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005efc:	9b08      	ldr	r3, [sp, #32]
 8005efe:	3301      	adds	r3, #1
 8005f00:	d000      	beq.n	8005f04 <HAL_SPI_TransmitReceive+0xc8>
 8005f02:	e0a6      	b.n	8006052 <HAL_SPI_TransmitReceive+0x216>
{
 8005f04:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f06:	2546      	movs	r5, #70	@ 0x46
{
 8005f08:	4698      	mov	r8, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f0a:	2702      	movs	r7, #2
 8005f0c:	e029      	b.n	8005f62 <HAL_SPI_TransmitReceive+0x126>
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	4217      	tst	r7, r2
 8005f14:	d010      	beq.n	8005f38 <HAL_SPI_TransmitReceive+0xfc>
 8005f16:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005f18:	2a00      	cmp	r2, #0
 8005f1a:	d00d      	beq.n	8005f38 <HAL_SPI_TransmitReceive+0xfc>
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	2a01      	cmp	r2, #1
 8005f20:	d108      	bne.n	8005f34 <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f22:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005f24:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f26:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f28:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f2a:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f2c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005f2e:	3a01      	subs	r2, #1
 8005f30:	b292      	uxth	r2, r2
 8005f32:	87e2      	strh	r2, [r4, #62]	@ 0x3e
{
 8005f34:	2200      	movs	r2, #0
 8005f36:	4690      	mov	r8, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f38:	2201      	movs	r2, #1
 8005f3a:	0010      	movs	r0, r2
 8005f3c:	6899      	ldr	r1, [r3, #8]
 8005f3e:	4008      	ands	r0, r1
 8005f40:	420a      	tst	r2, r1
 8005f42:	d00c      	beq.n	8005f5e <HAL_SPI_TransmitReceive+0x122>
 8005f44:	5b62      	ldrh	r2, [r4, r5]
 8005f46:	2a00      	cmp	r2, #0
 8005f48:	d009      	beq.n	8005f5e <HAL_SPI_TransmitReceive+0x122>
        txallowed = 1U;
 8005f4a:	4680      	mov	r8, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f52:	3302      	adds	r3, #2
 8005f54:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8005f56:	5b63      	ldrh	r3, [r4, r5]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	5363      	strh	r3, [r4, r5]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f5e:	f7fe f825 	bl	8003fac <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f62:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1d2      	bne.n	8005f0e <HAL_SPI_TransmitReceive+0xd2>
 8005f68:	5b63      	ldrh	r3, [r4, r5]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1cf      	bne.n	8005f0e <HAL_SPI_TransmitReceive+0xd2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f6e:	0032      	movs	r2, r6
 8005f70:	0020      	movs	r0, r4
 8005f72:	9908      	ldr	r1, [sp, #32]
 8005f74:	f7ff fd28 	bl	80059c8 <SPI_EndRxTxTransaction>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d002      	beq.n	8005f82 <HAL_SPI_TransmitReceive+0x146>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f7c:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8005f7e:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f80:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f82:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d059      	beq.n	800603c <HAL_SPI_TransmitReceive+0x200>
    errorcode = HAL_ERROR;
 8005f88:	2001      	movs	r0, #1
 8005f8a:	e774      	b.n	8005e76 <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 8005f8c:	2002      	movs	r0, #2
 8005f8e:	e775      	b.n	8005e7c <HAL_SPI_TransmitReceive+0x40>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f90:	2180      	movs	r1, #128	@ 0x80
 8005f92:	6858      	ldr	r0, [r3, #4]
 8005f94:	0149      	lsls	r1, r1, #5
 8005f96:	4301      	orrs	r1, r0
 8005f98:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f9a:	2140      	movs	r1, #64	@ 0x40
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	4201      	tst	r1, r0
 8005fa0:	d102      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x16c>
    __HAL_SPI_ENABLE(hspi);
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	4301      	orrs	r1, r0
 8005fa6:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa8:	2a00      	cmp	r2, #0
 8005faa:	d14f      	bne.n	800604c <HAL_SPI_TransmitReceive+0x210>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fac:	783a      	ldrb	r2, [r7, #0]
 8005fae:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fb0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8005fb6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005fbe:	9b08      	ldr	r3, [sp, #32]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	d000      	beq.n	8005fc6 <HAL_SPI_TransmitReceive+0x18a>
 8005fc4:	e083      	b.n	80060ce <HAL_SPI_TransmitReceive+0x292>
        txallowed = 1U;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fca:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fcc:	2746      	movs	r7, #70	@ 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fce:	4698      	mov	r8, r3
 8005fd0:	e02d      	b.n	800602e <HAL_SPI_TransmitReceive+0x1f2>
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	4211      	tst	r1, r2
 8005fda:	d012      	beq.n	8006002 <HAL_SPI_TransmitReceive+0x1c6>
 8005fdc:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	d00f      	beq.n	8006002 <HAL_SPI_TransmitReceive+0x1c6>
 8005fe2:	464a      	mov	r2, r9
 8005fe4:	2a01      	cmp	r2, #1
 8005fe6:	d10c      	bne.n	8006002 <HAL_SPI_TransmitReceive+0x1c6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fe8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005fea:	7812      	ldrb	r2, [r2, #0]
 8005fec:	731a      	strb	r2, [r3, #12]
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fee:	2200      	movs	r2, #0
 8005ff0:	4691      	mov	r9, r2
        hspi->pTxBuffPtr++;
 8005ff2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ff8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	2501      	movs	r5, #1
 8006004:	002a      	movs	r2, r5
 8006006:	6899      	ldr	r1, [r3, #8]
 8006008:	400a      	ands	r2, r1
 800600a:	420d      	tst	r5, r1
 800600c:	d00d      	beq.n	800602a <HAL_SPI_TransmitReceive+0x1ee>
 800600e:	5be1      	ldrh	r1, [r4, r7]
 8006010:	2900      	cmp	r1, #0
 8006012:	d00a      	beq.n	800602a <HAL_SPI_TransmitReceive+0x1ee>
        txallowed = 1U;
 8006014:	4691      	mov	r9, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006016:	7b1b      	ldrb	r3, [r3, #12]
 8006018:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800601a:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 800601c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800601e:	3301      	adds	r3, #1
 8006020:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006022:	5be3      	ldrh	r3, [r4, r7]
 8006024:	3b01      	subs	r3, #1
 8006026:	b29b      	uxth	r3, r3
 8006028:	53e3      	strh	r3, [r4, r7]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800602a:	f7fd ffbf 	bl	8003fac <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800602e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1ce      	bne.n	8005fd2 <HAL_SPI_TransmitReceive+0x196>
 8006034:	5be3      	ldrh	r3, [r4, r7]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1cb      	bne.n	8005fd2 <HAL_SPI_TransmitReceive+0x196>
 800603a:	e798      	b.n	8005f6e <HAL_SPI_TransmitReceive+0x132>
    hspi->State = HAL_SPI_STATE_READY;
 800603c:	2201      	movs	r2, #1
 800603e:	335d      	adds	r3, #93	@ 0x5d
 8006040:	54e2      	strb	r2, [r4, r3]
 8006042:	e718      	b.n	8005e76 <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006044:	2d01      	cmp	r5, #1
 8006046:	d000      	beq.n	800604a <HAL_SPI_TransmitReceive+0x20e>
 8006048:	e758      	b.n	8005efc <HAL_SPI_TransmitReceive+0xc0>
 800604a:	e74f      	b.n	8005eec <HAL_SPI_TransmitReceive+0xb0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800604c:	2d01      	cmp	r5, #1
 800604e:	d1b6      	bne.n	8005fbe <HAL_SPI_TransmitReceive+0x182>
 8006050:	e7ac      	b.n	8005fac <HAL_SPI_TransmitReceive+0x170>
        txallowed = 1U;
 8006052:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006054:	2546      	movs	r5, #70	@ 0x46
        txallowed = 1U;
 8006056:	4698      	mov	r8, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006058:	2702      	movs	r7, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800605a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800605c:	2b00      	cmp	r3, #0
 800605e:	d103      	bne.n	8006068 <HAL_SPI_TransmitReceive+0x22c>
 8006060:	5b63      	ldrh	r3, [r4, r5]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d100      	bne.n	8006068 <HAL_SPI_TransmitReceive+0x22c>
 8006066:	e782      	b.n	8005f6e <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	4217      	tst	r7, r2
 800606e:	d010      	beq.n	8006092 <HAL_SPI_TransmitReceive+0x256>
 8006070:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8006072:	2a00      	cmp	r2, #0
 8006074:	d00d      	beq.n	8006092 <HAL_SPI_TransmitReceive+0x256>
 8006076:	4642      	mov	r2, r8
 8006078:	2a01      	cmp	r2, #1
 800607a:	d108      	bne.n	800608e <HAL_SPI_TransmitReceive+0x252>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800607c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800607e:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006080:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006082:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006084:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006086:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8006088:	3a01      	subs	r2, #1
 800608a:	b292      	uxth	r2, r2
 800608c:	87e2      	strh	r2, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800608e:	2200      	movs	r2, #0
 8006090:	4690      	mov	r8, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006092:	2101      	movs	r1, #1
 8006094:	0008      	movs	r0, r1
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	4010      	ands	r0, r2
 800609a:	4211      	tst	r1, r2
 800609c:	d00c      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x27c>
 800609e:	5b62      	ldrh	r2, [r4, r5]
 80060a0:	2a00      	cmp	r2, #0
 80060a2:	d009      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x27c>
        txallowed = 1U;
 80060a4:	4680      	mov	r8, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060ac:	3302      	adds	r3, #2
 80060ae:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80060b0:	5b63      	ldrh	r3, [r4, r5]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	5363      	strh	r3, [r4, r5]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060b8:	f7fd ff78 	bl	8003fac <HAL_GetTick>
 80060bc:	9b08      	ldr	r3, [sp, #32]
 80060be:	1b80      	subs	r0, r0, r6
 80060c0:	4298      	cmp	r0, r3
 80060c2:	d3ca      	bcc.n	800605a <HAL_SPI_TransmitReceive+0x21e>
        hspi->State = HAL_SPI_STATE_READY;
 80060c4:	235d      	movs	r3, #93	@ 0x5d
 80060c6:	2201      	movs	r2, #1
        errorcode = HAL_TIMEOUT;
 80060c8:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 80060ca:	54e2      	strb	r2, [r4, r3]
        goto error;
 80060cc:	e6d3      	b.n	8005e76 <HAL_SPI_TransmitReceive+0x3a>
        txallowed = 1U;
 80060ce:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060d0:	2546      	movs	r5, #70	@ 0x46
        txallowed = 1U;
 80060d2:	4698      	mov	r8, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060d4:	2702      	movs	r7, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060d6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d103      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x2a8>
 80060dc:	5b63      	ldrh	r3, [r4, r5]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d100      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x2a8>
 80060e2:	e744      	b.n	8005f6e <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	4217      	tst	r7, r2
 80060ea:	d012      	beq.n	8006112 <HAL_SPI_TransmitReceive+0x2d6>
 80060ec:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80060ee:	2a00      	cmp	r2, #0
 80060f0:	d00f      	beq.n	8006112 <HAL_SPI_TransmitReceive+0x2d6>
 80060f2:	4642      	mov	r2, r8
 80060f4:	2a01      	cmp	r2, #1
 80060f6:	d10c      	bne.n	8006112 <HAL_SPI_TransmitReceive+0x2d6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060f8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80060fa:	7812      	ldrb	r2, [r2, #0]
 80060fc:	731a      	strb	r2, [r3, #12]
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060fe:	2200      	movs	r2, #0
 8006100:	4690      	mov	r8, r2
        hspi->pTxBuffPtr++;
 8006102:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006104:	3301      	adds	r3, #1
 8006106:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006108:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800610a:	3b01      	subs	r3, #1
 800610c:	b29b      	uxth	r3, r3
 800610e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	2101      	movs	r1, #1
 8006114:	0008      	movs	r0, r1
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	4010      	ands	r0, r2
 800611a:	4211      	tst	r1, r2
 800611c:	d00d      	beq.n	800613a <HAL_SPI_TransmitReceive+0x2fe>
 800611e:	5b62      	ldrh	r2, [r4, r5]
 8006120:	2a00      	cmp	r2, #0
 8006122:	d00a      	beq.n	800613a <HAL_SPI_TransmitReceive+0x2fe>
        txallowed = 1U;
 8006124:	4680      	mov	r8, r0
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006126:	7b1b      	ldrb	r3, [r3, #12]
 8006128:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800612a:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 800612c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800612e:	3301      	adds	r3, #1
 8006130:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006132:	5b63      	ldrh	r3, [r4, r5]
 8006134:	3b01      	subs	r3, #1
 8006136:	b29b      	uxth	r3, r3
 8006138:	5363      	strh	r3, [r4, r5]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800613a:	f7fd ff37 	bl	8003fac <HAL_GetTick>
 800613e:	9b08      	ldr	r3, [sp, #32]
 8006140:	1b80      	subs	r0, r0, r6
 8006142:	4298      	cmp	r0, r3
 8006144:	d3c7      	bcc.n	80060d6 <HAL_SPI_TransmitReceive+0x29a>
 8006146:	e7bd      	b.n	80060c4 <HAL_SPI_TransmitReceive+0x288>
 8006148:	ffffefff 	.word	0xffffefff

0800614c <HAL_SPI_TransmitReceive_DMA>:
{
 800614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614e:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8006150:	205c      	movs	r0, #92	@ 0x5c
 8006152:	5c25      	ldrb	r5, [r4, r0]
 8006154:	2d01      	cmp	r5, #1
 8006156:	d100      	bne.n	800615a <HAL_SPI_TransmitReceive_DMA+0xe>
 8006158:	e073      	b.n	8006242 <HAL_SPI_TransmitReceive_DMA+0xf6>
 800615a:	2501      	movs	r5, #1
 800615c:	5425      	strb	r5, [r4, r0]
  tmp_state           = hspi->State;
 800615e:	3001      	adds	r0, #1
 8006160:	5c20      	ldrb	r0, [r4, r0]
  tmp_mode            = hspi->Init.Mode;
 8006162:	6865      	ldr	r5, [r4, #4]
  tmp_state           = hspi->State;
 8006164:	b2c7      	uxtb	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006166:	2801      	cmp	r0, #1
 8006168:	d00d      	beq.n	8006186 <HAL_SPI_TransmitReceive_DMA+0x3a>
 800616a:	2682      	movs	r6, #130	@ 0x82
    errorcode = HAL_BUSY;
 800616c:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800616e:	0076      	lsls	r6, r6, #1
 8006170:	42b5      	cmp	r5, r6
 8006172:	d003      	beq.n	800617c <HAL_SPI_TransmitReceive_DMA+0x30>
  __HAL_UNLOCK(hspi);
 8006174:	235c      	movs	r3, #92	@ 0x5c
 8006176:	2200      	movs	r2, #0
 8006178:	54e2      	strb	r2, [r4, r3]
}
 800617a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800617c:	68a5      	ldr	r5, [r4, #8]
 800617e:	2d00      	cmp	r5, #0
 8006180:	d1f8      	bne.n	8006174 <HAL_SPI_TransmitReceive_DMA+0x28>
 8006182:	2f04      	cmp	r7, #4
 8006184:	d1f6      	bne.n	8006174 <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006186:	2900      	cmp	r1, #0
 8006188:	d061      	beq.n	800624e <HAL_SPI_TransmitReceive_DMA+0x102>
 800618a:	2a00      	cmp	r2, #0
 800618c:	d05f      	beq.n	800624e <HAL_SPI_TransmitReceive_DMA+0x102>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d05d      	beq.n	800624e <HAL_SPI_TransmitReceive_DMA+0x102>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006192:	205d      	movs	r0, #93	@ 0x5d
 8006194:	5c25      	ldrb	r5, [r4, r0]
 8006196:	2d04      	cmp	r5, #4
 8006198:	d001      	beq.n	800619e <HAL_SPI_TransmitReceive_DMA+0x52>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800619a:	2505      	movs	r5, #5
 800619c:	5425      	strb	r5, [r4, r0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800619e:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061a0:	63a1      	str	r1, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80061a2:	2144      	movs	r1, #68	@ 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061a4:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->TxXferSize  = Size;
 80061a6:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80061a8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061aa:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80061ac:	5263      	strh	r3, [r4, r1]
  hspi->RxXferCount = Size;
 80061ae:	3102      	adds	r1, #2
 80061b0:	5263      	strh	r3, [r4, r1]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80061b2:	6821      	ldr	r1, [r4, #0]
 80061b4:	4d47      	ldr	r5, [pc, #284]	@ (80062d4 <HAL_SPI_TransmitReceive_DMA+0x188>)
  hspi->RxISR       = NULL;
 80061b6:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80061b8:	6520      	str	r0, [r4, #80]	@ 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80061ba:	6848      	ldr	r0, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061bc:	68e6      	ldr	r6, [r4, #12]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80061be:	4028      	ands	r0, r5
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061c0:	25e0      	movs	r5, #224	@ 0xe0
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80061c2:	6048      	str	r0, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061c4:	00ed      	lsls	r5, r5, #3
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80061c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061c8:	42ae      	cmp	r6, r5
 80061ca:	d942      	bls.n	8006252 <HAL_SPI_TransmitReceive_DMA+0x106>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061cc:	684b      	ldr	r3, [r1, #4]
 80061ce:	4d42      	ldr	r5, [pc, #264]	@ (80062d8 <HAL_SPI_TransmitReceive_DMA+0x18c>)
 80061d0:	402b      	ands	r3, r5
 80061d2:	604b      	str	r3, [r1, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80061d4:	235d      	movs	r3, #93	@ 0x5d
 80061d6:	5ce3      	ldrb	r3, [r4, r3]
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d05a      	beq.n	8006292 <HAL_SPI_TransmitReceive_DMA+0x146>
 80061dc:	4d3f      	ldr	r5, [pc, #252]	@ (80062dc <HAL_SPI_TransmitReceive_DMA+0x190>)
 80061de:	4b40      	ldr	r3, [pc, #256]	@ (80062e0 <HAL_SPI_TransmitReceive_DMA+0x194>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80061e0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80061e2:	4b40      	ldr	r3, [pc, #256]	@ (80062e4 <HAL_SPI_TransmitReceive_DMA+0x198>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80061e4:	6305      	str	r5, [r0, #48]	@ 0x30
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80061e6:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	6383      	str	r3, [r0, #56]	@ 0x38
                                 hspi->RxXferCount))
 80061ec:	3346      	adds	r3, #70	@ 0x46
 80061ee:	5ae3      	ldrh	r3, [r4, r3]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80061f0:	310c      	adds	r1, #12
                                 hspi->RxXferCount))
 80061f2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80061f4:	f7fe fbea 	bl	80049cc <HAL_DMA_Start_IT>
 80061f8:	1e03      	subs	r3, r0, #0
 80061fa:	d124      	bne.n	8006246 <HAL_SPI_TransmitReceive_DMA+0xfa>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80061fc:	2001      	movs	r0, #1
 80061fe:	6822      	ldr	r2, [r4, #0]
 8006200:	6851      	ldr	r1, [r2, #4]
 8006202:	4301      	orrs	r1, r0
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006204:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006206:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006208:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800620a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800620c:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800620e:	6383      	str	r3, [r0, #56]	@ 0x38
                                 hspi->TxXferCount))
 8006210:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006212:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
                                 hspi->TxXferCount))
 8006214:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006216:	320c      	adds	r2, #12
 8006218:	f7fe fbd8 	bl	80049cc <HAL_DMA_Start_IT>
 800621c:	2800      	cmp	r0, #0
 800621e:	d112      	bne.n	8006246 <HAL_SPI_TransmitReceive_DMA+0xfa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006220:	2240      	movs	r2, #64	@ 0x40
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	6819      	ldr	r1, [r3, #0]
 8006226:	420a      	tst	r2, r1
 8006228:	d102      	bne.n	8006230 <HAL_SPI_TransmitReceive_DMA+0xe4>
    __HAL_SPI_ENABLE(hspi);
 800622a:	6819      	ldr	r1, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006230:	2120      	movs	r1, #32
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	430a      	orrs	r2, r1
 8006236:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	391e      	subs	r1, #30
 800623c:	430a      	orrs	r2, r1
 800623e:	605a      	str	r2, [r3, #4]
 8006240:	e798      	b.n	8006174 <HAL_SPI_TransmitReceive_DMA+0x28>
  __HAL_LOCK(hspi);
 8006242:	2002      	movs	r0, #2
 8006244:	e799      	b.n	800617a <HAL_SPI_TransmitReceive_DMA+0x2e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006246:	2210      	movs	r2, #16
 8006248:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800624a:	4313      	orrs	r3, r2
 800624c:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800624e:	2001      	movs	r0, #1
 8006250:	e790      	b.n	8006174 <HAL_SPI_TransmitReceive_DMA+0x28>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006252:	2580      	movs	r5, #128	@ 0x80
 8006254:	684e      	ldr	r6, [r1, #4]
 8006256:	016d      	lsls	r5, r5, #5
 8006258:	4335      	orrs	r5, r6
 800625a:	604d      	str	r5, [r1, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800625c:	2580      	movs	r5, #128	@ 0x80
 800625e:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8006260:	00ed      	lsls	r5, r5, #3
 8006262:	69b6      	ldr	r6, [r6, #24]
 8006264:	42ae      	cmp	r6, r5
 8006266:	d017      	beq.n	8006298 <HAL_SPI_TransmitReceive_DMA+0x14c>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006268:	2380      	movs	r3, #128	@ 0x80
 800626a:	6985      	ldr	r5, [r0, #24]
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	429d      	cmp	r5, r3
 8006270:	d1b0      	bne.n	80061d4 <HAL_SPI_TransmitReceive_DMA+0x88>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006272:	684b      	ldr	r3, [r1, #4]
 8006274:	4d18      	ldr	r5, [pc, #96]	@ (80062d8 <HAL_SPI_TransmitReceive_DMA+0x18c>)
 8006276:	402b      	ands	r3, r5
 8006278:	604b      	str	r3, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800627a:	2346      	movs	r3, #70	@ 0x46
 800627c:	5ae5      	ldrh	r5, [r4, r3]
 800627e:	07ed      	lsls	r5, r5, #31
 8006280:	d414      	bmi.n	80062ac <HAL_SPI_TransmitReceive_DMA+0x160>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006282:	684d      	ldr	r5, [r1, #4]
 8006284:	4e18      	ldr	r6, [pc, #96]	@ (80062e8 <HAL_SPI_TransmitReceive_DMA+0x19c>)
 8006286:	4035      	ands	r5, r6
 8006288:	604d      	str	r5, [r1, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800628a:	5ae5      	ldrh	r5, [r4, r3]
 800628c:	086d      	lsrs	r5, r5, #1
 800628e:	52e5      	strh	r5, [r4, r3]
 8006290:	e7a0      	b.n	80061d4 <HAL_SPI_TransmitReceive_DMA+0x88>
 8006292:	4d16      	ldr	r5, [pc, #88]	@ (80062ec <HAL_SPI_TransmitReceive_DMA+0x1a0>)
 8006294:	4b16      	ldr	r3, [pc, #88]	@ (80062f0 <HAL_SPI_TransmitReceive_DMA+0x1a4>)
 8006296:	e7a3      	b.n	80061e0 <HAL_SPI_TransmitReceive_DMA+0x94>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006298:	07db      	lsls	r3, r3, #31
 800629a:	d411      	bmi.n	80062c0 <HAL_SPI_TransmitReceive_DMA+0x174>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800629c:	684b      	ldr	r3, [r1, #4]
 800629e:	4d15      	ldr	r5, [pc, #84]	@ (80062f4 <HAL_SPI_TransmitReceive_DMA+0x1a8>)
 80062a0:	402b      	ands	r3, r5
 80062a2:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80062a4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80062a6:	085b      	lsrs	r3, r3, #1
 80062a8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80062aa:	e7dd      	b.n	8006268 <HAL_SPI_TransmitReceive_DMA+0x11c>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80062ac:	2580      	movs	r5, #128	@ 0x80
 80062ae:	684e      	ldr	r6, [r1, #4]
 80062b0:	01ad      	lsls	r5, r5, #6
 80062b2:	4335      	orrs	r5, r6
 80062b4:	604d      	str	r5, [r1, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80062b6:	5ae5      	ldrh	r5, [r4, r3]
 80062b8:	086d      	lsrs	r5, r5, #1
 80062ba:	3501      	adds	r5, #1
 80062bc:	52e5      	strh	r5, [r4, r3]
 80062be:	e789      	b.n	80061d4 <HAL_SPI_TransmitReceive_DMA+0x88>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80062c0:	2380      	movs	r3, #128	@ 0x80
 80062c2:	684d      	ldr	r5, [r1, #4]
 80062c4:	01db      	lsls	r3, r3, #7
 80062c6:	432b      	orrs	r3, r5
 80062c8:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80062ca:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80062cc:	085b      	lsrs	r3, r3, #1
 80062ce:	3301      	adds	r3, #1
 80062d0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80062d2:	e7c9      	b.n	8006268 <HAL_SPI_TransmitReceive_DMA+0x11c>
 80062d4:	ffff9fff 	.word	0xffff9fff
 80062d8:	ffffefff 	.word	0xffffefff
 80062dc:	08006311 	.word	0x08006311
 80062e0:	080064c9 	.word	0x080064c9
 80062e4:	08006321 	.word	0x08006321
 80062e8:	ffffdfff 	.word	0xffffdfff
 80062ec:	08006301 	.word	0x08006301
 80062f0:	08006345 	.word	0x08006345
 80062f4:	ffffbfff 	.word	0xffffbfff

080062f8 <HAL_SPI_RxCpltCallback>:
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
 80062f8:	4770      	bx	lr
 80062fa:	46c0      	nop			@ (mov r8, r8)

080062fc <HAL_SPI_RxHalfCpltCallback>:
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 80062fc:	4770      	bx	lr
 80062fe:	46c0      	nop			@ (mov r8, r8)

08006300 <SPI_DMAHalfReceiveCplt>:
{
 8006300:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006302:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8006304:	f7ff fffa 	bl	80062fc <HAL_SPI_RxHalfCpltCallback>
}
 8006308:	bd10      	pop	{r4, pc}
 800630a:	46c0      	nop			@ (mov r8, r8)

0800630c <HAL_SPI_TxRxHalfCpltCallback>:
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 800630c:	4770      	bx	lr
 800630e:	46c0      	nop			@ (mov r8, r8)

08006310 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8006310:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006312:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8006314:	f7ff fffa 	bl	800630c <HAL_SPI_TxRxHalfCpltCallback>
}
 8006318:	bd10      	pop	{r4, pc}
 800631a:	46c0      	nop			@ (mov r8, r8)

0800631c <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 800631c:	4770      	bx	lr
 800631e:	46c0      	nop			@ (mov r8, r8)

08006320 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006320:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006322:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8006324:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006326:	6802      	ldr	r2, [r0, #0]
 8006328:	6853      	ldr	r3, [r2, #4]
 800632a:	438b      	bics	r3, r1
 800632c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800632e:	2210      	movs	r2, #16
 8006330:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006332:	4313      	orrs	r3, r2
 8006334:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006336:	235d      	movs	r3, #93	@ 0x5d
 8006338:	3a0f      	subs	r2, #15
 800633a:	54c2      	strb	r2, [r0, r3]
  HAL_SPI_ErrorCallback(hspi);
 800633c:	f7ff ffee 	bl	800631c <HAL_SPI_ErrorCallback>
}
 8006340:	bd10      	pop	{r4, pc}
 8006342:	46c0      	nop			@ (mov r8, r8)

08006344 <SPI_DMAReceiveCplt>:
{
 8006344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006346:	46c6      	mov	lr, r8
 8006348:	b500      	push	{lr}
 800634a:	0004      	movs	r4, r0
 800634c:	b082      	sub	sp, #8
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800634e:	6a85      	ldr	r5, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8006350:	f7fd fe2c 	bl	8003fac <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006354:	2120      	movs	r1, #32
 8006356:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006358:	4680      	mov	r8, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4219      	tst	r1, r3
 800635e:	d160      	bne.n	8006422 <SPI_DMAReceiveCplt+0xde>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	438a      	bics	r2, r1
 8006366:	605a      	str	r2, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006368:	68aa      	ldr	r2, [r5, #8]
 800636a:	6869      	ldr	r1, [r5, #4]
 800636c:	2a00      	cmp	r2, #0
 800636e:	d05f      	beq.n	8006430 <SPI_DMAReceiveCplt+0xec>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006370:	2401      	movs	r4, #1
 8006372:	6858      	ldr	r0, [r3, #4]
 8006374:	43a0      	bics	r0, r4
 8006376:	6058      	str	r0, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006378:	2082      	movs	r0, #130	@ 0x82
 800637a:	0040      	lsls	r0, r0, #1
 800637c:	4281      	cmp	r1, r0
 800637e:	d100      	bne.n	8006382 <SPI_DMAReceiveCplt+0x3e>
 8006380:	e082      	b.n	8006488 <SPI_DMAReceiveCplt+0x144>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006382:	4644      	mov	r4, r8
 8006384:	f7fd fe12 	bl	8003fac <HAL_GetTick>
 8006388:	3464      	adds	r4, #100	@ 0x64
 800638a:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 800638c:	f7fd fe0e 	bl	8003fac <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006390:	4b4b      	ldr	r3, [pc, #300]	@ (80064c0 <SPI_DMAReceiveCplt+0x17c>)
  tmp_tickstart = HAL_GetTick();
 8006392:	0006      	movs	r6, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006394:	681b      	ldr	r3, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006396:	2780      	movs	r7, #128	@ 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006398:	015b      	lsls	r3, r3, #5
 800639a:	0d1b      	lsrs	r3, r3, #20
 800639c:	4363      	muls	r3, r4
 800639e:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	061b      	lsls	r3, r3, #24
 80063a6:	d40c      	bmi.n	80063c2 <SPI_DMAReceiveCplt+0x7e>
 80063a8:	e04b      	b.n	8006442 <SPI_DMAReceiveCplt+0xfe>
      if (count == 0U)
 80063aa:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80063ac:	1e5a      	subs	r2, r3, #1
 80063ae:	4193      	sbcs	r3, r2
 80063b0:	425b      	negs	r3, r3
 80063b2:	401c      	ands	r4, r3
      count--;
 80063b4:	9b01      	ldr	r3, [sp, #4]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ba:	682b      	ldr	r3, [r5, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	421f      	tst	r7, r3
 80063c0:	d03f      	beq.n	8006442 <SPI_DMAReceiveCplt+0xfe>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063c2:	f7fd fdf3 	bl	8003fac <HAL_GetTick>
 80063c6:	1b80      	subs	r0, r0, r6
 80063c8:	42a0      	cmp	r0, r4
 80063ca:	d3ee      	bcc.n	80063aa <SPI_DMAReceiveCplt+0x66>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063cc:	21e0      	movs	r1, #224	@ 0xe0
 80063ce:	682b      	ldr	r3, [r5, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	438a      	bics	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d6:	2282      	movs	r2, #130	@ 0x82
 80063d8:	6869      	ldr	r1, [r5, #4]
 80063da:	0052      	lsls	r2, r2, #1
 80063dc:	4291      	cmp	r1, r2
 80063de:	d05c      	beq.n	800649a <SPI_DMAReceiveCplt+0x156>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063e0:	2180      	movs	r1, #128	@ 0x80
 80063e2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80063e4:	0189      	lsls	r1, r1, #6
 80063e6:	428a      	cmp	r2, r1
 80063e8:	d106      	bne.n	80063f8 <SPI_DMAReceiveCplt+0xb4>
          SPI_RESET_CRC(hspi);
 80063ea:	6819      	ldr	r1, [r3, #0]
 80063ec:	4835      	ldr	r0, [pc, #212]	@ (80064c4 <SPI_DMAReceiveCplt+0x180>)
 80063ee:	4001      	ands	r1, r0
 80063f0:	6019      	str	r1, [r3, #0]
 80063f2:	6819      	ldr	r1, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80063f8:	235d      	movs	r3, #93	@ 0x5d
 80063fa:	2201      	movs	r2, #1
 80063fc:	54ea      	strb	r2, [r5, r3]
        __HAL_UNLOCK(hspi);
 80063fe:	2200      	movs	r2, #0
 8006400:	3b01      	subs	r3, #1
 8006402:	54ea      	strb	r2, [r5, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006404:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8006406:	3220      	adds	r2, #32
 8006408:	4313      	orrs	r3, r2
 800640a:	662b      	str	r3, [r5, #96]	@ 0x60
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800640c:	2320      	movs	r3, #32
 800640e:	662b      	str	r3, [r5, #96]	@ 0x60
    hspi->RxXferCount = 0U;
 8006410:	2346      	movs	r3, #70	@ 0x46
 8006412:	2200      	movs	r2, #0
 8006414:	52ea      	strh	r2, [r5, r3]
    hspi->State = HAL_SPI_STATE_READY;
 8006416:	3317      	adds	r3, #23
 8006418:	3201      	adds	r2, #1
 800641a:	54ea      	strb	r2, [r5, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800641c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800641e:	2b00      	cmp	r3, #0
 8006420:	d129      	bne.n	8006476 <SPI_DMAReceiveCplt+0x132>
  HAL_SPI_RxCpltCallback(hspi);
 8006422:	0028      	movs	r0, r5
 8006424:	f7ff ff68 	bl	80062f8 <HAL_SPI_RxCpltCallback>
}
 8006428:	b002      	add	sp, #8
 800642a:	bc80      	pop	{r7}
 800642c:	46b8      	mov	r8, r7
 800642e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006430:	3205      	adds	r2, #5
 8006432:	32ff      	adds	r2, #255	@ 0xff
 8006434:	4291      	cmp	r1, r2
 8006436:	d022      	beq.n	800647e <SPI_DMAReceiveCplt+0x13a>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006438:	2101      	movs	r1, #1
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	438a      	bics	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006440:	e79f      	b.n	8006382 <SPI_DMAReceiveCplt+0x3e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006442:	2382      	movs	r3, #130	@ 0x82
 8006444:	686a      	ldr	r2, [r5, #4]
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	429a      	cmp	r2, r3
 800644a:	d1e1      	bne.n	8006410 <SPI_DMAReceiveCplt+0xcc>
 800644c:	2280      	movs	r2, #128	@ 0x80
 800644e:	68ab      	ldr	r3, [r5, #8]
 8006450:	0212      	lsls	r2, r2, #8
 8006452:	4293      	cmp	r3, r2
 8006454:	d003      	beq.n	800645e <SPI_DMAReceiveCplt+0x11a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006456:	2280      	movs	r2, #128	@ 0x80
 8006458:	00d2      	lsls	r2, r2, #3
 800645a:	4293      	cmp	r3, r2
 800645c:	d1d8      	bne.n	8006410 <SPI_DMAReceiveCplt+0xcc>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800645e:	4642      	mov	r2, r8
 8006460:	2164      	movs	r1, #100	@ 0x64
 8006462:	0028      	movs	r0, r5
 8006464:	f7ff fa2e 	bl	80058c4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006468:	2800      	cmp	r0, #0
 800646a:	d0d1      	beq.n	8006410 <SPI_DMAReceiveCplt+0xcc>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800646c:	2220      	movs	r2, #32
 800646e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8006470:	4313      	orrs	r3, r2
 8006472:	662b      	str	r3, [r5, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006474:	e7ca      	b.n	800640c <SPI_DMAReceiveCplt+0xc8>
      HAL_SPI_ErrorCallback(hspi);
 8006476:	0028      	movs	r0, r5
 8006478:	f7ff ff50 	bl	800631c <HAL_SPI_ErrorCallback>
      return;
 800647c:	e7d4      	b.n	8006428 <SPI_DMAReceiveCplt+0xe4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800647e:	2103      	movs	r1, #3
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	438a      	bics	r2, r1
 8006484:	605a      	str	r2, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006486:	e77c      	b.n	8006382 <SPI_DMAReceiveCplt+0x3e>
 8006488:	2180      	movs	r1, #128	@ 0x80
 800648a:	0209      	lsls	r1, r1, #8
 800648c:	428a      	cmp	r2, r1
 800648e:	d112      	bne.n	80064b6 <SPI_DMAReceiveCplt+0x172>
    __HAL_SPI_DISABLE(hspi);
 8006490:	2140      	movs	r1, #64	@ 0x40
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	438a      	bics	r2, r1
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	e773      	b.n	8006382 <SPI_DMAReceiveCplt+0x3e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800649a:	2180      	movs	r1, #128	@ 0x80
 800649c:	68aa      	ldr	r2, [r5, #8]
 800649e:	0209      	lsls	r1, r1, #8
 80064a0:	428a      	cmp	r2, r1
 80064a2:	d003      	beq.n	80064ac <SPI_DMAReceiveCplt+0x168>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064a4:	2180      	movs	r1, #128	@ 0x80
 80064a6:	00c9      	lsls	r1, r1, #3
 80064a8:	428a      	cmp	r2, r1
 80064aa:	d199      	bne.n	80063e0 <SPI_DMAReceiveCplt+0x9c>
          __HAL_SPI_DISABLE(hspi);
 80064ac:	2140      	movs	r1, #64	@ 0x40
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	438a      	bics	r2, r1
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	e794      	b.n	80063e0 <SPI_DMAReceiveCplt+0x9c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064b6:	2180      	movs	r1, #128	@ 0x80
 80064b8:	00c9      	lsls	r1, r1, #3
 80064ba:	428a      	cmp	r2, r1
 80064bc:	d0e8      	beq.n	8006490 <SPI_DMAReceiveCplt+0x14c>
 80064be:	e760      	b.n	8006382 <SPI_DMAReceiveCplt+0x3e>
 80064c0:	20000000 	.word	0x20000000
 80064c4:	ffffdfff 	.word	0xffffdfff

080064c8 <SPI_DMATransmitReceiveCplt>:
{
 80064c8:	b570      	push	{r4, r5, r6, lr}
 80064ca:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80064cc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 80064ce:	f7fd fd6d 	bl	8003fac <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80064d2:	682b      	ldr	r3, [r5, #0]
 80064d4:	2520      	movs	r5, #32
 80064d6:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 80064d8:	0001      	movs	r1, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80064da:	421d      	tst	r5, r3
 80064dc:	d11a      	bne.n	8006514 <SPI_DMATransmitReceiveCplt+0x4c>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80064de:	6822      	ldr	r2, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80064e0:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80064e2:	6853      	ldr	r3, [r2, #4]
 80064e4:	43ab      	bics	r3, r5
 80064e6:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80064e8:	f7ff fb84 	bl	8005bf4 <SPI_EndRxTxTransaction.constprop.0>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d002      	beq.n	80064f6 <SPI_DMATransmitReceiveCplt+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064f0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80064f2:	432b      	orrs	r3, r5
 80064f4:	6623      	str	r3, [r4, #96]	@ 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80064f6:	2103      	movs	r1, #3
 80064f8:	6822      	ldr	r2, [r4, #0]
 80064fa:	6853      	ldr	r3, [r2, #4]
 80064fc:	438b      	bics	r3, r1
 80064fe:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8006500:	2300      	movs	r3, #0
    hspi->RxXferCount = 0U;
 8006502:	2246      	movs	r2, #70	@ 0x46
    hspi->TxXferCount = 0U;
 8006504:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8006506:	52a3      	strh	r3, [r4, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8006508:	335d      	adds	r3, #93	@ 0x5d
 800650a:	3a45      	subs	r2, #69	@ 0x45
 800650c:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800650e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006510:	2b00      	cmp	r3, #0
 8006512:	d103      	bne.n	800651c <SPI_DMATransmitReceiveCplt+0x54>
  HAL_SPI_TxRxCpltCallback(hspi);
 8006514:	0020      	movs	r0, r4
 8006516:	f7fd faad 	bl	8003a74 <HAL_SPI_TxRxCpltCallback>
}
 800651a:	bd70      	pop	{r4, r5, r6, pc}
      HAL_SPI_ErrorCallback(hspi);
 800651c:	0020      	movs	r0, r4
 800651e:	f7ff fefd 	bl	800631c <HAL_SPI_ErrorCallback>
      return;
 8006522:	e7fa      	b.n	800651a <SPI_DMATransmitReceiveCplt+0x52>

08006524 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8006524:	2101      	movs	r1, #1
{
 8006526:	b570      	push	{r4, r5, r6, lr}
 8006528:	000e      	movs	r6, r1
  uint32_t itsource = hspi->Instance->CR2;
 800652a:	6802      	ldr	r2, [r0, #0]
{
 800652c:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800652e:	6855      	ldr	r5, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8006530:	6893      	ldr	r3, [r2, #8]
{
 8006532:	b084      	sub	sp, #16
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006534:	0998      	lsrs	r0, r3, #6
 8006536:	4006      	ands	r6, r0
 8006538:	4201      	tst	r1, r0
 800653a:	d116      	bne.n	800656a <HAL_SPI_IRQHandler+0x46>
 800653c:	4219      	tst	r1, r3
 800653e:	d159      	bne.n	80065f4 <HAL_SPI_IRQHandler+0xd0>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006540:	0799      	lsls	r1, r3, #30
 8006542:	d572      	bpl.n	800662a <HAL_SPI_IRQHandler+0x106>
 8006544:	0629      	lsls	r1, r5, #24
 8006546:	d500      	bpl.n	800654a <HAL_SPI_IRQHandler+0x26>
 8006548:	e084      	b.n	8006654 <HAL_SPI_IRQHandler+0x130>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800654a:	0699      	lsls	r1, r3, #26
 800654c:	d414      	bmi.n	8006578 <HAL_SPI_IRQHandler+0x54>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800654e:	05db      	lsls	r3, r3, #23
 8006550:	d570      	bpl.n	8006634 <HAL_SPI_IRQHandler+0x110>
 8006552:	06ab      	lsls	r3, r5, #26
 8006554:	d56e      	bpl.n	8006634 <HAL_SPI_IRQHandler+0x110>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006556:	2108      	movs	r1, #8
 8006558:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800655a:	430b      	orrs	r3, r1
 800655c:	6623      	str	r3, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800655e:	2300      	movs	r3, #0
 8006560:	9303      	str	r3, [sp, #12]
 8006562:	6893      	ldr	r3, [r2, #8]
 8006564:	9303      	str	r3, [sp, #12]
 8006566:	9b03      	ldr	r3, [sp, #12]
 8006568:	e019      	b.n	800659e <HAL_SPI_IRQHandler+0x7a>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800656a:	0799      	lsls	r1, r3, #30
 800656c:	d548      	bpl.n	8006600 <HAL_SPI_IRQHandler+0xdc>
 800656e:	0629      	lsls	r1, r5, #24
 8006570:	d500      	bpl.n	8006574 <HAL_SPI_IRQHandler+0x50>
 8006572:	e06f      	b.n	8006654 <HAL_SPI_IRQHandler+0x130>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006574:	0699      	lsls	r1, r3, #26
 8006576:	d546      	bpl.n	8006606 <HAL_SPI_IRQHandler+0xe2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006578:	06a9      	lsls	r1, r5, #26
 800657a:	d55b      	bpl.n	8006634 <HAL_SPI_IRQHandler+0x110>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800657c:	2e00      	cmp	r6, #0
 800657e:	d15d      	bne.n	800663c <HAL_SPI_IRQHandler+0x118>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006580:	2001      	movs	r0, #1
 8006582:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8006584:	4301      	orrs	r1, r0
 8006586:	6621      	str	r1, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006588:	2100      	movs	r1, #0
 800658a:	9102      	str	r1, [sp, #8]
 800658c:	6891      	ldr	r1, [r2, #8]
 800658e:	303f      	adds	r0, #63	@ 0x3f
 8006590:	9102      	str	r1, [sp, #8]
 8006592:	6811      	ldr	r1, [r2, #0]
 8006594:	4381      	bics	r1, r0
 8006596:	6011      	str	r1, [r2, #0]
 8006598:	9902      	ldr	r1, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800659a:	05db      	lsls	r3, r3, #23
 800659c:	d4db      	bmi.n	8006556 <HAL_SPI_IRQHandler+0x32>
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800659e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d047      	beq.n	8006634 <HAL_SPI_IRQHandler+0x110>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80065a4:	21e0      	movs	r1, #224	@ 0xe0
 80065a6:	6853      	ldr	r3, [r2, #4]
 80065a8:	438b      	bics	r3, r1
 80065aa:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80065ac:	235d      	movs	r3, #93	@ 0x5d
 80065ae:	39df      	subs	r1, #223	@ 0xdf
 80065b0:	54e1      	strb	r1, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80065b2:	3102      	adds	r1, #2
 80065b4:	4229      	tst	r1, r5
 80065b6:	d05d      	beq.n	8006674 <HAL_SPI_IRQHandler+0x150>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80065b8:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80065ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80065bc:	438b      	bics	r3, r1
 80065be:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d009      	beq.n	80065d8 <HAL_SPI_IRQHandler+0xb4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80065c4:	4b2d      	ldr	r3, [pc, #180]	@ (800667c <HAL_SPI_IRQHandler+0x158>)
 80065c6:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80065c8:	f7fe fa68 	bl	8004a9c <HAL_DMA_Abort_IT>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_SPI_IRQHandler+0xb4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80065d0:	2240      	movs	r2, #64	@ 0x40
 80065d2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80065d4:	4313      	orrs	r3, r2
 80065d6:	6623      	str	r3, [r4, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80065d8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80065da:	2800      	cmp	r0, #0
 80065dc:	d02a      	beq.n	8006634 <HAL_SPI_IRQHandler+0x110>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80065de:	4b27      	ldr	r3, [pc, #156]	@ (800667c <HAL_SPI_IRQHandler+0x158>)
 80065e0:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80065e2:	f7fe fa5b 	bl	8004a9c <HAL_DMA_Abort_IT>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d024      	beq.n	8006634 <HAL_SPI_IRQHandler+0x110>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80065ea:	2240      	movs	r2, #64	@ 0x40
 80065ec:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80065ee:	4313      	orrs	r3, r2
 80065f0:	6623      	str	r3, [r4, #96]	@ 0x60
 80065f2:	e01f      	b.n	8006634 <HAL_SPI_IRQHandler+0x110>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065f4:	0669      	lsls	r1, r5, #25
 80065f6:	d5a3      	bpl.n	8006540 <HAL_SPI_IRQHandler+0x1c>
    hspi->RxISR(hspi);
 80065f8:	0020      	movs	r0, r4
 80065fa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80065fc:	4798      	blx	r3
    return;
 80065fe:	e019      	b.n	8006634 <HAL_SPI_IRQHandler+0x110>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006600:	2120      	movs	r1, #32
 8006602:	4219      	tst	r1, r3
 8006604:	d118      	bne.n	8006638 <HAL_SPI_IRQHandler+0x114>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006606:	06a9      	lsls	r1, r5, #26
 8006608:	d514      	bpl.n	8006634 <HAL_SPI_IRQHandler+0x110>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800660a:	215d      	movs	r1, #93	@ 0x5d
 800660c:	5c61      	ldrb	r1, [r4, r1]
 800660e:	2903      	cmp	r1, #3
 8006610:	d018      	beq.n	8006644 <HAL_SPI_IRQHandler+0x120>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006612:	2004      	movs	r0, #4
 8006614:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8006616:	4301      	orrs	r1, r0
 8006618:	6621      	str	r1, [r4, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800661a:	2100      	movs	r1, #0
 800661c:	9100      	str	r1, [sp, #0]
 800661e:	68d1      	ldr	r1, [r2, #12]
 8006620:	9100      	str	r1, [sp, #0]
 8006622:	6891      	ldr	r1, [r2, #8]
 8006624:	9100      	str	r1, [sp, #0]
 8006626:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006628:	e7b7      	b.n	800659a <HAL_SPI_IRQHandler+0x76>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800662a:	2120      	movs	r1, #32
 800662c:	4219      	tst	r1, r3
 800662e:	d08e      	beq.n	800654e <HAL_SPI_IRQHandler+0x2a>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006630:	4229      	tst	r1, r5
 8006632:	d1a5      	bne.n	8006580 <HAL_SPI_IRQHandler+0x5c>
}
 8006634:	b004      	add	sp, #16
 8006636:	bd70      	pop	{r4, r5, r6, pc}
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006638:	4229      	tst	r1, r5
 800663a:	d0fb      	beq.n	8006634 <HAL_SPI_IRQHandler+0x110>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800663c:	215d      	movs	r1, #93	@ 0x5d
 800663e:	5c61      	ldrb	r1, [r4, r1]
 8006640:	2903      	cmp	r1, #3
 8006642:	d10b      	bne.n	800665c <HAL_SPI_IRQHandler+0x138>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006644:	2300      	movs	r3, #0
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	68d3      	ldr	r3, [r2, #12]
 800664a:	9301      	str	r3, [sp, #4]
 800664c:	6893      	ldr	r3, [r2, #8]
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	9b01      	ldr	r3, [sp, #4]
        return;
 8006652:	e7ef      	b.n	8006634 <HAL_SPI_IRQHandler+0x110>
    hspi->TxISR(hspi);
 8006654:	0020      	movs	r0, r4
 8006656:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006658:	4798      	blx	r3
    return;
 800665a:	e7eb      	b.n	8006634 <HAL_SPI_IRQHandler+0x110>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800665c:	2004      	movs	r0, #4
 800665e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8006660:	4301      	orrs	r1, r0
 8006662:	6621      	str	r1, [r4, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006664:	2100      	movs	r1, #0
 8006666:	9100      	str	r1, [sp, #0]
 8006668:	68d1      	ldr	r1, [r2, #12]
 800666a:	9100      	str	r1, [sp, #0]
 800666c:	6891      	ldr	r1, [r2, #8]
 800666e:	9100      	str	r1, [sp, #0]
 8006670:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006672:	e785      	b.n	8006580 <HAL_SPI_IRQHandler+0x5c>
        HAL_SPI_ErrorCallback(hspi);
 8006674:	0020      	movs	r0, r4
 8006676:	f7ff fe51 	bl	800631c <HAL_SPI_ErrorCallback>
 800667a:	e7db      	b.n	8006634 <HAL_SPI_IRQHandler+0x110>
 800667c:	08006681 	.word	0x08006681

08006680 <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	2246      	movs	r2, #70	@ 0x46
{
 8006684:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006686:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  hspi->RxXferCount = 0U;
 8006688:	5283      	strh	r3, [r0, r2]
  hspi->TxXferCount = 0U;
 800668a:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  HAL_SPI_ErrorCallback(hspi);
 800668c:	f7ff fe46 	bl	800631c <HAL_SPI_ErrorCallback>
}
 8006690:	bd10      	pop	{r4, pc}
 8006692:	46c0      	nop			@ (mov r8, r8)

08006694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006694:	b570      	push	{r4, r5, r6, lr}
 8006696:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006698:	d06a      	beq.n	8006770 <HAL_TIM_Base_Init+0xdc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800669a:	233d      	movs	r3, #61	@ 0x3d
 800669c:	5cc3      	ldrb	r3, [r0, r3]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d057      	beq.n	8006754 <HAL_TIM_Base_Init+0xc0>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a4:	233d      	movs	r3, #61	@ 0x3d
 80066a6:	2202      	movs	r2, #2
 80066a8:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066aa:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066ac:	4e37      	ldr	r6, [pc, #220]	@ (800678c <HAL_TIM_Base_Init+0xf8>)
  tmpcr1 = TIMx->CR1;
 80066ae:	681a      	ldr	r2, [r3, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066b0:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b2:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b4:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066b6:	42b3      	cmp	r3, r6
 80066b8:	d016      	beq.n	80066e8 <HAL_TIM_Base_Init+0x54>
 80066ba:	2680      	movs	r6, #128	@ 0x80
 80066bc:	05f6      	lsls	r6, r6, #23
 80066be:	42b3      	cmp	r3, r6
 80066c0:	d012      	beq.n	80066e8 <HAL_TIM_Base_Init+0x54>
 80066c2:	4e33      	ldr	r6, [pc, #204]	@ (8006790 <HAL_TIM_Base_Init+0xfc>)
 80066c4:	42b3      	cmp	r3, r6
 80066c6:	d04a      	beq.n	800675e <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066c8:	4e32      	ldr	r6, [pc, #200]	@ (8006794 <HAL_TIM_Base_Init+0x100>)
 80066ca:	42b3      	cmp	r3, r6
 80066cc:	d04b      	beq.n	8006766 <HAL_TIM_Base_Init+0xd2>
 80066ce:	4e32      	ldr	r6, [pc, #200]	@ (8006798 <HAL_TIM_Base_Init+0x104>)
 80066d0:	42b3      	cmp	r3, r6
 80066d2:	d04f      	beq.n	8006774 <HAL_TIM_Base_Init+0xe0>
 80066d4:	4e31      	ldr	r6, [pc, #196]	@ (800679c <HAL_TIM_Base_Init+0x108>)
 80066d6:	42b3      	cmp	r3, r6
 80066d8:	d04c      	beq.n	8006774 <HAL_TIM_Base_Init+0xe0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066da:	2680      	movs	r6, #128	@ 0x80
 80066dc:	43b2      	bics	r2, r6
 80066de:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80066e0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066e2:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80066e4:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066e6:	e012      	b.n	800670e <HAL_TIM_Base_Init+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066e8:	2670      	movs	r6, #112	@ 0x70
 80066ea:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80066ec:	68a6      	ldr	r6, [r4, #8]
 80066ee:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80066f0:	4e2b      	ldr	r6, [pc, #172]	@ (80067a0 <HAL_TIM_Base_Init+0x10c>)
 80066f2:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066f4:	6926      	ldr	r6, [r4, #16]
 80066f6:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066f8:	2680      	movs	r6, #128	@ 0x80
 80066fa:	43b2      	bics	r2, r6
 80066fc:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80066fe:	601a      	str	r2, [r3, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006700:	4a22      	ldr	r2, [pc, #136]	@ (800678c <HAL_TIM_Base_Init+0xf8>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006702:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006704:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006706:	4293      	cmp	r3, r2
 8006708:	d101      	bne.n	800670e <HAL_TIM_Base_Init+0x7a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800670a:	6962      	ldr	r2, [r4, #20]
 800670c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800670e:	2201      	movs	r2, #1
 8006710:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006712:	6919      	ldr	r1, [r3, #16]
 8006714:	420a      	tst	r2, r1
 8006716:	d002      	beq.n	800671e <HAL_TIM_Base_Init+0x8a>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006718:	6919      	ldr	r1, [r3, #16]
 800671a:	4391      	bics	r1, r2
 800671c:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800671e:	2301      	movs	r3, #1
 8006720:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8006722:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006724:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006726:	3a0a      	subs	r2, #10
 8006728:	54a3      	strb	r3, [r4, r2]
 800672a:	3201      	adds	r2, #1
 800672c:	54a3      	strb	r3, [r4, r2]
 800672e:	3201      	adds	r2, #1
 8006730:	54a3      	strb	r3, [r4, r2]
 8006732:	3201      	adds	r2, #1
 8006734:	54a3      	strb	r3, [r4, r2]
 8006736:	3201      	adds	r2, #1
 8006738:	54a3      	strb	r3, [r4, r2]
 800673a:	3201      	adds	r2, #1
 800673c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800673e:	3201      	adds	r2, #1
 8006740:	54a3      	strb	r3, [r4, r2]
 8006742:	3201      	adds	r2, #1
 8006744:	54a3      	strb	r3, [r4, r2]
 8006746:	3201      	adds	r2, #1
 8006748:	54a3      	strb	r3, [r4, r2]
 800674a:	3201      	adds	r2, #1
 800674c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800674e:	3a0a      	subs	r2, #10
 8006750:	54a3      	strb	r3, [r4, r2]
}
 8006752:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8006754:	333c      	adds	r3, #60	@ 0x3c
 8006756:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8006758:	f7fd fa4c 	bl	8003bf4 <HAL_TIM_Base_MspInit>
 800675c:	e7a2      	b.n	80066a4 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800675e:	2670      	movs	r6, #112	@ 0x70
 8006760:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8006762:	68a6      	ldr	r6, [r4, #8]
 8006764:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8006766:	4e0e      	ldr	r6, [pc, #56]	@ (80067a0 <HAL_TIM_Base_Init+0x10c>)
 8006768:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800676a:	6926      	ldr	r6, [r4, #16]
 800676c:	4332      	orrs	r2, r6
 800676e:	e7b4      	b.n	80066da <HAL_TIM_Base_Init+0x46>
    return HAL_ERROR;
 8006770:	2001      	movs	r0, #1
 8006772:	e7ee      	b.n	8006752 <HAL_TIM_Base_Init+0xbe>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006774:	4e0a      	ldr	r6, [pc, #40]	@ (80067a0 <HAL_TIM_Base_Init+0x10c>)
 8006776:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006778:	6926      	ldr	r6, [r4, #16]
 800677a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800677c:	2680      	movs	r6, #128	@ 0x80
 800677e:	43b2      	bics	r2, r6
 8006780:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8006782:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006784:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006786:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006788:	e7bf      	b.n	800670a <HAL_TIM_Base_Init+0x76>
 800678a:	46c0      	nop			@ (mov r8, r8)
 800678c:	40012c00 	.word	0x40012c00
 8006790:	40000400 	.word	0x40000400
 8006794:	40002000 	.word	0x40002000
 8006798:	40014400 	.word	0x40014400
 800679c:	40014800 	.word	0x40014800
 80067a0:	fffffcff 	.word	0xfffffcff

080067a4 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80067a4:	213d      	movs	r1, #61	@ 0x3d
{
 80067a6:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 80067a8:	5c42      	ldrb	r2, [r0, r1]
{
 80067aa:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 80067ac:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 80067ae:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80067b0:	2a01      	cmp	r2, #1
 80067b2:	d110      	bne.n	80067d6 <HAL_TIM_Base_Start+0x32>
  htim->State = HAL_TIM_STATE_BUSY;
 80067b4:	3201      	adds	r2, #1
 80067b6:	545a      	strb	r2, [r3, r1]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a0e      	ldr	r2, [pc, #56]	@ (80067f4 <HAL_TIM_Base_Start+0x50>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00b      	beq.n	80067d8 <HAL_TIM_Base_Start+0x34>
 80067c0:	2280      	movs	r2, #128	@ 0x80
 80067c2:	05d2      	lsls	r2, r2, #23
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d007      	beq.n	80067d8 <HAL_TIM_Base_Start+0x34>
 80067c8:	4a0b      	ldr	r2, [pc, #44]	@ (80067f8 <HAL_TIM_Base_Start+0x54>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d004      	beq.n	80067d8 <HAL_TIM_Base_Start+0x34>
    __HAL_TIM_ENABLE(htim);
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	4322      	orrs	r2, r4
 80067d2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80067d4:	2000      	movs	r0, #0
}
 80067d6:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	4908      	ldr	r1, [pc, #32]	@ (80067fc <HAL_TIM_Base_Start+0x58>)
 80067dc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067de:	2a06      	cmp	r2, #6
 80067e0:	d0f8      	beq.n	80067d4 <HAL_TIM_Base_Start+0x30>
 80067e2:	3907      	subs	r1, #7
 80067e4:	428a      	cmp	r2, r1
 80067e6:	d0f5      	beq.n	80067d4 <HAL_TIM_Base_Start+0x30>
      __HAL_TIM_ENABLE(htim);
 80067e8:	2101      	movs	r1, #1
 80067ea:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80067ec:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80067ee:	430a      	orrs	r2, r1
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	e7f0      	b.n	80067d6 <HAL_TIM_Base_Start+0x32>
 80067f4:	40012c00 	.word	0x40012c00
 80067f8:	40000400 	.word	0x40000400
 80067fc:	00010007 	.word	0x00010007

08006800 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8006800:	4770      	bx	lr
 8006802:	46c0      	nop			@ (mov r8, r8)

08006804 <HAL_TIM_PWM_Init>:
{
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8006808:	d06a      	beq.n	80068e0 <HAL_TIM_PWM_Init+0xdc>
  if (htim->State == HAL_TIM_STATE_RESET)
 800680a:	233d      	movs	r3, #61	@ 0x3d
 800680c:	5cc3      	ldrb	r3, [r0, r3]
 800680e:	b2da      	uxtb	r2, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d057      	beq.n	80068c4 <HAL_TIM_PWM_Init+0xc0>
  htim->State = HAL_TIM_STATE_BUSY;
 8006814:	233d      	movs	r3, #61	@ 0x3d
 8006816:	2202      	movs	r2, #2
 8006818:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800681a:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800681c:	4e37      	ldr	r6, [pc, #220]	@ (80068fc <HAL_TIM_PWM_Init+0xf8>)
  tmpcr1 = TIMx->CR1;
 800681e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006820:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006822:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8006824:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006826:	42b3      	cmp	r3, r6
 8006828:	d016      	beq.n	8006858 <HAL_TIM_PWM_Init+0x54>
 800682a:	2680      	movs	r6, #128	@ 0x80
 800682c:	05f6      	lsls	r6, r6, #23
 800682e:	42b3      	cmp	r3, r6
 8006830:	d012      	beq.n	8006858 <HAL_TIM_PWM_Init+0x54>
 8006832:	4e33      	ldr	r6, [pc, #204]	@ (8006900 <HAL_TIM_PWM_Init+0xfc>)
 8006834:	42b3      	cmp	r3, r6
 8006836:	d04a      	beq.n	80068ce <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006838:	4e32      	ldr	r6, [pc, #200]	@ (8006904 <HAL_TIM_PWM_Init+0x100>)
 800683a:	42b3      	cmp	r3, r6
 800683c:	d04b      	beq.n	80068d6 <HAL_TIM_PWM_Init+0xd2>
 800683e:	4e32      	ldr	r6, [pc, #200]	@ (8006908 <HAL_TIM_PWM_Init+0x104>)
 8006840:	42b3      	cmp	r3, r6
 8006842:	d04f      	beq.n	80068e4 <HAL_TIM_PWM_Init+0xe0>
 8006844:	4e31      	ldr	r6, [pc, #196]	@ (800690c <HAL_TIM_PWM_Init+0x108>)
 8006846:	42b3      	cmp	r3, r6
 8006848:	d04c      	beq.n	80068e4 <HAL_TIM_PWM_Init+0xe0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800684a:	2680      	movs	r6, #128	@ 0x80
 800684c:	43b2      	bics	r2, r6
 800684e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8006850:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006852:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006854:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006856:	e012      	b.n	800687e <HAL_TIM_PWM_Init+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006858:	2670      	movs	r6, #112	@ 0x70
 800685a:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 800685c:	68a6      	ldr	r6, [r4, #8]
 800685e:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8006860:	4e2b      	ldr	r6, [pc, #172]	@ (8006910 <HAL_TIM_PWM_Init+0x10c>)
 8006862:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006864:	6926      	ldr	r6, [r4, #16]
 8006866:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006868:	2680      	movs	r6, #128	@ 0x80
 800686a:	43b2      	bics	r2, r6
 800686c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800686e:	601a      	str	r2, [r3, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006870:	4a22      	ldr	r2, [pc, #136]	@ (80068fc <HAL_TIM_PWM_Init+0xf8>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006872:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006874:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006876:	4293      	cmp	r3, r2
 8006878:	d101      	bne.n	800687e <HAL_TIM_PWM_Init+0x7a>
    TIMx->RCR = Structure->RepetitionCounter;
 800687a:	6962      	ldr	r2, [r4, #20]
 800687c:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800687e:	2201      	movs	r2, #1
 8006880:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006882:	6919      	ldr	r1, [r3, #16]
 8006884:	420a      	tst	r2, r1
 8006886:	d002      	beq.n	800688e <HAL_TIM_PWM_Init+0x8a>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006888:	6919      	ldr	r1, [r3, #16]
 800688a:	4391      	bics	r1, r2
 800688c:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800688e:	2301      	movs	r3, #1
 8006890:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8006892:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006894:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006896:	3a0a      	subs	r2, #10
 8006898:	54a3      	strb	r3, [r4, r2]
 800689a:	3201      	adds	r2, #1
 800689c:	54a3      	strb	r3, [r4, r2]
 800689e:	3201      	adds	r2, #1
 80068a0:	54a3      	strb	r3, [r4, r2]
 80068a2:	3201      	adds	r2, #1
 80068a4:	54a3      	strb	r3, [r4, r2]
 80068a6:	3201      	adds	r2, #1
 80068a8:	54a3      	strb	r3, [r4, r2]
 80068aa:	3201      	adds	r2, #1
 80068ac:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ae:	3201      	adds	r2, #1
 80068b0:	54a3      	strb	r3, [r4, r2]
 80068b2:	3201      	adds	r2, #1
 80068b4:	54a3      	strb	r3, [r4, r2]
 80068b6:	3201      	adds	r2, #1
 80068b8:	54a3      	strb	r3, [r4, r2]
 80068ba:	3201      	adds	r2, #1
 80068bc:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80068be:	3a0a      	subs	r2, #10
 80068c0:	54a3      	strb	r3, [r4, r2]
}
 80068c2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80068c4:	333c      	adds	r3, #60	@ 0x3c
 80068c6:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80068c8:	f7ff ff9a 	bl	8006800 <HAL_TIM_PWM_MspInit>
 80068cc:	e7a2      	b.n	8006814 <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068ce:	2670      	movs	r6, #112	@ 0x70
 80068d0:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80068d2:	68a6      	ldr	r6, [r4, #8]
 80068d4:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80068d6:	4e0e      	ldr	r6, [pc, #56]	@ (8006910 <HAL_TIM_PWM_Init+0x10c>)
 80068d8:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068da:	6926      	ldr	r6, [r4, #16]
 80068dc:	4332      	orrs	r2, r6
 80068de:	e7b4      	b.n	800684a <HAL_TIM_PWM_Init+0x46>
    return HAL_ERROR;
 80068e0:	2001      	movs	r0, #1
 80068e2:	e7ee      	b.n	80068c2 <HAL_TIM_PWM_Init+0xbe>
    tmpcr1 &= ~TIM_CR1_CKD;
 80068e4:	4e0a      	ldr	r6, [pc, #40]	@ (8006910 <HAL_TIM_PWM_Init+0x10c>)
 80068e6:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068e8:	6926      	ldr	r6, [r4, #16]
 80068ea:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068ec:	2680      	movs	r6, #128	@ 0x80
 80068ee:	43b2      	bics	r2, r6
 80068f0:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80068f2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f4:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80068f6:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068f8:	e7bf      	b.n	800687a <HAL_TIM_PWM_Init+0x76>
 80068fa:	46c0      	nop			@ (mov r8, r8)
 80068fc:	40012c00 	.word	0x40012c00
 8006900:	40000400 	.word	0x40000400
 8006904:	40002000 	.word	0x40002000
 8006908:	40014400 	.word	0x40014400
 800690c:	40014800 	.word	0x40014800
 8006910:	fffffcff 	.word	0xfffffcff

08006914 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8006914:	2910      	cmp	r1, #16
 8006916:	d803      	bhi.n	8006920 <HAL_TIM_PWM_Start+0xc>
 8006918:	4a2c      	ldr	r2, [pc, #176]	@ (80069cc <HAL_TIM_PWM_Start+0xb8>)
 800691a:	008b      	lsls	r3, r1, #2
 800691c:	58d3      	ldr	r3, [r2, r3]
 800691e:	469f      	mov	pc, r3
 8006920:	2343      	movs	r3, #67	@ 0x43
 8006922:	5cc2      	ldrb	r2, [r0, r3]
 8006924:	2a01      	cmp	r2, #1
 8006926:	d12e      	bne.n	8006986 <HAL_TIM_PWM_Start+0x72>
 8006928:	2202      	movs	r2, #2
 800692a:	54c2      	strb	r2, [r0, r3]
 800692c:	221f      	movs	r2, #31
 800692e:	4011      	ands	r1, r2
 8006930:	3a1e      	subs	r2, #30
 8006932:	408a      	lsls	r2, r1
 8006934:	6803      	ldr	r3, [r0, #0]
 8006936:	6a19      	ldr	r1, [r3, #32]
 8006938:	4391      	bics	r1, r2
 800693a:	6219      	str	r1, [r3, #32]
 800693c:	6a19      	ldr	r1, [r3, #32]
 800693e:	430a      	orrs	r2, r1
 8006940:	621a      	str	r2, [r3, #32]
 8006942:	4a23      	ldr	r2, [pc, #140]	@ (80069d0 <HAL_TIM_PWM_Start+0xbc>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d03a      	beq.n	80069be <HAL_TIM_PWM_Start+0xaa>
 8006948:	4a22      	ldr	r2, [pc, #136]	@ (80069d4 <HAL_TIM_PWM_Start+0xc0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d031      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x9e>
 800694e:	4a22      	ldr	r2, [pc, #136]	@ (80069d8 <HAL_TIM_PWM_Start+0xc4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d02e      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x9e>
 8006954:	2280      	movs	r2, #128	@ 0x80
 8006956:	05d2      	lsls	r2, r2, #23
 8006958:	4293      	cmp	r3, r2
 800695a:	d002      	beq.n	8006962 <HAL_TIM_PWM_Start+0x4e>
 800695c:	4a1f      	ldr	r2, [pc, #124]	@ (80069dc <HAL_TIM_PWM_Start+0xc8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d107      	bne.n	8006972 <HAL_TIM_PWM_Start+0x5e>
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	491e      	ldr	r1, [pc, #120]	@ (80069e0 <HAL_TIM_PWM_Start+0xcc>)
 8006966:	400a      	ands	r2, r1
 8006968:	2a06      	cmp	r2, #6
 800696a:	d006      	beq.n	800697a <HAL_TIM_PWM_Start+0x66>
 800696c:	3907      	subs	r1, #7
 800696e:	428a      	cmp	r2, r1
 8006970:	d003      	beq.n	800697a <HAL_TIM_PWM_Start+0x66>
 8006972:	2101      	movs	r1, #1
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	2000      	movs	r0, #0
 800697c:	4770      	bx	lr
 800697e:	233e      	movs	r3, #62	@ 0x3e
 8006980:	5cc2      	ldrb	r2, [r0, r3]
 8006982:	2a01      	cmp	r2, #1
 8006984:	d0d0      	beq.n	8006928 <HAL_TIM_PWM_Start+0x14>
 8006986:	2001      	movs	r0, #1
 8006988:	e7f8      	b.n	800697c <HAL_TIM_PWM_Start+0x68>
 800698a:	233f      	movs	r3, #63	@ 0x3f
 800698c:	5cc2      	ldrb	r2, [r0, r3]
 800698e:	2a01      	cmp	r2, #1
 8006990:	d0ca      	beq.n	8006928 <HAL_TIM_PWM_Start+0x14>
 8006992:	e7f8      	b.n	8006986 <HAL_TIM_PWM_Start+0x72>
 8006994:	2340      	movs	r3, #64	@ 0x40
 8006996:	5cc2      	ldrb	r2, [r0, r3]
 8006998:	2a01      	cmp	r2, #1
 800699a:	d0c5      	beq.n	8006928 <HAL_TIM_PWM_Start+0x14>
 800699c:	e7f3      	b.n	8006986 <HAL_TIM_PWM_Start+0x72>
 800699e:	2341      	movs	r3, #65	@ 0x41
 80069a0:	5cc2      	ldrb	r2, [r0, r3]
 80069a2:	2a01      	cmp	r2, #1
 80069a4:	d0c0      	beq.n	8006928 <HAL_TIM_PWM_Start+0x14>
 80069a6:	e7ee      	b.n	8006986 <HAL_TIM_PWM_Start+0x72>
 80069a8:	2342      	movs	r3, #66	@ 0x42
 80069aa:	5cc2      	ldrb	r2, [r0, r3]
 80069ac:	2a01      	cmp	r2, #1
 80069ae:	d0bb      	beq.n	8006928 <HAL_TIM_PWM_Start+0x14>
 80069b0:	e7e9      	b.n	8006986 <HAL_TIM_PWM_Start+0x72>
 80069b2:	2280      	movs	r2, #128	@ 0x80
 80069b4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80069b6:	0212      	lsls	r2, r2, #8
 80069b8:	430a      	orrs	r2, r1
 80069ba:	645a      	str	r2, [r3, #68]	@ 0x44
 80069bc:	e7d9      	b.n	8006972 <HAL_TIM_PWM_Start+0x5e>
 80069be:	2280      	movs	r2, #128	@ 0x80
 80069c0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80069c2:	0212      	lsls	r2, r2, #8
 80069c4:	430a      	orrs	r2, r1
 80069c6:	645a      	str	r2, [r3, #68]	@ 0x44
 80069c8:	e7cb      	b.n	8006962 <HAL_TIM_PWM_Start+0x4e>
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	0800854c 	.word	0x0800854c
 80069d0:	40012c00 	.word	0x40012c00
 80069d4:	40014400 	.word	0x40014400
 80069d8:	40014800 	.word	0x40014800
 80069dc:	40000400 	.word	0x40000400
 80069e0:	00010007 	.word	0x00010007

080069e4 <HAL_TIM_PWM_Start_IT>:
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
 80069e4:	b510      	push	{r4, lr}
 80069e6:	2910      	cmp	r1, #16
 80069e8:	d803      	bhi.n	80069f2 <HAL_TIM_PWM_Start_IT+0xe>
 80069ea:	4a38      	ldr	r2, [pc, #224]	@ (8006acc <HAL_TIM_PWM_Start_IT+0xe8>)
 80069ec:	008b      	lsls	r3, r1, #2
 80069ee:	58d3      	ldr	r3, [r2, r3]
 80069f0:	469f      	mov	pc, r3
 80069f2:	2343      	movs	r3, #67	@ 0x43
 80069f4:	5cc2      	ldrb	r2, [r0, r3]
 80069f6:	2a01      	cmp	r2, #1
 80069f8:	d101      	bne.n	80069fe <HAL_TIM_PWM_Start_IT+0x1a>
 80069fa:	2202      	movs	r2, #2
 80069fc:	54c2      	strb	r2, [r0, r3]
 80069fe:	2001      	movs	r0, #1
 8006a00:	bd10      	pop	{r4, pc}
 8006a02:	233e      	movs	r3, #62	@ 0x3e
 8006a04:	5cc2      	ldrb	r2, [r0, r3]
 8006a06:	2a01      	cmp	r2, #1
 8006a08:	d1f9      	bne.n	80069fe <HAL_TIM_PWM_Start_IT+0x1a>
 8006a0a:	2402      	movs	r4, #2
 8006a0c:	54c4      	strb	r4, [r0, r3]
 8006a0e:	6803      	ldr	r3, [r0, #0]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	4322      	orrs	r2, r4
 8006a14:	60da      	str	r2, [r3, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	408a      	lsls	r2, r1
 8006a1a:	6a19      	ldr	r1, [r3, #32]
 8006a1c:	4391      	bics	r1, r2
 8006a1e:	6219      	str	r1, [r3, #32]
 8006a20:	6a19      	ldr	r1, [r3, #32]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	621a      	str	r2, [r3, #32]
 8006a26:	4a2a      	ldr	r2, [pc, #168]	@ (8006ad0 <HAL_TIM_PWM_Start_IT+0xec>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d049      	beq.n	8006ac0 <HAL_TIM_PWM_Start_IT+0xdc>
 8006a2c:	4a29      	ldr	r2, [pc, #164]	@ (8006ad4 <HAL_TIM_PWM_Start_IT+0xf0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d040      	beq.n	8006ab4 <HAL_TIM_PWM_Start_IT+0xd0>
 8006a32:	4a29      	ldr	r2, [pc, #164]	@ (8006ad8 <HAL_TIM_PWM_Start_IT+0xf4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d03d      	beq.n	8006ab4 <HAL_TIM_PWM_Start_IT+0xd0>
 8006a38:	2280      	movs	r2, #128	@ 0x80
 8006a3a:	05d2      	lsls	r2, r2, #23
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d002      	beq.n	8006a46 <HAL_TIM_PWM_Start_IT+0x62>
 8006a40:	4a26      	ldr	r2, [pc, #152]	@ (8006adc <HAL_TIM_PWM_Start_IT+0xf8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d107      	bne.n	8006a56 <HAL_TIM_PWM_Start_IT+0x72>
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	4925      	ldr	r1, [pc, #148]	@ (8006ae0 <HAL_TIM_PWM_Start_IT+0xfc>)
 8006a4a:	400a      	ands	r2, r1
 8006a4c:	2a06      	cmp	r2, #6
 8006a4e:	d006      	beq.n	8006a5e <HAL_TIM_PWM_Start_IT+0x7a>
 8006a50:	3907      	subs	r1, #7
 8006a52:	428a      	cmp	r2, r1
 8006a54:	d003      	beq.n	8006a5e <HAL_TIM_PWM_Start_IT+0x7a>
 8006a56:	2101      	movs	r1, #1
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	2000      	movs	r0, #0
 8006a60:	e7ce      	b.n	8006a00 <HAL_TIM_PWM_Start_IT+0x1c>
 8006a62:	233f      	movs	r3, #63	@ 0x3f
 8006a64:	5cc2      	ldrb	r2, [r0, r3]
 8006a66:	2a01      	cmp	r2, #1
 8006a68:	d1c9      	bne.n	80069fe <HAL_TIM_PWM_Start_IT+0x1a>
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	54c2      	strb	r2, [r0, r3]
 8006a6e:	6803      	ldr	r3, [r0, #0]
 8006a70:	2004      	movs	r0, #4
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	4302      	orrs	r2, r0
 8006a76:	60da      	str	r2, [r3, #12]
 8006a78:	e7cd      	b.n	8006a16 <HAL_TIM_PWM_Start_IT+0x32>
 8006a7a:	2340      	movs	r3, #64	@ 0x40
 8006a7c:	5cc2      	ldrb	r2, [r0, r3]
 8006a7e:	2a01      	cmp	r2, #1
 8006a80:	d1bd      	bne.n	80069fe <HAL_TIM_PWM_Start_IT+0x1a>
 8006a82:	2202      	movs	r2, #2
 8006a84:	54c2      	strb	r2, [r0, r3]
 8006a86:	6803      	ldr	r3, [r0, #0]
 8006a88:	2008      	movs	r0, #8
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	4302      	orrs	r2, r0
 8006a8e:	60da      	str	r2, [r3, #12]
 8006a90:	e7c1      	b.n	8006a16 <HAL_TIM_PWM_Start_IT+0x32>
 8006a92:	2341      	movs	r3, #65	@ 0x41
 8006a94:	5cc2      	ldrb	r2, [r0, r3]
 8006a96:	2a01      	cmp	r2, #1
 8006a98:	d1b1      	bne.n	80069fe <HAL_TIM_PWM_Start_IT+0x1a>
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	54c2      	strb	r2, [r0, r3]
 8006a9e:	6803      	ldr	r3, [r0, #0]
 8006aa0:	2010      	movs	r0, #16
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	4302      	orrs	r2, r0
 8006aa6:	60da      	str	r2, [r3, #12]
 8006aa8:	e7b5      	b.n	8006a16 <HAL_TIM_PWM_Start_IT+0x32>
 8006aaa:	2342      	movs	r3, #66	@ 0x42
 8006aac:	5cc2      	ldrb	r2, [r0, r3]
 8006aae:	2a01      	cmp	r2, #1
 8006ab0:	d0a3      	beq.n	80069fa <HAL_TIM_PWM_Start_IT+0x16>
 8006ab2:	e7a4      	b.n	80069fe <HAL_TIM_PWM_Start_IT+0x1a>
 8006ab4:	2280      	movs	r2, #128	@ 0x80
 8006ab6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8006ab8:	0212      	lsls	r2, r2, #8
 8006aba:	430a      	orrs	r2, r1
 8006abc:	645a      	str	r2, [r3, #68]	@ 0x44
 8006abe:	e7ca      	b.n	8006a56 <HAL_TIM_PWM_Start_IT+0x72>
 8006ac0:	2280      	movs	r2, #128	@ 0x80
 8006ac2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8006ac4:	0212      	lsls	r2, r2, #8
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	645a      	str	r2, [r3, #68]	@ 0x44
 8006aca:	e7bc      	b.n	8006a46 <HAL_TIM_PWM_Start_IT+0x62>
 8006acc:	08008590 	.word	0x08008590
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40014400 	.word	0x40014400
 8006ad8:	40014800 	.word	0x40014800
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	00010007 	.word	0x00010007

08006ae4 <HAL_TIM_PWM_ConfigChannel>:
{
 8006ae4:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8006ae6:	203c      	movs	r0, #60	@ 0x3c
{
 8006ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8006aea:	5c1c      	ldrb	r4, [r3, r0]
 8006aec:	2c01      	cmp	r4, #1
 8006aee:	d100      	bne.n	8006af2 <HAL_TIM_PWM_ConfigChannel+0xe>
 8006af0:	e170      	b.n	8006dd4 <HAL_TIM_PWM_ConfigChannel+0x2f0>
 8006af2:	2401      	movs	r4, #1
 8006af4:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 8006af6:	2a14      	cmp	r2, #20
 8006af8:	d803      	bhi.n	8006b02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006afa:	48b7      	ldr	r0, [pc, #732]	@ (8006dd8 <HAL_TIM_PWM_ConfigChannel+0x2f4>)
 8006afc:	0092      	lsls	r2, r2, #2
 8006afe:	5882      	ldr	r2, [r0, r2]
 8006b00:	4697      	mov	pc, r2
 8006b02:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8006b04:	223c      	movs	r2, #60	@ 0x3c
 8006b06:	2100      	movs	r1, #0
 8006b08:	5499      	strb	r1, [r3, r2]
}
 8006b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b0c:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b0e:	4db3      	ldr	r5, [pc, #716]	@ (8006ddc <HAL_TIM_PWM_ConfigChannel+0x2f8>)
  tmpccer = TIMx->CCER;
 8006b10:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b12:	6a10      	ldr	r0, [r2, #32]
 8006b14:	4028      	ands	r0, r5
 8006b16:	6210      	str	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b18:	4db1      	ldr	r5, [pc, #708]	@ (8006de0 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
  tmpcr2 =  TIMx->CR2;
 8006b1a:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8006b1c:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b1e:	4028      	ands	r0, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b20:	680d      	ldr	r5, [r1, #0]
 8006b22:	022d      	lsls	r5, r5, #8
 8006b24:	4305      	orrs	r5, r0

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b26:	48af      	ldr	r0, [pc, #700]	@ (8006de4 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8006b28:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b2a:	6888      	ldr	r0, [r1, #8]
 8006b2c:	0500      	lsls	r0, r0, #20
 8006b2e:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b30:	4cad      	ldr	r4, [pc, #692]	@ (8006de8 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8006b32:	42a2      	cmp	r2, r4
 8006b34:	d100      	bne.n	8006b38 <HAL_TIM_PWM_ConfigChannel+0x54>
 8006b36:	e113      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x27c>
 8006b38:	4cac      	ldr	r4, [pc, #688]	@ (8006dec <HAL_TIM_PWM_ConfigChannel+0x308>)
 8006b3a:	42a2      	cmp	r2, r4
 8006b3c:	d100      	bne.n	8006b40 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8006b3e:	e10f      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x27c>
 8006b40:	4cab      	ldr	r4, [pc, #684]	@ (8006df0 <HAL_TIM_PWM_ConfigChannel+0x30c>)
 8006b42:	42a2      	cmp	r2, r4
 8006b44:	d100      	bne.n	8006b48 <HAL_TIM_PWM_ConfigChannel+0x64>
 8006b46:	e10b      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x27c>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b48:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006b4a:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006b4c:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8006b4e:	65d4      	str	r4, [r2, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b50:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b52:	2080      	movs	r0, #128	@ 0x80
 8006b54:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 8006b56:	0100      	lsls	r0, r0, #4
 8006b58:	4320      	orrs	r0, r4
 8006b5a:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b5c:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8006b5e:	4ca5      	ldr	r4, [pc, #660]	@ (8006df4 <HAL_TIM_PWM_ConfigChannel+0x310>)
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b60:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b62:	4020      	ands	r0, r4
 8006b64:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b66:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8006b68:	0209      	lsls	r1, r1, #8
 8006b6a:	4301      	orrs	r1, r0
 8006b6c:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8006b6e:	2000      	movs	r0, #0
 8006b70:	e7c8      	b.n	8006b04 <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b72:	2501      	movs	r5, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b74:	681a      	ldr	r2, [r3, #0]
  tmpccer = TIMx->CCER;
 8006b76:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b78:	6a14      	ldr	r4, [r2, #32]
 8006b7a:	43ac      	bics	r4, r5
 8006b7c:	6214      	str	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b7e:	4d9e      	ldr	r5, [pc, #632]	@ (8006df8 <HAL_TIM_PWM_ConfigChannel+0x314>)
  tmpcr2 =  TIMx->CR2;
 8006b80:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8006b82:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b84:	402c      	ands	r4, r5
  tmpccmrx |= OC_Config->OCMode;
 8006b86:	680d      	ldr	r5, [r1, #0]
 8006b88:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC1P;
 8006b8a:	2502      	movs	r5, #2
 8006b8c:	43a8      	bics	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8006b8e:	688d      	ldr	r5, [r1, #8]
 8006b90:	4328      	orrs	r0, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b92:	4d95      	ldr	r5, [pc, #596]	@ (8006de8 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8006b94:	42aa      	cmp	r2, r5
 8006b96:	d100      	bne.n	8006b9a <HAL_TIM_PWM_ConfigChannel+0xb6>
 8006b98:	e10f      	b.n	8006dba <HAL_TIM_PWM_ConfigChannel+0x2d6>
 8006b9a:	4d94      	ldr	r5, [pc, #592]	@ (8006dec <HAL_TIM_PWM_ConfigChannel+0x308>)
 8006b9c:	42aa      	cmp	r2, r5
 8006b9e:	d100      	bne.n	8006ba2 <HAL_TIM_PWM_ConfigChannel+0xbe>
 8006ba0:	e10b      	b.n	8006dba <HAL_TIM_PWM_ConfigChannel+0x2d6>
 8006ba2:	4d93      	ldr	r5, [pc, #588]	@ (8006df0 <HAL_TIM_PWM_ConfigChannel+0x30c>)
 8006ba4:	42aa      	cmp	r2, r5
 8006ba6:	d100      	bne.n	8006baa <HAL_TIM_PWM_ConfigChannel+0xc6>
 8006ba8:	e107      	b.n	8006dba <HAL_TIM_PWM_ConfigChannel+0x2d6>
  TIMx->CR2 = tmpcr2;
 8006baa:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006bac:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8006bae:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bb0:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8006bb2:	6354      	str	r4, [r2, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bb4:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8006bb6:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bb8:	6990      	ldr	r0, [r2, #24]
 8006bba:	4320      	orrs	r0, r4
 8006bbc:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bbe:	6990      	ldr	r0, [r2, #24]
 8006bc0:	3c04      	subs	r4, #4
 8006bc2:	43a0      	bics	r0, r4
 8006bc4:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bc6:	6990      	ldr	r0, [r2, #24]
 8006bc8:	4301      	orrs	r1, r0
 8006bca:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006bcc:	2000      	movs	r0, #0
 8006bce:	e799      	b.n	8006b04 <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd0:	2510      	movs	r5, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bd2:	681a      	ldr	r2, [r3, #0]
  tmpccer = TIMx->CCER;
 8006bd4:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd6:	6a14      	ldr	r4, [r2, #32]
 8006bd8:	43ac      	bics	r4, r5
 8006bda:	6214      	str	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bdc:	4d87      	ldr	r5, [pc, #540]	@ (8006dfc <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpcr2 =  TIMx->CR2;
 8006bde:	6857      	ldr	r7, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8006be0:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006be2:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be4:	680d      	ldr	r5, [r1, #0]
 8006be6:	022d      	lsls	r5, r5, #8
 8006be8:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8006bea:	2420      	movs	r4, #32
 8006bec:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bee:	688c      	ldr	r4, [r1, #8]
 8006bf0:	0124      	lsls	r4, r4, #4
 8006bf2:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bf4:	487c      	ldr	r0, [pc, #496]	@ (8006de8 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8006bf6:	4282      	cmp	r2, r0
 8006bf8:	d100      	bne.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x118>
 8006bfa:	e0cf      	b.n	8006d9c <HAL_TIM_PWM_ConfigChannel+0x2b8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bfc:	487b      	ldr	r0, [pc, #492]	@ (8006dec <HAL_TIM_PWM_ConfigChannel+0x308>)
 8006bfe:	4282      	cmp	r2, r0
 8006c00:	d100      	bne.n	8006c04 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006c02:	e0d2      	b.n	8006daa <HAL_TIM_PWM_ConfigChannel+0x2c6>
 8006c04:	487a      	ldr	r0, [pc, #488]	@ (8006df0 <HAL_TIM_PWM_ConfigChannel+0x30c>)
 8006c06:	4282      	cmp	r2, r0
 8006c08:	d100      	bne.n	8006c0c <HAL_TIM_PWM_ConfigChannel+0x128>
 8006c0a:	e0ce      	b.n	8006daa <HAL_TIM_PWM_ConfigChannel+0x2c6>
  TIMx->CCR2 = OC_Config->Pulse;
 8006c0c:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006c0e:	6057      	str	r7, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006c10:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006c12:	6390      	str	r0, [r2, #56]	@ 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c14:	2080      	movs	r0, #128	@ 0x80
  TIMx->CCER = tmpccer;
 8006c16:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c18:	6994      	ldr	r4, [r2, #24]
 8006c1a:	0100      	lsls	r0, r0, #4
 8006c1c:	4320      	orrs	r0, r4
 8006c1e:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c20:	6990      	ldr	r0, [r2, #24]
 8006c22:	4c74      	ldr	r4, [pc, #464]	@ (8006df4 <HAL_TIM_PWM_ConfigChannel+0x310>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c24:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c26:	4020      	ands	r0, r4
 8006c28:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c2a:	6990      	ldr	r0, [r2, #24]
 8006c2c:	0209      	lsls	r1, r1, #8
 8006c2e:	4301      	orrs	r1, r0
 8006c30:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006c32:	2000      	movs	r0, #0
 8006c34:	e766      	b.n	8006b04 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c36:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c38:	4d71      	ldr	r5, [pc, #452]	@ (8006e00 <HAL_TIM_PWM_ConfigChannel+0x31c>)
  tmpccer = TIMx->CCER;
 8006c3a:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c3c:	6a14      	ldr	r4, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8006c3e:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c40:	402c      	ands	r4, r5
 8006c42:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8006c44:	6854      	ldr	r4, [r2, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c46:	4d6c      	ldr	r5, [pc, #432]	@ (8006df8 <HAL_TIM_PWM_ConfigChannel+0x314>)
  tmpcr2 =  TIMx->CR2;
 8006c48:	46a4      	mov	ip, r4
  tmpccmrx = TIMx->CCMR2;
 8006c4a:	69d4      	ldr	r4, [r2, #28]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c4c:	688e      	ldr	r6, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c4e:	402c      	ands	r4, r5
  tmpccmrx |= OC_Config->OCMode;
 8006c50:	4327      	orrs	r7, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8006c52:	4c6c      	ldr	r4, [pc, #432]	@ (8006e04 <HAL_TIM_PWM_ConfigChannel+0x320>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c54:	0236      	lsls	r6, r6, #8
  tmpccer &= ~TIM_CCER_CC3P;
 8006c56:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c58:	4306      	orrs	r6, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c5a:	4863      	ldr	r0, [pc, #396]	@ (8006de8 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8006c5c:	4282      	cmp	r2, r0
 8006c5e:	d100      	bne.n	8006c62 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006c60:	e08a      	b.n	8006d78 <HAL_TIM_PWM_ConfigChannel+0x294>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c62:	4862      	ldr	r0, [pc, #392]	@ (8006dec <HAL_TIM_PWM_ConfigChannel+0x308>)
 8006c64:	4282      	cmp	r2, r0
 8006c66:	d100      	bne.n	8006c6a <HAL_TIM_PWM_ConfigChannel+0x186>
 8006c68:	e08d      	b.n	8006d86 <HAL_TIM_PWM_ConfigChannel+0x2a2>
 8006c6a:	4861      	ldr	r0, [pc, #388]	@ (8006df0 <HAL_TIM_PWM_ConfigChannel+0x30c>)
 8006c6c:	4282      	cmp	r2, r0
 8006c6e:	d100      	bne.n	8006c72 <HAL_TIM_PWM_ConfigChannel+0x18e>
 8006c70:	e089      	b.n	8006d86 <HAL_TIM_PWM_ConfigChannel+0x2a2>
  TIMx->CR2 = tmpcr2;
 8006c72:	4660      	mov	r0, ip
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c74:	2408      	movs	r4, #8
  TIMx->CR2 = tmpcr2;
 8006c76:	6050      	str	r0, [r2, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8006c78:	6848      	ldr	r0, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006c7a:	61d7      	str	r7, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8006c7c:	63d0      	str	r0, [r2, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8006c7e:	6216      	str	r6, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c80:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c82:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c84:	4320      	orrs	r0, r4
 8006c86:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c88:	69d0      	ldr	r0, [r2, #28]
 8006c8a:	3c04      	subs	r4, #4
 8006c8c:	43a0      	bics	r0, r4
 8006c8e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c90:	69d0      	ldr	r0, [r2, #28]
 8006c92:	4301      	orrs	r1, r0
 8006c94:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006c96:	2000      	movs	r0, #0
 8006c98:	e734      	b.n	8006b04 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c9a:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c9c:	4d5a      	ldr	r5, [pc, #360]	@ (8006e08 <HAL_TIM_PWM_ConfigChannel+0x324>)
  tmpccer = TIMx->CCER;
 8006c9e:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ca0:	6a10      	ldr	r0, [r2, #32]
 8006ca2:	4028      	ands	r0, r5
 8006ca4:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ca6:	4d55      	ldr	r5, [pc, #340]	@ (8006dfc <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpcr2 =  TIMx->CR2;
 8006ca8:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8006caa:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cac:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cae:	680d      	ldr	r5, [r1, #0]
 8006cb0:	022d      	lsls	r5, r5, #8
 8006cb2:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC4P;
 8006cb4:	4855      	ldr	r0, [pc, #340]	@ (8006e0c <HAL_TIM_PWM_ConfigChannel+0x328>)
 8006cb6:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cb8:	6888      	ldr	r0, [r1, #8]
 8006cba:	0300      	lsls	r0, r0, #12
 8006cbc:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cbe:	4c4a      	ldr	r4, [pc, #296]	@ (8006de8 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8006cc0:	42a2      	cmp	r2, r4
 8006cc2:	d053      	beq.n	8006d6c <HAL_TIM_PWM_ConfigChannel+0x288>
 8006cc4:	4c49      	ldr	r4, [pc, #292]	@ (8006dec <HAL_TIM_PWM_ConfigChannel+0x308>)
 8006cc6:	42a2      	cmp	r2, r4
 8006cc8:	d050      	beq.n	8006d6c <HAL_TIM_PWM_ConfigChannel+0x288>
 8006cca:	4c49      	ldr	r4, [pc, #292]	@ (8006df0 <HAL_TIM_PWM_ConfigChannel+0x30c>)
 8006ccc:	42a2      	cmp	r2, r4
 8006cce:	d04d      	beq.n	8006d6c <HAL_TIM_PWM_ConfigChannel+0x288>
  TIMx->CCR4 = OC_Config->Pulse;
 8006cd0:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006cd2:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006cd4:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8006cd6:	6414      	str	r4, [r2, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8006cd8:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cda:	2080      	movs	r0, #128	@ 0x80
 8006cdc:	69d4      	ldr	r4, [r2, #28]
 8006cde:	0100      	lsls	r0, r0, #4
 8006ce0:	4320      	orrs	r0, r4
 8006ce2:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ce4:	69d0      	ldr	r0, [r2, #28]
 8006ce6:	4c43      	ldr	r4, [pc, #268]	@ (8006df4 <HAL_TIM_PWM_ConfigChannel+0x310>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ce8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cea:	4020      	ands	r0, r4
 8006cec:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cee:	69d0      	ldr	r0, [r2, #28]
 8006cf0:	0209      	lsls	r1, r1, #8
 8006cf2:	4301      	orrs	r1, r0
 8006cf4:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	e704      	b.n	8006b04 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006cfa:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cfc:	4d44      	ldr	r5, [pc, #272]	@ (8006e10 <HAL_TIM_PWM_ConfigChannel+0x32c>)
  tmpccer = TIMx->CCER;
 8006cfe:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d00:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d02:	4e44      	ldr	r6, [pc, #272]	@ (8006e14 <HAL_TIM_PWM_ConfigChannel+0x330>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d04:	4028      	ands	r0, r5
 8006d06:	6210      	str	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8006d08:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8006d0a:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d0c:	4030      	ands	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 8006d0e:	680e      	ldr	r6, [r1, #0]
 8006d10:	4306      	orrs	r6, r0
  tmpccer &= ~TIM_CCER_CC5P;
 8006d12:	4841      	ldr	r0, [pc, #260]	@ (8006e18 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8006d14:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d16:	6888      	ldr	r0, [r1, #8]
 8006d18:	0400      	lsls	r0, r0, #16
 8006d1a:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d1c:	4c32      	ldr	r4, [pc, #200]	@ (8006de8 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8006d1e:	42a2      	cmp	r2, r4
 8006d20:	d018      	beq.n	8006d54 <HAL_TIM_PWM_ConfigChannel+0x270>
 8006d22:	4c32      	ldr	r4, [pc, #200]	@ (8006dec <HAL_TIM_PWM_ConfigChannel+0x308>)
 8006d24:	42a2      	cmp	r2, r4
 8006d26:	d015      	beq.n	8006d54 <HAL_TIM_PWM_ConfigChannel+0x270>
 8006d28:	4c31      	ldr	r4, [pc, #196]	@ (8006df0 <HAL_TIM_PWM_ConfigChannel+0x30c>)
 8006d2a:	42a2      	cmp	r2, r4
 8006d2c:	d012      	beq.n	8006d54 <HAL_TIM_PWM_ConfigChannel+0x270>
  TIMx->CCR5 = OC_Config->Pulse;
 8006d2e:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006d30:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006d32:	6556      	str	r6, [r2, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8006d34:	6594      	str	r4, [r2, #88]	@ 0x58
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d36:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8006d38:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d3a:	6d50      	ldr	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d3c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d3e:	4320      	orrs	r0, r4
 8006d40:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d42:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8006d44:	3c04      	subs	r4, #4
 8006d46:	43a0      	bics	r0, r4
 8006d48:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d4a:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8006d4c:	4301      	orrs	r1, r0
 8006d4e:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8006d50:	2000      	movs	r0, #0
 8006d52:	e6d7      	b.n	8006b04 <HAL_TIM_PWM_ConfigChannel+0x20>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d54:	4c2e      	ldr	r4, [pc, #184]	@ (8006e10 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8006d56:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d58:	694d      	ldr	r5, [r1, #20]
 8006d5a:	022d      	lsls	r5, r5, #8
 8006d5c:	4325      	orrs	r5, r4
 8006d5e:	e7e6      	b.n	8006d2e <HAL_TIM_PWM_ConfigChannel+0x24a>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d60:	4c2e      	ldr	r4, [pc, #184]	@ (8006e1c <HAL_TIM_PWM_ConfigChannel+0x338>)
 8006d62:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d64:	694e      	ldr	r6, [r1, #20]
 8006d66:	02b6      	lsls	r6, r6, #10
 8006d68:	4326      	orrs	r6, r4
 8006d6a:	e6ed      	b.n	8006b48 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d6c:	4c2c      	ldr	r4, [pc, #176]	@ (8006e20 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8006d6e:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d70:	694e      	ldr	r6, [r1, #20]
 8006d72:	01b6      	lsls	r6, r6, #6
 8006d74:	4326      	orrs	r6, r4
 8006d76:	e7ab      	b.n	8006cd0 <HAL_TIM_PWM_ConfigChannel+0x1ec>
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d78:	482a      	ldr	r0, [pc, #168]	@ (8006e24 <HAL_TIM_PWM_ConfigChannel+0x340>)
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d7a:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d7c:	4030      	ands	r0, r6
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d7e:	0224      	lsls	r4, r4, #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d80:	4e1c      	ldr	r6, [pc, #112]	@ (8006df4 <HAL_TIM_PWM_ConfigChannel+0x310>)
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d82:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d84:	4026      	ands	r6, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d86:	4660      	mov	r0, ip
 8006d88:	4d27      	ldr	r5, [pc, #156]	@ (8006e28 <HAL_TIM_PWM_ConfigChannel+0x344>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d8a:	698c      	ldr	r4, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d8c:	4028      	ands	r0, r5
 8006d8e:	0005      	movs	r5, r0
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d90:	6948      	ldr	r0, [r1, #20]
 8006d92:	4320      	orrs	r0, r4
 8006d94:	0100      	lsls	r0, r0, #4
 8006d96:	4328      	orrs	r0, r5
 8006d98:	4684      	mov	ip, r0
 8006d9a:	e76a      	b.n	8006c72 <HAL_TIM_PWM_ConfigChannel+0x18e>
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d9c:	2080      	movs	r0, #128	@ 0x80
 8006d9e:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006da0:	68c8      	ldr	r0, [r1, #12]
 8006da2:	0100      	lsls	r0, r0, #4
 8006da4:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8006da6:	2040      	movs	r0, #64	@ 0x40
 8006da8:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006daa:	4e20      	ldr	r6, [pc, #128]	@ (8006e2c <HAL_TIM_PWM_ConfigChannel+0x348>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dac:	6948      	ldr	r0, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dae:	403e      	ands	r6, r7
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006db0:	698f      	ldr	r7, [r1, #24]
 8006db2:	4307      	orrs	r7, r0
 8006db4:	00bf      	lsls	r7, r7, #2
 8006db6:	4337      	orrs	r7, r6
 8006db8:	e728      	b.n	8006c0c <HAL_TIM_PWM_ConfigChannel+0x128>
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dba:	2508      	movs	r5, #8
 8006dbc:	43a8      	bics	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8006dbe:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dc0:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8006dc2:	4328      	orrs	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dc4:	2504      	movs	r5, #4
 8006dc6:	43a8      	bics	r0, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dc8:	4d19      	ldr	r5, [pc, #100]	@ (8006e30 <HAL_TIM_PWM_ConfigChannel+0x34c>)
 8006dca:	4035      	ands	r5, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dcc:	694e      	ldr	r6, [r1, #20]
 8006dce:	433e      	orrs	r6, r7
 8006dd0:	432e      	orrs	r6, r5
 8006dd2:	e6ea      	b.n	8006baa <HAL_TIM_PWM_ConfigChannel+0xc6>
  __HAL_LOCK(htim);
 8006dd4:	2002      	movs	r0, #2
 8006dd6:	e698      	b.n	8006b0a <HAL_TIM_PWM_ConfigChannel+0x26>
 8006dd8:	080085d4 	.word	0x080085d4
 8006ddc:	ffefffff 	.word	0xffefffff
 8006de0:	feff8fff 	.word	0xfeff8fff
 8006de4:	ffdfffff 	.word	0xffdfffff
 8006de8:	40012c00 	.word	0x40012c00
 8006dec:	40014400 	.word	0x40014400
 8006df0:	40014800 	.word	0x40014800
 8006df4:	fffffbff 	.word	0xfffffbff
 8006df8:	fffeff8c 	.word	0xfffeff8c
 8006dfc:	feff8cff 	.word	0xfeff8cff
 8006e00:	fffffeff 	.word	0xfffffeff
 8006e04:	fffffdff 	.word	0xfffffdff
 8006e08:	ffffefff 	.word	0xffffefff
 8006e0c:	ffffdfff 	.word	0xffffdfff
 8006e10:	fffeffff 	.word	0xfffeffff
 8006e14:	fffeff8f 	.word	0xfffeff8f
 8006e18:	fffdffff 	.word	0xfffdffff
 8006e1c:	fffbffff 	.word	0xfffbffff
 8006e20:	ffffbfff 	.word	0xffffbfff
 8006e24:	fffff7ff 	.word	0xfffff7ff
 8006e28:	ffffcfff 	.word	0xffffcfff
 8006e2c:	fffff3ff 	.word	0xfffff3ff
 8006e30:	fffffcff 	.word	0xfffffcff

08006e34 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006e34:	223c      	movs	r2, #60	@ 0x3c
{
 8006e36:	b570      	push	{r4, r5, r6, lr}
 8006e38:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8006e3a:	5c80      	ldrb	r0, [r0, r2]
 8006e3c:	2801      	cmp	r0, #1
 8006e3e:	d100      	bne.n	8006e42 <HAL_TIM_ConfigClockSource+0xe>
 8006e40:	e06f      	b.n	8006f22 <HAL_TIM_ConfigClockSource+0xee>
 8006e42:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006e44:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8006e46:	549c      	strb	r4, [r3, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 8006e48:	3201      	adds	r2, #1
 8006e4a:	5498      	strb	r0, [r3, r2]
  tmpsmcr = htim->Instance->SMCR;
 8006e4c:	681a      	ldr	r2, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e4e:	4d4e      	ldr	r5, [pc, #312]	@ (8006f88 <HAL_TIM_ConfigClockSource+0x154>)
  tmpsmcr = htim->Instance->SMCR;
 8006e50:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e52:	4028      	ands	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 8006e54:	6090      	str	r0, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006e56:	6808      	ldr	r0, [r1, #0]
 8006e58:	2860      	cmp	r0, #96	@ 0x60
 8006e5a:	d100      	bne.n	8006e5e <HAL_TIM_ConfigClockSource+0x2a>
 8006e5c:	e07a      	b.n	8006f54 <HAL_TIM_ConfigClockSource+0x120>
 8006e5e:	d80b      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x44>
 8006e60:	2840      	cmp	r0, #64	@ 0x40
 8006e62:	d060      	beq.n	8006f26 <HAL_TIM_ConfigClockSource+0xf2>
 8006e64:	d829      	bhi.n	8006eba <HAL_TIM_ConfigClockSource+0x86>
 8006e66:	2820      	cmp	r0, #32
 8006e68:	d053      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0xde>
 8006e6a:	d850      	bhi.n	8006f0e <HAL_TIM_ConfigClockSource+0xda>
 8006e6c:	2110      	movs	r1, #16
 8006e6e:	0004      	movs	r4, r0
 8006e70:	438c      	bics	r4, r1
 8006e72:	d04e      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0xde>
      status = HAL_ERROR;
 8006e74:	2001      	movs	r0, #1
 8006e76:	e019      	b.n	8006eac <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8006e78:	2480      	movs	r4, #128	@ 0x80
 8006e7a:	0164      	lsls	r4, r4, #5
 8006e7c:	42a0      	cmp	r0, r4
 8006e7e:	d014      	beq.n	8006eaa <HAL_TIM_ConfigClockSource+0x76>
 8006e80:	2480      	movs	r4, #128	@ 0x80
 8006e82:	01a4      	lsls	r4, r4, #6
 8006e84:	42a0      	cmp	r0, r4
 8006e86:	d031      	beq.n	8006eec <HAL_TIM_ConfigClockSource+0xb8>
 8006e88:	2870      	cmp	r0, #112	@ 0x70
 8006e8a:	d1f3      	bne.n	8006e74 <HAL_TIM_ConfigClockSource+0x40>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e8c:	6894      	ldr	r4, [r2, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e8e:	483f      	ldr	r0, [pc, #252]	@ (8006f8c <HAL_TIM_ConfigClockSource+0x158>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e90:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e92:	4004      	ands	r4, r0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e94:	6888      	ldr	r0, [r1, #8]
 8006e96:	68c9      	ldr	r1, [r1, #12]
 8006e98:	4328      	orrs	r0, r5
 8006e9a:	0209      	lsls	r1, r1, #8
 8006e9c:	4301      	orrs	r1, r0
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e9e:	2077      	movs	r0, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ea0:	4321      	orrs	r1, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ea2:	6091      	str	r1, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006ea4:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ea6:	4301      	orrs	r1, r0
      htim->Instance->SMCR = tmpsmcr;
 8006ea8:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006eaa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006eac:	223d      	movs	r2, #61	@ 0x3d
 8006eae:	2101      	movs	r1, #1
 8006eb0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	3a01      	subs	r2, #1
 8006eb6:	5499      	strb	r1, [r3, r2]
}
 8006eb8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8006eba:	2850      	cmp	r0, #80	@ 0x50
 8006ebc:	d1da      	bne.n	8006e74 <HAL_TIM_ConfigClockSource+0x40>
  tmpccer = TIMx->CCER;
 8006ebe:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ec0:	6a16      	ldr	r6, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8006ec2:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ec4:	43a6      	bics	r6, r4
                               sClockSourceConfig->ClockFilter);
 8006ec6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ec8:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eca:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8006ecc:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ece:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ed0:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ed2:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ed4:	240a      	movs	r4, #10
 8006ed6:	43a5      	bics	r5, r4
  tmpccer |= TIM_ICPolarity;
 8006ed8:	4328      	orrs	r0, r5
  TIMx->CCMR1 = tmpccmr1;
 8006eda:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8006edc:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006ede:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ee0:	482b      	ldr	r0, [pc, #172]	@ (8006f90 <HAL_TIM_ConfigClockSource+0x15c>)
 8006ee2:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ee4:	2057      	movs	r0, #87	@ 0x57
 8006ee6:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8006ee8:	6091      	str	r1, [r2, #8]
}
 8006eea:	e7de      	b.n	8006eaa <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr = TIMx->SMCR;
 8006eec:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eee:	4827      	ldr	r0, [pc, #156]	@ (8006f8c <HAL_TIM_ConfigClockSource+0x158>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ef0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef2:	4004      	ands	r4, r0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ef4:	6888      	ldr	r0, [r1, #8]
 8006ef6:	68c9      	ldr	r1, [r1, #12]
 8006ef8:	4328      	orrs	r0, r5
 8006efa:	0209      	lsls	r1, r1, #8
 8006efc:	4301      	orrs	r1, r0
 8006efe:	4321      	orrs	r1, r4
  TIMx->SMCR = tmpsmcr;
 8006f00:	6091      	str	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f02:	2180      	movs	r1, #128	@ 0x80
 8006f04:	6890      	ldr	r0, [r2, #8]
 8006f06:	01c9      	lsls	r1, r1, #7
 8006f08:	4301      	orrs	r1, r0
 8006f0a:	6091      	str	r1, [r2, #8]
      break;
 8006f0c:	e7cd      	b.n	8006eaa <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 8006f0e:	2830      	cmp	r0, #48	@ 0x30
 8006f10:	d1b0      	bne.n	8006e74 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8006f12:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f14:	4c1e      	ldr	r4, [pc, #120]	@ (8006f90 <HAL_TIM_ConfigClockSource+0x15c>)
 8006f16:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f18:	4301      	orrs	r1, r0
 8006f1a:	2007      	movs	r0, #7
 8006f1c:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8006f1e:	6091      	str	r1, [r2, #8]
}
 8006f20:	e7c3      	b.n	8006eaa <HAL_TIM_ConfigClockSource+0x76>
  __HAL_LOCK(htim);
 8006f22:	2002      	movs	r0, #2
 8006f24:	e7c8      	b.n	8006eb8 <HAL_TIM_ConfigClockSource+0x84>
  tmpccer = TIMx->CCER;
 8006f26:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f28:	6a16      	ldr	r6, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8006f2a:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f2c:	43a6      	bics	r6, r4
                               sClockSourceConfig->ClockFilter);
 8006f2e:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f30:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f32:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8006f34:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f36:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f38:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f3a:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f3c:	240a      	movs	r4, #10
 8006f3e:	43a5      	bics	r5, r4
  tmpccer |= TIM_ICPolarity;
 8006f40:	4328      	orrs	r0, r5
  TIMx->CCMR1 = tmpccmr1;
 8006f42:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8006f44:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006f46:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f48:	4811      	ldr	r0, [pc, #68]	@ (8006f90 <HAL_TIM_ConfigClockSource+0x15c>)
 8006f4a:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f4c:	2047      	movs	r0, #71	@ 0x47
 8006f4e:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8006f50:	6091      	str	r1, [r2, #8]
}
 8006f52:	e7aa      	b.n	8006eaa <HAL_TIM_ConfigClockSource+0x76>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f54:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 8006f56:	6a15      	ldr	r5, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8006f58:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006f5a:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f5c:	6a11      	ldr	r1, [r2, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f5e:	0324      	lsls	r4, r4, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f60:	43b1      	bics	r1, r6
 8006f62:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f64:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f66:	4e0b      	ldr	r6, [pc, #44]	@ (8006f94 <HAL_TIM_ConfigClockSource+0x160>)
 8006f68:	4031      	ands	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f6a:	430c      	orrs	r4, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f6c:	21a0      	movs	r1, #160	@ 0xa0
 8006f6e:	438d      	bics	r5, r1
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f70:	0101      	lsls	r1, r0, #4
 8006f72:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1 ;
 8006f74:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 8006f76:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006f78:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f7a:	4805      	ldr	r0, [pc, #20]	@ (8006f90 <HAL_TIM_ConfigClockSource+0x15c>)
 8006f7c:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f7e:	2067      	movs	r0, #103	@ 0x67
 8006f80:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8006f82:	6091      	str	r1, [r2, #8]
}
 8006f84:	e791      	b.n	8006eaa <HAL_TIM_ConfigClockSource+0x76>
 8006f86:	46c0      	nop			@ (mov r8, r8)
 8006f88:	ffce0088 	.word	0xffce0088
 8006f8c:	ffff00ff 	.word	0xffff00ff
 8006f90:	ffcfff8f 	.word	0xffcfff8f
 8006f94:	ffff0fff 	.word	0xffff0fff

08006f98 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8006f98:	4770      	bx	lr
 8006f9a:	46c0      	nop			@ (mov r8, r8)

08006f9c <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006f9c:	4770      	bx	lr
 8006f9e:	46c0      	nop			@ (mov r8, r8)

08006fa0 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8006fa0:	4770      	bx	lr
 8006fa2:	46c0      	nop			@ (mov r8, r8)

08006fa4 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006fa4:	4770      	bx	lr
 8006fa6:	46c0      	nop			@ (mov r8, r8)

08006fa8 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006fa8:	4770      	bx	lr
 8006faa:	46c0      	nop			@ (mov r8, r8)

08006fac <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006fac:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 8006fae:	6803      	ldr	r3, [r0, #0]
{
 8006fb0:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8006fb2:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006fb4:	691d      	ldr	r5, [r3, #16]
{
 8006fb6:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006fb8:	422a      	tst	r2, r5
 8006fba:	d001      	beq.n	8006fc0 <HAL_TIM_IRQHandler+0x14>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006fbc:	4232      	tst	r2, r6
 8006fbe:	d15c      	bne.n	800707a <HAL_TIM_IRQHandler+0xce>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006fc0:	2304      	movs	r3, #4
 8006fc2:	422b      	tst	r3, r5
 8006fc4:	d001      	beq.n	8006fca <HAL_TIM_IRQHandler+0x1e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006fc6:	4233      	tst	r3, r6
 8006fc8:	d143      	bne.n	8007052 <HAL_TIM_IRQHandler+0xa6>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fca:	2308      	movs	r3, #8
 8006fcc:	422b      	tst	r3, r5
 8006fce:	d001      	beq.n	8006fd4 <HAL_TIM_IRQHandler+0x28>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fd0:	4233      	tst	r3, r6
 8006fd2:	d12c      	bne.n	800702e <HAL_TIM_IRQHandler+0x82>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	422b      	tst	r3, r5
 8006fd8:	d001      	beq.n	8006fde <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006fda:	4233      	tst	r3, r6
 8006fdc:	d116      	bne.n	800700c <HAL_TIM_IRQHandler+0x60>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fde:	2301      	movs	r3, #1
 8006fe0:	422b      	tst	r3, r5
 8006fe2:	d001      	beq.n	8006fe8 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fe4:	4233      	tst	r3, r6
 8006fe6:	d167      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x10c>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fe8:	2382      	movs	r3, #130	@ 0x82
 8006fea:	019b      	lsls	r3, r3, #6
 8006fec:	421d      	tst	r5, r3
 8006fee:	d050      	beq.n	8007092 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ff0:	0633      	lsls	r3, r6, #24
 8006ff2:	d469      	bmi.n	80070c8 <HAL_TIM_IRQHandler+0x11c>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ff4:	2340      	movs	r3, #64	@ 0x40
 8006ff6:	422b      	tst	r3, r5
 8006ff8:	d002      	beq.n	8007000 <HAL_TIM_IRQHandler+0x54>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ffa:	4233      	tst	r3, r6
 8006ffc:	d000      	beq.n	8007000 <HAL_TIM_IRQHandler+0x54>
 8006ffe:	e06d      	b.n	80070dc <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007000:	2320      	movs	r3, #32
 8007002:	422b      	tst	r3, r5
 8007004:	d001      	beq.n	800700a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007006:	4233      	tst	r3, r6
 8007008:	d14e      	bne.n	80070a8 <HAL_TIM_IRQHandler+0xfc>
}
 800700a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800700c:	2211      	movs	r2, #17
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	4252      	negs	r2, r2
 8007012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007014:	3219      	adds	r2, #25
 8007016:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007018:	69da      	ldr	r2, [r3, #28]
 800701a:	23c0      	movs	r3, #192	@ 0xc0
 800701c:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800701e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007020:	421a      	tst	r2, r3
 8007022:	d06f      	beq.n	8007104 <HAL_TIM_IRQHandler+0x158>
        HAL_TIM_IC_CaptureCallback(htim);
 8007024:	f7ff ffbc 	bl	8006fa0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007028:	2300      	movs	r3, #0
 800702a:	7723      	strb	r3, [r4, #28]
 800702c:	e7d7      	b.n	8006fde <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800702e:	2209      	movs	r2, #9
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	4252      	negs	r2, r2
 8007034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007036:	320d      	adds	r2, #13
 8007038:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800703a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800703c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800703e:	079b      	lsls	r3, r3, #30
 8007040:	d15d      	bne.n	80070fe <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007042:	f7ff ffab 	bl	8006f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007046:	0020      	movs	r0, r4
 8007048:	f7ff ffac 	bl	8006fa4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704c:	2300      	movs	r3, #0
 800704e:	7723      	strb	r3, [r4, #28]
 8007050:	e7c0      	b.n	8006fd4 <HAL_TIM_IRQHandler+0x28>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007052:	2205      	movs	r2, #5
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	4252      	negs	r2, r2
 8007058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800705a:	3207      	adds	r2, #7
 800705c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800705e:	699a      	ldr	r2, [r3, #24]
 8007060:	23c0      	movs	r3, #192	@ 0xc0
 8007062:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8007064:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007066:	421a      	tst	r2, r3
 8007068:	d146      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800706a:	f7ff ff97 	bl	8006f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800706e:	0020      	movs	r0, r4
 8007070:	f7ff ff98 	bl	8006fa4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007074:	2300      	movs	r3, #0
 8007076:	7723      	strb	r3, [r4, #28]
 8007078:	e7a7      	b.n	8006fca <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800707a:	3a05      	subs	r2, #5
 800707c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800707e:	3204      	adds	r2, #4
 8007080:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	079b      	lsls	r3, r3, #30
 8007086:	d031      	beq.n	80070ec <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_IC_CaptureCallback(htim);
 8007088:	f7ff ff8a 	bl	8006fa0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708c:	2300      	movs	r3, #0
 800708e:	7723      	strb	r3, [r4, #28]
 8007090:	e796      	b.n	8006fc0 <HAL_TIM_IRQHandler+0x14>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007092:	05eb      	lsls	r3, r5, #23
 8007094:	d5ae      	bpl.n	8006ff4 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007096:	0633      	lsls	r3, r6, #24
 8007098:	d5ac      	bpl.n	8006ff4 <HAL_TIM_IRQHandler+0x48>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	4a1c      	ldr	r2, [pc, #112]	@ (8007110 <HAL_TIM_IRQHandler+0x164>)
      HAL_TIMEx_Break2Callback(htim);
 800709e:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80070a2:	f000 f959 	bl	8007358 <HAL_TIMEx_Break2Callback>
 80070a6:	e7a5      	b.n	8006ff4 <HAL_TIM_IRQHandler+0x48>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80070a8:	2221      	movs	r2, #33	@ 0x21
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 80070ae:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80070b0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80070b2:	f000 f94d 	bl	8007350 <HAL_TIMEx_CommutCallback>
}
 80070b6:	e7a8      	b.n	800700a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80070b8:	2202      	movs	r2, #2
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 80070be:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80070c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80070c2:	f7ff ff69 	bl	8006f98 <HAL_TIM_PeriodElapsedCallback>
 80070c6:	e78f      	b.n	8006fe8 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	4a12      	ldr	r2, [pc, #72]	@ (8007114 <HAL_TIM_IRQHandler+0x168>)
      HAL_TIMEx_BreakCallback(htim);
 80070cc:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80070ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80070d0:	f000 f940 	bl	8007354 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80070d4:	05eb      	lsls	r3, r5, #23
 80070d6:	d400      	bmi.n	80070da <HAL_TIM_IRQHandler+0x12e>
 80070d8:	e78c      	b.n	8006ff4 <HAL_TIM_IRQHandler+0x48>
 80070da:	e7de      	b.n	800709a <HAL_TIM_IRQHandler+0xee>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070dc:	2241      	movs	r2, #65	@ 0x41
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 80070e2:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80070e6:	f7ff ff5f 	bl	8006fa8 <HAL_TIM_TriggerCallback>
 80070ea:	e789      	b.n	8007000 <HAL_TIM_IRQHandler+0x54>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ec:	f7ff ff56 	bl	8006f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f0:	0020      	movs	r0, r4
 80070f2:	f7ff ff57 	bl	8006fa4 <HAL_TIM_PWM_PulseFinishedCallback>
 80070f6:	e7c9      	b.n	800708c <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 80070f8:	f7ff ff52 	bl	8006fa0 <HAL_TIM_IC_CaptureCallback>
 80070fc:	e7ba      	b.n	8007074 <HAL_TIM_IRQHandler+0xc8>
        HAL_TIM_IC_CaptureCallback(htim);
 80070fe:	f7ff ff4f 	bl	8006fa0 <HAL_TIM_IC_CaptureCallback>
 8007102:	e7a3      	b.n	800704c <HAL_TIM_IRQHandler+0xa0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007104:	f7ff ff4a 	bl	8006f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007108:	0020      	movs	r0, r4
 800710a:	f7ff ff4b 	bl	8006fa4 <HAL_TIM_PWM_PulseFinishedCallback>
 800710e:	e78b      	b.n	8007028 <HAL_TIM_IRQHandler+0x7c>
 8007110:	fffffeff 	.word	0xfffffeff
 8007114:	ffffdf7f 	.word	0xffffdf7f

08007118 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8007118:	2900      	cmp	r1, #0
 800711a:	d125      	bne.n	8007168 <HAL_TIMEx_PWMN_Start+0x50>
 800711c:	2344      	movs	r3, #68	@ 0x44
 800711e:	5cc2      	ldrb	r2, [r0, r3]
 8007120:	2a01      	cmp	r2, #1
 8007122:	d129      	bne.n	8007178 <HAL_TIMEx_PWMN_Start+0x60>
 8007124:	2202      	movs	r2, #2
 8007126:	54c2      	strb	r2, [r0, r3]
 8007128:	220f      	movs	r2, #15
 800712a:	4011      	ands	r1, r2
 800712c:	3a0b      	subs	r2, #11
 800712e:	408a      	lsls	r2, r1
 8007130:	6803      	ldr	r3, [r0, #0]
 8007132:	6a19      	ldr	r1, [r3, #32]
 8007134:	4391      	bics	r1, r2
 8007136:	6219      	str	r1, [r3, #32]
 8007138:	6a19      	ldr	r1, [r3, #32]
 800713a:	430a      	orrs	r2, r1
 800713c:	621a      	str	r2, [r3, #32]
 800713e:	2280      	movs	r2, #128	@ 0x80
 8007140:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8007142:	0212      	lsls	r2, r2, #8
 8007144:	430a      	orrs	r2, r1
 8007146:	645a      	str	r2, [r3, #68]	@ 0x44
 8007148:	4a16      	ldr	r2, [pc, #88]	@ (80071a4 <HAL_TIMEx_PWMN_Start+0x8c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d016      	beq.n	800717c <HAL_TIMEx_PWMN_Start+0x64>
 800714e:	2280      	movs	r2, #128	@ 0x80
 8007150:	05d2      	lsls	r2, r2, #23
 8007152:	4293      	cmp	r3, r2
 8007154:	d012      	beq.n	800717c <HAL_TIMEx_PWMN_Start+0x64>
 8007156:	4a14      	ldr	r2, [pc, #80]	@ (80071a8 <HAL_TIMEx_PWMN_Start+0x90>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00f      	beq.n	800717c <HAL_TIMEx_PWMN_Start+0x64>
 800715c:	2101      	movs	r1, #1
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	2000      	movs	r0, #0
 8007166:	e008      	b.n	800717a <HAL_TIMEx_PWMN_Start+0x62>
 8007168:	2904      	cmp	r1, #4
 800716a:	d011      	beq.n	8007190 <HAL_TIMEx_PWMN_Start+0x78>
 800716c:	2908      	cmp	r1, #8
 800716e:	d014      	beq.n	800719a <HAL_TIMEx_PWMN_Start+0x82>
 8007170:	2347      	movs	r3, #71	@ 0x47
 8007172:	5cc2      	ldrb	r2, [r0, r3]
 8007174:	2a01      	cmp	r2, #1
 8007176:	d0d5      	beq.n	8007124 <HAL_TIMEx_PWMN_Start+0xc>
 8007178:	2001      	movs	r0, #1
 800717a:	4770      	bx	lr
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	490b      	ldr	r1, [pc, #44]	@ (80071ac <HAL_TIMEx_PWMN_Start+0x94>)
 8007180:	400a      	ands	r2, r1
 8007182:	2a06      	cmp	r2, #6
 8007184:	d0ee      	beq.n	8007164 <HAL_TIMEx_PWMN_Start+0x4c>
 8007186:	3907      	subs	r1, #7
 8007188:	428a      	cmp	r2, r1
 800718a:	d1e7      	bne.n	800715c <HAL_TIMEx_PWMN_Start+0x44>
 800718c:	2000      	movs	r0, #0
 800718e:	e7f4      	b.n	800717a <HAL_TIMEx_PWMN_Start+0x62>
 8007190:	2345      	movs	r3, #69	@ 0x45
 8007192:	5cc2      	ldrb	r2, [r0, r3]
 8007194:	2a01      	cmp	r2, #1
 8007196:	d0c5      	beq.n	8007124 <HAL_TIMEx_PWMN_Start+0xc>
 8007198:	e7ee      	b.n	8007178 <HAL_TIMEx_PWMN_Start+0x60>
 800719a:	2346      	movs	r3, #70	@ 0x46
 800719c:	5cc2      	ldrb	r2, [r0, r3]
 800719e:	2a01      	cmp	r2, #1
 80071a0:	d0c0      	beq.n	8007124 <HAL_TIMEx_PWMN_Start+0xc>
 80071a2:	e7e9      	b.n	8007178 <HAL_TIMEx_PWMN_Start+0x60>
 80071a4:	40012c00 	.word	0x40012c00
 80071a8:	40000400 	.word	0x40000400
 80071ac:	00010007 	.word	0x00010007

080071b0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071b0:	233c      	movs	r3, #60	@ 0x3c
{
 80071b2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80071b4:	5cc3      	ldrb	r3, [r0, r3]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d02a      	beq.n	8007210 <HAL_TIMEx_MasterConfigSynchronization+0x60>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ba:	233d      	movs	r3, #61	@ 0x3d
 80071bc:	2202      	movs	r2, #2
 80071be:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071c0:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071c2:	4e14      	ldr	r6, [pc, #80]	@ (8007214 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 80071c4:	685a      	ldr	r2, [r3, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071c6:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80071c8:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071ca:	42b3      	cmp	r3, r6
 80071cc:	d017      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 &= ~TIM_CR2_MMS;
 80071ce:	2670      	movs	r6, #112	@ 0x70
 80071d0:	43b2      	bics	r2, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071d2:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d6:	2280      	movs	r2, #128	@ 0x80
 80071d8:	05d2      	lsls	r2, r2, #23
 80071da:	4293      	cmp	r3, r2
 80071dc:	d002      	beq.n	80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80071de:	4a0e      	ldr	r2, [pc, #56]	@ (8007218 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d104      	bne.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071e4:	2280      	movs	r2, #128	@ 0x80
 80071e6:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071e8:	688a      	ldr	r2, [r1, #8]
 80071ea:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071ec:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071ee:	233d      	movs	r3, #61	@ 0x3d
 80071f0:	2201      	movs	r2, #1
 80071f2:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80071f4:	2200      	movs	r2, #0
 80071f6:	3b01      	subs	r3, #1
 80071f8:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80071fa:	2000      	movs	r0, #0
}
 80071fc:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071fe:	4e07      	ldr	r6, [pc, #28]	@ (800721c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8007200:	4032      	ands	r2, r6
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007202:	684e      	ldr	r6, [r1, #4]
 8007204:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8007206:	2670      	movs	r6, #112	@ 0x70
 8007208:	43b2      	bics	r2, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800720a:	4315      	orrs	r5, r2
  htim->Instance->CR2 = tmpcr2;
 800720c:	605d      	str	r5, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800720e:	e7e9      	b.n	80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  __HAL_LOCK(htim);
 8007210:	2002      	movs	r0, #2
 8007212:	e7f3      	b.n	80071fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007214:	40012c00 	.word	0x40012c00
 8007218:	40000400 	.word	0x40000400
 800721c:	ff0fffff 	.word	0xff0fffff

08007220 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007220:	233c      	movs	r3, #60	@ 0x3c
{
 8007222:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8007224:	5cc3      	ldrb	r3, [r0, r3]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d03d      	beq.n	80072a6 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800722a:	4a20      	ldr	r2, [pc, #128]	@ (80072ac <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 800722c:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800722e:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007230:	4013      	ands	r3, r2
 8007232:	688a      	ldr	r2, [r1, #8]
 8007234:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007236:	4a1e      	ldr	r2, [pc, #120]	@ (80072b0 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8007238:	4013      	ands	r3, r2
 800723a:	684a      	ldr	r2, [r1, #4]
 800723c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800723e:	4a1d      	ldr	r2, [pc, #116]	@ (80072b4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8007240:	4013      	ands	r3, r2
 8007242:	680a      	ldr	r2, [r1, #0]
 8007244:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007246:	4a1c      	ldr	r2, [pc, #112]	@ (80072b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8007248:	4013      	ands	r3, r2
 800724a:	690a      	ldr	r2, [r1, #16]
 800724c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800724e:	4a1b      	ldr	r2, [pc, #108]	@ (80072bc <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8007250:	4013      	ands	r3, r2
 8007252:	694a      	ldr	r2, [r1, #20]
 8007254:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007256:	4a1a      	ldr	r2, [pc, #104]	@ (80072c0 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8007258:	4013      	ands	r3, r2
 800725a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800725c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800725e:	4a19      	ldr	r2, [pc, #100]	@ (80072c4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007260:	4013      	ands	r3, r2
 8007262:	698a      	ldr	r2, [r1, #24]
 8007264:	0412      	lsls	r2, r2, #16
 8007266:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007268:	4a17      	ldr	r2, [pc, #92]	@ (80072c8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800726a:	4013      	ands	r3, r2
 800726c:	69ca      	ldr	r2, [r1, #28]
 800726e:	4313      	orrs	r3, r2
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007270:	4a16      	ldr	r2, [pc, #88]	@ (80072cc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007272:	4294      	cmp	r4, r2
 8007274:	d005      	beq.n	8007282 <HAL_TIMEx_ConfigBreakDeadTime+0x62>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007276:	6463      	str	r3, [r4, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007278:	2200      	movs	r2, #0
 800727a:	233c      	movs	r3, #60	@ 0x3c
 800727c:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800727e:	2000      	movs	r0, #0
}
 8007280:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007282:	4a13      	ldr	r2, [pc, #76]	@ (80072d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8007284:	4013      	ands	r3, r2
 8007286:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8007288:	0512      	lsls	r2, r2, #20
 800728a:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800728c:	4b11      	ldr	r3, [pc, #68]	@ (80072d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800728e:	401a      	ands	r2, r3
 8007290:	6a0b      	ldr	r3, [r1, #32]
 8007292:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007294:	4b10      	ldr	r3, [pc, #64]	@ (80072d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8007296:	401a      	ands	r2, r3
 8007298:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800729a:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800729c:	4b0f      	ldr	r3, [pc, #60]	@ (80072dc <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 800729e:	401a      	ands	r2, r3
 80072a0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80072a2:	4313      	orrs	r3, r2
 80072a4:	e7e7      	b.n	8007276 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  __HAL_LOCK(htim);
 80072a6:	2002      	movs	r0, #2
 80072a8:	e7ea      	b.n	8007280 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80072aa:	46c0      	nop			@ (mov r8, r8)
 80072ac:	fffffcff 	.word	0xfffffcff
 80072b0:	fffffbff 	.word	0xfffffbff
 80072b4:	fffff7ff 	.word	0xfffff7ff
 80072b8:	ffffefff 	.word	0xffffefff
 80072bc:	ffffdfff 	.word	0xffffdfff
 80072c0:	ffffbfff 	.word	0xffffbfff
 80072c4:	fff0ffff 	.word	0xfff0ffff
 80072c8:	efffffff 	.word	0xefffffff
 80072cc:	40012c00 	.word	0x40012c00
 80072d0:	ff0fffff 	.word	0xff0fffff
 80072d4:	feffffff 	.word	0xfeffffff
 80072d8:	fdffffff 	.word	0xfdffffff
 80072dc:	dfffffff 	.word	0xdfffffff

080072e0 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 80072e0:	0003      	movs	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80072e2:	203c      	movs	r0, #60	@ 0x3c
 80072e4:	5c18      	ldrb	r0, [r3, r0]
{
 80072e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80072e8:	2801      	cmp	r0, #1
 80072ea:	d02e      	beq.n	800734a <HAL_TIMEx_ConfigBreakInput+0x6a>

  switch (sBreakInputConfig->Source)
 80072ec:	6810      	ldr	r0, [r2, #0]
 80072ee:	2801      	cmp	r0, #1
 80072f0:	d019      	beq.n	8007326 <HAL_TIMEx_ConfigBreakInput+0x46>
    default:
    {
      bkin_enable_mask = 0U;
      bkin_polarity_mask = 0U;
      bkin_enable_bitpos = 0U;
      bkin_polarity_bitpos = 0U;
 80072f2:	2600      	movs	r6, #0
      bkin_polarity_mask = 0U;
 80072f4:	2400      	movs	r4, #0
      bkin_enable_mask = 0U;
 80072f6:	2000      	movs	r0, #0
      break;
    }
  }

  switch (BreakInput)
 80072f8:	2901      	cmp	r1, #1
 80072fa:	d019      	beq.n	8007330 <HAL_TIMEx_ConfigBreakInput+0x50>
 80072fc:	2902      	cmp	r1, #2
 80072fe:	d001      	beq.n	8007304 <HAL_TIMEx_ConfigBreakInput+0x24>
 8007300:	2001      	movs	r0, #1
 8007302:	e00c      	b.n	800731e <HAL_TIMEx_ConfigBreakInput+0x3e>
      break;
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8007304:	6855      	ldr	r5, [r2, #4]
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007306:	6892      	ldr	r2, [r2, #8]
      tmporx = htim->Instance->AF2;
 8007308:	6819      	ldr	r1, [r3, #0]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800730a:	40b2      	lsls	r2, r6
      tmporx = htim->Instance->AF2;
 800730c:	6e4f      	ldr	r7, [r1, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800730e:	407d      	eors	r5, r7
 8007310:	4028      	ands	r0, r5
 8007312:	4078      	eors	r0, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007314:	4042      	eors	r2, r0
 8007316:	4014      	ands	r4, r2
 8007318:	4044      	eors	r4, r0

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800731a:	664c      	str	r4, [r1, #100]	@ 0x64
  HAL_StatusTypeDef status = HAL_OK;
 800731c:	2000      	movs	r0, #0
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 800731e:	223c      	movs	r2, #60	@ 0x3c
 8007320:	2100      	movs	r1, #0
 8007322:	5499      	strb	r1, [r3, r2]

  return status;
}
 8007324:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8007326:	2480      	movs	r4, #128	@ 0x80
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8007328:	2609      	movs	r6, #9
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800732a:	00a4      	lsls	r4, r4, #2
  switch (BreakInput)
 800732c:	2901      	cmp	r1, #1
 800732e:	d1e5      	bne.n	80072fc <HAL_TIMEx_ConfigBreakInput+0x1c>
      tmporx = htim->Instance->AF1;
 8007330:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007332:	6892      	ldr	r2, [r2, #8]
      tmporx = htim->Instance->AF1;
 8007334:	681d      	ldr	r5, [r3, #0]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007336:	40b2      	lsls	r2, r6
      tmporx = htim->Instance->AF1;
 8007338:	6e2f      	ldr	r7, [r5, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800733a:	4079      	eors	r1, r7
 800733c:	4001      	ands	r1, r0
 800733e:	4079      	eors	r1, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007340:	404a      	eors	r2, r1
 8007342:	4022      	ands	r2, r4
 8007344:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 8007346:	662a      	str	r2, [r5, #96]	@ 0x60
      break;
 8007348:	e7e8      	b.n	800731c <HAL_TIMEx_ConfigBreakInput+0x3c>
  __HAL_LOCK(htim);
 800734a:	2002      	movs	r0, #2
 800734c:	e7ea      	b.n	8007324 <HAL_TIMEx_ConfigBreakInput+0x44>
 800734e:	46c0      	nop			@ (mov r8, r8)

08007350 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8007350:	4770      	bx	lr
 8007352:	46c0      	nop			@ (mov r8, r8)

08007354 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8007354:	4770      	bx	lr
 8007356:	46c0      	nop			@ (mov r8, r8)

08007358 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8007358:	4770      	bx	lr
 800735a:	46c0      	nop			@ (mov r8, r8)

0800735c <memset>:
 800735c:	0003      	movs	r3, r0
 800735e:	1882      	adds	r2, r0, r2
 8007360:	4293      	cmp	r3, r2
 8007362:	d100      	bne.n	8007366 <memset+0xa>
 8007364:	4770      	bx	lr
 8007366:	7019      	strb	r1, [r3, #0]
 8007368:	3301      	adds	r3, #1
 800736a:	e7f9      	b.n	8007360 <memset+0x4>

0800736c <__libc_init_array>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	2600      	movs	r6, #0
 8007370:	4c0c      	ldr	r4, [pc, #48]	@ (80073a4 <__libc_init_array+0x38>)
 8007372:	4d0d      	ldr	r5, [pc, #52]	@ (80073a8 <__libc_init_array+0x3c>)
 8007374:	1b64      	subs	r4, r4, r5
 8007376:	10a4      	asrs	r4, r4, #2
 8007378:	42a6      	cmp	r6, r4
 800737a:	d109      	bne.n	8007390 <__libc_init_array+0x24>
 800737c:	2600      	movs	r6, #0
 800737e:	f000 f85b 	bl	8007438 <_init>
 8007382:	4c0a      	ldr	r4, [pc, #40]	@ (80073ac <__libc_init_array+0x40>)
 8007384:	4d0a      	ldr	r5, [pc, #40]	@ (80073b0 <__libc_init_array+0x44>)
 8007386:	1b64      	subs	r4, r4, r5
 8007388:	10a4      	asrs	r4, r4, #2
 800738a:	42a6      	cmp	r6, r4
 800738c:	d105      	bne.n	800739a <__libc_init_array+0x2e>
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	00b3      	lsls	r3, r6, #2
 8007392:	58eb      	ldr	r3, [r5, r3]
 8007394:	4798      	blx	r3
 8007396:	3601      	adds	r6, #1
 8007398:	e7ee      	b.n	8007378 <__libc_init_array+0xc>
 800739a:	00b3      	lsls	r3, r6, #2
 800739c:	58eb      	ldr	r3, [r5, r3]
 800739e:	4798      	blx	r3
 80073a0:	3601      	adds	r6, #1
 80073a2:	e7f2      	b.n	800738a <__libc_init_array+0x1e>
 80073a4:	08008628 	.word	0x08008628
 80073a8:	08008628 	.word	0x08008628
 80073ac:	0800862c 	.word	0x0800862c
 80073b0:	08008628 	.word	0x08008628

080073b4 <floorf>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	0045      	lsls	r5, r0, #1
 80073b8:	086e      	lsrs	r6, r5, #1
 80073ba:	0e2d      	lsrs	r5, r5, #24
 80073bc:	3d7f      	subs	r5, #127	@ 0x7f
 80073be:	0007      	movs	r7, r0
 80073c0:	2d16      	cmp	r5, #22
 80073c2:	dc2c      	bgt.n	800741e <floorf+0x6a>
 80073c4:	0004      	movs	r4, r0
 80073c6:	2d00      	cmp	r5, #0
 80073c8:	da15      	bge.n	80073f6 <floorf+0x42>
 80073ca:	4919      	ldr	r1, [pc, #100]	@ (8007430 <floorf+0x7c>)
 80073cc:	f7f8 ff60 	bl	8000290 <__aeabi_fadd>
 80073d0:	2100      	movs	r1, #0
 80073d2:	f7f8 ff49 	bl	8000268 <__aeabi_fcmpgt>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d00b      	beq.n	80073f2 <floorf+0x3e>
 80073da:	2400      	movs	r4, #0
 80073dc:	42a7      	cmp	r7, r4
 80073de:	da08      	bge.n	80073f2 <floorf+0x3e>
 80073e0:	1e73      	subs	r3, r6, #1
 80073e2:	419e      	sbcs	r6, r3
 80073e4:	23fe      	movs	r3, #254	@ 0xfe
 80073e6:	4274      	negs	r4, r6
 80073e8:	059b      	lsls	r3, r3, #22
 80073ea:	401c      	ands	r4, r3
 80073ec:	2380      	movs	r3, #128	@ 0x80
 80073ee:	061b      	lsls	r3, r3, #24
 80073f0:	18e4      	adds	r4, r4, r3
 80073f2:	1c20      	adds	r0, r4, #0
 80073f4:	e01a      	b.n	800742c <floorf+0x78>
 80073f6:	4e0f      	ldr	r6, [pc, #60]	@ (8007434 <floorf+0x80>)
 80073f8:	412e      	asrs	r6, r5
 80073fa:	4206      	tst	r6, r0
 80073fc:	d016      	beq.n	800742c <floorf+0x78>
 80073fe:	490c      	ldr	r1, [pc, #48]	@ (8007430 <floorf+0x7c>)
 8007400:	f7f8 ff46 	bl	8000290 <__aeabi_fadd>
 8007404:	2100      	movs	r1, #0
 8007406:	f7f8 ff2f 	bl	8000268 <__aeabi_fcmpgt>
 800740a:	2800      	cmp	r0, #0
 800740c:	d0f1      	beq.n	80073f2 <floorf+0x3e>
 800740e:	2f00      	cmp	r7, #0
 8007410:	da03      	bge.n	800741a <floorf+0x66>
 8007412:	2380      	movs	r3, #128	@ 0x80
 8007414:	041b      	lsls	r3, r3, #16
 8007416:	412b      	asrs	r3, r5
 8007418:	18fc      	adds	r4, r7, r3
 800741a:	43b4      	bics	r4, r6
 800741c:	e7e9      	b.n	80073f2 <floorf+0x3e>
 800741e:	23ff      	movs	r3, #255	@ 0xff
 8007420:	05db      	lsls	r3, r3, #23
 8007422:	429e      	cmp	r6, r3
 8007424:	d302      	bcc.n	800742c <floorf+0x78>
 8007426:	1c01      	adds	r1, r0, #0
 8007428:	f7f8 ff32 	bl	8000290 <__aeabi_fadd>
 800742c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800742e:	46c0      	nop			@ (mov r8, r8)
 8007430:	7149f2ca 	.word	0x7149f2ca
 8007434:	007fffff 	.word	0x007fffff

08007438 <_init>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	46c0      	nop			@ (mov r8, r8)
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr

08007444 <_fini>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	46c0      	nop			@ (mov r8, r8)
 8007448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744a:	bc08      	pop	{r3}
 800744c:	469e      	mov	lr, r3
 800744e:	4770      	bx	lr
