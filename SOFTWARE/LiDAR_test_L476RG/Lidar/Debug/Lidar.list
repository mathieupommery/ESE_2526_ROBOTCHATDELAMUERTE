
Lidar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c680  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800c810  0800c810  0000d810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc7c  0800cc7c  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cc7c  0800cc7c  0000dc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc84  0800cc84  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc84  0800cc84  0000dc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc88  0800cc88  0000dc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800cc8c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003dd4  200001d8  0800ce64  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003fac  0800ce64  0000efac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ecc0  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004495  00000000  00000000  0002cec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  00031360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001346  00000000  00000000  00032c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b397  00000000  00000000  00033fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e817  00000000  00000000  0005f33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffab3  00000000  00000000  0007db54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017d607  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000789c  00000000  00000000  0017d64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00184ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c7f8 	.word	0x0800c7f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c7f8 	.word	0x0800c7f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <MX_DMA_Init+0x38>)
 8000fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000fec <MX_DMA_Init+0x38>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <MX_DMA_Init+0x38>)
 8000fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2105      	movs	r1, #5
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f001 fa3e 	bl	8002458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000fdc:	200f      	movs	r0, #15
 8000fde:	f001 fa57 	bl	8002490 <HAL_NVIC_EnableIRQ>

}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000

08000ff0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of main */
  mainHandle = osThreadNew(StartMain, NULL, &main_attributes);
 8000ff4:	4a08      	ldr	r2, [pc, #32]	@ (8001018 <MX_FREERTOS_Init+0x28>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4808      	ldr	r0, [pc, #32]	@ (800101c <MX_FREERTOS_Init+0x2c>)
 8000ffa:	f006 f849 	bl	8007090 <osThreadNew>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <MX_FREERTOS_Init+0x30>)
 8001002:	6013      	str	r3, [r2, #0]

  /* creation of ParseLiDAR */
  ParseLiDARHandle = osThreadNew(StartParseLiDAR, NULL, &ParseLiDAR_attributes);
 8001004:	4a07      	ldr	r2, [pc, #28]	@ (8001024 <MX_FREERTOS_Init+0x34>)
 8001006:	2100      	movs	r1, #0
 8001008:	4807      	ldr	r0, [pc, #28]	@ (8001028 <MX_FREERTOS_Init+0x38>)
 800100a:	f006 f841 	bl	8007090 <osThreadNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a06      	ldr	r2, [pc, #24]	@ (800102c <MX_FREERTOS_Init+0x3c>)
 8001012:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	0800c858 	.word	0x0800c858
 800101c:	08001031 	.word	0x08001031
 8001020:	200001f4 	.word	0x200001f4
 8001024:	0800c87c 	.word	0x0800c87c
 8001028:	08001051 	.word	0x08001051
 800102c:	200001f8 	.word	0x200001f8

08001030 <StartMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMain */
void StartMain(void *argument)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	//TickType_t xLastWakeTime = xTaskGetTickCount();

  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001038:	2120      	movs	r1, #32
 800103a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103e:	f001 fe6d 	bl	8002d1c <HAL_GPIO_TogglePin>
    osDelay(500);
 8001042:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001046:	f006 f8b5 	bl	80071b4 <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800104a:	bf00      	nop
 800104c:	e7f4      	b.n	8001038 <StartMain+0x8>
	...

08001050 <StartParseLiDAR>:
* @retval None
*/

/* USER CODE END Header_StartParseLiDAR */
void StartParseLiDAR(void *argument)
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParseLiDAR */

  /* Infinite loop */
  for(;;)
  {
	  if (isReading && (HalfFlag || CompleteFlag)){
 8001058:	4b2b      	ldr	r3, [pc, #172]	@ (8001108 <StartParseLiDAR+0xb8>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0fa      	beq.n	8001058 <StartParseLiDAR+0x8>
 8001062:	4b2a      	ldr	r3, [pc, #168]	@ (800110c <StartParseLiDAR+0xbc>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	f040 835e 	bne.w	800172a <StartParseLiDAR+0x6da>
 800106e:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <StartParseLiDAR+0xc0>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0ef      	beq.n	8001058 <StartParseLiDAR+0x8>
		  while (read_index != (start_to_read + UART_RX_BUFFER_SIZE)){
 8001078:	e357      	b.n	800172a <StartParseLiDAR+0x6da>
			  PH1 = (uart_rx_buffer[read_index] == 0xAA)
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <StartParseLiDAR+0xc4>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	b29b      	uxth	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	4b25      	ldr	r3, [pc, #148]	@ (8001118 <StartParseLiDAR+0xc8>)
 8001084:	5c9b      	ldrb	r3, [r3, r2]
					  ? 1 : 0;
 8001086:	2baa      	cmp	r3, #170	@ 0xaa
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	461a      	mov	r2, r3
			  PH1 = (uart_rx_buffer[read_index] == 0xAA)
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <StartParseLiDAR+0xcc>)
 8001094:	701a      	strb	r2, [r3, #0]
			  PH2 = (PH1 && uart_rx_buffer[(read_index + 1) % UART_RX_BUFFER_SIZE] == 0x55)
 8001096:	4b21      	ldr	r3, [pc, #132]	@ (800111c <StartParseLiDAR+0xcc>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b2db      	uxtb	r3, r3
					  ? 1 : 0;
 800109c:	2b00      	cmp	r3, #0
 800109e:	d010      	beq.n	80010c2 <StartParseLiDAR+0x72>
			  PH2 = (PH1 && uart_rx_buffer[(read_index + 1) % UART_RX_BUFFER_SIZE] == 0x55)
 80010a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001114 <StartParseLiDAR+0xc4>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	3301      	adds	r3, #1
 80010a8:	425a      	negs	r2, r3
 80010aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010b2:	bf58      	it	pl
 80010b4:	4253      	negpl	r3, r2
 80010b6:	4a18      	ldr	r2, [pc, #96]	@ (8001118 <StartParseLiDAR+0xc8>)
 80010b8:	5cd3      	ldrb	r3, [r2, r3]
					  ? 1 : 0;
 80010ba:	2b55      	cmp	r3, #85	@ 0x55
 80010bc:	d101      	bne.n	80010c2 <StartParseLiDAR+0x72>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <StartParseLiDAR+0x74>
 80010c2:	2300      	movs	r3, #0
			  PH2 = (PH1 && uart_rx_buffer[(read_index + 1) % UART_RX_BUFFER_SIZE] == 0x55)
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <StartParseLiDAR+0xd0>)
 80010c8:	701a      	strb	r2, [r3, #0]
			  if (PH1){
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <StartParseLiDAR+0xcc>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d02f      	beq.n	8001134 <StartParseLiDAR+0xe4>
				  if (PH2 && (uart_rx_buffer[(read_index + 2) % UART_RX_BUFFER_SIZE] & 0x01) == 0){
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <StartParseLiDAR+0xd0>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d024      	beq.n	8001128 <StartParseLiDAR+0xd8>
 80010de:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <StartParseLiDAR+0xc4>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	3302      	adds	r3, #2
 80010e6:	425a      	negs	r2, r3
 80010e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010f0:	bf58      	it	pl
 80010f2:	4253      	negpl	r3, r2
 80010f4:	4a08      	ldr	r2, [pc, #32]	@ (8001118 <StartParseLiDAR+0xc8>)
 80010f6:	5cd3      	ldrb	r3, [r2, r3]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d113      	bne.n	8001128 <StartParseLiDAR+0xd8>
					  isPointcloud = 1;
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <StartParseLiDAR+0xd4>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e015      	b.n	8001134 <StartParseLiDAR+0xe4>
 8001108:	2000074c 	.word	0x2000074c
 800110c:	2000074e 	.word	0x2000074e
 8001110:	2000074f 	.word	0x2000074f
 8001114:	20000760 	.word	0x20000760
 8001118:	200001fc 	.word	0x200001fc
 800111c:	20000750 	.word	0x20000750
 8001120:	20000751 	.word	0x20000751
 8001124:	20000752 	.word	0x20000752
				  }
				  else{
					  PH1 = 0;
 8001128:	4b7c      	ldr	r3, [pc, #496]	@ (800131c <StartParseLiDAR+0x2cc>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
					  PH2 = 0;
 800112e:	4b7c      	ldr	r3, [pc, #496]	@ (8001320 <StartParseLiDAR+0x2d0>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  if (isPointcloud && (start_to_read + UART_RX_BUFFER_SIZE - read_index) > 10){
 8001134:	4b7b      	ldr	r3, [pc, #492]	@ (8001324 <StartParseLiDAR+0x2d4>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 81ce 	beq.w	80014dc <StartParseLiDAR+0x48c>
 8001140:	4b79      	ldr	r3, [pc, #484]	@ (8001328 <StartParseLiDAR+0x2d8>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800114a:	4a78      	ldr	r2, [pc, #480]	@ (800132c <StartParseLiDAR+0x2dc>)
 800114c:	8812      	ldrh	r2, [r2, #0]
 800114e:	b292      	uxth	r2, r2
 8001150:	1a9b      	subs	r3, r3, r2
 8001152:	2b0a      	cmp	r3, #10
 8001154:	f340 81c2 	ble.w	80014dc <StartParseLiDAR+0x48c>
				  CT_LSN = ((uart_rx_buffer[(read_index + 3) % UART_RX_BUFFER_SIZE]) << 8) |
 8001158:	4b74      	ldr	r3, [pc, #464]	@ (800132c <StartParseLiDAR+0x2dc>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	b29b      	uxth	r3, r3
 800115e:	3303      	adds	r3, #3
 8001160:	425a      	negs	r2, r3
 8001162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001166:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800116a:	bf58      	it	pl
 800116c:	4253      	negpl	r3, r2
 800116e:	4a70      	ldr	r2, [pc, #448]	@ (8001330 <StartParseLiDAR+0x2e0>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	b21b      	sxth	r3, r3
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b21a      	sxth	r2, r3
						  (uart_rx_buffer[(read_index + 2) % UART_RX_BUFFER_SIZE]);
 8001178:	4b6c      	ldr	r3, [pc, #432]	@ (800132c <StartParseLiDAR+0x2dc>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	3302      	adds	r3, #2
 8001180:	4259      	negs	r1, r3
 8001182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001186:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800118a:	bf58      	it	pl
 800118c:	424b      	negpl	r3, r1
 800118e:	4968      	ldr	r1, [pc, #416]	@ (8001330 <StartParseLiDAR+0x2e0>)
 8001190:	5ccb      	ldrb	r3, [r1, r3]
 8001192:	b21b      	sxth	r3, r3
				  CT_LSN = ((uart_rx_buffer[(read_index + 3) % UART_RX_BUFFER_SIZE]) << 8) |
 8001194:	4313      	orrs	r3, r2
 8001196:	b21b      	sxth	r3, r3
 8001198:	b29a      	uxth	r2, r3
 800119a:	4b66      	ldr	r3, [pc, #408]	@ (8001334 <StartParseLiDAR+0x2e4>)
 800119c:	801a      	strh	r2, [r3, #0]

				  data_size = uart_rx_buffer[read_index + 3];
 800119e:	4b63      	ldr	r3, [pc, #396]	@ (800132c <StartParseLiDAR+0x2dc>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	3303      	adds	r3, #3
 80011a6:	4a62      	ldr	r2, [pc, #392]	@ (8001330 <StartParseLiDAR+0x2e0>)
 80011a8:	5cd2      	ldrb	r2, [r2, r3]
 80011aa:	4b63      	ldr	r3, [pc, #396]	@ (8001338 <StartParseLiDAR+0x2e8>)
 80011ac:	701a      	strb	r2, [r3, #0]

				  FSA = ((uart_rx_buffer[(read_index + 5) % UART_RX_BUFFER_SIZE]) << 8) |
 80011ae:	4b5f      	ldr	r3, [pc, #380]	@ (800132c <StartParseLiDAR+0x2dc>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	3305      	adds	r3, #5
 80011b6:	425a      	negs	r2, r3
 80011b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011c0:	bf58      	it	pl
 80011c2:	4253      	negpl	r3, r2
 80011c4:	4a5a      	ldr	r2, [pc, #360]	@ (8001330 <StartParseLiDAR+0x2e0>)
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
								  (uart_rx_buffer[(read_index + 4) % UART_RX_BUFFER_SIZE]);
 80011ce:	4b57      	ldr	r3, [pc, #348]	@ (800132c <StartParseLiDAR+0x2dc>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	3304      	adds	r3, #4
 80011d6:	4259      	negs	r1, r3
 80011d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011dc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80011e0:	bf58      	it	pl
 80011e2:	424b      	negpl	r3, r1
 80011e4:	4952      	ldr	r1, [pc, #328]	@ (8001330 <StartParseLiDAR+0x2e0>)
 80011e6:	5ccb      	ldrb	r3, [r1, r3]
 80011e8:	b21b      	sxth	r3, r3
				  FSA = ((uart_rx_buffer[(read_index + 5) % UART_RX_BUFFER_SIZE]) << 8) |
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b52      	ldr	r3, [pc, #328]	@ (800133c <StartParseLiDAR+0x2ec>)
 80011f2:	801a      	strh	r2, [r3, #0]

				  LSA = ((uart_rx_buffer[(read_index + 7) % UART_RX_BUFFER_SIZE]) <<8) |
 80011f4:	4b4d      	ldr	r3, [pc, #308]	@ (800132c <StartParseLiDAR+0x2dc>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	3307      	adds	r3, #7
 80011fc:	425a      	negs	r2, r3
 80011fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001202:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001206:	bf58      	it	pl
 8001208:	4253      	negpl	r3, r2
 800120a:	4a49      	ldr	r2, [pc, #292]	@ (8001330 <StartParseLiDAR+0x2e0>)
 800120c:	5cd3      	ldrb	r3, [r2, r3]
 800120e:	b21b      	sxth	r3, r3
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b21a      	sxth	r2, r3
								  (uart_rx_buffer[(read_index + 6) % UART_RX_BUFFER_SIZE]);
 8001214:	4b45      	ldr	r3, [pc, #276]	@ (800132c <StartParseLiDAR+0x2dc>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	3306      	adds	r3, #6
 800121c:	4259      	negs	r1, r3
 800121e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001222:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001226:	bf58      	it	pl
 8001228:	424b      	negpl	r3, r1
 800122a:	4941      	ldr	r1, [pc, #260]	@ (8001330 <StartParseLiDAR+0x2e0>)
 800122c:	5ccb      	ldrb	r3, [r1, r3]
 800122e:	b21b      	sxth	r3, r3
				  LSA = ((uart_rx_buffer[(read_index + 7) % UART_RX_BUFFER_SIZE]) <<8) |
 8001230:	4313      	orrs	r3, r2
 8001232:	b21b      	sxth	r3, r3
 8001234:	b29a      	uxth	r2, r3
 8001236:	4b42      	ldr	r3, [pc, #264]	@ (8001340 <StartParseLiDAR+0x2f0>)
 8001238:	801a      	strh	r2, [r3, #0]

				  checksum = (uint16_t)((uart_rx_buffer[(read_index + 8) % UART_RX_BUFFER_SIZE]) <<8) |
 800123a:	4b3c      	ldr	r3, [pc, #240]	@ (800132c <StartParseLiDAR+0x2dc>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	3308      	adds	r3, #8
 8001242:	425a      	negs	r2, r3
 8001244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800124c:	bf58      	it	pl
 800124e:	4253      	negpl	r3, r2
 8001250:	4a37      	ldr	r2, [pc, #220]	@ (8001330 <StartParseLiDAR+0x2e0>)
 8001252:	5cd3      	ldrb	r3, [r2, r3]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b29a      	uxth	r2, r3
								  (uart_rx_buffer[(read_index + 9) % UART_RX_BUFFER_SIZE]);
 8001258:	4b34      	ldr	r3, [pc, #208]	@ (800132c <StartParseLiDAR+0x2dc>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	3309      	adds	r3, #9
 8001260:	4259      	negs	r1, r3
 8001262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001266:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800126a:	bf58      	it	pl
 800126c:	424b      	negpl	r3, r1
 800126e:	4930      	ldr	r1, [pc, #192]	@ (8001330 <StartParseLiDAR+0x2e0>)
 8001270:	5ccb      	ldrb	r3, [r1, r3]
				  checksum = (uint16_t)((uart_rx_buffer[(read_index + 8) % UART_RX_BUFFER_SIZE]) <<8) |
 8001272:	4313      	orrs	r3, r2
 8001274:	b29a      	uxth	r2, r3
 8001276:	4b33      	ldr	r3, [pc, #204]	@ (8001344 <StartParseLiDAR+0x2f4>)
 8001278:	801a      	strh	r2, [r3, #0]
				  read_index += 10;
 800127a:	4b2c      	ldr	r3, [pc, #176]	@ (800132c <StartParseLiDAR+0x2dc>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	330a      	adds	r3, #10
 8001282:	b29a      	uxth	r2, r3
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <StartParseLiDAR+0x2dc>)
 8001286:	801a      	strh	r2, [r3, #0]
				  if ((start_to_read + UART_RX_BUFFER_SIZE - read_index) >= data_size){
 8001288:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <StartParseLiDAR+0x2d8>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001292:	4a26      	ldr	r2, [pc, #152]	@ (800132c <StartParseLiDAR+0x2dc>)
 8001294:	8812      	ldrh	r2, [r2, #0]
 8001296:	b292      	uxth	r2, r2
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	4a27      	ldr	r2, [pc, #156]	@ (8001338 <StartParseLiDAR+0x2e8>)
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	4293      	cmp	r3, r2
 80012a2:	f2c0 8114 	blt.w	80014ce <StartParseLiDAR+0x47e>
//					  printf("%02x\r\n", ((CT_LSN & 0x00FF) << 8) | (CT_LSN & 0xFF00) >> 8);
//					  printf("%02x\r\n", ((FSA & 0x00FF )<< 8) | (FSA & 0xFF00) >> 8);
//					  printf("%02x\r\n", ((LSA & 0x00FF) << 8) | (LSA & 0xFF00) >> 8);
					  XOR = 0xAA55 ^
							  (((CT_LSN & 0x00FF) << 8) | ((CT_LSN & 0xFF00) >> 8)) ^
 80012a6:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <StartParseLiDAR+0x2e4>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <StartParseLiDAR+0x2e4>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	121b      	asrs	r3, r3, #8
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	b21b      	sxth	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b21a      	sxth	r2, r3
					  XOR = 0xAA55 ^
 80012c4:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <StartParseLiDAR+0x2f8>)
 80012c6:	4053      	eors	r3, r2
 80012c8:	b21a      	sxth	r2, r3
							  (((FSA & 0x00FF )<< 8) | ((FSA & 0xFF00) >> 8)) ^
 80012ca:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <StartParseLiDAR+0x2ec>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b219      	sxth	r1, r3
 80012d6:	4b19      	ldr	r3, [pc, #100]	@ (800133c <StartParseLiDAR+0x2ec>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	121b      	asrs	r3, r3, #8
 80012de:	b21b      	sxth	r3, r3
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	430b      	orrs	r3, r1
 80012e6:	b21b      	sxth	r3, r3
							  (((CT_LSN & 0x00FF) << 8) | ((CT_LSN & 0xFF00) >> 8)) ^
 80012e8:	4053      	eors	r3, r2
 80012ea:	b21a      	sxth	r2, r3
							  (((LSA & 0x00FF) << 8) | ((LSA & 0xFF00) >> 8));
 80012ec:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <StartParseLiDAR+0x2f0>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	b219      	sxth	r1, r3
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <StartParseLiDAR+0x2f0>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	121b      	asrs	r3, r3, #8
 8001300:	b21b      	sxth	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	b21b      	sxth	r3, r3
 8001306:	430b      	orrs	r3, r1
 8001308:	b21b      	sxth	r3, r3
							  (((FSA & 0x00FF )<< 8) | ((FSA & 0xFF00) >> 8)) ^
 800130a:	4053      	eors	r3, r2
 800130c:	b21b      	sxth	r3, r3
 800130e:	b29a      	uxth	r2, r3
					  XOR = 0xAA55 ^
 8001310:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <StartParseLiDAR+0x2fc>)
 8001312:	801a      	strh	r2, [r3, #0]
					  for (int i = 0; i < data_size*2; i+=2){
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	e043      	b.n	80013a2 <StartParseLiDAR+0x352>
 800131a:	bf00      	nop
 800131c:	20000750 	.word	0x20000750
 8001320:	20000751 	.word	0x20000751
 8001324:	20000752 	.word	0x20000752
 8001328:	20000753 	.word	0x20000753
 800132c:	20000760 	.word	0x20000760
 8001330:	200001fc 	.word	0x200001fc
 8001334:	20000754 	.word	0x20000754
 8001338:	20000756 	.word	0x20000756
 800133c:	20000758 	.word	0x20000758
 8001340:	2000075a 	.word	0x2000075a
 8001344:	2000075c 	.word	0x2000075c
 8001348:	ffffaa55 	.word	0xffffaa55
 800134c:	2000075e 	.word	0x2000075e
//						  printf("%02x\r\n",((uart_rx_buffer[(read_index + i)] << 8)|
//								  (uart_rx_buffer[(read_index + i + 1) % UART_RX_BUFFER_SIZE])));
						  XOR ^= (uint16_t)((uart_rx_buffer[(read_index + i)] << 8)|
 8001350:	4ba1      	ldr	r3, [pc, #644]	@ (80015d8 <StartParseLiDAR+0x588>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b29b      	uxth	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	4413      	add	r3, r2
 800135c:	4a9f      	ldr	r2, [pc, #636]	@ (80015dc <StartParseLiDAR+0x58c>)
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	b21b      	sxth	r3, r3
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b21a      	sxth	r2, r3
								  (uart_rx_buffer[(read_index + i + 1) % UART_RX_BUFFER_SIZE]));
 8001366:	4b9c      	ldr	r3, [pc, #624]	@ (80015d8 <StartParseLiDAR+0x588>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	4619      	mov	r1, r3
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	440b      	add	r3, r1
 8001372:	3301      	adds	r3, #1
 8001374:	4259      	negs	r1, r3
 8001376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800137a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800137e:	bf58      	it	pl
 8001380:	424b      	negpl	r3, r1
 8001382:	4996      	ldr	r1, [pc, #600]	@ (80015dc <StartParseLiDAR+0x58c>)
 8001384:	5ccb      	ldrb	r3, [r1, r3]
 8001386:	b21b      	sxth	r3, r3
						  XOR ^= (uint16_t)((uart_rx_buffer[(read_index + i)] << 8)|
 8001388:	4313      	orrs	r3, r2
 800138a:	b21b      	sxth	r3, r3
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b94      	ldr	r3, [pc, #592]	@ (80015e0 <StartParseLiDAR+0x590>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	4053      	eors	r3, r2
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b91      	ldr	r3, [pc, #580]	@ (80015e0 <StartParseLiDAR+0x590>)
 800139a:	801a      	strh	r2, [r3, #0]
					  for (int i = 0; i < data_size*2; i+=2){
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	3302      	adds	r3, #2
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	4b90      	ldr	r3, [pc, #576]	@ (80015e4 <StartParseLiDAR+0x594>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbcf      	blt.n	8001350 <StartParseLiDAR+0x300>
					  }
					  if (checksum == XOR){ //store data
 80013b0:	4b8d      	ldr	r3, [pc, #564]	@ (80015e8 <StartParseLiDAR+0x598>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b8a      	ldr	r3, [pc, #552]	@ (80015e0 <StartParseLiDAR+0x590>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	429a      	cmp	r2, r3
 80013be:	d168      	bne.n	8001492 <StartParseLiDAR+0x442>
						  FSA = (FSA >> 1) / 64;
 80013c0:	4b8a      	ldr	r3, [pc, #552]	@ (80015ec <StartParseLiDAR+0x59c>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	085b      	lsrs	r3, r3, #1
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	099b      	lsrs	r3, r3, #6
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	4b87      	ldr	r3, [pc, #540]	@ (80015ec <StartParseLiDAR+0x59c>)
 80013d0:	801a      	strh	r2, [r3, #0]
						  LSA = (LSA >> 1) / 64;
 80013d2:	4b87      	ldr	r3, [pc, #540]	@ (80015f0 <StartParseLiDAR+0x5a0>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	085b      	lsrs	r3, r3, #1
 80013da:	b29b      	uxth	r3, r3
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	b29a      	uxth	r2, r3
 80013e0:	4b83      	ldr	r3, [pc, #524]	@ (80015f0 <StartParseLiDAR+0x5a0>)
 80013e2:	801a      	strh	r2, [r3, #0]
						  for (int i = 0; i < data_size * 2; i += 2){
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	e03f      	b.n	800146a <StartParseLiDAR+0x41a>
							  temp_buf[(int)(roundf(i / 2.0f))] = ((uart_rx_buffer[(read_index + i + 1) % UART_RX_BUFFER_SIZE] << 8)|
 80013ea:	4b7b      	ldr	r3, [pc, #492]	@ (80015d8 <StartParseLiDAR+0x588>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	4413      	add	r3, r2
 80013f6:	3301      	adds	r3, #1
 80013f8:	425a      	negs	r2, r3
 80013fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001402:	bf58      	it	pl
 8001404:	4253      	negpl	r3, r2
 8001406:	4a75      	ldr	r2, [pc, #468]	@ (80015dc <StartParseLiDAR+0x58c>)
 8001408:	5cd3      	ldrb	r3, [r2, r3]
 800140a:	021a      	lsls	r2, r3, #8
									  	  	  (uart_rx_buffer[(read_index + i) % UART_RX_BUFFER_SIZE])) / 4;
 800140c:	4b72      	ldr	r3, [pc, #456]	@ (80015d8 <StartParseLiDAR+0x588>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4619      	mov	r1, r3
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	440b      	add	r3, r1
 8001418:	4259      	negs	r1, r3
 800141a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800141e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001422:	bf58      	it	pl
 8001424:	424b      	negpl	r3, r1
 8001426:	496d      	ldr	r1, [pc, #436]	@ (80015dc <StartParseLiDAR+0x58c>)
 8001428:	5ccb      	ldrb	r3, [r1, r3]
							  temp_buf[(int)(roundf(i / 2.0f))] = ((uart_rx_buffer[(read_index + i + 1) % UART_RX_BUFFER_SIZE] << 8)|
 800142a:	4313      	orrs	r3, r2
									  	  	  (uart_rx_buffer[(read_index + i) % UART_RX_BUFFER_SIZE])) / 4;
 800142c:	2b00      	cmp	r3, #0
 800142e:	da00      	bge.n	8001432 <StartParseLiDAR+0x3e2>
 8001430:	3303      	adds	r3, #3
 8001432:	109b      	asrs	r3, r3, #2
 8001434:	461c      	mov	r4, r3
							  temp_buf[(int)(roundf(i / 2.0f))] = ((uart_rx_buffer[(read_index + i + 1) % UART_RX_BUFFER_SIZE] << 8)|
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001440:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001444:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001448:	eeb0 0a47 	vmov.f32	s0, s14
 800144c:	f00b f9b0 	bl	800c7b0 <roundf>
 8001450:	eef0 7a40 	vmov.f32	s15, s0
 8001454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001458:	ee17 1a90 	vmov	r1, s15
 800145c:	b2a2      	uxth	r2, r4
 800145e:	4b65      	ldr	r3, [pc, #404]	@ (80015f4 <StartParseLiDAR+0x5a4>)
 8001460:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
						  for (int i = 0; i < data_size * 2; i += 2){
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	3302      	adds	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	4b5e      	ldr	r3, [pc, #376]	@ (80015e4 <StartParseLiDAR+0x594>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbb8      	blt.n	80013ea <StartParseLiDAR+0x39a>
						  }
						  isWriting = 1;
 8001478:	4b5f      	ldr	r3, [pc, #380]	@ (80015f8 <StartParseLiDAR+0x5a8>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
						  PH1 = 0;
 800147e:	4b5f      	ldr	r3, [pc, #380]	@ (80015fc <StartParseLiDAR+0x5ac>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
						  PH2 = 0;
 8001484:	4b5e      	ldr	r3, [pc, #376]	@ (8001600 <StartParseLiDAR+0x5b0>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
						  isPointcloud = 0;
 800148a:	4b5e      	ldr	r3, [pc, #376]	@ (8001604 <StartParseLiDAR+0x5b4>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e008      	b.n	80014a4 <StartParseLiDAR+0x454>
					  }
					  else {
						  PH1 = 0;
 8001492:	4b5a      	ldr	r3, [pc, #360]	@ (80015fc <StartParseLiDAR+0x5ac>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
						  PH2 = 0;
 8001498:	4b59      	ldr	r3, [pc, #356]	@ (8001600 <StartParseLiDAR+0x5b0>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
						  isPointcloud = 0;
 800149e:	4b59      	ldr	r3, [pc, #356]	@ (8001604 <StartParseLiDAR+0x5b4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
					  }
					  read_index = (read_index + data_size*2 - 1) % UART_RX_BUFFER_SIZE;
 80014a4:	4b4c      	ldr	r3, [pc, #304]	@ (80015d8 <StartParseLiDAR+0x588>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b4d      	ldr	r3, [pc, #308]	@ (80015e4 <StartParseLiDAR+0x594>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	3b01      	subs	r3, #1
 80014b8:	425a      	negs	r2, r3
 80014ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014c2:	bf58      	it	pl
 80014c4:	4253      	negpl	r3, r2
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b43      	ldr	r3, [pc, #268]	@ (80015d8 <StartParseLiDAR+0x588>)
 80014ca:	801a      	strh	r2, [r3, #0]
 80014cc:	e006      	b.n	80014dc <StartParseLiDAR+0x48c>
				  }
				  else { //handle incomplete message
//					  isReading = 0;
					  HalfFlag = 0;
 80014ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001608 <StartParseLiDAR+0x5b8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
					  CompleteFlag = 0;
 80014d4:	4b4d      	ldr	r3, [pc, #308]	@ (800160c <StartParseLiDAR+0x5bc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
					  break;
 80014da:	e132      	b.n	8001742 <StartParseLiDAR+0x6f2>
				  }
			  }
			  if (isWriting){
 80014dc:	4b46      	ldr	r3, [pc, #280]	@ (80015f8 <StartParseLiDAR+0x5a8>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8113 	beq.w	800170e <StartParseLiDAR+0x6be>
			  		  if (LSA < FSA) {
 80014e8:	4b41      	ldr	r3, [pc, #260]	@ (80015f0 <StartParseLiDAR+0x5a0>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b3f      	ldr	r3, [pc, #252]	@ (80015ec <StartParseLiDAR+0x59c>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d214      	bcs.n	8001522 <StartParseLiDAR+0x4d2>
			  		      LSA += 360.0;
 80014f8:	4b3d      	ldr	r3, [pc, #244]	@ (80015f0 <StartParseLiDAR+0x5a0>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f810 	bl	8000524 <__aeabi_i2d>
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b41      	ldr	r3, [pc, #260]	@ (8001610 <StartParseLiDAR+0x5c0>)
 800150a:	f7fe febf 	bl	800028c <__adddf3>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb47 	bl	8000ba8 <__aeabi_d2uiz>
 800151a:	4603      	mov	r3, r0
 800151c:	b29a      	uxth	r2, r3
 800151e:	4b34      	ldr	r3, [pc, #208]	@ (80015f0 <StartParseLiDAR+0x5a0>)
 8001520:	801a      	strh	r2, [r3, #0]
			  		  }
			  		  AngleDiff = LSA - FSA;
 8001522:	4b33      	ldr	r3, [pc, #204]	@ (80015f0 <StartParseLiDAR+0x5a0>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	4b30      	ldr	r3, [pc, #192]	@ (80015ec <StartParseLiDAR+0x59c>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	ee07 3a90 	vmov	s15, r3
 8001536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153a:	4b36      	ldr	r3, [pc, #216]	@ (8001614 <StartParseLiDAR+0x5c4>)
 800153c:	edc3 7a00 	vstr	s15, [r3]
			  		  for (int i = 2; i < data_size; i ++){
 8001540:	2302      	movs	r3, #2
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	e0ad      	b.n	80016a2 <StartParseLiDAR+0x652>
			  			  AngleCorrect = ((temp_buf[i]) == 0) ? 0 : atanf(21.8 * ((155.3 - temp_buf[i]) / (155.3 * temp_buf[i])));
 8001546:	4a2b      	ldr	r2, [pc, #172]	@ (80015f4 <StartParseLiDAR+0x5a4>)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d064      	beq.n	800161c <StartParseLiDAR+0x5cc>
 8001552:	4a28      	ldr	r2, [pc, #160]	@ (80015f4 <StartParseLiDAR+0x5a4>)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ffe2 	bl	8000524 <__aeabi_i2d>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	a118      	add	r1, pc, #96	@ (adr r1, 80015c8 <StartParseLiDAR+0x578>)
 8001566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800156a:	f7fe fe8d 	bl	8000288 <__aeabi_dsub>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4614      	mov	r4, r2
 8001574:	461d      	mov	r5, r3
 8001576:	4a1f      	ldr	r2, [pc, #124]	@ (80015f4 <StartParseLiDAR+0x5a4>)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffd0 	bl	8000524 <__aeabi_i2d>
 8001584:	a310      	add	r3, pc, #64	@ (adr r3, 80015c8 <StartParseLiDAR+0x578>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f835 	bl	80005f8 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7ff f959 	bl	800084c <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	a30b      	add	r3, pc, #44	@ (adr r3, 80015d0 <StartParseLiDAR+0x580>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7ff f826 	bl	80005f8 <__aeabi_dmul>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fb18 	bl	8000be8 <__aeabi_d2f>
 80015b8:	4603      	mov	r3, r0
 80015ba:	ee00 3a10 	vmov	s0, r3
 80015be:	f00b f81b 	bl	800c5f8 <atanf>
 80015c2:	eef0 7a40 	vmov.f32	s15, s0
 80015c6:	e02b      	b.n	8001620 <StartParseLiDAR+0x5d0>
 80015c8:	9999999a 	.word	0x9999999a
 80015cc:	40636999 	.word	0x40636999
 80015d0:	cccccccd 	.word	0xcccccccd
 80015d4:	4035cccc 	.word	0x4035cccc
 80015d8:	20000760 	.word	0x20000760
 80015dc:	200001fc 	.word	0x200001fc
 80015e0:	2000075e 	.word	0x2000075e
 80015e4:	20000756 	.word	0x20000756
 80015e8:	2000075c 	.word	0x2000075c
 80015ec:	20000758 	.word	0x20000758
 80015f0:	2000075a 	.word	0x2000075a
 80015f4:	200003fc 	.word	0x200003fc
 80015f8:	2000074d 	.word	0x2000074d
 80015fc:	20000750 	.word	0x20000750
 8001600:	20000751 	.word	0x20000751
 8001604:	20000752 	.word	0x20000752
 8001608:	2000074e 	.word	0x2000074e
 800160c:	2000074f 	.word	0x2000074f
 8001610:	40768000 	.word	0x40768000
 8001614:	20000764 	.word	0x20000764
 8001618:	00000000 	.word	0x00000000
 800161c:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8001618 <StartParseLiDAR+0x5c8>
 8001620:	4b4a      	ldr	r3, [pc, #296]	@ (800174c <StartParseLiDAR+0x6fc>)
 8001622:	edc3 7a00 	vstr	s15, [r3]
			  			  LaserScan_index = (int)(roundf((float)((((/*(*/(AngleDiff / (data_size -1)) * (i-1) + FSA + AngleCorrect) /* * 2.0f) / 2.0f*/))/** 2*/)))% LASERSCAN_SIZE;
 8001626:	4b4a      	ldr	r3, [pc, #296]	@ (8001750 <StartParseLiDAR+0x700>)
 8001628:	edd3 6a00 	vldr	s13, [r3]
 800162c:	4b49      	ldr	r3, [pc, #292]	@ (8001754 <StartParseLiDAR+0x704>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	3b01      	subs	r3, #1
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3b01      	subs	r3, #1
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001650:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <StartParseLiDAR+0x708>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	b29b      	uxth	r3, r3
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001662:	4b3a      	ldr	r3, [pc, #232]	@ (800174c <StartParseLiDAR+0x6fc>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166c:	eeb0 0a67 	vmov.f32	s0, s15
 8001670:	f00b f89e 	bl	800c7b0 <roundf>
 8001674:	eef0 7a40 	vmov.f32	s15, s0
 8001678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800167c:	ee17 2a90 	vmov	r2, s15
 8001680:	4b36      	ldr	r3, [pc, #216]	@ (800175c <StartParseLiDAR+0x70c>)
 8001682:	fb83 1302 	smull	r1, r3, r3, r2
 8001686:	4413      	add	r3, r2
 8001688:	1219      	asrs	r1, r3, #8
 800168a:	17d3      	asrs	r3, r2, #31
 800168c:	1acb      	subs	r3, r1, r3
 800168e:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001692:	fb01 f303 	mul.w	r3, r1, r3
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	4a31      	ldr	r2, [pc, #196]	@ (8001760 <StartParseLiDAR+0x710>)
 800169a:	6013      	str	r3, [r2, #0]
			  		  for (int i = 2; i < data_size; i ++){
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3301      	adds	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001754 <StartParseLiDAR+0x704>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	4293      	cmp	r3, r2
 80016ae:	f6ff af4a 	blt.w	8001546 <StartParseLiDAR+0x4f6>
//			  			  printf("Index %d\r\n", LaserScan_index);
			  		  }
			  		  for (int i = 0; i < data_size; i++){
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	e00b      	b.n	80016d0 <StartParseLiDAR+0x680>
			  			  LaserScan[LaserScan_index] = temp_buf[i];
 80016b8:	4b29      	ldr	r3, [pc, #164]	@ (8001760 <StartParseLiDAR+0x710>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4929      	ldr	r1, [pc, #164]	@ (8001764 <StartParseLiDAR+0x714>)
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80016c4:	4a28      	ldr	r2, [pc, #160]	@ (8001768 <StartParseLiDAR+0x718>)
 80016c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  		  for (int i = 0; i < data_size; i++){
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	3301      	adds	r3, #1
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <StartParseLiDAR+0x704>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4293      	cmp	r3, r2
 80016dc:	dbec      	blt.n	80016b8 <StartParseLiDAR+0x668>
//						  printf("%d\r\n", LaserScan[LaserScan_index]);
			  		  }
			  		  printf("--START--\r\n");
 80016de:	4823      	ldr	r0, [pc, #140]	@ (800176c <StartParseLiDAR+0x71c>)
 80016e0:	f008 ffba 	bl	800a658 <puts>
			  		  for (int i = 0; i < LASERSCAN_SIZE; i++){
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	e00a      	b.n	8001700 <StartParseLiDAR+0x6b0>
			  			  printf("%d\r\n", LaserScan[i]);
 80016ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001768 <StartParseLiDAR+0x718>)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016f2:	4619      	mov	r1, r3
 80016f4:	481e      	ldr	r0, [pc, #120]	@ (8001770 <StartParseLiDAR+0x720>)
 80016f6:	f008 ff47 	bl	800a588 <iprintf>
			  		  for (int i = 0; i < LASERSCAN_SIZE; i++){
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3301      	adds	r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8001706:	dbf0      	blt.n	80016ea <StartParseLiDAR+0x69a>
			  		  }
			  		  isWriting = 0;
 8001708:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <StartParseLiDAR+0x724>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
			  }
			  read_index = (read_index + 1) % UART_RX_BUFFER_SIZE;
 800170e:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <StartParseLiDAR+0x728>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	3301      	adds	r3, #1
 8001716:	425a      	negs	r2, r3
 8001718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800171c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001720:	bf58      	it	pl
 8001722:	4253      	negpl	r3, r2
 8001724:	b29a      	uxth	r2, r3
 8001726:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <StartParseLiDAR+0x728>)
 8001728:	801a      	strh	r2, [r3, #0]
		  while (read_index != (start_to_read + UART_RX_BUFFER_SIZE)){
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <StartParseLiDAR+0x728>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	4b12      	ldr	r3, [pc, #72]	@ (800177c <StartParseLiDAR+0x72c>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800173c:	429a      	cmp	r2, r3
 800173e:	f47f ac9c 	bne.w	800107a <StartParseLiDAR+0x2a>
		  }
	  osDelay(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f005 fd36 	bl	80071b4 <osDelay>
	  if (isReading && (HalfFlag || CompleteFlag)){
 8001748:	e486      	b.n	8001058 <StartParseLiDAR+0x8>
 800174a:	bf00      	nop
 800174c:	20000768 	.word	0x20000768
 8001750:	20000764 	.word	0x20000764
 8001754:	20000756 	.word	0x20000756
 8001758:	20000758 	.word	0x20000758
 800175c:	b60b60b7 	.word	0xb60b60b7
 8001760:	2000076c 	.word	0x2000076c
 8001764:	200003fc 	.word	0x200003fc
 8001768:	2000047c 	.word	0x2000047c
 800176c:	0800c824 	.word	0x0800c824
 8001770:	0800c830 	.word	0x0800c830
 8001774:	2000074d 	.word	0x2000074d
 8001778:	20000760 	.word	0x20000760
 800177c:	20000753 	.word	0x20000753

08001780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	@ 0x28
 8001784:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	4b2b      	ldr	r3, [pc, #172]	@ (8001844 <MX_GPIO_Init+0xc4>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	4a2a      	ldr	r2, [pc, #168]	@ (8001844 <MX_GPIO_Init+0xc4>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a2:	4b28      	ldr	r3, [pc, #160]	@ (8001844 <MX_GPIO_Init+0xc4>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ae:	4b25      	ldr	r3, [pc, #148]	@ (8001844 <MX_GPIO_Init+0xc4>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b2:	4a24      	ldr	r2, [pc, #144]	@ (8001844 <MX_GPIO_Init+0xc4>)
 80017b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ba:	4b22      	ldr	r3, [pc, #136]	@ (8001844 <MX_GPIO_Init+0xc4>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001844 <MX_GPIO_Init+0xc4>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001844 <MX_GPIO_Init+0xc4>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001844 <MX_GPIO_Init+0xc4>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <MX_GPIO_Init+0xc4>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e2:	4a18      	ldr	r2, [pc, #96]	@ (8001844 <MX_GPIO_Init+0xc4>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ea:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <MX_GPIO_Init+0xc4>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2120      	movs	r1, #32
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fe:	f001 fa75 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001802:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001808:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800180c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	480b      	ldr	r0, [pc, #44]	@ (8001848 <MX_GPIO_Init+0xc8>)
 800181a:	f001 f8bd 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800181e:	2320      	movs	r3, #32
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001838:	f001 f8ae 	bl	8002998 <HAL_GPIO_Init>

}
 800183c:	bf00      	nop
 800183e:	3728      	adds	r7, #40	@ 0x28
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000
 8001848:	48000800 	.word	0x48000800

0800184c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)&ch,1, HAL_MAX_DELAY);
 8001854:	1d39      	adds	r1, r7, #4
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	2201      	movs	r2, #1
 800185c:	4803      	ldr	r0, [pc, #12]	@ (800186c <__io_putchar+0x20>)
 800185e:	f004 f8b5 	bl	80059cc <HAL_UART_Transmit>
	return ch;
 8001862:	687b      	ldr	r3, [r7, #4]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000894 	.word	0x20000894

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001874:	f000 fcf8 	bl	8002268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001878:	f000 f826 	bl	80018c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187c:	f7ff ff80 	bl	8001780 <MX_GPIO_Init>
  MX_DMA_Init();
 8001880:	f7ff fb98 	bl	8000fb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001884:	f000 fb72 	bl	8001f6c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001888:	f000 fa3c 	bl	8001d04 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800188c:	f000 fb3e 	bl	8001f0c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001890:	2100      	movs	r1, #0
 8001892:	4809      	ldr	r0, [pc, #36]	@ (80018b8 <main+0x48>)
 8001894:	f002 fed8 	bl	8004648 <HAL_TIM_PWM_Start>

//  printf("----START----\r\n");

//  HAL_UART_Abort(&huart1);
  HAL_UART_Receive_DMA(&huart1, uart_rx_buffer, UART_RX_BUFFER_SIZE);
 8001898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800189c:	4907      	ldr	r1, [pc, #28]	@ (80018bc <main+0x4c>)
 800189e:	4808      	ldr	r0, [pc, #32]	@ (80018c0 <main+0x50>)
 80018a0:	f004 f91e 	bl	8005ae0 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 80018a4:	f005 fbaa 	bl	8006ffc <osKernelInitialize>
  MX_FREERTOS_Init();
 80018a8:	f7ff fba2 	bl	8000ff0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80018ac:	f005 fbca 	bl	8007044 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("error\r\n");
 80018b0:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <main+0x54>)
 80018b2:	f008 fed1 	bl	800a658 <puts>
 80018b6:	e7fb      	b.n	80018b0 <main+0x40>
 80018b8:	200007c0 	.word	0x200007c0
 80018bc:	200001fc 	.word	0x200001fc
 80018c0:	2000080c 	.word	0x2000080c
 80018c4:	0800c838 	.word	0x0800c838

080018c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b096      	sub	sp, #88	@ 0x58
 80018cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	2244      	movs	r2, #68	@ 0x44
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f008 ff9e 	bl	800a818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018dc:	463b      	mov	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80018ee:	f001 fa3d 	bl	8002d6c <HAL_PWREx_ControlVoltageScaling>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018f8:	f000 f84a 	bl	8001990 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018fc:	2302      	movs	r3, #2
 80018fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001900:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001904:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001906:	2310      	movs	r3, #16
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190a:	2302      	movs	r3, #2
 800190c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800190e:	2302      	movs	r3, #2
 8001910:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001912:	2301      	movs	r3, #1
 8001914:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001916:	230a      	movs	r3, #10
 8001918:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800191a:	2307      	movs	r3, #7
 800191c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800191e:	2302      	movs	r3, #2
 8001920:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001922:	2302      	movs	r3, #2
 8001924:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4618      	mov	r0, r3
 800192c:	f001 fa74 	bl	8002e18 <HAL_RCC_OscConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001936:	f000 f82b 	bl	8001990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193a:	230f      	movs	r3, #15
 800193c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193e:	2303      	movs	r3, #3
 8001940:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800194e:	463b      	mov	r3, r7
 8001950:	2104      	movs	r1, #4
 8001952:	4618      	mov	r0, r3
 8001954:	f001 fe3c 	bl	80035d0 <HAL_RCC_ClockConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800195e:	f000 f817 	bl	8001990 <Error_Handler>
  }
}
 8001962:	bf00      	nop
 8001964:	3758      	adds	r7, #88	@ 0x58
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800197e:	f000 fc93 	bl	80022a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40001000 	.word	0x40001000

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <Error_Handler+0x8>

0800199c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a6:	4a10      	ldr	r2, [pc, #64]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ae:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019c6:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	210f      	movs	r1, #15
 80019d6:	f06f 0001 	mvn.w	r0, #1
 80019da:	f000 fd3d 	bl	8002458 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000

080019ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08e      	sub	sp, #56	@ 0x38
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019fa:	4b34      	ldr	r3, [pc, #208]	@ (8001acc <HAL_InitTick+0xe0>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fe:	4a33      	ldr	r2, [pc, #204]	@ (8001acc <HAL_InitTick+0xe0>)
 8001a00:	f043 0310 	orr.w	r3, r3, #16
 8001a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a06:	4b31      	ldr	r3, [pc, #196]	@ (8001acc <HAL_InitTick+0xe0>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a12:	f107 0210 	add.w	r2, r7, #16
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 ff9b 	bl	8003958 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d103      	bne.n	8001a34 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a2c:	f001 ff68 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8001a30:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a32:	e004      	b.n	8001a3e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a34:	f001 ff64 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a40:	4a23      	ldr	r2, [pc, #140]	@ (8001ad0 <HAL_InitTick+0xe4>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0c9b      	lsrs	r3, r3, #18
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a4e:	4a22      	ldr	r2, [pc, #136]	@ (8001ad8 <HAL_InitTick+0xec>)
 8001a50:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a52:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a58:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a5e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a72:	4818      	ldr	r0, [pc, #96]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a74:	f002 fcbe 	bl	80043f4 <HAL_TIM_Base_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11b      	bne.n	8001abe <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a86:	4813      	ldr	r0, [pc, #76]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a88:	f002 fd0c 	bl	80044a4 <HAL_TIM_Base_Start_IT>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a92:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d111      	bne.n	8001abe <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a9a:	2036      	movs	r0, #54	@ 0x36
 8001a9c:	f000 fcf8 	bl	8002490 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b0f      	cmp	r3, #15
 8001aa4:	d808      	bhi.n	8001ab8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	2036      	movs	r0, #54	@ 0x36
 8001aac:	f000 fcd4 	bl	8002458 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <HAL_InitTick+0xf0>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e002      	b.n	8001abe <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001abe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3738      	adds	r7, #56	@ 0x38
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	431bde83 	.word	0x431bde83
 8001ad4:	20000770 	.word	0x20000770
 8001ad8:	40001000 	.word	0x40001000
 8001adc:	20000004 	.word	0x20000004

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <MemManage_Handler+0x4>

08001af8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b1c:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <DMA1_Channel5_IRQHandler+0x10>)
 8001b1e:	f000 fe5c 	bl	80027da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000091c 	.word	0x2000091c

08001b2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <USART1_IRQHandler+0x10>)
 8001b32:	f004 f821 	bl	8005b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000080c 	.word	0x2000080c

08001b40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <TIM6_DAC_IRQHandler+0x10>)
 8001b46:	f002 fe85 	bl	8004854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000770 	.word	0x20000770

08001b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return 1;
 8001b58:	2301      	movs	r3, #1
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_kill>:

int _kill(int pid, int sig)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b6e:	f008 ff03 	bl	800a978 <__errno>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2216      	movs	r2, #22
 8001b76:	601a      	str	r2, [r3, #0]
  return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_exit>:

void _exit (int status)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ffe7 	bl	8001b64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b96:	bf00      	nop
 8001b98:	e7fd      	b.n	8001b96 <_exit+0x12>

08001b9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e00a      	b.n	8001bc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bac:	f3af 8000 	nop.w
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	60ba      	str	r2, [r7, #8]
 8001bb8:	b2ca      	uxtb	r2, r1
 8001bba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	dbf0      	blt.n	8001bac <_read+0x12>
  }

  return len;
 8001bca:	687b      	ldr	r3, [r7, #4]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e009      	b.n	8001bfa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	60ba      	str	r2, [r7, #8]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fe2c 	bl	800184c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	dbf1      	blt.n	8001be6 <_write+0x12>
  }
  return len;
 8001c02:	687b      	ldr	r3, [r7, #4]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_close>:

int _close(int file)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c34:	605a      	str	r2, [r3, #4]
  return 0;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <_isatty>:

int _isatty(int file)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c4c:	2301      	movs	r3, #1
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	@ (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f008 fe68 	bl	800a978 <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20018000 	.word	0x20018000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	200007bc 	.word	0x200007bc
 8001cdc:	20003fb0 	.word	0x20003fb0

08001ce0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b09a      	sub	sp, #104	@ 0x68
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
 8001d34:	615a      	str	r2, [r3, #20]
 8001d36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	222c      	movs	r2, #44	@ 0x2c
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f008 fd6a 	bl	800a818 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d44:	4b43      	ldr	r3, [pc, #268]	@ (8001e54 <MX_TIM1_Init+0x150>)
 8001d46:	4a44      	ldr	r2, [pc, #272]	@ (8001e58 <MX_TIM1_Init+0x154>)
 8001d48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8001d4a:	4b42      	ldr	r3, [pc, #264]	@ (8001e54 <MX_TIM1_Init+0x150>)
 8001d4c:	224f      	movs	r2, #79	@ 0x4f
 8001d4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d50:	4b40      	ldr	r3, [pc, #256]	@ (8001e54 <MX_TIM1_Init+0x150>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001d56:	4b3f      	ldr	r3, [pc, #252]	@ (8001e54 <MX_TIM1_Init+0x150>)
 8001d58:	2263      	movs	r2, #99	@ 0x63
 8001d5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e54 <MX_TIM1_Init+0x150>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d62:	4b3c      	ldr	r3, [pc, #240]	@ (8001e54 <MX_TIM1_Init+0x150>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d68:	4b3a      	ldr	r3, [pc, #232]	@ (8001e54 <MX_TIM1_Init+0x150>)
 8001d6a:	2280      	movs	r2, #128	@ 0x80
 8001d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d6e:	4839      	ldr	r0, [pc, #228]	@ (8001e54 <MX_TIM1_Init+0x150>)
 8001d70:	f002 fb40 	bl	80043f4 <HAL_TIM_Base_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d7a:	f7ff fe09 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d82:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d84:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4832      	ldr	r0, [pc, #200]	@ (8001e54 <MX_TIM1_Init+0x150>)
 8001d8c:	f002 ff7e 	bl	8004c8c <HAL_TIM_ConfigClockSource>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d96:	f7ff fdfb 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d9a:	482e      	ldr	r0, [pc, #184]	@ (8001e54 <MX_TIM1_Init+0x150>)
 8001d9c:	f002 fbf2 	bl	8004584 <HAL_TIM_PWM_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001da6:	f7ff fdf3 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001db6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4825      	ldr	r0, [pc, #148]	@ (8001e54 <MX_TIM1_Init+0x150>)
 8001dbe:	f003 fc93 	bl	80056e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001dc8:	f7ff fde2 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dcc:	2360      	movs	r3, #96	@ 0x60
 8001dce:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 50;
 8001dd0:	2332      	movs	r3, #50	@ 0x32
 8001dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001de4:	2300      	movs	r3, #0
 8001de6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dec:	2200      	movs	r2, #0
 8001dee:	4619      	mov	r1, r3
 8001df0:	4818      	ldr	r0, [pc, #96]	@ (8001e54 <MX_TIM1_Init+0x150>)
 8001df2:	f002 fe37 	bl	8004a64 <HAL_TIM_PWM_ConfigChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001dfc:	f7ff fdc8 	bl	8001990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e18:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	4807      	ldr	r0, [pc, #28]	@ (8001e54 <MX_TIM1_Init+0x150>)
 8001e36:	f003 fcdf 	bl	80057f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001e40:	f7ff fda6 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e44:	4803      	ldr	r0, [pc, #12]	@ (8001e54 <MX_TIM1_Init+0x150>)
 8001e46:	f000 f829 	bl	8001e9c <HAL_TIM_MspPostInit>

}
 8001e4a:	bf00      	nop
 8001e4c:	3768      	adds	r7, #104	@ 0x68
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200007c0 	.word	0x200007c0
 8001e58:	40012c00 	.word	0x40012c00

08001e5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <HAL_TIM_Base_MspInit+0x38>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10b      	bne.n	8001e86 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <HAL_TIM_Base_MspInit+0x3c>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e72:	4a09      	ldr	r2, [pc, #36]	@ (8001e98 <HAL_TIM_Base_MspInit+0x3c>)
 8001e74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e78:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <HAL_TIM_Base_MspInit+0x3c>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40012c00 	.word	0x40012c00
 8001e98:	40021000 	.word	0x40021000

08001e9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <HAL_TIM_MspPostInit+0x68>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d11d      	bne.n	8001efa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_TIM_MspPostInit+0x6c>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	4a11      	ldr	r2, [pc, #68]	@ (8001f08 <HAL_TIM_MspPostInit+0x6c>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_TIM_MspPostInit+0x6c>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ed6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef6:	f000 fd4f 	bl	8002998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001efa:	bf00      	nop
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40012c00 	.word	0x40012c00
 8001f08:	40021000 	.word	0x40021000

08001f0c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f10:	4b14      	ldr	r3, [pc, #80]	@ (8001f64 <MX_USART1_UART_Init+0x58>)
 8001f12:	4a15      	ldr	r2, [pc, #84]	@ (8001f68 <MX_USART1_UART_Init+0x5c>)
 8001f14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f16:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <MX_USART1_UART_Init+0x58>)
 8001f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <MX_USART1_UART_Init+0x58>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	@ (8001f64 <MX_USART1_UART_Init+0x58>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <MX_USART1_UART_Init+0x58>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <MX_USART1_UART_Init+0x58>)
 8001f32:	220c      	movs	r2, #12
 8001f34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <MX_USART1_UART_Init+0x58>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <MX_USART1_UART_Init+0x58>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <MX_USART1_UART_Init+0x58>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <MX_USART1_UART_Init+0x58>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f4e:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <MX_USART1_UART_Init+0x58>)
 8001f50:	f003 fcee 	bl	8005930 <HAL_UART_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f5a:	f7ff fd19 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2000080c 	.word	0x2000080c
 8001f68:	40013800 	.word	0x40013800

08001f6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f70:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f72:	4a15      	ldr	r2, [pc, #84]	@ (8001fc8 <MX_USART2_UART_Init+0x5c>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f76:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fae:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001fb0:	f003 fcbe 	bl	8005930 <HAL_UART_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fba:	f7ff fce9 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000894 	.word	0x20000894
 8001fc8:	40004400 	.word	0x40004400

08001fcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b0ae      	sub	sp, #184	@ 0xb8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	2288      	movs	r2, #136	@ 0x88
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f008 fc13 	bl	800a818 <memset>
  if(uartHandle->Instance==USART1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a5c      	ldr	r2, [pc, #368]	@ (8002168 <HAL_UART_MspInit+0x19c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d16f      	bne.n	80020dc <HAL_UART_MspInit+0x110>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002000:	2300      	movs	r3, #0
 8002002:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4618      	mov	r0, r3
 800200a:	f001 fd37 	bl	8003a7c <HAL_RCCEx_PeriphCLKConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002014:	f7ff fcbc 	bl	8001990 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002018:	4b54      	ldr	r3, [pc, #336]	@ (800216c <HAL_UART_MspInit+0x1a0>)
 800201a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201c:	4a53      	ldr	r2, [pc, #332]	@ (800216c <HAL_UART_MspInit+0x1a0>)
 800201e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002022:	6613      	str	r3, [r2, #96]	@ 0x60
 8002024:	4b51      	ldr	r3, [pc, #324]	@ (800216c <HAL_UART_MspInit+0x1a0>)
 8002026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002028:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002030:	4b4e      	ldr	r3, [pc, #312]	@ (800216c <HAL_UART_MspInit+0x1a0>)
 8002032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002034:	4a4d      	ldr	r2, [pc, #308]	@ (800216c <HAL_UART_MspInit+0x1a0>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800203c:	4b4b      	ldr	r3, [pc, #300]	@ (800216c <HAL_UART_MspInit+0x1a0>)
 800203e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002048:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800204c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002062:	2307      	movs	r3, #7
 8002064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800206c:	4619      	mov	r1, r3
 800206e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002072:	f000 fc91 	bl	8002998 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002076:	4b3e      	ldr	r3, [pc, #248]	@ (8002170 <HAL_UART_MspInit+0x1a4>)
 8002078:	4a3e      	ldr	r2, [pc, #248]	@ (8002174 <HAL_UART_MspInit+0x1a8>)
 800207a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800207c:	4b3c      	ldr	r3, [pc, #240]	@ (8002170 <HAL_UART_MspInit+0x1a4>)
 800207e:	2202      	movs	r2, #2
 8002080:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002082:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <HAL_UART_MspInit+0x1a4>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002088:	4b39      	ldr	r3, [pc, #228]	@ (8002170 <HAL_UART_MspInit+0x1a4>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800208e:	4b38      	ldr	r3, [pc, #224]	@ (8002170 <HAL_UART_MspInit+0x1a4>)
 8002090:	2280      	movs	r2, #128	@ 0x80
 8002092:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002094:	4b36      	ldr	r3, [pc, #216]	@ (8002170 <HAL_UART_MspInit+0x1a4>)
 8002096:	2200      	movs	r2, #0
 8002098:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800209a:	4b35      	ldr	r3, [pc, #212]	@ (8002170 <HAL_UART_MspInit+0x1a4>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80020a0:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <HAL_UART_MspInit+0x1a4>)
 80020a2:	2220      	movs	r2, #32
 80020a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80020a6:	4b32      	ldr	r3, [pc, #200]	@ (8002170 <HAL_UART_MspInit+0x1a4>)
 80020a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020ae:	4830      	ldr	r0, [pc, #192]	@ (8002170 <HAL_UART_MspInit+0x1a4>)
 80020b0:	f000 f9fc 	bl	80024ac <HAL_DMA_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80020ba:	f7ff fc69 	bl	8001990 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002170 <HAL_UART_MspInit+0x1a4>)
 80020c2:	675a      	str	r2, [r3, #116]	@ 0x74
 80020c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002170 <HAL_UART_MspInit+0x1a4>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2105      	movs	r1, #5
 80020ce:	2025      	movs	r0, #37	@ 0x25
 80020d0:	f000 f9c2 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020d4:	2025      	movs	r0, #37	@ 0x25
 80020d6:	f000 f9db 	bl	8002490 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020da:	e040      	b.n	800215e <HAL_UART_MspInit+0x192>
  else if(uartHandle->Instance==USART2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a25      	ldr	r2, [pc, #148]	@ (8002178 <HAL_UART_MspInit+0x1ac>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d13b      	bne.n	800215e <HAL_UART_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020ea:	2300      	movs	r3, #0
 80020ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ee:	f107 031c 	add.w	r3, r7, #28
 80020f2:	4618      	mov	r0, r3
 80020f4:	f001 fcc2 	bl	8003a7c <HAL_RCCEx_PeriphCLKConfig>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_UART_MspInit+0x136>
      Error_Handler();
 80020fe:	f7ff fc47 	bl	8001990 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002102:	4b1a      	ldr	r3, [pc, #104]	@ (800216c <HAL_UART_MspInit+0x1a0>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002106:	4a19      	ldr	r2, [pc, #100]	@ (800216c <HAL_UART_MspInit+0x1a0>)
 8002108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800210c:	6593      	str	r3, [r2, #88]	@ 0x58
 800210e:	4b17      	ldr	r3, [pc, #92]	@ (800216c <HAL_UART_MspInit+0x1a0>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	4b14      	ldr	r3, [pc, #80]	@ (800216c <HAL_UART_MspInit+0x1a0>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211e:	4a13      	ldr	r2, [pc, #76]	@ (800216c <HAL_UART_MspInit+0x1a0>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <HAL_UART_MspInit+0x1a0>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002132:	230c      	movs	r3, #12
 8002134:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800214a:	2307      	movs	r3, #7
 800214c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002154:	4619      	mov	r1, r3
 8002156:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800215a:	f000 fc1d 	bl	8002998 <HAL_GPIO_Init>
}
 800215e:	bf00      	nop
 8002160:	37b8      	adds	r7, #184	@ 0xb8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40013800 	.word	0x40013800
 800216c:	40021000 	.word	0x40021000
 8002170:	2000091c 	.word	0x2000091c
 8002174:	40020058 	.word	0x40020058
 8002178:	40004400 	.word	0x40004400

0800217c <HAL_UART_RxHalfCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <HAL_UART_RxHalfCpltCallback+0x38>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10b      	bne.n	80021a6 <HAL_UART_RxHalfCpltCallback+0x2a>
//		for (int i = 0; i < (UART_RX_BUFFER_SIZE / 2); i++){
//			temp_buf[i] = uart_rx_buffer[i];
//		}
		HalfFlag = 1;
 800218e:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <HAL_UART_RxHalfCpltCallback+0x3c>)
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
		CompleteFlag = 0;
 8002194:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <HAL_UART_RxHalfCpltCallback+0x40>)
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
		start_to_read = 0;
 800219a:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <HAL_UART_RxHalfCpltCallback+0x44>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
		isReading = 1;
 80021a0:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <HAL_UART_RxHalfCpltCallback+0x48>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
	}

}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40013800 	.word	0x40013800
 80021b8:	2000074e 	.word	0x2000074e
 80021bc:	2000074f 	.word	0x2000074f
 80021c0:	20000753 	.word	0x20000753
 80021c4:	2000074c 	.word	0x2000074c

080021c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <HAL_UART_RxCpltCallback+0x38>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d10b      	bne.n	80021f2 <HAL_UART_RxCpltCallback+0x2a>
//		for (int i = (UART_RX_BUFFER_SIZE / 2); i < UART_RX_BUFFER_SIZE; i++){
//			temp_buf[i] = uart_rx_buffer[i];
//		}
		CompleteFlag = 1;
 80021da:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <HAL_UART_RxCpltCallback+0x3c>)
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
		HalfFlag = 0;
 80021e0:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <HAL_UART_RxCpltCallback+0x40>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
		start_to_read = (uint8_t) (UART_RX_BUFFER_SIZE / 2);
 80021e6:	4b09      	ldr	r3, [pc, #36]	@ (800220c <HAL_UART_RxCpltCallback+0x44>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
		isReading = 1;
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <HAL_UART_RxCpltCallback+0x48>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
	}
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40013800 	.word	0x40013800
 8002204:	2000074f 	.word	0x2000074f
 8002208:	2000074e 	.word	0x2000074e
 800220c:	20000753 	.word	0x20000753
 8002210:	2000074c 	.word	0x2000074c

08002214 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002214:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800224c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002218:	f7ff fd62 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800221c:	480c      	ldr	r0, [pc, #48]	@ (8002250 <LoopForever+0x6>)
  ldr r1, =_edata
 800221e:	490d      	ldr	r1, [pc, #52]	@ (8002254 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002220:	4a0d      	ldr	r2, [pc, #52]	@ (8002258 <LoopForever+0xe>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002224:	e002      	b.n	800222c <LoopCopyDataInit>

08002226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222a:	3304      	adds	r3, #4

0800222c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800222c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002230:	d3f9      	bcc.n	8002226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002232:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002234:	4c0a      	ldr	r4, [pc, #40]	@ (8002260 <LoopForever+0x16>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002238:	e001      	b.n	800223e <LoopFillZerobss>

0800223a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800223c:	3204      	adds	r2, #4

0800223e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002240:	d3fb      	bcc.n	800223a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002242:	f008 fb9f 	bl	800a984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002246:	f7ff fb13 	bl	8001870 <main>

0800224a <LoopForever>:

LoopForever:
    b LoopForever
 800224a:	e7fe      	b.n	800224a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800224c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002254:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002258:	0800cc8c 	.word	0x0800cc8c
  ldr r2, =_sbss
 800225c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002260:	20003fac 	.word	0x20003fac

08002264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002264:	e7fe      	b.n	8002264 <ADC1_2_IRQHandler>
	...

08002268 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002272:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <HAL_Init+0x3c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a0b      	ldr	r2, [pc, #44]	@ (80022a4 <HAL_Init+0x3c>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800227c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800227e:	2003      	movs	r0, #3
 8002280:	f000 f8df 	bl	8002442 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002284:	200f      	movs	r0, #15
 8002286:	f7ff fbb1 	bl	80019ec <HAL_InitTick>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	71fb      	strb	r3, [r7, #7]
 8002294:	e001      	b.n	800229a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002296:	f7ff fb81 	bl	800199c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800229a:	79fb      	ldrb	r3, [r7, #7]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40022000 	.word	0x40022000

080022a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_IncTick+0x20>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_IncTick+0x24>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	4a04      	ldr	r2, [pc, #16]	@ (80022cc <HAL_IncTick+0x24>)
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000008 	.word	0x20000008
 80022cc:	20000964 	.word	0x20000964

080022d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return uwTick;
 80022d4:	4b03      	ldr	r3, [pc, #12]	@ (80022e4 <HAL_GetTick+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000964 	.word	0x20000964

080022e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f8:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <__NVIC_SetPriorityGrouping+0x44>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002304:	4013      	ands	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002310:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231a:	4a04      	ldr	r2, [pc, #16]	@ (800232c <__NVIC_SetPriorityGrouping+0x44>)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	60d3      	str	r3, [r2, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002334:	4b04      	ldr	r3, [pc, #16]	@ (8002348 <__NVIC_GetPriorityGrouping+0x18>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	f003 0307 	and.w	r3, r3, #7
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	2b00      	cmp	r3, #0
 800235c:	db0b      	blt.n	8002376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	f003 021f 	and.w	r2, r3, #31
 8002364:	4907      	ldr	r1, [pc, #28]	@ (8002384 <__NVIC_EnableIRQ+0x38>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	2001      	movs	r0, #1
 800236e:	fa00 f202 	lsl.w	r2, r0, r2
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000e100 	.word	0xe000e100

08002388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db0a      	blt.n	80023b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	490c      	ldr	r1, [pc, #48]	@ (80023d4 <__NVIC_SetPriority+0x4c>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	440b      	add	r3, r1
 80023ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b0:	e00a      	b.n	80023c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4908      	ldr	r1, [pc, #32]	@ (80023d8 <__NVIC_SetPriority+0x50>)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	3b04      	subs	r3, #4
 80023c0:	0112      	lsls	r2, r2, #4
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	440b      	add	r3, r1
 80023c6:	761a      	strb	r2, [r3, #24]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000e100 	.word	0xe000e100
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	@ 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f1c3 0307 	rsb	r3, r3, #7
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf28      	it	cs
 80023fa:	2304      	movcs	r3, #4
 80023fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3304      	adds	r3, #4
 8002402:	2b06      	cmp	r3, #6
 8002404:	d902      	bls.n	800240c <NVIC_EncodePriority+0x30>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3b03      	subs	r3, #3
 800240a:	e000      	b.n	800240e <NVIC_EncodePriority+0x32>
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	401a      	ands	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002424:	f04f 31ff 	mov.w	r1, #4294967295
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43d9      	mvns	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	4313      	orrs	r3, r2
         );
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	@ 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ff4c 	bl	80022e8 <__NVIC_SetPriorityGrouping>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800246a:	f7ff ff61 	bl	8002330 <__NVIC_GetPriorityGrouping>
 800246e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	6978      	ldr	r0, [r7, #20]
 8002476:	f7ff ffb1 	bl	80023dc <NVIC_EncodePriority>
 800247a:	4602      	mov	r2, r0
 800247c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff80 	bl	8002388 <__NVIC_SetPriority>
}
 8002488:	bf00      	nop
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff54 	bl	800234c <__NVIC_EnableIRQ>
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e098      	b.n	80025f0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b4d      	ldr	r3, [pc, #308]	@ (80025fc <HAL_DMA_Init+0x150>)
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d80f      	bhi.n	80024ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002600 <HAL_DMA_Init+0x154>)
 80024d2:	4413      	add	r3, r2
 80024d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002604 <HAL_DMA_Init+0x158>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	009a      	lsls	r2, r3, #2
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a48      	ldr	r2, [pc, #288]	@ (8002608 <HAL_DMA_Init+0x15c>)
 80024e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80024e8:	e00e      	b.n	8002508 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b46      	ldr	r3, [pc, #280]	@ (800260c <HAL_DMA_Init+0x160>)
 80024f2:	4413      	add	r3, r2
 80024f4:	4a43      	ldr	r2, [pc, #268]	@ (8002604 <HAL_DMA_Init+0x158>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	009a      	lsls	r2, r3, #2
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a42      	ldr	r2, [pc, #264]	@ (8002610 <HAL_DMA_Init+0x164>)
 8002506:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800251e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002522:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800252c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002562:	d039      	beq.n	80025d8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	4a27      	ldr	r2, [pc, #156]	@ (8002608 <HAL_DMA_Init+0x15c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d11a      	bne.n	80025a4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800256e:	4b29      	ldr	r3, [pc, #164]	@ (8002614 <HAL_DMA_Init+0x168>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	f003 031c 	and.w	r3, r3, #28
 800257a:	210f      	movs	r1, #15
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	4924      	ldr	r1, [pc, #144]	@ (8002614 <HAL_DMA_Init+0x168>)
 8002584:	4013      	ands	r3, r2
 8002586:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002588:	4b22      	ldr	r3, [pc, #136]	@ (8002614 <HAL_DMA_Init+0x168>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002594:	f003 031c 	and.w	r3, r3, #28
 8002598:	fa01 f303 	lsl.w	r3, r1, r3
 800259c:	491d      	ldr	r1, [pc, #116]	@ (8002614 <HAL_DMA_Init+0x168>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
 80025a2:	e019      	b.n	80025d8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002618 <HAL_DMA_Init+0x16c>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ac:	f003 031c 	and.w	r3, r3, #28
 80025b0:	210f      	movs	r1, #15
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	4917      	ldr	r1, [pc, #92]	@ (8002618 <HAL_DMA_Init+0x16c>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025be:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <HAL_DMA_Init+0x16c>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6859      	ldr	r1, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	f003 031c 	and.w	r3, r3, #28
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	4911      	ldr	r1, [pc, #68]	@ (8002618 <HAL_DMA_Init+0x16c>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	40020407 	.word	0x40020407
 8002600:	bffdfff8 	.word	0xbffdfff8
 8002604:	cccccccd 	.word	0xcccccccd
 8002608:	40020000 	.word	0x40020000
 800260c:	bffdfbf8 	.word	0xbffdfbf8
 8002610:	40020400 	.word	0x40020400
 8002614:	400200a8 	.word	0x400200a8
 8002618:	400204a8 	.word	0x400204a8

0800261c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_DMA_Start_IT+0x20>
 8002638:	2302      	movs	r3, #2
 800263a:	e04b      	b.n	80026d4 <HAL_DMA_Start_IT+0xb8>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d13a      	bne.n	80026c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0201 	bic.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	68b9      	ldr	r1, [r7, #8]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f95f 	bl	8002938 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 020e 	orr.w	r2, r2, #14
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e00f      	b.n	80026b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0204 	bic.w	r2, r2, #4
 80026a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 020a 	orr.w	r2, r2, #10
 80026b2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e005      	b.n	80026d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
 80026d0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d008      	beq.n	8002706 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2204      	movs	r2, #4
 80026f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e022      	b.n	800274c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 020e 	bic.w	r2, r2, #14
 8002714:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0201 	bic.w	r2, r2, #1
 8002724:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272a:	f003 021c 	and.w	r2, r3, #28
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	2101      	movs	r1, #1
 8002734:	fa01 f202 	lsl.w	r2, r1, r2
 8002738:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d005      	beq.n	800277c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2204      	movs	r2, #4
 8002774:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
 800277a:	e029      	b.n	80027d0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 020e 	bic.w	r2, r2, #14
 800278a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a0:	f003 021c 	and.w	r2, r3, #28
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	2101      	movs	r1, #1
 80027aa:	fa01 f202 	lsl.w	r2, r1, r2
 80027ae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	4798      	blx	r3
    }
  }
  return status;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	f003 031c 	and.w	r3, r3, #28
 80027fa:	2204      	movs	r2, #4
 80027fc:	409a      	lsls	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d026      	beq.n	8002854 <HAL_DMA_IRQHandler+0x7a>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d021      	beq.n	8002854 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d107      	bne.n	800282e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0204 	bic.w	r2, r2, #4
 800282c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	f003 021c 	and.w	r2, r3, #28
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	2104      	movs	r1, #4
 800283c:	fa01 f202 	lsl.w	r2, r1, r2
 8002840:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	2b00      	cmp	r3, #0
 8002848:	d071      	beq.n	800292e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002852:	e06c      	b.n	800292e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002858:	f003 031c 	and.w	r3, r3, #28
 800285c:	2202      	movs	r2, #2
 800285e:	409a      	lsls	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d02e      	beq.n	80028c6 <HAL_DMA_IRQHandler+0xec>
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d029      	beq.n	80028c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 020a 	bic.w	r2, r2, #10
 800288e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289c:	f003 021c 	and.w	r2, r3, #28
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	2102      	movs	r1, #2
 80028a6:	fa01 f202 	lsl.w	r2, r1, r2
 80028aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d038      	beq.n	800292e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80028c4:	e033      	b.n	800292e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ca:	f003 031c 	and.w	r3, r3, #28
 80028ce:	2208      	movs	r2, #8
 80028d0:	409a      	lsls	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d02a      	beq.n	8002930 <HAL_DMA_IRQHandler+0x156>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d025      	beq.n	8002930 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 020e 	bic.w	r2, r2, #14
 80028f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f8:	f003 021c 	and.w	r2, r3, #28
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	2101      	movs	r1, #1
 8002902:	fa01 f202 	lsl.w	r2, r1, r2
 8002906:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002922:	2b00      	cmp	r3, #0
 8002924:	d004      	beq.n	8002930 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800292e:	bf00      	nop
 8002930:	bf00      	nop
}
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	f003 021c 	and.w	r2, r3, #28
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f202 	lsl.w	r2, r1, r2
 8002958:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b10      	cmp	r3, #16
 8002968:	d108      	bne.n	800297c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800297a:	e007      	b.n	800298c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	60da      	str	r2, [r3, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a6:	e17f      	b.n	8002ca8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	2101      	movs	r1, #1
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	4013      	ands	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8171 	beq.w	8002ca2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d005      	beq.n	80029d8 <HAL_GPIO_Init+0x40>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d130      	bne.n	8002a3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a0e:	2201      	movs	r2, #1
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	f003 0201 	and.w	r2, r3, #1
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d118      	bne.n	8002a78 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	08db      	lsrs	r3, r3, #3
 8002a62:	f003 0201 	and.w	r2, r3, #1
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d017      	beq.n	8002ab4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	2203      	movs	r2, #3
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d123      	bne.n	8002b08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	08da      	lsrs	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3208      	adds	r2, #8
 8002ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002acc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	220f      	movs	r2, #15
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	08da      	lsrs	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3208      	adds	r2, #8
 8002b02:	6939      	ldr	r1, [r7, #16]
 8002b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0203 	and.w	r2, r3, #3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80ac 	beq.w	8002ca2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4a:	4b5f      	ldr	r3, [pc, #380]	@ (8002cc8 <HAL_GPIO_Init+0x330>)
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4e:	4a5e      	ldr	r2, [pc, #376]	@ (8002cc8 <HAL_GPIO_Init+0x330>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b56:	4b5c      	ldr	r3, [pc, #368]	@ (8002cc8 <HAL_GPIO_Init+0x330>)
 8002b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b62:	4a5a      	ldr	r2, [pc, #360]	@ (8002ccc <HAL_GPIO_Init+0x334>)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	3302      	adds	r3, #2
 8002b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	220f      	movs	r2, #15
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b8c:	d025      	beq.n	8002bda <HAL_GPIO_Init+0x242>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4f      	ldr	r2, [pc, #316]	@ (8002cd0 <HAL_GPIO_Init+0x338>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01f      	beq.n	8002bd6 <HAL_GPIO_Init+0x23e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4e      	ldr	r2, [pc, #312]	@ (8002cd4 <HAL_GPIO_Init+0x33c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d019      	beq.n	8002bd2 <HAL_GPIO_Init+0x23a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4d      	ldr	r2, [pc, #308]	@ (8002cd8 <HAL_GPIO_Init+0x340>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d013      	beq.n	8002bce <HAL_GPIO_Init+0x236>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8002cdc <HAL_GPIO_Init+0x344>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00d      	beq.n	8002bca <HAL_GPIO_Init+0x232>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8002ce0 <HAL_GPIO_Init+0x348>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d007      	beq.n	8002bc6 <HAL_GPIO_Init+0x22e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ce4 <HAL_GPIO_Init+0x34c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d101      	bne.n	8002bc2 <HAL_GPIO_Init+0x22a>
 8002bbe:	2306      	movs	r3, #6
 8002bc0:	e00c      	b.n	8002bdc <HAL_GPIO_Init+0x244>
 8002bc2:	2307      	movs	r3, #7
 8002bc4:	e00a      	b.n	8002bdc <HAL_GPIO_Init+0x244>
 8002bc6:	2305      	movs	r3, #5
 8002bc8:	e008      	b.n	8002bdc <HAL_GPIO_Init+0x244>
 8002bca:	2304      	movs	r3, #4
 8002bcc:	e006      	b.n	8002bdc <HAL_GPIO_Init+0x244>
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e004      	b.n	8002bdc <HAL_GPIO_Init+0x244>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e002      	b.n	8002bdc <HAL_GPIO_Init+0x244>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_GPIO_Init+0x244>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	f002 0203 	and.w	r2, r2, #3
 8002be2:	0092      	lsls	r2, r2, #2
 8002be4:	4093      	lsls	r3, r2
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bec:	4937      	ldr	r1, [pc, #220]	@ (8002ccc <HAL_GPIO_Init+0x334>)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce8 <HAL_GPIO_Init+0x350>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	43db      	mvns	r3, r3
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4013      	ands	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c1e:	4a32      	ldr	r2, [pc, #200]	@ (8002ce8 <HAL_GPIO_Init+0x350>)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c24:	4b30      	ldr	r3, [pc, #192]	@ (8002ce8 <HAL_GPIO_Init+0x350>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c48:	4a27      	ldr	r2, [pc, #156]	@ (8002ce8 <HAL_GPIO_Init+0x350>)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c4e:	4b26      	ldr	r3, [pc, #152]	@ (8002ce8 <HAL_GPIO_Init+0x350>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c72:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce8 <HAL_GPIO_Init+0x350>)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce8 <HAL_GPIO_Init+0x350>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4013      	ands	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c9c:	4a12      	ldr	r2, [pc, #72]	@ (8002ce8 <HAL_GPIO_Init+0x350>)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f47f ae78 	bne.w	80029a8 <HAL_GPIO_Init+0x10>
  }
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	48000400 	.word	0x48000400
 8002cd4:	48000800 	.word	0x48000800
 8002cd8:	48000c00 	.word	0x48000c00
 8002cdc:	48001000 	.word	0x48001000
 8002ce0:	48001400 	.word	0x48001400
 8002ce4:	48001800 	.word	0x48001800
 8002ce8:	40010400 	.word	0x40010400

08002cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cfc:	787b      	ldrb	r3, [r7, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d02:	887a      	ldrh	r2, [r7, #2]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d08:	e002      	b.n	8002d10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d0a:	887a      	ldrh	r2, [r7, #2]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4013      	ands	r3, r2
 8002d34:	041a      	lsls	r2, r3, #16
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	43d9      	mvns	r1, r3
 8002d3a:	887b      	ldrh	r3, [r7, #2]
 8002d3c:	400b      	ands	r3, r1
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	619a      	str	r2, [r3, #24]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d54:	4b04      	ldr	r3, [pc, #16]	@ (8002d68 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40007000 	.word	0x40007000

08002d6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d7a:	d130      	bne.n	8002dde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d7c:	4b23      	ldr	r3, [pc, #140]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d88:	d038      	beq.n	8002dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d8a:	4b20      	ldr	r3, [pc, #128]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d92:	4a1e      	ldr	r2, [pc, #120]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2232      	movs	r2, #50	@ 0x32
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0c9b      	lsrs	r3, r3, #18
 8002dac:	3301      	adds	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002db0:	e002      	b.n	8002db8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002db8:	4b14      	ldr	r3, [pc, #80]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc4:	d102      	bne.n	8002dcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f2      	bne.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd8:	d110      	bne.n	8002dfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e00f      	b.n	8002dfe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dde:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dea:	d007      	beq.n	8002dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dec:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002df4:	4a05      	ldr	r2, [pc, #20]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dfa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	20000000 	.word	0x20000000
 8002e14:	431bde83 	.word	0x431bde83

08002e18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e3ca      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e2a:	4b97      	ldr	r3, [pc, #604]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e34:	4b94      	ldr	r3, [pc, #592]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 80e4 	beq.w	8003014 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <HAL_RCC_OscConfig+0x4a>
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	f040 808b 	bne.w	8002f70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	f040 8087 	bne.w	8002f70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e62:	4b89      	ldr	r3, [pc, #548]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_RCC_OscConfig+0x62>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e3a2      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1a      	ldr	r2, [r3, #32]
 8002e7e:	4b82      	ldr	r3, [pc, #520]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <HAL_RCC_OscConfig+0x7c>
 8002e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e92:	e005      	b.n	8002ea0 <HAL_RCC_OscConfig+0x88>
 8002e94:	4b7c      	ldr	r3, [pc, #496]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d223      	bcs.n	8002eec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fd87 	bl	80039bc <RCC_SetFlashLatencyFromMSIRange>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e383      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eb8:	4b73      	ldr	r3, [pc, #460]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a72      	ldr	r2, [pc, #456]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ebe:	f043 0308 	orr.w	r3, r3, #8
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	4b70      	ldr	r3, [pc, #448]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	496d      	ldr	r1, [pc, #436]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ed6:	4b6c      	ldr	r3, [pc, #432]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	4968      	ldr	r1, [pc, #416]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]
 8002eea:	e025      	b.n	8002f38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eec:	4b66      	ldr	r3, [pc, #408]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a65      	ldr	r2, [pc, #404]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ef2:	f043 0308 	orr.w	r3, r3, #8
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	4b63      	ldr	r3, [pc, #396]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4960      	ldr	r1, [pc, #384]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f0a:	4b5f      	ldr	r3, [pc, #380]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	495b      	ldr	r1, [pc, #364]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fd47 	bl	80039bc <RCC_SetFlashLatencyFromMSIRange>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e343      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f38:	f000 fc4a 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b52      	ldr	r3, [pc, #328]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	091b      	lsrs	r3, r3, #4
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	4950      	ldr	r1, [pc, #320]	@ (800308c <HAL_RCC_OscConfig+0x274>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
 8002f54:	4a4e      	ldr	r2, [pc, #312]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f58:	4b4e      	ldr	r3, [pc, #312]	@ (8003094 <HAL_RCC_OscConfig+0x27c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe fd45 	bl	80019ec <HAL_InitTick>
 8002f62:	4603      	mov	r3, r0
 8002f64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d052      	beq.n	8003012 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	e327      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d032      	beq.n	8002fde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f78:	4b43      	ldr	r3, [pc, #268]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a42      	ldr	r2, [pc, #264]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f84:	f7ff f9a4 	bl	80022d0 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f8c:	f7ff f9a0 	bl	80022d0 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e310      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002faa:	4b37      	ldr	r3, [pc, #220]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a36      	ldr	r2, [pc, #216]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fb0:	f043 0308 	orr.w	r3, r3, #8
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	4b34      	ldr	r3, [pc, #208]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	4931      	ldr	r1, [pc, #196]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	492c      	ldr	r1, [pc, #176]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
 8002fdc:	e01a      	b.n	8003014 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fde:	4b2a      	ldr	r3, [pc, #168]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a29      	ldr	r2, [pc, #164]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fea:	f7ff f971 	bl	80022d0 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ff2:	f7ff f96d 	bl	80022d0 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e2dd      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003004:	4b20      	ldr	r3, [pc, #128]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f0      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x1da>
 8003010:	e000      	b.n	8003014 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003012:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d074      	beq.n	800310a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b08      	cmp	r3, #8
 8003024:	d005      	beq.n	8003032 <HAL_RCC_OscConfig+0x21a>
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	d10e      	bne.n	800304a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b03      	cmp	r3, #3
 8003030:	d10b      	bne.n	800304a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003032:	4b15      	ldr	r3, [pc, #84]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d064      	beq.n	8003108 <HAL_RCC_OscConfig+0x2f0>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d160      	bne.n	8003108 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e2ba      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x24a>
 8003054:	4b0c      	ldr	r3, [pc, #48]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0b      	ldr	r2, [pc, #44]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 800305a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	e026      	b.n	80030b0 <HAL_RCC_OscConfig+0x298>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800306a:	d115      	bne.n	8003098 <HAL_RCC_OscConfig+0x280>
 800306c:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a05      	ldr	r2, [pc, #20]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8003072:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	4b03      	ldr	r3, [pc, #12]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a02      	ldr	r2, [pc, #8]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 800307e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	e014      	b.n	80030b0 <HAL_RCC_OscConfig+0x298>
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	0800c8a0 	.word	0x0800c8a0
 8003090:	20000000 	.word	0x20000000
 8003094:	20000004 	.word	0x20000004
 8003098:	4ba0      	ldr	r3, [pc, #640]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a9f      	ldr	r2, [pc, #636]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 800309e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b9d      	ldr	r3, [pc, #628]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a9c      	ldr	r2, [pc, #624]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80030aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7ff f90a 	bl	80022d0 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c0:	f7ff f906 	bl	80022d0 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	@ 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e276      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d2:	4b92      	ldr	r3, [pc, #584]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x2a8>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7ff f8f6 	bl	80022d0 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7ff f8f2 	bl	80022d0 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	@ 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e262      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030fa:	4b88      	ldr	r3, [pc, #544]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x2d0>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d060      	beq.n	80031d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d005      	beq.n	8003128 <HAL_RCC_OscConfig+0x310>
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b0c      	cmp	r3, #12
 8003120:	d119      	bne.n	8003156 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d116      	bne.n	8003156 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003128:	4b7c      	ldr	r3, [pc, #496]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_OscConfig+0x328>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e23f      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003140:	4b76      	ldr	r3, [pc, #472]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	061b      	lsls	r3, r3, #24
 800314e:	4973      	ldr	r1, [pc, #460]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003150:	4313      	orrs	r3, r2
 8003152:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003154:	e040      	b.n	80031d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d023      	beq.n	80031a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800315e:	4b6f      	ldr	r3, [pc, #444]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6e      	ldr	r2, [pc, #440]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7ff f8b1 	bl	80022d0 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003172:	f7ff f8ad 	bl	80022d0 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e21d      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003184:	4b65      	ldr	r3, [pc, #404]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b62      	ldr	r3, [pc, #392]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	061b      	lsls	r3, r3, #24
 800319e:	495f      	ldr	r1, [pc, #380]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
 80031a4:	e018      	b.n	80031d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b5d      	ldr	r3, [pc, #372]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a5c      	ldr	r2, [pc, #368]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80031ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b2:	f7ff f88d 	bl	80022d0 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ba:	f7ff f889 	bl	80022d0 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e1f9      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031cc:	4b53      	ldr	r3, [pc, #332]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f0      	bne.n	80031ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d03c      	beq.n	800325e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01c      	beq.n	8003226 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ec:	4b4b      	ldr	r3, [pc, #300]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80031ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031f2:	4a4a      	ldr	r2, [pc, #296]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7ff f868 	bl	80022d0 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003204:	f7ff f864 	bl	80022d0 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e1d4      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003216:	4b41      	ldr	r3, [pc, #260]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ef      	beq.n	8003204 <HAL_RCC_OscConfig+0x3ec>
 8003224:	e01b      	b.n	800325e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003226:	4b3d      	ldr	r3, [pc, #244]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800322c:	4a3b      	ldr	r2, [pc, #236]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003236:	f7ff f84b 	bl	80022d0 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323e:	f7ff f847 	bl	80022d0 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e1b7      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003250:	4b32      	ldr	r3, [pc, #200]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ef      	bne.n	800323e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80a6 	beq.w	80033b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326c:	2300      	movs	r3, #0
 800326e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003270:	4b2a      	ldr	r3, [pc, #168]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10d      	bne.n	8003298 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327c:	4b27      	ldr	r3, [pc, #156]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	4a26      	ldr	r2, [pc, #152]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003286:	6593      	str	r3, [r2, #88]	@ 0x58
 8003288:	4b24      	ldr	r3, [pc, #144]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003294:	2301      	movs	r3, #1
 8003296:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003298:	4b21      	ldr	r3, [pc, #132]	@ (8003320 <HAL_RCC_OscConfig+0x508>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d118      	bne.n	80032d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003320 <HAL_RCC_OscConfig+0x508>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003320 <HAL_RCC_OscConfig+0x508>)
 80032aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b0:	f7ff f80e 	bl	80022d0 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b8:	f7ff f80a 	bl	80022d0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e17a      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ca:	4b15      	ldr	r3, [pc, #84]	@ (8003320 <HAL_RCC_OscConfig+0x508>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d108      	bne.n	80032f0 <HAL_RCC_OscConfig+0x4d8>
 80032de:	4b0f      	ldr	r3, [pc, #60]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e4:	4a0d      	ldr	r2, [pc, #52]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032ee:	e029      	b.n	8003344 <HAL_RCC_OscConfig+0x52c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d115      	bne.n	8003324 <HAL_RCC_OscConfig+0x50c>
 80032f8:	4b08      	ldr	r3, [pc, #32]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fe:	4a07      	ldr	r2, [pc, #28]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003308:	4b04      	ldr	r3, [pc, #16]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330e:	4a03      	ldr	r2, [pc, #12]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003318:	e014      	b.n	8003344 <HAL_RCC_OscConfig+0x52c>
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	40007000 	.word	0x40007000
 8003324:	4b9c      	ldr	r3, [pc, #624]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332a:	4a9b      	ldr	r2, [pc, #620]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003334:	4b98      	ldr	r3, [pc, #608]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333a:	4a97      	ldr	r2, [pc, #604]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 800333c:	f023 0304 	bic.w	r3, r3, #4
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d016      	beq.n	800337a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fe ffc0 	bl	80022d0 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fe ffbc 	bl	80022d0 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e12a      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800336a:	4b8b      	ldr	r3, [pc, #556]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ed      	beq.n	8003354 <HAL_RCC_OscConfig+0x53c>
 8003378:	e015      	b.n	80033a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fe ffa9 	bl	80022d0 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fe ffa5 	bl	80022d0 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e113      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003398:	4b7f      	ldr	r3, [pc, #508]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1ed      	bne.n	8003382 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033a6:	7ffb      	ldrb	r3, [r7, #31]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d105      	bne.n	80033b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ac:	4b7a      	ldr	r3, [pc, #488]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b0:	4a79      	ldr	r2, [pc, #484]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 80033b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80fe 	beq.w	80035be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	f040 80d0 	bne.w	800356c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033cc:	4b72      	ldr	r3, [pc, #456]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f003 0203 	and.w	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033dc:	429a      	cmp	r2, r3
 80033de:	d130      	bne.n	8003442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	3b01      	subs	r3, #1
 80033ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d127      	bne.n	8003442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d11f      	bne.n	8003442 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800340c:	2a07      	cmp	r2, #7
 800340e:	bf14      	ite	ne
 8003410:	2201      	movne	r2, #1
 8003412:	2200      	moveq	r2, #0
 8003414:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003416:	4293      	cmp	r3, r2
 8003418:	d113      	bne.n	8003442 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003424:	085b      	lsrs	r3, r3, #1
 8003426:	3b01      	subs	r3, #1
 8003428:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800342a:	429a      	cmp	r2, r3
 800342c:	d109      	bne.n	8003442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	3b01      	subs	r3, #1
 800343c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d06e      	beq.n	8003520 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b0c      	cmp	r3, #12
 8003446:	d069      	beq.n	800351c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003448:	4b53      	ldr	r3, [pc, #332]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003454:	4b50      	ldr	r3, [pc, #320]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0ad      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003464:	4b4c      	ldr	r3, [pc, #304]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a4b      	ldr	r2, [pc, #300]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 800346a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800346e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003470:	f7fe ff2e 	bl	80022d0 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003478:	f7fe ff2a 	bl	80022d0 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e09a      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800348a:	4b43      	ldr	r3, [pc, #268]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003496:	4b40      	ldr	r3, [pc, #256]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	4b40      	ldr	r3, [pc, #256]	@ (800359c <HAL_RCC_OscConfig+0x784>)
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034a6:	3a01      	subs	r2, #1
 80034a8:	0112      	lsls	r2, r2, #4
 80034aa:	4311      	orrs	r1, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034b0:	0212      	lsls	r2, r2, #8
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034b8:	0852      	lsrs	r2, r2, #1
 80034ba:	3a01      	subs	r2, #1
 80034bc:	0552      	lsls	r2, r2, #21
 80034be:	4311      	orrs	r1, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80034c4:	0852      	lsrs	r2, r2, #1
 80034c6:	3a01      	subs	r2, #1
 80034c8:	0652      	lsls	r2, r2, #25
 80034ca:	4311      	orrs	r1, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034d0:	0912      	lsrs	r2, r2, #4
 80034d2:	0452      	lsls	r2, r2, #17
 80034d4:	430a      	orrs	r2, r1
 80034d6:	4930      	ldr	r1, [pc, #192]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a2d      	ldr	r2, [pc, #180]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 80034e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 80034ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034f4:	f7fe feec 	bl	80022d0 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fe fee8 	bl	80022d0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e058      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350e:	4b22      	ldr	r3, [pc, #136]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800351a:	e050      	b.n	80035be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e04f      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003520:	4b1d      	ldr	r3, [pc, #116]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d148      	bne.n	80035be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800352c:	4b1a      	ldr	r3, [pc, #104]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a19      	ldr	r2, [pc, #100]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 8003532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003536:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003538:	4b17      	ldr	r3, [pc, #92]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4a16      	ldr	r2, [pc, #88]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 800353e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003542:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003544:	f7fe fec4 	bl	80022d0 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354c:	f7fe fec0 	bl	80022d0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e030      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355e:	4b0e      	ldr	r3, [pc, #56]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x734>
 800356a:	e028      	b.n	80035be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d023      	beq.n	80035ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003572:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a08      	ldr	r2, [pc, #32]	@ (8003598 <HAL_RCC_OscConfig+0x780>)
 8003578:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800357c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357e:	f7fe fea7 	bl	80022d0 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003584:	e00c      	b.n	80035a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003586:	f7fe fea3 	bl	80022d0 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d905      	bls.n	80035a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e013      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
 8003598:	40021000 	.word	0x40021000
 800359c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a0:	4b09      	ldr	r3, [pc, #36]	@ (80035c8 <HAL_RCC_OscConfig+0x7b0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ec      	bne.n	8003586 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035ac:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <HAL_RCC_OscConfig+0x7b0>)
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	4905      	ldr	r1, [pc, #20]	@ (80035c8 <HAL_RCC_OscConfig+0x7b0>)
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <HAL_RCC_OscConfig+0x7b4>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	60cb      	str	r3, [r1, #12]
 80035b8:	e001      	b.n	80035be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3720      	adds	r7, #32
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40021000 	.word	0x40021000
 80035cc:	feeefffc 	.word	0xfeeefffc

080035d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0e7      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b75      	ldr	r3, [pc, #468]	@ (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d910      	bls.n	8003614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b72      	ldr	r3, [pc, #456]	@ (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 0207 	bic.w	r2, r3, #7
 80035fa:	4970      	ldr	r1, [pc, #448]	@ (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b6e      	ldr	r3, [pc, #440]	@ (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0cf      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d010      	beq.n	8003642 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	4b66      	ldr	r3, [pc, #408]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800362c:	429a      	cmp	r2, r3
 800362e:	d908      	bls.n	8003642 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003630:	4b63      	ldr	r3, [pc, #396]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4960      	ldr	r1, [pc, #384]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d04c      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b03      	cmp	r3, #3
 8003654:	d107      	bne.n	8003666 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003656:	4b5a      	ldr	r3, [pc, #360]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d121      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e0a6      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366e:	4b54      	ldr	r3, [pc, #336]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d115      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e09a      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003686:	4b4e      	ldr	r3, [pc, #312]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e08e      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003696:	4b4a      	ldr	r3, [pc, #296]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e086      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036a6:	4b46      	ldr	r3, [pc, #280]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4943      	ldr	r1, [pc, #268]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b8:	f7fe fe0a 	bl	80022d0 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c0:	f7fe fe06 	bl	80022d0 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e06e      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	4b3a      	ldr	r3, [pc, #232]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 020c 	and.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d1eb      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d010      	beq.n	8003716 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	4b31      	ldr	r3, [pc, #196]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003700:	429a      	cmp	r2, r3
 8003702:	d208      	bcs.n	8003716 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003704:	4b2e      	ldr	r3, [pc, #184]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	492b      	ldr	r1, [pc, #172]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003716:	4b29      	ldr	r3, [pc, #164]	@ (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d210      	bcs.n	8003746 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003724:	4b25      	ldr	r3, [pc, #148]	@ (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f023 0207 	bic.w	r2, r3, #7
 800372c:	4923      	ldr	r1, [pc, #140]	@ (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003734:	4b21      	ldr	r3, [pc, #132]	@ (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d001      	beq.n	8003746 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e036      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003752:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	4918      	ldr	r1, [pc, #96]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003760:	4313      	orrs	r3, r2
 8003762:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d009      	beq.n	8003784 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003770:	4b13      	ldr	r3, [pc, #76]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4910      	ldr	r1, [pc, #64]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	4313      	orrs	r3, r2
 8003782:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003784:	f000 f824 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b0d      	ldr	r3, [pc, #52]	@ (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	091b      	lsrs	r3, r3, #4
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	490b      	ldr	r1, [pc, #44]	@ (80037c4 <HAL_RCC_ClockConfig+0x1f4>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
 80037a0:	4a09      	ldr	r2, [pc, #36]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f8>)
 80037a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037a4:	4b09      	ldr	r3, [pc, #36]	@ (80037cc <HAL_RCC_ClockConfig+0x1fc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fe f91f 	bl	80019ec <HAL_InitTick>
 80037ae:	4603      	mov	r3, r0
 80037b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80037b2:	7afb      	ldrb	r3, [r7, #11]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40021000 	.word	0x40021000
 80037c4:	0800c8a0 	.word	0x0800c8a0
 80037c8:	20000000 	.word	0x20000000
 80037cc:	20000004 	.word	0x20000004

080037d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	@ 0x24
 80037d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	2300      	movs	r3, #0
 80037dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037de:	4b3e      	ldr	r3, [pc, #248]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037e8:	4b3b      	ldr	r3, [pc, #236]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x34>
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d121      	bne.n	8003842 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d11e      	bne.n	8003842 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003804:	4b34      	ldr	r3, [pc, #208]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d107      	bne.n	8003820 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003810:	4b31      	ldr	r3, [pc, #196]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	e005      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003820:	4b2d      	ldr	r3, [pc, #180]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800382c:	4a2b      	ldr	r2, [pc, #172]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003834:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10d      	bne.n	8003858 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003840:	e00a      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d102      	bne.n	800384e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003848:	4b25      	ldr	r3, [pc, #148]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	e004      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d101      	bne.n	8003858 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003854:	4b23      	ldr	r3, [pc, #140]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003856:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b0c      	cmp	r3, #12
 800385c:	d134      	bne.n	80038c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800385e:	4b1e      	ldr	r3, [pc, #120]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d003      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0xa6>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d003      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0xac>
 8003874:	e005      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003876:	4b1a      	ldr	r3, [pc, #104]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003878:	617b      	str	r3, [r7, #20]
      break;
 800387a:	e005      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800387c:	4b19      	ldr	r3, [pc, #100]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800387e:	617b      	str	r3, [r7, #20]
      break;
 8003880:	e002      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	617b      	str	r3, [r7, #20]
      break;
 8003886:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003888:	4b13      	ldr	r3, [pc, #76]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	3301      	adds	r3, #1
 8003894:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003896:	4b10      	ldr	r3, [pc, #64]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	fb03 f202 	mul.w	r2, r3, r2
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038ae:	4b0a      	ldr	r3, [pc, #40]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	0e5b      	lsrs	r3, r3, #25
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	3301      	adds	r3, #1
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038c8:	69bb      	ldr	r3, [r7, #24]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3724      	adds	r7, #36	@ 0x24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000
 80038dc:	0800c8b8 	.word	0x0800c8b8
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	007a1200 	.word	0x007a1200

080038e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b03      	ldr	r3, [pc, #12]	@ (80038fc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000000 	.word	0x20000000

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003904:	f7ff fff0 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b06      	ldr	r3, [pc, #24]	@ (8003924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4904      	ldr	r1, [pc, #16]	@ (8003928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	0800c8b0 	.word	0x0800c8b0

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003930:	f7ff ffda 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0adb      	lsrs	r3, r3, #11
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4904      	ldr	r1, [pc, #16]	@ (8003954 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	0800c8b0 	.word	0x0800c8b0

08003958 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	220f      	movs	r2, #15
 8003966:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003968:	4b12      	ldr	r3, [pc, #72]	@ (80039b4 <HAL_RCC_GetClockConfig+0x5c>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0203 	and.w	r2, r3, #3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003974:	4b0f      	ldr	r3, [pc, #60]	@ (80039b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003980:	4b0c      	ldr	r3, [pc, #48]	@ (80039b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800398c:	4b09      	ldr	r3, [pc, #36]	@ (80039b4 <HAL_RCC_GetClockConfig+0x5c>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	08db      	lsrs	r3, r3, #3
 8003992:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800399a:	4b07      	ldr	r3, [pc, #28]	@ (80039b8 <HAL_RCC_GetClockConfig+0x60>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0207 	and.w	r2, r3, #7
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	601a      	str	r2, [r3, #0]
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40022000 	.word	0x40022000

080039bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039d4:	f7ff f9bc 	bl	8002d50 <HAL_PWREx_GetVoltageRange>
 80039d8:	6178      	str	r0, [r7, #20]
 80039da:	e014      	b.n	8003a06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039dc:	4b25      	ldr	r3, [pc, #148]	@ (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e0:	4a24      	ldr	r2, [pc, #144]	@ (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80039e8:	4b22      	ldr	r3, [pc, #136]	@ (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039f4:	f7ff f9ac 	bl	8002d50 <HAL_PWREx_GetVoltageRange>
 80039f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a0c:	d10b      	bne.n	8003a26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b80      	cmp	r3, #128	@ 0x80
 8003a12:	d919      	bls.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a18:	d902      	bls.n	8003a20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	e013      	b.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a20:	2301      	movs	r3, #1
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	e010      	b.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b80      	cmp	r3, #128	@ 0x80
 8003a2a:	d902      	bls.n	8003a32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	e00a      	b.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b80      	cmp	r3, #128	@ 0x80
 8003a36:	d102      	bne.n	8003a3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a38:	2302      	movs	r3, #2
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	e004      	b.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b70      	cmp	r3, #112	@ 0x70
 8003a42:	d101      	bne.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a44:	2301      	movs	r3, #1
 8003a46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a48:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 0207 	bic.w	r2, r3, #7
 8003a50:	4909      	ldr	r1, [pc, #36]	@ (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a58:	4b07      	ldr	r3, [pc, #28]	@ (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d001      	beq.n	8003a6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40022000 	.word	0x40022000

08003a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a84:	2300      	movs	r3, #0
 8003a86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a88:	2300      	movs	r3, #0
 8003a8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d041      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003aa0:	d02a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003aa2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003aa6:	d824      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003aa8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003aac:	d008      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003aae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ab2:	d81e      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ab8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003abc:	d010      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003abe:	e018      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ac0:	4b86      	ldr	r3, [pc, #536]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a85      	ldr	r2, [pc, #532]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003acc:	e015      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fabb 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003ada:	4603      	mov	r3, r0
 8003adc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ade:	e00c      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3320      	adds	r3, #32
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fba6 	bl	8004238 <RCCEx_PLLSAI2_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003af0:	e003      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	74fb      	strb	r3, [r7, #19]
      break;
 8003af6:	e000      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afa:	7cfb      	ldrb	r3, [r7, #19]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b00:	4b76      	ldr	r3, [pc, #472]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b0e:	4973      	ldr	r1, [pc, #460]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b16:	e001      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d041      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b30:	d02a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b36:	d824      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b3c:	d008      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b42:	d81e      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b4c:	d010      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b4e:	e018      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b50:	4b62      	ldr	r3, [pc, #392]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4a61      	ldr	r2, [pc, #388]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b5c:	e015      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3304      	adds	r3, #4
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fa73 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b6e:	e00c      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3320      	adds	r3, #32
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fb5e 	bl	8004238 <RCCEx_PLLSAI2_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b80:	e003      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	74fb      	strb	r3, [r7, #19]
      break;
 8003b86:	e000      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10b      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b90:	4b52      	ldr	r3, [pc, #328]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b9e:	494f      	ldr	r1, [pc, #316]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ba6:	e001      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80a0 	beq.w	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bbe:	4b47      	ldr	r3, [pc, #284]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd4:	4b41      	ldr	r3, [pc, #260]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd8:	4a40      	ldr	r2, [pc, #256]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8003be0:	4b3e      	ldr	r3, [pc, #248]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bec:	2301      	movs	r3, #1
 8003bee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bfc:	f7fe fb68 	bl	80022d0 <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c02:	e009      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c04:	f7fe fb64 	bl	80022d0 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d902      	bls.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	74fb      	strb	r3, [r7, #19]
        break;
 8003c16:	e005      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c18:	4b31      	ldr	r3, [pc, #196]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ef      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c24:	7cfb      	ldrb	r3, [r7, #19]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d15c      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01f      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d019      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c48:	4b24      	ldr	r3, [pc, #144]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c54:	4b21      	ldr	r3, [pc, #132]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	4a20      	ldr	r2, [pc, #128]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c64:	4b1d      	ldr	r3, [pc, #116]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c74:	4a19      	ldr	r2, [pc, #100]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c86:	f7fe fb23 	bl	80022d0 <HAL_GetTick>
 8003c8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c8c:	e00b      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8e:	f7fe fb1f 	bl	80022d0 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d902      	bls.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ca4:	e006      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ec      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10c      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cba:	4b08      	ldr	r3, [pc, #32]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cca:	4904      	ldr	r1, [pc, #16]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cd2:	e009      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	74bb      	strb	r3, [r7, #18]
 8003cd8:	e006      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce8:	7c7b      	ldrb	r3, [r7, #17]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d105      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cee:	4b9e      	ldr	r3, [pc, #632]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf2:	4a9d      	ldr	r2, [pc, #628]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d06:	4b98      	ldr	r3, [pc, #608]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0c:	f023 0203 	bic.w	r2, r3, #3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d14:	4994      	ldr	r1, [pc, #592]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d28:	4b8f      	ldr	r3, [pc, #572]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2e:	f023 020c 	bic.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d36:	498c      	ldr	r1, [pc, #560]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d4a:	4b87      	ldr	r3, [pc, #540]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	4983      	ldr	r1, [pc, #524]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	497b      	ldr	r1, [pc, #492]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d8e:	4b76      	ldr	r3, [pc, #472]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d9c:	4972      	ldr	r1, [pc, #456]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003db0:	4b6d      	ldr	r3, [pc, #436]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dbe:	496a      	ldr	r1, [pc, #424]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dd2:	4b65      	ldr	r3, [pc, #404]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de0:	4961      	ldr	r1, [pc, #388]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003df4:	4b5c      	ldr	r3, [pc, #368]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e02:	4959      	ldr	r1, [pc, #356]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e16:	4b54      	ldr	r3, [pc, #336]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e24:	4950      	ldr	r1, [pc, #320]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e38:	4b4b      	ldr	r3, [pc, #300]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e46:	4948      	ldr	r1, [pc, #288]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e5a:	4b43      	ldr	r3, [pc, #268]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e68:	493f      	ldr	r1, [pc, #252]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d028      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e7c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e8a:	4937      	ldr	r1, [pc, #220]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e9a:	d106      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e9c:	4b32      	ldr	r3, [pc, #200]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a31      	ldr	r2, [pc, #196]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ea6:	60d3      	str	r3, [r2, #12]
 8003ea8:	e011      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eb2:	d10c      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	2101      	movs	r1, #1
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f8c8 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003eca:	7cfb      	ldrb	r3, [r7, #19]
 8003ecc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d028      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003eda:	4b23      	ldr	r3, [pc, #140]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee8:	491f      	ldr	r1, [pc, #124]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ef8:	d106      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003efa:	4b1b      	ldr	r3, [pc, #108]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	4a1a      	ldr	r2, [pc, #104]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f04:	60d3      	str	r3, [r2, #12]
 8003f06:	e011      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	2101      	movs	r1, #1
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f899 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f22:	7cfb      	ldrb	r3, [r7, #19]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f28:	7cfb      	ldrb	r3, [r7, #19]
 8003f2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d02b      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f38:	4b0b      	ldr	r3, [pc, #44]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f46:	4908      	ldr	r1, [pc, #32]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f56:	d109      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f58:	4b03      	ldr	r3, [pc, #12]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a02      	ldr	r2, [pc, #8]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f62:	60d3      	str	r3, [r2, #12]
 8003f64:	e014      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f867 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f86:	7cfb      	ldrb	r3, [r7, #19]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02f      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003faa:	4928      	ldr	r1, [pc, #160]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fba:	d10d      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2102      	movs	r1, #2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f844 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d014      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fd2:	7cfb      	ldrb	r3, [r7, #19]
 8003fd4:	74bb      	strb	r3, [r7, #18]
 8003fd6:	e011      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3320      	adds	r3, #32
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f925 	bl	8004238 <RCCEx_PLLSAI2_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004008:	4b10      	ldr	r3, [pc, #64]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004016:	490d      	ldr	r1, [pc, #52]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800402a:	4b08      	ldr	r3, [pc, #32]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004030:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800403a:	4904      	ldr	r1, [pc, #16]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004042:	7cbb      	ldrb	r3, [r7, #18]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40021000 	.word	0x40021000

08004050 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800405e:	4b75      	ldr	r3, [pc, #468]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d018      	beq.n	800409c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800406a:	4b72      	ldr	r3, [pc, #456]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0203 	and.w	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d10d      	bne.n	8004096 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
       ||
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004082:	4b6c      	ldr	r3, [pc, #432]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
       ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d047      	beq.n	8004126 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
 800409a:	e044      	b.n	8004126 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d018      	beq.n	80040d6 <RCCEx_PLLSAI1_Config+0x86>
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d825      	bhi.n	80040f4 <RCCEx_PLLSAI1_Config+0xa4>
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d002      	beq.n	80040b2 <RCCEx_PLLSAI1_Config+0x62>
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d009      	beq.n	80040c4 <RCCEx_PLLSAI1_Config+0x74>
 80040b0:	e020      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040b2:	4b60      	ldr	r3, [pc, #384]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d11d      	bne.n	80040fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c2:	e01a      	b.n	80040fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d116      	bne.n	80040fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d4:	e013      	b.n	80040fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040d6:	4b57      	ldr	r3, [pc, #348]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10f      	bne.n	8004102 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040e2:	4b54      	ldr	r3, [pc, #336]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040f2:	e006      	b.n	8004102 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	73fb      	strb	r3, [r7, #15]
      break;
 80040f8:	e004      	b.n	8004104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040fa:	bf00      	nop
 80040fc:	e002      	b.n	8004104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004102:	bf00      	nop
    }

    if(status == HAL_OK)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10d      	bne.n	8004126 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800410a:	4b4a      	ldr	r3, [pc, #296]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6819      	ldr	r1, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	3b01      	subs	r3, #1
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	430b      	orrs	r3, r1
 8004120:	4944      	ldr	r1, [pc, #272]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d17d      	bne.n	8004228 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800412c:	4b41      	ldr	r3, [pc, #260]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a40      	ldr	r2, [pc, #256]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004132:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004138:	f7fe f8ca 	bl	80022d0 <HAL_GetTick>
 800413c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800413e:	e009      	b.n	8004154 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004140:	f7fe f8c6 	bl	80022d0 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d902      	bls.n	8004154 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	73fb      	strb	r3, [r7, #15]
        break;
 8004152:	e005      	b.n	8004160 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004154:	4b37      	ldr	r3, [pc, #220]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ef      	bne.n	8004140 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d160      	bne.n	8004228 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d111      	bne.n	8004190 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800416c:	4b31      	ldr	r3, [pc, #196]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6892      	ldr	r2, [r2, #8]
 800417c:	0211      	lsls	r1, r2, #8
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68d2      	ldr	r2, [r2, #12]
 8004182:	0912      	lsrs	r2, r2, #4
 8004184:	0452      	lsls	r2, r2, #17
 8004186:	430a      	orrs	r2, r1
 8004188:	492a      	ldr	r1, [pc, #168]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418a:	4313      	orrs	r3, r2
 800418c:	610b      	str	r3, [r1, #16]
 800418e:	e027      	b.n	80041e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d112      	bne.n	80041bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004196:	4b27      	ldr	r3, [pc, #156]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800419e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6892      	ldr	r2, [r2, #8]
 80041a6:	0211      	lsls	r1, r2, #8
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6912      	ldr	r2, [r2, #16]
 80041ac:	0852      	lsrs	r2, r2, #1
 80041ae:	3a01      	subs	r2, #1
 80041b0:	0552      	lsls	r2, r2, #21
 80041b2:	430a      	orrs	r2, r1
 80041b4:	491f      	ldr	r1, [pc, #124]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	610b      	str	r3, [r1, #16]
 80041ba:	e011      	b.n	80041e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6892      	ldr	r2, [r2, #8]
 80041cc:	0211      	lsls	r1, r2, #8
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6952      	ldr	r2, [r2, #20]
 80041d2:	0852      	lsrs	r2, r2, #1
 80041d4:	3a01      	subs	r2, #1
 80041d6:	0652      	lsls	r2, r2, #25
 80041d8:	430a      	orrs	r2, r1
 80041da:	4916      	ldr	r1, [pc, #88]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041e0:	4b14      	ldr	r3, [pc, #80]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a13      	ldr	r2, [pc, #76]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ec:	f7fe f870 	bl	80022d0 <HAL_GetTick>
 80041f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041f2:	e009      	b.n	8004208 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041f4:	f7fe f86c 	bl	80022d0 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d902      	bls.n	8004208 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	73fb      	strb	r3, [r7, #15]
          break;
 8004206:	e005      	b.n	8004214 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004208:	4b0a      	ldr	r3, [pc, #40]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0ef      	beq.n	80041f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800421a:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	4904      	ldr	r1, [pc, #16]	@ (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004224:	4313      	orrs	r3, r2
 8004226:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40021000 	.word	0x40021000

08004238 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004246:	4b6a      	ldr	r3, [pc, #424]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d018      	beq.n	8004284 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004252:	4b67      	ldr	r3, [pc, #412]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0203 	and.w	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d10d      	bne.n	800427e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
       ||
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800426a:	4b61      	ldr	r3, [pc, #388]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	091b      	lsrs	r3, r3, #4
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
       ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d047      	beq.n	800430e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
 8004282:	e044      	b.n	800430e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d018      	beq.n	80042be <RCCEx_PLLSAI2_Config+0x86>
 800428c:	2b03      	cmp	r3, #3
 800428e:	d825      	bhi.n	80042dc <RCCEx_PLLSAI2_Config+0xa4>
 8004290:	2b01      	cmp	r3, #1
 8004292:	d002      	beq.n	800429a <RCCEx_PLLSAI2_Config+0x62>
 8004294:	2b02      	cmp	r3, #2
 8004296:	d009      	beq.n	80042ac <RCCEx_PLLSAI2_Config+0x74>
 8004298:	e020      	b.n	80042dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800429a:	4b55      	ldr	r3, [pc, #340]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d11d      	bne.n	80042e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042aa:	e01a      	b.n	80042e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042ac:	4b50      	ldr	r3, [pc, #320]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d116      	bne.n	80042e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042bc:	e013      	b.n	80042e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042be:	4b4c      	ldr	r3, [pc, #304]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10f      	bne.n	80042ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ca:	4b49      	ldr	r3, [pc, #292]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042da:	e006      	b.n	80042ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
      break;
 80042e0:	e004      	b.n	80042ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042e2:	bf00      	nop
 80042e4:	e002      	b.n	80042ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042e6:	bf00      	nop
 80042e8:	e000      	b.n	80042ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10d      	bne.n	800430e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042f2:	4b3f      	ldr	r3, [pc, #252]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	3b01      	subs	r3, #1
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	430b      	orrs	r3, r1
 8004308:	4939      	ldr	r1, [pc, #228]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430a:	4313      	orrs	r3, r2
 800430c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d167      	bne.n	80043e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004314:	4b36      	ldr	r3, [pc, #216]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a35      	ldr	r2, [pc, #212]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800431e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004320:	f7fd ffd6 	bl	80022d0 <HAL_GetTick>
 8004324:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004326:	e009      	b.n	800433c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004328:	f7fd ffd2 	bl	80022d0 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d902      	bls.n	800433c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	73fb      	strb	r3, [r7, #15]
        break;
 800433a:	e005      	b.n	8004348 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800433c:	4b2c      	ldr	r3, [pc, #176]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ef      	bne.n	8004328 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d14a      	bne.n	80043e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d111      	bne.n	8004378 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004354:	4b26      	ldr	r3, [pc, #152]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800435c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6892      	ldr	r2, [r2, #8]
 8004364:	0211      	lsls	r1, r2, #8
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	68d2      	ldr	r2, [r2, #12]
 800436a:	0912      	lsrs	r2, r2, #4
 800436c:	0452      	lsls	r2, r2, #17
 800436e:	430a      	orrs	r2, r1
 8004370:	491f      	ldr	r1, [pc, #124]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004372:	4313      	orrs	r3, r2
 8004374:	614b      	str	r3, [r1, #20]
 8004376:	e011      	b.n	800439c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004378:	4b1d      	ldr	r3, [pc, #116]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004380:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6892      	ldr	r2, [r2, #8]
 8004388:	0211      	lsls	r1, r2, #8
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6912      	ldr	r2, [r2, #16]
 800438e:	0852      	lsrs	r2, r2, #1
 8004390:	3a01      	subs	r2, #1
 8004392:	0652      	lsls	r2, r2, #25
 8004394:	430a      	orrs	r2, r1
 8004396:	4916      	ldr	r1, [pc, #88]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004398:	4313      	orrs	r3, r2
 800439a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800439c:	4b14      	ldr	r3, [pc, #80]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a13      	ldr	r2, [pc, #76]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a8:	f7fd ff92 	bl	80022d0 <HAL_GetTick>
 80043ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043ae:	e009      	b.n	80043c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043b0:	f7fd ff8e 	bl	80022d0 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d902      	bls.n	80043c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	73fb      	strb	r3, [r7, #15]
          break;
 80043c2:	e005      	b.n	80043d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043c4:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0ef      	beq.n	80043b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043d6:	4b06      	ldr	r3, [pc, #24]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	4904      	ldr	r1, [pc, #16]	@ (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000

080043f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e049      	b.n	800449a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fd fd1e 	bl	8001e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f000 fd1c 	bl	8004e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d001      	beq.n	80044bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e04f      	b.n	800455c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a23      	ldr	r2, [pc, #140]	@ (8004568 <HAL_TIM_Base_Start_IT+0xc4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01d      	beq.n	800451a <HAL_TIM_Base_Start_IT+0x76>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e6:	d018      	beq.n	800451a <HAL_TIM_Base_Start_IT+0x76>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1f      	ldr	r2, [pc, #124]	@ (800456c <HAL_TIM_Base_Start_IT+0xc8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <HAL_TIM_Base_Start_IT+0x76>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004570 <HAL_TIM_Base_Start_IT+0xcc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00e      	beq.n	800451a <HAL_TIM_Base_Start_IT+0x76>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1c      	ldr	r2, [pc, #112]	@ (8004574 <HAL_TIM_Base_Start_IT+0xd0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d009      	beq.n	800451a <HAL_TIM_Base_Start_IT+0x76>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1b      	ldr	r2, [pc, #108]	@ (8004578 <HAL_TIM_Base_Start_IT+0xd4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_TIM_Base_Start_IT+0x76>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a19      	ldr	r2, [pc, #100]	@ (800457c <HAL_TIM_Base_Start_IT+0xd8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d115      	bne.n	8004546 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	4b17      	ldr	r3, [pc, #92]	@ (8004580 <HAL_TIM_Base_Start_IT+0xdc>)
 8004522:	4013      	ands	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b06      	cmp	r3, #6
 800452a:	d015      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0xb4>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004532:	d011      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004544:	e008      	b.n	8004558 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e000      	b.n	800455a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004558:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	40012c00 	.word	0x40012c00
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40000c00 	.word	0x40000c00
 8004578:	40013400 	.word	0x40013400
 800457c:	40014000 	.word	0x40014000
 8004580:	00010007 	.word	0x00010007

08004584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e049      	b.n	800462a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f841 	bl	8004632 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3304      	adds	r3, #4
 80045c0:	4619      	mov	r1, r3
 80045c2:	4610      	mov	r0, r2
 80045c4:	f000 fc54 	bl	8004e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d109      	bne.n	800466c <HAL_TIM_PWM_Start+0x24>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e03c      	b.n	80046e6 <HAL_TIM_PWM_Start+0x9e>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b04      	cmp	r3, #4
 8004670:	d109      	bne.n	8004686 <HAL_TIM_PWM_Start+0x3e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	bf14      	ite	ne
 800467e:	2301      	movne	r3, #1
 8004680:	2300      	moveq	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	e02f      	b.n	80046e6 <HAL_TIM_PWM_Start+0x9e>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d109      	bne.n	80046a0 <HAL_TIM_PWM_Start+0x58>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	bf14      	ite	ne
 8004698:	2301      	movne	r3, #1
 800469a:	2300      	moveq	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	e022      	b.n	80046e6 <HAL_TIM_PWM_Start+0x9e>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	d109      	bne.n	80046ba <HAL_TIM_PWM_Start+0x72>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	bf14      	ite	ne
 80046b2:	2301      	movne	r3, #1
 80046b4:	2300      	moveq	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	e015      	b.n	80046e6 <HAL_TIM_PWM_Start+0x9e>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d109      	bne.n	80046d4 <HAL_TIM_PWM_Start+0x8c>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	bf14      	ite	ne
 80046cc:	2301      	movne	r3, #1
 80046ce:	2300      	moveq	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	e008      	b.n	80046e6 <HAL_TIM_PWM_Start+0x9e>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	bf14      	ite	ne
 80046e0:	2301      	movne	r3, #1
 80046e2:	2300      	moveq	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e09c      	b.n	8004828 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d104      	bne.n	80046fe <HAL_TIM_PWM_Start+0xb6>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046fc:	e023      	b.n	8004746 <HAL_TIM_PWM_Start+0xfe>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b04      	cmp	r3, #4
 8004702:	d104      	bne.n	800470e <HAL_TIM_PWM_Start+0xc6>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800470c:	e01b      	b.n	8004746 <HAL_TIM_PWM_Start+0xfe>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b08      	cmp	r3, #8
 8004712:	d104      	bne.n	800471e <HAL_TIM_PWM_Start+0xd6>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800471c:	e013      	b.n	8004746 <HAL_TIM_PWM_Start+0xfe>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b0c      	cmp	r3, #12
 8004722:	d104      	bne.n	800472e <HAL_TIM_PWM_Start+0xe6>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800472c:	e00b      	b.n	8004746 <HAL_TIM_PWM_Start+0xfe>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b10      	cmp	r3, #16
 8004732:	d104      	bne.n	800473e <HAL_TIM_PWM_Start+0xf6>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800473c:	e003      	b.n	8004746 <HAL_TIM_PWM_Start+0xfe>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2202      	movs	r2, #2
 8004742:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2201      	movs	r2, #1
 800474c:	6839      	ldr	r1, [r7, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 ffa4 	bl	800569c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a35      	ldr	r2, [pc, #212]	@ (8004830 <HAL_TIM_PWM_Start+0x1e8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <HAL_TIM_PWM_Start+0x13e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a34      	ldr	r2, [pc, #208]	@ (8004834 <HAL_TIM_PWM_Start+0x1ec>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00e      	beq.n	8004786 <HAL_TIM_PWM_Start+0x13e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a32      	ldr	r2, [pc, #200]	@ (8004838 <HAL_TIM_PWM_Start+0x1f0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d009      	beq.n	8004786 <HAL_TIM_PWM_Start+0x13e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a31      	ldr	r2, [pc, #196]	@ (800483c <HAL_TIM_PWM_Start+0x1f4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d004      	beq.n	8004786 <HAL_TIM_PWM_Start+0x13e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a2f      	ldr	r2, [pc, #188]	@ (8004840 <HAL_TIM_PWM_Start+0x1f8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d101      	bne.n	800478a <HAL_TIM_PWM_Start+0x142>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_TIM_PWM_Start+0x144>
 800478a:	2300      	movs	r3, #0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800479e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a22      	ldr	r2, [pc, #136]	@ (8004830 <HAL_TIM_PWM_Start+0x1e8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01d      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x19e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b2:	d018      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x19e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a22      	ldr	r2, [pc, #136]	@ (8004844 <HAL_TIM_PWM_Start+0x1fc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x19e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a21      	ldr	r2, [pc, #132]	@ (8004848 <HAL_TIM_PWM_Start+0x200>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x19e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1f      	ldr	r2, [pc, #124]	@ (800484c <HAL_TIM_PWM_Start+0x204>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x19e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a17      	ldr	r2, [pc, #92]	@ (8004834 <HAL_TIM_PWM_Start+0x1ec>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x19e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a15      	ldr	r2, [pc, #84]	@ (8004838 <HAL_TIM_PWM_Start+0x1f0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d115      	bne.n	8004812 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	4b18      	ldr	r3, [pc, #96]	@ (8004850 <HAL_TIM_PWM_Start+0x208>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b06      	cmp	r3, #6
 80047f6:	d015      	beq.n	8004824 <HAL_TIM_PWM_Start+0x1dc>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047fe:	d011      	beq.n	8004824 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004810:	e008      	b.n	8004824 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e000      	b.n	8004826 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004824:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40013400 	.word	0x40013400
 8004838:	40014000 	.word	0x40014000
 800483c:	40014400 	.word	0x40014400
 8004840:	40014800 	.word	0x40014800
 8004844:	40000400 	.word	0x40000400
 8004848:	40000800 	.word	0x40000800
 800484c:	40000c00 	.word	0x40000c00
 8004850:	00010007 	.word	0x00010007

08004854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d020      	beq.n	80048b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01b      	beq.n	80048b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0202 	mvn.w	r2, #2
 8004888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fac7 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 80048a4:	e005      	b.n	80048b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fab9 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 faca 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d020      	beq.n	8004904 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01b      	beq.n	8004904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0204 	mvn.w	r2, #4
 80048d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 faa1 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fa93 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 faa4 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d020      	beq.n	8004950 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01b      	beq.n	8004950 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0208 	mvn.w	r2, #8
 8004920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2204      	movs	r2, #4
 8004926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa7b 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 800493c:	e005      	b.n	800494a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa6d 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fa7e 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b00      	cmp	r3, #0
 8004958:	d020      	beq.n	800499c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01b      	beq.n	800499c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0210 	mvn.w	r2, #16
 800496c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2208      	movs	r2, #8
 8004972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fa55 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fa47 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fa58 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00c      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0201 	mvn.w	r2, #1
 80049b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fc ffd6 	bl	800196c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d104      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00c      	beq.n	80049ee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80049e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 ff8d 	bl	8005908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00c      	beq.n	8004a12 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d007      	beq.n	8004a12 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 ff85 	bl	800591c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00c      	beq.n	8004a36 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d007      	beq.n	8004a36 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fa12 	bl	8004e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00c      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d007      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f06f 0220 	mvn.w	r2, #32
 8004a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 ff4d 	bl	80058f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a5a:	bf00      	nop
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e0ff      	b.n	8004c82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b14      	cmp	r3, #20
 8004a8e:	f200 80f0 	bhi.w	8004c72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a92:	a201      	add	r2, pc, #4	@ (adr r2, 8004a98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004aed 	.word	0x08004aed
 8004a9c:	08004c73 	.word	0x08004c73
 8004aa0:	08004c73 	.word	0x08004c73
 8004aa4:	08004c73 	.word	0x08004c73
 8004aa8:	08004b2d 	.word	0x08004b2d
 8004aac:	08004c73 	.word	0x08004c73
 8004ab0:	08004c73 	.word	0x08004c73
 8004ab4:	08004c73 	.word	0x08004c73
 8004ab8:	08004b6f 	.word	0x08004b6f
 8004abc:	08004c73 	.word	0x08004c73
 8004ac0:	08004c73 	.word	0x08004c73
 8004ac4:	08004c73 	.word	0x08004c73
 8004ac8:	08004baf 	.word	0x08004baf
 8004acc:	08004c73 	.word	0x08004c73
 8004ad0:	08004c73 	.word	0x08004c73
 8004ad4:	08004c73 	.word	0x08004c73
 8004ad8:	08004bf1 	.word	0x08004bf1
 8004adc:	08004c73 	.word	0x08004c73
 8004ae0:	08004c73 	.word	0x08004c73
 8004ae4:	08004c73 	.word	0x08004c73
 8004ae8:	08004c31 	.word	0x08004c31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fa62 	bl	8004fbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0208 	orr.w	r2, r2, #8
 8004b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0204 	bic.w	r2, r2, #4
 8004b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6999      	ldr	r1, [r3, #24]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	619a      	str	r2, [r3, #24]
      break;
 8004b2a:	e0a5      	b.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fad2 	bl	80050dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6999      	ldr	r1, [r3, #24]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	021a      	lsls	r2, r3, #8
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	619a      	str	r2, [r3, #24]
      break;
 8004b6c:	e084      	b.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fb3b 	bl	80051f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0208 	orr.w	r2, r2, #8
 8004b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0204 	bic.w	r2, r2, #4
 8004b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69d9      	ldr	r1, [r3, #28]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	61da      	str	r2, [r3, #28]
      break;
 8004bac:	e064      	b.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68b9      	ldr	r1, [r7, #8]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fba3 	bl	8005300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69d9      	ldr	r1, [r3, #28]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	021a      	lsls	r2, r3, #8
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	61da      	str	r2, [r3, #28]
      break;
 8004bee:	e043      	b.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fbec 	bl	80053d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0208 	orr.w	r2, r2, #8
 8004c0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0204 	bic.w	r2, r2, #4
 8004c1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c2e:	e023      	b.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fc30 	bl	800549c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	021a      	lsls	r2, r3, #8
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c70:	e002      	b.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	75fb      	strb	r3, [r7, #23]
      break;
 8004c76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop

08004c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e0b6      	b.n	8004e16 <HAL_TIM_ConfigClockSource+0x18a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce4:	d03e      	beq.n	8004d64 <HAL_TIM_ConfigClockSource+0xd8>
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cea:	f200 8087 	bhi.w	8004dfc <HAL_TIM_ConfigClockSource+0x170>
 8004cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf2:	f000 8086 	beq.w	8004e02 <HAL_TIM_ConfigClockSource+0x176>
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cfa:	d87f      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x170>
 8004cfc:	2b70      	cmp	r3, #112	@ 0x70
 8004cfe:	d01a      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0xaa>
 8004d00:	2b70      	cmp	r3, #112	@ 0x70
 8004d02:	d87b      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x170>
 8004d04:	2b60      	cmp	r3, #96	@ 0x60
 8004d06:	d050      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x11e>
 8004d08:	2b60      	cmp	r3, #96	@ 0x60
 8004d0a:	d877      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x170>
 8004d0c:	2b50      	cmp	r3, #80	@ 0x50
 8004d0e:	d03c      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0xfe>
 8004d10:	2b50      	cmp	r3, #80	@ 0x50
 8004d12:	d873      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x170>
 8004d14:	2b40      	cmp	r3, #64	@ 0x40
 8004d16:	d058      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x13e>
 8004d18:	2b40      	cmp	r3, #64	@ 0x40
 8004d1a:	d86f      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x170>
 8004d1c:	2b30      	cmp	r3, #48	@ 0x30
 8004d1e:	d064      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x15e>
 8004d20:	2b30      	cmp	r3, #48	@ 0x30
 8004d22:	d86b      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x170>
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d060      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x15e>
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d867      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x170>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d05c      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x15e>
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d05a      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x15e>
 8004d34:	e062      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d46:	f000 fc89 	bl	800565c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	609a      	str	r2, [r3, #8]
      break;
 8004d62:	e04f      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d74:	f000 fc72 	bl	800565c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d86:	609a      	str	r2, [r3, #8]
      break;
 8004d88:	e03c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d96:	461a      	mov	r2, r3
 8004d98:	f000 fbe6 	bl	8005568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2150      	movs	r1, #80	@ 0x50
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fc3f 	bl	8005626 <TIM_ITRx_SetConfig>
      break;
 8004da8:	e02c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004db6:	461a      	mov	r2, r3
 8004db8:	f000 fc05 	bl	80055c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2160      	movs	r1, #96	@ 0x60
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fc2f 	bl	8005626 <TIM_ITRx_SetConfig>
      break;
 8004dc8:	e01c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f000 fbc6 	bl	8005568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2140      	movs	r1, #64	@ 0x40
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fc1f 	bl	8005626 <TIM_ITRx_SetConfig>
      break;
 8004de8:	e00c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4619      	mov	r1, r3
 8004df4:	4610      	mov	r0, r2
 8004df6:	f000 fc16 	bl	8005626 <TIM_ITRx_SetConfig>
      break;
 8004dfa:	e003      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004e00:	e000      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
	...

08004e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a46      	ldr	r2, [pc, #280]	@ (8004f9c <TIM_Base_SetConfig+0x12c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e8e:	d00f      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a43      	ldr	r2, [pc, #268]	@ (8004fa0 <TIM_Base_SetConfig+0x130>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00b      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a42      	ldr	r2, [pc, #264]	@ (8004fa4 <TIM_Base_SetConfig+0x134>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a41      	ldr	r2, [pc, #260]	@ (8004fa8 <TIM_Base_SetConfig+0x138>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a40      	ldr	r2, [pc, #256]	@ (8004fac <TIM_Base_SetConfig+0x13c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d108      	bne.n	8004ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a35      	ldr	r2, [pc, #212]	@ (8004f9c <TIM_Base_SetConfig+0x12c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01f      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed0:	d01b      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a32      	ldr	r2, [pc, #200]	@ (8004fa0 <TIM_Base_SetConfig+0x130>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d017      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a31      	ldr	r2, [pc, #196]	@ (8004fa4 <TIM_Base_SetConfig+0x134>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a30      	ldr	r2, [pc, #192]	@ (8004fa8 <TIM_Base_SetConfig+0x138>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00f      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2f      	ldr	r2, [pc, #188]	@ (8004fac <TIM_Base_SetConfig+0x13c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00b      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8004fb0 <TIM_Base_SetConfig+0x140>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d007      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb4 <TIM_Base_SetConfig+0x144>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb8 <TIM_Base_SetConfig+0x148>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d108      	bne.n	8004f1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a16      	ldr	r2, [pc, #88]	@ (8004f9c <TIM_Base_SetConfig+0x12c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00f      	beq.n	8004f68 <TIM_Base_SetConfig+0xf8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a18      	ldr	r2, [pc, #96]	@ (8004fac <TIM_Base_SetConfig+0x13c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00b      	beq.n	8004f68 <TIM_Base_SetConfig+0xf8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a17      	ldr	r2, [pc, #92]	@ (8004fb0 <TIM_Base_SetConfig+0x140>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d007      	beq.n	8004f68 <TIM_Base_SetConfig+0xf8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a16      	ldr	r2, [pc, #88]	@ (8004fb4 <TIM_Base_SetConfig+0x144>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <TIM_Base_SetConfig+0xf8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a15      	ldr	r2, [pc, #84]	@ (8004fb8 <TIM_Base_SetConfig+0x148>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d103      	bne.n	8004f70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d105      	bne.n	8004f8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f023 0201 	bic.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	611a      	str	r2, [r3, #16]
  }
}
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40000800 	.word	0x40000800
 8004fa8:	40000c00 	.word	0x40000c00
 8004fac:	40013400 	.word	0x40013400
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	40014400 	.word	0x40014400
 8004fb8:	40014800 	.word	0x40014800

08004fbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	f023 0201 	bic.w	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f023 0302 	bic.w	r3, r3, #2
 8005008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a2c      	ldr	r2, [pc, #176]	@ (80050c8 <TIM_OC1_SetConfig+0x10c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00f      	beq.n	800503c <TIM_OC1_SetConfig+0x80>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a2b      	ldr	r2, [pc, #172]	@ (80050cc <TIM_OC1_SetConfig+0x110>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00b      	beq.n	800503c <TIM_OC1_SetConfig+0x80>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a2a      	ldr	r2, [pc, #168]	@ (80050d0 <TIM_OC1_SetConfig+0x114>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d007      	beq.n	800503c <TIM_OC1_SetConfig+0x80>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a29      	ldr	r2, [pc, #164]	@ (80050d4 <TIM_OC1_SetConfig+0x118>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <TIM_OC1_SetConfig+0x80>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a28      	ldr	r2, [pc, #160]	@ (80050d8 <TIM_OC1_SetConfig+0x11c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d10c      	bne.n	8005056 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f023 0308 	bic.w	r3, r3, #8
 8005042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f023 0304 	bic.w	r3, r3, #4
 8005054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1b      	ldr	r2, [pc, #108]	@ (80050c8 <TIM_OC1_SetConfig+0x10c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00f      	beq.n	800507e <TIM_OC1_SetConfig+0xc2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a1a      	ldr	r2, [pc, #104]	@ (80050cc <TIM_OC1_SetConfig+0x110>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00b      	beq.n	800507e <TIM_OC1_SetConfig+0xc2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a19      	ldr	r2, [pc, #100]	@ (80050d0 <TIM_OC1_SetConfig+0x114>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d007      	beq.n	800507e <TIM_OC1_SetConfig+0xc2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a18      	ldr	r2, [pc, #96]	@ (80050d4 <TIM_OC1_SetConfig+0x118>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d003      	beq.n	800507e <TIM_OC1_SetConfig+0xc2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a17      	ldr	r2, [pc, #92]	@ (80050d8 <TIM_OC1_SetConfig+0x11c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d111      	bne.n	80050a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800508c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	621a      	str	r2, [r3, #32]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40012c00 	.word	0x40012c00
 80050cc:	40013400 	.word	0x40013400
 80050d0:	40014000 	.word	0x40014000
 80050d4:	40014400 	.word	0x40014400
 80050d8:	40014800 	.word	0x40014800

080050dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f023 0210 	bic.w	r2, r3, #16
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800510a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800510e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f023 0320 	bic.w	r3, r3, #32
 800512a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a28      	ldr	r2, [pc, #160]	@ (80051dc <TIM_OC2_SetConfig+0x100>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_OC2_SetConfig+0x6c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a27      	ldr	r2, [pc, #156]	@ (80051e0 <TIM_OC2_SetConfig+0x104>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d10d      	bne.n	8005164 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800514e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005162:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a1d      	ldr	r2, [pc, #116]	@ (80051dc <TIM_OC2_SetConfig+0x100>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00f      	beq.n	800518c <TIM_OC2_SetConfig+0xb0>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a1c      	ldr	r2, [pc, #112]	@ (80051e0 <TIM_OC2_SetConfig+0x104>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00b      	beq.n	800518c <TIM_OC2_SetConfig+0xb0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a1b      	ldr	r2, [pc, #108]	@ (80051e4 <TIM_OC2_SetConfig+0x108>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <TIM_OC2_SetConfig+0xb0>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a1a      	ldr	r2, [pc, #104]	@ (80051e8 <TIM_OC2_SetConfig+0x10c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_OC2_SetConfig+0xb0>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a19      	ldr	r2, [pc, #100]	@ (80051ec <TIM_OC2_SetConfig+0x110>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d113      	bne.n	80051b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005192:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800519a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40013400 	.word	0x40013400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800

080051f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800521e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800523c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a27      	ldr	r2, [pc, #156]	@ (80052ec <TIM_OC3_SetConfig+0xfc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d003      	beq.n	800525a <TIM_OC3_SetConfig+0x6a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a26      	ldr	r2, [pc, #152]	@ (80052f0 <TIM_OC3_SetConfig+0x100>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d10d      	bne.n	8005276 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a1c      	ldr	r2, [pc, #112]	@ (80052ec <TIM_OC3_SetConfig+0xfc>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00f      	beq.n	800529e <TIM_OC3_SetConfig+0xae>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a1b      	ldr	r2, [pc, #108]	@ (80052f0 <TIM_OC3_SetConfig+0x100>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00b      	beq.n	800529e <TIM_OC3_SetConfig+0xae>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a1a      	ldr	r2, [pc, #104]	@ (80052f4 <TIM_OC3_SetConfig+0x104>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d007      	beq.n	800529e <TIM_OC3_SetConfig+0xae>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a19      	ldr	r2, [pc, #100]	@ (80052f8 <TIM_OC3_SetConfig+0x108>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d003      	beq.n	800529e <TIM_OC3_SetConfig+0xae>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a18      	ldr	r2, [pc, #96]	@ (80052fc <TIM_OC3_SetConfig+0x10c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d113      	bne.n	80052c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	621a      	str	r2, [r3, #32]
}
 80052e0:	bf00      	nop
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	40013400 	.word	0x40013400
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40014400 	.word	0x40014400
 80052fc:	40014800 	.word	0x40014800

08005300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800533a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800534e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	031b      	lsls	r3, r3, #12
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a18      	ldr	r2, [pc, #96]	@ (80053c0 <TIM_OC4_SetConfig+0xc0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00f      	beq.n	8005384 <TIM_OC4_SetConfig+0x84>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a17      	ldr	r2, [pc, #92]	@ (80053c4 <TIM_OC4_SetConfig+0xc4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00b      	beq.n	8005384 <TIM_OC4_SetConfig+0x84>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a16      	ldr	r2, [pc, #88]	@ (80053c8 <TIM_OC4_SetConfig+0xc8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d007      	beq.n	8005384 <TIM_OC4_SetConfig+0x84>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a15      	ldr	r2, [pc, #84]	@ (80053cc <TIM_OC4_SetConfig+0xcc>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d003      	beq.n	8005384 <TIM_OC4_SetConfig+0x84>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a14      	ldr	r2, [pc, #80]	@ (80053d0 <TIM_OC4_SetConfig+0xd0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d109      	bne.n	8005398 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800538a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	019b      	lsls	r3, r3, #6
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40013400 	.word	0x40013400
 80053c8:	40014000 	.word	0x40014000
 80053cc:	40014400 	.word	0x40014400
 80053d0:	40014800 	.word	0x40014800

080053d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005418:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	041b      	lsls	r3, r3, #16
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a17      	ldr	r2, [pc, #92]	@ (8005488 <TIM_OC5_SetConfig+0xb4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00f      	beq.n	800544e <TIM_OC5_SetConfig+0x7a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a16      	ldr	r2, [pc, #88]	@ (800548c <TIM_OC5_SetConfig+0xb8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00b      	beq.n	800544e <TIM_OC5_SetConfig+0x7a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a15      	ldr	r2, [pc, #84]	@ (8005490 <TIM_OC5_SetConfig+0xbc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d007      	beq.n	800544e <TIM_OC5_SetConfig+0x7a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a14      	ldr	r2, [pc, #80]	@ (8005494 <TIM_OC5_SetConfig+0xc0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d003      	beq.n	800544e <TIM_OC5_SetConfig+0x7a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a13      	ldr	r2, [pc, #76]	@ (8005498 <TIM_OC5_SetConfig+0xc4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d109      	bne.n	8005462 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005454:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	621a      	str	r2, [r3, #32]
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40013400 	.word	0x40013400
 8005490:	40014000 	.word	0x40014000
 8005494:	40014400 	.word	0x40014400
 8005498:	40014800 	.word	0x40014800

0800549c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	051b      	lsls	r3, r3, #20
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a18      	ldr	r2, [pc, #96]	@ (8005554 <TIM_OC6_SetConfig+0xb8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00f      	beq.n	8005518 <TIM_OC6_SetConfig+0x7c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a17      	ldr	r2, [pc, #92]	@ (8005558 <TIM_OC6_SetConfig+0xbc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00b      	beq.n	8005518 <TIM_OC6_SetConfig+0x7c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a16      	ldr	r2, [pc, #88]	@ (800555c <TIM_OC6_SetConfig+0xc0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d007      	beq.n	8005518 <TIM_OC6_SetConfig+0x7c>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a15      	ldr	r2, [pc, #84]	@ (8005560 <TIM_OC6_SetConfig+0xc4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d003      	beq.n	8005518 <TIM_OC6_SetConfig+0x7c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a14      	ldr	r2, [pc, #80]	@ (8005564 <TIM_OC6_SetConfig+0xc8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d109      	bne.n	800552c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800551e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	029b      	lsls	r3, r3, #10
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	621a      	str	r2, [r3, #32]
}
 8005546:	bf00      	nop
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40013400 	.word	0x40013400
 800555c:	40014000 	.word	0x40014000
 8005560:	40014400 	.word	0x40014400
 8005564:	40014800 	.word	0x40014800

08005568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f023 0201 	bic.w	r2, r3, #1
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f023 030a 	bic.w	r3, r3, #10
 80055a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	621a      	str	r2, [r3, #32]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b087      	sub	sp, #28
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f023 0210 	bic.w	r2, r3, #16
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	031b      	lsls	r3, r3, #12
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005602:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	621a      	str	r2, [r3, #32]
}
 800561a:	bf00      	nop
 800561c:	371c      	adds	r7, #28
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	f043 0307 	orr.w	r3, r3, #7
 8005648:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	609a      	str	r2, [r3, #8]
}
 8005650:	bf00      	nop
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	021a      	lsls	r2, r3, #8
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	431a      	orrs	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4313      	orrs	r3, r2
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	609a      	str	r2, [r3, #8]
}
 8005690:	bf00      	nop
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	2201      	movs	r2, #1
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1a      	ldr	r2, [r3, #32]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	43db      	mvns	r3, r3
 80056be:	401a      	ands	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1a      	ldr	r2, [r3, #32]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	fa01 f303 	lsl.w	r3, r1, r3
 80056d4:	431a      	orrs	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e068      	b.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a2e      	ldr	r2, [pc, #184]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d004      	beq.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a2d      	ldr	r2, [pc, #180]	@ (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800573a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1e      	ldr	r2, [pc, #120]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d01d      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005772:	d018      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1b      	ldr	r2, [pc, #108]	@ (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1a      	ldr	r2, [pc, #104]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00e      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a18      	ldr	r2, [pc, #96]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d009      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a13      	ldr	r2, [pc, #76]	@ (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a14      	ldr	r2, [pc, #80]	@ (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d10c      	bne.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40013400 	.word	0x40013400
 80057e8:	40000400 	.word	0x40000400
 80057ec:	40000800 	.word	0x40000800
 80057f0:	40000c00 	.word	0x40000c00
 80057f4:	40014000 	.word	0x40014000

080057f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005810:	2302      	movs	r3, #2
 8005812:	e065      	b.n	80058e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	041b      	lsls	r3, r3, #16
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a16      	ldr	r2, [pc, #88]	@ (80058ec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d004      	beq.n	80058a2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a14      	ldr	r2, [pc, #80]	@ (80058f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d115      	bne.n	80058ce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	051b      	lsls	r3, r3, #20
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40013400 	.word	0x40013400

080058f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e040      	b.n	80059c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fc fb3a 	bl	8001fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2224      	movs	r2, #36	@ 0x24
 800595c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0201 	bic.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fedc 	bl	8006734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fc21 	bl	80061c4 <UART_SetConfig>
 8005982:	4603      	mov	r3, r0
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e01b      	b.n	80059c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800599a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 ff5b 	bl	8006878 <UART_CheckIdleState>
 80059c2:	4603      	mov	r3, r0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	@ 0x28
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	4613      	mov	r3, r2
 80059da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	d177      	bne.n	8005ad4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_UART_Transmit+0x24>
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e070      	b.n	8005ad6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2221      	movs	r2, #33	@ 0x21
 8005a00:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a02:	f7fc fc65 	bl	80022d0 <HAL_GetTick>
 8005a06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	88fa      	ldrh	r2, [r7, #6]
 8005a0c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a20:	d108      	bne.n	8005a34 <HAL_UART_Transmit+0x68>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d104      	bne.n	8005a34 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	e003      	b.n	8005a3c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a3c:	e02f      	b.n	8005a9e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2200      	movs	r2, #0
 8005a46:	2180      	movs	r1, #128	@ 0x80
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 ffbd 	bl	80069c8 <UART_WaitOnFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d004      	beq.n	8005a5e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e03b      	b.n	8005ad6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	881a      	ldrh	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a70:	b292      	uxth	r2, r2
 8005a72:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	3302      	adds	r3, #2
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	e007      	b.n	8005a8c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	781a      	ldrb	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1c9      	bne.n	8005a3e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2140      	movs	r1, #64	@ 0x40
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 ff87 	bl	80069c8 <UART_WaitOnFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e005      	b.n	8005ad6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2220      	movs	r2, #32
 8005ace:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e000      	b.n	8005ad6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005ad4:	2302      	movs	r3, #2
  }
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08a      	sub	sp, #40	@ 0x28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d137      	bne.n	8005b68 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_UART_Receive_DMA+0x24>
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e030      	b.n	8005b6a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a18      	ldr	r2, [pc, #96]	@ (8005b74 <HAL_UART_Receive_DMA+0x94>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d01f      	beq.n	8005b58 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d018      	beq.n	8005b58 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	613b      	str	r3, [r7, #16]
   return(result);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	623b      	str	r3, [r7, #32]
 8005b46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	69f9      	ldr	r1, [r7, #28]
 8005b4a:	6a3a      	ldr	r2, [r7, #32]
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e6      	bne.n	8005b26 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	68b9      	ldr	r1, [r7, #8]
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 ffa0 	bl	8006aa4 <UART_Start_Receive_DMA>
 8005b64:	4603      	mov	r3, r0
 8005b66:	e000      	b.n	8005b6a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b68:	2302      	movs	r3, #2
  }
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3728      	adds	r7, #40	@ 0x28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	40008000 	.word	0x40008000

08005b78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b0ba      	sub	sp, #232	@ 0xe8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005ba2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005bac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d115      	bne.n	8005be0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00f      	beq.n	8005be0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc4:	f003 0320 	and.w	r3, r3, #32
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d009      	beq.n	8005be0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 82ca 	beq.w	800616a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	4798      	blx	r3
      }
      return;
 8005bde:	e2c4      	b.n	800616a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005be0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8117 	beq.w	8005e18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d106      	bne.n	8005c04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005bf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005bfa:	4b85      	ldr	r3, [pc, #532]	@ (8005e10 <HAL_UART_IRQHandler+0x298>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 810a 	beq.w	8005e18 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d011      	beq.n	8005c34 <HAL_UART_IRQHandler+0xbc>
 8005c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00b      	beq.n	8005c34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2201      	movs	r2, #1
 8005c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c2a:	f043 0201 	orr.w	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d011      	beq.n	8005c64 <HAL_UART_IRQHandler+0xec>
 8005c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00b      	beq.n	8005c64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2202      	movs	r2, #2
 8005c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c5a:	f043 0204 	orr.w	r2, r3, #4
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d011      	beq.n	8005c94 <HAL_UART_IRQHandler+0x11c>
 8005c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00b      	beq.n	8005c94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2204      	movs	r2, #4
 8005c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c8a:	f043 0202 	orr.w	r2, r3, #2
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d017      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca4:	f003 0320 	and.w	r3, r3, #32
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d105      	bne.n	8005cb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00b      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cc6:	f043 0208 	orr.w	r2, r3, #8
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d012      	beq.n	8005d02 <HAL_UART_IRQHandler+0x18a>
 8005cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ce0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00c      	beq.n	8005d02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cf8:	f043 0220 	orr.w	r2, r3, #32
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8230 	beq.w	800616e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00d      	beq.n	8005d36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d007      	beq.n	8005d36 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4a:	2b40      	cmp	r3, #64	@ 0x40
 8005d4c:	d005      	beq.n	8005d5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d04f      	beq.n	8005dfa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 ff68 	bl	8006c30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6a:	2b40      	cmp	r3, #64	@ 0x40
 8005d6c:	d141      	bne.n	8005df2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3308      	adds	r3, #8
 8005d74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3308      	adds	r3, #8
 8005d96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005da6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1d9      	bne.n	8005d6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d013      	beq.n	8005dea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dc6:	4a13      	ldr	r2, [pc, #76]	@ (8005e14 <HAL_UART_IRQHandler+0x29c>)
 8005dc8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fc fcc2 	bl	8002758 <HAL_DMA_Abort_IT>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d017      	beq.n	8005e0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005de4:	4610      	mov	r0, r2
 8005de6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de8:	e00f      	b.n	8005e0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f9d4 	bl	8006198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df0:	e00b      	b.n	8005e0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f9d0 	bl	8006198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df8:	e007      	b.n	8005e0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f9cc 	bl	8006198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005e08:	e1b1      	b.n	800616e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0a:	bf00      	nop
    return;
 8005e0c:	e1af      	b.n	800616e <HAL_UART_IRQHandler+0x5f6>
 8005e0e:	bf00      	nop
 8005e10:	04000120 	.word	0x04000120
 8005e14:	08006ee1 	.word	0x08006ee1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	f040 816a 	bne.w	80060f6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 8163 	beq.w	80060f6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 815c 	beq.w	80060f6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2210      	movs	r2, #16
 8005e44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e50:	2b40      	cmp	r3, #64	@ 0x40
 8005e52:	f040 80d4 	bne.w	8005ffe <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80ad 	beq.w	8005fc6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e76:	429a      	cmp	r2, r3
 8005e78:	f080 80a5 	bcs.w	8005fc6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f040 8086 	bne.w	8005fa4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ec6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1da      	bne.n	8005e98 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3308      	adds	r3, #8
 8005f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e1      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3308      	adds	r3, #8
 8005f24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e3      	bne.n	8005f1e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f74:	f023 0310 	bic.w	r3, r3, #16
 8005f78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	461a      	mov	r2, r3
 8005f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e4      	bne.n	8005f64 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fc fb9c 	bl	80026dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f8f4 	bl	80061ac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005fc4:	e0d5      	b.n	8006172 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005fcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	f040 80ce 	bne.w	8006172 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	f040 80c5 	bne.w	8006172 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f8d8 	bl	80061ac <HAL_UARTEx_RxEventCallback>
      return;
 8005ffc:	e0b9      	b.n	8006172 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800600a:	b29b      	uxth	r3, r3
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80ab 	beq.w	8006176 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80a6 	beq.w	8006176 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800603e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800604c:	647b      	str	r3, [r7, #68]	@ 0x44
 800604e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006052:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800605a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e4      	bne.n	800602a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3308      	adds	r3, #8
 8006066:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	623b      	str	r3, [r7, #32]
   return(result);
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3308      	adds	r3, #8
 8006080:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006084:	633a      	str	r2, [r7, #48]	@ 0x30
 8006086:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800608a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e3      	bne.n	8006060 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f023 0310 	bic.w	r3, r3, #16
 80060c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	69b9      	ldr	r1, [r7, #24]
 80060d4:	69fa      	ldr	r2, [r7, #28]
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	617b      	str	r3, [r7, #20]
   return(result);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e4      	bne.n	80060ac <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2202      	movs	r2, #2
 80060e6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f85c 	bl	80061ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060f4:	e03f      	b.n	8006176 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00e      	beq.n	8006120 <HAL_UART_IRQHandler+0x5a8>
 8006102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d008      	beq.n	8006120 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006116:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 ff21 	bl	8006f60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800611e:	e02d      	b.n	800617c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00e      	beq.n	800614a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006134:	2b00      	cmp	r3, #0
 8006136:	d008      	beq.n	800614a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01c      	beq.n	800617a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	4798      	blx	r3
    }
    return;
 8006148:	e017      	b.n	800617a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800614a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800614e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	d012      	beq.n	800617c <HAL_UART_IRQHandler+0x604>
 8006156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800615a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00c      	beq.n	800617c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fed2 	bl	8006f0c <UART_EndTransmit_IT>
    return;
 8006168:	e008      	b.n	800617c <HAL_UART_IRQHandler+0x604>
      return;
 800616a:	bf00      	nop
 800616c:	e006      	b.n	800617c <HAL_UART_IRQHandler+0x604>
    return;
 800616e:	bf00      	nop
 8006170:	e004      	b.n	800617c <HAL_UART_IRQHandler+0x604>
      return;
 8006172:	bf00      	nop
 8006174:	e002      	b.n	800617c <HAL_UART_IRQHandler+0x604>
      return;
 8006176:	bf00      	nop
 8006178:	e000      	b.n	800617c <HAL_UART_IRQHandler+0x604>
    return;
 800617a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800617c:	37e8      	adds	r7, #232	@ 0xe8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop

08006184 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061c8:	b08a      	sub	sp, #40	@ 0x28
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	431a      	orrs	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4ba4      	ldr	r3, [pc, #656]	@ (8006484 <UART_SetConfig+0x2c0>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061fc:	430b      	orrs	r3, r1
 80061fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a99      	ldr	r2, [pc, #612]	@ (8006488 <UART_SetConfig+0x2c4>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d004      	beq.n	8006230 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622c:	4313      	orrs	r3, r2
 800622e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006240:	430a      	orrs	r2, r1
 8006242:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a90      	ldr	r2, [pc, #576]	@ (800648c <UART_SetConfig+0x2c8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d126      	bne.n	800629c <UART_SetConfig+0xd8>
 800624e:	4b90      	ldr	r3, [pc, #576]	@ (8006490 <UART_SetConfig+0x2cc>)
 8006250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	2b03      	cmp	r3, #3
 800625a:	d81b      	bhi.n	8006294 <UART_SetConfig+0xd0>
 800625c:	a201      	add	r2, pc, #4	@ (adr r2, 8006264 <UART_SetConfig+0xa0>)
 800625e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006262:	bf00      	nop
 8006264:	08006275 	.word	0x08006275
 8006268:	08006285 	.word	0x08006285
 800626c:	0800627d 	.word	0x0800627d
 8006270:	0800628d 	.word	0x0800628d
 8006274:	2301      	movs	r3, #1
 8006276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800627a:	e116      	b.n	80064aa <UART_SetConfig+0x2e6>
 800627c:	2302      	movs	r3, #2
 800627e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006282:	e112      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006284:	2304      	movs	r3, #4
 8006286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800628a:	e10e      	b.n	80064aa <UART_SetConfig+0x2e6>
 800628c:	2308      	movs	r3, #8
 800628e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006292:	e10a      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006294:	2310      	movs	r3, #16
 8006296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800629a:	e106      	b.n	80064aa <UART_SetConfig+0x2e6>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a7c      	ldr	r2, [pc, #496]	@ (8006494 <UART_SetConfig+0x2d0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d138      	bne.n	8006318 <UART_SetConfig+0x154>
 80062a6:	4b7a      	ldr	r3, [pc, #488]	@ (8006490 <UART_SetConfig+0x2cc>)
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ac:	f003 030c 	and.w	r3, r3, #12
 80062b0:	2b0c      	cmp	r3, #12
 80062b2:	d82d      	bhi.n	8006310 <UART_SetConfig+0x14c>
 80062b4:	a201      	add	r2, pc, #4	@ (adr r2, 80062bc <UART_SetConfig+0xf8>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	080062f1 	.word	0x080062f1
 80062c0:	08006311 	.word	0x08006311
 80062c4:	08006311 	.word	0x08006311
 80062c8:	08006311 	.word	0x08006311
 80062cc:	08006301 	.word	0x08006301
 80062d0:	08006311 	.word	0x08006311
 80062d4:	08006311 	.word	0x08006311
 80062d8:	08006311 	.word	0x08006311
 80062dc:	080062f9 	.word	0x080062f9
 80062e0:	08006311 	.word	0x08006311
 80062e4:	08006311 	.word	0x08006311
 80062e8:	08006311 	.word	0x08006311
 80062ec:	08006309 	.word	0x08006309
 80062f0:	2300      	movs	r3, #0
 80062f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062f6:	e0d8      	b.n	80064aa <UART_SetConfig+0x2e6>
 80062f8:	2302      	movs	r3, #2
 80062fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062fe:	e0d4      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006300:	2304      	movs	r3, #4
 8006302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006306:	e0d0      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006308:	2308      	movs	r3, #8
 800630a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800630e:	e0cc      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006310:	2310      	movs	r3, #16
 8006312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006316:	e0c8      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a5e      	ldr	r2, [pc, #376]	@ (8006498 <UART_SetConfig+0x2d4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d125      	bne.n	800636e <UART_SetConfig+0x1aa>
 8006322:	4b5b      	ldr	r3, [pc, #364]	@ (8006490 <UART_SetConfig+0x2cc>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006328:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800632c:	2b30      	cmp	r3, #48	@ 0x30
 800632e:	d016      	beq.n	800635e <UART_SetConfig+0x19a>
 8006330:	2b30      	cmp	r3, #48	@ 0x30
 8006332:	d818      	bhi.n	8006366 <UART_SetConfig+0x1a2>
 8006334:	2b20      	cmp	r3, #32
 8006336:	d00a      	beq.n	800634e <UART_SetConfig+0x18a>
 8006338:	2b20      	cmp	r3, #32
 800633a:	d814      	bhi.n	8006366 <UART_SetConfig+0x1a2>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <UART_SetConfig+0x182>
 8006340:	2b10      	cmp	r3, #16
 8006342:	d008      	beq.n	8006356 <UART_SetConfig+0x192>
 8006344:	e00f      	b.n	8006366 <UART_SetConfig+0x1a2>
 8006346:	2300      	movs	r3, #0
 8006348:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800634c:	e0ad      	b.n	80064aa <UART_SetConfig+0x2e6>
 800634e:	2302      	movs	r3, #2
 8006350:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006354:	e0a9      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006356:	2304      	movs	r3, #4
 8006358:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800635c:	e0a5      	b.n	80064aa <UART_SetConfig+0x2e6>
 800635e:	2308      	movs	r3, #8
 8006360:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006364:	e0a1      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006366:	2310      	movs	r3, #16
 8006368:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800636c:	e09d      	b.n	80064aa <UART_SetConfig+0x2e6>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a4a      	ldr	r2, [pc, #296]	@ (800649c <UART_SetConfig+0x2d8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d125      	bne.n	80063c4 <UART_SetConfig+0x200>
 8006378:	4b45      	ldr	r3, [pc, #276]	@ (8006490 <UART_SetConfig+0x2cc>)
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006382:	2bc0      	cmp	r3, #192	@ 0xc0
 8006384:	d016      	beq.n	80063b4 <UART_SetConfig+0x1f0>
 8006386:	2bc0      	cmp	r3, #192	@ 0xc0
 8006388:	d818      	bhi.n	80063bc <UART_SetConfig+0x1f8>
 800638a:	2b80      	cmp	r3, #128	@ 0x80
 800638c:	d00a      	beq.n	80063a4 <UART_SetConfig+0x1e0>
 800638e:	2b80      	cmp	r3, #128	@ 0x80
 8006390:	d814      	bhi.n	80063bc <UART_SetConfig+0x1f8>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <UART_SetConfig+0x1d8>
 8006396:	2b40      	cmp	r3, #64	@ 0x40
 8006398:	d008      	beq.n	80063ac <UART_SetConfig+0x1e8>
 800639a:	e00f      	b.n	80063bc <UART_SetConfig+0x1f8>
 800639c:	2300      	movs	r3, #0
 800639e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063a2:	e082      	b.n	80064aa <UART_SetConfig+0x2e6>
 80063a4:	2302      	movs	r3, #2
 80063a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063aa:	e07e      	b.n	80064aa <UART_SetConfig+0x2e6>
 80063ac:	2304      	movs	r3, #4
 80063ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063b2:	e07a      	b.n	80064aa <UART_SetConfig+0x2e6>
 80063b4:	2308      	movs	r3, #8
 80063b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ba:	e076      	b.n	80064aa <UART_SetConfig+0x2e6>
 80063bc:	2310      	movs	r3, #16
 80063be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063c2:	e072      	b.n	80064aa <UART_SetConfig+0x2e6>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a35      	ldr	r2, [pc, #212]	@ (80064a0 <UART_SetConfig+0x2dc>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d12a      	bne.n	8006424 <UART_SetConfig+0x260>
 80063ce:	4b30      	ldr	r3, [pc, #192]	@ (8006490 <UART_SetConfig+0x2cc>)
 80063d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063dc:	d01a      	beq.n	8006414 <UART_SetConfig+0x250>
 80063de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063e2:	d81b      	bhi.n	800641c <UART_SetConfig+0x258>
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e8:	d00c      	beq.n	8006404 <UART_SetConfig+0x240>
 80063ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ee:	d815      	bhi.n	800641c <UART_SetConfig+0x258>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <UART_SetConfig+0x238>
 80063f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063f8:	d008      	beq.n	800640c <UART_SetConfig+0x248>
 80063fa:	e00f      	b.n	800641c <UART_SetConfig+0x258>
 80063fc:	2300      	movs	r3, #0
 80063fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006402:	e052      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006404:	2302      	movs	r3, #2
 8006406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800640a:	e04e      	b.n	80064aa <UART_SetConfig+0x2e6>
 800640c:	2304      	movs	r3, #4
 800640e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006412:	e04a      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006414:	2308      	movs	r3, #8
 8006416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800641a:	e046      	b.n	80064aa <UART_SetConfig+0x2e6>
 800641c:	2310      	movs	r3, #16
 800641e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006422:	e042      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a17      	ldr	r2, [pc, #92]	@ (8006488 <UART_SetConfig+0x2c4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d13a      	bne.n	80064a4 <UART_SetConfig+0x2e0>
 800642e:	4b18      	ldr	r3, [pc, #96]	@ (8006490 <UART_SetConfig+0x2cc>)
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006434:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006438:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800643c:	d01a      	beq.n	8006474 <UART_SetConfig+0x2b0>
 800643e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006442:	d81b      	bhi.n	800647c <UART_SetConfig+0x2b8>
 8006444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006448:	d00c      	beq.n	8006464 <UART_SetConfig+0x2a0>
 800644a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800644e:	d815      	bhi.n	800647c <UART_SetConfig+0x2b8>
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <UART_SetConfig+0x298>
 8006454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006458:	d008      	beq.n	800646c <UART_SetConfig+0x2a8>
 800645a:	e00f      	b.n	800647c <UART_SetConfig+0x2b8>
 800645c:	2300      	movs	r3, #0
 800645e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006462:	e022      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006464:	2302      	movs	r3, #2
 8006466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800646a:	e01e      	b.n	80064aa <UART_SetConfig+0x2e6>
 800646c:	2304      	movs	r3, #4
 800646e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006472:	e01a      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006474:	2308      	movs	r3, #8
 8006476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800647a:	e016      	b.n	80064aa <UART_SetConfig+0x2e6>
 800647c:	2310      	movs	r3, #16
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006482:	e012      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006484:	efff69f3 	.word	0xefff69f3
 8006488:	40008000 	.word	0x40008000
 800648c:	40013800 	.word	0x40013800
 8006490:	40021000 	.word	0x40021000
 8006494:	40004400 	.word	0x40004400
 8006498:	40004800 	.word	0x40004800
 800649c:	40004c00 	.word	0x40004c00
 80064a0:	40005000 	.word	0x40005000
 80064a4:	2310      	movs	r3, #16
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a9f      	ldr	r2, [pc, #636]	@ (800672c <UART_SetConfig+0x568>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d17a      	bne.n	80065aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d824      	bhi.n	8006506 <UART_SetConfig+0x342>
 80064bc:	a201      	add	r2, pc, #4	@ (adr r2, 80064c4 <UART_SetConfig+0x300>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064e9 	.word	0x080064e9
 80064c8:	08006507 	.word	0x08006507
 80064cc:	080064f1 	.word	0x080064f1
 80064d0:	08006507 	.word	0x08006507
 80064d4:	080064f7 	.word	0x080064f7
 80064d8:	08006507 	.word	0x08006507
 80064dc:	08006507 	.word	0x08006507
 80064e0:	08006507 	.word	0x08006507
 80064e4:	080064ff 	.word	0x080064ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e8:	f7fd fa0a 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 80064ec:	61f8      	str	r0, [r7, #28]
        break;
 80064ee:	e010      	b.n	8006512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f0:	4b8f      	ldr	r3, [pc, #572]	@ (8006730 <UART_SetConfig+0x56c>)
 80064f2:	61fb      	str	r3, [r7, #28]
        break;
 80064f4:	e00d      	b.n	8006512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064f6:	f7fd f96b 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 80064fa:	61f8      	str	r0, [r7, #28]
        break;
 80064fc:	e009      	b.n	8006512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006502:	61fb      	str	r3, [r7, #28]
        break;
 8006504:	e005      	b.n	8006512 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006510:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80fb 	beq.w	8006710 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	4413      	add	r3, r2
 8006524:	69fa      	ldr	r2, [r7, #28]
 8006526:	429a      	cmp	r2, r3
 8006528:	d305      	bcc.n	8006536 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006530:	69fa      	ldr	r2, [r7, #28]
 8006532:	429a      	cmp	r2, r3
 8006534:	d903      	bls.n	800653e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800653c:	e0e8      	b.n	8006710 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	2200      	movs	r2, #0
 8006542:	461c      	mov	r4, r3
 8006544:	4615      	mov	r5, r2
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	022b      	lsls	r3, r5, #8
 8006550:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006554:	0222      	lsls	r2, r4, #8
 8006556:	68f9      	ldr	r1, [r7, #12]
 8006558:	6849      	ldr	r1, [r1, #4]
 800655a:	0849      	lsrs	r1, r1, #1
 800655c:	2000      	movs	r0, #0
 800655e:	4688      	mov	r8, r1
 8006560:	4681      	mov	r9, r0
 8006562:	eb12 0a08 	adds.w	sl, r2, r8
 8006566:	eb43 0b09 	adc.w	fp, r3, r9
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006578:	4650      	mov	r0, sl
 800657a:	4659      	mov	r1, fp
 800657c:	f7fa fb84 	bl	8000c88 <__aeabi_uldivmod>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4613      	mov	r3, r2
 8006586:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800658e:	d308      	bcc.n	80065a2 <UART_SetConfig+0x3de>
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006596:	d204      	bcs.n	80065a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	60da      	str	r2, [r3, #12]
 80065a0:	e0b6      	b.n	8006710 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80065a8:	e0b2      	b.n	8006710 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b2:	d15e      	bne.n	8006672 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80065b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d828      	bhi.n	800660e <UART_SetConfig+0x44a>
 80065bc:	a201      	add	r2, pc, #4	@ (adr r2, 80065c4 <UART_SetConfig+0x400>)
 80065be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c2:	bf00      	nop
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	080065f1 	.word	0x080065f1
 80065cc:	080065f9 	.word	0x080065f9
 80065d0:	0800660f 	.word	0x0800660f
 80065d4:	080065ff 	.word	0x080065ff
 80065d8:	0800660f 	.word	0x0800660f
 80065dc:	0800660f 	.word	0x0800660f
 80065e0:	0800660f 	.word	0x0800660f
 80065e4:	08006607 	.word	0x08006607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e8:	f7fd f98a 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 80065ec:	61f8      	str	r0, [r7, #28]
        break;
 80065ee:	e014      	b.n	800661a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f0:	f7fd f99c 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 80065f4:	61f8      	str	r0, [r7, #28]
        break;
 80065f6:	e010      	b.n	800661a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006730 <UART_SetConfig+0x56c>)
 80065fa:	61fb      	str	r3, [r7, #28]
        break;
 80065fc:	e00d      	b.n	800661a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065fe:	f7fd f8e7 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 8006602:	61f8      	str	r0, [r7, #28]
        break;
 8006604:	e009      	b.n	800661a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800660a:	61fb      	str	r3, [r7, #28]
        break;
 800660c:	e005      	b.n	800661a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d077      	beq.n	8006710 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	005a      	lsls	r2, r3, #1
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	441a      	add	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	2b0f      	cmp	r3, #15
 800663a:	d916      	bls.n	800666a <UART_SetConfig+0x4a6>
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006642:	d212      	bcs.n	800666a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	b29b      	uxth	r3, r3
 8006648:	f023 030f 	bic.w	r3, r3, #15
 800664c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	085b      	lsrs	r3, r3, #1
 8006652:	b29b      	uxth	r3, r3
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	b29a      	uxth	r2, r3
 800665a:	8afb      	ldrh	r3, [r7, #22]
 800665c:	4313      	orrs	r3, r2
 800665e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	8afa      	ldrh	r2, [r7, #22]
 8006666:	60da      	str	r2, [r3, #12]
 8006668:	e052      	b.n	8006710 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006670:	e04e      	b.n	8006710 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006672:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006676:	2b08      	cmp	r3, #8
 8006678:	d827      	bhi.n	80066ca <UART_SetConfig+0x506>
 800667a:	a201      	add	r2, pc, #4	@ (adr r2, 8006680 <UART_SetConfig+0x4bc>)
 800667c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006680:	080066a5 	.word	0x080066a5
 8006684:	080066ad 	.word	0x080066ad
 8006688:	080066b5 	.word	0x080066b5
 800668c:	080066cb 	.word	0x080066cb
 8006690:	080066bb 	.word	0x080066bb
 8006694:	080066cb 	.word	0x080066cb
 8006698:	080066cb 	.word	0x080066cb
 800669c:	080066cb 	.word	0x080066cb
 80066a0:	080066c3 	.word	0x080066c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066a4:	f7fd f92c 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 80066a8:	61f8      	str	r0, [r7, #28]
        break;
 80066aa:	e014      	b.n	80066d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066ac:	f7fd f93e 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 80066b0:	61f8      	str	r0, [r7, #28]
        break;
 80066b2:	e010      	b.n	80066d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006730 <UART_SetConfig+0x56c>)
 80066b6:	61fb      	str	r3, [r7, #28]
        break;
 80066b8:	e00d      	b.n	80066d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ba:	f7fd f889 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 80066be:	61f8      	str	r0, [r7, #28]
        break;
 80066c0:	e009      	b.n	80066d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066c6:	61fb      	str	r3, [r7, #28]
        break;
 80066c8:	e005      	b.n	80066d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066d4:	bf00      	nop
    }

    if (pclk != 0U)
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d019      	beq.n	8006710 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	085a      	lsrs	r2, r3, #1
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	441a      	add	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b0f      	cmp	r3, #15
 80066f4:	d909      	bls.n	800670a <UART_SetConfig+0x546>
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066fc:	d205      	bcs.n	800670a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60da      	str	r2, [r3, #12]
 8006708:	e002      	b.n	8006710 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800671c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006720:	4618      	mov	r0, r3
 8006722:	3728      	adds	r7, #40	@ 0x28
 8006724:	46bd      	mov	sp, r7
 8006726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800672a:	bf00      	nop
 800672c:	40008000 	.word	0x40008000
 8006730:	00f42400 	.word	0x00f42400

08006734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a6:	f003 0304 	and.w	r3, r3, #4
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01a      	beq.n	800684a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006832:	d10a      	bne.n	800684a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	605a      	str	r2, [r3, #4]
  }
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b098      	sub	sp, #96	@ 0x60
 800687c:	af02      	add	r7, sp, #8
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006888:	f7fb fd22 	bl	80022d0 <HAL_GetTick>
 800688c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b08      	cmp	r3, #8
 800689a:	d12e      	bne.n	80068fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800689c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068a4:	2200      	movs	r2, #0
 80068a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f88c 	bl	80069c8 <UART_WaitOnFlagUntilTimeout>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d021      	beq.n	80068fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80068d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e6      	bne.n	80068b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e062      	b.n	80069c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b04      	cmp	r3, #4
 8006906:	d149      	bne.n	800699c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006908:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006910:	2200      	movs	r2, #0
 8006912:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f856 	bl	80069c8 <UART_WaitOnFlagUntilTimeout>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d03c      	beq.n	800699c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	623b      	str	r3, [r7, #32]
   return(result);
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006940:	633b      	str	r3, [r7, #48]	@ 0x30
 8006942:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e6      	bne.n	8006922 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3308      	adds	r3, #8
 800695a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	60fb      	str	r3, [r7, #12]
   return(result);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3308      	adds	r3, #8
 8006972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006974:	61fa      	str	r2, [r7, #28]
 8006976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	69b9      	ldr	r1, [r7, #24]
 800697a:	69fa      	ldr	r2, [r7, #28]
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	617b      	str	r3, [r7, #20]
   return(result);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e5      	bne.n	8006954 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e011      	b.n	80069c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3758      	adds	r7, #88	@ 0x58
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	603b      	str	r3, [r7, #0]
 80069d4:	4613      	mov	r3, r2
 80069d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d8:	e04f      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d04b      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e2:	f7fb fc75 	bl	80022d0 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d302      	bcc.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e04e      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d037      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b80      	cmp	r3, #128	@ 0x80
 8006a0e:	d034      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b40      	cmp	r3, #64	@ 0x40
 8006a14:	d031      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d110      	bne.n	8006a46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2208      	movs	r2, #8
 8006a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f8ff 	bl	8006c30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2208      	movs	r2, #8
 8006a36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e029      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a54:	d111      	bne.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f8e5 	bl	8006c30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e00f      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4013      	ands	r3, r2
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	bf0c      	ite	eq
 8006a8a:	2301      	moveq	r3, #1
 8006a8c:	2300      	movne	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d0a0      	beq.n	80069da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b096      	sub	sp, #88	@ 0x58
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	88fa      	ldrh	r2, [r7, #6]
 8006abc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2222      	movs	r2, #34	@ 0x22
 8006acc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d028      	beq.n	8006b2a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006adc:	4a3e      	ldr	r2, [pc, #248]	@ (8006bd8 <UART_Start_Receive_DMA+0x134>)
 8006ade:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ae4:	4a3d      	ldr	r2, [pc, #244]	@ (8006bdc <UART_Start_Receive_DMA+0x138>)
 8006ae6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aec:	4a3c      	ldr	r2, [pc, #240]	@ (8006be0 <UART_Start_Receive_DMA+0x13c>)
 8006aee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006af4:	2200      	movs	r2, #0
 8006af6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3324      	adds	r3, #36	@ 0x24
 8006b02:	4619      	mov	r1, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b08:	461a      	mov	r2, r3
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	f7fb fd86 	bl	800261c <HAL_DMA_Start_IT>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d009      	beq.n	8006b2a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2210      	movs	r2, #16
 8006b1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e051      	b.n	8006bce <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d018      	beq.n	8006b64 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b46:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b52:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b58:	e841 2300 	strex	r3, r2, [r1]
 8006b5c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e6      	bne.n	8006b32 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3308      	adds	r3, #8
 8006b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6e:	e853 3f00 	ldrex	r3, [r3]
 8006b72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3308      	adds	r3, #8
 8006b82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b84:	637a      	str	r2, [r7, #52]	@ 0x34
 8006b86:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b8c:	e841 2300 	strex	r3, r2, [r1]
 8006b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e5      	bne.n	8006b64 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bb8:	623a      	str	r2, [r7, #32]
 8006bba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	69f9      	ldr	r1, [r7, #28]
 8006bbe:	6a3a      	ldr	r2, [r7, #32]
 8006bc0:	e841 2300 	strex	r3, r2, [r1]
 8006bc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e5      	bne.n	8006b98 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3758      	adds	r7, #88	@ 0x58
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	08006cf9 	.word	0x08006cf9
 8006bdc:	08006e25 	.word	0x08006e25
 8006be0:	08006e63 	.word	0x08006e63

08006be4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b089      	sub	sp, #36	@ 0x24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c00:	61fb      	str	r3, [r7, #28]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	61bb      	str	r3, [r7, #24]
 8006c0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6979      	ldr	r1, [r7, #20]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	613b      	str	r3, [r7, #16]
   return(result);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e6      	bne.n	8006bec <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2220      	movs	r2, #32
 8006c22:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006c24:	bf00      	nop
 8006c26:	3724      	adds	r7, #36	@ 0x24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b095      	sub	sp, #84	@ 0x54
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c56:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e6      	bne.n	8006c38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3308      	adds	r3, #8
 8006c70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	e853 3f00 	ldrex	r3, [r3]
 8006c78:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	f023 0301 	bic.w	r3, r3, #1
 8006c80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3308      	adds	r3, #8
 8006c88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e5      	bne.n	8006c6a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d118      	bne.n	8006cd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f023 0310 	bic.w	r3, r3, #16
 8006cba:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cc4:	61bb      	str	r3, [r7, #24]
 8006cc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6979      	ldr	r1, [r7, #20]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e6      	bne.n	8006ca6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006cec:	bf00      	nop
 8006cee:	3754      	adds	r7, #84	@ 0x54
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b09c      	sub	sp, #112	@ 0x70
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d04:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d171      	bne.n	8006df8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d24:	e853 3f00 	ldrex	r3, [r3]
 8006d28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1e6      	bne.n	8006d1c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3308      	adds	r3, #8
 8006d54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d58:	e853 3f00 	ldrex	r3, [r3]
 8006d5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d60:	f023 0301 	bic.w	r3, r3, #1
 8006d64:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3308      	adds	r3, #8
 8006d6c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e5      	bne.n	8006d4e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3308      	adds	r3, #8
 8006d88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	623b      	str	r3, [r7, #32]
   return(result);
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d98:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3308      	adds	r3, #8
 8006da0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006da2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e5      	bne.n	8006d82 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006db8:	2220      	movs	r2, #32
 8006dba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d118      	bne.n	8006df8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 0310 	bic.w	r3, r3, #16
 8006dda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	69b9      	ldr	r1, [r7, #24]
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	617b      	str	r3, [r7, #20]
   return(result);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e6      	bne.n	8006dc6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d107      	bne.n	8006e16 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e10:	f7ff f9cc 	bl	80061ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e14:	e002      	b.n	8006e1c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006e16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e18:	f7fb f9d6 	bl	80021c8 <HAL_UART_RxCpltCallback>
}
 8006e1c:	bf00      	nop
 8006e1e:	3770      	adds	r7, #112	@ 0x70
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d109      	bne.n	8006e54 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e46:	085b      	lsrs	r3, r3, #1
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f7ff f9ad 	bl	80061ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e52:	e002      	b.n	8006e5a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f7fb f991 	bl	800217c <HAL_UART_RxHalfCpltCallback>
}
 8006e5a:	bf00      	nop
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b086      	sub	sp, #24
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e74:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e88:	2b80      	cmp	r3, #128	@ 0x80
 8006e8a:	d109      	bne.n	8006ea0 <UART_DMAError+0x3e>
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b21      	cmp	r3, #33	@ 0x21
 8006e90:	d106      	bne.n	8006ea0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006e9a:	6978      	ldr	r0, [r7, #20]
 8006e9c:	f7ff fea2 	bl	8006be4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eaa:	2b40      	cmp	r3, #64	@ 0x40
 8006eac:	d109      	bne.n	8006ec2 <UART_DMAError+0x60>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b22      	cmp	r3, #34	@ 0x22
 8006eb2:	d106      	bne.n	8006ec2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006ebc:	6978      	ldr	r0, [r7, #20]
 8006ebe:	f7ff feb7 	bl	8006c30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ec8:	f043 0210 	orr.w	r2, r3, #16
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ed2:	6978      	ldr	r0, [r7, #20]
 8006ed4:	f7ff f960 	bl	8006198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ed8:	bf00      	nop
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f7ff f94a 	bl	8006198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f04:	bf00      	nop
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f28:	61fb      	str	r3, [r7, #28]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	61bb      	str	r3, [r7, #24]
 8006f34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	6979      	ldr	r1, [r7, #20]
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e6      	bne.n	8006f14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff f916 	bl	8006184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f58:	bf00      	nop
 8006f5a:	3720      	adds	r7, #32
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <__NVIC_SetPriority>:
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	6039      	str	r1, [r7, #0]
 8006f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	db0a      	blt.n	8006f9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	490c      	ldr	r1, [pc, #48]	@ (8006fc0 <__NVIC_SetPriority+0x4c>)
 8006f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f92:	0112      	lsls	r2, r2, #4
 8006f94:	b2d2      	uxtb	r2, r2
 8006f96:	440b      	add	r3, r1
 8006f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006f9c:	e00a      	b.n	8006fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	4908      	ldr	r1, [pc, #32]	@ (8006fc4 <__NVIC_SetPriority+0x50>)
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	f003 030f 	and.w	r3, r3, #15
 8006faa:	3b04      	subs	r3, #4
 8006fac:	0112      	lsls	r2, r2, #4
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	440b      	add	r3, r1
 8006fb2:	761a      	strb	r2, [r3, #24]
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	e000e100 	.word	0xe000e100
 8006fc4:	e000ed00 	.word	0xe000ed00

08006fc8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006fcc:	4b05      	ldr	r3, [pc, #20]	@ (8006fe4 <SysTick_Handler+0x1c>)
 8006fce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006fd0:	f001 fd46 	bl	8008a60 <xTaskGetSchedulerState>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d001      	beq.n	8006fde <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006fda:	f002 fb3d 	bl	8009658 <xPortSysTickHandler>
  }
}
 8006fde:	bf00      	nop
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	e000e010 	.word	0xe000e010

08006fe8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006fec:	2100      	movs	r1, #0
 8006fee:	f06f 0004 	mvn.w	r0, #4
 8006ff2:	f7ff ffbf 	bl	8006f74 <__NVIC_SetPriority>
#endif
}
 8006ff6:	bf00      	nop
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007002:	f3ef 8305 	mrs	r3, IPSR
 8007006:	603b      	str	r3, [r7, #0]
  return(result);
 8007008:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800700e:	f06f 0305 	mvn.w	r3, #5
 8007012:	607b      	str	r3, [r7, #4]
 8007014:	e00c      	b.n	8007030 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007016:	4b0a      	ldr	r3, [pc, #40]	@ (8007040 <osKernelInitialize+0x44>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d105      	bne.n	800702a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800701e:	4b08      	ldr	r3, [pc, #32]	@ (8007040 <osKernelInitialize+0x44>)
 8007020:	2201      	movs	r2, #1
 8007022:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007024:	2300      	movs	r3, #0
 8007026:	607b      	str	r3, [r7, #4]
 8007028:	e002      	b.n	8007030 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800702a:	f04f 33ff 	mov.w	r3, #4294967295
 800702e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007030:	687b      	ldr	r3, [r7, #4]
}
 8007032:	4618      	mov	r0, r3
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	20000968 	.word	0x20000968

08007044 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800704a:	f3ef 8305 	mrs	r3, IPSR
 800704e:	603b      	str	r3, [r7, #0]
  return(result);
 8007050:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007056:	f06f 0305 	mvn.w	r3, #5
 800705a:	607b      	str	r3, [r7, #4]
 800705c:	e010      	b.n	8007080 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800705e:	4b0b      	ldr	r3, [pc, #44]	@ (800708c <osKernelStart+0x48>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d109      	bne.n	800707a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007066:	f7ff ffbf 	bl	8006fe8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800706a:	4b08      	ldr	r3, [pc, #32]	@ (800708c <osKernelStart+0x48>)
 800706c:	2202      	movs	r2, #2
 800706e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007070:	f001 f892 	bl	8008198 <vTaskStartScheduler>
      stat = osOK;
 8007074:	2300      	movs	r3, #0
 8007076:	607b      	str	r3, [r7, #4]
 8007078:	e002      	b.n	8007080 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800707a:	f04f 33ff 	mov.w	r3, #4294967295
 800707e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007080:	687b      	ldr	r3, [r7, #4]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20000968 	.word	0x20000968

08007090 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007090:	b580      	push	{r7, lr}
 8007092:	b08e      	sub	sp, #56	@ 0x38
 8007094:	af04      	add	r7, sp, #16
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800709c:	2300      	movs	r3, #0
 800709e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070a0:	f3ef 8305 	mrs	r3, IPSR
 80070a4:	617b      	str	r3, [r7, #20]
  return(result);
 80070a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d17e      	bne.n	80071aa <osThreadNew+0x11a>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d07b      	beq.n	80071aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80070b2:	2380      	movs	r3, #128	@ 0x80
 80070b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80070b6:	2318      	movs	r3, #24
 80070b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80070be:	f04f 33ff 	mov.w	r3, #4294967295
 80070c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d045      	beq.n	8007156 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <osThreadNew+0x48>
        name = attr->name;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d008      	beq.n	80070fe <osThreadNew+0x6e>
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	2b38      	cmp	r3, #56	@ 0x38
 80070f0:	d805      	bhi.n	80070fe <osThreadNew+0x6e>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <osThreadNew+0x72>
        return (NULL);
 80070fe:	2300      	movs	r3, #0
 8007100:	e054      	b.n	80071ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	089b      	lsrs	r3, r3, #2
 8007110:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00e      	beq.n	8007138 <osThreadNew+0xa8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	2ba7      	cmp	r3, #167	@ 0xa7
 8007120:	d90a      	bls.n	8007138 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007126:	2b00      	cmp	r3, #0
 8007128:	d006      	beq.n	8007138 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <osThreadNew+0xa8>
        mem = 1;
 8007132:	2301      	movs	r3, #1
 8007134:	61bb      	str	r3, [r7, #24]
 8007136:	e010      	b.n	800715a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10c      	bne.n	800715a <osThreadNew+0xca>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d108      	bne.n	800715a <osThreadNew+0xca>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d104      	bne.n	800715a <osThreadNew+0xca>
          mem = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	61bb      	str	r3, [r7, #24]
 8007154:	e001      	b.n	800715a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d110      	bne.n	8007182 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007168:	9202      	str	r2, [sp, #8]
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	6a3a      	ldr	r2, [r7, #32]
 8007174:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 fe1a 	bl	8007db0 <xTaskCreateStatic>
 800717c:	4603      	mov	r3, r0
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	e013      	b.n	80071aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d110      	bne.n	80071aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	b29a      	uxth	r2, r3
 800718c:	f107 0310 	add.w	r3, r7, #16
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 fe68 	bl	8007e70 <xTaskCreate>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d001      	beq.n	80071aa <osThreadNew+0x11a>
            hTask = NULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80071aa:	693b      	ldr	r3, [r7, #16]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3728      	adds	r7, #40	@ 0x28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071bc:	f3ef 8305 	mrs	r3, IPSR
 80071c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80071c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d003      	beq.n	80071d0 <osDelay+0x1c>
    stat = osErrorISR;
 80071c8:	f06f 0305 	mvn.w	r3, #5
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	e007      	b.n	80071e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 ffa6 	bl	800812c <vTaskDelay>
    }
  }

  return (stat);
 80071e0:	68fb      	ldr	r3, [r7, #12]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4a07      	ldr	r2, [pc, #28]	@ (8007218 <vApplicationGetIdleTaskMemory+0x2c>)
 80071fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	4a06      	ldr	r2, [pc, #24]	@ (800721c <vApplicationGetIdleTaskMemory+0x30>)
 8007202:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2280      	movs	r2, #128	@ 0x80
 8007208:	601a      	str	r2, [r3, #0]
}
 800720a:	bf00      	nop
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	2000096c 	.word	0x2000096c
 800721c:	20000a14 	.word	0x20000a14

08007220 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4a07      	ldr	r2, [pc, #28]	@ (800724c <vApplicationGetTimerTaskMemory+0x2c>)
 8007230:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	4a06      	ldr	r2, [pc, #24]	@ (8007250 <vApplicationGetTimerTaskMemory+0x30>)
 8007236:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800723e:	601a      	str	r2, [r3, #0]
}
 8007240:	bf00      	nop
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	20000c14 	.word	0x20000c14
 8007250:	20000cbc 	.word	0x20000cbc

08007254 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f103 0208 	add.w	r2, r3, #8
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f04f 32ff 	mov.w	r2, #4294967295
 800726c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f103 0208 	add.w	r2, r3, #8
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f103 0208 	add.w	r2, r3, #8
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072a2:	bf00      	nop
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072ae:	b480      	push	{r7}
 80072b0:	b085      	sub	sp, #20
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	601a      	str	r2, [r3, #0]
}
 80072ea:	bf00      	nop
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072f6:	b480      	push	{r7}
 80072f8:	b085      	sub	sp, #20
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730c:	d103      	bne.n	8007316 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	e00c      	b.n	8007330 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	3308      	adds	r3, #8
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	e002      	b.n	8007324 <vListInsert+0x2e>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	429a      	cmp	r2, r3
 800732e:	d2f6      	bcs.n	800731e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	601a      	str	r2, [r3, #0]
}
 800735c:	bf00      	nop
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	6892      	ldr	r2, [r2, #8]
 800737e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6852      	ldr	r2, [r2, #4]
 8007388:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	429a      	cmp	r2, r3
 8007392:	d103      	bne.n	800739c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	1e5a      	subs	r2, r3, #1
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10b      	bne.n	80073e8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80073e2:	bf00      	nop
 80073e4:	bf00      	nop
 80073e6:	e7fd      	b.n	80073e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80073e8:	f002 f8a6 	bl	8009538 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f4:	68f9      	ldr	r1, [r7, #12]
 80073f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80073f8:	fb01 f303 	mul.w	r3, r1, r3
 80073fc:	441a      	add	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007418:	3b01      	subs	r3, #1
 800741a:	68f9      	ldr	r1, [r7, #12]
 800741c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800741e:	fb01 f303 	mul.w	r3, r1, r3
 8007422:	441a      	add	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	22ff      	movs	r2, #255	@ 0xff
 800742c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	22ff      	movs	r2, #255	@ 0xff
 8007434:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d114      	bne.n	8007468 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d01a      	beq.n	800747c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3310      	adds	r3, #16
 800744a:	4618      	mov	r0, r3
 800744c:	f001 f942 	bl	80086d4 <xTaskRemoveFromEventList>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d012      	beq.n	800747c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007456:	4b0d      	ldr	r3, [pc, #52]	@ (800748c <xQueueGenericReset+0xd0>)
 8007458:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	e009      	b.n	800747c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3310      	adds	r3, #16
 800746c:	4618      	mov	r0, r3
 800746e:	f7ff fef1 	bl	8007254 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3324      	adds	r3, #36	@ 0x24
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff feec 	bl	8007254 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800747c:	f002 f88e 	bl	800959c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007480:	2301      	movs	r3, #1
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	e000ed04 	.word	0xe000ed04

08007490 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08e      	sub	sp, #56	@ 0x38
 8007494:	af02      	add	r7, sp, #8
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10b      	bne.n	80074bc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074b6:	bf00      	nop
 80074b8:	bf00      	nop
 80074ba:	e7fd      	b.n	80074b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10b      	bne.n	80074da <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	e7fd      	b.n	80074d6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <xQueueGenericCreateStatic+0x56>
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <xQueueGenericCreateStatic+0x5a>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e000      	b.n	80074ec <xQueueGenericCreateStatic+0x5c>
 80074ea:	2300      	movs	r3, #0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10b      	bne.n	8007508 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	623b      	str	r3, [r7, #32]
}
 8007502:	bf00      	nop
 8007504:	bf00      	nop
 8007506:	e7fd      	b.n	8007504 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d102      	bne.n	8007514 <xQueueGenericCreateStatic+0x84>
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <xQueueGenericCreateStatic+0x88>
 8007514:	2301      	movs	r3, #1
 8007516:	e000      	b.n	800751a <xQueueGenericCreateStatic+0x8a>
 8007518:	2300      	movs	r3, #0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10b      	bne.n	8007536 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	61fb      	str	r3, [r7, #28]
}
 8007530:	bf00      	nop
 8007532:	bf00      	nop
 8007534:	e7fd      	b.n	8007532 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007536:	2350      	movs	r3, #80	@ 0x50
 8007538:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b50      	cmp	r3, #80	@ 0x50
 800753e:	d00b      	beq.n	8007558 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	61bb      	str	r3, [r7, #24]
}
 8007552:	bf00      	nop
 8007554:	bf00      	nop
 8007556:	e7fd      	b.n	8007554 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007558:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800755e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00d      	beq.n	8007580 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800756c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	4613      	mov	r3, r2
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	68b9      	ldr	r1, [r7, #8]
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 f805 	bl	800758a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007582:	4618      	mov	r0, r3
 8007584:	3730      	adds	r7, #48	@ 0x30
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	60b9      	str	r1, [r7, #8]
 8007594:	607a      	str	r2, [r7, #4]
 8007596:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d103      	bne.n	80075a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	e002      	b.n	80075ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075b8:	2101      	movs	r1, #1
 80075ba:	69b8      	ldr	r0, [r7, #24]
 80075bc:	f7ff fefe 	bl	80073bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	78fa      	ldrb	r2, [r7, #3]
 80075c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80075c8:	bf00      	nop
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08e      	sub	sp, #56	@ 0x38
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075de:	2300      	movs	r3, #0
 80075e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10b      	bne.n	8007604 <xQueueGenericSend+0x34>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075fe:	bf00      	nop
 8007600:	bf00      	nop
 8007602:	e7fd      	b.n	8007600 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d103      	bne.n	8007612 <xQueueGenericSend+0x42>
 800760a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <xQueueGenericSend+0x46>
 8007612:	2301      	movs	r3, #1
 8007614:	e000      	b.n	8007618 <xQueueGenericSend+0x48>
 8007616:	2300      	movs	r3, #0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10b      	bne.n	8007634 <xQueueGenericSend+0x64>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800762e:	bf00      	nop
 8007630:	bf00      	nop
 8007632:	e7fd      	b.n	8007630 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	2b02      	cmp	r3, #2
 8007638:	d103      	bne.n	8007642 <xQueueGenericSend+0x72>
 800763a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800763e:	2b01      	cmp	r3, #1
 8007640:	d101      	bne.n	8007646 <xQueueGenericSend+0x76>
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <xQueueGenericSend+0x78>
 8007646:	2300      	movs	r3, #0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10b      	bne.n	8007664 <xQueueGenericSend+0x94>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	623b      	str	r3, [r7, #32]
}
 800765e:	bf00      	nop
 8007660:	bf00      	nop
 8007662:	e7fd      	b.n	8007660 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007664:	f001 f9fc 	bl	8008a60 <xTaskGetSchedulerState>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <xQueueGenericSend+0xa4>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <xQueueGenericSend+0xa8>
 8007674:	2301      	movs	r3, #1
 8007676:	e000      	b.n	800767a <xQueueGenericSend+0xaa>
 8007678:	2300      	movs	r3, #0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10b      	bne.n	8007696 <xQueueGenericSend+0xc6>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	61fb      	str	r3, [r7, #28]
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	e7fd      	b.n	8007692 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007696:	f001 ff4f 	bl	8009538 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d302      	bcc.n	80076ac <xQueueGenericSend+0xdc>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d129      	bne.n	8007700 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	68b9      	ldr	r1, [r7, #8]
 80076b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076b2:	f000 fa0f 	bl	8007ad4 <prvCopyDataToQueue>
 80076b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d010      	beq.n	80076e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c2:	3324      	adds	r3, #36	@ 0x24
 80076c4:	4618      	mov	r0, r3
 80076c6:	f001 f805 	bl	80086d4 <xTaskRemoveFromEventList>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d013      	beq.n	80076f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80076d0:	4b3f      	ldr	r3, [pc, #252]	@ (80077d0 <xQueueGenericSend+0x200>)
 80076d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	e00a      	b.n	80076f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80076e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d007      	beq.n	80076f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80076e8:	4b39      	ldr	r3, [pc, #228]	@ (80077d0 <xQueueGenericSend+0x200>)
 80076ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076f8:	f001 ff50 	bl	800959c <vPortExitCritical>
				return pdPASS;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e063      	b.n	80077c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d103      	bne.n	800770e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007706:	f001 ff49 	bl	800959c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800770a:	2300      	movs	r3, #0
 800770c:	e05c      	b.n	80077c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800770e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007710:	2b00      	cmp	r3, #0
 8007712:	d106      	bne.n	8007722 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007714:	f107 0314 	add.w	r3, r7, #20
 8007718:	4618      	mov	r0, r3
 800771a:	f001 f83f 	bl	800879c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800771e:	2301      	movs	r3, #1
 8007720:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007722:	f001 ff3b 	bl	800959c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007726:	f000 fda7 	bl	8008278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800772a:	f001 ff05 	bl	8009538 <vPortEnterCritical>
 800772e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007730:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007734:	b25b      	sxtb	r3, r3
 8007736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773a:	d103      	bne.n	8007744 <xQueueGenericSend+0x174>
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007746:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800774a:	b25b      	sxtb	r3, r3
 800774c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007750:	d103      	bne.n	800775a <xQueueGenericSend+0x18a>
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800775a:	f001 ff1f 	bl	800959c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800775e:	1d3a      	adds	r2, r7, #4
 8007760:	f107 0314 	add.w	r3, r7, #20
 8007764:	4611      	mov	r1, r2
 8007766:	4618      	mov	r0, r3
 8007768:	f001 f82e 	bl	80087c8 <xTaskCheckForTimeOut>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d124      	bne.n	80077bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007772:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007774:	f000 faa6 	bl	8007cc4 <prvIsQueueFull>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d018      	beq.n	80077b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	3310      	adds	r3, #16
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	4611      	mov	r1, r2
 8007786:	4618      	mov	r0, r3
 8007788:	f000 ff52 	bl	8008630 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800778c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800778e:	f000 fa31 	bl	8007bf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007792:	f000 fd7f 	bl	8008294 <xTaskResumeAll>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	f47f af7c 	bne.w	8007696 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800779e:	4b0c      	ldr	r3, [pc, #48]	@ (80077d0 <xQueueGenericSend+0x200>)
 80077a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	e772      	b.n	8007696 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80077b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077b2:	f000 fa1f 	bl	8007bf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077b6:	f000 fd6d 	bl	8008294 <xTaskResumeAll>
 80077ba:	e76c      	b.n	8007696 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80077bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077be:	f000 fa19 	bl	8007bf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077c2:	f000 fd67 	bl	8008294 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80077c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3738      	adds	r7, #56	@ 0x38
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	e000ed04 	.word	0xe000ed04

080077d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b090      	sub	sp, #64	@ 0x40
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80077e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10b      	bne.n	8007804 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077fe:	bf00      	nop
 8007800:	bf00      	nop
 8007802:	e7fd      	b.n	8007800 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <xQueueGenericSendFromISR+0x3e>
 800780a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <xQueueGenericSendFromISR+0x42>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <xQueueGenericSendFromISR+0x44>
 8007816:	2300      	movs	r3, #0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10b      	bne.n	8007834 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800782e:	bf00      	nop
 8007830:	bf00      	nop
 8007832:	e7fd      	b.n	8007830 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b02      	cmp	r3, #2
 8007838:	d103      	bne.n	8007842 <xQueueGenericSendFromISR+0x6e>
 800783a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800783e:	2b01      	cmp	r3, #1
 8007840:	d101      	bne.n	8007846 <xQueueGenericSendFromISR+0x72>
 8007842:	2301      	movs	r3, #1
 8007844:	e000      	b.n	8007848 <xQueueGenericSendFromISR+0x74>
 8007846:	2300      	movs	r3, #0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10b      	bne.n	8007864 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	623b      	str	r3, [r7, #32]
}
 800785e:	bf00      	nop
 8007860:	bf00      	nop
 8007862:	e7fd      	b.n	8007860 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007864:	f001 ff48 	bl	80096f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007868:	f3ef 8211 	mrs	r2, BASEPRI
 800786c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	61fa      	str	r2, [r7, #28]
 800787e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007880:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007882:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007886:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800788c:	429a      	cmp	r2, r3
 800788e:	d302      	bcc.n	8007896 <xQueueGenericSendFromISR+0xc2>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b02      	cmp	r3, #2
 8007894:	d12f      	bne.n	80078f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007898:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800789c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80078ac:	f000 f912 	bl	8007ad4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80078b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b8:	d112      	bne.n	80078e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d016      	beq.n	80078f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c4:	3324      	adds	r3, #36	@ 0x24
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 ff04 	bl	80086d4 <xTaskRemoveFromEventList>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00e      	beq.n	80078f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00b      	beq.n	80078f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	e007      	b.n	80078f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80078e4:	3301      	adds	r3, #1
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	b25a      	sxtb	r2, r3
 80078ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80078f0:	2301      	movs	r3, #1
 80078f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80078f4:	e001      	b.n	80078fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078fc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007904:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007908:	4618      	mov	r0, r3
 800790a:	3740      	adds	r7, #64	@ 0x40
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08c      	sub	sp, #48	@ 0x30
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800791c:	2300      	movs	r3, #0
 800791e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10b      	bne.n	8007942 <xQueueReceive+0x32>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	623b      	str	r3, [r7, #32]
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	e7fd      	b.n	800793e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d103      	bne.n	8007950 <xQueueReceive+0x40>
 8007948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <xQueueReceive+0x44>
 8007950:	2301      	movs	r3, #1
 8007952:	e000      	b.n	8007956 <xQueueReceive+0x46>
 8007954:	2300      	movs	r3, #0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10b      	bne.n	8007972 <xQueueReceive+0x62>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	61fb      	str	r3, [r7, #28]
}
 800796c:	bf00      	nop
 800796e:	bf00      	nop
 8007970:	e7fd      	b.n	800796e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007972:	f001 f875 	bl	8008a60 <xTaskGetSchedulerState>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d102      	bne.n	8007982 <xQueueReceive+0x72>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <xQueueReceive+0x76>
 8007982:	2301      	movs	r3, #1
 8007984:	e000      	b.n	8007988 <xQueueReceive+0x78>
 8007986:	2300      	movs	r3, #0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10b      	bne.n	80079a4 <xQueueReceive+0x94>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	61bb      	str	r3, [r7, #24]
}
 800799e:	bf00      	nop
 80079a0:	bf00      	nop
 80079a2:	e7fd      	b.n	80079a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079a4:	f001 fdc8 	bl	8009538 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01f      	beq.n	80079f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079b8:	f000 f8f6 	bl	8007ba8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079be:	1e5a      	subs	r2, r3, #1
 80079c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00f      	beq.n	80079ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ce:	3310      	adds	r3, #16
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fe7f 	bl	80086d4 <xTaskRemoveFromEventList>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d007      	beq.n	80079ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079dc:	4b3c      	ldr	r3, [pc, #240]	@ (8007ad0 <xQueueReceive+0x1c0>)
 80079de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079ec:	f001 fdd6 	bl	800959c <vPortExitCritical>
				return pdPASS;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e069      	b.n	8007ac8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d103      	bne.n	8007a02 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079fa:	f001 fdcf 	bl	800959c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079fe:	2300      	movs	r3, #0
 8007a00:	e062      	b.n	8007ac8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d106      	bne.n	8007a16 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a08:	f107 0310 	add.w	r3, r7, #16
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fec5 	bl	800879c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a12:	2301      	movs	r3, #1
 8007a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a16:	f001 fdc1 	bl	800959c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a1a:	f000 fc2d 	bl	8008278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a1e:	f001 fd8b 	bl	8009538 <vPortEnterCritical>
 8007a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a28:	b25b      	sxtb	r3, r3
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2e:	d103      	bne.n	8007a38 <xQueueReceive+0x128>
 8007a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a3e:	b25b      	sxtb	r3, r3
 8007a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a44:	d103      	bne.n	8007a4e <xQueueReceive+0x13e>
 8007a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a4e:	f001 fda5 	bl	800959c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a52:	1d3a      	adds	r2, r7, #4
 8007a54:	f107 0310 	add.w	r3, r7, #16
 8007a58:	4611      	mov	r1, r2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 feb4 	bl	80087c8 <xTaskCheckForTimeOut>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d123      	bne.n	8007aae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a68:	f000 f916 	bl	8007c98 <prvIsQueueEmpty>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d017      	beq.n	8007aa2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a74:	3324      	adds	r3, #36	@ 0x24
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fdd8 	bl	8008630 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a82:	f000 f8b7 	bl	8007bf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a86:	f000 fc05 	bl	8008294 <xTaskResumeAll>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d189      	bne.n	80079a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007a90:	4b0f      	ldr	r3, [pc, #60]	@ (8007ad0 <xQueueReceive+0x1c0>)
 8007a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	e780      	b.n	80079a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007aa4:	f000 f8a6 	bl	8007bf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007aa8:	f000 fbf4 	bl	8008294 <xTaskResumeAll>
 8007aac:	e77a      	b.n	80079a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007aae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ab0:	f000 f8a0 	bl	8007bf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ab4:	f000 fbee 	bl	8008294 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ab8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007aba:	f000 f8ed 	bl	8007c98 <prvIsQueueEmpty>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f43f af6f 	beq.w	80079a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ac6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3730      	adds	r7, #48	@ 0x30
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10d      	bne.n	8007b0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d14d      	bne.n	8007b96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 ffcc 	bl	8008a9c <xTaskPriorityDisinherit>
 8007b04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	609a      	str	r2, [r3, #8]
 8007b0c:	e043      	b.n	8007b96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d119      	bne.n	8007b48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6858      	ldr	r0, [r3, #4]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	68b9      	ldr	r1, [r7, #8]
 8007b20:	f002 ff57 	bl	800a9d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b2c:	441a      	add	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d32b      	bcc.n	8007b96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	605a      	str	r2, [r3, #4]
 8007b46:	e026      	b.n	8007b96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	68d8      	ldr	r0, [r3, #12]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b50:	461a      	mov	r2, r3
 8007b52:	68b9      	ldr	r1, [r7, #8]
 8007b54:	f002 ff3d 	bl	800a9d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b60:	425b      	negs	r3, r3
 8007b62:	441a      	add	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	68da      	ldr	r2, [r3, #12]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d207      	bcs.n	8007b84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7c:	425b      	negs	r3, r3
 8007b7e:	441a      	add	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d105      	bne.n	8007b96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	1c5a      	adds	r2, r3, #1
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007b9e:	697b      	ldr	r3, [r7, #20]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d018      	beq.n	8007bec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc2:	441a      	add	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68da      	ldr	r2, [r3, #12]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d303      	bcc.n	8007bdc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68d9      	ldr	r1, [r3, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be4:	461a      	mov	r2, r3
 8007be6:	6838      	ldr	r0, [r7, #0]
 8007be8:	f002 fef3 	bl	800a9d2 <memcpy>
	}
}
 8007bec:	bf00      	nop
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007bfc:	f001 fc9c 	bl	8009538 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c08:	e011      	b.n	8007c2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d012      	beq.n	8007c38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3324      	adds	r3, #36	@ 0x24
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 fd5c 	bl	80086d4 <xTaskRemoveFromEventList>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c22:	f000 fe35 	bl	8008890 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	dce9      	bgt.n	8007c0a <prvUnlockQueue+0x16>
 8007c36:	e000      	b.n	8007c3a <prvUnlockQueue+0x46>
					break;
 8007c38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	22ff      	movs	r2, #255	@ 0xff
 8007c3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007c42:	f001 fcab 	bl	800959c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c46:	f001 fc77 	bl	8009538 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c52:	e011      	b.n	8007c78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d012      	beq.n	8007c82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	3310      	adds	r3, #16
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 fd37 	bl	80086d4 <xTaskRemoveFromEventList>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c6c:	f000 fe10 	bl	8008890 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	dce9      	bgt.n	8007c54 <prvUnlockQueue+0x60>
 8007c80:	e000      	b.n	8007c84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	22ff      	movs	r2, #255	@ 0xff
 8007c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007c8c:	f001 fc86 	bl	800959c <vPortExitCritical>
}
 8007c90:	bf00      	nop
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ca0:	f001 fc4a 	bl	8009538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d102      	bne.n	8007cb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007cac:	2301      	movs	r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	e001      	b.n	8007cb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cb6:	f001 fc71 	bl	800959c <vPortExitCritical>

	return xReturn;
 8007cba:	68fb      	ldr	r3, [r7, #12]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ccc:	f001 fc34 	bl	8009538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d102      	bne.n	8007ce2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	e001      	b.n	8007ce6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ce6:	f001 fc59 	bl	800959c <vPortExitCritical>

	return xReturn;
 8007cea:	68fb      	ldr	r3, [r7, #12]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60fb      	str	r3, [r7, #12]
 8007d02:	e014      	b.n	8007d2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d04:	4a0f      	ldr	r2, [pc, #60]	@ (8007d44 <vQueueAddToRegistry+0x50>)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10b      	bne.n	8007d28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d10:	490c      	ldr	r1, [pc, #48]	@ (8007d44 <vQueueAddToRegistry+0x50>)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8007d44 <vQueueAddToRegistry+0x50>)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	4413      	add	r3, r2
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d26:	e006      	b.n	8007d36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b07      	cmp	r3, #7
 8007d32:	d9e7      	bls.n	8007d04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	200010bc 	.word	0x200010bc

08007d48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d58:	f001 fbee 	bl	8009538 <vPortEnterCritical>
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d62:	b25b      	sxtb	r3, r3
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d103      	bne.n	8007d72 <vQueueWaitForMessageRestricted+0x2a>
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d78:	b25b      	sxtb	r3, r3
 8007d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7e:	d103      	bne.n	8007d88 <vQueueWaitForMessageRestricted+0x40>
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d88:	f001 fc08 	bl	800959c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d106      	bne.n	8007da2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	3324      	adds	r3, #36	@ 0x24
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	68b9      	ldr	r1, [r7, #8]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fc6d 	bl	800867c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007da2:	6978      	ldr	r0, [r7, #20]
 8007da4:	f7ff ff26 	bl	8007bf4 <prvUnlockQueue>
	}
 8007da8:	bf00      	nop
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08e      	sub	sp, #56	@ 0x38
 8007db4:	af04      	add	r7, sp, #16
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10b      	bne.n	8007ddc <xTaskCreateStatic+0x2c>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	623b      	str	r3, [r7, #32]
}
 8007dd6:	bf00      	nop
 8007dd8:	bf00      	nop
 8007dda:	e7fd      	b.n	8007dd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10b      	bne.n	8007dfa <xTaskCreateStatic+0x4a>
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	61fb      	str	r3, [r7, #28]
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop
 8007df8:	e7fd      	b.n	8007df6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007dfa:	23a8      	movs	r3, #168	@ 0xa8
 8007dfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	2ba8      	cmp	r3, #168	@ 0xa8
 8007e02:	d00b      	beq.n	8007e1c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	61bb      	str	r3, [r7, #24]
}
 8007e16:	bf00      	nop
 8007e18:	bf00      	nop
 8007e1a:	e7fd      	b.n	8007e18 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01e      	beq.n	8007e62 <xTaskCreateStatic+0xb2>
 8007e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d01b      	beq.n	8007e62 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e32:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9303      	str	r3, [sp, #12]
 8007e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e42:	9302      	str	r3, [sp, #8]
 8007e44:	f107 0314 	add.w	r3, r7, #20
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f851 	bl	8007efc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007e5c:	f000 f8f6 	bl	800804c <prvAddNewTaskToReadyList>
 8007e60:	e001      	b.n	8007e66 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e66:	697b      	ldr	r3, [r7, #20]
	}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3728      	adds	r7, #40	@ 0x28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08c      	sub	sp, #48	@ 0x30
 8007e74:	af04      	add	r7, sp, #16
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e80:	88fb      	ldrh	r3, [r7, #6]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4618      	mov	r0, r3
 8007e86:	f001 fc79 	bl	800977c <pvPortMalloc>
 8007e8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00e      	beq.n	8007eb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e92:	20a8      	movs	r0, #168	@ 0xa8
 8007e94:	f001 fc72 	bl	800977c <pvPortMalloc>
 8007e98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ea6:	e005      	b.n	8007eb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ea8:	6978      	ldr	r0, [r7, #20]
 8007eaa:	f001 fd35 	bl	8009918 <vPortFree>
 8007eae:	e001      	b.n	8007eb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d017      	beq.n	8007eea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ec2:	88fa      	ldrh	r2, [r7, #6]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	9303      	str	r3, [sp, #12]
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	9302      	str	r3, [sp, #8]
 8007ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ece:	9301      	str	r3, [sp, #4]
 8007ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	68b9      	ldr	r1, [r7, #8]
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 f80f 	bl	8007efc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ede:	69f8      	ldr	r0, [r7, #28]
 8007ee0:	f000 f8b4 	bl	800804c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	61bb      	str	r3, [r7, #24]
 8007ee8:	e002      	b.n	8007ef0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007eea:	f04f 33ff 	mov.w	r3, #4294967295
 8007eee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ef0:	69bb      	ldr	r3, [r7, #24]
	}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3720      	adds	r7, #32
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
	...

08007efc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	461a      	mov	r2, r3
 8007f14:	21a5      	movs	r1, #165	@ 0xa5
 8007f16:	f002 fc7f 	bl	800a818 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007f24:	3b01      	subs	r3, #1
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	f023 0307 	bic.w	r3, r3, #7
 8007f32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00b      	beq.n	8007f56 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	617b      	str	r3, [r7, #20]
}
 8007f50:	bf00      	nop
 8007f52:	bf00      	nop
 8007f54:	e7fd      	b.n	8007f52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d01f      	beq.n	8007f9c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	61fb      	str	r3, [r7, #28]
 8007f60:	e012      	b.n	8007f88 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	4413      	add	r3, r2
 8007f68:	7819      	ldrb	r1, [r3, #0]
 8007f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	4413      	add	r3, r2
 8007f70:	3334      	adds	r3, #52	@ 0x34
 8007f72:	460a      	mov	r2, r1
 8007f74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d006      	beq.n	8007f90 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	3301      	adds	r3, #1
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	2b0f      	cmp	r3, #15
 8007f8c:	d9e9      	bls.n	8007f62 <prvInitialiseNewTask+0x66>
 8007f8e:	e000      	b.n	8007f92 <prvInitialiseNewTask+0x96>
			{
				break;
 8007f90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f9a:	e003      	b.n	8007fa4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa6:	2b37      	cmp	r3, #55	@ 0x37
 8007fa8:	d901      	bls.n	8007fae <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007faa:	2337      	movs	r3, #55	@ 0x37
 8007fac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7ff f965 	bl	8007294 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fcc:	3318      	adds	r3, #24
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff f960 	bl	8007294 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fd8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fdc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fe8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fec:	2200      	movs	r2, #0
 8007fee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffc:	3354      	adds	r3, #84	@ 0x54
 8007ffe:	224c      	movs	r2, #76	@ 0x4c
 8008000:	2100      	movs	r1, #0
 8008002:	4618      	mov	r0, r3
 8008004:	f002 fc08 	bl	800a818 <memset>
 8008008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800a:	4a0d      	ldr	r2, [pc, #52]	@ (8008040 <prvInitialiseNewTask+0x144>)
 800800c:	659a      	str	r2, [r3, #88]	@ 0x58
 800800e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008010:	4a0c      	ldr	r2, [pc, #48]	@ (8008044 <prvInitialiseNewTask+0x148>)
 8008012:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008016:	4a0c      	ldr	r2, [pc, #48]	@ (8008048 <prvInitialiseNewTask+0x14c>)
 8008018:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	68f9      	ldr	r1, [r7, #12]
 800801e:	69b8      	ldr	r0, [r7, #24]
 8008020:	f001 f95a 	bl	80092d8 <pxPortInitialiseStack>
 8008024:	4602      	mov	r2, r0
 8008026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008028:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800802a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008036:	bf00      	nop
 8008038:	3720      	adds	r7, #32
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20003e60 	.word	0x20003e60
 8008044:	20003ec8 	.word	0x20003ec8
 8008048:	20003f30 	.word	0x20003f30

0800804c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008054:	f001 fa70 	bl	8009538 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008058:	4b2d      	ldr	r3, [pc, #180]	@ (8008110 <prvAddNewTaskToReadyList+0xc4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3301      	adds	r3, #1
 800805e:	4a2c      	ldr	r2, [pc, #176]	@ (8008110 <prvAddNewTaskToReadyList+0xc4>)
 8008060:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008062:	4b2c      	ldr	r3, [pc, #176]	@ (8008114 <prvAddNewTaskToReadyList+0xc8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d109      	bne.n	800807e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800806a:	4a2a      	ldr	r2, [pc, #168]	@ (8008114 <prvAddNewTaskToReadyList+0xc8>)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008070:	4b27      	ldr	r3, [pc, #156]	@ (8008110 <prvAddNewTaskToReadyList+0xc4>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d110      	bne.n	800809a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008078:	f000 fc2e 	bl	80088d8 <prvInitialiseTaskLists>
 800807c:	e00d      	b.n	800809a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800807e:	4b26      	ldr	r3, [pc, #152]	@ (8008118 <prvAddNewTaskToReadyList+0xcc>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d109      	bne.n	800809a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008086:	4b23      	ldr	r3, [pc, #140]	@ (8008114 <prvAddNewTaskToReadyList+0xc8>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008090:	429a      	cmp	r2, r3
 8008092:	d802      	bhi.n	800809a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008094:	4a1f      	ldr	r2, [pc, #124]	@ (8008114 <prvAddNewTaskToReadyList+0xc8>)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800809a:	4b20      	ldr	r3, [pc, #128]	@ (800811c <prvAddNewTaskToReadyList+0xd0>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3301      	adds	r3, #1
 80080a0:	4a1e      	ldr	r2, [pc, #120]	@ (800811c <prvAddNewTaskToReadyList+0xd0>)
 80080a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80080a4:	4b1d      	ldr	r3, [pc, #116]	@ (800811c <prvAddNewTaskToReadyList+0xd0>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080b0:	4b1b      	ldr	r3, [pc, #108]	@ (8008120 <prvAddNewTaskToReadyList+0xd4>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d903      	bls.n	80080c0 <prvAddNewTaskToReadyList+0x74>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080bc:	4a18      	ldr	r2, [pc, #96]	@ (8008120 <prvAddNewTaskToReadyList+0xd4>)
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4a15      	ldr	r2, [pc, #84]	@ (8008124 <prvAddNewTaskToReadyList+0xd8>)
 80080ce:	441a      	add	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4619      	mov	r1, r3
 80080d6:	4610      	mov	r0, r2
 80080d8:	f7ff f8e9 	bl	80072ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080dc:	f001 fa5e 	bl	800959c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008118 <prvAddNewTaskToReadyList+0xcc>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00e      	beq.n	8008106 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008114 <prvAddNewTaskToReadyList+0xc8>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d207      	bcs.n	8008106 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008128 <prvAddNewTaskToReadyList+0xdc>)
 80080f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008106:	bf00      	nop
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	200015d0 	.word	0x200015d0
 8008114:	200010fc 	.word	0x200010fc
 8008118:	200015dc 	.word	0x200015dc
 800811c:	200015ec 	.word	0x200015ec
 8008120:	200015d8 	.word	0x200015d8
 8008124:	20001100 	.word	0x20001100
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008134:	2300      	movs	r3, #0
 8008136:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d018      	beq.n	8008170 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800813e:	4b14      	ldr	r3, [pc, #80]	@ (8008190 <vTaskDelay+0x64>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00b      	beq.n	800815e <vTaskDelay+0x32>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	60bb      	str	r3, [r7, #8]
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop
 800815c:	e7fd      	b.n	800815a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800815e:	f000 f88b 	bl	8008278 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008162:	2100      	movs	r1, #0
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fd09 	bl	8008b7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800816a:	f000 f893 	bl	8008294 <xTaskResumeAll>
 800816e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d107      	bne.n	8008186 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008176:	4b07      	ldr	r3, [pc, #28]	@ (8008194 <vTaskDelay+0x68>)
 8008178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008186:	bf00      	nop
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	200015f8 	.word	0x200015f8
 8008194:	e000ed04 	.word	0xe000ed04

08008198 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08a      	sub	sp, #40	@ 0x28
 800819c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081a6:	463a      	mov	r2, r7
 80081a8:	1d39      	adds	r1, r7, #4
 80081aa:	f107 0308 	add.w	r3, r7, #8
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7ff f81c 	bl	80071ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	9202      	str	r2, [sp, #8]
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	2300      	movs	r3, #0
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	2300      	movs	r3, #0
 80081c4:	460a      	mov	r2, r1
 80081c6:	4924      	ldr	r1, [pc, #144]	@ (8008258 <vTaskStartScheduler+0xc0>)
 80081c8:	4824      	ldr	r0, [pc, #144]	@ (800825c <vTaskStartScheduler+0xc4>)
 80081ca:	f7ff fdf1 	bl	8007db0 <xTaskCreateStatic>
 80081ce:	4603      	mov	r3, r0
 80081d0:	4a23      	ldr	r2, [pc, #140]	@ (8008260 <vTaskStartScheduler+0xc8>)
 80081d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081d4:	4b22      	ldr	r3, [pc, #136]	@ (8008260 <vTaskStartScheduler+0xc8>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081dc:	2301      	movs	r3, #1
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	e001      	b.n	80081e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d102      	bne.n	80081f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80081ec:	f000 fd1a 	bl	8008c24 <xTimerCreateTimerTask>
 80081f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d11b      	bne.n	8008230 <vTaskStartScheduler+0x98>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	613b      	str	r3, [r7, #16]
}
 800820a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800820c:	4b15      	ldr	r3, [pc, #84]	@ (8008264 <vTaskStartScheduler+0xcc>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3354      	adds	r3, #84	@ 0x54
 8008212:	4a15      	ldr	r2, [pc, #84]	@ (8008268 <vTaskStartScheduler+0xd0>)
 8008214:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008216:	4b15      	ldr	r3, [pc, #84]	@ (800826c <vTaskStartScheduler+0xd4>)
 8008218:	f04f 32ff 	mov.w	r2, #4294967295
 800821c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800821e:	4b14      	ldr	r3, [pc, #80]	@ (8008270 <vTaskStartScheduler+0xd8>)
 8008220:	2201      	movs	r2, #1
 8008222:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008224:	4b13      	ldr	r3, [pc, #76]	@ (8008274 <vTaskStartScheduler+0xdc>)
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800822a:	f001 f8e1 	bl	80093f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800822e:	e00f      	b.n	8008250 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008236:	d10b      	bne.n	8008250 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	60fb      	str	r3, [r7, #12]
}
 800824a:	bf00      	nop
 800824c:	bf00      	nop
 800824e:	e7fd      	b.n	800824c <vTaskStartScheduler+0xb4>
}
 8008250:	bf00      	nop
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	0800c840 	.word	0x0800c840
 800825c:	080088a9 	.word	0x080088a9
 8008260:	200015f4 	.word	0x200015f4
 8008264:	200010fc 	.word	0x200010fc
 8008268:	2000001c 	.word	0x2000001c
 800826c:	200015f0 	.word	0x200015f0
 8008270:	200015dc 	.word	0x200015dc
 8008274:	200015d4 	.word	0x200015d4

08008278 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008278:	b480      	push	{r7}
 800827a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800827c:	4b04      	ldr	r3, [pc, #16]	@ (8008290 <vTaskSuspendAll+0x18>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	3301      	adds	r3, #1
 8008282:	4a03      	ldr	r2, [pc, #12]	@ (8008290 <vTaskSuspendAll+0x18>)
 8008284:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008286:	bf00      	nop
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	200015f8 	.word	0x200015f8

08008294 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800829e:	2300      	movs	r3, #0
 80082a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082a2:	4b42      	ldr	r3, [pc, #264]	@ (80083ac <xTaskResumeAll+0x118>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10b      	bne.n	80082c2 <xTaskResumeAll+0x2e>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	603b      	str	r3, [r7, #0]
}
 80082bc:	bf00      	nop
 80082be:	bf00      	nop
 80082c0:	e7fd      	b.n	80082be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082c2:	f001 f939 	bl	8009538 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082c6:	4b39      	ldr	r3, [pc, #228]	@ (80083ac <xTaskResumeAll+0x118>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	4a37      	ldr	r2, [pc, #220]	@ (80083ac <xTaskResumeAll+0x118>)
 80082ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082d0:	4b36      	ldr	r3, [pc, #216]	@ (80083ac <xTaskResumeAll+0x118>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d162      	bne.n	800839e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082d8:	4b35      	ldr	r3, [pc, #212]	@ (80083b0 <xTaskResumeAll+0x11c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d05e      	beq.n	800839e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082e0:	e02f      	b.n	8008342 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082e2:	4b34      	ldr	r3, [pc, #208]	@ (80083b4 <xTaskResumeAll+0x120>)
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	3318      	adds	r3, #24
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7ff f83a 	bl	8007368 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3304      	adds	r3, #4
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7ff f835 	bl	8007368 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008302:	4b2d      	ldr	r3, [pc, #180]	@ (80083b8 <xTaskResumeAll+0x124>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d903      	bls.n	8008312 <xTaskResumeAll+0x7e>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830e:	4a2a      	ldr	r2, [pc, #168]	@ (80083b8 <xTaskResumeAll+0x124>)
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008316:	4613      	mov	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4a27      	ldr	r2, [pc, #156]	@ (80083bc <xTaskResumeAll+0x128>)
 8008320:	441a      	add	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3304      	adds	r3, #4
 8008326:	4619      	mov	r1, r3
 8008328:	4610      	mov	r0, r2
 800832a:	f7fe ffc0 	bl	80072ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008332:	4b23      	ldr	r3, [pc, #140]	@ (80083c0 <xTaskResumeAll+0x12c>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008338:	429a      	cmp	r2, r3
 800833a:	d302      	bcc.n	8008342 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800833c:	4b21      	ldr	r3, [pc, #132]	@ (80083c4 <xTaskResumeAll+0x130>)
 800833e:	2201      	movs	r2, #1
 8008340:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008342:	4b1c      	ldr	r3, [pc, #112]	@ (80083b4 <xTaskResumeAll+0x120>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1cb      	bne.n	80082e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008350:	f000 fb66 	bl	8008a20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008354:	4b1c      	ldr	r3, [pc, #112]	@ (80083c8 <xTaskResumeAll+0x134>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d010      	beq.n	8008382 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008360:	f000 f846 	bl	80083f0 <xTaskIncrementTick>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800836a:	4b16      	ldr	r3, [pc, #88]	@ (80083c4 <xTaskResumeAll+0x130>)
 800836c:	2201      	movs	r2, #1
 800836e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3b01      	subs	r3, #1
 8008374:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1f1      	bne.n	8008360 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800837c:	4b12      	ldr	r3, [pc, #72]	@ (80083c8 <xTaskResumeAll+0x134>)
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008382:	4b10      	ldr	r3, [pc, #64]	@ (80083c4 <xTaskResumeAll+0x130>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d009      	beq.n	800839e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800838a:	2301      	movs	r3, #1
 800838c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800838e:	4b0f      	ldr	r3, [pc, #60]	@ (80083cc <xTaskResumeAll+0x138>)
 8008390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800839e:	f001 f8fd 	bl	800959c <vPortExitCritical>

	return xAlreadyYielded;
 80083a2:	68bb      	ldr	r3, [r7, #8]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	200015f8 	.word	0x200015f8
 80083b0:	200015d0 	.word	0x200015d0
 80083b4:	20001590 	.word	0x20001590
 80083b8:	200015d8 	.word	0x200015d8
 80083bc:	20001100 	.word	0x20001100
 80083c0:	200010fc 	.word	0x200010fc
 80083c4:	200015e4 	.word	0x200015e4
 80083c8:	200015e0 	.word	0x200015e0
 80083cc:	e000ed04 	.word	0xe000ed04

080083d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083d6:	4b05      	ldr	r3, [pc, #20]	@ (80083ec <xTaskGetTickCount+0x1c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083dc:	687b      	ldr	r3, [r7, #4]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	200015d4 	.word	0x200015d4

080083f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083f6:	2300      	movs	r3, #0
 80083f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083fa:	4b4f      	ldr	r3, [pc, #316]	@ (8008538 <xTaskIncrementTick+0x148>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f040 8090 	bne.w	8008524 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008404:	4b4d      	ldr	r3, [pc, #308]	@ (800853c <xTaskIncrementTick+0x14c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3301      	adds	r3, #1
 800840a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800840c:	4a4b      	ldr	r2, [pc, #300]	@ (800853c <xTaskIncrementTick+0x14c>)
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d121      	bne.n	800845c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008418:	4b49      	ldr	r3, [pc, #292]	@ (8008540 <xTaskIncrementTick+0x150>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00b      	beq.n	800843a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008426:	f383 8811 	msr	BASEPRI, r3
 800842a:	f3bf 8f6f 	isb	sy
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	603b      	str	r3, [r7, #0]
}
 8008434:	bf00      	nop
 8008436:	bf00      	nop
 8008438:	e7fd      	b.n	8008436 <xTaskIncrementTick+0x46>
 800843a:	4b41      	ldr	r3, [pc, #260]	@ (8008540 <xTaskIncrementTick+0x150>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	4b40      	ldr	r3, [pc, #256]	@ (8008544 <xTaskIncrementTick+0x154>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a3e      	ldr	r2, [pc, #248]	@ (8008540 <xTaskIncrementTick+0x150>)
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	4a3e      	ldr	r2, [pc, #248]	@ (8008544 <xTaskIncrementTick+0x154>)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	4b3e      	ldr	r3, [pc, #248]	@ (8008548 <xTaskIncrementTick+0x158>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	4a3c      	ldr	r2, [pc, #240]	@ (8008548 <xTaskIncrementTick+0x158>)
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	f000 fae2 	bl	8008a20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800845c:	4b3b      	ldr	r3, [pc, #236]	@ (800854c <xTaskIncrementTick+0x15c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	429a      	cmp	r2, r3
 8008464:	d349      	bcc.n	80084fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008466:	4b36      	ldr	r3, [pc, #216]	@ (8008540 <xTaskIncrementTick+0x150>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d104      	bne.n	800847a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008470:	4b36      	ldr	r3, [pc, #216]	@ (800854c <xTaskIncrementTick+0x15c>)
 8008472:	f04f 32ff 	mov.w	r2, #4294967295
 8008476:	601a      	str	r2, [r3, #0]
					break;
 8008478:	e03f      	b.n	80084fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800847a:	4b31      	ldr	r3, [pc, #196]	@ (8008540 <xTaskIncrementTick+0x150>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	429a      	cmp	r2, r3
 8008490:	d203      	bcs.n	800849a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008492:	4a2e      	ldr	r2, [pc, #184]	@ (800854c <xTaskIncrementTick+0x15c>)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008498:	e02f      	b.n	80084fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	3304      	adds	r3, #4
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe ff62 	bl	8007368 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d004      	beq.n	80084b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	3318      	adds	r3, #24
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fe ff59 	bl	8007368 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ba:	4b25      	ldr	r3, [pc, #148]	@ (8008550 <xTaskIncrementTick+0x160>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d903      	bls.n	80084ca <xTaskIncrementTick+0xda>
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c6:	4a22      	ldr	r2, [pc, #136]	@ (8008550 <xTaskIncrementTick+0x160>)
 80084c8:	6013      	str	r3, [r2, #0]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ce:	4613      	mov	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4a1f      	ldr	r2, [pc, #124]	@ (8008554 <xTaskIncrementTick+0x164>)
 80084d8:	441a      	add	r2, r3
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	3304      	adds	r3, #4
 80084de:	4619      	mov	r1, r3
 80084e0:	4610      	mov	r0, r2
 80084e2:	f7fe fee4 	bl	80072ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ea:	4b1b      	ldr	r3, [pc, #108]	@ (8008558 <xTaskIncrementTick+0x168>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d3b8      	bcc.n	8008466 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80084f4:	2301      	movs	r3, #1
 80084f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084f8:	e7b5      	b.n	8008466 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084fa:	4b17      	ldr	r3, [pc, #92]	@ (8008558 <xTaskIncrementTick+0x168>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008500:	4914      	ldr	r1, [pc, #80]	@ (8008554 <xTaskIncrementTick+0x164>)
 8008502:	4613      	mov	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	440b      	add	r3, r1
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d901      	bls.n	8008516 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008512:	2301      	movs	r3, #1
 8008514:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008516:	4b11      	ldr	r3, [pc, #68]	@ (800855c <xTaskIncrementTick+0x16c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d007      	beq.n	800852e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800851e:	2301      	movs	r3, #1
 8008520:	617b      	str	r3, [r7, #20]
 8008522:	e004      	b.n	800852e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008524:	4b0e      	ldr	r3, [pc, #56]	@ (8008560 <xTaskIncrementTick+0x170>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3301      	adds	r3, #1
 800852a:	4a0d      	ldr	r2, [pc, #52]	@ (8008560 <xTaskIncrementTick+0x170>)
 800852c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800852e:	697b      	ldr	r3, [r7, #20]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	200015f8 	.word	0x200015f8
 800853c:	200015d4 	.word	0x200015d4
 8008540:	20001588 	.word	0x20001588
 8008544:	2000158c 	.word	0x2000158c
 8008548:	200015e8 	.word	0x200015e8
 800854c:	200015f0 	.word	0x200015f0
 8008550:	200015d8 	.word	0x200015d8
 8008554:	20001100 	.word	0x20001100
 8008558:	200010fc 	.word	0x200010fc
 800855c:	200015e4 	.word	0x200015e4
 8008560:	200015e0 	.word	0x200015e0

08008564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800856a:	4b2b      	ldr	r3, [pc, #172]	@ (8008618 <vTaskSwitchContext+0xb4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008572:	4b2a      	ldr	r3, [pc, #168]	@ (800861c <vTaskSwitchContext+0xb8>)
 8008574:	2201      	movs	r2, #1
 8008576:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008578:	e047      	b.n	800860a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800857a:	4b28      	ldr	r3, [pc, #160]	@ (800861c <vTaskSwitchContext+0xb8>)
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008580:	4b27      	ldr	r3, [pc, #156]	@ (8008620 <vTaskSwitchContext+0xbc>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	60fb      	str	r3, [r7, #12]
 8008586:	e011      	b.n	80085ac <vTaskSwitchContext+0x48>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10b      	bne.n	80085a6 <vTaskSwitchContext+0x42>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	607b      	str	r3, [r7, #4]
}
 80085a0:	bf00      	nop
 80085a2:	bf00      	nop
 80085a4:	e7fd      	b.n	80085a2 <vTaskSwitchContext+0x3e>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3b01      	subs	r3, #1
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	491d      	ldr	r1, [pc, #116]	@ (8008624 <vTaskSwitchContext+0xc0>)
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4613      	mov	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	440b      	add	r3, r1
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d0e3      	beq.n	8008588 <vTaskSwitchContext+0x24>
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4a16      	ldr	r2, [pc, #88]	@ (8008624 <vTaskSwitchContext+0xc0>)
 80085cc:	4413      	add	r3, r2
 80085ce:	60bb      	str	r3, [r7, #8]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	605a      	str	r2, [r3, #4]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	3308      	adds	r3, #8
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d104      	bne.n	80085f0 <vTaskSwitchContext+0x8c>
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	605a      	str	r2, [r3, #4]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	4a0c      	ldr	r2, [pc, #48]	@ (8008628 <vTaskSwitchContext+0xc4>)
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	4a09      	ldr	r2, [pc, #36]	@ (8008620 <vTaskSwitchContext+0xbc>)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008600:	4b09      	ldr	r3, [pc, #36]	@ (8008628 <vTaskSwitchContext+0xc4>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3354      	adds	r3, #84	@ 0x54
 8008606:	4a09      	ldr	r2, [pc, #36]	@ (800862c <vTaskSwitchContext+0xc8>)
 8008608:	6013      	str	r3, [r2, #0]
}
 800860a:	bf00      	nop
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	200015f8 	.word	0x200015f8
 800861c:	200015e4 	.word	0x200015e4
 8008620:	200015d8 	.word	0x200015d8
 8008624:	20001100 	.word	0x20001100
 8008628:	200010fc 	.word	0x200010fc
 800862c:	2000001c 	.word	0x2000001c

08008630 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10b      	bne.n	8008658 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	60fb      	str	r3, [r7, #12]
}
 8008652:	bf00      	nop
 8008654:	bf00      	nop
 8008656:	e7fd      	b.n	8008654 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008658:	4b07      	ldr	r3, [pc, #28]	@ (8008678 <vTaskPlaceOnEventList+0x48>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3318      	adds	r3, #24
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7fe fe48 	bl	80072f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008666:	2101      	movs	r1, #1
 8008668:	6838      	ldr	r0, [r7, #0]
 800866a:	f000 fa87 	bl	8008b7c <prvAddCurrentTaskToDelayedList>
}
 800866e:	bf00      	nop
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	200010fc 	.word	0x200010fc

0800867c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10b      	bne.n	80086a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	617b      	str	r3, [r7, #20]
}
 80086a0:	bf00      	nop
 80086a2:	bf00      	nop
 80086a4:	e7fd      	b.n	80086a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086a6:	4b0a      	ldr	r3, [pc, #40]	@ (80086d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	3318      	adds	r3, #24
 80086ac:	4619      	mov	r1, r3
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f7fe fdfd 	bl	80072ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80086ba:	f04f 33ff 	mov.w	r3, #4294967295
 80086be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	68b8      	ldr	r0, [r7, #8]
 80086c4:	f000 fa5a 	bl	8008b7c <prvAddCurrentTaskToDelayedList>
	}
 80086c8:	bf00      	nop
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	200010fc 	.word	0x200010fc

080086d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10b      	bne.n	8008702 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	60fb      	str	r3, [r7, #12]
}
 80086fc:	bf00      	nop
 80086fe:	bf00      	nop
 8008700:	e7fd      	b.n	80086fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	3318      	adds	r3, #24
 8008706:	4618      	mov	r0, r3
 8008708:	f7fe fe2e 	bl	8007368 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800870c:	4b1d      	ldr	r3, [pc, #116]	@ (8008784 <xTaskRemoveFromEventList+0xb0>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d11d      	bne.n	8008750 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	3304      	adds	r3, #4
 8008718:	4618      	mov	r0, r3
 800871a:	f7fe fe25 	bl	8007368 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008722:	4b19      	ldr	r3, [pc, #100]	@ (8008788 <xTaskRemoveFromEventList+0xb4>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d903      	bls.n	8008732 <xTaskRemoveFromEventList+0x5e>
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872e:	4a16      	ldr	r2, [pc, #88]	@ (8008788 <xTaskRemoveFromEventList+0xb4>)
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4a13      	ldr	r2, [pc, #76]	@ (800878c <xTaskRemoveFromEventList+0xb8>)
 8008740:	441a      	add	r2, r3
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	3304      	adds	r3, #4
 8008746:	4619      	mov	r1, r3
 8008748:	4610      	mov	r0, r2
 800874a:	f7fe fdb0 	bl	80072ae <vListInsertEnd>
 800874e:	e005      	b.n	800875c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	3318      	adds	r3, #24
 8008754:	4619      	mov	r1, r3
 8008756:	480e      	ldr	r0, [pc, #56]	@ (8008790 <xTaskRemoveFromEventList+0xbc>)
 8008758:	f7fe fda9 	bl	80072ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008760:	4b0c      	ldr	r3, [pc, #48]	@ (8008794 <xTaskRemoveFromEventList+0xc0>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008766:	429a      	cmp	r2, r3
 8008768:	d905      	bls.n	8008776 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800876a:	2301      	movs	r3, #1
 800876c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800876e:	4b0a      	ldr	r3, [pc, #40]	@ (8008798 <xTaskRemoveFromEventList+0xc4>)
 8008770:	2201      	movs	r2, #1
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	e001      	b.n	800877a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008776:	2300      	movs	r3, #0
 8008778:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800877a:	697b      	ldr	r3, [r7, #20]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	200015f8 	.word	0x200015f8
 8008788:	200015d8 	.word	0x200015d8
 800878c:	20001100 	.word	0x20001100
 8008790:	20001590 	.word	0x20001590
 8008794:	200010fc 	.word	0x200010fc
 8008798:	200015e4 	.word	0x200015e4

0800879c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80087a4:	4b06      	ldr	r3, [pc, #24]	@ (80087c0 <vTaskInternalSetTimeOutState+0x24>)
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087ac:	4b05      	ldr	r3, [pc, #20]	@ (80087c4 <vTaskInternalSetTimeOutState+0x28>)
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	605a      	str	r2, [r3, #4]
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	200015e8 	.word	0x200015e8
 80087c4:	200015d4 	.word	0x200015d4

080087c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10b      	bne.n	80087f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80087d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087dc:	f383 8811 	msr	BASEPRI, r3
 80087e0:	f3bf 8f6f 	isb	sy
 80087e4:	f3bf 8f4f 	dsb	sy
 80087e8:	613b      	str	r3, [r7, #16]
}
 80087ea:	bf00      	nop
 80087ec:	bf00      	nop
 80087ee:	e7fd      	b.n	80087ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10b      	bne.n	800880e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	60fb      	str	r3, [r7, #12]
}
 8008808:	bf00      	nop
 800880a:	bf00      	nop
 800880c:	e7fd      	b.n	800880a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800880e:	f000 fe93 	bl	8009538 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008812:	4b1d      	ldr	r3, [pc, #116]	@ (8008888 <xTaskCheckForTimeOut+0xc0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	69ba      	ldr	r2, [r7, #24]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882a:	d102      	bne.n	8008832 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800882c:	2300      	movs	r3, #0
 800882e:	61fb      	str	r3, [r7, #28]
 8008830:	e023      	b.n	800887a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	4b15      	ldr	r3, [pc, #84]	@ (800888c <xTaskCheckForTimeOut+0xc4>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	429a      	cmp	r2, r3
 800883c:	d007      	beq.n	800884e <xTaskCheckForTimeOut+0x86>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	429a      	cmp	r2, r3
 8008846:	d302      	bcc.n	800884e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008848:	2301      	movs	r3, #1
 800884a:	61fb      	str	r3, [r7, #28]
 800884c:	e015      	b.n	800887a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	429a      	cmp	r2, r3
 8008856:	d20b      	bcs.n	8008870 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	1ad2      	subs	r2, r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff ff99 	bl	800879c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800886a:	2300      	movs	r3, #0
 800886c:	61fb      	str	r3, [r7, #28]
 800886e:	e004      	b.n	800887a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008876:	2301      	movs	r3, #1
 8008878:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800887a:	f000 fe8f 	bl	800959c <vPortExitCritical>

	return xReturn;
 800887e:	69fb      	ldr	r3, [r7, #28]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3720      	adds	r7, #32
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	200015d4 	.word	0x200015d4
 800888c:	200015e8 	.word	0x200015e8

08008890 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008890:	b480      	push	{r7}
 8008892:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008894:	4b03      	ldr	r3, [pc, #12]	@ (80088a4 <vTaskMissedYield+0x14>)
 8008896:	2201      	movs	r2, #1
 8008898:	601a      	str	r2, [r3, #0]
}
 800889a:	bf00      	nop
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	200015e4 	.word	0x200015e4

080088a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088b0:	f000 f852 	bl	8008958 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088b4:	4b06      	ldr	r3, [pc, #24]	@ (80088d0 <prvIdleTask+0x28>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d9f9      	bls.n	80088b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80088bc:	4b05      	ldr	r3, [pc, #20]	@ (80088d4 <prvIdleTask+0x2c>)
 80088be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088cc:	e7f0      	b.n	80088b0 <prvIdleTask+0x8>
 80088ce:	bf00      	nop
 80088d0:	20001100 	.word	0x20001100
 80088d4:	e000ed04 	.word	0xe000ed04

080088d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088de:	2300      	movs	r3, #0
 80088e0:	607b      	str	r3, [r7, #4]
 80088e2:	e00c      	b.n	80088fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	4613      	mov	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4a12      	ldr	r2, [pc, #72]	@ (8008938 <prvInitialiseTaskLists+0x60>)
 80088f0:	4413      	add	r3, r2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fe fcae 	bl	8007254 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3301      	adds	r3, #1
 80088fc:	607b      	str	r3, [r7, #4]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b37      	cmp	r3, #55	@ 0x37
 8008902:	d9ef      	bls.n	80088e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008904:	480d      	ldr	r0, [pc, #52]	@ (800893c <prvInitialiseTaskLists+0x64>)
 8008906:	f7fe fca5 	bl	8007254 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800890a:	480d      	ldr	r0, [pc, #52]	@ (8008940 <prvInitialiseTaskLists+0x68>)
 800890c:	f7fe fca2 	bl	8007254 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008910:	480c      	ldr	r0, [pc, #48]	@ (8008944 <prvInitialiseTaskLists+0x6c>)
 8008912:	f7fe fc9f 	bl	8007254 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008916:	480c      	ldr	r0, [pc, #48]	@ (8008948 <prvInitialiseTaskLists+0x70>)
 8008918:	f7fe fc9c 	bl	8007254 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800891c:	480b      	ldr	r0, [pc, #44]	@ (800894c <prvInitialiseTaskLists+0x74>)
 800891e:	f7fe fc99 	bl	8007254 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008922:	4b0b      	ldr	r3, [pc, #44]	@ (8008950 <prvInitialiseTaskLists+0x78>)
 8008924:	4a05      	ldr	r2, [pc, #20]	@ (800893c <prvInitialiseTaskLists+0x64>)
 8008926:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008928:	4b0a      	ldr	r3, [pc, #40]	@ (8008954 <prvInitialiseTaskLists+0x7c>)
 800892a:	4a05      	ldr	r2, [pc, #20]	@ (8008940 <prvInitialiseTaskLists+0x68>)
 800892c:	601a      	str	r2, [r3, #0]
}
 800892e:	bf00      	nop
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20001100 	.word	0x20001100
 800893c:	20001560 	.word	0x20001560
 8008940:	20001574 	.word	0x20001574
 8008944:	20001590 	.word	0x20001590
 8008948:	200015a4 	.word	0x200015a4
 800894c:	200015bc 	.word	0x200015bc
 8008950:	20001588 	.word	0x20001588
 8008954:	2000158c 	.word	0x2000158c

08008958 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800895e:	e019      	b.n	8008994 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008960:	f000 fdea 	bl	8009538 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008964:	4b10      	ldr	r3, [pc, #64]	@ (80089a8 <prvCheckTasksWaitingTermination+0x50>)
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	3304      	adds	r3, #4
 8008970:	4618      	mov	r0, r3
 8008972:	f7fe fcf9 	bl	8007368 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008976:	4b0d      	ldr	r3, [pc, #52]	@ (80089ac <prvCheckTasksWaitingTermination+0x54>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3b01      	subs	r3, #1
 800897c:	4a0b      	ldr	r2, [pc, #44]	@ (80089ac <prvCheckTasksWaitingTermination+0x54>)
 800897e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008980:	4b0b      	ldr	r3, [pc, #44]	@ (80089b0 <prvCheckTasksWaitingTermination+0x58>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3b01      	subs	r3, #1
 8008986:	4a0a      	ldr	r2, [pc, #40]	@ (80089b0 <prvCheckTasksWaitingTermination+0x58>)
 8008988:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800898a:	f000 fe07 	bl	800959c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f810 	bl	80089b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008994:	4b06      	ldr	r3, [pc, #24]	@ (80089b0 <prvCheckTasksWaitingTermination+0x58>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e1      	bne.n	8008960 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800899c:	bf00      	nop
 800899e:	bf00      	nop
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	200015a4 	.word	0x200015a4
 80089ac:	200015d0 	.word	0x200015d0
 80089b0:	200015b8 	.word	0x200015b8

080089b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3354      	adds	r3, #84	@ 0x54
 80089c0:	4618      	mov	r0, r3
 80089c2:	f001 ff45 	bl	800a850 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d108      	bne.n	80089e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 ff9f 	bl	8009918 <vPortFree>
				vPortFree( pxTCB );
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 ff9c 	bl	8009918 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089e0:	e019      	b.n	8008a16 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d103      	bne.n	80089f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 ff93 	bl	8009918 <vPortFree>
	}
 80089f2:	e010      	b.n	8008a16 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d00b      	beq.n	8008a16 <prvDeleteTCB+0x62>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	60fb      	str	r3, [r7, #12]
}
 8008a10:	bf00      	nop
 8008a12:	bf00      	nop
 8008a14:	e7fd      	b.n	8008a12 <prvDeleteTCB+0x5e>
	}
 8008a16:	bf00      	nop
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a26:	4b0c      	ldr	r3, [pc, #48]	@ (8008a58 <prvResetNextTaskUnblockTime+0x38>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d104      	bne.n	8008a3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a30:	4b0a      	ldr	r3, [pc, #40]	@ (8008a5c <prvResetNextTaskUnblockTime+0x3c>)
 8008a32:	f04f 32ff 	mov.w	r2, #4294967295
 8008a36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a38:	e008      	b.n	8008a4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a3a:	4b07      	ldr	r3, [pc, #28]	@ (8008a58 <prvResetNextTaskUnblockTime+0x38>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	4a04      	ldr	r2, [pc, #16]	@ (8008a5c <prvResetNextTaskUnblockTime+0x3c>)
 8008a4a:	6013      	str	r3, [r2, #0]
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	20001588 	.word	0x20001588
 8008a5c:	200015f0 	.word	0x200015f0

08008a60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a66:	4b0b      	ldr	r3, [pc, #44]	@ (8008a94 <xTaskGetSchedulerState+0x34>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d102      	bne.n	8008a74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	607b      	str	r3, [r7, #4]
 8008a72:	e008      	b.n	8008a86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a74:	4b08      	ldr	r3, [pc, #32]	@ (8008a98 <xTaskGetSchedulerState+0x38>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d102      	bne.n	8008a82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	607b      	str	r3, [r7, #4]
 8008a80:	e001      	b.n	8008a86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a82:	2300      	movs	r3, #0
 8008a84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a86:	687b      	ldr	r3, [r7, #4]
	}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	200015dc 	.word	0x200015dc
 8008a98:	200015f8 	.word	0x200015f8

08008a9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d058      	beq.n	8008b64 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8008b70 <xTaskPriorityDisinherit+0xd4>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d00b      	beq.n	8008ad4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	60fb      	str	r3, [r7, #12]
}
 8008ace:	bf00      	nop
 8008ad0:	bf00      	nop
 8008ad2:	e7fd      	b.n	8008ad0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10b      	bne.n	8008af4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	60bb      	str	r3, [r7, #8]
}
 8008aee:	bf00      	nop
 8008af0:	bf00      	nop
 8008af2:	e7fd      	b.n	8008af0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008af8:	1e5a      	subs	r2, r3, #1
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d02c      	beq.n	8008b64 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d128      	bne.n	8008b64 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	3304      	adds	r3, #4
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fe fc26 	bl	8007368 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b34:	4b0f      	ldr	r3, [pc, #60]	@ (8008b74 <xTaskPriorityDisinherit+0xd8>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d903      	bls.n	8008b44 <xTaskPriorityDisinherit+0xa8>
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b40:	4a0c      	ldr	r2, [pc, #48]	@ (8008b74 <xTaskPriorityDisinherit+0xd8>)
 8008b42:	6013      	str	r3, [r2, #0]
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b48:	4613      	mov	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4a09      	ldr	r2, [pc, #36]	@ (8008b78 <xTaskPriorityDisinherit+0xdc>)
 8008b52:	441a      	add	r2, r3
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4619      	mov	r1, r3
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	f7fe fba7 	bl	80072ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b60:	2301      	movs	r3, #1
 8008b62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b64:	697b      	ldr	r3, [r7, #20]
	}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	200010fc 	.word	0x200010fc
 8008b74:	200015d8 	.word	0x200015d8
 8008b78:	20001100 	.word	0x20001100

08008b7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b86:	4b21      	ldr	r3, [pc, #132]	@ (8008c0c <prvAddCurrentTaskToDelayedList+0x90>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b8c:	4b20      	ldr	r3, [pc, #128]	@ (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3304      	adds	r3, #4
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe fbe8 	bl	8007368 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9e:	d10a      	bne.n	8008bb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d007      	beq.n	8008bb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3304      	adds	r3, #4
 8008bac:	4619      	mov	r1, r3
 8008bae:	4819      	ldr	r0, [pc, #100]	@ (8008c14 <prvAddCurrentTaskToDelayedList+0x98>)
 8008bb0:	f7fe fb7d 	bl	80072ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bb4:	e026      	b.n	8008c04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4413      	add	r3, r2
 8008bbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bbe:	4b14      	ldr	r3, [pc, #80]	@ (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d209      	bcs.n	8008be2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bce:	4b12      	ldr	r3, [pc, #72]	@ (8008c18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4610      	mov	r0, r2
 8008bdc:	f7fe fb8b 	bl	80072f6 <vListInsert>
}
 8008be0:	e010      	b.n	8008c04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008be2:	4b0e      	ldr	r3, [pc, #56]	@ (8008c1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	4b0a      	ldr	r3, [pc, #40]	@ (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3304      	adds	r3, #4
 8008bec:	4619      	mov	r1, r3
 8008bee:	4610      	mov	r0, r2
 8008bf0:	f7fe fb81 	bl	80072f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8008c20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d202      	bcs.n	8008c04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bfe:	4a08      	ldr	r2, [pc, #32]	@ (8008c20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	6013      	str	r3, [r2, #0]
}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	200015d4 	.word	0x200015d4
 8008c10:	200010fc 	.word	0x200010fc
 8008c14:	200015bc 	.word	0x200015bc
 8008c18:	2000158c 	.word	0x2000158c
 8008c1c:	20001588 	.word	0x20001588
 8008c20:	200015f0 	.word	0x200015f0

08008c24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08a      	sub	sp, #40	@ 0x28
 8008c28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c2e:	f000 fb13 	bl	8009258 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c32:	4b1d      	ldr	r3, [pc, #116]	@ (8008ca8 <xTimerCreateTimerTask+0x84>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d021      	beq.n	8008c7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c42:	1d3a      	adds	r2, r7, #4
 8008c44:	f107 0108 	add.w	r1, r7, #8
 8008c48:	f107 030c 	add.w	r3, r7, #12
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fe fae7 	bl	8007220 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c52:	6879      	ldr	r1, [r7, #4]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	9202      	str	r2, [sp, #8]
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	2300      	movs	r3, #0
 8008c62:	460a      	mov	r2, r1
 8008c64:	4911      	ldr	r1, [pc, #68]	@ (8008cac <xTimerCreateTimerTask+0x88>)
 8008c66:	4812      	ldr	r0, [pc, #72]	@ (8008cb0 <xTimerCreateTimerTask+0x8c>)
 8008c68:	f7ff f8a2 	bl	8007db0 <xTaskCreateStatic>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	4a11      	ldr	r2, [pc, #68]	@ (8008cb4 <xTimerCreateTimerTask+0x90>)
 8008c70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c72:	4b10      	ldr	r3, [pc, #64]	@ (8008cb4 <xTimerCreateTimerTask+0x90>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10b      	bne.n	8008c9c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	613b      	str	r3, [r7, #16]
}
 8008c96:	bf00      	nop
 8008c98:	bf00      	nop
 8008c9a:	e7fd      	b.n	8008c98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c9c:	697b      	ldr	r3, [r7, #20]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3718      	adds	r7, #24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	2000162c 	.word	0x2000162c
 8008cac:	0800c848 	.word	0x0800c848
 8008cb0:	08008df1 	.word	0x08008df1
 8008cb4:	20001630 	.word	0x20001630

08008cb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08a      	sub	sp, #40	@ 0x28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
 8008cc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10b      	bne.n	8008ce8 <xTimerGenericCommand+0x30>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	623b      	str	r3, [r7, #32]
}
 8008ce2:	bf00      	nop
 8008ce4:	bf00      	nop
 8008ce6:	e7fd      	b.n	8008ce4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ce8:	4b19      	ldr	r3, [pc, #100]	@ (8008d50 <xTimerGenericCommand+0x98>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d02a      	beq.n	8008d46 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b05      	cmp	r3, #5
 8008d00:	dc18      	bgt.n	8008d34 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d02:	f7ff fead 	bl	8008a60 <xTaskGetSchedulerState>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d109      	bne.n	8008d20 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d0c:	4b10      	ldr	r3, [pc, #64]	@ (8008d50 <xTimerGenericCommand+0x98>)
 8008d0e:	6818      	ldr	r0, [r3, #0]
 8008d10:	f107 0110 	add.w	r1, r7, #16
 8008d14:	2300      	movs	r3, #0
 8008d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d18:	f7fe fc5a 	bl	80075d0 <xQueueGenericSend>
 8008d1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d1e:	e012      	b.n	8008d46 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d20:	4b0b      	ldr	r3, [pc, #44]	@ (8008d50 <xTimerGenericCommand+0x98>)
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	f107 0110 	add.w	r1, r7, #16
 8008d28:	2300      	movs	r3, #0
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f7fe fc50 	bl	80075d0 <xQueueGenericSend>
 8008d30:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d32:	e008      	b.n	8008d46 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d34:	4b06      	ldr	r3, [pc, #24]	@ (8008d50 <xTimerGenericCommand+0x98>)
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	f107 0110 	add.w	r1, r7, #16
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	f7fe fd48 	bl	80077d4 <xQueueGenericSendFromISR>
 8008d44:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3728      	adds	r7, #40	@ 0x28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	2000162c 	.word	0x2000162c

08008d54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d5e:	4b23      	ldr	r3, [pc, #140]	@ (8008dec <prvProcessExpiredTimer+0x98>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fe fafb 	bl	8007368 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d023      	beq.n	8008dc8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	699a      	ldr	r2, [r3, #24]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	18d1      	adds	r1, r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	6978      	ldr	r0, [r7, #20]
 8008d8e:	f000 f8d5 	bl	8008f3c <prvInsertTimerInActiveList>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d020      	beq.n	8008dda <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d98:	2300      	movs	r3, #0
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	2100      	movs	r1, #0
 8008da2:	6978      	ldr	r0, [r7, #20]
 8008da4:	f7ff ff88 	bl	8008cb8 <xTimerGenericCommand>
 8008da8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d114      	bne.n	8008dda <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	60fb      	str	r3, [r7, #12]
}
 8008dc2:	bf00      	nop
 8008dc4:	bf00      	nop
 8008dc6:	e7fd      	b.n	8008dc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dce:	f023 0301 	bic.w	r3, r3, #1
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	6978      	ldr	r0, [r7, #20]
 8008de0:	4798      	blx	r3
}
 8008de2:	bf00      	nop
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20001624 	.word	0x20001624

08008df0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008df8:	f107 0308 	add.w	r3, r7, #8
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 f859 	bl	8008eb4 <prvGetNextExpireTime>
 8008e02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	4619      	mov	r1, r3
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 f805 	bl	8008e18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e0e:	f000 f8d7 	bl	8008fc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e12:	bf00      	nop
 8008e14:	e7f0      	b.n	8008df8 <prvTimerTask+0x8>
	...

08008e18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e22:	f7ff fa29 	bl	8008278 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e26:	f107 0308 	add.w	r3, r7, #8
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 f866 	bl	8008efc <prvSampleTimeNow>
 8008e30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d130      	bne.n	8008e9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10a      	bne.n	8008e54 <prvProcessTimerOrBlockTask+0x3c>
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d806      	bhi.n	8008e54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e46:	f7ff fa25 	bl	8008294 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e4a:	68f9      	ldr	r1, [r7, #12]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7ff ff81 	bl	8008d54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e52:	e024      	b.n	8008e9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d008      	beq.n	8008e6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e5a:	4b13      	ldr	r3, [pc, #76]	@ (8008ea8 <prvProcessTimerOrBlockTask+0x90>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <prvProcessTimerOrBlockTask+0x50>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e000      	b.n	8008e6a <prvProcessTimerOrBlockTask+0x52>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8008eac <prvProcessTimerOrBlockTask+0x94>)
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4619      	mov	r1, r3
 8008e7a:	f7fe ff65 	bl	8007d48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e7e:	f7ff fa09 	bl	8008294 <xTaskResumeAll>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10a      	bne.n	8008e9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e88:	4b09      	ldr	r3, [pc, #36]	@ (8008eb0 <prvProcessTimerOrBlockTask+0x98>)
 8008e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	f3bf 8f6f 	isb	sy
}
 8008e98:	e001      	b.n	8008e9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e9a:	f7ff f9fb 	bl	8008294 <xTaskResumeAll>
}
 8008e9e:	bf00      	nop
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20001628 	.word	0x20001628
 8008eac:	2000162c 	.word	0x2000162c
 8008eb0:	e000ed04 	.word	0xe000ed04

08008eb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8008ef8 <prvGetNextExpireTime+0x44>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <prvGetNextExpireTime+0x16>
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	e000      	b.n	8008ecc <prvGetNextExpireTime+0x18>
 8008eca:	2200      	movs	r2, #0
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d105      	bne.n	8008ee4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ed8:	4b07      	ldr	r3, [pc, #28]	@ (8008ef8 <prvGetNextExpireTime+0x44>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60fb      	str	r3, [r7, #12]
 8008ee2:	e001      	b.n	8008ee8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	20001624 	.word	0x20001624

08008efc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f04:	f7ff fa64 	bl	80083d0 <xTaskGetTickCount>
 8008f08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f38 <prvSampleTimeNow+0x3c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d205      	bcs.n	8008f20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f14:	f000 f93a 	bl	800918c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	e002      	b.n	8008f26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f26:	4a04      	ldr	r2, [pc, #16]	@ (8008f38 <prvSampleTimeNow+0x3c>)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20001634 	.word	0x20001634

08008f3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
 8008f48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d812      	bhi.n	8008f88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	1ad2      	subs	r2, r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d302      	bcc.n	8008f76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f70:	2301      	movs	r3, #1
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	e01b      	b.n	8008fae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f76:	4b10      	ldr	r3, [pc, #64]	@ (8008fb8 <prvInsertTimerInActiveList+0x7c>)
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4610      	mov	r0, r2
 8008f82:	f7fe f9b8 	bl	80072f6 <vListInsert>
 8008f86:	e012      	b.n	8008fae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d206      	bcs.n	8008f9e <prvInsertTimerInActiveList+0x62>
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d302      	bcc.n	8008f9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	e007      	b.n	8008fae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f9e:	4b07      	ldr	r3, [pc, #28]	@ (8008fbc <prvInsertTimerInActiveList+0x80>)
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	4610      	mov	r0, r2
 8008faa:	f7fe f9a4 	bl	80072f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008fae:	697b      	ldr	r3, [r7, #20]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20001628 	.word	0x20001628
 8008fbc:	20001624 	.word	0x20001624

08008fc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08e      	sub	sp, #56	@ 0x38
 8008fc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fc6:	e0ce      	b.n	8009166 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	da19      	bge.n	8009002 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008fce:	1d3b      	adds	r3, r7, #4
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10b      	bne.n	8008ff2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	61fb      	str	r3, [r7, #28]
}
 8008fec:	bf00      	nop
 8008fee:	bf00      	nop
 8008ff0:	e7fd      	b.n	8008fee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ff8:	6850      	ldr	r0, [r2, #4]
 8008ffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ffc:	6892      	ldr	r2, [r2, #8]
 8008ffe:	4611      	mov	r1, r2
 8009000:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	f2c0 80ae 	blt.w	8009166 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800900e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d004      	beq.n	8009020 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009018:	3304      	adds	r3, #4
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe f9a4 	bl	8007368 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009020:	463b      	mov	r3, r7
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff ff6a 	bl	8008efc <prvSampleTimeNow>
 8009028:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b09      	cmp	r3, #9
 800902e:	f200 8097 	bhi.w	8009160 <prvProcessReceivedCommands+0x1a0>
 8009032:	a201      	add	r2, pc, #4	@ (adr r2, 8009038 <prvProcessReceivedCommands+0x78>)
 8009034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009038:	08009061 	.word	0x08009061
 800903c:	08009061 	.word	0x08009061
 8009040:	08009061 	.word	0x08009061
 8009044:	080090d7 	.word	0x080090d7
 8009048:	080090eb 	.word	0x080090eb
 800904c:	08009137 	.word	0x08009137
 8009050:	08009061 	.word	0x08009061
 8009054:	08009061 	.word	0x08009061
 8009058:	080090d7 	.word	0x080090d7
 800905c:	080090eb 	.word	0x080090eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009062:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009066:	f043 0301 	orr.w	r3, r3, #1
 800906a:	b2da      	uxtb	r2, r3
 800906c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800906e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	18d1      	adds	r1, r2, r3
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800907e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009080:	f7ff ff5c 	bl	8008f3c <prvInsertTimerInActiveList>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d06c      	beq.n	8009164 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800908a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009090:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009094:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	2b00      	cmp	r3, #0
 800909e:	d061      	beq.n	8009164 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	441a      	add	r2, r3
 80090a8:	2300      	movs	r3, #0
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	2300      	movs	r3, #0
 80090ae:	2100      	movs	r1, #0
 80090b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090b2:	f7ff fe01 	bl	8008cb8 <xTimerGenericCommand>
 80090b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d152      	bne.n	8009164 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	61bb      	str	r3, [r7, #24]
}
 80090d0:	bf00      	nop
 80090d2:	bf00      	nop
 80090d4:	e7fd      	b.n	80090d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090dc:	f023 0301 	bic.w	r3, r3, #1
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80090e8:	e03d      	b.n	8009166 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090f0:	f043 0301 	orr.w	r3, r3, #1
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009100:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10b      	bne.n	8009122 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	617b      	str	r3, [r7, #20]
}
 800911c:	bf00      	nop
 800911e:	bf00      	nop
 8009120:	e7fd      	b.n	800911e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009124:	699a      	ldr	r2, [r3, #24]
 8009126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009128:	18d1      	adds	r1, r2, r3
 800912a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800912e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009130:	f7ff ff04 	bl	8008f3c <prvInsertTimerInActiveList>
					break;
 8009134:	e017      	b.n	8009166 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009138:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800913c:	f003 0302 	and.w	r3, r3, #2
 8009140:	2b00      	cmp	r3, #0
 8009142:	d103      	bne.n	800914c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009144:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009146:	f000 fbe7 	bl	8009918 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800914a:	e00c      	b.n	8009166 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800914c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009152:	f023 0301 	bic.w	r3, r3, #1
 8009156:	b2da      	uxtb	r2, r3
 8009158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800915e:	e002      	b.n	8009166 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009160:	bf00      	nop
 8009162:	e000      	b.n	8009166 <prvProcessReceivedCommands+0x1a6>
					break;
 8009164:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009166:	4b08      	ldr	r3, [pc, #32]	@ (8009188 <prvProcessReceivedCommands+0x1c8>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	1d39      	adds	r1, r7, #4
 800916c:	2200      	movs	r2, #0
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe fbce 	bl	8007910 <xQueueReceive>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	f47f af26 	bne.w	8008fc8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800917c:	bf00      	nop
 800917e:	bf00      	nop
 8009180:	3730      	adds	r7, #48	@ 0x30
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	2000162c 	.word	0x2000162c

0800918c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b088      	sub	sp, #32
 8009190:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009192:	e049      	b.n	8009228 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009194:	4b2e      	ldr	r3, [pc, #184]	@ (8009250 <prvSwitchTimerLists+0xc4>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800919e:	4b2c      	ldr	r3, [pc, #176]	@ (8009250 <prvSwitchTimerLists+0xc4>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	3304      	adds	r3, #4
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fe f8db 	bl	8007368 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d02f      	beq.n	8009228 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	4413      	add	r3, r2
 80091d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d90e      	bls.n	80091f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009250 <prvSwitchTimerLists+0xc4>)
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3304      	adds	r3, #4
 80091ee:	4619      	mov	r1, r3
 80091f0:	4610      	mov	r0, r2
 80091f2:	f7fe f880 	bl	80072f6 <vListInsert>
 80091f6:	e017      	b.n	8009228 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091f8:	2300      	movs	r3, #0
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	2300      	movs	r3, #0
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	2100      	movs	r1, #0
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7ff fd58 	bl	8008cb8 <xTimerGenericCommand>
 8009208:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10b      	bne.n	8009228 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	603b      	str	r3, [r7, #0]
}
 8009222:	bf00      	nop
 8009224:	bf00      	nop
 8009226:	e7fd      	b.n	8009224 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009228:	4b09      	ldr	r3, [pc, #36]	@ (8009250 <prvSwitchTimerLists+0xc4>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1b0      	bne.n	8009194 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009232:	4b07      	ldr	r3, [pc, #28]	@ (8009250 <prvSwitchTimerLists+0xc4>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009238:	4b06      	ldr	r3, [pc, #24]	@ (8009254 <prvSwitchTimerLists+0xc8>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a04      	ldr	r2, [pc, #16]	@ (8009250 <prvSwitchTimerLists+0xc4>)
 800923e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009240:	4a04      	ldr	r2, [pc, #16]	@ (8009254 <prvSwitchTimerLists+0xc8>)
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	6013      	str	r3, [r2, #0]
}
 8009246:	bf00      	nop
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	20001624 	.word	0x20001624
 8009254:	20001628 	.word	0x20001628

08009258 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800925e:	f000 f96b 	bl	8009538 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009262:	4b15      	ldr	r3, [pc, #84]	@ (80092b8 <prvCheckForValidListAndQueue+0x60>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d120      	bne.n	80092ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800926a:	4814      	ldr	r0, [pc, #80]	@ (80092bc <prvCheckForValidListAndQueue+0x64>)
 800926c:	f7fd fff2 	bl	8007254 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009270:	4813      	ldr	r0, [pc, #76]	@ (80092c0 <prvCheckForValidListAndQueue+0x68>)
 8009272:	f7fd ffef 	bl	8007254 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009276:	4b13      	ldr	r3, [pc, #76]	@ (80092c4 <prvCheckForValidListAndQueue+0x6c>)
 8009278:	4a10      	ldr	r2, [pc, #64]	@ (80092bc <prvCheckForValidListAndQueue+0x64>)
 800927a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800927c:	4b12      	ldr	r3, [pc, #72]	@ (80092c8 <prvCheckForValidListAndQueue+0x70>)
 800927e:	4a10      	ldr	r2, [pc, #64]	@ (80092c0 <prvCheckForValidListAndQueue+0x68>)
 8009280:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009282:	2300      	movs	r3, #0
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	4b11      	ldr	r3, [pc, #68]	@ (80092cc <prvCheckForValidListAndQueue+0x74>)
 8009288:	4a11      	ldr	r2, [pc, #68]	@ (80092d0 <prvCheckForValidListAndQueue+0x78>)
 800928a:	2110      	movs	r1, #16
 800928c:	200a      	movs	r0, #10
 800928e:	f7fe f8ff 	bl	8007490 <xQueueGenericCreateStatic>
 8009292:	4603      	mov	r3, r0
 8009294:	4a08      	ldr	r2, [pc, #32]	@ (80092b8 <prvCheckForValidListAndQueue+0x60>)
 8009296:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009298:	4b07      	ldr	r3, [pc, #28]	@ (80092b8 <prvCheckForValidListAndQueue+0x60>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d005      	beq.n	80092ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80092a0:	4b05      	ldr	r3, [pc, #20]	@ (80092b8 <prvCheckForValidListAndQueue+0x60>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	490b      	ldr	r1, [pc, #44]	@ (80092d4 <prvCheckForValidListAndQueue+0x7c>)
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fe fd24 	bl	8007cf4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092ac:	f000 f976 	bl	800959c <vPortExitCritical>
}
 80092b0:	bf00      	nop
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	2000162c 	.word	0x2000162c
 80092bc:	200015fc 	.word	0x200015fc
 80092c0:	20001610 	.word	0x20001610
 80092c4:	20001624 	.word	0x20001624
 80092c8:	20001628 	.word	0x20001628
 80092cc:	200016d8 	.word	0x200016d8
 80092d0:	20001638 	.word	0x20001638
 80092d4:	0800c850 	.word	0x0800c850

080092d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	3b04      	subs	r3, #4
 80092e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80092f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3b04      	subs	r3, #4
 80092f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	f023 0201 	bic.w	r2, r3, #1
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3b04      	subs	r3, #4
 8009306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009308:	4a0c      	ldr	r2, [pc, #48]	@ (800933c <pxPortInitialiseStack+0x64>)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3b14      	subs	r3, #20
 8009312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	3b04      	subs	r3, #4
 800931e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f06f 0202 	mvn.w	r2, #2
 8009326:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3b20      	subs	r3, #32
 800932c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800932e:	68fb      	ldr	r3, [r7, #12]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	08009341 	.word	0x08009341

08009340 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800934a:	4b13      	ldr	r3, [pc, #76]	@ (8009398 <prvTaskExitError+0x58>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009352:	d00b      	beq.n	800936c <prvTaskExitError+0x2c>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	60fb      	str	r3, [r7, #12]
}
 8009366:	bf00      	nop
 8009368:	bf00      	nop
 800936a:	e7fd      	b.n	8009368 <prvTaskExitError+0x28>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	60bb      	str	r3, [r7, #8]
}
 800937e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009380:	bf00      	nop
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d0fc      	beq.n	8009382 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009388:	bf00      	nop
 800938a:	bf00      	nop
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	2000000c 	.word	0x2000000c
 800939c:	00000000 	.word	0x00000000

080093a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093a0:	4b07      	ldr	r3, [pc, #28]	@ (80093c0 <pxCurrentTCBConst2>)
 80093a2:	6819      	ldr	r1, [r3, #0]
 80093a4:	6808      	ldr	r0, [r1, #0]
 80093a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093aa:	f380 8809 	msr	PSP, r0
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f04f 0000 	mov.w	r0, #0
 80093b6:	f380 8811 	msr	BASEPRI, r0
 80093ba:	4770      	bx	lr
 80093bc:	f3af 8000 	nop.w

080093c0 <pxCurrentTCBConst2>:
 80093c0:	200010fc 	.word	0x200010fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093c4:	bf00      	nop
 80093c6:	bf00      	nop

080093c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093c8:	4808      	ldr	r0, [pc, #32]	@ (80093ec <prvPortStartFirstTask+0x24>)
 80093ca:	6800      	ldr	r0, [r0, #0]
 80093cc:	6800      	ldr	r0, [r0, #0]
 80093ce:	f380 8808 	msr	MSP, r0
 80093d2:	f04f 0000 	mov.w	r0, #0
 80093d6:	f380 8814 	msr	CONTROL, r0
 80093da:	b662      	cpsie	i
 80093dc:	b661      	cpsie	f
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	df00      	svc	0
 80093e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093ea:	bf00      	nop
 80093ec:	e000ed08 	.word	0xe000ed08

080093f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80093f6:	4b47      	ldr	r3, [pc, #284]	@ (8009514 <xPortStartScheduler+0x124>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a47      	ldr	r2, [pc, #284]	@ (8009518 <xPortStartScheduler+0x128>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d10b      	bne.n	8009418 <xPortStartScheduler+0x28>
	__asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	60fb      	str	r3, [r7, #12]
}
 8009412:	bf00      	nop
 8009414:	bf00      	nop
 8009416:	e7fd      	b.n	8009414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009418:	4b3e      	ldr	r3, [pc, #248]	@ (8009514 <xPortStartScheduler+0x124>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a3f      	ldr	r2, [pc, #252]	@ (800951c <xPortStartScheduler+0x12c>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d10b      	bne.n	800943a <xPortStartScheduler+0x4a>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	613b      	str	r3, [r7, #16]
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	e7fd      	b.n	8009436 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800943a:	4b39      	ldr	r3, [pc, #228]	@ (8009520 <xPortStartScheduler+0x130>)
 800943c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	22ff      	movs	r2, #255	@ 0xff
 800944a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	b2db      	uxtb	r3, r3
 8009452:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	b2db      	uxtb	r3, r3
 8009458:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800945c:	b2da      	uxtb	r2, r3
 800945e:	4b31      	ldr	r3, [pc, #196]	@ (8009524 <xPortStartScheduler+0x134>)
 8009460:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009462:	4b31      	ldr	r3, [pc, #196]	@ (8009528 <xPortStartScheduler+0x138>)
 8009464:	2207      	movs	r2, #7
 8009466:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009468:	e009      	b.n	800947e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800946a:	4b2f      	ldr	r3, [pc, #188]	@ (8009528 <xPortStartScheduler+0x138>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3b01      	subs	r3, #1
 8009470:	4a2d      	ldr	r2, [pc, #180]	@ (8009528 <xPortStartScheduler+0x138>)
 8009472:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	b2db      	uxtb	r3, r3
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	b2db      	uxtb	r3, r3
 800947c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800947e:	78fb      	ldrb	r3, [r7, #3]
 8009480:	b2db      	uxtb	r3, r3
 8009482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009486:	2b80      	cmp	r3, #128	@ 0x80
 8009488:	d0ef      	beq.n	800946a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800948a:	4b27      	ldr	r3, [pc, #156]	@ (8009528 <xPortStartScheduler+0x138>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f1c3 0307 	rsb	r3, r3, #7
 8009492:	2b04      	cmp	r3, #4
 8009494:	d00b      	beq.n	80094ae <xPortStartScheduler+0xbe>
	__asm volatile
 8009496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	60bb      	str	r3, [r7, #8]
}
 80094a8:	bf00      	nop
 80094aa:	bf00      	nop
 80094ac:	e7fd      	b.n	80094aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094ae:	4b1e      	ldr	r3, [pc, #120]	@ (8009528 <xPortStartScheduler+0x138>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	021b      	lsls	r3, r3, #8
 80094b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009528 <xPortStartScheduler+0x138>)
 80094b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009528 <xPortStartScheduler+0x138>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80094c0:	4a19      	ldr	r2, [pc, #100]	@ (8009528 <xPortStartScheduler+0x138>)
 80094c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094cc:	4b17      	ldr	r3, [pc, #92]	@ (800952c <xPortStartScheduler+0x13c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a16      	ldr	r2, [pc, #88]	@ (800952c <xPortStartScheduler+0x13c>)
 80094d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80094d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094d8:	4b14      	ldr	r3, [pc, #80]	@ (800952c <xPortStartScheduler+0x13c>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a13      	ldr	r2, [pc, #76]	@ (800952c <xPortStartScheduler+0x13c>)
 80094de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80094e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094e4:	f000 f8da 	bl	800969c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094e8:	4b11      	ldr	r3, [pc, #68]	@ (8009530 <xPortStartScheduler+0x140>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80094ee:	f000 f8f9 	bl	80096e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80094f2:	4b10      	ldr	r3, [pc, #64]	@ (8009534 <xPortStartScheduler+0x144>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a0f      	ldr	r2, [pc, #60]	@ (8009534 <xPortStartScheduler+0x144>)
 80094f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80094fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094fe:	f7ff ff63 	bl	80093c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009502:	f7ff f82f 	bl	8008564 <vTaskSwitchContext>
	prvTaskExitError();
 8009506:	f7ff ff1b 	bl	8009340 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3718      	adds	r7, #24
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	e000ed00 	.word	0xe000ed00
 8009518:	410fc271 	.word	0x410fc271
 800951c:	410fc270 	.word	0x410fc270
 8009520:	e000e400 	.word	0xe000e400
 8009524:	20001728 	.word	0x20001728
 8009528:	2000172c 	.word	0x2000172c
 800952c:	e000ed20 	.word	0xe000ed20
 8009530:	2000000c 	.word	0x2000000c
 8009534:	e000ef34 	.word	0xe000ef34

08009538 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	607b      	str	r3, [r7, #4]
}
 8009550:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009552:	4b10      	ldr	r3, [pc, #64]	@ (8009594 <vPortEnterCritical+0x5c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3301      	adds	r3, #1
 8009558:	4a0e      	ldr	r2, [pc, #56]	@ (8009594 <vPortEnterCritical+0x5c>)
 800955a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800955c:	4b0d      	ldr	r3, [pc, #52]	@ (8009594 <vPortEnterCritical+0x5c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d110      	bne.n	8009586 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009564:	4b0c      	ldr	r3, [pc, #48]	@ (8009598 <vPortEnterCritical+0x60>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	b2db      	uxtb	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00b      	beq.n	8009586 <vPortEnterCritical+0x4e>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	603b      	str	r3, [r7, #0]
}
 8009580:	bf00      	nop
 8009582:	bf00      	nop
 8009584:	e7fd      	b.n	8009582 <vPortEnterCritical+0x4a>
	}
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	2000000c 	.word	0x2000000c
 8009598:	e000ed04 	.word	0xe000ed04

0800959c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095a2:	4b12      	ldr	r3, [pc, #72]	@ (80095ec <vPortExitCritical+0x50>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10b      	bne.n	80095c2 <vPortExitCritical+0x26>
	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	607b      	str	r3, [r7, #4]
}
 80095bc:	bf00      	nop
 80095be:	bf00      	nop
 80095c0:	e7fd      	b.n	80095be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095c2:	4b0a      	ldr	r3, [pc, #40]	@ (80095ec <vPortExitCritical+0x50>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	4a08      	ldr	r2, [pc, #32]	@ (80095ec <vPortExitCritical+0x50>)
 80095ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095cc:	4b07      	ldr	r3, [pc, #28]	@ (80095ec <vPortExitCritical+0x50>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d105      	bne.n	80095e0 <vPortExitCritical+0x44>
 80095d4:	2300      	movs	r3, #0
 80095d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f383 8811 	msr	BASEPRI, r3
}
 80095de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	2000000c 	.word	0x2000000c

080095f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095f0:	f3ef 8009 	mrs	r0, PSP
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	4b15      	ldr	r3, [pc, #84]	@ (8009650 <pxCurrentTCBConst>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	f01e 0f10 	tst.w	lr, #16
 8009600:	bf08      	it	eq
 8009602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960a:	6010      	str	r0, [r2, #0]
 800960c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009610:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009614:	f380 8811 	msr	BASEPRI, r0
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f7fe ffa0 	bl	8008564 <vTaskSwitchContext>
 8009624:	f04f 0000 	mov.w	r0, #0
 8009628:	f380 8811 	msr	BASEPRI, r0
 800962c:	bc09      	pop	{r0, r3}
 800962e:	6819      	ldr	r1, [r3, #0]
 8009630:	6808      	ldr	r0, [r1, #0]
 8009632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009636:	f01e 0f10 	tst.w	lr, #16
 800963a:	bf08      	it	eq
 800963c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009640:	f380 8809 	msr	PSP, r0
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	f3af 8000 	nop.w

08009650 <pxCurrentTCBConst>:
 8009650:	200010fc 	.word	0x200010fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop

08009658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	607b      	str	r3, [r7, #4]
}
 8009670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009672:	f7fe febd 	bl	80083f0 <xTaskIncrementTick>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d003      	beq.n	8009684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800967c:	4b06      	ldr	r3, [pc, #24]	@ (8009698 <xPortSysTickHandler+0x40>)
 800967e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	2300      	movs	r3, #0
 8009686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	f383 8811 	msr	BASEPRI, r3
}
 800968e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009690:	bf00      	nop
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	e000ed04 	.word	0xe000ed04

0800969c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800969c:	b480      	push	{r7}
 800969e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096a0:	4b0b      	ldr	r3, [pc, #44]	@ (80096d0 <vPortSetupTimerInterrupt+0x34>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096a6:	4b0b      	ldr	r3, [pc, #44]	@ (80096d4 <vPortSetupTimerInterrupt+0x38>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096ac:	4b0a      	ldr	r3, [pc, #40]	@ (80096d8 <vPortSetupTimerInterrupt+0x3c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a0a      	ldr	r2, [pc, #40]	@ (80096dc <vPortSetupTimerInterrupt+0x40>)
 80096b2:	fba2 2303 	umull	r2, r3, r2, r3
 80096b6:	099b      	lsrs	r3, r3, #6
 80096b8:	4a09      	ldr	r2, [pc, #36]	@ (80096e0 <vPortSetupTimerInterrupt+0x44>)
 80096ba:	3b01      	subs	r3, #1
 80096bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096be:	4b04      	ldr	r3, [pc, #16]	@ (80096d0 <vPortSetupTimerInterrupt+0x34>)
 80096c0:	2207      	movs	r2, #7
 80096c2:	601a      	str	r2, [r3, #0]
}
 80096c4:	bf00      	nop
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	e000e010 	.word	0xe000e010
 80096d4:	e000e018 	.word	0xe000e018
 80096d8:	20000000 	.word	0x20000000
 80096dc:	10624dd3 	.word	0x10624dd3
 80096e0:	e000e014 	.word	0xe000e014

080096e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80096e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80096f4 <vPortEnableVFP+0x10>
 80096e8:	6801      	ldr	r1, [r0, #0]
 80096ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80096ee:	6001      	str	r1, [r0, #0]
 80096f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096f2:	bf00      	nop
 80096f4:	e000ed88 	.word	0xe000ed88

080096f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096fe:	f3ef 8305 	mrs	r3, IPSR
 8009702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b0f      	cmp	r3, #15
 8009708:	d915      	bls.n	8009736 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800970a:	4a18      	ldr	r2, [pc, #96]	@ (800976c <vPortValidateInterruptPriority+0x74>)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4413      	add	r3, r2
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009714:	4b16      	ldr	r3, [pc, #88]	@ (8009770 <vPortValidateInterruptPriority+0x78>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	7afa      	ldrb	r2, [r7, #11]
 800971a:	429a      	cmp	r2, r3
 800971c:	d20b      	bcs.n	8009736 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	607b      	str	r3, [r7, #4]
}
 8009730:	bf00      	nop
 8009732:	bf00      	nop
 8009734:	e7fd      	b.n	8009732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009736:	4b0f      	ldr	r3, [pc, #60]	@ (8009774 <vPortValidateInterruptPriority+0x7c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800973e:	4b0e      	ldr	r3, [pc, #56]	@ (8009778 <vPortValidateInterruptPriority+0x80>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d90b      	bls.n	800975e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	603b      	str	r3, [r7, #0]
}
 8009758:	bf00      	nop
 800975a:	bf00      	nop
 800975c:	e7fd      	b.n	800975a <vPortValidateInterruptPriority+0x62>
	}
 800975e:	bf00      	nop
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	e000e3f0 	.word	0xe000e3f0
 8009770:	20001728 	.word	0x20001728
 8009774:	e000ed0c 	.word	0xe000ed0c
 8009778:	2000172c 	.word	0x2000172c

0800977c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08a      	sub	sp, #40	@ 0x28
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009784:	2300      	movs	r3, #0
 8009786:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009788:	f7fe fd76 	bl	8008278 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800978c:	4b5c      	ldr	r3, [pc, #368]	@ (8009900 <pvPortMalloc+0x184>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009794:	f000 f924 	bl	80099e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009798:	4b5a      	ldr	r3, [pc, #360]	@ (8009904 <pvPortMalloc+0x188>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4013      	ands	r3, r2
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f040 8095 	bne.w	80098d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d01e      	beq.n	80097ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80097ac:	2208      	movs	r2, #8
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4413      	add	r3, r2
 80097b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d015      	beq.n	80097ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f023 0307 	bic.w	r3, r3, #7
 80097c4:	3308      	adds	r3, #8
 80097c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f003 0307 	and.w	r3, r3, #7
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00b      	beq.n	80097ea <pvPortMalloc+0x6e>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	617b      	str	r3, [r7, #20]
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop
 80097e8:	e7fd      	b.n	80097e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d06f      	beq.n	80098d0 <pvPortMalloc+0x154>
 80097f0:	4b45      	ldr	r3, [pc, #276]	@ (8009908 <pvPortMalloc+0x18c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d86a      	bhi.n	80098d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097fa:	4b44      	ldr	r3, [pc, #272]	@ (800990c <pvPortMalloc+0x190>)
 80097fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097fe:	4b43      	ldr	r3, [pc, #268]	@ (800990c <pvPortMalloc+0x190>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009804:	e004      	b.n	8009810 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009808:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800980a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	429a      	cmp	r2, r3
 8009818:	d903      	bls.n	8009822 <pvPortMalloc+0xa6>
 800981a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1f1      	bne.n	8009806 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009822:	4b37      	ldr	r3, [pc, #220]	@ (8009900 <pvPortMalloc+0x184>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009828:	429a      	cmp	r2, r3
 800982a:	d051      	beq.n	80098d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800982c:	6a3b      	ldr	r3, [r7, #32]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2208      	movs	r2, #8
 8009832:	4413      	add	r3, r2
 8009834:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	6a3b      	ldr	r3, [r7, #32]
 800983c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800983e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	1ad2      	subs	r2, r2, r3
 8009846:	2308      	movs	r3, #8
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	429a      	cmp	r2, r3
 800984c:	d920      	bls.n	8009890 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800984e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4413      	add	r3, r2
 8009854:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	f003 0307 	and.w	r3, r3, #7
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <pvPortMalloc+0xfc>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	613b      	str	r3, [r7, #16]
}
 8009872:	bf00      	nop
 8009874:	bf00      	nop
 8009876:	e7fd      	b.n	8009874 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987a:	685a      	ldr	r2, [r3, #4]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	1ad2      	subs	r2, r2, r3
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800988a:	69b8      	ldr	r0, [r7, #24]
 800988c:	f000 f90a 	bl	8009aa4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009890:	4b1d      	ldr	r3, [pc, #116]	@ (8009908 <pvPortMalloc+0x18c>)
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	4a1b      	ldr	r2, [pc, #108]	@ (8009908 <pvPortMalloc+0x18c>)
 800989c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800989e:	4b1a      	ldr	r3, [pc, #104]	@ (8009908 <pvPortMalloc+0x18c>)
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009910 <pvPortMalloc+0x194>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d203      	bcs.n	80098b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098aa:	4b17      	ldr	r3, [pc, #92]	@ (8009908 <pvPortMalloc+0x18c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a18      	ldr	r2, [pc, #96]	@ (8009910 <pvPortMalloc+0x194>)
 80098b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	4b13      	ldr	r3, [pc, #76]	@ (8009904 <pvPortMalloc+0x188>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	431a      	orrs	r2, r3
 80098bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c2:	2200      	movs	r2, #0
 80098c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098c6:	4b13      	ldr	r3, [pc, #76]	@ (8009914 <pvPortMalloc+0x198>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3301      	adds	r3, #1
 80098cc:	4a11      	ldr	r2, [pc, #68]	@ (8009914 <pvPortMalloc+0x198>)
 80098ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098d0:	f7fe fce0 	bl	8008294 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00b      	beq.n	80098f6 <pvPortMalloc+0x17a>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	60fb      	str	r3, [r7, #12]
}
 80098f0:	bf00      	nop
 80098f2:	bf00      	nop
 80098f4:	e7fd      	b.n	80098f2 <pvPortMalloc+0x176>
	return pvReturn;
 80098f6:	69fb      	ldr	r3, [r7, #28]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3728      	adds	r7, #40	@ 0x28
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20003e48 	.word	0x20003e48
 8009904:	20003e5c 	.word	0x20003e5c
 8009908:	20003e4c 	.word	0x20003e4c
 800990c:	20003e40 	.word	0x20003e40
 8009910:	20003e50 	.word	0x20003e50
 8009914:	20003e54 	.word	0x20003e54

08009918 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d04f      	beq.n	80099ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800992a:	2308      	movs	r3, #8
 800992c:	425b      	negs	r3, r3
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	4413      	add	r3, r2
 8009932:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	4b25      	ldr	r3, [pc, #148]	@ (80099d4 <vPortFree+0xbc>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4013      	ands	r3, r2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10b      	bne.n	800995e <vPortFree+0x46>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	60fb      	str	r3, [r7, #12]
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	e7fd      	b.n	800995a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00b      	beq.n	800997e <vPortFree+0x66>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	60bb      	str	r3, [r7, #8]
}
 8009978:	bf00      	nop
 800997a:	bf00      	nop
 800997c:	e7fd      	b.n	800997a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	4b14      	ldr	r3, [pc, #80]	@ (80099d4 <vPortFree+0xbc>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4013      	ands	r3, r2
 8009988:	2b00      	cmp	r3, #0
 800998a:	d01e      	beq.n	80099ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d11a      	bne.n	80099ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	4b0e      	ldr	r3, [pc, #56]	@ (80099d4 <vPortFree+0xbc>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	43db      	mvns	r3, r3
 800999e:	401a      	ands	r2, r3
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099a4:	f7fe fc68 	bl	8008278 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	4b0a      	ldr	r3, [pc, #40]	@ (80099d8 <vPortFree+0xc0>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4413      	add	r3, r2
 80099b2:	4a09      	ldr	r2, [pc, #36]	@ (80099d8 <vPortFree+0xc0>)
 80099b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099b6:	6938      	ldr	r0, [r7, #16]
 80099b8:	f000 f874 	bl	8009aa4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099bc:	4b07      	ldr	r3, [pc, #28]	@ (80099dc <vPortFree+0xc4>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3301      	adds	r3, #1
 80099c2:	4a06      	ldr	r2, [pc, #24]	@ (80099dc <vPortFree+0xc4>)
 80099c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099c6:	f7fe fc65 	bl	8008294 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099ca:	bf00      	nop
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20003e5c 	.word	0x20003e5c
 80099d8:	20003e4c 	.word	0x20003e4c
 80099dc:	20003e58 	.word	0x20003e58

080099e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099e6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80099ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099ec:	4b27      	ldr	r3, [pc, #156]	@ (8009a8c <prvHeapInit+0xac>)
 80099ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00c      	beq.n	8009a14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3307      	adds	r3, #7
 80099fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f023 0307 	bic.w	r3, r3, #7
 8009a06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8009a8c <prvHeapInit+0xac>)
 8009a10:	4413      	add	r3, r2
 8009a12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a18:	4a1d      	ldr	r2, [pc, #116]	@ (8009a90 <prvHeapInit+0xb0>)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8009a90 <prvHeapInit+0xb0>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	4413      	add	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a2c:	2208      	movs	r2, #8
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	1a9b      	subs	r3, r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0307 	bic.w	r3, r3, #7
 8009a3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4a15      	ldr	r2, [pc, #84]	@ (8009a94 <prvHeapInit+0xb4>)
 8009a40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a42:	4b14      	ldr	r3, [pc, #80]	@ (8009a94 <prvHeapInit+0xb4>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2200      	movs	r2, #0
 8009a48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a4a:	4b12      	ldr	r3, [pc, #72]	@ (8009a94 <prvHeapInit+0xb4>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	1ad2      	subs	r2, r2, r3
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a60:	4b0c      	ldr	r3, [pc, #48]	@ (8009a94 <prvHeapInit+0xb4>)
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8009a98 <prvHeapInit+0xb8>)
 8009a6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	4a09      	ldr	r2, [pc, #36]	@ (8009a9c <prvHeapInit+0xbc>)
 8009a76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a78:	4b09      	ldr	r3, [pc, #36]	@ (8009aa0 <prvHeapInit+0xc0>)
 8009a7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009a7e:	601a      	str	r2, [r3, #0]
}
 8009a80:	bf00      	nop
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	20001730 	.word	0x20001730
 8009a90:	20003e40 	.word	0x20003e40
 8009a94:	20003e48 	.word	0x20003e48
 8009a98:	20003e50 	.word	0x20003e50
 8009a9c:	20003e4c 	.word	0x20003e4c
 8009aa0:	20003e5c 	.word	0x20003e5c

08009aa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009aac:	4b28      	ldr	r3, [pc, #160]	@ (8009b50 <prvInsertBlockIntoFreeList+0xac>)
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	e002      	b.n	8009ab8 <prvInsertBlockIntoFreeList+0x14>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d8f7      	bhi.n	8009ab2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	4413      	add	r3, r2
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d108      	bne.n	8009ae6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	441a      	add	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	441a      	add	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d118      	bne.n	8009b2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	4b15      	ldr	r3, [pc, #84]	@ (8009b54 <prvInsertBlockIntoFreeList+0xb0>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d00d      	beq.n	8009b22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	441a      	add	r2, r3
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	e008      	b.n	8009b34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b22:	4b0c      	ldr	r3, [pc, #48]	@ (8009b54 <prvInsertBlockIntoFreeList+0xb0>)
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	e003      	b.n	8009b34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d002      	beq.n	8009b42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b42:	bf00      	nop
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	20003e40 	.word	0x20003e40
 8009b54:	20003e48 	.word	0x20003e48

08009b58 <__cvt>:
 8009b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b5c:	ec57 6b10 	vmov	r6, r7, d0
 8009b60:	2f00      	cmp	r7, #0
 8009b62:	460c      	mov	r4, r1
 8009b64:	4619      	mov	r1, r3
 8009b66:	463b      	mov	r3, r7
 8009b68:	bfbb      	ittet	lt
 8009b6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009b6e:	461f      	movlt	r7, r3
 8009b70:	2300      	movge	r3, #0
 8009b72:	232d      	movlt	r3, #45	@ 0x2d
 8009b74:	700b      	strb	r3, [r1, #0]
 8009b76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009b7c:	4691      	mov	r9, r2
 8009b7e:	f023 0820 	bic.w	r8, r3, #32
 8009b82:	bfbc      	itt	lt
 8009b84:	4632      	movlt	r2, r6
 8009b86:	4616      	movlt	r6, r2
 8009b88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b8c:	d005      	beq.n	8009b9a <__cvt+0x42>
 8009b8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009b92:	d100      	bne.n	8009b96 <__cvt+0x3e>
 8009b94:	3401      	adds	r4, #1
 8009b96:	2102      	movs	r1, #2
 8009b98:	e000      	b.n	8009b9c <__cvt+0x44>
 8009b9a:	2103      	movs	r1, #3
 8009b9c:	ab03      	add	r3, sp, #12
 8009b9e:	9301      	str	r3, [sp, #4]
 8009ba0:	ab02      	add	r3, sp, #8
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	ec47 6b10 	vmov	d0, r6, r7
 8009ba8:	4653      	mov	r3, sl
 8009baa:	4622      	mov	r2, r4
 8009bac:	f000 ffa8 	bl	800ab00 <_dtoa_r>
 8009bb0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009bb4:	4605      	mov	r5, r0
 8009bb6:	d119      	bne.n	8009bec <__cvt+0x94>
 8009bb8:	f019 0f01 	tst.w	r9, #1
 8009bbc:	d00e      	beq.n	8009bdc <__cvt+0x84>
 8009bbe:	eb00 0904 	add.w	r9, r0, r4
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	4639      	mov	r1, r7
 8009bca:	f7f6 ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bce:	b108      	cbz	r0, 8009bd4 <__cvt+0x7c>
 8009bd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009bd4:	2230      	movs	r2, #48	@ 0x30
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	454b      	cmp	r3, r9
 8009bda:	d31e      	bcc.n	8009c1a <__cvt+0xc2>
 8009bdc:	9b03      	ldr	r3, [sp, #12]
 8009bde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009be0:	1b5b      	subs	r3, r3, r5
 8009be2:	4628      	mov	r0, r5
 8009be4:	6013      	str	r3, [r2, #0]
 8009be6:	b004      	add	sp, #16
 8009be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009bf0:	eb00 0904 	add.w	r9, r0, r4
 8009bf4:	d1e5      	bne.n	8009bc2 <__cvt+0x6a>
 8009bf6:	7803      	ldrb	r3, [r0, #0]
 8009bf8:	2b30      	cmp	r3, #48	@ 0x30
 8009bfa:	d10a      	bne.n	8009c12 <__cvt+0xba>
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2300      	movs	r3, #0
 8009c00:	4630      	mov	r0, r6
 8009c02:	4639      	mov	r1, r7
 8009c04:	f7f6 ff60 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c08:	b918      	cbnz	r0, 8009c12 <__cvt+0xba>
 8009c0a:	f1c4 0401 	rsb	r4, r4, #1
 8009c0e:	f8ca 4000 	str.w	r4, [sl]
 8009c12:	f8da 3000 	ldr.w	r3, [sl]
 8009c16:	4499      	add	r9, r3
 8009c18:	e7d3      	b.n	8009bc2 <__cvt+0x6a>
 8009c1a:	1c59      	adds	r1, r3, #1
 8009c1c:	9103      	str	r1, [sp, #12]
 8009c1e:	701a      	strb	r2, [r3, #0]
 8009c20:	e7d9      	b.n	8009bd6 <__cvt+0x7e>

08009c22 <__exponent>:
 8009c22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c24:	2900      	cmp	r1, #0
 8009c26:	bfba      	itte	lt
 8009c28:	4249      	neglt	r1, r1
 8009c2a:	232d      	movlt	r3, #45	@ 0x2d
 8009c2c:	232b      	movge	r3, #43	@ 0x2b
 8009c2e:	2909      	cmp	r1, #9
 8009c30:	7002      	strb	r2, [r0, #0]
 8009c32:	7043      	strb	r3, [r0, #1]
 8009c34:	dd29      	ble.n	8009c8a <__exponent+0x68>
 8009c36:	f10d 0307 	add.w	r3, sp, #7
 8009c3a:	461d      	mov	r5, r3
 8009c3c:	270a      	movs	r7, #10
 8009c3e:	461a      	mov	r2, r3
 8009c40:	fbb1 f6f7 	udiv	r6, r1, r7
 8009c44:	fb07 1416 	mls	r4, r7, r6, r1
 8009c48:	3430      	adds	r4, #48	@ 0x30
 8009c4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009c4e:	460c      	mov	r4, r1
 8009c50:	2c63      	cmp	r4, #99	@ 0x63
 8009c52:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c56:	4631      	mov	r1, r6
 8009c58:	dcf1      	bgt.n	8009c3e <__exponent+0x1c>
 8009c5a:	3130      	adds	r1, #48	@ 0x30
 8009c5c:	1e94      	subs	r4, r2, #2
 8009c5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009c62:	1c41      	adds	r1, r0, #1
 8009c64:	4623      	mov	r3, r4
 8009c66:	42ab      	cmp	r3, r5
 8009c68:	d30a      	bcc.n	8009c80 <__exponent+0x5e>
 8009c6a:	f10d 0309 	add.w	r3, sp, #9
 8009c6e:	1a9b      	subs	r3, r3, r2
 8009c70:	42ac      	cmp	r4, r5
 8009c72:	bf88      	it	hi
 8009c74:	2300      	movhi	r3, #0
 8009c76:	3302      	adds	r3, #2
 8009c78:	4403      	add	r3, r0
 8009c7a:	1a18      	subs	r0, r3, r0
 8009c7c:	b003      	add	sp, #12
 8009c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009c84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009c88:	e7ed      	b.n	8009c66 <__exponent+0x44>
 8009c8a:	2330      	movs	r3, #48	@ 0x30
 8009c8c:	3130      	adds	r1, #48	@ 0x30
 8009c8e:	7083      	strb	r3, [r0, #2]
 8009c90:	70c1      	strb	r1, [r0, #3]
 8009c92:	1d03      	adds	r3, r0, #4
 8009c94:	e7f1      	b.n	8009c7a <__exponent+0x58>
	...

08009c98 <_printf_float>:
 8009c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	b08d      	sub	sp, #52	@ 0x34
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ca4:	4616      	mov	r6, r2
 8009ca6:	461f      	mov	r7, r3
 8009ca8:	4605      	mov	r5, r0
 8009caa:	f000 fdbd 	bl	800a828 <_localeconv_r>
 8009cae:	6803      	ldr	r3, [r0, #0]
 8009cb0:	9304      	str	r3, [sp, #16]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7f6 fadc 	bl	8000270 <strlen>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8009cc0:	9005      	str	r0, [sp, #20]
 8009cc2:	3307      	adds	r3, #7
 8009cc4:	f023 0307 	bic.w	r3, r3, #7
 8009cc8:	f103 0208 	add.w	r2, r3, #8
 8009ccc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009cd0:	f8d4 b000 	ldr.w	fp, [r4]
 8009cd4:	f8c8 2000 	str.w	r2, [r8]
 8009cd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009ce0:	9307      	str	r3, [sp, #28]
 8009ce2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ce6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009cea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cee:	4b9c      	ldr	r3, [pc, #624]	@ (8009f60 <_printf_float+0x2c8>)
 8009cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf4:	f7f6 ff1a 	bl	8000b2c <__aeabi_dcmpun>
 8009cf8:	bb70      	cbnz	r0, 8009d58 <_printf_float+0xc0>
 8009cfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cfe:	4b98      	ldr	r3, [pc, #608]	@ (8009f60 <_printf_float+0x2c8>)
 8009d00:	f04f 32ff 	mov.w	r2, #4294967295
 8009d04:	f7f6 fef4 	bl	8000af0 <__aeabi_dcmple>
 8009d08:	bb30      	cbnz	r0, 8009d58 <_printf_float+0xc0>
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	4640      	mov	r0, r8
 8009d10:	4649      	mov	r1, r9
 8009d12:	f7f6 fee3 	bl	8000adc <__aeabi_dcmplt>
 8009d16:	b110      	cbz	r0, 8009d1e <_printf_float+0x86>
 8009d18:	232d      	movs	r3, #45	@ 0x2d
 8009d1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d1e:	4a91      	ldr	r2, [pc, #580]	@ (8009f64 <_printf_float+0x2cc>)
 8009d20:	4b91      	ldr	r3, [pc, #580]	@ (8009f68 <_printf_float+0x2d0>)
 8009d22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009d26:	bf8c      	ite	hi
 8009d28:	4690      	movhi	r8, r2
 8009d2a:	4698      	movls	r8, r3
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	6123      	str	r3, [r4, #16]
 8009d30:	f02b 0304 	bic.w	r3, fp, #4
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	f04f 0900 	mov.w	r9, #0
 8009d3a:	9700      	str	r7, [sp, #0]
 8009d3c:	4633      	mov	r3, r6
 8009d3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009d40:	4621      	mov	r1, r4
 8009d42:	4628      	mov	r0, r5
 8009d44:	f000 f9d2 	bl	800a0ec <_printf_common>
 8009d48:	3001      	adds	r0, #1
 8009d4a:	f040 808d 	bne.w	8009e68 <_printf_float+0x1d0>
 8009d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d52:	b00d      	add	sp, #52	@ 0x34
 8009d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d58:	4642      	mov	r2, r8
 8009d5a:	464b      	mov	r3, r9
 8009d5c:	4640      	mov	r0, r8
 8009d5e:	4649      	mov	r1, r9
 8009d60:	f7f6 fee4 	bl	8000b2c <__aeabi_dcmpun>
 8009d64:	b140      	cbz	r0, 8009d78 <_printf_float+0xe0>
 8009d66:	464b      	mov	r3, r9
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bfbc      	itt	lt
 8009d6c:	232d      	movlt	r3, #45	@ 0x2d
 8009d6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009d72:	4a7e      	ldr	r2, [pc, #504]	@ (8009f6c <_printf_float+0x2d4>)
 8009d74:	4b7e      	ldr	r3, [pc, #504]	@ (8009f70 <_printf_float+0x2d8>)
 8009d76:	e7d4      	b.n	8009d22 <_printf_float+0x8a>
 8009d78:	6863      	ldr	r3, [r4, #4]
 8009d7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009d7e:	9206      	str	r2, [sp, #24]
 8009d80:	1c5a      	adds	r2, r3, #1
 8009d82:	d13b      	bne.n	8009dfc <_printf_float+0x164>
 8009d84:	2306      	movs	r3, #6
 8009d86:	6063      	str	r3, [r4, #4]
 8009d88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	6022      	str	r2, [r4, #0]
 8009d90:	9303      	str	r3, [sp, #12]
 8009d92:	ab0a      	add	r3, sp, #40	@ 0x28
 8009d94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009d98:	ab09      	add	r3, sp, #36	@ 0x24
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	6861      	ldr	r1, [r4, #4]
 8009d9e:	ec49 8b10 	vmov	d0, r8, r9
 8009da2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009da6:	4628      	mov	r0, r5
 8009da8:	f7ff fed6 	bl	8009b58 <__cvt>
 8009dac:	9b06      	ldr	r3, [sp, #24]
 8009dae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009db0:	2b47      	cmp	r3, #71	@ 0x47
 8009db2:	4680      	mov	r8, r0
 8009db4:	d129      	bne.n	8009e0a <_printf_float+0x172>
 8009db6:	1cc8      	adds	r0, r1, #3
 8009db8:	db02      	blt.n	8009dc0 <_printf_float+0x128>
 8009dba:	6863      	ldr	r3, [r4, #4]
 8009dbc:	4299      	cmp	r1, r3
 8009dbe:	dd41      	ble.n	8009e44 <_printf_float+0x1ac>
 8009dc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8009dc4:	fa5f fa8a 	uxtb.w	sl, sl
 8009dc8:	3901      	subs	r1, #1
 8009dca:	4652      	mov	r2, sl
 8009dcc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009dd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8009dd2:	f7ff ff26 	bl	8009c22 <__exponent>
 8009dd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009dd8:	1813      	adds	r3, r2, r0
 8009dda:	2a01      	cmp	r2, #1
 8009ddc:	4681      	mov	r9, r0
 8009dde:	6123      	str	r3, [r4, #16]
 8009de0:	dc02      	bgt.n	8009de8 <_printf_float+0x150>
 8009de2:	6822      	ldr	r2, [r4, #0]
 8009de4:	07d2      	lsls	r2, r2, #31
 8009de6:	d501      	bpl.n	8009dec <_printf_float+0x154>
 8009de8:	3301      	adds	r3, #1
 8009dea:	6123      	str	r3, [r4, #16]
 8009dec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d0a2      	beq.n	8009d3a <_printf_float+0xa2>
 8009df4:	232d      	movs	r3, #45	@ 0x2d
 8009df6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dfa:	e79e      	b.n	8009d3a <_printf_float+0xa2>
 8009dfc:	9a06      	ldr	r2, [sp, #24]
 8009dfe:	2a47      	cmp	r2, #71	@ 0x47
 8009e00:	d1c2      	bne.n	8009d88 <_printf_float+0xf0>
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1c0      	bne.n	8009d88 <_printf_float+0xf0>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e7bd      	b.n	8009d86 <_printf_float+0xee>
 8009e0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e0e:	d9db      	bls.n	8009dc8 <_printf_float+0x130>
 8009e10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009e14:	d118      	bne.n	8009e48 <_printf_float+0x1b0>
 8009e16:	2900      	cmp	r1, #0
 8009e18:	6863      	ldr	r3, [r4, #4]
 8009e1a:	dd0b      	ble.n	8009e34 <_printf_float+0x19c>
 8009e1c:	6121      	str	r1, [r4, #16]
 8009e1e:	b913      	cbnz	r3, 8009e26 <_printf_float+0x18e>
 8009e20:	6822      	ldr	r2, [r4, #0]
 8009e22:	07d0      	lsls	r0, r2, #31
 8009e24:	d502      	bpl.n	8009e2c <_printf_float+0x194>
 8009e26:	3301      	adds	r3, #1
 8009e28:	440b      	add	r3, r1
 8009e2a:	6123      	str	r3, [r4, #16]
 8009e2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009e2e:	f04f 0900 	mov.w	r9, #0
 8009e32:	e7db      	b.n	8009dec <_printf_float+0x154>
 8009e34:	b913      	cbnz	r3, 8009e3c <_printf_float+0x1a4>
 8009e36:	6822      	ldr	r2, [r4, #0]
 8009e38:	07d2      	lsls	r2, r2, #31
 8009e3a:	d501      	bpl.n	8009e40 <_printf_float+0x1a8>
 8009e3c:	3302      	adds	r3, #2
 8009e3e:	e7f4      	b.n	8009e2a <_printf_float+0x192>
 8009e40:	2301      	movs	r3, #1
 8009e42:	e7f2      	b.n	8009e2a <_printf_float+0x192>
 8009e44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009e48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e4a:	4299      	cmp	r1, r3
 8009e4c:	db05      	blt.n	8009e5a <_printf_float+0x1c2>
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	6121      	str	r1, [r4, #16]
 8009e52:	07d8      	lsls	r0, r3, #31
 8009e54:	d5ea      	bpl.n	8009e2c <_printf_float+0x194>
 8009e56:	1c4b      	adds	r3, r1, #1
 8009e58:	e7e7      	b.n	8009e2a <_printf_float+0x192>
 8009e5a:	2900      	cmp	r1, #0
 8009e5c:	bfd4      	ite	le
 8009e5e:	f1c1 0202 	rsble	r2, r1, #2
 8009e62:	2201      	movgt	r2, #1
 8009e64:	4413      	add	r3, r2
 8009e66:	e7e0      	b.n	8009e2a <_printf_float+0x192>
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	055a      	lsls	r2, r3, #21
 8009e6c:	d407      	bmi.n	8009e7e <_printf_float+0x1e6>
 8009e6e:	6923      	ldr	r3, [r4, #16]
 8009e70:	4642      	mov	r2, r8
 8009e72:	4631      	mov	r1, r6
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b8      	blx	r7
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d12b      	bne.n	8009ed4 <_printf_float+0x23c>
 8009e7c:	e767      	b.n	8009d4e <_printf_float+0xb6>
 8009e7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e82:	f240 80dd 	bls.w	800a040 <_printf_float+0x3a8>
 8009e86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f7f6 fe1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d033      	beq.n	8009efe <_printf_float+0x266>
 8009e96:	4a37      	ldr	r2, [pc, #220]	@ (8009f74 <_printf_float+0x2dc>)
 8009e98:	2301      	movs	r3, #1
 8009e9a:	4631      	mov	r1, r6
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	47b8      	blx	r7
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	f43f af54 	beq.w	8009d4e <_printf_float+0xb6>
 8009ea6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009eaa:	4543      	cmp	r3, r8
 8009eac:	db02      	blt.n	8009eb4 <_printf_float+0x21c>
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	07d8      	lsls	r0, r3, #31
 8009eb2:	d50f      	bpl.n	8009ed4 <_printf_float+0x23c>
 8009eb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eb8:	4631      	mov	r1, r6
 8009eba:	4628      	mov	r0, r5
 8009ebc:	47b8      	blx	r7
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	f43f af45 	beq.w	8009d4e <_printf_float+0xb6>
 8009ec4:	f04f 0900 	mov.w	r9, #0
 8009ec8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ecc:	f104 0a1a 	add.w	sl, r4, #26
 8009ed0:	45c8      	cmp	r8, r9
 8009ed2:	dc09      	bgt.n	8009ee8 <_printf_float+0x250>
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	079b      	lsls	r3, r3, #30
 8009ed8:	f100 8103 	bmi.w	800a0e2 <_printf_float+0x44a>
 8009edc:	68e0      	ldr	r0, [r4, #12]
 8009ede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ee0:	4298      	cmp	r0, r3
 8009ee2:	bfb8      	it	lt
 8009ee4:	4618      	movlt	r0, r3
 8009ee6:	e734      	b.n	8009d52 <_printf_float+0xba>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	4652      	mov	r2, sl
 8009eec:	4631      	mov	r1, r6
 8009eee:	4628      	mov	r0, r5
 8009ef0:	47b8      	blx	r7
 8009ef2:	3001      	adds	r0, #1
 8009ef4:	f43f af2b 	beq.w	8009d4e <_printf_float+0xb6>
 8009ef8:	f109 0901 	add.w	r9, r9, #1
 8009efc:	e7e8      	b.n	8009ed0 <_printf_float+0x238>
 8009efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	dc39      	bgt.n	8009f78 <_printf_float+0x2e0>
 8009f04:	4a1b      	ldr	r2, [pc, #108]	@ (8009f74 <_printf_float+0x2dc>)
 8009f06:	2301      	movs	r3, #1
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	47b8      	blx	r7
 8009f0e:	3001      	adds	r0, #1
 8009f10:	f43f af1d 	beq.w	8009d4e <_printf_float+0xb6>
 8009f14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009f18:	ea59 0303 	orrs.w	r3, r9, r3
 8009f1c:	d102      	bne.n	8009f24 <_printf_float+0x28c>
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	07d9      	lsls	r1, r3, #31
 8009f22:	d5d7      	bpl.n	8009ed4 <_printf_float+0x23c>
 8009f24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	47b8      	blx	r7
 8009f2e:	3001      	adds	r0, #1
 8009f30:	f43f af0d 	beq.w	8009d4e <_printf_float+0xb6>
 8009f34:	f04f 0a00 	mov.w	sl, #0
 8009f38:	f104 0b1a 	add.w	fp, r4, #26
 8009f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f3e:	425b      	negs	r3, r3
 8009f40:	4553      	cmp	r3, sl
 8009f42:	dc01      	bgt.n	8009f48 <_printf_float+0x2b0>
 8009f44:	464b      	mov	r3, r9
 8009f46:	e793      	b.n	8009e70 <_printf_float+0x1d8>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	465a      	mov	r2, fp
 8009f4c:	4631      	mov	r1, r6
 8009f4e:	4628      	mov	r0, r5
 8009f50:	47b8      	blx	r7
 8009f52:	3001      	adds	r0, #1
 8009f54:	f43f aefb 	beq.w	8009d4e <_printf_float+0xb6>
 8009f58:	f10a 0a01 	add.w	sl, sl, #1
 8009f5c:	e7ee      	b.n	8009f3c <_printf_float+0x2a4>
 8009f5e:	bf00      	nop
 8009f60:	7fefffff 	.word	0x7fefffff
 8009f64:	0800c8ec 	.word	0x0800c8ec
 8009f68:	0800c8e8 	.word	0x0800c8e8
 8009f6c:	0800c8f4 	.word	0x0800c8f4
 8009f70:	0800c8f0 	.word	0x0800c8f0
 8009f74:	0800c8f8 	.word	0x0800c8f8
 8009f78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f7e:	4553      	cmp	r3, sl
 8009f80:	bfa8      	it	ge
 8009f82:	4653      	movge	r3, sl
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	4699      	mov	r9, r3
 8009f88:	dc36      	bgt.n	8009ff8 <_printf_float+0x360>
 8009f8a:	f04f 0b00 	mov.w	fp, #0
 8009f8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f92:	f104 021a 	add.w	r2, r4, #26
 8009f96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f98:	9306      	str	r3, [sp, #24]
 8009f9a:	eba3 0309 	sub.w	r3, r3, r9
 8009f9e:	455b      	cmp	r3, fp
 8009fa0:	dc31      	bgt.n	800a006 <_printf_float+0x36e>
 8009fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa4:	459a      	cmp	sl, r3
 8009fa6:	dc3a      	bgt.n	800a01e <_printf_float+0x386>
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	07da      	lsls	r2, r3, #31
 8009fac:	d437      	bmi.n	800a01e <_printf_float+0x386>
 8009fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb0:	ebaa 0903 	sub.w	r9, sl, r3
 8009fb4:	9b06      	ldr	r3, [sp, #24]
 8009fb6:	ebaa 0303 	sub.w	r3, sl, r3
 8009fba:	4599      	cmp	r9, r3
 8009fbc:	bfa8      	it	ge
 8009fbe:	4699      	movge	r9, r3
 8009fc0:	f1b9 0f00 	cmp.w	r9, #0
 8009fc4:	dc33      	bgt.n	800a02e <_printf_float+0x396>
 8009fc6:	f04f 0800 	mov.w	r8, #0
 8009fca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fce:	f104 0b1a 	add.w	fp, r4, #26
 8009fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fd4:	ebaa 0303 	sub.w	r3, sl, r3
 8009fd8:	eba3 0309 	sub.w	r3, r3, r9
 8009fdc:	4543      	cmp	r3, r8
 8009fde:	f77f af79 	ble.w	8009ed4 <_printf_float+0x23c>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	465a      	mov	r2, fp
 8009fe6:	4631      	mov	r1, r6
 8009fe8:	4628      	mov	r0, r5
 8009fea:	47b8      	blx	r7
 8009fec:	3001      	adds	r0, #1
 8009fee:	f43f aeae 	beq.w	8009d4e <_printf_float+0xb6>
 8009ff2:	f108 0801 	add.w	r8, r8, #1
 8009ff6:	e7ec      	b.n	8009fd2 <_printf_float+0x33a>
 8009ff8:	4642      	mov	r2, r8
 8009ffa:	4631      	mov	r1, r6
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	47b8      	blx	r7
 800a000:	3001      	adds	r0, #1
 800a002:	d1c2      	bne.n	8009f8a <_printf_float+0x2f2>
 800a004:	e6a3      	b.n	8009d4e <_printf_float+0xb6>
 800a006:	2301      	movs	r3, #1
 800a008:	4631      	mov	r1, r6
 800a00a:	4628      	mov	r0, r5
 800a00c:	9206      	str	r2, [sp, #24]
 800a00e:	47b8      	blx	r7
 800a010:	3001      	adds	r0, #1
 800a012:	f43f ae9c 	beq.w	8009d4e <_printf_float+0xb6>
 800a016:	9a06      	ldr	r2, [sp, #24]
 800a018:	f10b 0b01 	add.w	fp, fp, #1
 800a01c:	e7bb      	b.n	8009f96 <_printf_float+0x2fe>
 800a01e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a022:	4631      	mov	r1, r6
 800a024:	4628      	mov	r0, r5
 800a026:	47b8      	blx	r7
 800a028:	3001      	adds	r0, #1
 800a02a:	d1c0      	bne.n	8009fae <_printf_float+0x316>
 800a02c:	e68f      	b.n	8009d4e <_printf_float+0xb6>
 800a02e:	9a06      	ldr	r2, [sp, #24]
 800a030:	464b      	mov	r3, r9
 800a032:	4442      	add	r2, r8
 800a034:	4631      	mov	r1, r6
 800a036:	4628      	mov	r0, r5
 800a038:	47b8      	blx	r7
 800a03a:	3001      	adds	r0, #1
 800a03c:	d1c3      	bne.n	8009fc6 <_printf_float+0x32e>
 800a03e:	e686      	b.n	8009d4e <_printf_float+0xb6>
 800a040:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a044:	f1ba 0f01 	cmp.w	sl, #1
 800a048:	dc01      	bgt.n	800a04e <_printf_float+0x3b6>
 800a04a:	07db      	lsls	r3, r3, #31
 800a04c:	d536      	bpl.n	800a0bc <_printf_float+0x424>
 800a04e:	2301      	movs	r3, #1
 800a050:	4642      	mov	r2, r8
 800a052:	4631      	mov	r1, r6
 800a054:	4628      	mov	r0, r5
 800a056:	47b8      	blx	r7
 800a058:	3001      	adds	r0, #1
 800a05a:	f43f ae78 	beq.w	8009d4e <_printf_float+0xb6>
 800a05e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a062:	4631      	mov	r1, r6
 800a064:	4628      	mov	r0, r5
 800a066:	47b8      	blx	r7
 800a068:	3001      	adds	r0, #1
 800a06a:	f43f ae70 	beq.w	8009d4e <_printf_float+0xb6>
 800a06e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a072:	2200      	movs	r2, #0
 800a074:	2300      	movs	r3, #0
 800a076:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a07a:	f7f6 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800a07e:	b9c0      	cbnz	r0, 800a0b2 <_printf_float+0x41a>
 800a080:	4653      	mov	r3, sl
 800a082:	f108 0201 	add.w	r2, r8, #1
 800a086:	4631      	mov	r1, r6
 800a088:	4628      	mov	r0, r5
 800a08a:	47b8      	blx	r7
 800a08c:	3001      	adds	r0, #1
 800a08e:	d10c      	bne.n	800a0aa <_printf_float+0x412>
 800a090:	e65d      	b.n	8009d4e <_printf_float+0xb6>
 800a092:	2301      	movs	r3, #1
 800a094:	465a      	mov	r2, fp
 800a096:	4631      	mov	r1, r6
 800a098:	4628      	mov	r0, r5
 800a09a:	47b8      	blx	r7
 800a09c:	3001      	adds	r0, #1
 800a09e:	f43f ae56 	beq.w	8009d4e <_printf_float+0xb6>
 800a0a2:	f108 0801 	add.w	r8, r8, #1
 800a0a6:	45d0      	cmp	r8, sl
 800a0a8:	dbf3      	blt.n	800a092 <_printf_float+0x3fa>
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a0b0:	e6df      	b.n	8009e72 <_printf_float+0x1da>
 800a0b2:	f04f 0800 	mov.w	r8, #0
 800a0b6:	f104 0b1a 	add.w	fp, r4, #26
 800a0ba:	e7f4      	b.n	800a0a6 <_printf_float+0x40e>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	4642      	mov	r2, r8
 800a0c0:	e7e1      	b.n	800a086 <_printf_float+0x3ee>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	464a      	mov	r2, r9
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b8      	blx	r7
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	f43f ae3e 	beq.w	8009d4e <_printf_float+0xb6>
 800a0d2:	f108 0801 	add.w	r8, r8, #1
 800a0d6:	68e3      	ldr	r3, [r4, #12]
 800a0d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0da:	1a5b      	subs	r3, r3, r1
 800a0dc:	4543      	cmp	r3, r8
 800a0de:	dcf0      	bgt.n	800a0c2 <_printf_float+0x42a>
 800a0e0:	e6fc      	b.n	8009edc <_printf_float+0x244>
 800a0e2:	f04f 0800 	mov.w	r8, #0
 800a0e6:	f104 0919 	add.w	r9, r4, #25
 800a0ea:	e7f4      	b.n	800a0d6 <_printf_float+0x43e>

0800a0ec <_printf_common>:
 800a0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f0:	4616      	mov	r6, r2
 800a0f2:	4698      	mov	r8, r3
 800a0f4:	688a      	ldr	r2, [r1, #8]
 800a0f6:	690b      	ldr	r3, [r1, #16]
 800a0f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	bfb8      	it	lt
 800a100:	4613      	movlt	r3, r2
 800a102:	6033      	str	r3, [r6, #0]
 800a104:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a108:	4607      	mov	r7, r0
 800a10a:	460c      	mov	r4, r1
 800a10c:	b10a      	cbz	r2, 800a112 <_printf_common+0x26>
 800a10e:	3301      	adds	r3, #1
 800a110:	6033      	str	r3, [r6, #0]
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	0699      	lsls	r1, r3, #26
 800a116:	bf42      	ittt	mi
 800a118:	6833      	ldrmi	r3, [r6, #0]
 800a11a:	3302      	addmi	r3, #2
 800a11c:	6033      	strmi	r3, [r6, #0]
 800a11e:	6825      	ldr	r5, [r4, #0]
 800a120:	f015 0506 	ands.w	r5, r5, #6
 800a124:	d106      	bne.n	800a134 <_printf_common+0x48>
 800a126:	f104 0a19 	add.w	sl, r4, #25
 800a12a:	68e3      	ldr	r3, [r4, #12]
 800a12c:	6832      	ldr	r2, [r6, #0]
 800a12e:	1a9b      	subs	r3, r3, r2
 800a130:	42ab      	cmp	r3, r5
 800a132:	dc26      	bgt.n	800a182 <_printf_common+0x96>
 800a134:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a138:	6822      	ldr	r2, [r4, #0]
 800a13a:	3b00      	subs	r3, #0
 800a13c:	bf18      	it	ne
 800a13e:	2301      	movne	r3, #1
 800a140:	0692      	lsls	r2, r2, #26
 800a142:	d42b      	bmi.n	800a19c <_printf_common+0xb0>
 800a144:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a148:	4641      	mov	r1, r8
 800a14a:	4638      	mov	r0, r7
 800a14c:	47c8      	blx	r9
 800a14e:	3001      	adds	r0, #1
 800a150:	d01e      	beq.n	800a190 <_printf_common+0xa4>
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	6922      	ldr	r2, [r4, #16]
 800a156:	f003 0306 	and.w	r3, r3, #6
 800a15a:	2b04      	cmp	r3, #4
 800a15c:	bf02      	ittt	eq
 800a15e:	68e5      	ldreq	r5, [r4, #12]
 800a160:	6833      	ldreq	r3, [r6, #0]
 800a162:	1aed      	subeq	r5, r5, r3
 800a164:	68a3      	ldr	r3, [r4, #8]
 800a166:	bf0c      	ite	eq
 800a168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a16c:	2500      	movne	r5, #0
 800a16e:	4293      	cmp	r3, r2
 800a170:	bfc4      	itt	gt
 800a172:	1a9b      	subgt	r3, r3, r2
 800a174:	18ed      	addgt	r5, r5, r3
 800a176:	2600      	movs	r6, #0
 800a178:	341a      	adds	r4, #26
 800a17a:	42b5      	cmp	r5, r6
 800a17c:	d11a      	bne.n	800a1b4 <_printf_common+0xc8>
 800a17e:	2000      	movs	r0, #0
 800a180:	e008      	b.n	800a194 <_printf_common+0xa8>
 800a182:	2301      	movs	r3, #1
 800a184:	4652      	mov	r2, sl
 800a186:	4641      	mov	r1, r8
 800a188:	4638      	mov	r0, r7
 800a18a:	47c8      	blx	r9
 800a18c:	3001      	adds	r0, #1
 800a18e:	d103      	bne.n	800a198 <_printf_common+0xac>
 800a190:	f04f 30ff 	mov.w	r0, #4294967295
 800a194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a198:	3501      	adds	r5, #1
 800a19a:	e7c6      	b.n	800a12a <_printf_common+0x3e>
 800a19c:	18e1      	adds	r1, r4, r3
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	2030      	movs	r0, #48	@ 0x30
 800a1a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1a6:	4422      	add	r2, r4
 800a1a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1b0:	3302      	adds	r3, #2
 800a1b2:	e7c7      	b.n	800a144 <_printf_common+0x58>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	4641      	mov	r1, r8
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	47c8      	blx	r9
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d0e6      	beq.n	800a190 <_printf_common+0xa4>
 800a1c2:	3601      	adds	r6, #1
 800a1c4:	e7d9      	b.n	800a17a <_printf_common+0x8e>
	...

0800a1c8 <_printf_i>:
 800a1c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1cc:	7e0f      	ldrb	r7, [r1, #24]
 800a1ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a1d0:	2f78      	cmp	r7, #120	@ 0x78
 800a1d2:	4691      	mov	r9, r2
 800a1d4:	4680      	mov	r8, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	469a      	mov	sl, r3
 800a1da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a1de:	d807      	bhi.n	800a1f0 <_printf_i+0x28>
 800a1e0:	2f62      	cmp	r7, #98	@ 0x62
 800a1e2:	d80a      	bhi.n	800a1fa <_printf_i+0x32>
 800a1e4:	2f00      	cmp	r7, #0
 800a1e6:	f000 80d1 	beq.w	800a38c <_printf_i+0x1c4>
 800a1ea:	2f58      	cmp	r7, #88	@ 0x58
 800a1ec:	f000 80b8 	beq.w	800a360 <_printf_i+0x198>
 800a1f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a1f8:	e03a      	b.n	800a270 <_printf_i+0xa8>
 800a1fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a1fe:	2b15      	cmp	r3, #21
 800a200:	d8f6      	bhi.n	800a1f0 <_printf_i+0x28>
 800a202:	a101      	add	r1, pc, #4	@ (adr r1, 800a208 <_printf_i+0x40>)
 800a204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a208:	0800a261 	.word	0x0800a261
 800a20c:	0800a275 	.word	0x0800a275
 800a210:	0800a1f1 	.word	0x0800a1f1
 800a214:	0800a1f1 	.word	0x0800a1f1
 800a218:	0800a1f1 	.word	0x0800a1f1
 800a21c:	0800a1f1 	.word	0x0800a1f1
 800a220:	0800a275 	.word	0x0800a275
 800a224:	0800a1f1 	.word	0x0800a1f1
 800a228:	0800a1f1 	.word	0x0800a1f1
 800a22c:	0800a1f1 	.word	0x0800a1f1
 800a230:	0800a1f1 	.word	0x0800a1f1
 800a234:	0800a373 	.word	0x0800a373
 800a238:	0800a29f 	.word	0x0800a29f
 800a23c:	0800a32d 	.word	0x0800a32d
 800a240:	0800a1f1 	.word	0x0800a1f1
 800a244:	0800a1f1 	.word	0x0800a1f1
 800a248:	0800a395 	.word	0x0800a395
 800a24c:	0800a1f1 	.word	0x0800a1f1
 800a250:	0800a29f 	.word	0x0800a29f
 800a254:	0800a1f1 	.word	0x0800a1f1
 800a258:	0800a1f1 	.word	0x0800a1f1
 800a25c:	0800a335 	.word	0x0800a335
 800a260:	6833      	ldr	r3, [r6, #0]
 800a262:	1d1a      	adds	r2, r3, #4
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	6032      	str	r2, [r6, #0]
 800a268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a26c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a270:	2301      	movs	r3, #1
 800a272:	e09c      	b.n	800a3ae <_printf_i+0x1e6>
 800a274:	6833      	ldr	r3, [r6, #0]
 800a276:	6820      	ldr	r0, [r4, #0]
 800a278:	1d19      	adds	r1, r3, #4
 800a27a:	6031      	str	r1, [r6, #0]
 800a27c:	0606      	lsls	r6, r0, #24
 800a27e:	d501      	bpl.n	800a284 <_printf_i+0xbc>
 800a280:	681d      	ldr	r5, [r3, #0]
 800a282:	e003      	b.n	800a28c <_printf_i+0xc4>
 800a284:	0645      	lsls	r5, r0, #25
 800a286:	d5fb      	bpl.n	800a280 <_printf_i+0xb8>
 800a288:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a28c:	2d00      	cmp	r5, #0
 800a28e:	da03      	bge.n	800a298 <_printf_i+0xd0>
 800a290:	232d      	movs	r3, #45	@ 0x2d
 800a292:	426d      	negs	r5, r5
 800a294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a298:	4858      	ldr	r0, [pc, #352]	@ (800a3fc <_printf_i+0x234>)
 800a29a:	230a      	movs	r3, #10
 800a29c:	e011      	b.n	800a2c2 <_printf_i+0xfa>
 800a29e:	6821      	ldr	r1, [r4, #0]
 800a2a0:	6833      	ldr	r3, [r6, #0]
 800a2a2:	0608      	lsls	r0, r1, #24
 800a2a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2a8:	d402      	bmi.n	800a2b0 <_printf_i+0xe8>
 800a2aa:	0649      	lsls	r1, r1, #25
 800a2ac:	bf48      	it	mi
 800a2ae:	b2ad      	uxthmi	r5, r5
 800a2b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2b2:	4852      	ldr	r0, [pc, #328]	@ (800a3fc <_printf_i+0x234>)
 800a2b4:	6033      	str	r3, [r6, #0]
 800a2b6:	bf14      	ite	ne
 800a2b8:	230a      	movne	r3, #10
 800a2ba:	2308      	moveq	r3, #8
 800a2bc:	2100      	movs	r1, #0
 800a2be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a2c2:	6866      	ldr	r6, [r4, #4]
 800a2c4:	60a6      	str	r6, [r4, #8]
 800a2c6:	2e00      	cmp	r6, #0
 800a2c8:	db05      	blt.n	800a2d6 <_printf_i+0x10e>
 800a2ca:	6821      	ldr	r1, [r4, #0]
 800a2cc:	432e      	orrs	r6, r5
 800a2ce:	f021 0104 	bic.w	r1, r1, #4
 800a2d2:	6021      	str	r1, [r4, #0]
 800a2d4:	d04b      	beq.n	800a36e <_printf_i+0x1a6>
 800a2d6:	4616      	mov	r6, r2
 800a2d8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2dc:	fb03 5711 	mls	r7, r3, r1, r5
 800a2e0:	5dc7      	ldrb	r7, [r0, r7]
 800a2e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2e6:	462f      	mov	r7, r5
 800a2e8:	42bb      	cmp	r3, r7
 800a2ea:	460d      	mov	r5, r1
 800a2ec:	d9f4      	bls.n	800a2d8 <_printf_i+0x110>
 800a2ee:	2b08      	cmp	r3, #8
 800a2f0:	d10b      	bne.n	800a30a <_printf_i+0x142>
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	07df      	lsls	r7, r3, #31
 800a2f6:	d508      	bpl.n	800a30a <_printf_i+0x142>
 800a2f8:	6923      	ldr	r3, [r4, #16]
 800a2fa:	6861      	ldr	r1, [r4, #4]
 800a2fc:	4299      	cmp	r1, r3
 800a2fe:	bfde      	ittt	le
 800a300:	2330      	movle	r3, #48	@ 0x30
 800a302:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a306:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a30a:	1b92      	subs	r2, r2, r6
 800a30c:	6122      	str	r2, [r4, #16]
 800a30e:	f8cd a000 	str.w	sl, [sp]
 800a312:	464b      	mov	r3, r9
 800a314:	aa03      	add	r2, sp, #12
 800a316:	4621      	mov	r1, r4
 800a318:	4640      	mov	r0, r8
 800a31a:	f7ff fee7 	bl	800a0ec <_printf_common>
 800a31e:	3001      	adds	r0, #1
 800a320:	d14a      	bne.n	800a3b8 <_printf_i+0x1f0>
 800a322:	f04f 30ff 	mov.w	r0, #4294967295
 800a326:	b004      	add	sp, #16
 800a328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	f043 0320 	orr.w	r3, r3, #32
 800a332:	6023      	str	r3, [r4, #0]
 800a334:	4832      	ldr	r0, [pc, #200]	@ (800a400 <_printf_i+0x238>)
 800a336:	2778      	movs	r7, #120	@ 0x78
 800a338:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	6831      	ldr	r1, [r6, #0]
 800a340:	061f      	lsls	r7, r3, #24
 800a342:	f851 5b04 	ldr.w	r5, [r1], #4
 800a346:	d402      	bmi.n	800a34e <_printf_i+0x186>
 800a348:	065f      	lsls	r7, r3, #25
 800a34a:	bf48      	it	mi
 800a34c:	b2ad      	uxthmi	r5, r5
 800a34e:	6031      	str	r1, [r6, #0]
 800a350:	07d9      	lsls	r1, r3, #31
 800a352:	bf44      	itt	mi
 800a354:	f043 0320 	orrmi.w	r3, r3, #32
 800a358:	6023      	strmi	r3, [r4, #0]
 800a35a:	b11d      	cbz	r5, 800a364 <_printf_i+0x19c>
 800a35c:	2310      	movs	r3, #16
 800a35e:	e7ad      	b.n	800a2bc <_printf_i+0xf4>
 800a360:	4826      	ldr	r0, [pc, #152]	@ (800a3fc <_printf_i+0x234>)
 800a362:	e7e9      	b.n	800a338 <_printf_i+0x170>
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	f023 0320 	bic.w	r3, r3, #32
 800a36a:	6023      	str	r3, [r4, #0]
 800a36c:	e7f6      	b.n	800a35c <_printf_i+0x194>
 800a36e:	4616      	mov	r6, r2
 800a370:	e7bd      	b.n	800a2ee <_printf_i+0x126>
 800a372:	6833      	ldr	r3, [r6, #0]
 800a374:	6825      	ldr	r5, [r4, #0]
 800a376:	6961      	ldr	r1, [r4, #20]
 800a378:	1d18      	adds	r0, r3, #4
 800a37a:	6030      	str	r0, [r6, #0]
 800a37c:	062e      	lsls	r6, r5, #24
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	d501      	bpl.n	800a386 <_printf_i+0x1be>
 800a382:	6019      	str	r1, [r3, #0]
 800a384:	e002      	b.n	800a38c <_printf_i+0x1c4>
 800a386:	0668      	lsls	r0, r5, #25
 800a388:	d5fb      	bpl.n	800a382 <_printf_i+0x1ba>
 800a38a:	8019      	strh	r1, [r3, #0]
 800a38c:	2300      	movs	r3, #0
 800a38e:	6123      	str	r3, [r4, #16]
 800a390:	4616      	mov	r6, r2
 800a392:	e7bc      	b.n	800a30e <_printf_i+0x146>
 800a394:	6833      	ldr	r3, [r6, #0]
 800a396:	1d1a      	adds	r2, r3, #4
 800a398:	6032      	str	r2, [r6, #0]
 800a39a:	681e      	ldr	r6, [r3, #0]
 800a39c:	6862      	ldr	r2, [r4, #4]
 800a39e:	2100      	movs	r1, #0
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f7f5 ff15 	bl	80001d0 <memchr>
 800a3a6:	b108      	cbz	r0, 800a3ac <_printf_i+0x1e4>
 800a3a8:	1b80      	subs	r0, r0, r6
 800a3aa:	6060      	str	r0, [r4, #4]
 800a3ac:	6863      	ldr	r3, [r4, #4]
 800a3ae:	6123      	str	r3, [r4, #16]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3b6:	e7aa      	b.n	800a30e <_printf_i+0x146>
 800a3b8:	6923      	ldr	r3, [r4, #16]
 800a3ba:	4632      	mov	r2, r6
 800a3bc:	4649      	mov	r1, r9
 800a3be:	4640      	mov	r0, r8
 800a3c0:	47d0      	blx	sl
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	d0ad      	beq.n	800a322 <_printf_i+0x15a>
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	079b      	lsls	r3, r3, #30
 800a3ca:	d413      	bmi.n	800a3f4 <_printf_i+0x22c>
 800a3cc:	68e0      	ldr	r0, [r4, #12]
 800a3ce:	9b03      	ldr	r3, [sp, #12]
 800a3d0:	4298      	cmp	r0, r3
 800a3d2:	bfb8      	it	lt
 800a3d4:	4618      	movlt	r0, r3
 800a3d6:	e7a6      	b.n	800a326 <_printf_i+0x15e>
 800a3d8:	2301      	movs	r3, #1
 800a3da:	4632      	mov	r2, r6
 800a3dc:	4649      	mov	r1, r9
 800a3de:	4640      	mov	r0, r8
 800a3e0:	47d0      	blx	sl
 800a3e2:	3001      	adds	r0, #1
 800a3e4:	d09d      	beq.n	800a322 <_printf_i+0x15a>
 800a3e6:	3501      	adds	r5, #1
 800a3e8:	68e3      	ldr	r3, [r4, #12]
 800a3ea:	9903      	ldr	r1, [sp, #12]
 800a3ec:	1a5b      	subs	r3, r3, r1
 800a3ee:	42ab      	cmp	r3, r5
 800a3f0:	dcf2      	bgt.n	800a3d8 <_printf_i+0x210>
 800a3f2:	e7eb      	b.n	800a3cc <_printf_i+0x204>
 800a3f4:	2500      	movs	r5, #0
 800a3f6:	f104 0619 	add.w	r6, r4, #25
 800a3fa:	e7f5      	b.n	800a3e8 <_printf_i+0x220>
 800a3fc:	0800c8fa 	.word	0x0800c8fa
 800a400:	0800c90b 	.word	0x0800c90b

0800a404 <std>:
 800a404:	2300      	movs	r3, #0
 800a406:	b510      	push	{r4, lr}
 800a408:	4604      	mov	r4, r0
 800a40a:	e9c0 3300 	strd	r3, r3, [r0]
 800a40e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a412:	6083      	str	r3, [r0, #8]
 800a414:	8181      	strh	r1, [r0, #12]
 800a416:	6643      	str	r3, [r0, #100]	@ 0x64
 800a418:	81c2      	strh	r2, [r0, #14]
 800a41a:	6183      	str	r3, [r0, #24]
 800a41c:	4619      	mov	r1, r3
 800a41e:	2208      	movs	r2, #8
 800a420:	305c      	adds	r0, #92	@ 0x5c
 800a422:	f000 f9f9 	bl	800a818 <memset>
 800a426:	4b0d      	ldr	r3, [pc, #52]	@ (800a45c <std+0x58>)
 800a428:	6263      	str	r3, [r4, #36]	@ 0x24
 800a42a:	4b0d      	ldr	r3, [pc, #52]	@ (800a460 <std+0x5c>)
 800a42c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a42e:	4b0d      	ldr	r3, [pc, #52]	@ (800a464 <std+0x60>)
 800a430:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a432:	4b0d      	ldr	r3, [pc, #52]	@ (800a468 <std+0x64>)
 800a434:	6323      	str	r3, [r4, #48]	@ 0x30
 800a436:	4b0d      	ldr	r3, [pc, #52]	@ (800a46c <std+0x68>)
 800a438:	6224      	str	r4, [r4, #32]
 800a43a:	429c      	cmp	r4, r3
 800a43c:	d006      	beq.n	800a44c <std+0x48>
 800a43e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a442:	4294      	cmp	r4, r2
 800a444:	d002      	beq.n	800a44c <std+0x48>
 800a446:	33d0      	adds	r3, #208	@ 0xd0
 800a448:	429c      	cmp	r4, r3
 800a44a:	d105      	bne.n	800a458 <std+0x54>
 800a44c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a454:	f000 baba 	b.w	800a9cc <__retarget_lock_init_recursive>
 800a458:	bd10      	pop	{r4, pc}
 800a45a:	bf00      	nop
 800a45c:	0800a669 	.word	0x0800a669
 800a460:	0800a68b 	.word	0x0800a68b
 800a464:	0800a6c3 	.word	0x0800a6c3
 800a468:	0800a6e7 	.word	0x0800a6e7
 800a46c:	20003e60 	.word	0x20003e60

0800a470 <stdio_exit_handler>:
 800a470:	4a02      	ldr	r2, [pc, #8]	@ (800a47c <stdio_exit_handler+0xc>)
 800a472:	4903      	ldr	r1, [pc, #12]	@ (800a480 <stdio_exit_handler+0x10>)
 800a474:	4803      	ldr	r0, [pc, #12]	@ (800a484 <stdio_exit_handler+0x14>)
 800a476:	f000 b869 	b.w	800a54c <_fwalk_sglue>
 800a47a:	bf00      	nop
 800a47c:	20000010 	.word	0x20000010
 800a480:	0800c321 	.word	0x0800c321
 800a484:	20000020 	.word	0x20000020

0800a488 <cleanup_stdio>:
 800a488:	6841      	ldr	r1, [r0, #4]
 800a48a:	4b0c      	ldr	r3, [pc, #48]	@ (800a4bc <cleanup_stdio+0x34>)
 800a48c:	4299      	cmp	r1, r3
 800a48e:	b510      	push	{r4, lr}
 800a490:	4604      	mov	r4, r0
 800a492:	d001      	beq.n	800a498 <cleanup_stdio+0x10>
 800a494:	f001 ff44 	bl	800c320 <_fflush_r>
 800a498:	68a1      	ldr	r1, [r4, #8]
 800a49a:	4b09      	ldr	r3, [pc, #36]	@ (800a4c0 <cleanup_stdio+0x38>)
 800a49c:	4299      	cmp	r1, r3
 800a49e:	d002      	beq.n	800a4a6 <cleanup_stdio+0x1e>
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f001 ff3d 	bl	800c320 <_fflush_r>
 800a4a6:	68e1      	ldr	r1, [r4, #12]
 800a4a8:	4b06      	ldr	r3, [pc, #24]	@ (800a4c4 <cleanup_stdio+0x3c>)
 800a4aa:	4299      	cmp	r1, r3
 800a4ac:	d004      	beq.n	800a4b8 <cleanup_stdio+0x30>
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4b4:	f001 bf34 	b.w	800c320 <_fflush_r>
 800a4b8:	bd10      	pop	{r4, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20003e60 	.word	0x20003e60
 800a4c0:	20003ec8 	.word	0x20003ec8
 800a4c4:	20003f30 	.word	0x20003f30

0800a4c8 <global_stdio_init.part.0>:
 800a4c8:	b510      	push	{r4, lr}
 800a4ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a4f8 <global_stdio_init.part.0+0x30>)
 800a4cc:	4c0b      	ldr	r4, [pc, #44]	@ (800a4fc <global_stdio_init.part.0+0x34>)
 800a4ce:	4a0c      	ldr	r2, [pc, #48]	@ (800a500 <global_stdio_init.part.0+0x38>)
 800a4d0:	601a      	str	r2, [r3, #0]
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	2104      	movs	r1, #4
 800a4d8:	f7ff ff94 	bl	800a404 <std>
 800a4dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	2109      	movs	r1, #9
 800a4e4:	f7ff ff8e 	bl	800a404 <std>
 800a4e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a4ec:	2202      	movs	r2, #2
 800a4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4f2:	2112      	movs	r1, #18
 800a4f4:	f7ff bf86 	b.w	800a404 <std>
 800a4f8:	20003f98 	.word	0x20003f98
 800a4fc:	20003e60 	.word	0x20003e60
 800a500:	0800a471 	.word	0x0800a471

0800a504 <__sfp_lock_acquire>:
 800a504:	4801      	ldr	r0, [pc, #4]	@ (800a50c <__sfp_lock_acquire+0x8>)
 800a506:	f000 ba62 	b.w	800a9ce <__retarget_lock_acquire_recursive>
 800a50a:	bf00      	nop
 800a50c:	20003fa1 	.word	0x20003fa1

0800a510 <__sfp_lock_release>:
 800a510:	4801      	ldr	r0, [pc, #4]	@ (800a518 <__sfp_lock_release+0x8>)
 800a512:	f000 ba5d 	b.w	800a9d0 <__retarget_lock_release_recursive>
 800a516:	bf00      	nop
 800a518:	20003fa1 	.word	0x20003fa1

0800a51c <__sinit>:
 800a51c:	b510      	push	{r4, lr}
 800a51e:	4604      	mov	r4, r0
 800a520:	f7ff fff0 	bl	800a504 <__sfp_lock_acquire>
 800a524:	6a23      	ldr	r3, [r4, #32]
 800a526:	b11b      	cbz	r3, 800a530 <__sinit+0x14>
 800a528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a52c:	f7ff bff0 	b.w	800a510 <__sfp_lock_release>
 800a530:	4b04      	ldr	r3, [pc, #16]	@ (800a544 <__sinit+0x28>)
 800a532:	6223      	str	r3, [r4, #32]
 800a534:	4b04      	ldr	r3, [pc, #16]	@ (800a548 <__sinit+0x2c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1f5      	bne.n	800a528 <__sinit+0xc>
 800a53c:	f7ff ffc4 	bl	800a4c8 <global_stdio_init.part.0>
 800a540:	e7f2      	b.n	800a528 <__sinit+0xc>
 800a542:	bf00      	nop
 800a544:	0800a489 	.word	0x0800a489
 800a548:	20003f98 	.word	0x20003f98

0800a54c <_fwalk_sglue>:
 800a54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a550:	4607      	mov	r7, r0
 800a552:	4688      	mov	r8, r1
 800a554:	4614      	mov	r4, r2
 800a556:	2600      	movs	r6, #0
 800a558:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a55c:	f1b9 0901 	subs.w	r9, r9, #1
 800a560:	d505      	bpl.n	800a56e <_fwalk_sglue+0x22>
 800a562:	6824      	ldr	r4, [r4, #0]
 800a564:	2c00      	cmp	r4, #0
 800a566:	d1f7      	bne.n	800a558 <_fwalk_sglue+0xc>
 800a568:	4630      	mov	r0, r6
 800a56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a56e:	89ab      	ldrh	r3, [r5, #12]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d907      	bls.n	800a584 <_fwalk_sglue+0x38>
 800a574:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a578:	3301      	adds	r3, #1
 800a57a:	d003      	beq.n	800a584 <_fwalk_sglue+0x38>
 800a57c:	4629      	mov	r1, r5
 800a57e:	4638      	mov	r0, r7
 800a580:	47c0      	blx	r8
 800a582:	4306      	orrs	r6, r0
 800a584:	3568      	adds	r5, #104	@ 0x68
 800a586:	e7e9      	b.n	800a55c <_fwalk_sglue+0x10>

0800a588 <iprintf>:
 800a588:	b40f      	push	{r0, r1, r2, r3}
 800a58a:	b507      	push	{r0, r1, r2, lr}
 800a58c:	4906      	ldr	r1, [pc, #24]	@ (800a5a8 <iprintf+0x20>)
 800a58e:	ab04      	add	r3, sp, #16
 800a590:	6808      	ldr	r0, [r1, #0]
 800a592:	f853 2b04 	ldr.w	r2, [r3], #4
 800a596:	6881      	ldr	r1, [r0, #8]
 800a598:	9301      	str	r3, [sp, #4]
 800a59a:	f001 fd25 	bl	800bfe8 <_vfiprintf_r>
 800a59e:	b003      	add	sp, #12
 800a5a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5a4:	b004      	add	sp, #16
 800a5a6:	4770      	bx	lr
 800a5a8:	2000001c 	.word	0x2000001c

0800a5ac <_puts_r>:
 800a5ac:	6a03      	ldr	r3, [r0, #32]
 800a5ae:	b570      	push	{r4, r5, r6, lr}
 800a5b0:	6884      	ldr	r4, [r0, #8]
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	460e      	mov	r6, r1
 800a5b6:	b90b      	cbnz	r3, 800a5bc <_puts_r+0x10>
 800a5b8:	f7ff ffb0 	bl	800a51c <__sinit>
 800a5bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5be:	07db      	lsls	r3, r3, #31
 800a5c0:	d405      	bmi.n	800a5ce <_puts_r+0x22>
 800a5c2:	89a3      	ldrh	r3, [r4, #12]
 800a5c4:	0598      	lsls	r0, r3, #22
 800a5c6:	d402      	bmi.n	800a5ce <_puts_r+0x22>
 800a5c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5ca:	f000 fa00 	bl	800a9ce <__retarget_lock_acquire_recursive>
 800a5ce:	89a3      	ldrh	r3, [r4, #12]
 800a5d0:	0719      	lsls	r1, r3, #28
 800a5d2:	d502      	bpl.n	800a5da <_puts_r+0x2e>
 800a5d4:	6923      	ldr	r3, [r4, #16]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d135      	bne.n	800a646 <_puts_r+0x9a>
 800a5da:	4621      	mov	r1, r4
 800a5dc:	4628      	mov	r0, r5
 800a5de:	f000 f8c5 	bl	800a76c <__swsetup_r>
 800a5e2:	b380      	cbz	r0, 800a646 <_puts_r+0x9a>
 800a5e4:	f04f 35ff 	mov.w	r5, #4294967295
 800a5e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5ea:	07da      	lsls	r2, r3, #31
 800a5ec:	d405      	bmi.n	800a5fa <_puts_r+0x4e>
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	059b      	lsls	r3, r3, #22
 800a5f2:	d402      	bmi.n	800a5fa <_puts_r+0x4e>
 800a5f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5f6:	f000 f9eb 	bl	800a9d0 <__retarget_lock_release_recursive>
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	bd70      	pop	{r4, r5, r6, pc}
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	da04      	bge.n	800a60c <_puts_r+0x60>
 800a602:	69a2      	ldr	r2, [r4, #24]
 800a604:	429a      	cmp	r2, r3
 800a606:	dc17      	bgt.n	800a638 <_puts_r+0x8c>
 800a608:	290a      	cmp	r1, #10
 800a60a:	d015      	beq.n	800a638 <_puts_r+0x8c>
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	6022      	str	r2, [r4, #0]
 800a612:	7019      	strb	r1, [r3, #0]
 800a614:	68a3      	ldr	r3, [r4, #8]
 800a616:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a61a:	3b01      	subs	r3, #1
 800a61c:	60a3      	str	r3, [r4, #8]
 800a61e:	2900      	cmp	r1, #0
 800a620:	d1ed      	bne.n	800a5fe <_puts_r+0x52>
 800a622:	2b00      	cmp	r3, #0
 800a624:	da11      	bge.n	800a64a <_puts_r+0x9e>
 800a626:	4622      	mov	r2, r4
 800a628:	210a      	movs	r1, #10
 800a62a:	4628      	mov	r0, r5
 800a62c:	f000 f85f 	bl	800a6ee <__swbuf_r>
 800a630:	3001      	adds	r0, #1
 800a632:	d0d7      	beq.n	800a5e4 <_puts_r+0x38>
 800a634:	250a      	movs	r5, #10
 800a636:	e7d7      	b.n	800a5e8 <_puts_r+0x3c>
 800a638:	4622      	mov	r2, r4
 800a63a:	4628      	mov	r0, r5
 800a63c:	f000 f857 	bl	800a6ee <__swbuf_r>
 800a640:	3001      	adds	r0, #1
 800a642:	d1e7      	bne.n	800a614 <_puts_r+0x68>
 800a644:	e7ce      	b.n	800a5e4 <_puts_r+0x38>
 800a646:	3e01      	subs	r6, #1
 800a648:	e7e4      	b.n	800a614 <_puts_r+0x68>
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	1c5a      	adds	r2, r3, #1
 800a64e:	6022      	str	r2, [r4, #0]
 800a650:	220a      	movs	r2, #10
 800a652:	701a      	strb	r2, [r3, #0]
 800a654:	e7ee      	b.n	800a634 <_puts_r+0x88>
	...

0800a658 <puts>:
 800a658:	4b02      	ldr	r3, [pc, #8]	@ (800a664 <puts+0xc>)
 800a65a:	4601      	mov	r1, r0
 800a65c:	6818      	ldr	r0, [r3, #0]
 800a65e:	f7ff bfa5 	b.w	800a5ac <_puts_r>
 800a662:	bf00      	nop
 800a664:	2000001c 	.word	0x2000001c

0800a668 <__sread>:
 800a668:	b510      	push	{r4, lr}
 800a66a:	460c      	mov	r4, r1
 800a66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a670:	f000 f95e 	bl	800a930 <_read_r>
 800a674:	2800      	cmp	r0, #0
 800a676:	bfab      	itete	ge
 800a678:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a67a:	89a3      	ldrhlt	r3, [r4, #12]
 800a67c:	181b      	addge	r3, r3, r0
 800a67e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a682:	bfac      	ite	ge
 800a684:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a686:	81a3      	strhlt	r3, [r4, #12]
 800a688:	bd10      	pop	{r4, pc}

0800a68a <__swrite>:
 800a68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a68e:	461f      	mov	r7, r3
 800a690:	898b      	ldrh	r3, [r1, #12]
 800a692:	05db      	lsls	r3, r3, #23
 800a694:	4605      	mov	r5, r0
 800a696:	460c      	mov	r4, r1
 800a698:	4616      	mov	r6, r2
 800a69a:	d505      	bpl.n	800a6a8 <__swrite+0x1e>
 800a69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f000 f932 	bl	800a90c <_lseek_r>
 800a6a8:	89a3      	ldrh	r3, [r4, #12]
 800a6aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6b2:	81a3      	strh	r3, [r4, #12]
 800a6b4:	4632      	mov	r2, r6
 800a6b6:	463b      	mov	r3, r7
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6be:	f000 b949 	b.w	800a954 <_write_r>

0800a6c2 <__sseek>:
 800a6c2:	b510      	push	{r4, lr}
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ca:	f000 f91f 	bl	800a90c <_lseek_r>
 800a6ce:	1c43      	adds	r3, r0, #1
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	bf15      	itete	ne
 800a6d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a6d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6de:	81a3      	strheq	r3, [r4, #12]
 800a6e0:	bf18      	it	ne
 800a6e2:	81a3      	strhne	r3, [r4, #12]
 800a6e4:	bd10      	pop	{r4, pc}

0800a6e6 <__sclose>:
 800a6e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ea:	f000 b8a1 	b.w	800a830 <_close_r>

0800a6ee <__swbuf_r>:
 800a6ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f0:	460e      	mov	r6, r1
 800a6f2:	4614      	mov	r4, r2
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	b118      	cbz	r0, 800a700 <__swbuf_r+0x12>
 800a6f8:	6a03      	ldr	r3, [r0, #32]
 800a6fa:	b90b      	cbnz	r3, 800a700 <__swbuf_r+0x12>
 800a6fc:	f7ff ff0e 	bl	800a51c <__sinit>
 800a700:	69a3      	ldr	r3, [r4, #24]
 800a702:	60a3      	str	r3, [r4, #8]
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	071a      	lsls	r2, r3, #28
 800a708:	d501      	bpl.n	800a70e <__swbuf_r+0x20>
 800a70a:	6923      	ldr	r3, [r4, #16]
 800a70c:	b943      	cbnz	r3, 800a720 <__swbuf_r+0x32>
 800a70e:	4621      	mov	r1, r4
 800a710:	4628      	mov	r0, r5
 800a712:	f000 f82b 	bl	800a76c <__swsetup_r>
 800a716:	b118      	cbz	r0, 800a720 <__swbuf_r+0x32>
 800a718:	f04f 37ff 	mov.w	r7, #4294967295
 800a71c:	4638      	mov	r0, r7
 800a71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	6922      	ldr	r2, [r4, #16]
 800a724:	1a98      	subs	r0, r3, r2
 800a726:	6963      	ldr	r3, [r4, #20]
 800a728:	b2f6      	uxtb	r6, r6
 800a72a:	4283      	cmp	r3, r0
 800a72c:	4637      	mov	r7, r6
 800a72e:	dc05      	bgt.n	800a73c <__swbuf_r+0x4e>
 800a730:	4621      	mov	r1, r4
 800a732:	4628      	mov	r0, r5
 800a734:	f001 fdf4 	bl	800c320 <_fflush_r>
 800a738:	2800      	cmp	r0, #0
 800a73a:	d1ed      	bne.n	800a718 <__swbuf_r+0x2a>
 800a73c:	68a3      	ldr	r3, [r4, #8]
 800a73e:	3b01      	subs	r3, #1
 800a740:	60a3      	str	r3, [r4, #8]
 800a742:	6823      	ldr	r3, [r4, #0]
 800a744:	1c5a      	adds	r2, r3, #1
 800a746:	6022      	str	r2, [r4, #0]
 800a748:	701e      	strb	r6, [r3, #0]
 800a74a:	6962      	ldr	r2, [r4, #20]
 800a74c:	1c43      	adds	r3, r0, #1
 800a74e:	429a      	cmp	r2, r3
 800a750:	d004      	beq.n	800a75c <__swbuf_r+0x6e>
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	07db      	lsls	r3, r3, #31
 800a756:	d5e1      	bpl.n	800a71c <__swbuf_r+0x2e>
 800a758:	2e0a      	cmp	r6, #10
 800a75a:	d1df      	bne.n	800a71c <__swbuf_r+0x2e>
 800a75c:	4621      	mov	r1, r4
 800a75e:	4628      	mov	r0, r5
 800a760:	f001 fdde 	bl	800c320 <_fflush_r>
 800a764:	2800      	cmp	r0, #0
 800a766:	d0d9      	beq.n	800a71c <__swbuf_r+0x2e>
 800a768:	e7d6      	b.n	800a718 <__swbuf_r+0x2a>
	...

0800a76c <__swsetup_r>:
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	4b29      	ldr	r3, [pc, #164]	@ (800a814 <__swsetup_r+0xa8>)
 800a770:	4605      	mov	r5, r0
 800a772:	6818      	ldr	r0, [r3, #0]
 800a774:	460c      	mov	r4, r1
 800a776:	b118      	cbz	r0, 800a780 <__swsetup_r+0x14>
 800a778:	6a03      	ldr	r3, [r0, #32]
 800a77a:	b90b      	cbnz	r3, 800a780 <__swsetup_r+0x14>
 800a77c:	f7ff fece 	bl	800a51c <__sinit>
 800a780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a784:	0719      	lsls	r1, r3, #28
 800a786:	d422      	bmi.n	800a7ce <__swsetup_r+0x62>
 800a788:	06da      	lsls	r2, r3, #27
 800a78a:	d407      	bmi.n	800a79c <__swsetup_r+0x30>
 800a78c:	2209      	movs	r2, #9
 800a78e:	602a      	str	r2, [r5, #0]
 800a790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a794:	81a3      	strh	r3, [r4, #12]
 800a796:	f04f 30ff 	mov.w	r0, #4294967295
 800a79a:	e033      	b.n	800a804 <__swsetup_r+0x98>
 800a79c:	0758      	lsls	r0, r3, #29
 800a79e:	d512      	bpl.n	800a7c6 <__swsetup_r+0x5a>
 800a7a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7a2:	b141      	cbz	r1, 800a7b6 <__swsetup_r+0x4a>
 800a7a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7a8:	4299      	cmp	r1, r3
 800a7aa:	d002      	beq.n	800a7b2 <__swsetup_r+0x46>
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	f000 ff77 	bl	800b6a0 <_free_r>
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a7bc:	81a3      	strh	r3, [r4, #12]
 800a7be:	2300      	movs	r3, #0
 800a7c0:	6063      	str	r3, [r4, #4]
 800a7c2:	6923      	ldr	r3, [r4, #16]
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	f043 0308 	orr.w	r3, r3, #8
 800a7cc:	81a3      	strh	r3, [r4, #12]
 800a7ce:	6923      	ldr	r3, [r4, #16]
 800a7d0:	b94b      	cbnz	r3, 800a7e6 <__swsetup_r+0x7a>
 800a7d2:	89a3      	ldrh	r3, [r4, #12]
 800a7d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a7d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7dc:	d003      	beq.n	800a7e6 <__swsetup_r+0x7a>
 800a7de:	4621      	mov	r1, r4
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	f001 fdeb 	bl	800c3bc <__smakebuf_r>
 800a7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ea:	f013 0201 	ands.w	r2, r3, #1
 800a7ee:	d00a      	beq.n	800a806 <__swsetup_r+0x9a>
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	60a2      	str	r2, [r4, #8]
 800a7f4:	6962      	ldr	r2, [r4, #20]
 800a7f6:	4252      	negs	r2, r2
 800a7f8:	61a2      	str	r2, [r4, #24]
 800a7fa:	6922      	ldr	r2, [r4, #16]
 800a7fc:	b942      	cbnz	r2, 800a810 <__swsetup_r+0xa4>
 800a7fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a802:	d1c5      	bne.n	800a790 <__swsetup_r+0x24>
 800a804:	bd38      	pop	{r3, r4, r5, pc}
 800a806:	0799      	lsls	r1, r3, #30
 800a808:	bf58      	it	pl
 800a80a:	6962      	ldrpl	r2, [r4, #20]
 800a80c:	60a2      	str	r2, [r4, #8]
 800a80e:	e7f4      	b.n	800a7fa <__swsetup_r+0x8e>
 800a810:	2000      	movs	r0, #0
 800a812:	e7f7      	b.n	800a804 <__swsetup_r+0x98>
 800a814:	2000001c 	.word	0x2000001c

0800a818 <memset>:
 800a818:	4402      	add	r2, r0
 800a81a:	4603      	mov	r3, r0
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d100      	bne.n	800a822 <memset+0xa>
 800a820:	4770      	bx	lr
 800a822:	f803 1b01 	strb.w	r1, [r3], #1
 800a826:	e7f9      	b.n	800a81c <memset+0x4>

0800a828 <_localeconv_r>:
 800a828:	4800      	ldr	r0, [pc, #0]	@ (800a82c <_localeconv_r+0x4>)
 800a82a:	4770      	bx	lr
 800a82c:	2000015c 	.word	0x2000015c

0800a830 <_close_r>:
 800a830:	b538      	push	{r3, r4, r5, lr}
 800a832:	4d06      	ldr	r5, [pc, #24]	@ (800a84c <_close_r+0x1c>)
 800a834:	2300      	movs	r3, #0
 800a836:	4604      	mov	r4, r0
 800a838:	4608      	mov	r0, r1
 800a83a:	602b      	str	r3, [r5, #0]
 800a83c:	f7f7 f9e6 	bl	8001c0c <_close>
 800a840:	1c43      	adds	r3, r0, #1
 800a842:	d102      	bne.n	800a84a <_close_r+0x1a>
 800a844:	682b      	ldr	r3, [r5, #0]
 800a846:	b103      	cbz	r3, 800a84a <_close_r+0x1a>
 800a848:	6023      	str	r3, [r4, #0]
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
 800a84c:	20003f9c 	.word	0x20003f9c

0800a850 <_reclaim_reent>:
 800a850:	4b2d      	ldr	r3, [pc, #180]	@ (800a908 <_reclaim_reent+0xb8>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4283      	cmp	r3, r0
 800a856:	b570      	push	{r4, r5, r6, lr}
 800a858:	4604      	mov	r4, r0
 800a85a:	d053      	beq.n	800a904 <_reclaim_reent+0xb4>
 800a85c:	69c3      	ldr	r3, [r0, #28]
 800a85e:	b31b      	cbz	r3, 800a8a8 <_reclaim_reent+0x58>
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	b163      	cbz	r3, 800a87e <_reclaim_reent+0x2e>
 800a864:	2500      	movs	r5, #0
 800a866:	69e3      	ldr	r3, [r4, #28]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	5959      	ldr	r1, [r3, r5]
 800a86c:	b9b1      	cbnz	r1, 800a89c <_reclaim_reent+0x4c>
 800a86e:	3504      	adds	r5, #4
 800a870:	2d80      	cmp	r5, #128	@ 0x80
 800a872:	d1f8      	bne.n	800a866 <_reclaim_reent+0x16>
 800a874:	69e3      	ldr	r3, [r4, #28]
 800a876:	4620      	mov	r0, r4
 800a878:	68d9      	ldr	r1, [r3, #12]
 800a87a:	f000 ff11 	bl	800b6a0 <_free_r>
 800a87e:	69e3      	ldr	r3, [r4, #28]
 800a880:	6819      	ldr	r1, [r3, #0]
 800a882:	b111      	cbz	r1, 800a88a <_reclaim_reent+0x3a>
 800a884:	4620      	mov	r0, r4
 800a886:	f000 ff0b 	bl	800b6a0 <_free_r>
 800a88a:	69e3      	ldr	r3, [r4, #28]
 800a88c:	689d      	ldr	r5, [r3, #8]
 800a88e:	b15d      	cbz	r5, 800a8a8 <_reclaim_reent+0x58>
 800a890:	4629      	mov	r1, r5
 800a892:	4620      	mov	r0, r4
 800a894:	682d      	ldr	r5, [r5, #0]
 800a896:	f000 ff03 	bl	800b6a0 <_free_r>
 800a89a:	e7f8      	b.n	800a88e <_reclaim_reent+0x3e>
 800a89c:	680e      	ldr	r6, [r1, #0]
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f000 fefe 	bl	800b6a0 <_free_r>
 800a8a4:	4631      	mov	r1, r6
 800a8a6:	e7e1      	b.n	800a86c <_reclaim_reent+0x1c>
 800a8a8:	6961      	ldr	r1, [r4, #20]
 800a8aa:	b111      	cbz	r1, 800a8b2 <_reclaim_reent+0x62>
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f000 fef7 	bl	800b6a0 <_free_r>
 800a8b2:	69e1      	ldr	r1, [r4, #28]
 800a8b4:	b111      	cbz	r1, 800a8bc <_reclaim_reent+0x6c>
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f000 fef2 	bl	800b6a0 <_free_r>
 800a8bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a8be:	b111      	cbz	r1, 800a8c6 <_reclaim_reent+0x76>
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f000 feed 	bl	800b6a0 <_free_r>
 800a8c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8c8:	b111      	cbz	r1, 800a8d0 <_reclaim_reent+0x80>
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f000 fee8 	bl	800b6a0 <_free_r>
 800a8d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a8d2:	b111      	cbz	r1, 800a8da <_reclaim_reent+0x8a>
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f000 fee3 	bl	800b6a0 <_free_r>
 800a8da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a8dc:	b111      	cbz	r1, 800a8e4 <_reclaim_reent+0x94>
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f000 fede 	bl	800b6a0 <_free_r>
 800a8e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a8e6:	b111      	cbz	r1, 800a8ee <_reclaim_reent+0x9e>
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 fed9 	bl	800b6a0 <_free_r>
 800a8ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a8f0:	b111      	cbz	r1, 800a8f8 <_reclaim_reent+0xa8>
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f000 fed4 	bl	800b6a0 <_free_r>
 800a8f8:	6a23      	ldr	r3, [r4, #32]
 800a8fa:	b11b      	cbz	r3, 800a904 <_reclaim_reent+0xb4>
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a902:	4718      	bx	r3
 800a904:	bd70      	pop	{r4, r5, r6, pc}
 800a906:	bf00      	nop
 800a908:	2000001c 	.word	0x2000001c

0800a90c <_lseek_r>:
 800a90c:	b538      	push	{r3, r4, r5, lr}
 800a90e:	4d07      	ldr	r5, [pc, #28]	@ (800a92c <_lseek_r+0x20>)
 800a910:	4604      	mov	r4, r0
 800a912:	4608      	mov	r0, r1
 800a914:	4611      	mov	r1, r2
 800a916:	2200      	movs	r2, #0
 800a918:	602a      	str	r2, [r5, #0]
 800a91a:	461a      	mov	r2, r3
 800a91c:	f7f7 f99d 	bl	8001c5a <_lseek>
 800a920:	1c43      	adds	r3, r0, #1
 800a922:	d102      	bne.n	800a92a <_lseek_r+0x1e>
 800a924:	682b      	ldr	r3, [r5, #0]
 800a926:	b103      	cbz	r3, 800a92a <_lseek_r+0x1e>
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	bd38      	pop	{r3, r4, r5, pc}
 800a92c:	20003f9c 	.word	0x20003f9c

0800a930 <_read_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	4d07      	ldr	r5, [pc, #28]	@ (800a950 <_read_r+0x20>)
 800a934:	4604      	mov	r4, r0
 800a936:	4608      	mov	r0, r1
 800a938:	4611      	mov	r1, r2
 800a93a:	2200      	movs	r2, #0
 800a93c:	602a      	str	r2, [r5, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	f7f7 f92b 	bl	8001b9a <_read>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_read_r+0x1e>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_read_r+0x1e>
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	20003f9c 	.word	0x20003f9c

0800a954 <_write_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	4d07      	ldr	r5, [pc, #28]	@ (800a974 <_write_r+0x20>)
 800a958:	4604      	mov	r4, r0
 800a95a:	4608      	mov	r0, r1
 800a95c:	4611      	mov	r1, r2
 800a95e:	2200      	movs	r2, #0
 800a960:	602a      	str	r2, [r5, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	f7f7 f936 	bl	8001bd4 <_write>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d102      	bne.n	800a972 <_write_r+0x1e>
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	b103      	cbz	r3, 800a972 <_write_r+0x1e>
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	20003f9c 	.word	0x20003f9c

0800a978 <__errno>:
 800a978:	4b01      	ldr	r3, [pc, #4]	@ (800a980 <__errno+0x8>)
 800a97a:	6818      	ldr	r0, [r3, #0]
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	2000001c 	.word	0x2000001c

0800a984 <__libc_init_array>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	4d0d      	ldr	r5, [pc, #52]	@ (800a9bc <__libc_init_array+0x38>)
 800a988:	4c0d      	ldr	r4, [pc, #52]	@ (800a9c0 <__libc_init_array+0x3c>)
 800a98a:	1b64      	subs	r4, r4, r5
 800a98c:	10a4      	asrs	r4, r4, #2
 800a98e:	2600      	movs	r6, #0
 800a990:	42a6      	cmp	r6, r4
 800a992:	d109      	bne.n	800a9a8 <__libc_init_array+0x24>
 800a994:	4d0b      	ldr	r5, [pc, #44]	@ (800a9c4 <__libc_init_array+0x40>)
 800a996:	4c0c      	ldr	r4, [pc, #48]	@ (800a9c8 <__libc_init_array+0x44>)
 800a998:	f001 ff2e 	bl	800c7f8 <_init>
 800a99c:	1b64      	subs	r4, r4, r5
 800a99e:	10a4      	asrs	r4, r4, #2
 800a9a0:	2600      	movs	r6, #0
 800a9a2:	42a6      	cmp	r6, r4
 800a9a4:	d105      	bne.n	800a9b2 <__libc_init_array+0x2e>
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}
 800a9a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ac:	4798      	blx	r3
 800a9ae:	3601      	adds	r6, #1
 800a9b0:	e7ee      	b.n	800a990 <__libc_init_array+0xc>
 800a9b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b6:	4798      	blx	r3
 800a9b8:	3601      	adds	r6, #1
 800a9ba:	e7f2      	b.n	800a9a2 <__libc_init_array+0x1e>
 800a9bc:	0800cc84 	.word	0x0800cc84
 800a9c0:	0800cc84 	.word	0x0800cc84
 800a9c4:	0800cc84 	.word	0x0800cc84
 800a9c8:	0800cc88 	.word	0x0800cc88

0800a9cc <__retarget_lock_init_recursive>:
 800a9cc:	4770      	bx	lr

0800a9ce <__retarget_lock_acquire_recursive>:
 800a9ce:	4770      	bx	lr

0800a9d0 <__retarget_lock_release_recursive>:
 800a9d0:	4770      	bx	lr

0800a9d2 <memcpy>:
 800a9d2:	440a      	add	r2, r1
 800a9d4:	4291      	cmp	r1, r2
 800a9d6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9da:	d100      	bne.n	800a9de <memcpy+0xc>
 800a9dc:	4770      	bx	lr
 800a9de:	b510      	push	{r4, lr}
 800a9e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9e8:	4291      	cmp	r1, r2
 800a9ea:	d1f9      	bne.n	800a9e0 <memcpy+0xe>
 800a9ec:	bd10      	pop	{r4, pc}

0800a9ee <quorem>:
 800a9ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f2:	6903      	ldr	r3, [r0, #16]
 800a9f4:	690c      	ldr	r4, [r1, #16]
 800a9f6:	42a3      	cmp	r3, r4
 800a9f8:	4607      	mov	r7, r0
 800a9fa:	db7e      	blt.n	800aafa <quorem+0x10c>
 800a9fc:	3c01      	subs	r4, #1
 800a9fe:	f101 0814 	add.w	r8, r1, #20
 800aa02:	00a3      	lsls	r3, r4, #2
 800aa04:	f100 0514 	add.w	r5, r0, #20
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa0e:	9301      	str	r3, [sp, #4]
 800aa10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa20:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa24:	d32e      	bcc.n	800aa84 <quorem+0x96>
 800aa26:	f04f 0a00 	mov.w	sl, #0
 800aa2a:	46c4      	mov	ip, r8
 800aa2c:	46ae      	mov	lr, r5
 800aa2e:	46d3      	mov	fp, sl
 800aa30:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa34:	b298      	uxth	r0, r3
 800aa36:	fb06 a000 	mla	r0, r6, r0, sl
 800aa3a:	0c02      	lsrs	r2, r0, #16
 800aa3c:	0c1b      	lsrs	r3, r3, #16
 800aa3e:	fb06 2303 	mla	r3, r6, r3, r2
 800aa42:	f8de 2000 	ldr.w	r2, [lr]
 800aa46:	b280      	uxth	r0, r0
 800aa48:	b292      	uxth	r2, r2
 800aa4a:	1a12      	subs	r2, r2, r0
 800aa4c:	445a      	add	r2, fp
 800aa4e:	f8de 0000 	ldr.w	r0, [lr]
 800aa52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aa5c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aa60:	b292      	uxth	r2, r2
 800aa62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa66:	45e1      	cmp	r9, ip
 800aa68:	f84e 2b04 	str.w	r2, [lr], #4
 800aa6c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aa70:	d2de      	bcs.n	800aa30 <quorem+0x42>
 800aa72:	9b00      	ldr	r3, [sp, #0]
 800aa74:	58eb      	ldr	r3, [r5, r3]
 800aa76:	b92b      	cbnz	r3, 800aa84 <quorem+0x96>
 800aa78:	9b01      	ldr	r3, [sp, #4]
 800aa7a:	3b04      	subs	r3, #4
 800aa7c:	429d      	cmp	r5, r3
 800aa7e:	461a      	mov	r2, r3
 800aa80:	d32f      	bcc.n	800aae2 <quorem+0xf4>
 800aa82:	613c      	str	r4, [r7, #16]
 800aa84:	4638      	mov	r0, r7
 800aa86:	f001 f97d 	bl	800bd84 <__mcmp>
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	db25      	blt.n	800aada <quorem+0xec>
 800aa8e:	4629      	mov	r1, r5
 800aa90:	2000      	movs	r0, #0
 800aa92:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa96:	f8d1 c000 	ldr.w	ip, [r1]
 800aa9a:	fa1f fe82 	uxth.w	lr, r2
 800aa9e:	fa1f f38c 	uxth.w	r3, ip
 800aaa2:	eba3 030e 	sub.w	r3, r3, lr
 800aaa6:	4403      	add	r3, r0
 800aaa8:	0c12      	lsrs	r2, r2, #16
 800aaaa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aaae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aab8:	45c1      	cmp	r9, r8
 800aaba:	f841 3b04 	str.w	r3, [r1], #4
 800aabe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aac2:	d2e6      	bcs.n	800aa92 <quorem+0xa4>
 800aac4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aac8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aacc:	b922      	cbnz	r2, 800aad8 <quorem+0xea>
 800aace:	3b04      	subs	r3, #4
 800aad0:	429d      	cmp	r5, r3
 800aad2:	461a      	mov	r2, r3
 800aad4:	d30b      	bcc.n	800aaee <quorem+0x100>
 800aad6:	613c      	str	r4, [r7, #16]
 800aad8:	3601      	adds	r6, #1
 800aada:	4630      	mov	r0, r6
 800aadc:	b003      	add	sp, #12
 800aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae2:	6812      	ldr	r2, [r2, #0]
 800aae4:	3b04      	subs	r3, #4
 800aae6:	2a00      	cmp	r2, #0
 800aae8:	d1cb      	bne.n	800aa82 <quorem+0x94>
 800aaea:	3c01      	subs	r4, #1
 800aaec:	e7c6      	b.n	800aa7c <quorem+0x8e>
 800aaee:	6812      	ldr	r2, [r2, #0]
 800aaf0:	3b04      	subs	r3, #4
 800aaf2:	2a00      	cmp	r2, #0
 800aaf4:	d1ef      	bne.n	800aad6 <quorem+0xe8>
 800aaf6:	3c01      	subs	r4, #1
 800aaf8:	e7ea      	b.n	800aad0 <quorem+0xe2>
 800aafa:	2000      	movs	r0, #0
 800aafc:	e7ee      	b.n	800aadc <quorem+0xee>
	...

0800ab00 <_dtoa_r>:
 800ab00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab04:	69c7      	ldr	r7, [r0, #28]
 800ab06:	b097      	sub	sp, #92	@ 0x5c
 800ab08:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ab0c:	ec55 4b10 	vmov	r4, r5, d0
 800ab10:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ab12:	9107      	str	r1, [sp, #28]
 800ab14:	4681      	mov	r9, r0
 800ab16:	920c      	str	r2, [sp, #48]	@ 0x30
 800ab18:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab1a:	b97f      	cbnz	r7, 800ab3c <_dtoa_r+0x3c>
 800ab1c:	2010      	movs	r0, #16
 800ab1e:	f000 fe09 	bl	800b734 <malloc>
 800ab22:	4602      	mov	r2, r0
 800ab24:	f8c9 001c 	str.w	r0, [r9, #28]
 800ab28:	b920      	cbnz	r0, 800ab34 <_dtoa_r+0x34>
 800ab2a:	4ba9      	ldr	r3, [pc, #676]	@ (800add0 <_dtoa_r+0x2d0>)
 800ab2c:	21ef      	movs	r1, #239	@ 0xef
 800ab2e:	48a9      	ldr	r0, [pc, #676]	@ (800add4 <_dtoa_r+0x2d4>)
 800ab30:	f001 fcb2 	bl	800c498 <__assert_func>
 800ab34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ab38:	6007      	str	r7, [r0, #0]
 800ab3a:	60c7      	str	r7, [r0, #12]
 800ab3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab40:	6819      	ldr	r1, [r3, #0]
 800ab42:	b159      	cbz	r1, 800ab5c <_dtoa_r+0x5c>
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	604a      	str	r2, [r1, #4]
 800ab48:	2301      	movs	r3, #1
 800ab4a:	4093      	lsls	r3, r2
 800ab4c:	608b      	str	r3, [r1, #8]
 800ab4e:	4648      	mov	r0, r9
 800ab50:	f000 fee6 	bl	800b920 <_Bfree>
 800ab54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	1e2b      	subs	r3, r5, #0
 800ab5e:	bfb9      	ittee	lt
 800ab60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ab64:	9305      	strlt	r3, [sp, #20]
 800ab66:	2300      	movge	r3, #0
 800ab68:	6033      	strge	r3, [r6, #0]
 800ab6a:	9f05      	ldr	r7, [sp, #20]
 800ab6c:	4b9a      	ldr	r3, [pc, #616]	@ (800add8 <_dtoa_r+0x2d8>)
 800ab6e:	bfbc      	itt	lt
 800ab70:	2201      	movlt	r2, #1
 800ab72:	6032      	strlt	r2, [r6, #0]
 800ab74:	43bb      	bics	r3, r7
 800ab76:	d112      	bne.n	800ab9e <_dtoa_r+0x9e>
 800ab78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ab7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ab7e:	6013      	str	r3, [r2, #0]
 800ab80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab84:	4323      	orrs	r3, r4
 800ab86:	f000 855a 	beq.w	800b63e <_dtoa_r+0xb3e>
 800ab8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab8c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800adec <_dtoa_r+0x2ec>
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 855c 	beq.w	800b64e <_dtoa_r+0xb4e>
 800ab96:	f10a 0303 	add.w	r3, sl, #3
 800ab9a:	f000 bd56 	b.w	800b64a <_dtoa_r+0xb4a>
 800ab9e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800aba2:	2200      	movs	r2, #0
 800aba4:	ec51 0b17 	vmov	r0, r1, d7
 800aba8:	2300      	movs	r3, #0
 800abaa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800abae:	f7f5 ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800abb2:	4680      	mov	r8, r0
 800abb4:	b158      	cbz	r0, 800abce <_dtoa_r+0xce>
 800abb6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800abb8:	2301      	movs	r3, #1
 800abba:	6013      	str	r3, [r2, #0]
 800abbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800abbe:	b113      	cbz	r3, 800abc6 <_dtoa_r+0xc6>
 800abc0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800abc2:	4b86      	ldr	r3, [pc, #536]	@ (800addc <_dtoa_r+0x2dc>)
 800abc4:	6013      	str	r3, [r2, #0]
 800abc6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800adf0 <_dtoa_r+0x2f0>
 800abca:	f000 bd40 	b.w	800b64e <_dtoa_r+0xb4e>
 800abce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800abd2:	aa14      	add	r2, sp, #80	@ 0x50
 800abd4:	a915      	add	r1, sp, #84	@ 0x54
 800abd6:	4648      	mov	r0, r9
 800abd8:	f001 f984 	bl	800bee4 <__d2b>
 800abdc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800abe0:	9002      	str	r0, [sp, #8]
 800abe2:	2e00      	cmp	r6, #0
 800abe4:	d078      	beq.n	800acd8 <_dtoa_r+0x1d8>
 800abe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abe8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800abec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abf4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800abf8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800abfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ac00:	4619      	mov	r1, r3
 800ac02:	2200      	movs	r2, #0
 800ac04:	4b76      	ldr	r3, [pc, #472]	@ (800ade0 <_dtoa_r+0x2e0>)
 800ac06:	f7f5 fb3f 	bl	8000288 <__aeabi_dsub>
 800ac0a:	a36b      	add	r3, pc, #428	@ (adr r3, 800adb8 <_dtoa_r+0x2b8>)
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	f7f5 fcf2 	bl	80005f8 <__aeabi_dmul>
 800ac14:	a36a      	add	r3, pc, #424	@ (adr r3, 800adc0 <_dtoa_r+0x2c0>)
 800ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1a:	f7f5 fb37 	bl	800028c <__adddf3>
 800ac1e:	4604      	mov	r4, r0
 800ac20:	4630      	mov	r0, r6
 800ac22:	460d      	mov	r5, r1
 800ac24:	f7f5 fc7e 	bl	8000524 <__aeabi_i2d>
 800ac28:	a367      	add	r3, pc, #412	@ (adr r3, 800adc8 <_dtoa_r+0x2c8>)
 800ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2e:	f7f5 fce3 	bl	80005f8 <__aeabi_dmul>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	4620      	mov	r0, r4
 800ac38:	4629      	mov	r1, r5
 800ac3a:	f7f5 fb27 	bl	800028c <__adddf3>
 800ac3e:	4604      	mov	r4, r0
 800ac40:	460d      	mov	r5, r1
 800ac42:	f7f5 ff89 	bl	8000b58 <__aeabi_d2iz>
 800ac46:	2200      	movs	r2, #0
 800ac48:	4607      	mov	r7, r0
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	4629      	mov	r1, r5
 800ac50:	f7f5 ff44 	bl	8000adc <__aeabi_dcmplt>
 800ac54:	b140      	cbz	r0, 800ac68 <_dtoa_r+0x168>
 800ac56:	4638      	mov	r0, r7
 800ac58:	f7f5 fc64 	bl	8000524 <__aeabi_i2d>
 800ac5c:	4622      	mov	r2, r4
 800ac5e:	462b      	mov	r3, r5
 800ac60:	f7f5 ff32 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac64:	b900      	cbnz	r0, 800ac68 <_dtoa_r+0x168>
 800ac66:	3f01      	subs	r7, #1
 800ac68:	2f16      	cmp	r7, #22
 800ac6a:	d852      	bhi.n	800ad12 <_dtoa_r+0x212>
 800ac6c:	4b5d      	ldr	r3, [pc, #372]	@ (800ade4 <_dtoa_r+0x2e4>)
 800ac6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ac7a:	f7f5 ff2f 	bl	8000adc <__aeabi_dcmplt>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d049      	beq.n	800ad16 <_dtoa_r+0x216>
 800ac82:	3f01      	subs	r7, #1
 800ac84:	2300      	movs	r3, #0
 800ac86:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac8a:	1b9b      	subs	r3, r3, r6
 800ac8c:	1e5a      	subs	r2, r3, #1
 800ac8e:	bf45      	ittet	mi
 800ac90:	f1c3 0301 	rsbmi	r3, r3, #1
 800ac94:	9300      	strmi	r3, [sp, #0]
 800ac96:	2300      	movpl	r3, #0
 800ac98:	2300      	movmi	r3, #0
 800ac9a:	9206      	str	r2, [sp, #24]
 800ac9c:	bf54      	ite	pl
 800ac9e:	9300      	strpl	r3, [sp, #0]
 800aca0:	9306      	strmi	r3, [sp, #24]
 800aca2:	2f00      	cmp	r7, #0
 800aca4:	db39      	blt.n	800ad1a <_dtoa_r+0x21a>
 800aca6:	9b06      	ldr	r3, [sp, #24]
 800aca8:	970d      	str	r7, [sp, #52]	@ 0x34
 800acaa:	443b      	add	r3, r7
 800acac:	9306      	str	r3, [sp, #24]
 800acae:	2300      	movs	r3, #0
 800acb0:	9308      	str	r3, [sp, #32]
 800acb2:	9b07      	ldr	r3, [sp, #28]
 800acb4:	2b09      	cmp	r3, #9
 800acb6:	d863      	bhi.n	800ad80 <_dtoa_r+0x280>
 800acb8:	2b05      	cmp	r3, #5
 800acba:	bfc4      	itt	gt
 800acbc:	3b04      	subgt	r3, #4
 800acbe:	9307      	strgt	r3, [sp, #28]
 800acc0:	9b07      	ldr	r3, [sp, #28]
 800acc2:	f1a3 0302 	sub.w	r3, r3, #2
 800acc6:	bfcc      	ite	gt
 800acc8:	2400      	movgt	r4, #0
 800acca:	2401      	movle	r4, #1
 800accc:	2b03      	cmp	r3, #3
 800acce:	d863      	bhi.n	800ad98 <_dtoa_r+0x298>
 800acd0:	e8df f003 	tbb	[pc, r3]
 800acd4:	2b375452 	.word	0x2b375452
 800acd8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800acdc:	441e      	add	r6, r3
 800acde:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ace2:	2b20      	cmp	r3, #32
 800ace4:	bfc1      	itttt	gt
 800ace6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800acea:	409f      	lslgt	r7, r3
 800acec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800acf0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800acf4:	bfd6      	itet	le
 800acf6:	f1c3 0320 	rsble	r3, r3, #32
 800acfa:	ea47 0003 	orrgt.w	r0, r7, r3
 800acfe:	fa04 f003 	lslle.w	r0, r4, r3
 800ad02:	f7f5 fbff 	bl	8000504 <__aeabi_ui2d>
 800ad06:	2201      	movs	r2, #1
 800ad08:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ad0c:	3e01      	subs	r6, #1
 800ad0e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ad10:	e776      	b.n	800ac00 <_dtoa_r+0x100>
 800ad12:	2301      	movs	r3, #1
 800ad14:	e7b7      	b.n	800ac86 <_dtoa_r+0x186>
 800ad16:	9010      	str	r0, [sp, #64]	@ 0x40
 800ad18:	e7b6      	b.n	800ac88 <_dtoa_r+0x188>
 800ad1a:	9b00      	ldr	r3, [sp, #0]
 800ad1c:	1bdb      	subs	r3, r3, r7
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	427b      	negs	r3, r7
 800ad22:	9308      	str	r3, [sp, #32]
 800ad24:	2300      	movs	r3, #0
 800ad26:	930d      	str	r3, [sp, #52]	@ 0x34
 800ad28:	e7c3      	b.n	800acb2 <_dtoa_r+0x1b2>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad30:	eb07 0b03 	add.w	fp, r7, r3
 800ad34:	f10b 0301 	add.w	r3, fp, #1
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	9303      	str	r3, [sp, #12]
 800ad3c:	bfb8      	it	lt
 800ad3e:	2301      	movlt	r3, #1
 800ad40:	e006      	b.n	800ad50 <_dtoa_r+0x250>
 800ad42:	2301      	movs	r3, #1
 800ad44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	dd28      	ble.n	800ad9e <_dtoa_r+0x29e>
 800ad4c:	469b      	mov	fp, r3
 800ad4e:	9303      	str	r3, [sp, #12]
 800ad50:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ad54:	2100      	movs	r1, #0
 800ad56:	2204      	movs	r2, #4
 800ad58:	f102 0514 	add.w	r5, r2, #20
 800ad5c:	429d      	cmp	r5, r3
 800ad5e:	d926      	bls.n	800adae <_dtoa_r+0x2ae>
 800ad60:	6041      	str	r1, [r0, #4]
 800ad62:	4648      	mov	r0, r9
 800ad64:	f000 fd9c 	bl	800b8a0 <_Balloc>
 800ad68:	4682      	mov	sl, r0
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d142      	bne.n	800adf4 <_dtoa_r+0x2f4>
 800ad6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ade8 <_dtoa_r+0x2e8>)
 800ad70:	4602      	mov	r2, r0
 800ad72:	f240 11af 	movw	r1, #431	@ 0x1af
 800ad76:	e6da      	b.n	800ab2e <_dtoa_r+0x2e>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	e7e3      	b.n	800ad44 <_dtoa_r+0x244>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	e7d5      	b.n	800ad2c <_dtoa_r+0x22c>
 800ad80:	2401      	movs	r4, #1
 800ad82:	2300      	movs	r3, #0
 800ad84:	9307      	str	r3, [sp, #28]
 800ad86:	9409      	str	r4, [sp, #36]	@ 0x24
 800ad88:	f04f 3bff 	mov.w	fp, #4294967295
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad92:	2312      	movs	r3, #18
 800ad94:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad96:	e7db      	b.n	800ad50 <_dtoa_r+0x250>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad9c:	e7f4      	b.n	800ad88 <_dtoa_r+0x288>
 800ad9e:	f04f 0b01 	mov.w	fp, #1
 800ada2:	f8cd b00c 	str.w	fp, [sp, #12]
 800ada6:	465b      	mov	r3, fp
 800ada8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800adac:	e7d0      	b.n	800ad50 <_dtoa_r+0x250>
 800adae:	3101      	adds	r1, #1
 800adb0:	0052      	lsls	r2, r2, #1
 800adb2:	e7d1      	b.n	800ad58 <_dtoa_r+0x258>
 800adb4:	f3af 8000 	nop.w
 800adb8:	636f4361 	.word	0x636f4361
 800adbc:	3fd287a7 	.word	0x3fd287a7
 800adc0:	8b60c8b3 	.word	0x8b60c8b3
 800adc4:	3fc68a28 	.word	0x3fc68a28
 800adc8:	509f79fb 	.word	0x509f79fb
 800adcc:	3fd34413 	.word	0x3fd34413
 800add0:	0800c929 	.word	0x0800c929
 800add4:	0800c940 	.word	0x0800c940
 800add8:	7ff00000 	.word	0x7ff00000
 800addc:	0800c8f9 	.word	0x0800c8f9
 800ade0:	3ff80000 	.word	0x3ff80000
 800ade4:	0800ca90 	.word	0x0800ca90
 800ade8:	0800c998 	.word	0x0800c998
 800adec:	0800c925 	.word	0x0800c925
 800adf0:	0800c8f8 	.word	0x0800c8f8
 800adf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800adf8:	6018      	str	r0, [r3, #0]
 800adfa:	9b03      	ldr	r3, [sp, #12]
 800adfc:	2b0e      	cmp	r3, #14
 800adfe:	f200 80a1 	bhi.w	800af44 <_dtoa_r+0x444>
 800ae02:	2c00      	cmp	r4, #0
 800ae04:	f000 809e 	beq.w	800af44 <_dtoa_r+0x444>
 800ae08:	2f00      	cmp	r7, #0
 800ae0a:	dd33      	ble.n	800ae74 <_dtoa_r+0x374>
 800ae0c:	4b9c      	ldr	r3, [pc, #624]	@ (800b080 <_dtoa_r+0x580>)
 800ae0e:	f007 020f 	and.w	r2, r7, #15
 800ae12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae16:	ed93 7b00 	vldr	d7, [r3]
 800ae1a:	05f8      	lsls	r0, r7, #23
 800ae1c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ae20:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ae24:	d516      	bpl.n	800ae54 <_dtoa_r+0x354>
 800ae26:	4b97      	ldr	r3, [pc, #604]	@ (800b084 <_dtoa_r+0x584>)
 800ae28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae30:	f7f5 fd0c 	bl	800084c <__aeabi_ddiv>
 800ae34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae38:	f004 040f 	and.w	r4, r4, #15
 800ae3c:	2603      	movs	r6, #3
 800ae3e:	4d91      	ldr	r5, [pc, #580]	@ (800b084 <_dtoa_r+0x584>)
 800ae40:	b954      	cbnz	r4, 800ae58 <_dtoa_r+0x358>
 800ae42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae4a:	f7f5 fcff 	bl	800084c <__aeabi_ddiv>
 800ae4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae52:	e028      	b.n	800aea6 <_dtoa_r+0x3a6>
 800ae54:	2602      	movs	r6, #2
 800ae56:	e7f2      	b.n	800ae3e <_dtoa_r+0x33e>
 800ae58:	07e1      	lsls	r1, r4, #31
 800ae5a:	d508      	bpl.n	800ae6e <_dtoa_r+0x36e>
 800ae5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ae60:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae64:	f7f5 fbc8 	bl	80005f8 <__aeabi_dmul>
 800ae68:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ae6c:	3601      	adds	r6, #1
 800ae6e:	1064      	asrs	r4, r4, #1
 800ae70:	3508      	adds	r5, #8
 800ae72:	e7e5      	b.n	800ae40 <_dtoa_r+0x340>
 800ae74:	f000 80af 	beq.w	800afd6 <_dtoa_r+0x4d6>
 800ae78:	427c      	negs	r4, r7
 800ae7a:	4b81      	ldr	r3, [pc, #516]	@ (800b080 <_dtoa_r+0x580>)
 800ae7c:	4d81      	ldr	r5, [pc, #516]	@ (800b084 <_dtoa_r+0x584>)
 800ae7e:	f004 020f 	and.w	r2, r4, #15
 800ae82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae8e:	f7f5 fbb3 	bl	80005f8 <__aeabi_dmul>
 800ae92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae96:	1124      	asrs	r4, r4, #4
 800ae98:	2300      	movs	r3, #0
 800ae9a:	2602      	movs	r6, #2
 800ae9c:	2c00      	cmp	r4, #0
 800ae9e:	f040 808f 	bne.w	800afc0 <_dtoa_r+0x4c0>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1d3      	bne.n	800ae4e <_dtoa_r+0x34e>
 800aea6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aea8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f000 8094 	beq.w	800afda <_dtoa_r+0x4da>
 800aeb2:	4b75      	ldr	r3, [pc, #468]	@ (800b088 <_dtoa_r+0x588>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	4629      	mov	r1, r5
 800aeba:	f7f5 fe0f 	bl	8000adc <__aeabi_dcmplt>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f000 808b 	beq.w	800afda <_dtoa_r+0x4da>
 800aec4:	9b03      	ldr	r3, [sp, #12]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 8087 	beq.w	800afda <_dtoa_r+0x4da>
 800aecc:	f1bb 0f00 	cmp.w	fp, #0
 800aed0:	dd34      	ble.n	800af3c <_dtoa_r+0x43c>
 800aed2:	4620      	mov	r0, r4
 800aed4:	4b6d      	ldr	r3, [pc, #436]	@ (800b08c <_dtoa_r+0x58c>)
 800aed6:	2200      	movs	r2, #0
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7f5 fb8d 	bl	80005f8 <__aeabi_dmul>
 800aede:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aee2:	f107 38ff 	add.w	r8, r7, #4294967295
 800aee6:	3601      	adds	r6, #1
 800aee8:	465c      	mov	r4, fp
 800aeea:	4630      	mov	r0, r6
 800aeec:	f7f5 fb1a 	bl	8000524 <__aeabi_i2d>
 800aef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aef4:	f7f5 fb80 	bl	80005f8 <__aeabi_dmul>
 800aef8:	4b65      	ldr	r3, [pc, #404]	@ (800b090 <_dtoa_r+0x590>)
 800aefa:	2200      	movs	r2, #0
 800aefc:	f7f5 f9c6 	bl	800028c <__adddf3>
 800af00:	4605      	mov	r5, r0
 800af02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800af06:	2c00      	cmp	r4, #0
 800af08:	d16a      	bne.n	800afe0 <_dtoa_r+0x4e0>
 800af0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af0e:	4b61      	ldr	r3, [pc, #388]	@ (800b094 <_dtoa_r+0x594>)
 800af10:	2200      	movs	r2, #0
 800af12:	f7f5 f9b9 	bl	8000288 <__aeabi_dsub>
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af1e:	462a      	mov	r2, r5
 800af20:	4633      	mov	r3, r6
 800af22:	f7f5 fdf9 	bl	8000b18 <__aeabi_dcmpgt>
 800af26:	2800      	cmp	r0, #0
 800af28:	f040 8298 	bne.w	800b45c <_dtoa_r+0x95c>
 800af2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af30:	462a      	mov	r2, r5
 800af32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800af36:	f7f5 fdd1 	bl	8000adc <__aeabi_dcmplt>
 800af3a:	bb38      	cbnz	r0, 800af8c <_dtoa_r+0x48c>
 800af3c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800af40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800af44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800af46:	2b00      	cmp	r3, #0
 800af48:	f2c0 8157 	blt.w	800b1fa <_dtoa_r+0x6fa>
 800af4c:	2f0e      	cmp	r7, #14
 800af4e:	f300 8154 	bgt.w	800b1fa <_dtoa_r+0x6fa>
 800af52:	4b4b      	ldr	r3, [pc, #300]	@ (800b080 <_dtoa_r+0x580>)
 800af54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af58:	ed93 7b00 	vldr	d7, [r3]
 800af5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af5e:	2b00      	cmp	r3, #0
 800af60:	ed8d 7b00 	vstr	d7, [sp]
 800af64:	f280 80e5 	bge.w	800b132 <_dtoa_r+0x632>
 800af68:	9b03      	ldr	r3, [sp, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f300 80e1 	bgt.w	800b132 <_dtoa_r+0x632>
 800af70:	d10c      	bne.n	800af8c <_dtoa_r+0x48c>
 800af72:	4b48      	ldr	r3, [pc, #288]	@ (800b094 <_dtoa_r+0x594>)
 800af74:	2200      	movs	r2, #0
 800af76:	ec51 0b17 	vmov	r0, r1, d7
 800af7a:	f7f5 fb3d 	bl	80005f8 <__aeabi_dmul>
 800af7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af82:	f7f5 fdbf 	bl	8000b04 <__aeabi_dcmpge>
 800af86:	2800      	cmp	r0, #0
 800af88:	f000 8266 	beq.w	800b458 <_dtoa_r+0x958>
 800af8c:	2400      	movs	r4, #0
 800af8e:	4625      	mov	r5, r4
 800af90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af92:	4656      	mov	r6, sl
 800af94:	ea6f 0803 	mvn.w	r8, r3
 800af98:	2700      	movs	r7, #0
 800af9a:	4621      	mov	r1, r4
 800af9c:	4648      	mov	r0, r9
 800af9e:	f000 fcbf 	bl	800b920 <_Bfree>
 800afa2:	2d00      	cmp	r5, #0
 800afa4:	f000 80bd 	beq.w	800b122 <_dtoa_r+0x622>
 800afa8:	b12f      	cbz	r7, 800afb6 <_dtoa_r+0x4b6>
 800afaa:	42af      	cmp	r7, r5
 800afac:	d003      	beq.n	800afb6 <_dtoa_r+0x4b6>
 800afae:	4639      	mov	r1, r7
 800afb0:	4648      	mov	r0, r9
 800afb2:	f000 fcb5 	bl	800b920 <_Bfree>
 800afb6:	4629      	mov	r1, r5
 800afb8:	4648      	mov	r0, r9
 800afba:	f000 fcb1 	bl	800b920 <_Bfree>
 800afbe:	e0b0      	b.n	800b122 <_dtoa_r+0x622>
 800afc0:	07e2      	lsls	r2, r4, #31
 800afc2:	d505      	bpl.n	800afd0 <_dtoa_r+0x4d0>
 800afc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afc8:	f7f5 fb16 	bl	80005f8 <__aeabi_dmul>
 800afcc:	3601      	adds	r6, #1
 800afce:	2301      	movs	r3, #1
 800afd0:	1064      	asrs	r4, r4, #1
 800afd2:	3508      	adds	r5, #8
 800afd4:	e762      	b.n	800ae9c <_dtoa_r+0x39c>
 800afd6:	2602      	movs	r6, #2
 800afd8:	e765      	b.n	800aea6 <_dtoa_r+0x3a6>
 800afda:	9c03      	ldr	r4, [sp, #12]
 800afdc:	46b8      	mov	r8, r7
 800afde:	e784      	b.n	800aeea <_dtoa_r+0x3ea>
 800afe0:	4b27      	ldr	r3, [pc, #156]	@ (800b080 <_dtoa_r+0x580>)
 800afe2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afe4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afe8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800afec:	4454      	add	r4, sl
 800afee:	2900      	cmp	r1, #0
 800aff0:	d054      	beq.n	800b09c <_dtoa_r+0x59c>
 800aff2:	4929      	ldr	r1, [pc, #164]	@ (800b098 <_dtoa_r+0x598>)
 800aff4:	2000      	movs	r0, #0
 800aff6:	f7f5 fc29 	bl	800084c <__aeabi_ddiv>
 800affa:	4633      	mov	r3, r6
 800affc:	462a      	mov	r2, r5
 800affe:	f7f5 f943 	bl	8000288 <__aeabi_dsub>
 800b002:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b006:	4656      	mov	r6, sl
 800b008:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b00c:	f7f5 fda4 	bl	8000b58 <__aeabi_d2iz>
 800b010:	4605      	mov	r5, r0
 800b012:	f7f5 fa87 	bl	8000524 <__aeabi_i2d>
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b01e:	f7f5 f933 	bl	8000288 <__aeabi_dsub>
 800b022:	3530      	adds	r5, #48	@ 0x30
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b02c:	f806 5b01 	strb.w	r5, [r6], #1
 800b030:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b034:	f7f5 fd52 	bl	8000adc <__aeabi_dcmplt>
 800b038:	2800      	cmp	r0, #0
 800b03a:	d172      	bne.n	800b122 <_dtoa_r+0x622>
 800b03c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b040:	4911      	ldr	r1, [pc, #68]	@ (800b088 <_dtoa_r+0x588>)
 800b042:	2000      	movs	r0, #0
 800b044:	f7f5 f920 	bl	8000288 <__aeabi_dsub>
 800b048:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b04c:	f7f5 fd46 	bl	8000adc <__aeabi_dcmplt>
 800b050:	2800      	cmp	r0, #0
 800b052:	f040 80b4 	bne.w	800b1be <_dtoa_r+0x6be>
 800b056:	42a6      	cmp	r6, r4
 800b058:	f43f af70 	beq.w	800af3c <_dtoa_r+0x43c>
 800b05c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b060:	4b0a      	ldr	r3, [pc, #40]	@ (800b08c <_dtoa_r+0x58c>)
 800b062:	2200      	movs	r2, #0
 800b064:	f7f5 fac8 	bl	80005f8 <__aeabi_dmul>
 800b068:	4b08      	ldr	r3, [pc, #32]	@ (800b08c <_dtoa_r+0x58c>)
 800b06a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b06e:	2200      	movs	r2, #0
 800b070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b074:	f7f5 fac0 	bl	80005f8 <__aeabi_dmul>
 800b078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b07c:	e7c4      	b.n	800b008 <_dtoa_r+0x508>
 800b07e:	bf00      	nop
 800b080:	0800ca90 	.word	0x0800ca90
 800b084:	0800ca68 	.word	0x0800ca68
 800b088:	3ff00000 	.word	0x3ff00000
 800b08c:	40240000 	.word	0x40240000
 800b090:	401c0000 	.word	0x401c0000
 800b094:	40140000 	.word	0x40140000
 800b098:	3fe00000 	.word	0x3fe00000
 800b09c:	4631      	mov	r1, r6
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f7f5 faaa 	bl	80005f8 <__aeabi_dmul>
 800b0a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b0a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b0aa:	4656      	mov	r6, sl
 800b0ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0b0:	f7f5 fd52 	bl	8000b58 <__aeabi_d2iz>
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	f7f5 fa35 	bl	8000524 <__aeabi_i2d>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0c2:	f7f5 f8e1 	bl	8000288 <__aeabi_dsub>
 800b0c6:	3530      	adds	r5, #48	@ 0x30
 800b0c8:	f806 5b01 	strb.w	r5, [r6], #1
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	42a6      	cmp	r6, r4
 800b0d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0d6:	f04f 0200 	mov.w	r2, #0
 800b0da:	d124      	bne.n	800b126 <_dtoa_r+0x626>
 800b0dc:	4baf      	ldr	r3, [pc, #700]	@ (800b39c <_dtoa_r+0x89c>)
 800b0de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b0e2:	f7f5 f8d3 	bl	800028c <__adddf3>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0ee:	f7f5 fd13 	bl	8000b18 <__aeabi_dcmpgt>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d163      	bne.n	800b1be <_dtoa_r+0x6be>
 800b0f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b0fa:	49a8      	ldr	r1, [pc, #672]	@ (800b39c <_dtoa_r+0x89c>)
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	f7f5 f8c3 	bl	8000288 <__aeabi_dsub>
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
 800b106:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b10a:	f7f5 fce7 	bl	8000adc <__aeabi_dcmplt>
 800b10e:	2800      	cmp	r0, #0
 800b110:	f43f af14 	beq.w	800af3c <_dtoa_r+0x43c>
 800b114:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b116:	1e73      	subs	r3, r6, #1
 800b118:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b11a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b11e:	2b30      	cmp	r3, #48	@ 0x30
 800b120:	d0f8      	beq.n	800b114 <_dtoa_r+0x614>
 800b122:	4647      	mov	r7, r8
 800b124:	e03b      	b.n	800b19e <_dtoa_r+0x69e>
 800b126:	4b9e      	ldr	r3, [pc, #632]	@ (800b3a0 <_dtoa_r+0x8a0>)
 800b128:	f7f5 fa66 	bl	80005f8 <__aeabi_dmul>
 800b12c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b130:	e7bc      	b.n	800b0ac <_dtoa_r+0x5ac>
 800b132:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b136:	4656      	mov	r6, sl
 800b138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b13c:	4620      	mov	r0, r4
 800b13e:	4629      	mov	r1, r5
 800b140:	f7f5 fb84 	bl	800084c <__aeabi_ddiv>
 800b144:	f7f5 fd08 	bl	8000b58 <__aeabi_d2iz>
 800b148:	4680      	mov	r8, r0
 800b14a:	f7f5 f9eb 	bl	8000524 <__aeabi_i2d>
 800b14e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b152:	f7f5 fa51 	bl	80005f8 <__aeabi_dmul>
 800b156:	4602      	mov	r2, r0
 800b158:	460b      	mov	r3, r1
 800b15a:	4620      	mov	r0, r4
 800b15c:	4629      	mov	r1, r5
 800b15e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b162:	f7f5 f891 	bl	8000288 <__aeabi_dsub>
 800b166:	f806 4b01 	strb.w	r4, [r6], #1
 800b16a:	9d03      	ldr	r5, [sp, #12]
 800b16c:	eba6 040a 	sub.w	r4, r6, sl
 800b170:	42a5      	cmp	r5, r4
 800b172:	4602      	mov	r2, r0
 800b174:	460b      	mov	r3, r1
 800b176:	d133      	bne.n	800b1e0 <_dtoa_r+0x6e0>
 800b178:	f7f5 f888 	bl	800028c <__adddf3>
 800b17c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b180:	4604      	mov	r4, r0
 800b182:	460d      	mov	r5, r1
 800b184:	f7f5 fcc8 	bl	8000b18 <__aeabi_dcmpgt>
 800b188:	b9c0      	cbnz	r0, 800b1bc <_dtoa_r+0x6bc>
 800b18a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b18e:	4620      	mov	r0, r4
 800b190:	4629      	mov	r1, r5
 800b192:	f7f5 fc99 	bl	8000ac8 <__aeabi_dcmpeq>
 800b196:	b110      	cbz	r0, 800b19e <_dtoa_r+0x69e>
 800b198:	f018 0f01 	tst.w	r8, #1
 800b19c:	d10e      	bne.n	800b1bc <_dtoa_r+0x6bc>
 800b19e:	9902      	ldr	r1, [sp, #8]
 800b1a0:	4648      	mov	r0, r9
 800b1a2:	f000 fbbd 	bl	800b920 <_Bfree>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	7033      	strb	r3, [r6, #0]
 800b1aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1ac:	3701      	adds	r7, #1
 800b1ae:	601f      	str	r7, [r3, #0]
 800b1b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f000 824b 	beq.w	800b64e <_dtoa_r+0xb4e>
 800b1b8:	601e      	str	r6, [r3, #0]
 800b1ba:	e248      	b.n	800b64e <_dtoa_r+0xb4e>
 800b1bc:	46b8      	mov	r8, r7
 800b1be:	4633      	mov	r3, r6
 800b1c0:	461e      	mov	r6, r3
 800b1c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1c6:	2a39      	cmp	r2, #57	@ 0x39
 800b1c8:	d106      	bne.n	800b1d8 <_dtoa_r+0x6d8>
 800b1ca:	459a      	cmp	sl, r3
 800b1cc:	d1f8      	bne.n	800b1c0 <_dtoa_r+0x6c0>
 800b1ce:	2230      	movs	r2, #48	@ 0x30
 800b1d0:	f108 0801 	add.w	r8, r8, #1
 800b1d4:	f88a 2000 	strb.w	r2, [sl]
 800b1d8:	781a      	ldrb	r2, [r3, #0]
 800b1da:	3201      	adds	r2, #1
 800b1dc:	701a      	strb	r2, [r3, #0]
 800b1de:	e7a0      	b.n	800b122 <_dtoa_r+0x622>
 800b1e0:	4b6f      	ldr	r3, [pc, #444]	@ (800b3a0 <_dtoa_r+0x8a0>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f7f5 fa08 	bl	80005f8 <__aeabi_dmul>
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	460d      	mov	r5, r1
 800b1f0:	f7f5 fc6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	d09f      	beq.n	800b138 <_dtoa_r+0x638>
 800b1f8:	e7d1      	b.n	800b19e <_dtoa_r+0x69e>
 800b1fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1fc:	2a00      	cmp	r2, #0
 800b1fe:	f000 80ea 	beq.w	800b3d6 <_dtoa_r+0x8d6>
 800b202:	9a07      	ldr	r2, [sp, #28]
 800b204:	2a01      	cmp	r2, #1
 800b206:	f300 80cd 	bgt.w	800b3a4 <_dtoa_r+0x8a4>
 800b20a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b20c:	2a00      	cmp	r2, #0
 800b20e:	f000 80c1 	beq.w	800b394 <_dtoa_r+0x894>
 800b212:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b216:	9c08      	ldr	r4, [sp, #32]
 800b218:	9e00      	ldr	r6, [sp, #0]
 800b21a:	9a00      	ldr	r2, [sp, #0]
 800b21c:	441a      	add	r2, r3
 800b21e:	9200      	str	r2, [sp, #0]
 800b220:	9a06      	ldr	r2, [sp, #24]
 800b222:	2101      	movs	r1, #1
 800b224:	441a      	add	r2, r3
 800b226:	4648      	mov	r0, r9
 800b228:	9206      	str	r2, [sp, #24]
 800b22a:	f000 fc2d 	bl	800ba88 <__i2b>
 800b22e:	4605      	mov	r5, r0
 800b230:	b166      	cbz	r6, 800b24c <_dtoa_r+0x74c>
 800b232:	9b06      	ldr	r3, [sp, #24]
 800b234:	2b00      	cmp	r3, #0
 800b236:	dd09      	ble.n	800b24c <_dtoa_r+0x74c>
 800b238:	42b3      	cmp	r3, r6
 800b23a:	9a00      	ldr	r2, [sp, #0]
 800b23c:	bfa8      	it	ge
 800b23e:	4633      	movge	r3, r6
 800b240:	1ad2      	subs	r2, r2, r3
 800b242:	9200      	str	r2, [sp, #0]
 800b244:	9a06      	ldr	r2, [sp, #24]
 800b246:	1af6      	subs	r6, r6, r3
 800b248:	1ad3      	subs	r3, r2, r3
 800b24a:	9306      	str	r3, [sp, #24]
 800b24c:	9b08      	ldr	r3, [sp, #32]
 800b24e:	b30b      	cbz	r3, 800b294 <_dtoa_r+0x794>
 800b250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b252:	2b00      	cmp	r3, #0
 800b254:	f000 80c6 	beq.w	800b3e4 <_dtoa_r+0x8e4>
 800b258:	2c00      	cmp	r4, #0
 800b25a:	f000 80c0 	beq.w	800b3de <_dtoa_r+0x8de>
 800b25e:	4629      	mov	r1, r5
 800b260:	4622      	mov	r2, r4
 800b262:	4648      	mov	r0, r9
 800b264:	f000 fcc8 	bl	800bbf8 <__pow5mult>
 800b268:	9a02      	ldr	r2, [sp, #8]
 800b26a:	4601      	mov	r1, r0
 800b26c:	4605      	mov	r5, r0
 800b26e:	4648      	mov	r0, r9
 800b270:	f000 fc20 	bl	800bab4 <__multiply>
 800b274:	9902      	ldr	r1, [sp, #8]
 800b276:	4680      	mov	r8, r0
 800b278:	4648      	mov	r0, r9
 800b27a:	f000 fb51 	bl	800b920 <_Bfree>
 800b27e:	9b08      	ldr	r3, [sp, #32]
 800b280:	1b1b      	subs	r3, r3, r4
 800b282:	9308      	str	r3, [sp, #32]
 800b284:	f000 80b1 	beq.w	800b3ea <_dtoa_r+0x8ea>
 800b288:	9a08      	ldr	r2, [sp, #32]
 800b28a:	4641      	mov	r1, r8
 800b28c:	4648      	mov	r0, r9
 800b28e:	f000 fcb3 	bl	800bbf8 <__pow5mult>
 800b292:	9002      	str	r0, [sp, #8]
 800b294:	2101      	movs	r1, #1
 800b296:	4648      	mov	r0, r9
 800b298:	f000 fbf6 	bl	800ba88 <__i2b>
 800b29c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b29e:	4604      	mov	r4, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 81d8 	beq.w	800b656 <_dtoa_r+0xb56>
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	4601      	mov	r1, r0
 800b2aa:	4648      	mov	r0, r9
 800b2ac:	f000 fca4 	bl	800bbf8 <__pow5mult>
 800b2b0:	9b07      	ldr	r3, [sp, #28]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	f300 809f 	bgt.w	800b3f8 <_dtoa_r+0x8f8>
 800b2ba:	9b04      	ldr	r3, [sp, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f040 8097 	bne.w	800b3f0 <_dtoa_r+0x8f0>
 800b2c2:	9b05      	ldr	r3, [sp, #20]
 800b2c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f040 8093 	bne.w	800b3f4 <_dtoa_r+0x8f4>
 800b2ce:	9b05      	ldr	r3, [sp, #20]
 800b2d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2d4:	0d1b      	lsrs	r3, r3, #20
 800b2d6:	051b      	lsls	r3, r3, #20
 800b2d8:	b133      	cbz	r3, 800b2e8 <_dtoa_r+0x7e8>
 800b2da:	9b00      	ldr	r3, [sp, #0]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	9b06      	ldr	r3, [sp, #24]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	9306      	str	r3, [sp, #24]
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	9308      	str	r3, [sp, #32]
 800b2ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 81b8 	beq.w	800b662 <_dtoa_r+0xb62>
 800b2f2:	6923      	ldr	r3, [r4, #16]
 800b2f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2f8:	6918      	ldr	r0, [r3, #16]
 800b2fa:	f000 fb79 	bl	800b9f0 <__hi0bits>
 800b2fe:	f1c0 0020 	rsb	r0, r0, #32
 800b302:	9b06      	ldr	r3, [sp, #24]
 800b304:	4418      	add	r0, r3
 800b306:	f010 001f 	ands.w	r0, r0, #31
 800b30a:	f000 8082 	beq.w	800b412 <_dtoa_r+0x912>
 800b30e:	f1c0 0320 	rsb	r3, r0, #32
 800b312:	2b04      	cmp	r3, #4
 800b314:	dd73      	ble.n	800b3fe <_dtoa_r+0x8fe>
 800b316:	9b00      	ldr	r3, [sp, #0]
 800b318:	f1c0 001c 	rsb	r0, r0, #28
 800b31c:	4403      	add	r3, r0
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	9b06      	ldr	r3, [sp, #24]
 800b322:	4403      	add	r3, r0
 800b324:	4406      	add	r6, r0
 800b326:	9306      	str	r3, [sp, #24]
 800b328:	9b00      	ldr	r3, [sp, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	dd05      	ble.n	800b33a <_dtoa_r+0x83a>
 800b32e:	9902      	ldr	r1, [sp, #8]
 800b330:	461a      	mov	r2, r3
 800b332:	4648      	mov	r0, r9
 800b334:	f000 fcba 	bl	800bcac <__lshift>
 800b338:	9002      	str	r0, [sp, #8]
 800b33a:	9b06      	ldr	r3, [sp, #24]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	dd05      	ble.n	800b34c <_dtoa_r+0x84c>
 800b340:	4621      	mov	r1, r4
 800b342:	461a      	mov	r2, r3
 800b344:	4648      	mov	r0, r9
 800b346:	f000 fcb1 	bl	800bcac <__lshift>
 800b34a:	4604      	mov	r4, r0
 800b34c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d061      	beq.n	800b416 <_dtoa_r+0x916>
 800b352:	9802      	ldr	r0, [sp, #8]
 800b354:	4621      	mov	r1, r4
 800b356:	f000 fd15 	bl	800bd84 <__mcmp>
 800b35a:	2800      	cmp	r0, #0
 800b35c:	da5b      	bge.n	800b416 <_dtoa_r+0x916>
 800b35e:	2300      	movs	r3, #0
 800b360:	9902      	ldr	r1, [sp, #8]
 800b362:	220a      	movs	r2, #10
 800b364:	4648      	mov	r0, r9
 800b366:	f000 fafd 	bl	800b964 <__multadd>
 800b36a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b36c:	9002      	str	r0, [sp, #8]
 800b36e:	f107 38ff 	add.w	r8, r7, #4294967295
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 8177 	beq.w	800b666 <_dtoa_r+0xb66>
 800b378:	4629      	mov	r1, r5
 800b37a:	2300      	movs	r3, #0
 800b37c:	220a      	movs	r2, #10
 800b37e:	4648      	mov	r0, r9
 800b380:	f000 faf0 	bl	800b964 <__multadd>
 800b384:	f1bb 0f00 	cmp.w	fp, #0
 800b388:	4605      	mov	r5, r0
 800b38a:	dc6f      	bgt.n	800b46c <_dtoa_r+0x96c>
 800b38c:	9b07      	ldr	r3, [sp, #28]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	dc49      	bgt.n	800b426 <_dtoa_r+0x926>
 800b392:	e06b      	b.n	800b46c <_dtoa_r+0x96c>
 800b394:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b396:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b39a:	e73c      	b.n	800b216 <_dtoa_r+0x716>
 800b39c:	3fe00000 	.word	0x3fe00000
 800b3a0:	40240000 	.word	0x40240000
 800b3a4:	9b03      	ldr	r3, [sp, #12]
 800b3a6:	1e5c      	subs	r4, r3, #1
 800b3a8:	9b08      	ldr	r3, [sp, #32]
 800b3aa:	42a3      	cmp	r3, r4
 800b3ac:	db09      	blt.n	800b3c2 <_dtoa_r+0x8c2>
 800b3ae:	1b1c      	subs	r4, r3, r4
 800b3b0:	9b03      	ldr	r3, [sp, #12]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f6bf af30 	bge.w	800b218 <_dtoa_r+0x718>
 800b3b8:	9b00      	ldr	r3, [sp, #0]
 800b3ba:	9a03      	ldr	r2, [sp, #12]
 800b3bc:	1a9e      	subs	r6, r3, r2
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e72b      	b.n	800b21a <_dtoa_r+0x71a>
 800b3c2:	9b08      	ldr	r3, [sp, #32]
 800b3c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b3c6:	9408      	str	r4, [sp, #32]
 800b3c8:	1ae3      	subs	r3, r4, r3
 800b3ca:	441a      	add	r2, r3
 800b3cc:	9e00      	ldr	r6, [sp, #0]
 800b3ce:	9b03      	ldr	r3, [sp, #12]
 800b3d0:	920d      	str	r2, [sp, #52]	@ 0x34
 800b3d2:	2400      	movs	r4, #0
 800b3d4:	e721      	b.n	800b21a <_dtoa_r+0x71a>
 800b3d6:	9c08      	ldr	r4, [sp, #32]
 800b3d8:	9e00      	ldr	r6, [sp, #0]
 800b3da:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b3dc:	e728      	b.n	800b230 <_dtoa_r+0x730>
 800b3de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b3e2:	e751      	b.n	800b288 <_dtoa_r+0x788>
 800b3e4:	9a08      	ldr	r2, [sp, #32]
 800b3e6:	9902      	ldr	r1, [sp, #8]
 800b3e8:	e750      	b.n	800b28c <_dtoa_r+0x78c>
 800b3ea:	f8cd 8008 	str.w	r8, [sp, #8]
 800b3ee:	e751      	b.n	800b294 <_dtoa_r+0x794>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	e779      	b.n	800b2e8 <_dtoa_r+0x7e8>
 800b3f4:	9b04      	ldr	r3, [sp, #16]
 800b3f6:	e777      	b.n	800b2e8 <_dtoa_r+0x7e8>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	9308      	str	r3, [sp, #32]
 800b3fc:	e779      	b.n	800b2f2 <_dtoa_r+0x7f2>
 800b3fe:	d093      	beq.n	800b328 <_dtoa_r+0x828>
 800b400:	9a00      	ldr	r2, [sp, #0]
 800b402:	331c      	adds	r3, #28
 800b404:	441a      	add	r2, r3
 800b406:	9200      	str	r2, [sp, #0]
 800b408:	9a06      	ldr	r2, [sp, #24]
 800b40a:	441a      	add	r2, r3
 800b40c:	441e      	add	r6, r3
 800b40e:	9206      	str	r2, [sp, #24]
 800b410:	e78a      	b.n	800b328 <_dtoa_r+0x828>
 800b412:	4603      	mov	r3, r0
 800b414:	e7f4      	b.n	800b400 <_dtoa_r+0x900>
 800b416:	9b03      	ldr	r3, [sp, #12]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	46b8      	mov	r8, r7
 800b41c:	dc20      	bgt.n	800b460 <_dtoa_r+0x960>
 800b41e:	469b      	mov	fp, r3
 800b420:	9b07      	ldr	r3, [sp, #28]
 800b422:	2b02      	cmp	r3, #2
 800b424:	dd1e      	ble.n	800b464 <_dtoa_r+0x964>
 800b426:	f1bb 0f00 	cmp.w	fp, #0
 800b42a:	f47f adb1 	bne.w	800af90 <_dtoa_r+0x490>
 800b42e:	4621      	mov	r1, r4
 800b430:	465b      	mov	r3, fp
 800b432:	2205      	movs	r2, #5
 800b434:	4648      	mov	r0, r9
 800b436:	f000 fa95 	bl	800b964 <__multadd>
 800b43a:	4601      	mov	r1, r0
 800b43c:	4604      	mov	r4, r0
 800b43e:	9802      	ldr	r0, [sp, #8]
 800b440:	f000 fca0 	bl	800bd84 <__mcmp>
 800b444:	2800      	cmp	r0, #0
 800b446:	f77f ada3 	ble.w	800af90 <_dtoa_r+0x490>
 800b44a:	4656      	mov	r6, sl
 800b44c:	2331      	movs	r3, #49	@ 0x31
 800b44e:	f806 3b01 	strb.w	r3, [r6], #1
 800b452:	f108 0801 	add.w	r8, r8, #1
 800b456:	e59f      	b.n	800af98 <_dtoa_r+0x498>
 800b458:	9c03      	ldr	r4, [sp, #12]
 800b45a:	46b8      	mov	r8, r7
 800b45c:	4625      	mov	r5, r4
 800b45e:	e7f4      	b.n	800b44a <_dtoa_r+0x94a>
 800b460:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b466:	2b00      	cmp	r3, #0
 800b468:	f000 8101 	beq.w	800b66e <_dtoa_r+0xb6e>
 800b46c:	2e00      	cmp	r6, #0
 800b46e:	dd05      	ble.n	800b47c <_dtoa_r+0x97c>
 800b470:	4629      	mov	r1, r5
 800b472:	4632      	mov	r2, r6
 800b474:	4648      	mov	r0, r9
 800b476:	f000 fc19 	bl	800bcac <__lshift>
 800b47a:	4605      	mov	r5, r0
 800b47c:	9b08      	ldr	r3, [sp, #32]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d05c      	beq.n	800b53c <_dtoa_r+0xa3c>
 800b482:	6869      	ldr	r1, [r5, #4]
 800b484:	4648      	mov	r0, r9
 800b486:	f000 fa0b 	bl	800b8a0 <_Balloc>
 800b48a:	4606      	mov	r6, r0
 800b48c:	b928      	cbnz	r0, 800b49a <_dtoa_r+0x99a>
 800b48e:	4b82      	ldr	r3, [pc, #520]	@ (800b698 <_dtoa_r+0xb98>)
 800b490:	4602      	mov	r2, r0
 800b492:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b496:	f7ff bb4a 	b.w	800ab2e <_dtoa_r+0x2e>
 800b49a:	692a      	ldr	r2, [r5, #16]
 800b49c:	3202      	adds	r2, #2
 800b49e:	0092      	lsls	r2, r2, #2
 800b4a0:	f105 010c 	add.w	r1, r5, #12
 800b4a4:	300c      	adds	r0, #12
 800b4a6:	f7ff fa94 	bl	800a9d2 <memcpy>
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	4631      	mov	r1, r6
 800b4ae:	4648      	mov	r0, r9
 800b4b0:	f000 fbfc 	bl	800bcac <__lshift>
 800b4b4:	f10a 0301 	add.w	r3, sl, #1
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	eb0a 030b 	add.w	r3, sl, fp
 800b4be:	9308      	str	r3, [sp, #32]
 800b4c0:	9b04      	ldr	r3, [sp, #16]
 800b4c2:	f003 0301 	and.w	r3, r3, #1
 800b4c6:	462f      	mov	r7, r5
 800b4c8:	9306      	str	r3, [sp, #24]
 800b4ca:	4605      	mov	r5, r0
 800b4cc:	9b00      	ldr	r3, [sp, #0]
 800b4ce:	9802      	ldr	r0, [sp, #8]
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	f103 3bff 	add.w	fp, r3, #4294967295
 800b4d6:	f7ff fa8a 	bl	800a9ee <quorem>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	3330      	adds	r3, #48	@ 0x30
 800b4de:	9003      	str	r0, [sp, #12]
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	9802      	ldr	r0, [sp, #8]
 800b4e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4e6:	f000 fc4d 	bl	800bd84 <__mcmp>
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	9004      	str	r0, [sp, #16]
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	4648      	mov	r0, r9
 800b4f2:	f000 fc63 	bl	800bdbc <__mdiff>
 800b4f6:	68c2      	ldr	r2, [r0, #12]
 800b4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	bb02      	cbnz	r2, 800b540 <_dtoa_r+0xa40>
 800b4fe:	4601      	mov	r1, r0
 800b500:	9802      	ldr	r0, [sp, #8]
 800b502:	f000 fc3f 	bl	800bd84 <__mcmp>
 800b506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b508:	4602      	mov	r2, r0
 800b50a:	4631      	mov	r1, r6
 800b50c:	4648      	mov	r0, r9
 800b50e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b510:	9309      	str	r3, [sp, #36]	@ 0x24
 800b512:	f000 fa05 	bl	800b920 <_Bfree>
 800b516:	9b07      	ldr	r3, [sp, #28]
 800b518:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b51a:	9e00      	ldr	r6, [sp, #0]
 800b51c:	ea42 0103 	orr.w	r1, r2, r3
 800b520:	9b06      	ldr	r3, [sp, #24]
 800b522:	4319      	orrs	r1, r3
 800b524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b526:	d10d      	bne.n	800b544 <_dtoa_r+0xa44>
 800b528:	2b39      	cmp	r3, #57	@ 0x39
 800b52a:	d027      	beq.n	800b57c <_dtoa_r+0xa7c>
 800b52c:	9a04      	ldr	r2, [sp, #16]
 800b52e:	2a00      	cmp	r2, #0
 800b530:	dd01      	ble.n	800b536 <_dtoa_r+0xa36>
 800b532:	9b03      	ldr	r3, [sp, #12]
 800b534:	3331      	adds	r3, #49	@ 0x31
 800b536:	f88b 3000 	strb.w	r3, [fp]
 800b53a:	e52e      	b.n	800af9a <_dtoa_r+0x49a>
 800b53c:	4628      	mov	r0, r5
 800b53e:	e7b9      	b.n	800b4b4 <_dtoa_r+0x9b4>
 800b540:	2201      	movs	r2, #1
 800b542:	e7e2      	b.n	800b50a <_dtoa_r+0xa0a>
 800b544:	9904      	ldr	r1, [sp, #16]
 800b546:	2900      	cmp	r1, #0
 800b548:	db04      	blt.n	800b554 <_dtoa_r+0xa54>
 800b54a:	9807      	ldr	r0, [sp, #28]
 800b54c:	4301      	orrs	r1, r0
 800b54e:	9806      	ldr	r0, [sp, #24]
 800b550:	4301      	orrs	r1, r0
 800b552:	d120      	bne.n	800b596 <_dtoa_r+0xa96>
 800b554:	2a00      	cmp	r2, #0
 800b556:	ddee      	ble.n	800b536 <_dtoa_r+0xa36>
 800b558:	9902      	ldr	r1, [sp, #8]
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	2201      	movs	r2, #1
 800b55e:	4648      	mov	r0, r9
 800b560:	f000 fba4 	bl	800bcac <__lshift>
 800b564:	4621      	mov	r1, r4
 800b566:	9002      	str	r0, [sp, #8]
 800b568:	f000 fc0c 	bl	800bd84 <__mcmp>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	9b00      	ldr	r3, [sp, #0]
 800b570:	dc02      	bgt.n	800b578 <_dtoa_r+0xa78>
 800b572:	d1e0      	bne.n	800b536 <_dtoa_r+0xa36>
 800b574:	07da      	lsls	r2, r3, #31
 800b576:	d5de      	bpl.n	800b536 <_dtoa_r+0xa36>
 800b578:	2b39      	cmp	r3, #57	@ 0x39
 800b57a:	d1da      	bne.n	800b532 <_dtoa_r+0xa32>
 800b57c:	2339      	movs	r3, #57	@ 0x39
 800b57e:	f88b 3000 	strb.w	r3, [fp]
 800b582:	4633      	mov	r3, r6
 800b584:	461e      	mov	r6, r3
 800b586:	3b01      	subs	r3, #1
 800b588:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b58c:	2a39      	cmp	r2, #57	@ 0x39
 800b58e:	d04e      	beq.n	800b62e <_dtoa_r+0xb2e>
 800b590:	3201      	adds	r2, #1
 800b592:	701a      	strb	r2, [r3, #0]
 800b594:	e501      	b.n	800af9a <_dtoa_r+0x49a>
 800b596:	2a00      	cmp	r2, #0
 800b598:	dd03      	ble.n	800b5a2 <_dtoa_r+0xaa2>
 800b59a:	2b39      	cmp	r3, #57	@ 0x39
 800b59c:	d0ee      	beq.n	800b57c <_dtoa_r+0xa7c>
 800b59e:	3301      	adds	r3, #1
 800b5a0:	e7c9      	b.n	800b536 <_dtoa_r+0xa36>
 800b5a2:	9a00      	ldr	r2, [sp, #0]
 800b5a4:	9908      	ldr	r1, [sp, #32]
 800b5a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b5aa:	428a      	cmp	r2, r1
 800b5ac:	d028      	beq.n	800b600 <_dtoa_r+0xb00>
 800b5ae:	9902      	ldr	r1, [sp, #8]
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	220a      	movs	r2, #10
 800b5b4:	4648      	mov	r0, r9
 800b5b6:	f000 f9d5 	bl	800b964 <__multadd>
 800b5ba:	42af      	cmp	r7, r5
 800b5bc:	9002      	str	r0, [sp, #8]
 800b5be:	f04f 0300 	mov.w	r3, #0
 800b5c2:	f04f 020a 	mov.w	r2, #10
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	4648      	mov	r0, r9
 800b5ca:	d107      	bne.n	800b5dc <_dtoa_r+0xadc>
 800b5cc:	f000 f9ca 	bl	800b964 <__multadd>
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	9b00      	ldr	r3, [sp, #0]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	e777      	b.n	800b4cc <_dtoa_r+0x9cc>
 800b5dc:	f000 f9c2 	bl	800b964 <__multadd>
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	4607      	mov	r7, r0
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	220a      	movs	r2, #10
 800b5e8:	4648      	mov	r0, r9
 800b5ea:	f000 f9bb 	bl	800b964 <__multadd>
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	e7f0      	b.n	800b5d4 <_dtoa_r+0xad4>
 800b5f2:	f1bb 0f00 	cmp.w	fp, #0
 800b5f6:	bfcc      	ite	gt
 800b5f8:	465e      	movgt	r6, fp
 800b5fa:	2601      	movle	r6, #1
 800b5fc:	4456      	add	r6, sl
 800b5fe:	2700      	movs	r7, #0
 800b600:	9902      	ldr	r1, [sp, #8]
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	2201      	movs	r2, #1
 800b606:	4648      	mov	r0, r9
 800b608:	f000 fb50 	bl	800bcac <__lshift>
 800b60c:	4621      	mov	r1, r4
 800b60e:	9002      	str	r0, [sp, #8]
 800b610:	f000 fbb8 	bl	800bd84 <__mcmp>
 800b614:	2800      	cmp	r0, #0
 800b616:	dcb4      	bgt.n	800b582 <_dtoa_r+0xa82>
 800b618:	d102      	bne.n	800b620 <_dtoa_r+0xb20>
 800b61a:	9b00      	ldr	r3, [sp, #0]
 800b61c:	07db      	lsls	r3, r3, #31
 800b61e:	d4b0      	bmi.n	800b582 <_dtoa_r+0xa82>
 800b620:	4633      	mov	r3, r6
 800b622:	461e      	mov	r6, r3
 800b624:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b628:	2a30      	cmp	r2, #48	@ 0x30
 800b62a:	d0fa      	beq.n	800b622 <_dtoa_r+0xb22>
 800b62c:	e4b5      	b.n	800af9a <_dtoa_r+0x49a>
 800b62e:	459a      	cmp	sl, r3
 800b630:	d1a8      	bne.n	800b584 <_dtoa_r+0xa84>
 800b632:	2331      	movs	r3, #49	@ 0x31
 800b634:	f108 0801 	add.w	r8, r8, #1
 800b638:	f88a 3000 	strb.w	r3, [sl]
 800b63c:	e4ad      	b.n	800af9a <_dtoa_r+0x49a>
 800b63e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b640:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b69c <_dtoa_r+0xb9c>
 800b644:	b11b      	cbz	r3, 800b64e <_dtoa_r+0xb4e>
 800b646:	f10a 0308 	add.w	r3, sl, #8
 800b64a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b64c:	6013      	str	r3, [r2, #0]
 800b64e:	4650      	mov	r0, sl
 800b650:	b017      	add	sp, #92	@ 0x5c
 800b652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b656:	9b07      	ldr	r3, [sp, #28]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	f77f ae2e 	ble.w	800b2ba <_dtoa_r+0x7ba>
 800b65e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b660:	9308      	str	r3, [sp, #32]
 800b662:	2001      	movs	r0, #1
 800b664:	e64d      	b.n	800b302 <_dtoa_r+0x802>
 800b666:	f1bb 0f00 	cmp.w	fp, #0
 800b66a:	f77f aed9 	ble.w	800b420 <_dtoa_r+0x920>
 800b66e:	4656      	mov	r6, sl
 800b670:	9802      	ldr	r0, [sp, #8]
 800b672:	4621      	mov	r1, r4
 800b674:	f7ff f9bb 	bl	800a9ee <quorem>
 800b678:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b67c:	f806 3b01 	strb.w	r3, [r6], #1
 800b680:	eba6 020a 	sub.w	r2, r6, sl
 800b684:	4593      	cmp	fp, r2
 800b686:	ddb4      	ble.n	800b5f2 <_dtoa_r+0xaf2>
 800b688:	9902      	ldr	r1, [sp, #8]
 800b68a:	2300      	movs	r3, #0
 800b68c:	220a      	movs	r2, #10
 800b68e:	4648      	mov	r0, r9
 800b690:	f000 f968 	bl	800b964 <__multadd>
 800b694:	9002      	str	r0, [sp, #8]
 800b696:	e7eb      	b.n	800b670 <_dtoa_r+0xb70>
 800b698:	0800c998 	.word	0x0800c998
 800b69c:	0800c91c 	.word	0x0800c91c

0800b6a0 <_free_r>:
 800b6a0:	b538      	push	{r3, r4, r5, lr}
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	2900      	cmp	r1, #0
 800b6a6:	d041      	beq.n	800b72c <_free_r+0x8c>
 800b6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6ac:	1f0c      	subs	r4, r1, #4
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	bfb8      	it	lt
 800b6b2:	18e4      	addlt	r4, r4, r3
 800b6b4:	f000 f8e8 	bl	800b888 <__malloc_lock>
 800b6b8:	4a1d      	ldr	r2, [pc, #116]	@ (800b730 <_free_r+0x90>)
 800b6ba:	6813      	ldr	r3, [r2, #0]
 800b6bc:	b933      	cbnz	r3, 800b6cc <_free_r+0x2c>
 800b6be:	6063      	str	r3, [r4, #4]
 800b6c0:	6014      	str	r4, [r2, #0]
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6c8:	f000 b8e4 	b.w	800b894 <__malloc_unlock>
 800b6cc:	42a3      	cmp	r3, r4
 800b6ce:	d908      	bls.n	800b6e2 <_free_r+0x42>
 800b6d0:	6820      	ldr	r0, [r4, #0]
 800b6d2:	1821      	adds	r1, r4, r0
 800b6d4:	428b      	cmp	r3, r1
 800b6d6:	bf01      	itttt	eq
 800b6d8:	6819      	ldreq	r1, [r3, #0]
 800b6da:	685b      	ldreq	r3, [r3, #4]
 800b6dc:	1809      	addeq	r1, r1, r0
 800b6de:	6021      	streq	r1, [r4, #0]
 800b6e0:	e7ed      	b.n	800b6be <_free_r+0x1e>
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	b10b      	cbz	r3, 800b6ec <_free_r+0x4c>
 800b6e8:	42a3      	cmp	r3, r4
 800b6ea:	d9fa      	bls.n	800b6e2 <_free_r+0x42>
 800b6ec:	6811      	ldr	r1, [r2, #0]
 800b6ee:	1850      	adds	r0, r2, r1
 800b6f0:	42a0      	cmp	r0, r4
 800b6f2:	d10b      	bne.n	800b70c <_free_r+0x6c>
 800b6f4:	6820      	ldr	r0, [r4, #0]
 800b6f6:	4401      	add	r1, r0
 800b6f8:	1850      	adds	r0, r2, r1
 800b6fa:	4283      	cmp	r3, r0
 800b6fc:	6011      	str	r1, [r2, #0]
 800b6fe:	d1e0      	bne.n	800b6c2 <_free_r+0x22>
 800b700:	6818      	ldr	r0, [r3, #0]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	6053      	str	r3, [r2, #4]
 800b706:	4408      	add	r0, r1
 800b708:	6010      	str	r0, [r2, #0]
 800b70a:	e7da      	b.n	800b6c2 <_free_r+0x22>
 800b70c:	d902      	bls.n	800b714 <_free_r+0x74>
 800b70e:	230c      	movs	r3, #12
 800b710:	602b      	str	r3, [r5, #0]
 800b712:	e7d6      	b.n	800b6c2 <_free_r+0x22>
 800b714:	6820      	ldr	r0, [r4, #0]
 800b716:	1821      	adds	r1, r4, r0
 800b718:	428b      	cmp	r3, r1
 800b71a:	bf04      	itt	eq
 800b71c:	6819      	ldreq	r1, [r3, #0]
 800b71e:	685b      	ldreq	r3, [r3, #4]
 800b720:	6063      	str	r3, [r4, #4]
 800b722:	bf04      	itt	eq
 800b724:	1809      	addeq	r1, r1, r0
 800b726:	6021      	streq	r1, [r4, #0]
 800b728:	6054      	str	r4, [r2, #4]
 800b72a:	e7ca      	b.n	800b6c2 <_free_r+0x22>
 800b72c:	bd38      	pop	{r3, r4, r5, pc}
 800b72e:	bf00      	nop
 800b730:	20003fa8 	.word	0x20003fa8

0800b734 <malloc>:
 800b734:	4b02      	ldr	r3, [pc, #8]	@ (800b740 <malloc+0xc>)
 800b736:	4601      	mov	r1, r0
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	f000 b825 	b.w	800b788 <_malloc_r>
 800b73e:	bf00      	nop
 800b740:	2000001c 	.word	0x2000001c

0800b744 <sbrk_aligned>:
 800b744:	b570      	push	{r4, r5, r6, lr}
 800b746:	4e0f      	ldr	r6, [pc, #60]	@ (800b784 <sbrk_aligned+0x40>)
 800b748:	460c      	mov	r4, r1
 800b74a:	6831      	ldr	r1, [r6, #0]
 800b74c:	4605      	mov	r5, r0
 800b74e:	b911      	cbnz	r1, 800b756 <sbrk_aligned+0x12>
 800b750:	f000 fe92 	bl	800c478 <_sbrk_r>
 800b754:	6030      	str	r0, [r6, #0]
 800b756:	4621      	mov	r1, r4
 800b758:	4628      	mov	r0, r5
 800b75a:	f000 fe8d 	bl	800c478 <_sbrk_r>
 800b75e:	1c43      	adds	r3, r0, #1
 800b760:	d103      	bne.n	800b76a <sbrk_aligned+0x26>
 800b762:	f04f 34ff 	mov.w	r4, #4294967295
 800b766:	4620      	mov	r0, r4
 800b768:	bd70      	pop	{r4, r5, r6, pc}
 800b76a:	1cc4      	adds	r4, r0, #3
 800b76c:	f024 0403 	bic.w	r4, r4, #3
 800b770:	42a0      	cmp	r0, r4
 800b772:	d0f8      	beq.n	800b766 <sbrk_aligned+0x22>
 800b774:	1a21      	subs	r1, r4, r0
 800b776:	4628      	mov	r0, r5
 800b778:	f000 fe7e 	bl	800c478 <_sbrk_r>
 800b77c:	3001      	adds	r0, #1
 800b77e:	d1f2      	bne.n	800b766 <sbrk_aligned+0x22>
 800b780:	e7ef      	b.n	800b762 <sbrk_aligned+0x1e>
 800b782:	bf00      	nop
 800b784:	20003fa4 	.word	0x20003fa4

0800b788 <_malloc_r>:
 800b788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b78c:	1ccd      	adds	r5, r1, #3
 800b78e:	f025 0503 	bic.w	r5, r5, #3
 800b792:	3508      	adds	r5, #8
 800b794:	2d0c      	cmp	r5, #12
 800b796:	bf38      	it	cc
 800b798:	250c      	movcc	r5, #12
 800b79a:	2d00      	cmp	r5, #0
 800b79c:	4606      	mov	r6, r0
 800b79e:	db01      	blt.n	800b7a4 <_malloc_r+0x1c>
 800b7a0:	42a9      	cmp	r1, r5
 800b7a2:	d904      	bls.n	800b7ae <_malloc_r+0x26>
 800b7a4:	230c      	movs	r3, #12
 800b7a6:	6033      	str	r3, [r6, #0]
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b884 <_malloc_r+0xfc>
 800b7b2:	f000 f869 	bl	800b888 <__malloc_lock>
 800b7b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ba:	461c      	mov	r4, r3
 800b7bc:	bb44      	cbnz	r4, 800b810 <_malloc_r+0x88>
 800b7be:	4629      	mov	r1, r5
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f7ff ffbf 	bl	800b744 <sbrk_aligned>
 800b7c6:	1c43      	adds	r3, r0, #1
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	d158      	bne.n	800b87e <_malloc_r+0xf6>
 800b7cc:	f8d8 4000 	ldr.w	r4, [r8]
 800b7d0:	4627      	mov	r7, r4
 800b7d2:	2f00      	cmp	r7, #0
 800b7d4:	d143      	bne.n	800b85e <_malloc_r+0xd6>
 800b7d6:	2c00      	cmp	r4, #0
 800b7d8:	d04b      	beq.n	800b872 <_malloc_r+0xea>
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	4639      	mov	r1, r7
 800b7de:	4630      	mov	r0, r6
 800b7e0:	eb04 0903 	add.w	r9, r4, r3
 800b7e4:	f000 fe48 	bl	800c478 <_sbrk_r>
 800b7e8:	4581      	cmp	r9, r0
 800b7ea:	d142      	bne.n	800b872 <_malloc_r+0xea>
 800b7ec:	6821      	ldr	r1, [r4, #0]
 800b7ee:	1a6d      	subs	r5, r5, r1
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f7ff ffa6 	bl	800b744 <sbrk_aligned>
 800b7f8:	3001      	adds	r0, #1
 800b7fa:	d03a      	beq.n	800b872 <_malloc_r+0xea>
 800b7fc:	6823      	ldr	r3, [r4, #0]
 800b7fe:	442b      	add	r3, r5
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	f8d8 3000 	ldr.w	r3, [r8]
 800b806:	685a      	ldr	r2, [r3, #4]
 800b808:	bb62      	cbnz	r2, 800b864 <_malloc_r+0xdc>
 800b80a:	f8c8 7000 	str.w	r7, [r8]
 800b80e:	e00f      	b.n	800b830 <_malloc_r+0xa8>
 800b810:	6822      	ldr	r2, [r4, #0]
 800b812:	1b52      	subs	r2, r2, r5
 800b814:	d420      	bmi.n	800b858 <_malloc_r+0xd0>
 800b816:	2a0b      	cmp	r2, #11
 800b818:	d917      	bls.n	800b84a <_malloc_r+0xc2>
 800b81a:	1961      	adds	r1, r4, r5
 800b81c:	42a3      	cmp	r3, r4
 800b81e:	6025      	str	r5, [r4, #0]
 800b820:	bf18      	it	ne
 800b822:	6059      	strne	r1, [r3, #4]
 800b824:	6863      	ldr	r3, [r4, #4]
 800b826:	bf08      	it	eq
 800b828:	f8c8 1000 	streq.w	r1, [r8]
 800b82c:	5162      	str	r2, [r4, r5]
 800b82e:	604b      	str	r3, [r1, #4]
 800b830:	4630      	mov	r0, r6
 800b832:	f000 f82f 	bl	800b894 <__malloc_unlock>
 800b836:	f104 000b 	add.w	r0, r4, #11
 800b83a:	1d23      	adds	r3, r4, #4
 800b83c:	f020 0007 	bic.w	r0, r0, #7
 800b840:	1ac2      	subs	r2, r0, r3
 800b842:	bf1c      	itt	ne
 800b844:	1a1b      	subne	r3, r3, r0
 800b846:	50a3      	strne	r3, [r4, r2]
 800b848:	e7af      	b.n	800b7aa <_malloc_r+0x22>
 800b84a:	6862      	ldr	r2, [r4, #4]
 800b84c:	42a3      	cmp	r3, r4
 800b84e:	bf0c      	ite	eq
 800b850:	f8c8 2000 	streq.w	r2, [r8]
 800b854:	605a      	strne	r2, [r3, #4]
 800b856:	e7eb      	b.n	800b830 <_malloc_r+0xa8>
 800b858:	4623      	mov	r3, r4
 800b85a:	6864      	ldr	r4, [r4, #4]
 800b85c:	e7ae      	b.n	800b7bc <_malloc_r+0x34>
 800b85e:	463c      	mov	r4, r7
 800b860:	687f      	ldr	r7, [r7, #4]
 800b862:	e7b6      	b.n	800b7d2 <_malloc_r+0x4a>
 800b864:	461a      	mov	r2, r3
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	42a3      	cmp	r3, r4
 800b86a:	d1fb      	bne.n	800b864 <_malloc_r+0xdc>
 800b86c:	2300      	movs	r3, #0
 800b86e:	6053      	str	r3, [r2, #4]
 800b870:	e7de      	b.n	800b830 <_malloc_r+0xa8>
 800b872:	230c      	movs	r3, #12
 800b874:	6033      	str	r3, [r6, #0]
 800b876:	4630      	mov	r0, r6
 800b878:	f000 f80c 	bl	800b894 <__malloc_unlock>
 800b87c:	e794      	b.n	800b7a8 <_malloc_r+0x20>
 800b87e:	6005      	str	r5, [r0, #0]
 800b880:	e7d6      	b.n	800b830 <_malloc_r+0xa8>
 800b882:	bf00      	nop
 800b884:	20003fa8 	.word	0x20003fa8

0800b888 <__malloc_lock>:
 800b888:	4801      	ldr	r0, [pc, #4]	@ (800b890 <__malloc_lock+0x8>)
 800b88a:	f7ff b8a0 	b.w	800a9ce <__retarget_lock_acquire_recursive>
 800b88e:	bf00      	nop
 800b890:	20003fa0 	.word	0x20003fa0

0800b894 <__malloc_unlock>:
 800b894:	4801      	ldr	r0, [pc, #4]	@ (800b89c <__malloc_unlock+0x8>)
 800b896:	f7ff b89b 	b.w	800a9d0 <__retarget_lock_release_recursive>
 800b89a:	bf00      	nop
 800b89c:	20003fa0 	.word	0x20003fa0

0800b8a0 <_Balloc>:
 800b8a0:	b570      	push	{r4, r5, r6, lr}
 800b8a2:	69c6      	ldr	r6, [r0, #28]
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	460d      	mov	r5, r1
 800b8a8:	b976      	cbnz	r6, 800b8c8 <_Balloc+0x28>
 800b8aa:	2010      	movs	r0, #16
 800b8ac:	f7ff ff42 	bl	800b734 <malloc>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	61e0      	str	r0, [r4, #28]
 800b8b4:	b920      	cbnz	r0, 800b8c0 <_Balloc+0x20>
 800b8b6:	4b18      	ldr	r3, [pc, #96]	@ (800b918 <_Balloc+0x78>)
 800b8b8:	4818      	ldr	r0, [pc, #96]	@ (800b91c <_Balloc+0x7c>)
 800b8ba:	216b      	movs	r1, #107	@ 0x6b
 800b8bc:	f000 fdec 	bl	800c498 <__assert_func>
 800b8c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8c4:	6006      	str	r6, [r0, #0]
 800b8c6:	60c6      	str	r6, [r0, #12]
 800b8c8:	69e6      	ldr	r6, [r4, #28]
 800b8ca:	68f3      	ldr	r3, [r6, #12]
 800b8cc:	b183      	cbz	r3, 800b8f0 <_Balloc+0x50>
 800b8ce:	69e3      	ldr	r3, [r4, #28]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8d6:	b9b8      	cbnz	r0, 800b908 <_Balloc+0x68>
 800b8d8:	2101      	movs	r1, #1
 800b8da:	fa01 f605 	lsl.w	r6, r1, r5
 800b8de:	1d72      	adds	r2, r6, #5
 800b8e0:	0092      	lsls	r2, r2, #2
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f000 fdf6 	bl	800c4d4 <_calloc_r>
 800b8e8:	b160      	cbz	r0, 800b904 <_Balloc+0x64>
 800b8ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8ee:	e00e      	b.n	800b90e <_Balloc+0x6e>
 800b8f0:	2221      	movs	r2, #33	@ 0x21
 800b8f2:	2104      	movs	r1, #4
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f000 fded 	bl	800c4d4 <_calloc_r>
 800b8fa:	69e3      	ldr	r3, [r4, #28]
 800b8fc:	60f0      	str	r0, [r6, #12]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1e4      	bne.n	800b8ce <_Balloc+0x2e>
 800b904:	2000      	movs	r0, #0
 800b906:	bd70      	pop	{r4, r5, r6, pc}
 800b908:	6802      	ldr	r2, [r0, #0]
 800b90a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b90e:	2300      	movs	r3, #0
 800b910:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b914:	e7f7      	b.n	800b906 <_Balloc+0x66>
 800b916:	bf00      	nop
 800b918:	0800c929 	.word	0x0800c929
 800b91c:	0800c9a9 	.word	0x0800c9a9

0800b920 <_Bfree>:
 800b920:	b570      	push	{r4, r5, r6, lr}
 800b922:	69c6      	ldr	r6, [r0, #28]
 800b924:	4605      	mov	r5, r0
 800b926:	460c      	mov	r4, r1
 800b928:	b976      	cbnz	r6, 800b948 <_Bfree+0x28>
 800b92a:	2010      	movs	r0, #16
 800b92c:	f7ff ff02 	bl	800b734 <malloc>
 800b930:	4602      	mov	r2, r0
 800b932:	61e8      	str	r0, [r5, #28]
 800b934:	b920      	cbnz	r0, 800b940 <_Bfree+0x20>
 800b936:	4b09      	ldr	r3, [pc, #36]	@ (800b95c <_Bfree+0x3c>)
 800b938:	4809      	ldr	r0, [pc, #36]	@ (800b960 <_Bfree+0x40>)
 800b93a:	218f      	movs	r1, #143	@ 0x8f
 800b93c:	f000 fdac 	bl	800c498 <__assert_func>
 800b940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b944:	6006      	str	r6, [r0, #0]
 800b946:	60c6      	str	r6, [r0, #12]
 800b948:	b13c      	cbz	r4, 800b95a <_Bfree+0x3a>
 800b94a:	69eb      	ldr	r3, [r5, #28]
 800b94c:	6862      	ldr	r2, [r4, #4]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b954:	6021      	str	r1, [r4, #0]
 800b956:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b95a:	bd70      	pop	{r4, r5, r6, pc}
 800b95c:	0800c929 	.word	0x0800c929
 800b960:	0800c9a9 	.word	0x0800c9a9

0800b964 <__multadd>:
 800b964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b968:	690d      	ldr	r5, [r1, #16]
 800b96a:	4607      	mov	r7, r0
 800b96c:	460c      	mov	r4, r1
 800b96e:	461e      	mov	r6, r3
 800b970:	f101 0c14 	add.w	ip, r1, #20
 800b974:	2000      	movs	r0, #0
 800b976:	f8dc 3000 	ldr.w	r3, [ip]
 800b97a:	b299      	uxth	r1, r3
 800b97c:	fb02 6101 	mla	r1, r2, r1, r6
 800b980:	0c1e      	lsrs	r6, r3, #16
 800b982:	0c0b      	lsrs	r3, r1, #16
 800b984:	fb02 3306 	mla	r3, r2, r6, r3
 800b988:	b289      	uxth	r1, r1
 800b98a:	3001      	adds	r0, #1
 800b98c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b990:	4285      	cmp	r5, r0
 800b992:	f84c 1b04 	str.w	r1, [ip], #4
 800b996:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b99a:	dcec      	bgt.n	800b976 <__multadd+0x12>
 800b99c:	b30e      	cbz	r6, 800b9e2 <__multadd+0x7e>
 800b99e:	68a3      	ldr	r3, [r4, #8]
 800b9a0:	42ab      	cmp	r3, r5
 800b9a2:	dc19      	bgt.n	800b9d8 <__multadd+0x74>
 800b9a4:	6861      	ldr	r1, [r4, #4]
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	3101      	adds	r1, #1
 800b9aa:	f7ff ff79 	bl	800b8a0 <_Balloc>
 800b9ae:	4680      	mov	r8, r0
 800b9b0:	b928      	cbnz	r0, 800b9be <__multadd+0x5a>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b9e8 <__multadd+0x84>)
 800b9b6:	480d      	ldr	r0, [pc, #52]	@ (800b9ec <__multadd+0x88>)
 800b9b8:	21ba      	movs	r1, #186	@ 0xba
 800b9ba:	f000 fd6d 	bl	800c498 <__assert_func>
 800b9be:	6922      	ldr	r2, [r4, #16]
 800b9c0:	3202      	adds	r2, #2
 800b9c2:	f104 010c 	add.w	r1, r4, #12
 800b9c6:	0092      	lsls	r2, r2, #2
 800b9c8:	300c      	adds	r0, #12
 800b9ca:	f7ff f802 	bl	800a9d2 <memcpy>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	f7ff ffa5 	bl	800b920 <_Bfree>
 800b9d6:	4644      	mov	r4, r8
 800b9d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9dc:	3501      	adds	r5, #1
 800b9de:	615e      	str	r6, [r3, #20]
 800b9e0:	6125      	str	r5, [r4, #16]
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e8:	0800c998 	.word	0x0800c998
 800b9ec:	0800c9a9 	.word	0x0800c9a9

0800b9f0 <__hi0bits>:
 800b9f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	bf36      	itet	cc
 800b9f8:	0403      	lslcc	r3, r0, #16
 800b9fa:	2000      	movcs	r0, #0
 800b9fc:	2010      	movcc	r0, #16
 800b9fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba02:	bf3c      	itt	cc
 800ba04:	021b      	lslcc	r3, r3, #8
 800ba06:	3008      	addcc	r0, #8
 800ba08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba0c:	bf3c      	itt	cc
 800ba0e:	011b      	lslcc	r3, r3, #4
 800ba10:	3004      	addcc	r0, #4
 800ba12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba16:	bf3c      	itt	cc
 800ba18:	009b      	lslcc	r3, r3, #2
 800ba1a:	3002      	addcc	r0, #2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	db05      	blt.n	800ba2c <__hi0bits+0x3c>
 800ba20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba24:	f100 0001 	add.w	r0, r0, #1
 800ba28:	bf08      	it	eq
 800ba2a:	2020      	moveq	r0, #32
 800ba2c:	4770      	bx	lr

0800ba2e <__lo0bits>:
 800ba2e:	6803      	ldr	r3, [r0, #0]
 800ba30:	4602      	mov	r2, r0
 800ba32:	f013 0007 	ands.w	r0, r3, #7
 800ba36:	d00b      	beq.n	800ba50 <__lo0bits+0x22>
 800ba38:	07d9      	lsls	r1, r3, #31
 800ba3a:	d421      	bmi.n	800ba80 <__lo0bits+0x52>
 800ba3c:	0798      	lsls	r0, r3, #30
 800ba3e:	bf49      	itett	mi
 800ba40:	085b      	lsrmi	r3, r3, #1
 800ba42:	089b      	lsrpl	r3, r3, #2
 800ba44:	2001      	movmi	r0, #1
 800ba46:	6013      	strmi	r3, [r2, #0]
 800ba48:	bf5c      	itt	pl
 800ba4a:	6013      	strpl	r3, [r2, #0]
 800ba4c:	2002      	movpl	r0, #2
 800ba4e:	4770      	bx	lr
 800ba50:	b299      	uxth	r1, r3
 800ba52:	b909      	cbnz	r1, 800ba58 <__lo0bits+0x2a>
 800ba54:	0c1b      	lsrs	r3, r3, #16
 800ba56:	2010      	movs	r0, #16
 800ba58:	b2d9      	uxtb	r1, r3
 800ba5a:	b909      	cbnz	r1, 800ba60 <__lo0bits+0x32>
 800ba5c:	3008      	adds	r0, #8
 800ba5e:	0a1b      	lsrs	r3, r3, #8
 800ba60:	0719      	lsls	r1, r3, #28
 800ba62:	bf04      	itt	eq
 800ba64:	091b      	lsreq	r3, r3, #4
 800ba66:	3004      	addeq	r0, #4
 800ba68:	0799      	lsls	r1, r3, #30
 800ba6a:	bf04      	itt	eq
 800ba6c:	089b      	lsreq	r3, r3, #2
 800ba6e:	3002      	addeq	r0, #2
 800ba70:	07d9      	lsls	r1, r3, #31
 800ba72:	d403      	bmi.n	800ba7c <__lo0bits+0x4e>
 800ba74:	085b      	lsrs	r3, r3, #1
 800ba76:	f100 0001 	add.w	r0, r0, #1
 800ba7a:	d003      	beq.n	800ba84 <__lo0bits+0x56>
 800ba7c:	6013      	str	r3, [r2, #0]
 800ba7e:	4770      	bx	lr
 800ba80:	2000      	movs	r0, #0
 800ba82:	4770      	bx	lr
 800ba84:	2020      	movs	r0, #32
 800ba86:	4770      	bx	lr

0800ba88 <__i2b>:
 800ba88:	b510      	push	{r4, lr}
 800ba8a:	460c      	mov	r4, r1
 800ba8c:	2101      	movs	r1, #1
 800ba8e:	f7ff ff07 	bl	800b8a0 <_Balloc>
 800ba92:	4602      	mov	r2, r0
 800ba94:	b928      	cbnz	r0, 800baa2 <__i2b+0x1a>
 800ba96:	4b05      	ldr	r3, [pc, #20]	@ (800baac <__i2b+0x24>)
 800ba98:	4805      	ldr	r0, [pc, #20]	@ (800bab0 <__i2b+0x28>)
 800ba9a:	f240 1145 	movw	r1, #325	@ 0x145
 800ba9e:	f000 fcfb 	bl	800c498 <__assert_func>
 800baa2:	2301      	movs	r3, #1
 800baa4:	6144      	str	r4, [r0, #20]
 800baa6:	6103      	str	r3, [r0, #16]
 800baa8:	bd10      	pop	{r4, pc}
 800baaa:	bf00      	nop
 800baac:	0800c998 	.word	0x0800c998
 800bab0:	0800c9a9 	.word	0x0800c9a9

0800bab4 <__multiply>:
 800bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	4617      	mov	r7, r2
 800baba:	690a      	ldr	r2, [r1, #16]
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	429a      	cmp	r2, r3
 800bac0:	bfa8      	it	ge
 800bac2:	463b      	movge	r3, r7
 800bac4:	4689      	mov	r9, r1
 800bac6:	bfa4      	itt	ge
 800bac8:	460f      	movge	r7, r1
 800baca:	4699      	movge	r9, r3
 800bacc:	693d      	ldr	r5, [r7, #16]
 800bace:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	6879      	ldr	r1, [r7, #4]
 800bad6:	eb05 060a 	add.w	r6, r5, sl
 800bada:	42b3      	cmp	r3, r6
 800badc:	b085      	sub	sp, #20
 800bade:	bfb8      	it	lt
 800bae0:	3101      	addlt	r1, #1
 800bae2:	f7ff fedd 	bl	800b8a0 <_Balloc>
 800bae6:	b930      	cbnz	r0, 800baf6 <__multiply+0x42>
 800bae8:	4602      	mov	r2, r0
 800baea:	4b41      	ldr	r3, [pc, #260]	@ (800bbf0 <__multiply+0x13c>)
 800baec:	4841      	ldr	r0, [pc, #260]	@ (800bbf4 <__multiply+0x140>)
 800baee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800baf2:	f000 fcd1 	bl	800c498 <__assert_func>
 800baf6:	f100 0414 	add.w	r4, r0, #20
 800bafa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bafe:	4623      	mov	r3, r4
 800bb00:	2200      	movs	r2, #0
 800bb02:	4573      	cmp	r3, lr
 800bb04:	d320      	bcc.n	800bb48 <__multiply+0x94>
 800bb06:	f107 0814 	add.w	r8, r7, #20
 800bb0a:	f109 0114 	add.w	r1, r9, #20
 800bb0e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bb12:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bb16:	9302      	str	r3, [sp, #8]
 800bb18:	1beb      	subs	r3, r5, r7
 800bb1a:	3b15      	subs	r3, #21
 800bb1c:	f023 0303 	bic.w	r3, r3, #3
 800bb20:	3304      	adds	r3, #4
 800bb22:	3715      	adds	r7, #21
 800bb24:	42bd      	cmp	r5, r7
 800bb26:	bf38      	it	cc
 800bb28:	2304      	movcc	r3, #4
 800bb2a:	9301      	str	r3, [sp, #4]
 800bb2c:	9b02      	ldr	r3, [sp, #8]
 800bb2e:	9103      	str	r1, [sp, #12]
 800bb30:	428b      	cmp	r3, r1
 800bb32:	d80c      	bhi.n	800bb4e <__multiply+0x9a>
 800bb34:	2e00      	cmp	r6, #0
 800bb36:	dd03      	ble.n	800bb40 <__multiply+0x8c>
 800bb38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d055      	beq.n	800bbec <__multiply+0x138>
 800bb40:	6106      	str	r6, [r0, #16]
 800bb42:	b005      	add	sp, #20
 800bb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb48:	f843 2b04 	str.w	r2, [r3], #4
 800bb4c:	e7d9      	b.n	800bb02 <__multiply+0x4e>
 800bb4e:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb52:	f1ba 0f00 	cmp.w	sl, #0
 800bb56:	d01f      	beq.n	800bb98 <__multiply+0xe4>
 800bb58:	46c4      	mov	ip, r8
 800bb5a:	46a1      	mov	r9, r4
 800bb5c:	2700      	movs	r7, #0
 800bb5e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb62:	f8d9 3000 	ldr.w	r3, [r9]
 800bb66:	fa1f fb82 	uxth.w	fp, r2
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb70:	443b      	add	r3, r7
 800bb72:	f8d9 7000 	ldr.w	r7, [r9]
 800bb76:	0c12      	lsrs	r2, r2, #16
 800bb78:	0c3f      	lsrs	r7, r7, #16
 800bb7a:	fb0a 7202 	mla	r2, sl, r2, r7
 800bb7e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb88:	4565      	cmp	r5, ip
 800bb8a:	f849 3b04 	str.w	r3, [r9], #4
 800bb8e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bb92:	d8e4      	bhi.n	800bb5e <__multiply+0xaa>
 800bb94:	9b01      	ldr	r3, [sp, #4]
 800bb96:	50e7      	str	r7, [r4, r3]
 800bb98:	9b03      	ldr	r3, [sp, #12]
 800bb9a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb9e:	3104      	adds	r1, #4
 800bba0:	f1b9 0f00 	cmp.w	r9, #0
 800bba4:	d020      	beq.n	800bbe8 <__multiply+0x134>
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	4647      	mov	r7, r8
 800bbaa:	46a4      	mov	ip, r4
 800bbac:	f04f 0a00 	mov.w	sl, #0
 800bbb0:	f8b7 b000 	ldrh.w	fp, [r7]
 800bbb4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bbb8:	fb09 220b 	mla	r2, r9, fp, r2
 800bbbc:	4452      	add	r2, sl
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbc4:	f84c 3b04 	str.w	r3, [ip], #4
 800bbc8:	f857 3b04 	ldr.w	r3, [r7], #4
 800bbcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbd0:	f8bc 3000 	ldrh.w	r3, [ip]
 800bbd4:	fb09 330a 	mla	r3, r9, sl, r3
 800bbd8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bbdc:	42bd      	cmp	r5, r7
 800bbde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbe2:	d8e5      	bhi.n	800bbb0 <__multiply+0xfc>
 800bbe4:	9a01      	ldr	r2, [sp, #4]
 800bbe6:	50a3      	str	r3, [r4, r2]
 800bbe8:	3404      	adds	r4, #4
 800bbea:	e79f      	b.n	800bb2c <__multiply+0x78>
 800bbec:	3e01      	subs	r6, #1
 800bbee:	e7a1      	b.n	800bb34 <__multiply+0x80>
 800bbf0:	0800c998 	.word	0x0800c998
 800bbf4:	0800c9a9 	.word	0x0800c9a9

0800bbf8 <__pow5mult>:
 800bbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbfc:	4615      	mov	r5, r2
 800bbfe:	f012 0203 	ands.w	r2, r2, #3
 800bc02:	4607      	mov	r7, r0
 800bc04:	460e      	mov	r6, r1
 800bc06:	d007      	beq.n	800bc18 <__pow5mult+0x20>
 800bc08:	4c25      	ldr	r4, [pc, #148]	@ (800bca0 <__pow5mult+0xa8>)
 800bc0a:	3a01      	subs	r2, #1
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc12:	f7ff fea7 	bl	800b964 <__multadd>
 800bc16:	4606      	mov	r6, r0
 800bc18:	10ad      	asrs	r5, r5, #2
 800bc1a:	d03d      	beq.n	800bc98 <__pow5mult+0xa0>
 800bc1c:	69fc      	ldr	r4, [r7, #28]
 800bc1e:	b97c      	cbnz	r4, 800bc40 <__pow5mult+0x48>
 800bc20:	2010      	movs	r0, #16
 800bc22:	f7ff fd87 	bl	800b734 <malloc>
 800bc26:	4602      	mov	r2, r0
 800bc28:	61f8      	str	r0, [r7, #28]
 800bc2a:	b928      	cbnz	r0, 800bc38 <__pow5mult+0x40>
 800bc2c:	4b1d      	ldr	r3, [pc, #116]	@ (800bca4 <__pow5mult+0xac>)
 800bc2e:	481e      	ldr	r0, [pc, #120]	@ (800bca8 <__pow5mult+0xb0>)
 800bc30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc34:	f000 fc30 	bl	800c498 <__assert_func>
 800bc38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc3c:	6004      	str	r4, [r0, #0]
 800bc3e:	60c4      	str	r4, [r0, #12]
 800bc40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc48:	b94c      	cbnz	r4, 800bc5e <__pow5mult+0x66>
 800bc4a:	f240 2171 	movw	r1, #625	@ 0x271
 800bc4e:	4638      	mov	r0, r7
 800bc50:	f7ff ff1a 	bl	800ba88 <__i2b>
 800bc54:	2300      	movs	r3, #0
 800bc56:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	6003      	str	r3, [r0, #0]
 800bc5e:	f04f 0900 	mov.w	r9, #0
 800bc62:	07eb      	lsls	r3, r5, #31
 800bc64:	d50a      	bpl.n	800bc7c <__pow5mult+0x84>
 800bc66:	4631      	mov	r1, r6
 800bc68:	4622      	mov	r2, r4
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	f7ff ff22 	bl	800bab4 <__multiply>
 800bc70:	4631      	mov	r1, r6
 800bc72:	4680      	mov	r8, r0
 800bc74:	4638      	mov	r0, r7
 800bc76:	f7ff fe53 	bl	800b920 <_Bfree>
 800bc7a:	4646      	mov	r6, r8
 800bc7c:	106d      	asrs	r5, r5, #1
 800bc7e:	d00b      	beq.n	800bc98 <__pow5mult+0xa0>
 800bc80:	6820      	ldr	r0, [r4, #0]
 800bc82:	b938      	cbnz	r0, 800bc94 <__pow5mult+0x9c>
 800bc84:	4622      	mov	r2, r4
 800bc86:	4621      	mov	r1, r4
 800bc88:	4638      	mov	r0, r7
 800bc8a:	f7ff ff13 	bl	800bab4 <__multiply>
 800bc8e:	6020      	str	r0, [r4, #0]
 800bc90:	f8c0 9000 	str.w	r9, [r0]
 800bc94:	4604      	mov	r4, r0
 800bc96:	e7e4      	b.n	800bc62 <__pow5mult+0x6a>
 800bc98:	4630      	mov	r0, r6
 800bc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc9e:	bf00      	nop
 800bca0:	0800ca5c 	.word	0x0800ca5c
 800bca4:	0800c929 	.word	0x0800c929
 800bca8:	0800c9a9 	.word	0x0800c9a9

0800bcac <__lshift>:
 800bcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb0:	460c      	mov	r4, r1
 800bcb2:	6849      	ldr	r1, [r1, #4]
 800bcb4:	6923      	ldr	r3, [r4, #16]
 800bcb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcba:	68a3      	ldr	r3, [r4, #8]
 800bcbc:	4607      	mov	r7, r0
 800bcbe:	4691      	mov	r9, r2
 800bcc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcc4:	f108 0601 	add.w	r6, r8, #1
 800bcc8:	42b3      	cmp	r3, r6
 800bcca:	db0b      	blt.n	800bce4 <__lshift+0x38>
 800bccc:	4638      	mov	r0, r7
 800bcce:	f7ff fde7 	bl	800b8a0 <_Balloc>
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	b948      	cbnz	r0, 800bcea <__lshift+0x3e>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	4b28      	ldr	r3, [pc, #160]	@ (800bd7c <__lshift+0xd0>)
 800bcda:	4829      	ldr	r0, [pc, #164]	@ (800bd80 <__lshift+0xd4>)
 800bcdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bce0:	f000 fbda 	bl	800c498 <__assert_func>
 800bce4:	3101      	adds	r1, #1
 800bce6:	005b      	lsls	r3, r3, #1
 800bce8:	e7ee      	b.n	800bcc8 <__lshift+0x1c>
 800bcea:	2300      	movs	r3, #0
 800bcec:	f100 0114 	add.w	r1, r0, #20
 800bcf0:	f100 0210 	add.w	r2, r0, #16
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	4553      	cmp	r3, sl
 800bcf8:	db33      	blt.n	800bd62 <__lshift+0xb6>
 800bcfa:	6920      	ldr	r0, [r4, #16]
 800bcfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd00:	f104 0314 	add.w	r3, r4, #20
 800bd04:	f019 091f 	ands.w	r9, r9, #31
 800bd08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd10:	d02b      	beq.n	800bd6a <__lshift+0xbe>
 800bd12:	f1c9 0e20 	rsb	lr, r9, #32
 800bd16:	468a      	mov	sl, r1
 800bd18:	2200      	movs	r2, #0
 800bd1a:	6818      	ldr	r0, [r3, #0]
 800bd1c:	fa00 f009 	lsl.w	r0, r0, r9
 800bd20:	4310      	orrs	r0, r2
 800bd22:	f84a 0b04 	str.w	r0, [sl], #4
 800bd26:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd2a:	459c      	cmp	ip, r3
 800bd2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd30:	d8f3      	bhi.n	800bd1a <__lshift+0x6e>
 800bd32:	ebac 0304 	sub.w	r3, ip, r4
 800bd36:	3b15      	subs	r3, #21
 800bd38:	f023 0303 	bic.w	r3, r3, #3
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	f104 0015 	add.w	r0, r4, #21
 800bd42:	4560      	cmp	r0, ip
 800bd44:	bf88      	it	hi
 800bd46:	2304      	movhi	r3, #4
 800bd48:	50ca      	str	r2, [r1, r3]
 800bd4a:	b10a      	cbz	r2, 800bd50 <__lshift+0xa4>
 800bd4c:	f108 0602 	add.w	r6, r8, #2
 800bd50:	3e01      	subs	r6, #1
 800bd52:	4638      	mov	r0, r7
 800bd54:	612e      	str	r6, [r5, #16]
 800bd56:	4621      	mov	r1, r4
 800bd58:	f7ff fde2 	bl	800b920 <_Bfree>
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd62:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd66:	3301      	adds	r3, #1
 800bd68:	e7c5      	b.n	800bcf6 <__lshift+0x4a>
 800bd6a:	3904      	subs	r1, #4
 800bd6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd70:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd74:	459c      	cmp	ip, r3
 800bd76:	d8f9      	bhi.n	800bd6c <__lshift+0xc0>
 800bd78:	e7ea      	b.n	800bd50 <__lshift+0xa4>
 800bd7a:	bf00      	nop
 800bd7c:	0800c998 	.word	0x0800c998
 800bd80:	0800c9a9 	.word	0x0800c9a9

0800bd84 <__mcmp>:
 800bd84:	690a      	ldr	r2, [r1, #16]
 800bd86:	4603      	mov	r3, r0
 800bd88:	6900      	ldr	r0, [r0, #16]
 800bd8a:	1a80      	subs	r0, r0, r2
 800bd8c:	b530      	push	{r4, r5, lr}
 800bd8e:	d10e      	bne.n	800bdae <__mcmp+0x2a>
 800bd90:	3314      	adds	r3, #20
 800bd92:	3114      	adds	r1, #20
 800bd94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bda0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bda4:	4295      	cmp	r5, r2
 800bda6:	d003      	beq.n	800bdb0 <__mcmp+0x2c>
 800bda8:	d205      	bcs.n	800bdb6 <__mcmp+0x32>
 800bdaa:	f04f 30ff 	mov.w	r0, #4294967295
 800bdae:	bd30      	pop	{r4, r5, pc}
 800bdb0:	42a3      	cmp	r3, r4
 800bdb2:	d3f3      	bcc.n	800bd9c <__mcmp+0x18>
 800bdb4:	e7fb      	b.n	800bdae <__mcmp+0x2a>
 800bdb6:	2001      	movs	r0, #1
 800bdb8:	e7f9      	b.n	800bdae <__mcmp+0x2a>
	...

0800bdbc <__mdiff>:
 800bdbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc0:	4689      	mov	r9, r1
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	4648      	mov	r0, r9
 800bdc8:	4614      	mov	r4, r2
 800bdca:	f7ff ffdb 	bl	800bd84 <__mcmp>
 800bdce:	1e05      	subs	r5, r0, #0
 800bdd0:	d112      	bne.n	800bdf8 <__mdiff+0x3c>
 800bdd2:	4629      	mov	r1, r5
 800bdd4:	4630      	mov	r0, r6
 800bdd6:	f7ff fd63 	bl	800b8a0 <_Balloc>
 800bdda:	4602      	mov	r2, r0
 800bddc:	b928      	cbnz	r0, 800bdea <__mdiff+0x2e>
 800bdde:	4b3f      	ldr	r3, [pc, #252]	@ (800bedc <__mdiff+0x120>)
 800bde0:	f240 2137 	movw	r1, #567	@ 0x237
 800bde4:	483e      	ldr	r0, [pc, #248]	@ (800bee0 <__mdiff+0x124>)
 800bde6:	f000 fb57 	bl	800c498 <__assert_func>
 800bdea:	2301      	movs	r3, #1
 800bdec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	b003      	add	sp, #12
 800bdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf8:	bfbc      	itt	lt
 800bdfa:	464b      	movlt	r3, r9
 800bdfc:	46a1      	movlt	r9, r4
 800bdfe:	4630      	mov	r0, r6
 800be00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800be04:	bfba      	itte	lt
 800be06:	461c      	movlt	r4, r3
 800be08:	2501      	movlt	r5, #1
 800be0a:	2500      	movge	r5, #0
 800be0c:	f7ff fd48 	bl	800b8a0 <_Balloc>
 800be10:	4602      	mov	r2, r0
 800be12:	b918      	cbnz	r0, 800be1c <__mdiff+0x60>
 800be14:	4b31      	ldr	r3, [pc, #196]	@ (800bedc <__mdiff+0x120>)
 800be16:	f240 2145 	movw	r1, #581	@ 0x245
 800be1a:	e7e3      	b.n	800bde4 <__mdiff+0x28>
 800be1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be20:	6926      	ldr	r6, [r4, #16]
 800be22:	60c5      	str	r5, [r0, #12]
 800be24:	f109 0310 	add.w	r3, r9, #16
 800be28:	f109 0514 	add.w	r5, r9, #20
 800be2c:	f104 0e14 	add.w	lr, r4, #20
 800be30:	f100 0b14 	add.w	fp, r0, #20
 800be34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be3c:	9301      	str	r3, [sp, #4]
 800be3e:	46d9      	mov	r9, fp
 800be40:	f04f 0c00 	mov.w	ip, #0
 800be44:	9b01      	ldr	r3, [sp, #4]
 800be46:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be4e:	9301      	str	r3, [sp, #4]
 800be50:	fa1f f38a 	uxth.w	r3, sl
 800be54:	4619      	mov	r1, r3
 800be56:	b283      	uxth	r3, r0
 800be58:	1acb      	subs	r3, r1, r3
 800be5a:	0c00      	lsrs	r0, r0, #16
 800be5c:	4463      	add	r3, ip
 800be5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be66:	b29b      	uxth	r3, r3
 800be68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be6c:	4576      	cmp	r6, lr
 800be6e:	f849 3b04 	str.w	r3, [r9], #4
 800be72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be76:	d8e5      	bhi.n	800be44 <__mdiff+0x88>
 800be78:	1b33      	subs	r3, r6, r4
 800be7a:	3b15      	subs	r3, #21
 800be7c:	f023 0303 	bic.w	r3, r3, #3
 800be80:	3415      	adds	r4, #21
 800be82:	3304      	adds	r3, #4
 800be84:	42a6      	cmp	r6, r4
 800be86:	bf38      	it	cc
 800be88:	2304      	movcc	r3, #4
 800be8a:	441d      	add	r5, r3
 800be8c:	445b      	add	r3, fp
 800be8e:	461e      	mov	r6, r3
 800be90:	462c      	mov	r4, r5
 800be92:	4544      	cmp	r4, r8
 800be94:	d30e      	bcc.n	800beb4 <__mdiff+0xf8>
 800be96:	f108 0103 	add.w	r1, r8, #3
 800be9a:	1b49      	subs	r1, r1, r5
 800be9c:	f021 0103 	bic.w	r1, r1, #3
 800bea0:	3d03      	subs	r5, #3
 800bea2:	45a8      	cmp	r8, r5
 800bea4:	bf38      	it	cc
 800bea6:	2100      	movcc	r1, #0
 800bea8:	440b      	add	r3, r1
 800beaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800beae:	b191      	cbz	r1, 800bed6 <__mdiff+0x11a>
 800beb0:	6117      	str	r7, [r2, #16]
 800beb2:	e79d      	b.n	800bdf0 <__mdiff+0x34>
 800beb4:	f854 1b04 	ldr.w	r1, [r4], #4
 800beb8:	46e6      	mov	lr, ip
 800beba:	0c08      	lsrs	r0, r1, #16
 800bebc:	fa1c fc81 	uxtah	ip, ip, r1
 800bec0:	4471      	add	r1, lr
 800bec2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bec6:	b289      	uxth	r1, r1
 800bec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800becc:	f846 1b04 	str.w	r1, [r6], #4
 800bed0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bed4:	e7dd      	b.n	800be92 <__mdiff+0xd6>
 800bed6:	3f01      	subs	r7, #1
 800bed8:	e7e7      	b.n	800beaa <__mdiff+0xee>
 800beda:	bf00      	nop
 800bedc:	0800c998 	.word	0x0800c998
 800bee0:	0800c9a9 	.word	0x0800c9a9

0800bee4 <__d2b>:
 800bee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bee8:	460f      	mov	r7, r1
 800beea:	2101      	movs	r1, #1
 800beec:	ec59 8b10 	vmov	r8, r9, d0
 800bef0:	4616      	mov	r6, r2
 800bef2:	f7ff fcd5 	bl	800b8a0 <_Balloc>
 800bef6:	4604      	mov	r4, r0
 800bef8:	b930      	cbnz	r0, 800bf08 <__d2b+0x24>
 800befa:	4602      	mov	r2, r0
 800befc:	4b23      	ldr	r3, [pc, #140]	@ (800bf8c <__d2b+0xa8>)
 800befe:	4824      	ldr	r0, [pc, #144]	@ (800bf90 <__d2b+0xac>)
 800bf00:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf04:	f000 fac8 	bl	800c498 <__assert_func>
 800bf08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf10:	b10d      	cbz	r5, 800bf16 <__d2b+0x32>
 800bf12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf16:	9301      	str	r3, [sp, #4]
 800bf18:	f1b8 0300 	subs.w	r3, r8, #0
 800bf1c:	d023      	beq.n	800bf66 <__d2b+0x82>
 800bf1e:	4668      	mov	r0, sp
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	f7ff fd84 	bl	800ba2e <__lo0bits>
 800bf26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf2a:	b1d0      	cbz	r0, 800bf62 <__d2b+0x7e>
 800bf2c:	f1c0 0320 	rsb	r3, r0, #32
 800bf30:	fa02 f303 	lsl.w	r3, r2, r3
 800bf34:	430b      	orrs	r3, r1
 800bf36:	40c2      	lsrs	r2, r0
 800bf38:	6163      	str	r3, [r4, #20]
 800bf3a:	9201      	str	r2, [sp, #4]
 800bf3c:	9b01      	ldr	r3, [sp, #4]
 800bf3e:	61a3      	str	r3, [r4, #24]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	bf0c      	ite	eq
 800bf44:	2201      	moveq	r2, #1
 800bf46:	2202      	movne	r2, #2
 800bf48:	6122      	str	r2, [r4, #16]
 800bf4a:	b1a5      	cbz	r5, 800bf76 <__d2b+0x92>
 800bf4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf50:	4405      	add	r5, r0
 800bf52:	603d      	str	r5, [r7, #0]
 800bf54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf58:	6030      	str	r0, [r6, #0]
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	b003      	add	sp, #12
 800bf5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf62:	6161      	str	r1, [r4, #20]
 800bf64:	e7ea      	b.n	800bf3c <__d2b+0x58>
 800bf66:	a801      	add	r0, sp, #4
 800bf68:	f7ff fd61 	bl	800ba2e <__lo0bits>
 800bf6c:	9b01      	ldr	r3, [sp, #4]
 800bf6e:	6163      	str	r3, [r4, #20]
 800bf70:	3020      	adds	r0, #32
 800bf72:	2201      	movs	r2, #1
 800bf74:	e7e8      	b.n	800bf48 <__d2b+0x64>
 800bf76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf7e:	6038      	str	r0, [r7, #0]
 800bf80:	6918      	ldr	r0, [r3, #16]
 800bf82:	f7ff fd35 	bl	800b9f0 <__hi0bits>
 800bf86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf8a:	e7e5      	b.n	800bf58 <__d2b+0x74>
 800bf8c:	0800c998 	.word	0x0800c998
 800bf90:	0800c9a9 	.word	0x0800c9a9

0800bf94 <__sfputc_r>:
 800bf94:	6893      	ldr	r3, [r2, #8]
 800bf96:	3b01      	subs	r3, #1
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	b410      	push	{r4}
 800bf9c:	6093      	str	r3, [r2, #8]
 800bf9e:	da08      	bge.n	800bfb2 <__sfputc_r+0x1e>
 800bfa0:	6994      	ldr	r4, [r2, #24]
 800bfa2:	42a3      	cmp	r3, r4
 800bfa4:	db01      	blt.n	800bfaa <__sfputc_r+0x16>
 800bfa6:	290a      	cmp	r1, #10
 800bfa8:	d103      	bne.n	800bfb2 <__sfputc_r+0x1e>
 800bfaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfae:	f7fe bb9e 	b.w	800a6ee <__swbuf_r>
 800bfb2:	6813      	ldr	r3, [r2, #0]
 800bfb4:	1c58      	adds	r0, r3, #1
 800bfb6:	6010      	str	r0, [r2, #0]
 800bfb8:	7019      	strb	r1, [r3, #0]
 800bfba:	4608      	mov	r0, r1
 800bfbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <__sfputs_r>:
 800bfc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc4:	4606      	mov	r6, r0
 800bfc6:	460f      	mov	r7, r1
 800bfc8:	4614      	mov	r4, r2
 800bfca:	18d5      	adds	r5, r2, r3
 800bfcc:	42ac      	cmp	r4, r5
 800bfce:	d101      	bne.n	800bfd4 <__sfputs_r+0x12>
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	e007      	b.n	800bfe4 <__sfputs_r+0x22>
 800bfd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfd8:	463a      	mov	r2, r7
 800bfda:	4630      	mov	r0, r6
 800bfdc:	f7ff ffda 	bl	800bf94 <__sfputc_r>
 800bfe0:	1c43      	adds	r3, r0, #1
 800bfe2:	d1f3      	bne.n	800bfcc <__sfputs_r+0xa>
 800bfe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bfe8 <_vfiprintf_r>:
 800bfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfec:	460d      	mov	r5, r1
 800bfee:	b09d      	sub	sp, #116	@ 0x74
 800bff0:	4614      	mov	r4, r2
 800bff2:	4698      	mov	r8, r3
 800bff4:	4606      	mov	r6, r0
 800bff6:	b118      	cbz	r0, 800c000 <_vfiprintf_r+0x18>
 800bff8:	6a03      	ldr	r3, [r0, #32]
 800bffa:	b90b      	cbnz	r3, 800c000 <_vfiprintf_r+0x18>
 800bffc:	f7fe fa8e 	bl	800a51c <__sinit>
 800c000:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c002:	07d9      	lsls	r1, r3, #31
 800c004:	d405      	bmi.n	800c012 <_vfiprintf_r+0x2a>
 800c006:	89ab      	ldrh	r3, [r5, #12]
 800c008:	059a      	lsls	r2, r3, #22
 800c00a:	d402      	bmi.n	800c012 <_vfiprintf_r+0x2a>
 800c00c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c00e:	f7fe fcde 	bl	800a9ce <__retarget_lock_acquire_recursive>
 800c012:	89ab      	ldrh	r3, [r5, #12]
 800c014:	071b      	lsls	r3, r3, #28
 800c016:	d501      	bpl.n	800c01c <_vfiprintf_r+0x34>
 800c018:	692b      	ldr	r3, [r5, #16]
 800c01a:	b99b      	cbnz	r3, 800c044 <_vfiprintf_r+0x5c>
 800c01c:	4629      	mov	r1, r5
 800c01e:	4630      	mov	r0, r6
 800c020:	f7fe fba4 	bl	800a76c <__swsetup_r>
 800c024:	b170      	cbz	r0, 800c044 <_vfiprintf_r+0x5c>
 800c026:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c028:	07dc      	lsls	r4, r3, #31
 800c02a:	d504      	bpl.n	800c036 <_vfiprintf_r+0x4e>
 800c02c:	f04f 30ff 	mov.w	r0, #4294967295
 800c030:	b01d      	add	sp, #116	@ 0x74
 800c032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c036:	89ab      	ldrh	r3, [r5, #12]
 800c038:	0598      	lsls	r0, r3, #22
 800c03a:	d4f7      	bmi.n	800c02c <_vfiprintf_r+0x44>
 800c03c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c03e:	f7fe fcc7 	bl	800a9d0 <__retarget_lock_release_recursive>
 800c042:	e7f3      	b.n	800c02c <_vfiprintf_r+0x44>
 800c044:	2300      	movs	r3, #0
 800c046:	9309      	str	r3, [sp, #36]	@ 0x24
 800c048:	2320      	movs	r3, #32
 800c04a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c04e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c052:	2330      	movs	r3, #48	@ 0x30
 800c054:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c204 <_vfiprintf_r+0x21c>
 800c058:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c05c:	f04f 0901 	mov.w	r9, #1
 800c060:	4623      	mov	r3, r4
 800c062:	469a      	mov	sl, r3
 800c064:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c068:	b10a      	cbz	r2, 800c06e <_vfiprintf_r+0x86>
 800c06a:	2a25      	cmp	r2, #37	@ 0x25
 800c06c:	d1f9      	bne.n	800c062 <_vfiprintf_r+0x7a>
 800c06e:	ebba 0b04 	subs.w	fp, sl, r4
 800c072:	d00b      	beq.n	800c08c <_vfiprintf_r+0xa4>
 800c074:	465b      	mov	r3, fp
 800c076:	4622      	mov	r2, r4
 800c078:	4629      	mov	r1, r5
 800c07a:	4630      	mov	r0, r6
 800c07c:	f7ff ffa1 	bl	800bfc2 <__sfputs_r>
 800c080:	3001      	adds	r0, #1
 800c082:	f000 80a7 	beq.w	800c1d4 <_vfiprintf_r+0x1ec>
 800c086:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c088:	445a      	add	r2, fp
 800c08a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c08c:	f89a 3000 	ldrb.w	r3, [sl]
 800c090:	2b00      	cmp	r3, #0
 800c092:	f000 809f 	beq.w	800c1d4 <_vfiprintf_r+0x1ec>
 800c096:	2300      	movs	r3, #0
 800c098:	f04f 32ff 	mov.w	r2, #4294967295
 800c09c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0a0:	f10a 0a01 	add.w	sl, sl, #1
 800c0a4:	9304      	str	r3, [sp, #16]
 800c0a6:	9307      	str	r3, [sp, #28]
 800c0a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0ae:	4654      	mov	r4, sl
 800c0b0:	2205      	movs	r2, #5
 800c0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b6:	4853      	ldr	r0, [pc, #332]	@ (800c204 <_vfiprintf_r+0x21c>)
 800c0b8:	f7f4 f88a 	bl	80001d0 <memchr>
 800c0bc:	9a04      	ldr	r2, [sp, #16]
 800c0be:	b9d8      	cbnz	r0, 800c0f8 <_vfiprintf_r+0x110>
 800c0c0:	06d1      	lsls	r1, r2, #27
 800c0c2:	bf44      	itt	mi
 800c0c4:	2320      	movmi	r3, #32
 800c0c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0ca:	0713      	lsls	r3, r2, #28
 800c0cc:	bf44      	itt	mi
 800c0ce:	232b      	movmi	r3, #43	@ 0x2b
 800c0d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0da:	d015      	beq.n	800c108 <_vfiprintf_r+0x120>
 800c0dc:	9a07      	ldr	r2, [sp, #28]
 800c0de:	4654      	mov	r4, sl
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	f04f 0c0a 	mov.w	ip, #10
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0ec:	3b30      	subs	r3, #48	@ 0x30
 800c0ee:	2b09      	cmp	r3, #9
 800c0f0:	d94b      	bls.n	800c18a <_vfiprintf_r+0x1a2>
 800c0f2:	b1b0      	cbz	r0, 800c122 <_vfiprintf_r+0x13a>
 800c0f4:	9207      	str	r2, [sp, #28]
 800c0f6:	e014      	b.n	800c122 <_vfiprintf_r+0x13a>
 800c0f8:	eba0 0308 	sub.w	r3, r0, r8
 800c0fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c100:	4313      	orrs	r3, r2
 800c102:	9304      	str	r3, [sp, #16]
 800c104:	46a2      	mov	sl, r4
 800c106:	e7d2      	b.n	800c0ae <_vfiprintf_r+0xc6>
 800c108:	9b03      	ldr	r3, [sp, #12]
 800c10a:	1d19      	adds	r1, r3, #4
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	9103      	str	r1, [sp, #12]
 800c110:	2b00      	cmp	r3, #0
 800c112:	bfbb      	ittet	lt
 800c114:	425b      	neglt	r3, r3
 800c116:	f042 0202 	orrlt.w	r2, r2, #2
 800c11a:	9307      	strge	r3, [sp, #28]
 800c11c:	9307      	strlt	r3, [sp, #28]
 800c11e:	bfb8      	it	lt
 800c120:	9204      	strlt	r2, [sp, #16]
 800c122:	7823      	ldrb	r3, [r4, #0]
 800c124:	2b2e      	cmp	r3, #46	@ 0x2e
 800c126:	d10a      	bne.n	800c13e <_vfiprintf_r+0x156>
 800c128:	7863      	ldrb	r3, [r4, #1]
 800c12a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c12c:	d132      	bne.n	800c194 <_vfiprintf_r+0x1ac>
 800c12e:	9b03      	ldr	r3, [sp, #12]
 800c130:	1d1a      	adds	r2, r3, #4
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	9203      	str	r2, [sp, #12]
 800c136:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c13a:	3402      	adds	r4, #2
 800c13c:	9305      	str	r3, [sp, #20]
 800c13e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c214 <_vfiprintf_r+0x22c>
 800c142:	7821      	ldrb	r1, [r4, #0]
 800c144:	2203      	movs	r2, #3
 800c146:	4650      	mov	r0, sl
 800c148:	f7f4 f842 	bl	80001d0 <memchr>
 800c14c:	b138      	cbz	r0, 800c15e <_vfiprintf_r+0x176>
 800c14e:	9b04      	ldr	r3, [sp, #16]
 800c150:	eba0 000a 	sub.w	r0, r0, sl
 800c154:	2240      	movs	r2, #64	@ 0x40
 800c156:	4082      	lsls	r2, r0
 800c158:	4313      	orrs	r3, r2
 800c15a:	3401      	adds	r4, #1
 800c15c:	9304      	str	r3, [sp, #16]
 800c15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c162:	4829      	ldr	r0, [pc, #164]	@ (800c208 <_vfiprintf_r+0x220>)
 800c164:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c168:	2206      	movs	r2, #6
 800c16a:	f7f4 f831 	bl	80001d0 <memchr>
 800c16e:	2800      	cmp	r0, #0
 800c170:	d03f      	beq.n	800c1f2 <_vfiprintf_r+0x20a>
 800c172:	4b26      	ldr	r3, [pc, #152]	@ (800c20c <_vfiprintf_r+0x224>)
 800c174:	bb1b      	cbnz	r3, 800c1be <_vfiprintf_r+0x1d6>
 800c176:	9b03      	ldr	r3, [sp, #12]
 800c178:	3307      	adds	r3, #7
 800c17a:	f023 0307 	bic.w	r3, r3, #7
 800c17e:	3308      	adds	r3, #8
 800c180:	9303      	str	r3, [sp, #12]
 800c182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c184:	443b      	add	r3, r7
 800c186:	9309      	str	r3, [sp, #36]	@ 0x24
 800c188:	e76a      	b.n	800c060 <_vfiprintf_r+0x78>
 800c18a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c18e:	460c      	mov	r4, r1
 800c190:	2001      	movs	r0, #1
 800c192:	e7a8      	b.n	800c0e6 <_vfiprintf_r+0xfe>
 800c194:	2300      	movs	r3, #0
 800c196:	3401      	adds	r4, #1
 800c198:	9305      	str	r3, [sp, #20]
 800c19a:	4619      	mov	r1, r3
 800c19c:	f04f 0c0a 	mov.w	ip, #10
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1a6:	3a30      	subs	r2, #48	@ 0x30
 800c1a8:	2a09      	cmp	r2, #9
 800c1aa:	d903      	bls.n	800c1b4 <_vfiprintf_r+0x1cc>
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d0c6      	beq.n	800c13e <_vfiprintf_r+0x156>
 800c1b0:	9105      	str	r1, [sp, #20]
 800c1b2:	e7c4      	b.n	800c13e <_vfiprintf_r+0x156>
 800c1b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1b8:	4604      	mov	r4, r0
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	e7f0      	b.n	800c1a0 <_vfiprintf_r+0x1b8>
 800c1be:	ab03      	add	r3, sp, #12
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	462a      	mov	r2, r5
 800c1c4:	4b12      	ldr	r3, [pc, #72]	@ (800c210 <_vfiprintf_r+0x228>)
 800c1c6:	a904      	add	r1, sp, #16
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	f7fd fd65 	bl	8009c98 <_printf_float>
 800c1ce:	4607      	mov	r7, r0
 800c1d0:	1c78      	adds	r0, r7, #1
 800c1d2:	d1d6      	bne.n	800c182 <_vfiprintf_r+0x19a>
 800c1d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1d6:	07d9      	lsls	r1, r3, #31
 800c1d8:	d405      	bmi.n	800c1e6 <_vfiprintf_r+0x1fe>
 800c1da:	89ab      	ldrh	r3, [r5, #12]
 800c1dc:	059a      	lsls	r2, r3, #22
 800c1de:	d402      	bmi.n	800c1e6 <_vfiprintf_r+0x1fe>
 800c1e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1e2:	f7fe fbf5 	bl	800a9d0 <__retarget_lock_release_recursive>
 800c1e6:	89ab      	ldrh	r3, [r5, #12]
 800c1e8:	065b      	lsls	r3, r3, #25
 800c1ea:	f53f af1f 	bmi.w	800c02c <_vfiprintf_r+0x44>
 800c1ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c1f0:	e71e      	b.n	800c030 <_vfiprintf_r+0x48>
 800c1f2:	ab03      	add	r3, sp, #12
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	462a      	mov	r2, r5
 800c1f8:	4b05      	ldr	r3, [pc, #20]	@ (800c210 <_vfiprintf_r+0x228>)
 800c1fa:	a904      	add	r1, sp, #16
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	f7fd ffe3 	bl	800a1c8 <_printf_i>
 800c202:	e7e4      	b.n	800c1ce <_vfiprintf_r+0x1e6>
 800c204:	0800ca02 	.word	0x0800ca02
 800c208:	0800ca0c 	.word	0x0800ca0c
 800c20c:	08009c99 	.word	0x08009c99
 800c210:	0800bfc3 	.word	0x0800bfc3
 800c214:	0800ca08 	.word	0x0800ca08

0800c218 <__sflush_r>:
 800c218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c220:	0716      	lsls	r6, r2, #28
 800c222:	4605      	mov	r5, r0
 800c224:	460c      	mov	r4, r1
 800c226:	d454      	bmi.n	800c2d2 <__sflush_r+0xba>
 800c228:	684b      	ldr	r3, [r1, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	dc02      	bgt.n	800c234 <__sflush_r+0x1c>
 800c22e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c230:	2b00      	cmp	r3, #0
 800c232:	dd48      	ble.n	800c2c6 <__sflush_r+0xae>
 800c234:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c236:	2e00      	cmp	r6, #0
 800c238:	d045      	beq.n	800c2c6 <__sflush_r+0xae>
 800c23a:	2300      	movs	r3, #0
 800c23c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c240:	682f      	ldr	r7, [r5, #0]
 800c242:	6a21      	ldr	r1, [r4, #32]
 800c244:	602b      	str	r3, [r5, #0]
 800c246:	d030      	beq.n	800c2aa <__sflush_r+0x92>
 800c248:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c24a:	89a3      	ldrh	r3, [r4, #12]
 800c24c:	0759      	lsls	r1, r3, #29
 800c24e:	d505      	bpl.n	800c25c <__sflush_r+0x44>
 800c250:	6863      	ldr	r3, [r4, #4]
 800c252:	1ad2      	subs	r2, r2, r3
 800c254:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c256:	b10b      	cbz	r3, 800c25c <__sflush_r+0x44>
 800c258:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c25a:	1ad2      	subs	r2, r2, r3
 800c25c:	2300      	movs	r3, #0
 800c25e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c260:	6a21      	ldr	r1, [r4, #32]
 800c262:	4628      	mov	r0, r5
 800c264:	47b0      	blx	r6
 800c266:	1c43      	adds	r3, r0, #1
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	d106      	bne.n	800c27a <__sflush_r+0x62>
 800c26c:	6829      	ldr	r1, [r5, #0]
 800c26e:	291d      	cmp	r1, #29
 800c270:	d82b      	bhi.n	800c2ca <__sflush_r+0xb2>
 800c272:	4a2a      	ldr	r2, [pc, #168]	@ (800c31c <__sflush_r+0x104>)
 800c274:	40ca      	lsrs	r2, r1
 800c276:	07d6      	lsls	r6, r2, #31
 800c278:	d527      	bpl.n	800c2ca <__sflush_r+0xb2>
 800c27a:	2200      	movs	r2, #0
 800c27c:	6062      	str	r2, [r4, #4]
 800c27e:	04d9      	lsls	r1, r3, #19
 800c280:	6922      	ldr	r2, [r4, #16]
 800c282:	6022      	str	r2, [r4, #0]
 800c284:	d504      	bpl.n	800c290 <__sflush_r+0x78>
 800c286:	1c42      	adds	r2, r0, #1
 800c288:	d101      	bne.n	800c28e <__sflush_r+0x76>
 800c28a:	682b      	ldr	r3, [r5, #0]
 800c28c:	b903      	cbnz	r3, 800c290 <__sflush_r+0x78>
 800c28e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c290:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c292:	602f      	str	r7, [r5, #0]
 800c294:	b1b9      	cbz	r1, 800c2c6 <__sflush_r+0xae>
 800c296:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c29a:	4299      	cmp	r1, r3
 800c29c:	d002      	beq.n	800c2a4 <__sflush_r+0x8c>
 800c29e:	4628      	mov	r0, r5
 800c2a0:	f7ff f9fe 	bl	800b6a0 <_free_r>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2a8:	e00d      	b.n	800c2c6 <__sflush_r+0xae>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	47b0      	blx	r6
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	1c50      	adds	r0, r2, #1
 800c2b4:	d1c9      	bne.n	800c24a <__sflush_r+0x32>
 800c2b6:	682b      	ldr	r3, [r5, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d0c6      	beq.n	800c24a <__sflush_r+0x32>
 800c2bc:	2b1d      	cmp	r3, #29
 800c2be:	d001      	beq.n	800c2c4 <__sflush_r+0xac>
 800c2c0:	2b16      	cmp	r3, #22
 800c2c2:	d11e      	bne.n	800c302 <__sflush_r+0xea>
 800c2c4:	602f      	str	r7, [r5, #0]
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	e022      	b.n	800c310 <__sflush_r+0xf8>
 800c2ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2ce:	b21b      	sxth	r3, r3
 800c2d0:	e01b      	b.n	800c30a <__sflush_r+0xf2>
 800c2d2:	690f      	ldr	r7, [r1, #16]
 800c2d4:	2f00      	cmp	r7, #0
 800c2d6:	d0f6      	beq.n	800c2c6 <__sflush_r+0xae>
 800c2d8:	0793      	lsls	r3, r2, #30
 800c2da:	680e      	ldr	r6, [r1, #0]
 800c2dc:	bf08      	it	eq
 800c2de:	694b      	ldreq	r3, [r1, #20]
 800c2e0:	600f      	str	r7, [r1, #0]
 800c2e2:	bf18      	it	ne
 800c2e4:	2300      	movne	r3, #0
 800c2e6:	eba6 0807 	sub.w	r8, r6, r7
 800c2ea:	608b      	str	r3, [r1, #8]
 800c2ec:	f1b8 0f00 	cmp.w	r8, #0
 800c2f0:	dde9      	ble.n	800c2c6 <__sflush_r+0xae>
 800c2f2:	6a21      	ldr	r1, [r4, #32]
 800c2f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c2f6:	4643      	mov	r3, r8
 800c2f8:	463a      	mov	r2, r7
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	47b0      	blx	r6
 800c2fe:	2800      	cmp	r0, #0
 800c300:	dc08      	bgt.n	800c314 <__sflush_r+0xfc>
 800c302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c30a:	81a3      	strh	r3, [r4, #12]
 800c30c:	f04f 30ff 	mov.w	r0, #4294967295
 800c310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c314:	4407      	add	r7, r0
 800c316:	eba8 0800 	sub.w	r8, r8, r0
 800c31a:	e7e7      	b.n	800c2ec <__sflush_r+0xd4>
 800c31c:	20400001 	.word	0x20400001

0800c320 <_fflush_r>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	690b      	ldr	r3, [r1, #16]
 800c324:	4605      	mov	r5, r0
 800c326:	460c      	mov	r4, r1
 800c328:	b913      	cbnz	r3, 800c330 <_fflush_r+0x10>
 800c32a:	2500      	movs	r5, #0
 800c32c:	4628      	mov	r0, r5
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
 800c330:	b118      	cbz	r0, 800c33a <_fflush_r+0x1a>
 800c332:	6a03      	ldr	r3, [r0, #32]
 800c334:	b90b      	cbnz	r3, 800c33a <_fflush_r+0x1a>
 800c336:	f7fe f8f1 	bl	800a51c <__sinit>
 800c33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d0f3      	beq.n	800c32a <_fflush_r+0xa>
 800c342:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c344:	07d0      	lsls	r0, r2, #31
 800c346:	d404      	bmi.n	800c352 <_fflush_r+0x32>
 800c348:	0599      	lsls	r1, r3, #22
 800c34a:	d402      	bmi.n	800c352 <_fflush_r+0x32>
 800c34c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c34e:	f7fe fb3e 	bl	800a9ce <__retarget_lock_acquire_recursive>
 800c352:	4628      	mov	r0, r5
 800c354:	4621      	mov	r1, r4
 800c356:	f7ff ff5f 	bl	800c218 <__sflush_r>
 800c35a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c35c:	07da      	lsls	r2, r3, #31
 800c35e:	4605      	mov	r5, r0
 800c360:	d4e4      	bmi.n	800c32c <_fflush_r+0xc>
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	059b      	lsls	r3, r3, #22
 800c366:	d4e1      	bmi.n	800c32c <_fflush_r+0xc>
 800c368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c36a:	f7fe fb31 	bl	800a9d0 <__retarget_lock_release_recursive>
 800c36e:	e7dd      	b.n	800c32c <_fflush_r+0xc>

0800c370 <__swhatbuf_r>:
 800c370:	b570      	push	{r4, r5, r6, lr}
 800c372:	460c      	mov	r4, r1
 800c374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c378:	2900      	cmp	r1, #0
 800c37a:	b096      	sub	sp, #88	@ 0x58
 800c37c:	4615      	mov	r5, r2
 800c37e:	461e      	mov	r6, r3
 800c380:	da0d      	bge.n	800c39e <__swhatbuf_r+0x2e>
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c388:	f04f 0100 	mov.w	r1, #0
 800c38c:	bf14      	ite	ne
 800c38e:	2340      	movne	r3, #64	@ 0x40
 800c390:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c394:	2000      	movs	r0, #0
 800c396:	6031      	str	r1, [r6, #0]
 800c398:	602b      	str	r3, [r5, #0]
 800c39a:	b016      	add	sp, #88	@ 0x58
 800c39c:	bd70      	pop	{r4, r5, r6, pc}
 800c39e:	466a      	mov	r2, sp
 800c3a0:	f000 f848 	bl	800c434 <_fstat_r>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	dbec      	blt.n	800c382 <__swhatbuf_r+0x12>
 800c3a8:	9901      	ldr	r1, [sp, #4]
 800c3aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c3ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c3b2:	4259      	negs	r1, r3
 800c3b4:	4159      	adcs	r1, r3
 800c3b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3ba:	e7eb      	b.n	800c394 <__swhatbuf_r+0x24>

0800c3bc <__smakebuf_r>:
 800c3bc:	898b      	ldrh	r3, [r1, #12]
 800c3be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3c0:	079d      	lsls	r5, r3, #30
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	460c      	mov	r4, r1
 800c3c6:	d507      	bpl.n	800c3d8 <__smakebuf_r+0x1c>
 800c3c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c3cc:	6023      	str	r3, [r4, #0]
 800c3ce:	6123      	str	r3, [r4, #16]
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	6163      	str	r3, [r4, #20]
 800c3d4:	b003      	add	sp, #12
 800c3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3d8:	ab01      	add	r3, sp, #4
 800c3da:	466a      	mov	r2, sp
 800c3dc:	f7ff ffc8 	bl	800c370 <__swhatbuf_r>
 800c3e0:	9f00      	ldr	r7, [sp, #0]
 800c3e2:	4605      	mov	r5, r0
 800c3e4:	4639      	mov	r1, r7
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f7ff f9ce 	bl	800b788 <_malloc_r>
 800c3ec:	b948      	cbnz	r0, 800c402 <__smakebuf_r+0x46>
 800c3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3f2:	059a      	lsls	r2, r3, #22
 800c3f4:	d4ee      	bmi.n	800c3d4 <__smakebuf_r+0x18>
 800c3f6:	f023 0303 	bic.w	r3, r3, #3
 800c3fa:	f043 0302 	orr.w	r3, r3, #2
 800c3fe:	81a3      	strh	r3, [r4, #12]
 800c400:	e7e2      	b.n	800c3c8 <__smakebuf_r+0xc>
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	6020      	str	r0, [r4, #0]
 800c406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c40a:	81a3      	strh	r3, [r4, #12]
 800c40c:	9b01      	ldr	r3, [sp, #4]
 800c40e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c412:	b15b      	cbz	r3, 800c42c <__smakebuf_r+0x70>
 800c414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c418:	4630      	mov	r0, r6
 800c41a:	f000 f81d 	bl	800c458 <_isatty_r>
 800c41e:	b128      	cbz	r0, 800c42c <__smakebuf_r+0x70>
 800c420:	89a3      	ldrh	r3, [r4, #12]
 800c422:	f023 0303 	bic.w	r3, r3, #3
 800c426:	f043 0301 	orr.w	r3, r3, #1
 800c42a:	81a3      	strh	r3, [r4, #12]
 800c42c:	89a3      	ldrh	r3, [r4, #12]
 800c42e:	431d      	orrs	r5, r3
 800c430:	81a5      	strh	r5, [r4, #12]
 800c432:	e7cf      	b.n	800c3d4 <__smakebuf_r+0x18>

0800c434 <_fstat_r>:
 800c434:	b538      	push	{r3, r4, r5, lr}
 800c436:	4d07      	ldr	r5, [pc, #28]	@ (800c454 <_fstat_r+0x20>)
 800c438:	2300      	movs	r3, #0
 800c43a:	4604      	mov	r4, r0
 800c43c:	4608      	mov	r0, r1
 800c43e:	4611      	mov	r1, r2
 800c440:	602b      	str	r3, [r5, #0]
 800c442:	f7f5 fbef 	bl	8001c24 <_fstat>
 800c446:	1c43      	adds	r3, r0, #1
 800c448:	d102      	bne.n	800c450 <_fstat_r+0x1c>
 800c44a:	682b      	ldr	r3, [r5, #0]
 800c44c:	b103      	cbz	r3, 800c450 <_fstat_r+0x1c>
 800c44e:	6023      	str	r3, [r4, #0]
 800c450:	bd38      	pop	{r3, r4, r5, pc}
 800c452:	bf00      	nop
 800c454:	20003f9c 	.word	0x20003f9c

0800c458 <_isatty_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4d06      	ldr	r5, [pc, #24]	@ (800c474 <_isatty_r+0x1c>)
 800c45c:	2300      	movs	r3, #0
 800c45e:	4604      	mov	r4, r0
 800c460:	4608      	mov	r0, r1
 800c462:	602b      	str	r3, [r5, #0]
 800c464:	f7f5 fbee 	bl	8001c44 <_isatty>
 800c468:	1c43      	adds	r3, r0, #1
 800c46a:	d102      	bne.n	800c472 <_isatty_r+0x1a>
 800c46c:	682b      	ldr	r3, [r5, #0]
 800c46e:	b103      	cbz	r3, 800c472 <_isatty_r+0x1a>
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	bd38      	pop	{r3, r4, r5, pc}
 800c474:	20003f9c 	.word	0x20003f9c

0800c478 <_sbrk_r>:
 800c478:	b538      	push	{r3, r4, r5, lr}
 800c47a:	4d06      	ldr	r5, [pc, #24]	@ (800c494 <_sbrk_r+0x1c>)
 800c47c:	2300      	movs	r3, #0
 800c47e:	4604      	mov	r4, r0
 800c480:	4608      	mov	r0, r1
 800c482:	602b      	str	r3, [r5, #0]
 800c484:	f7f5 fbf6 	bl	8001c74 <_sbrk>
 800c488:	1c43      	adds	r3, r0, #1
 800c48a:	d102      	bne.n	800c492 <_sbrk_r+0x1a>
 800c48c:	682b      	ldr	r3, [r5, #0]
 800c48e:	b103      	cbz	r3, 800c492 <_sbrk_r+0x1a>
 800c490:	6023      	str	r3, [r4, #0]
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	20003f9c 	.word	0x20003f9c

0800c498 <__assert_func>:
 800c498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c49a:	4614      	mov	r4, r2
 800c49c:	461a      	mov	r2, r3
 800c49e:	4b09      	ldr	r3, [pc, #36]	@ (800c4c4 <__assert_func+0x2c>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	68d8      	ldr	r0, [r3, #12]
 800c4a6:	b14c      	cbz	r4, 800c4bc <__assert_func+0x24>
 800c4a8:	4b07      	ldr	r3, [pc, #28]	@ (800c4c8 <__assert_func+0x30>)
 800c4aa:	9100      	str	r1, [sp, #0]
 800c4ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4b0:	4906      	ldr	r1, [pc, #24]	@ (800c4cc <__assert_func+0x34>)
 800c4b2:	462b      	mov	r3, r5
 800c4b4:	f000 f842 	bl	800c53c <fiprintf>
 800c4b8:	f000 f852 	bl	800c560 <abort>
 800c4bc:	4b04      	ldr	r3, [pc, #16]	@ (800c4d0 <__assert_func+0x38>)
 800c4be:	461c      	mov	r4, r3
 800c4c0:	e7f3      	b.n	800c4aa <__assert_func+0x12>
 800c4c2:	bf00      	nop
 800c4c4:	2000001c 	.word	0x2000001c
 800c4c8:	0800ca1d 	.word	0x0800ca1d
 800c4cc:	0800ca2a 	.word	0x0800ca2a
 800c4d0:	0800ca58 	.word	0x0800ca58

0800c4d4 <_calloc_r>:
 800c4d4:	b570      	push	{r4, r5, r6, lr}
 800c4d6:	fba1 5402 	umull	r5, r4, r1, r2
 800c4da:	b934      	cbnz	r4, 800c4ea <_calloc_r+0x16>
 800c4dc:	4629      	mov	r1, r5
 800c4de:	f7ff f953 	bl	800b788 <_malloc_r>
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	b928      	cbnz	r0, 800c4f2 <_calloc_r+0x1e>
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	bd70      	pop	{r4, r5, r6, pc}
 800c4ea:	220c      	movs	r2, #12
 800c4ec:	6002      	str	r2, [r0, #0]
 800c4ee:	2600      	movs	r6, #0
 800c4f0:	e7f9      	b.n	800c4e6 <_calloc_r+0x12>
 800c4f2:	462a      	mov	r2, r5
 800c4f4:	4621      	mov	r1, r4
 800c4f6:	f7fe f98f 	bl	800a818 <memset>
 800c4fa:	e7f4      	b.n	800c4e6 <_calloc_r+0x12>

0800c4fc <__ascii_mbtowc>:
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	b901      	cbnz	r1, 800c502 <__ascii_mbtowc+0x6>
 800c500:	a901      	add	r1, sp, #4
 800c502:	b142      	cbz	r2, 800c516 <__ascii_mbtowc+0x1a>
 800c504:	b14b      	cbz	r3, 800c51a <__ascii_mbtowc+0x1e>
 800c506:	7813      	ldrb	r3, [r2, #0]
 800c508:	600b      	str	r3, [r1, #0]
 800c50a:	7812      	ldrb	r2, [r2, #0]
 800c50c:	1e10      	subs	r0, r2, #0
 800c50e:	bf18      	it	ne
 800c510:	2001      	movne	r0, #1
 800c512:	b002      	add	sp, #8
 800c514:	4770      	bx	lr
 800c516:	4610      	mov	r0, r2
 800c518:	e7fb      	b.n	800c512 <__ascii_mbtowc+0x16>
 800c51a:	f06f 0001 	mvn.w	r0, #1
 800c51e:	e7f8      	b.n	800c512 <__ascii_mbtowc+0x16>

0800c520 <__ascii_wctomb>:
 800c520:	4603      	mov	r3, r0
 800c522:	4608      	mov	r0, r1
 800c524:	b141      	cbz	r1, 800c538 <__ascii_wctomb+0x18>
 800c526:	2aff      	cmp	r2, #255	@ 0xff
 800c528:	d904      	bls.n	800c534 <__ascii_wctomb+0x14>
 800c52a:	228a      	movs	r2, #138	@ 0x8a
 800c52c:	601a      	str	r2, [r3, #0]
 800c52e:	f04f 30ff 	mov.w	r0, #4294967295
 800c532:	4770      	bx	lr
 800c534:	700a      	strb	r2, [r1, #0]
 800c536:	2001      	movs	r0, #1
 800c538:	4770      	bx	lr
	...

0800c53c <fiprintf>:
 800c53c:	b40e      	push	{r1, r2, r3}
 800c53e:	b503      	push	{r0, r1, lr}
 800c540:	4601      	mov	r1, r0
 800c542:	ab03      	add	r3, sp, #12
 800c544:	4805      	ldr	r0, [pc, #20]	@ (800c55c <fiprintf+0x20>)
 800c546:	f853 2b04 	ldr.w	r2, [r3], #4
 800c54a:	6800      	ldr	r0, [r0, #0]
 800c54c:	9301      	str	r3, [sp, #4]
 800c54e:	f7ff fd4b 	bl	800bfe8 <_vfiprintf_r>
 800c552:	b002      	add	sp, #8
 800c554:	f85d eb04 	ldr.w	lr, [sp], #4
 800c558:	b003      	add	sp, #12
 800c55a:	4770      	bx	lr
 800c55c:	2000001c 	.word	0x2000001c

0800c560 <abort>:
 800c560:	b508      	push	{r3, lr}
 800c562:	2006      	movs	r0, #6
 800c564:	f000 f82c 	bl	800c5c0 <raise>
 800c568:	2001      	movs	r0, #1
 800c56a:	f7f5 fb0b 	bl	8001b84 <_exit>

0800c56e <_raise_r>:
 800c56e:	291f      	cmp	r1, #31
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	4605      	mov	r5, r0
 800c574:	460c      	mov	r4, r1
 800c576:	d904      	bls.n	800c582 <_raise_r+0x14>
 800c578:	2316      	movs	r3, #22
 800c57a:	6003      	str	r3, [r0, #0]
 800c57c:	f04f 30ff 	mov.w	r0, #4294967295
 800c580:	bd38      	pop	{r3, r4, r5, pc}
 800c582:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c584:	b112      	cbz	r2, 800c58c <_raise_r+0x1e>
 800c586:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c58a:	b94b      	cbnz	r3, 800c5a0 <_raise_r+0x32>
 800c58c:	4628      	mov	r0, r5
 800c58e:	f000 f831 	bl	800c5f4 <_getpid_r>
 800c592:	4622      	mov	r2, r4
 800c594:	4601      	mov	r1, r0
 800c596:	4628      	mov	r0, r5
 800c598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c59c:	f000 b818 	b.w	800c5d0 <_kill_r>
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d00a      	beq.n	800c5ba <_raise_r+0x4c>
 800c5a4:	1c59      	adds	r1, r3, #1
 800c5a6:	d103      	bne.n	800c5b0 <_raise_r+0x42>
 800c5a8:	2316      	movs	r3, #22
 800c5aa:	6003      	str	r3, [r0, #0]
 800c5ac:	2001      	movs	r0, #1
 800c5ae:	e7e7      	b.n	800c580 <_raise_r+0x12>
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	4798      	blx	r3
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	e7e0      	b.n	800c580 <_raise_r+0x12>
	...

0800c5c0 <raise>:
 800c5c0:	4b02      	ldr	r3, [pc, #8]	@ (800c5cc <raise+0xc>)
 800c5c2:	4601      	mov	r1, r0
 800c5c4:	6818      	ldr	r0, [r3, #0]
 800c5c6:	f7ff bfd2 	b.w	800c56e <_raise_r>
 800c5ca:	bf00      	nop
 800c5cc:	2000001c 	.word	0x2000001c

0800c5d0 <_kill_r>:
 800c5d0:	b538      	push	{r3, r4, r5, lr}
 800c5d2:	4d07      	ldr	r5, [pc, #28]	@ (800c5f0 <_kill_r+0x20>)
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	4608      	mov	r0, r1
 800c5da:	4611      	mov	r1, r2
 800c5dc:	602b      	str	r3, [r5, #0]
 800c5de:	f7f5 fac1 	bl	8001b64 <_kill>
 800c5e2:	1c43      	adds	r3, r0, #1
 800c5e4:	d102      	bne.n	800c5ec <_kill_r+0x1c>
 800c5e6:	682b      	ldr	r3, [r5, #0]
 800c5e8:	b103      	cbz	r3, 800c5ec <_kill_r+0x1c>
 800c5ea:	6023      	str	r3, [r4, #0]
 800c5ec:	bd38      	pop	{r3, r4, r5, pc}
 800c5ee:	bf00      	nop
 800c5f0:	20003f9c 	.word	0x20003f9c

0800c5f4 <_getpid_r>:
 800c5f4:	f7f5 baae 	b.w	8001b54 <_getpid>

0800c5f8 <atanf>:
 800c5f8:	b538      	push	{r3, r4, r5, lr}
 800c5fa:	ee10 5a10 	vmov	r5, s0
 800c5fe:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c602:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c606:	eef0 7a40 	vmov.f32	s15, s0
 800c60a:	d310      	bcc.n	800c62e <atanf+0x36>
 800c60c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c610:	d904      	bls.n	800c61c <atanf+0x24>
 800c612:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c616:	eeb0 0a67 	vmov.f32	s0, s15
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c754 <atanf+0x15c>
 800c620:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c758 <atanf+0x160>
 800c624:	2d00      	cmp	r5, #0
 800c626:	bfc8      	it	gt
 800c628:	eef0 7a47 	vmovgt.f32	s15, s14
 800c62c:	e7f3      	b.n	800c616 <atanf+0x1e>
 800c62e:	4b4b      	ldr	r3, [pc, #300]	@ (800c75c <atanf+0x164>)
 800c630:	429c      	cmp	r4, r3
 800c632:	d810      	bhi.n	800c656 <atanf+0x5e>
 800c634:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c638:	d20a      	bcs.n	800c650 <atanf+0x58>
 800c63a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c760 <atanf+0x168>
 800c63e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c646:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c64e:	dce2      	bgt.n	800c616 <atanf+0x1e>
 800c650:	f04f 33ff 	mov.w	r3, #4294967295
 800c654:	e013      	b.n	800c67e <atanf+0x86>
 800c656:	f000 f8a3 	bl	800c7a0 <fabsf>
 800c65a:	4b42      	ldr	r3, [pc, #264]	@ (800c764 <atanf+0x16c>)
 800c65c:	429c      	cmp	r4, r3
 800c65e:	d84f      	bhi.n	800c700 <atanf+0x108>
 800c660:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c664:	429c      	cmp	r4, r3
 800c666:	d841      	bhi.n	800c6ec <atanf+0xf4>
 800c668:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c66c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c670:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c674:	2300      	movs	r3, #0
 800c676:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c67a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c67e:	1c5a      	adds	r2, r3, #1
 800c680:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c684:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800c768 <atanf+0x170>
 800c688:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800c76c <atanf+0x174>
 800c68c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800c770 <atanf+0x178>
 800c690:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c694:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c698:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800c774 <atanf+0x17c>
 800c69c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c6a0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800c778 <atanf+0x180>
 800c6a4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c6a8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c77c <atanf+0x184>
 800c6ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c6b0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c780 <atanf+0x188>
 800c6b4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c6b8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c784 <atanf+0x18c>
 800c6bc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c6c0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c788 <atanf+0x190>
 800c6c4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c6c8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800c78c <atanf+0x194>
 800c6cc:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c6d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800c790 <atanf+0x198>
 800c6d4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c6d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c6dc:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c6e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c6e4:	d121      	bne.n	800c72a <atanf+0x132>
 800c6e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6ea:	e794      	b.n	800c616 <atanf+0x1e>
 800c6ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c6f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c6f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c6fe:	e7be      	b.n	800c67e <atanf+0x86>
 800c700:	4b24      	ldr	r3, [pc, #144]	@ (800c794 <atanf+0x19c>)
 800c702:	429c      	cmp	r4, r3
 800c704:	d80b      	bhi.n	800c71e <atanf+0x126>
 800c706:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c70a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c70e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c712:	2302      	movs	r3, #2
 800c714:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c71c:	e7af      	b.n	800c67e <atanf+0x86>
 800c71e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c722:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c726:	2303      	movs	r3, #3
 800c728:	e7a9      	b.n	800c67e <atanf+0x86>
 800c72a:	4a1b      	ldr	r2, [pc, #108]	@ (800c798 <atanf+0x1a0>)
 800c72c:	491b      	ldr	r1, [pc, #108]	@ (800c79c <atanf+0x1a4>)
 800c72e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c732:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c736:	edd3 6a00 	vldr	s13, [r3]
 800c73a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c73e:	2d00      	cmp	r5, #0
 800c740:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c744:	edd2 7a00 	vldr	s15, [r2]
 800c748:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c74c:	bfb8      	it	lt
 800c74e:	eef1 7a67 	vneglt.f32	s15, s15
 800c752:	e760      	b.n	800c616 <atanf+0x1e>
 800c754:	bfc90fdb 	.word	0xbfc90fdb
 800c758:	3fc90fdb 	.word	0x3fc90fdb
 800c75c:	3edfffff 	.word	0x3edfffff
 800c760:	7149f2ca 	.word	0x7149f2ca
 800c764:	3f97ffff 	.word	0x3f97ffff
 800c768:	3c8569d7 	.word	0x3c8569d7
 800c76c:	3d4bda59 	.word	0x3d4bda59
 800c770:	bd6ef16b 	.word	0xbd6ef16b
 800c774:	3d886b35 	.word	0x3d886b35
 800c778:	3dba2e6e 	.word	0x3dba2e6e
 800c77c:	3e124925 	.word	0x3e124925
 800c780:	3eaaaaab 	.word	0x3eaaaaab
 800c784:	bd15a221 	.word	0xbd15a221
 800c788:	bd9d8795 	.word	0xbd9d8795
 800c78c:	bde38e38 	.word	0xbde38e38
 800c790:	be4ccccd 	.word	0xbe4ccccd
 800c794:	401bffff 	.word	0x401bffff
 800c798:	0800cc6c 	.word	0x0800cc6c
 800c79c:	0800cc5c 	.word	0x0800cc5c

0800c7a0 <fabsf>:
 800c7a0:	ee10 3a10 	vmov	r3, s0
 800c7a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c7a8:	ee00 3a10 	vmov	s0, r3
 800c7ac:	4770      	bx	lr
	...

0800c7b0 <roundf>:
 800c7b0:	ee10 0a10 	vmov	r0, s0
 800c7b4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800c7b8:	3a7f      	subs	r2, #127	@ 0x7f
 800c7ba:	2a16      	cmp	r2, #22
 800c7bc:	dc15      	bgt.n	800c7ea <roundf+0x3a>
 800c7be:	2a00      	cmp	r2, #0
 800c7c0:	da08      	bge.n	800c7d4 <roundf+0x24>
 800c7c2:	3201      	adds	r2, #1
 800c7c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800c7c8:	d101      	bne.n	800c7ce <roundf+0x1e>
 800c7ca:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800c7ce:	ee00 3a10 	vmov	s0, r3
 800c7d2:	4770      	bx	lr
 800c7d4:	4907      	ldr	r1, [pc, #28]	@ (800c7f4 <roundf+0x44>)
 800c7d6:	4111      	asrs	r1, r2
 800c7d8:	4201      	tst	r1, r0
 800c7da:	d0fa      	beq.n	800c7d2 <roundf+0x22>
 800c7dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c7e0:	4113      	asrs	r3, r2
 800c7e2:	4403      	add	r3, r0
 800c7e4:	ea23 0301 	bic.w	r3, r3, r1
 800c7e8:	e7f1      	b.n	800c7ce <roundf+0x1e>
 800c7ea:	2a80      	cmp	r2, #128	@ 0x80
 800c7ec:	d1f1      	bne.n	800c7d2 <roundf+0x22>
 800c7ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7f2:	4770      	bx	lr
 800c7f4:	007fffff 	.word	0x007fffff

0800c7f8 <_init>:
 800c7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fa:	bf00      	nop
 800c7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7fe:	bc08      	pop	{r3}
 800c800:	469e      	mov	lr, r3
 800c802:	4770      	bx	lr

0800c804 <_fini>:
 800c804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c806:	bf00      	nop
 800c808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c80a:	bc08      	pop	{r3}
 800c80c:	469e      	mov	lr, r3
 800c80e:	4770      	bx	lr
