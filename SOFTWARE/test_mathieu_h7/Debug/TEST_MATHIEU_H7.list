
TEST_MATHIEU_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800a050  0800a050  0000b050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a0e8  0800a0e8  0000b0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a0f0  0800a0f0  0000b0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a0f4  0800a0f4  0000b0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800a0f8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000044b4  24000064  0800a15c  0000c064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004518  0800a15c  0000c518  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ce50  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003a6e  00000000  00000000  00028ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001590  00000000  00000000  0002c950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010bf  00000000  00000000  0002dee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039666  00000000  00000000  0002ef9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001db6e  00000000  00000000  00068605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016bfcc  00000000  00000000  00086173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f213f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005cac  00000000  00000000  001f2184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  001f7e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a038 	.word	0x0800a038

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	0800a038 	.word	0x0800a038

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000612:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_DMA_Init+0x3c>)
 8000614:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000618:	4a0b      	ldr	r2, [pc, #44]	@ (8000648 <MX_DMA_Init+0x3c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_DMA_Init+0x3c>)
 8000624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2105      	movs	r1, #5
 8000634:	200b      	movs	r0, #11
 8000636:	f000 fd71 	bl	800111c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800063a:	200b      	movs	r0, #11
 800063c:	f000 fd88 	bl	8001150 <HAL_NVIC_EnableIRQ>

}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	58024400 	.word	0x58024400

0800064c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <vApplicationGetIdleTaskMemory+0x2c>)
 800065c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	4a06      	ldr	r2, [pc, #24]	@ (800067c <vApplicationGetIdleTaskMemory+0x30>)
 8000662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2280      	movs	r2, #128	@ 0x80
 8000668:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	24000088 	.word	0x24000088
 800067c:	24000128 	.word	0x24000128

08000680 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b08e      	sub	sp, #56	@ 0x38
 8000684:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of maintask */
  osThreadDef(maintask, Startmaintask, osPriorityNormal, 0, 256);
 8000686:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_FREERTOS_Init+0x58>)
 8000688:	f107 041c 	add.w	r4, r7, #28
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  maintaskHandle = osThreadCreate(osThread(maintask), NULL);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f008 f970 	bl	8008986 <osThreadCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a0c      	ldr	r2, [pc, #48]	@ (80006dc <MX_FREERTOS_Init+0x5c>)
 80006aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of lidarparse */
  osThreadDef(lidarparse, Startlidarparse, osPriorityIdle, 0, 300);
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_FREERTOS_Init+0x60>)
 80006ae:	463c      	mov	r4, r7
 80006b0:	461d      	mov	r5, r3
 80006b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lidarparseHandle = osThreadCreate(osThread(lidarparse), NULL);
 80006be:	463b      	mov	r3, r7
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f008 f95f 	bl	8008986 <osThreadCreate>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a06      	ldr	r2, [pc, #24]	@ (80006e4 <MX_FREERTOS_Init+0x64>)
 80006cc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006ce:	bf00      	nop
 80006d0:	3738      	adds	r7, #56	@ 0x38
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bdb0      	pop	{r4, r5, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	0800a05c 	.word	0x0800a05c
 80006dc:	24000080 	.word	0x24000080
 80006e0:	0800a084 	.word	0x0800a084
 80006e4:	24000084 	.word	0x24000084

080006e8 <Startmaintask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startmaintask */
void Startmaintask(void const * argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startmaintask */
  /* Infinite loop */
  for(;;)
  {

	 HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_3);
 80006f0:	2108      	movs	r1, #8
 80006f2:	4806      	ldr	r0, [pc, #24]	@ (800070c <Startmaintask+0x24>)
 80006f4:	f003 fb7d 	bl	8003df2 <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_4);
 80006f8:	2110      	movs	r1, #16
 80006fa:	4804      	ldr	r0, [pc, #16]	@ (800070c <Startmaintask+0x24>)
 80006fc:	f003 fb79 	bl	8003df2 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000700:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000704:	f008 f98b 	bl	8008a1e <osDelay>
	 HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_3);
 8000708:	bf00      	nop
 800070a:	e7f1      	b.n	80006f0 <Startmaintask+0x8>
 800070c:	58021000 	.word	0x58021000

08000710 <Startlidarparse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startlidarparse */
void Startlidarparse(void const * argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startlidarparse */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f008 f980 	bl	8008a1e <osDelay>
 800071e:	e7fb      	b.n	8000718 <Startlidarparse+0x8>

08000720 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	@ 0x28
 8000724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b34      	ldr	r3, [pc, #208]	@ (8000808 <MX_GPIO_Init+0xe8>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073c:	4a32      	ldr	r2, [pc, #200]	@ (8000808 <MX_GPIO_Init+0xe8>)
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000746:	4b30      	ldr	r3, [pc, #192]	@ (8000808 <MX_GPIO_Init+0xe8>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000754:	4b2c      	ldr	r3, [pc, #176]	@ (8000808 <MX_GPIO_Init+0xe8>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075a:	4a2b      	ldr	r2, [pc, #172]	@ (8000808 <MX_GPIO_Init+0xe8>)
 800075c:	f043 0310 	orr.w	r3, r3, #16
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000764:	4b28      	ldr	r3, [pc, #160]	@ (8000808 <MX_GPIO_Init+0xe8>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076a:	f003 0310 	and.w	r3, r3, #16
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	4b25      	ldr	r3, [pc, #148]	@ (8000808 <MX_GPIO_Init+0xe8>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000778:	4a23      	ldr	r2, [pc, #140]	@ (8000808 <MX_GPIO_Init+0xe8>)
 800077a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000782:	4b21      	ldr	r3, [pc, #132]	@ (8000808 <MX_GPIO_Init+0xe8>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000790:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <MX_GPIO_Init+0xe8>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000796:	4a1c      	ldr	r2, [pc, #112]	@ (8000808 <MX_GPIO_Init+0xe8>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a0:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <MX_GPIO_Init+0xe8>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2118      	movs	r1, #24
 80007b2:	4816      	ldr	r0, [pc, #88]	@ (800080c <MX_GPIO_Init+0xec>)
 80007b4:	f003 fb04 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007be:	4814      	ldr	r0, [pc, #80]	@ (8000810 <MX_GPIO_Init+0xf0>)
 80007c0:	f003 fafe 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80007c4:	2318      	movs	r3, #24
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	@ (800080c <MX_GPIO_Init+0xec>)
 80007dc:	f003 f940 	bl	8003a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_GPIO_Init+0xf0>)
 80007fa:	f003 f931 	bl	8003a60 <HAL_GPIO_Init>

}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	@ 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	58024400 	.word	0x58024400
 800080c:	58021000 	.word	0x58021000
 8000810:	58020400 	.word	0x58020400

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000818:	f000 f8a0 	bl	800095c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f000 fb5e 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f822 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f7ff ff7c 	bl	8000720 <MX_GPIO_Init>
  MX_DMA_Init();
 8000828:	f7ff fef0 	bl	800060c <MX_DMA_Init>
  MX_UART8_Init();
 800082c:	f000 fa42 	bl	8000cb4 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000836:	4809      	ldr	r0, [pc, #36]	@ (800085c <main+0x48>)
 8000838:	f003 fac2 	bl	8003dc0 <HAL_GPIO_WritePin>

  HAL_UART_Abort(&huart8);
 800083c:	4808      	ldr	r0, [pc, #32]	@ (8000860 <main+0x4c>)
 800083e:	f006 fce5 	bl	800720c <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&huart8, (uint8_t *)circular_buffer, 512);
 8000842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000846:	4907      	ldr	r1, [pc, #28]	@ (8000864 <main+0x50>)
 8000848:	4805      	ldr	r0, [pc, #20]	@ (8000860 <main+0x4c>)
 800084a:	f006 fc93 	bl	8007174 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800084e:	f7ff ff17 	bl	8000680 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000852:	f008 f891 	bl	8008978 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000856:	bf00      	nop
 8000858:	e7fd      	b.n	8000856 <main+0x42>
 800085a:	bf00      	nop
 800085c:	58020400 	.word	0x58020400
 8000860:	24000574 	.word	0x24000574
 8000864:	24000328 	.word	0x24000328

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b09c      	sub	sp, #112	@ 0x70
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000872:	224c      	movs	r2, #76	@ 0x4c
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f009 fafc 	bl	8009e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2220      	movs	r2, #32
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f009 faf6 	bl	8009e74 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000888:	2002      	movs	r0, #2
 800088a:	f003 facd 	bl	8003e28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b30      	ldr	r3, [pc, #192]	@ (8000954 <SystemClock_Config+0xec>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	4a2f      	ldr	r2, [pc, #188]	@ (8000954 <SystemClock_Config+0xec>)
 8000898:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800089c:	6193      	str	r3, [r2, #24]
 800089e:	4b2d      	ldr	r3, [pc, #180]	@ (8000954 <SystemClock_Config+0xec>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000958 <SystemClock_Config+0xf0>)
 80008aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ac:	4a2a      	ldr	r2, [pc, #168]	@ (8000958 <SystemClock_Config+0xf0>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008b4:	4b28      	ldr	r3, [pc, #160]	@ (8000958 <SystemClock_Config+0xf0>)
 80008b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c0:	bf00      	nop
 80008c2:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <SystemClock_Config+0xec>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008ce:	d1f8      	bne.n	80008c2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d0:	2301      	movs	r3, #1
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	2302      	movs	r3, #2
 80008e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80008e6:	2378      	movs	r3, #120	@ 0x78
 80008e8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008f6:	230c      	movs	r3, #12
 80008f8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000906:	4618      	mov	r0, r3
 8000908:	f003 fac8 	bl	8003e9c <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000912:	f000 f861 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	233f      	movs	r3, #63	@ 0x3f
 8000918:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091a:	2303      	movs	r3, #3
 800091c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000922:	2308      	movs	r3, #8
 8000924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000926:	2340      	movs	r3, #64	@ 0x40
 8000928:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800092a:	2340      	movs	r3, #64	@ 0x40
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800092e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000932:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000934:	2340      	movs	r3, #64	@ 0x40
 8000936:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2104      	movs	r1, #4
 800093c:	4618      	mov	r0, r3
 800093e:	f003 ff07 	bl	8004750 <HAL_RCC_ClockConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000948:	f000 f846 	bl	80009d8 <Error_Handler>
  }
}
 800094c:	bf00      	nop
 800094e:	3770      	adds	r7, #112	@ 0x70
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	58024800 	.word	0x58024800
 8000958:	58000400 	.word	0x58000400

0800095c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000962:	463b      	mov	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800096e:	f000 fbfd 	bl	800116c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000972:	2301      	movs	r3, #1
 8000974:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000976:	2300      	movs	r3, #0
 8000978:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800097e:	231f      	movs	r3, #31
 8000980:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000982:	2387      	movs	r3, #135	@ 0x87
 8000984:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000986:	2300      	movs	r3, #0
 8000988:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800098a:	2300      	movs	r3, #0
 800098c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800098e:	2301      	movs	r3, #1
 8000990:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000992:	2301      	movs	r3, #1
 8000994:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800099e:	463b      	mov	r3, r7
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fc1b 	bl	80011dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009a6:	2004      	movs	r0, #4
 80009a8:	f000 fbf8 	bl	800119c <HAL_MPU_Enable>

}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a04      	ldr	r2, [pc, #16]	@ (80009d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d101      	bne.n	80009ca <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80009c6:	f000 fac5 	bl	8000f54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40010000 	.word	0x40010000

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <Error_Handler+0x8>

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <HAL_MspInit+0x38>)
 80009ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009f0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <HAL_MspInit+0x38>)
 80009f2:	f043 0302 	orr.w	r3, r3, #2
 80009f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <HAL_MspInit+0x38>)
 80009fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a00:	f003 0302 	and.w	r3, r3, #2
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f06f 0001 	mvn.w	r0, #1
 8000a10:	f000 fb84 	bl	800111c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	58024400 	.word	0x58024400

08000a20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08e      	sub	sp, #56	@ 0x38
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b0f      	cmp	r3, #15
 8000a2c:	d844      	bhi.n	8000ab8 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	2019      	movs	r0, #25
 8000a34:	f000 fb72 	bl	800111c <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a38:	2019      	movs	r0, #25
 8000a3a:	f000 fb89 	bl	8001150 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000a3e:	4a24      	ldr	r2, [pc, #144]	@ (8000ad0 <HAL_InitTick+0xb0>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a44:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <HAL_InitTick+0xb4>)
 8000a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a4a:	4a22      	ldr	r2, [pc, #136]	@ (8000ad4 <HAL_InitTick+0xb4>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000a54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <HAL_InitTick+0xb4>)
 8000a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a62:	f107 020c 	add.w	r2, r7, #12
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f004 f9fb 	bl	8004e68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a72:	f004 f9e3 	bl	8004e3c <HAL_RCC_GetPCLK2Freq>
 8000a76:	4603      	mov	r3, r0
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a7e:	4a16      	ldr	r2, [pc, #88]	@ (8000ad8 <HAL_InitTick+0xb8>)
 8000a80:	fba2 2303 	umull	r2, r3, r2, r3
 8000a84:	0c9b      	lsrs	r3, r3, #18
 8000a86:	3b01      	subs	r3, #1
 8000a88:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <HAL_InitTick+0xbc>)
 8000a8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ae0 <HAL_InitTick+0xc0>)
 8000a8e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <HAL_InitTick+0xbc>)
 8000a92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a96:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a98:	4a10      	ldr	r2, [pc, #64]	@ (8000adc <HAL_InitTick+0xbc>)
 8000a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a9c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <HAL_InitTick+0xbc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <HAL_InitTick+0xbc>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000aaa:	480c      	ldr	r0, [pc, #48]	@ (8000adc <HAL_InitTick+0xbc>)
 8000aac:	f006 f84a 	bl	8006b44 <HAL_TIM_Base_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d107      	bne.n	8000ac6 <HAL_InitTick+0xa6>
 8000ab6:	e001      	b.n	8000abc <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e005      	b.n	8000ac8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000abc:	4807      	ldr	r0, [pc, #28]	@ (8000adc <HAL_InitTick+0xbc>)
 8000abe:	f006 f8a3 	bl	8006c08 <HAL_TIM_Base_Start_IT>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3738      	adds	r7, #56	@ 0x38
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	24000008 	.word	0x24000008
 8000ad4:	58024400 	.word	0x58024400
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	24000528 	.word	0x24000528
 8000ae0:	40010000 	.word	0x40010000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <NMI_Handler+0x4>

08000aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <MemManage_Handler+0x4>

08000afc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <DMA1_Stream0_IRQHandler+0x10>)
 8000b22:	f001 fc7f 	bl	8002424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	24000608 	.word	0x24000608

08000b30 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <TIM1_UP_IRQHandler+0x10>)
 8000b36:	f006 f8df 	bl	8006cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	24000528 	.word	0x24000528

08000b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b48:	4b43      	ldr	r3, [pc, #268]	@ (8000c58 <SystemInit+0x114>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4e:	4a42      	ldr	r2, [pc, #264]	@ (8000c58 <SystemInit+0x114>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b58:	4b40      	ldr	r3, [pc, #256]	@ (8000c5c <SystemInit+0x118>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f003 030f 	and.w	r3, r3, #15
 8000b60:	2b06      	cmp	r3, #6
 8000b62:	d807      	bhi.n	8000b74 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b64:	4b3d      	ldr	r3, [pc, #244]	@ (8000c5c <SystemInit+0x118>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f023 030f 	bic.w	r3, r3, #15
 8000b6c:	4a3b      	ldr	r2, [pc, #236]	@ (8000c5c <SystemInit+0x118>)
 8000b6e:	f043 0307 	orr.w	r3, r3, #7
 8000b72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b74:	4b3a      	ldr	r3, [pc, #232]	@ (8000c60 <SystemInit+0x11c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a39      	ldr	r2, [pc, #228]	@ (8000c60 <SystemInit+0x11c>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b80:	4b37      	ldr	r3, [pc, #220]	@ (8000c60 <SystemInit+0x11c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b86:	4b36      	ldr	r3, [pc, #216]	@ (8000c60 <SystemInit+0x11c>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4935      	ldr	r1, [pc, #212]	@ (8000c60 <SystemInit+0x11c>)
 8000b8c:	4b35      	ldr	r3, [pc, #212]	@ (8000c64 <SystemInit+0x120>)
 8000b8e:	4013      	ands	r3, r2
 8000b90:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b92:	4b32      	ldr	r3, [pc, #200]	@ (8000c5c <SystemInit+0x118>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d007      	beq.n	8000bae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c5c <SystemInit+0x118>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f023 030f 	bic.w	r3, r3, #15
 8000ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8000c5c <SystemInit+0x118>)
 8000ba8:	f043 0307 	orr.w	r3, r3, #7
 8000bac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bae:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <SystemInit+0x11c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c60 <SystemInit+0x11c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bba:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <SystemInit+0x11c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bc0:	4b27      	ldr	r3, [pc, #156]	@ (8000c60 <SystemInit+0x11c>)
 8000bc2:	4a29      	ldr	r2, [pc, #164]	@ (8000c68 <SystemInit+0x124>)
 8000bc4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bc6:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <SystemInit+0x11c>)
 8000bc8:	4a28      	ldr	r2, [pc, #160]	@ (8000c6c <SystemInit+0x128>)
 8000bca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bcc:	4b24      	ldr	r3, [pc, #144]	@ (8000c60 <SystemInit+0x11c>)
 8000bce:	4a28      	ldr	r2, [pc, #160]	@ (8000c70 <SystemInit+0x12c>)
 8000bd0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bd2:	4b23      	ldr	r3, [pc, #140]	@ (8000c60 <SystemInit+0x11c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bd8:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <SystemInit+0x11c>)
 8000bda:	4a25      	ldr	r2, [pc, #148]	@ (8000c70 <SystemInit+0x12c>)
 8000bdc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bde:	4b20      	ldr	r3, [pc, #128]	@ (8000c60 <SystemInit+0x11c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000be4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <SystemInit+0x11c>)
 8000be6:	4a22      	ldr	r2, [pc, #136]	@ (8000c70 <SystemInit+0x12c>)
 8000be8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	@ (8000c60 <SystemInit+0x11c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <SystemInit+0x11c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c60 <SystemInit+0x11c>)
 8000bf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bfa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <SystemInit+0x11c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c02:	4b1c      	ldr	r3, [pc, #112]	@ (8000c74 <SystemInit+0x130>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <SystemInit+0x134>)
 8000c08:	4013      	ands	r3, r2
 8000c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c0e:	d202      	bcs.n	8000c16 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <SystemInit+0x138>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c16:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <SystemInit+0x11c>)
 8000c18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d113      	bne.n	8000c4c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c24:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <SystemInit+0x11c>)
 8000c26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c60 <SystemInit+0x11c>)
 8000c2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <SystemInit+0x13c>)
 8000c36:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c3a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <SystemInit+0x11c>)
 8000c3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c42:	4a07      	ldr	r2, [pc, #28]	@ (8000c60 <SystemInit+0x11c>)
 8000c44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c48:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00
 8000c5c:	52002000 	.word	0x52002000
 8000c60:	58024400 	.word	0x58024400
 8000c64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c68:	02020200 	.word	0x02020200
 8000c6c:	01ff0000 	.word	0x01ff0000
 8000c70:	01010280 	.word	0x01010280
 8000c74:	5c001000 	.word	0x5c001000
 8000c78:	ffff0000 	.word	0xffff0000
 8000c7c:	51008108 	.word	0x51008108
 8000c80:	52004000 	.word	0x52004000

08000c84 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c88:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <ExitRun0Mode+0x2c>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <ExitRun0Mode+0x2c>)
 8000c8e:	f043 0302 	orr.w	r3, r3, #2
 8000c92:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c94:	bf00      	nop
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <ExitRun0Mode+0x2c>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f9      	beq.n	8000c96 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	58024800 	.word	0x58024800

08000cb4 <MX_UART8_Init>:
UART_HandleTypeDef huart8;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000cb8:	4b22      	ldr	r3, [pc, #136]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000cba:	4a23      	ldr	r2, [pc, #140]	@ (8000d48 <MX_UART8_Init+0x94>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cea:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000cfc:	4811      	ldr	r0, [pc, #68]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000cfe:	f006 f9e9 	bl	80070d4 <HAL_UART_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000d08:	f7ff fe66 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000d10:	f007 fd50 	bl	80087b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000d1a:	f7ff fe5d 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4808      	ldr	r0, [pc, #32]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000d22:	f007 fd85 	bl	8008830 <HAL_UARTEx_SetRxFifoThreshold>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000d2c:	f7ff fe54 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	@ (8000d44 <MX_UART8_Init+0x90>)
 8000d32:	f007 fd06 	bl	8008742 <HAL_UARTEx_DisableFifoMode>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000d3c:	f7ff fe4c 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	24000574 	.word	0x24000574
 8000d48:	40007c00 	.word	0x40007c00

08000d4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0ba      	sub	sp, #232	@ 0xe8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	22c0      	movs	r2, #192	@ 0xc0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f009 f881 	bl	8009e74 <memset>
  if(uartHandle->Instance==UART8)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a3e      	ldr	r2, [pc, #248]	@ (8000e70 <HAL_UART_MspInit+0x124>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d175      	bne.n	8000e68 <HAL_UART_MspInit+0x11c>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000d7c:	f04f 0202 	mov.w	r2, #2
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	4618      	mov	r0, r3
 8000d94:	f004 f8aa 	bl	8004eec <HAL_RCCEx_PeriphCLKConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d9e:	f7ff fe1b 	bl	80009d8 <Error_Handler>
    }

    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000da2:	4b34      	ldr	r3, [pc, #208]	@ (8000e74 <HAL_UART_MspInit+0x128>)
 8000da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000da8:	4a32      	ldr	r2, [pc, #200]	@ (8000e74 <HAL_UART_MspInit+0x128>)
 8000daa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000dae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000db2:	4b30      	ldr	r3, [pc, #192]	@ (8000e74 <HAL_UART_MspInit+0x128>)
 8000db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000db8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e74 <HAL_UART_MspInit+0x128>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc6:	4a2b      	ldr	r2, [pc, #172]	@ (8000e74 <HAL_UART_MspInit+0x128>)
 8000dc8:	f043 0310 	orr.w	r3, r3, #16
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd0:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <HAL_UART_MspInit+0x128>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000dde:	2303      	movs	r3, #3
 8000de0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000df6:	2308      	movs	r3, #8
 8000df8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dfc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e00:	4619      	mov	r1, r3
 8000e02:	481d      	ldr	r0, [pc, #116]	@ (8000e78 <HAL_UART_MspInit+0x12c>)
 8000e04:	f002 fe2c 	bl	8003a60 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream0;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <HAL_UART_MspInit+0x130>)
 8000e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8000e80 <HAL_UART_MspInit+0x134>)
 8000e0c:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <HAL_UART_MspInit+0x130>)
 8000e10:	2251      	movs	r2, #81	@ 0x51
 8000e12:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e14:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <HAL_UART_MspInit+0x130>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <HAL_UART_MspInit+0x130>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e20:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <HAL_UART_MspInit+0x130>)
 8000e22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e26:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e28:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <HAL_UART_MspInit+0x130>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <HAL_UART_MspInit+0x130>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8000e34:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <HAL_UART_MspInit+0x130>)
 8000e36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e3a:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <HAL_UART_MspInit+0x130>)
 8000e3e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e42:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <HAL_UART_MspInit+0x130>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8000e4a:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <HAL_UART_MspInit+0x130>)
 8000e4c:	f000 fa06 	bl	800125c <HAL_DMA_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000e56:	f7ff fdbf 	bl	80009d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	@ (8000e7c <HAL_UART_MspInit+0x130>)
 8000e5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000e62:	4a06      	ldr	r2, [pc, #24]	@ (8000e7c <HAL_UART_MspInit+0x130>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8000e68:	bf00      	nop
 8000e6a:	37e8      	adds	r7, #232	@ 0xe8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40007c00 	.word	0x40007c00
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58021000 	.word	0x58021000
 8000e7c:	24000608 	.word	0x24000608
 8000e80:	40020010 	.word	0x40020010

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e84:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000ec0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000e88:	f7ff fefc 	bl	8000c84 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e8c:	f7ff fe5a 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	@ (8000ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f009 f843 	bl	8009f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fcab 	bl	8000814 <main>
  bx  lr
 8000ebe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ec4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ec8:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000ecc:	0800a0f8 	.word	0x0800a0f8
  ldr r2, =_sbss
 8000ed0:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8000ed4:	24004518 	.word	0x24004518

08000ed8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC3_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	f000 f90f 	bl	8001106 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ee8:	f003 fde8 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8000eec:	4602      	mov	r2, r0
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <HAL_Init+0x68>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	0a1b      	lsrs	r3, r3, #8
 8000ef4:	f003 030f 	and.w	r3, r3, #15
 8000ef8:	4913      	ldr	r1, [pc, #76]	@ (8000f48 <HAL_Init+0x6c>)
 8000efa:	5ccb      	ldrb	r3, [r1, r3]
 8000efc:	f003 031f 	and.w	r3, r3, #31
 8000f00:	fa22 f303 	lsr.w	r3, r2, r3
 8000f04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <HAL_Init+0x68>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f48 <HAL_Init+0x6c>)
 8000f10:	5cd3      	ldrb	r3, [r2, r3]
 8000f12:	f003 031f 	and.w	r3, r3, #31
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <HAL_Init+0x70>)
 8000f1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f20:	4a0b      	ldr	r2, [pc, #44]	@ (8000f50 <HAL_Init+0x74>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f26:	200f      	movs	r0, #15
 8000f28:	f7ff fd7a 	bl	8000a20 <HAL_InitTick>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e002      	b.n	8000f3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f36:	f7ff fd55 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	58024400 	.word	0x58024400
 8000f48:	0800a0a8 	.word	0x0800a0a8
 8000f4c:	24000004 	.word	0x24000004
 8000f50:	24000000 	.word	0x24000000

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	2400000c 	.word	0x2400000c
 8000f78:	24000680 	.word	0x24000680

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	24000680 	.word	0x24000680

08000f94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f98:	4b03      	ldr	r3, [pc, #12]	@ (8000fa8 <HAL_GetREVID+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	0c1b      	lsrs	r3, r3, #16
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	5c001000 	.word	0x5c001000

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <__NVIC_SetPriorityGrouping+0x40>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <__NVIC_SetPriorityGrouping+0x40>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00
 8000ff0:	05fa0000 	.word	0x05fa0000

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	@ (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	@ (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	@ (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	@ (800109c <__NVIC_SetPriority+0x50>)
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	@ 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	@ 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ff4c 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800112a:	f7ff ff63 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 800112e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	6978      	ldr	r0, [r7, #20]
 8001136:	f7ff ffb3 	bl	80010a0 <NVIC_EncodePriority>
 800113a:	4602      	mov	r2, r0
 800113c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff82 	bl	800104c <__NVIC_SetPriority>
}
 8001148:	bf00      	nop
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff56 	bl	8001010 <__NVIC_EnableIRQ>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001170:	f3bf 8f5f 	dmb	sy
}
 8001174:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001176:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <HAL_MPU_Disable+0x28>)
 8001178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117a:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <HAL_MPU_Disable+0x28>)
 800117c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001180:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_MPU_Disable+0x2c>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00
 8001198:	e000ed90 	.word	0xe000ed90

0800119c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80011a4:	4a0b      	ldr	r2, [pc, #44]	@ (80011d4 <HAL_MPU_Enable+0x38>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <HAL_MPU_Enable+0x3c>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b2:	4a09      	ldr	r2, [pc, #36]	@ (80011d8 <HAL_MPU_Enable+0x3c>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011b8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80011ba:	f3bf 8f4f 	dsb	sy
}
 80011be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011c0:	f3bf 8f6f 	isb	sy
}
 80011c4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed90 	.word	0xe000ed90
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	785a      	ldrb	r2, [r3, #1]
 80011e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <HAL_MPU_ConfigRegion+0x7c>)
 80011ea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <HAL_MPU_ConfigRegion+0x7c>)
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4a19      	ldr	r2, [pc, #100]	@ (8001258 <HAL_MPU_ConfigRegion+0x7c>)
 80011f2:	f023 0301 	bic.w	r3, r3, #1
 80011f6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80011f8:	4a17      	ldr	r2, [pc, #92]	@ (8001258 <HAL_MPU_ConfigRegion+0x7c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7b1b      	ldrb	r3, [r3, #12]
 8001204:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7adb      	ldrb	r3, [r3, #11]
 800120a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800120c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7a9b      	ldrb	r3, [r3, #10]
 8001212:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001214:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7b5b      	ldrb	r3, [r3, #13]
 800121a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800121c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7b9b      	ldrb	r3, [r3, #14]
 8001222:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001224:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7bdb      	ldrb	r3, [r3, #15]
 800122a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800122c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7a5b      	ldrb	r3, [r3, #9]
 8001232:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001234:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7a1b      	ldrb	r3, [r3, #8]
 800123a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800123c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001246:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001248:	6113      	str	r3, [r2, #16]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed90 	.word	0xe000ed90

0800125c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff fe8a 	bl	8000f7c <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e316      	b.n	80018a2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a66      	ldr	r2, [pc, #408]	@ (8001414 <HAL_DMA_Init+0x1b8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d04a      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a65      	ldr	r2, [pc, #404]	@ (8001418 <HAL_DMA_Init+0x1bc>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d045      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a63      	ldr	r2, [pc, #396]	@ (800141c <HAL_DMA_Init+0x1c0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d040      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a62      	ldr	r2, [pc, #392]	@ (8001420 <HAL_DMA_Init+0x1c4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d03b      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a60      	ldr	r2, [pc, #384]	@ (8001424 <HAL_DMA_Init+0x1c8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d036      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001428 <HAL_DMA_Init+0x1cc>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d031      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a5d      	ldr	r2, [pc, #372]	@ (800142c <HAL_DMA_Init+0x1d0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d02c      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a5c      	ldr	r2, [pc, #368]	@ (8001430 <HAL_DMA_Init+0x1d4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d027      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a5a      	ldr	r2, [pc, #360]	@ (8001434 <HAL_DMA_Init+0x1d8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d022      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a59      	ldr	r2, [pc, #356]	@ (8001438 <HAL_DMA_Init+0x1dc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d01d      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a57      	ldr	r2, [pc, #348]	@ (800143c <HAL_DMA_Init+0x1e0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d018      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a56      	ldr	r2, [pc, #344]	@ (8001440 <HAL_DMA_Init+0x1e4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d013      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a54      	ldr	r2, [pc, #336]	@ (8001444 <HAL_DMA_Init+0x1e8>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00e      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a53      	ldr	r2, [pc, #332]	@ (8001448 <HAL_DMA_Init+0x1ec>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d009      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a51      	ldr	r2, [pc, #324]	@ (800144c <HAL_DMA_Init+0x1f0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d004      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a50      	ldr	r2, [pc, #320]	@ (8001450 <HAL_DMA_Init+0x1f4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d101      	bne.n	8001318 <HAL_DMA_Init+0xbc>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_DMA_Init+0xbe>
 8001318:	2300      	movs	r3, #0
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 813b 	beq.w	8001596 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2202      	movs	r2, #2
 8001324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a37      	ldr	r2, [pc, #220]	@ (8001414 <HAL_DMA_Init+0x1b8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d04a      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a36      	ldr	r2, [pc, #216]	@ (8001418 <HAL_DMA_Init+0x1bc>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d045      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a34      	ldr	r2, [pc, #208]	@ (800141c <HAL_DMA_Init+0x1c0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d040      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a33      	ldr	r2, [pc, #204]	@ (8001420 <HAL_DMA_Init+0x1c4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d03b      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a31      	ldr	r2, [pc, #196]	@ (8001424 <HAL_DMA_Init+0x1c8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d036      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a30      	ldr	r2, [pc, #192]	@ (8001428 <HAL_DMA_Init+0x1cc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d031      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a2e      	ldr	r2, [pc, #184]	@ (800142c <HAL_DMA_Init+0x1d0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d02c      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a2d      	ldr	r2, [pc, #180]	@ (8001430 <HAL_DMA_Init+0x1d4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d027      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a2b      	ldr	r2, [pc, #172]	@ (8001434 <HAL_DMA_Init+0x1d8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d022      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a2a      	ldr	r2, [pc, #168]	@ (8001438 <HAL_DMA_Init+0x1dc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d01d      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a28      	ldr	r2, [pc, #160]	@ (800143c <HAL_DMA_Init+0x1e0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d018      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a27      	ldr	r2, [pc, #156]	@ (8001440 <HAL_DMA_Init+0x1e4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d013      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a25      	ldr	r2, [pc, #148]	@ (8001444 <HAL_DMA_Init+0x1e8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00e      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a24      	ldr	r2, [pc, #144]	@ (8001448 <HAL_DMA_Init+0x1ec>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d009      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a22      	ldr	r2, [pc, #136]	@ (800144c <HAL_DMA_Init+0x1f0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d004      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a21      	ldr	r2, [pc, #132]	@ (8001450 <HAL_DMA_Init+0x1f4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d108      	bne.n	80013e2 <HAL_DMA_Init+0x186>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e007      	b.n	80013f2 <HAL_DMA_Init+0x196>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0201 	bic.w	r2, r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80013f2:	e02f      	b.n	8001454 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013f4:	f7ff fdc2 	bl	8000f7c <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b05      	cmp	r3, #5
 8001400:	d928      	bls.n	8001454 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2220      	movs	r2, #32
 8001406:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2203      	movs	r2, #3
 800140c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e246      	b.n	80018a2 <HAL_DMA_Init+0x646>
 8001414:	40020010 	.word	0x40020010
 8001418:	40020028 	.word	0x40020028
 800141c:	40020040 	.word	0x40020040
 8001420:	40020058 	.word	0x40020058
 8001424:	40020070 	.word	0x40020070
 8001428:	40020088 	.word	0x40020088
 800142c:	400200a0 	.word	0x400200a0
 8001430:	400200b8 	.word	0x400200b8
 8001434:	40020410 	.word	0x40020410
 8001438:	40020428 	.word	0x40020428
 800143c:	40020440 	.word	0x40020440
 8001440:	40020458 	.word	0x40020458
 8001444:	40020470 	.word	0x40020470
 8001448:	40020488 	.word	0x40020488
 800144c:	400204a0 	.word	0x400204a0
 8001450:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1c8      	bne.n	80013f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4b83      	ldr	r3, [pc, #524]	@ (800167c <HAL_DMA_Init+0x420>)
 800146e:	4013      	ands	r3, r2
 8001470:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800147a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001486:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001492:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	4313      	orrs	r3, r2
 800149e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d107      	bne.n	80014b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b0:	4313      	orrs	r3, r2
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80014b8:	4b71      	ldr	r3, [pc, #452]	@ (8001680 <HAL_DMA_Init+0x424>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b71      	ldr	r3, [pc, #452]	@ (8001684 <HAL_DMA_Init+0x428>)
 80014be:	4013      	ands	r3, r2
 80014c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014c4:	d328      	bcc.n	8001518 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b28      	cmp	r3, #40	@ 0x28
 80014cc:	d903      	bls.n	80014d6 <HAL_DMA_Init+0x27a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80014d4:	d917      	bls.n	8001506 <HAL_DMA_Init+0x2aa>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b3e      	cmp	r3, #62	@ 0x3e
 80014dc:	d903      	bls.n	80014e6 <HAL_DMA_Init+0x28a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b42      	cmp	r3, #66	@ 0x42
 80014e4:	d90f      	bls.n	8001506 <HAL_DMA_Init+0x2aa>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b46      	cmp	r3, #70	@ 0x46
 80014ec:	d903      	bls.n	80014f6 <HAL_DMA_Init+0x29a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b48      	cmp	r3, #72	@ 0x48
 80014f4:	d907      	bls.n	8001506 <HAL_DMA_Init+0x2aa>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b4e      	cmp	r3, #78	@ 0x4e
 80014fc:	d905      	bls.n	800150a <HAL_DMA_Init+0x2ae>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b52      	cmp	r3, #82	@ 0x52
 8001504:	d801      	bhi.n	800150a <HAL_DMA_Init+0x2ae>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_DMA_Init+0x2b0>
 800150a:	2300      	movs	r3, #0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001516:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f023 0307 	bic.w	r3, r3, #7
 800152e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	4313      	orrs	r3, r2
 8001538:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153e:	2b04      	cmp	r3, #4
 8001540:	d117      	bne.n	8001572 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4313      	orrs	r3, r2
 800154a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00e      	beq.n	8001572 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f002 f8f9 	bl	800374c <DMA_CheckFifoParam>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2240      	movs	r2, #64	@ 0x40
 8001564:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e197      	b.n	80018a2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f002 f834 	bl	80035e8 <DMA_CalcBaseAndBitshift>
 8001580:	4603      	mov	r3, r0
 8001582:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	223f      	movs	r2, #63	@ 0x3f
 800158e:	409a      	lsls	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	e0cd      	b.n	8001732 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a3b      	ldr	r2, [pc, #236]	@ (8001688 <HAL_DMA_Init+0x42c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d022      	beq.n	80015e6 <HAL_DMA_Init+0x38a>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a39      	ldr	r2, [pc, #228]	@ (800168c <HAL_DMA_Init+0x430>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d01d      	beq.n	80015e6 <HAL_DMA_Init+0x38a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a38      	ldr	r2, [pc, #224]	@ (8001690 <HAL_DMA_Init+0x434>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d018      	beq.n	80015e6 <HAL_DMA_Init+0x38a>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a36      	ldr	r2, [pc, #216]	@ (8001694 <HAL_DMA_Init+0x438>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d013      	beq.n	80015e6 <HAL_DMA_Init+0x38a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a35      	ldr	r2, [pc, #212]	@ (8001698 <HAL_DMA_Init+0x43c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d00e      	beq.n	80015e6 <HAL_DMA_Init+0x38a>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a33      	ldr	r2, [pc, #204]	@ (800169c <HAL_DMA_Init+0x440>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d009      	beq.n	80015e6 <HAL_DMA_Init+0x38a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a32      	ldr	r2, [pc, #200]	@ (80016a0 <HAL_DMA_Init+0x444>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d004      	beq.n	80015e6 <HAL_DMA_Init+0x38a>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a30      	ldr	r2, [pc, #192]	@ (80016a4 <HAL_DMA_Init+0x448>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <HAL_DMA_Init+0x38e>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <HAL_DMA_Init+0x390>
 80015ea:	2300      	movs	r3, #0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 8097 	beq.w	8001720 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a24      	ldr	r2, [pc, #144]	@ (8001688 <HAL_DMA_Init+0x42c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d021      	beq.n	8001640 <HAL_DMA_Init+0x3e4>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a22      	ldr	r2, [pc, #136]	@ (800168c <HAL_DMA_Init+0x430>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d01c      	beq.n	8001640 <HAL_DMA_Init+0x3e4>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a21      	ldr	r2, [pc, #132]	@ (8001690 <HAL_DMA_Init+0x434>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d017      	beq.n	8001640 <HAL_DMA_Init+0x3e4>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a1f      	ldr	r2, [pc, #124]	@ (8001694 <HAL_DMA_Init+0x438>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d012      	beq.n	8001640 <HAL_DMA_Init+0x3e4>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a1e      	ldr	r2, [pc, #120]	@ (8001698 <HAL_DMA_Init+0x43c>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d00d      	beq.n	8001640 <HAL_DMA_Init+0x3e4>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1c      	ldr	r2, [pc, #112]	@ (800169c <HAL_DMA_Init+0x440>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d008      	beq.n	8001640 <HAL_DMA_Init+0x3e4>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1b      	ldr	r2, [pc, #108]	@ (80016a0 <HAL_DMA_Init+0x444>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d003      	beq.n	8001640 <HAL_DMA_Init+0x3e4>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a19      	ldr	r2, [pc, #100]	@ (80016a4 <HAL_DMA_Init+0x448>)
 800163e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <HAL_DMA_Init+0x44c>)
 800165c:	4013      	ands	r3, r2
 800165e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b40      	cmp	r3, #64	@ 0x40
 8001666:	d021      	beq.n	80016ac <HAL_DMA_Init+0x450>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b80      	cmp	r3, #128	@ 0x80
 800166e:	d102      	bne.n	8001676 <HAL_DMA_Init+0x41a>
 8001670:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001674:	e01b      	b.n	80016ae <HAL_DMA_Init+0x452>
 8001676:	2300      	movs	r3, #0
 8001678:	e019      	b.n	80016ae <HAL_DMA_Init+0x452>
 800167a:	bf00      	nop
 800167c:	fe10803f 	.word	0xfe10803f
 8001680:	5c001000 	.word	0x5c001000
 8001684:	ffff0000 	.word	0xffff0000
 8001688:	58025408 	.word	0x58025408
 800168c:	5802541c 	.word	0x5802541c
 8001690:	58025430 	.word	0x58025430
 8001694:	58025444 	.word	0x58025444
 8001698:	58025458 	.word	0x58025458
 800169c:	5802546c 	.word	0x5802546c
 80016a0:	58025480 	.word	0x58025480
 80016a4:	58025494 	.word	0x58025494
 80016a8:	fffe000f 	.word	0xfffe000f
 80016ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68d2      	ldr	r2, [r2, #12]
 80016b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b6e      	ldr	r3, [pc, #440]	@ (80018ac <HAL_DMA_Init+0x650>)
 80016f4:	4413      	add	r3, r2
 80016f6:	4a6e      	ldr	r2, [pc, #440]	@ (80018b0 <HAL_DMA_Init+0x654>)
 80016f8:	fba2 2303 	umull	r2, r3, r2, r3
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	009a      	lsls	r2, r3, #2
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f001 ff6f 	bl	80035e8 <DMA_CalcBaseAndBitshift>
 800170a:	4603      	mov	r3, r0
 800170c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	2201      	movs	r2, #1
 8001718:	409a      	lsls	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	e008      	b.n	8001732 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2240      	movs	r2, #64	@ 0x40
 8001724:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2203      	movs	r2, #3
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e0b7      	b.n	80018a2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a5f      	ldr	r2, [pc, #380]	@ (80018b4 <HAL_DMA_Init+0x658>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d072      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a5d      	ldr	r2, [pc, #372]	@ (80018b8 <HAL_DMA_Init+0x65c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d06d      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a5c      	ldr	r2, [pc, #368]	@ (80018bc <HAL_DMA_Init+0x660>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d068      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a5a      	ldr	r2, [pc, #360]	@ (80018c0 <HAL_DMA_Init+0x664>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d063      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a59      	ldr	r2, [pc, #356]	@ (80018c4 <HAL_DMA_Init+0x668>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d05e      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a57      	ldr	r2, [pc, #348]	@ (80018c8 <HAL_DMA_Init+0x66c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d059      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a56      	ldr	r2, [pc, #344]	@ (80018cc <HAL_DMA_Init+0x670>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d054      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a54      	ldr	r2, [pc, #336]	@ (80018d0 <HAL_DMA_Init+0x674>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d04f      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a53      	ldr	r2, [pc, #332]	@ (80018d4 <HAL_DMA_Init+0x678>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d04a      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a51      	ldr	r2, [pc, #324]	@ (80018d8 <HAL_DMA_Init+0x67c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d045      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a50      	ldr	r2, [pc, #320]	@ (80018dc <HAL_DMA_Init+0x680>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d040      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a4e      	ldr	r2, [pc, #312]	@ (80018e0 <HAL_DMA_Init+0x684>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d03b      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a4d      	ldr	r2, [pc, #308]	@ (80018e4 <HAL_DMA_Init+0x688>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d036      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a4b      	ldr	r2, [pc, #300]	@ (80018e8 <HAL_DMA_Init+0x68c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d031      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a4a      	ldr	r2, [pc, #296]	@ (80018ec <HAL_DMA_Init+0x690>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d02c      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a48      	ldr	r2, [pc, #288]	@ (80018f0 <HAL_DMA_Init+0x694>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d027      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a47      	ldr	r2, [pc, #284]	@ (80018f4 <HAL_DMA_Init+0x698>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d022      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a45      	ldr	r2, [pc, #276]	@ (80018f8 <HAL_DMA_Init+0x69c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d01d      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a44      	ldr	r2, [pc, #272]	@ (80018fc <HAL_DMA_Init+0x6a0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d018      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a42      	ldr	r2, [pc, #264]	@ (8001900 <HAL_DMA_Init+0x6a4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a41      	ldr	r2, [pc, #260]	@ (8001904 <HAL_DMA_Init+0x6a8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d00e      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a3f      	ldr	r2, [pc, #252]	@ (8001908 <HAL_DMA_Init+0x6ac>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d009      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a3e      	ldr	r2, [pc, #248]	@ (800190c <HAL_DMA_Init+0x6b0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d004      	beq.n	8001822 <HAL_DMA_Init+0x5c6>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a3c      	ldr	r2, [pc, #240]	@ (8001910 <HAL_DMA_Init+0x6b4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_DMA_Init+0x5ca>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_DMA_Init+0x5cc>
 8001826:	2300      	movs	r3, #0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d032      	beq.n	8001892 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f002 f809 	bl	8003844 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b80      	cmp	r3, #128	@ 0x80
 8001838:	d102      	bne.n	8001840 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001854:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d010      	beq.n	8001880 <HAL_DMA_Init+0x624>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b08      	cmp	r3, #8
 8001864:	d80c      	bhi.n	8001880 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f002 f886 	bl	8003978 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	e008      	b.n	8001892 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	a7fdabf8 	.word	0xa7fdabf8
 80018b0:	cccccccd 	.word	0xcccccccd
 80018b4:	40020010 	.word	0x40020010
 80018b8:	40020028 	.word	0x40020028
 80018bc:	40020040 	.word	0x40020040
 80018c0:	40020058 	.word	0x40020058
 80018c4:	40020070 	.word	0x40020070
 80018c8:	40020088 	.word	0x40020088
 80018cc:	400200a0 	.word	0x400200a0
 80018d0:	400200b8 	.word	0x400200b8
 80018d4:	40020410 	.word	0x40020410
 80018d8:	40020428 	.word	0x40020428
 80018dc:	40020440 	.word	0x40020440
 80018e0:	40020458 	.word	0x40020458
 80018e4:	40020470 	.word	0x40020470
 80018e8:	40020488 	.word	0x40020488
 80018ec:	400204a0 	.word	0x400204a0
 80018f0:	400204b8 	.word	0x400204b8
 80018f4:	58025408 	.word	0x58025408
 80018f8:	5802541c 	.word	0x5802541c
 80018fc:	58025430 	.word	0x58025430
 8001900:	58025444 	.word	0x58025444
 8001904:	58025458 	.word	0x58025458
 8001908:	5802546c 	.word	0x5802546c
 800190c:	58025480 	.word	0x58025480
 8001910:	58025494 	.word	0x58025494

08001914 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e226      	b.n	8001d7e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_DMA_Start_IT+0x2a>
 800193a:	2302      	movs	r3, #2
 800193c:	e21f      	b.n	8001d7e <HAL_DMA_Start_IT+0x46a>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b01      	cmp	r3, #1
 8001950:	f040 820a 	bne.w	8001d68 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a68      	ldr	r2, [pc, #416]	@ (8001b08 <HAL_DMA_Start_IT+0x1f4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d04a      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a66      	ldr	r2, [pc, #408]	@ (8001b0c <HAL_DMA_Start_IT+0x1f8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d045      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a65      	ldr	r2, [pc, #404]	@ (8001b10 <HAL_DMA_Start_IT+0x1fc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d040      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a63      	ldr	r2, [pc, #396]	@ (8001b14 <HAL_DMA_Start_IT+0x200>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d03b      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a62      	ldr	r2, [pc, #392]	@ (8001b18 <HAL_DMA_Start_IT+0x204>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d036      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a60      	ldr	r2, [pc, #384]	@ (8001b1c <HAL_DMA_Start_IT+0x208>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d031      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001b20 <HAL_DMA_Start_IT+0x20c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d02c      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001b24 <HAL_DMA_Start_IT+0x210>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d027      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a5c      	ldr	r2, [pc, #368]	@ (8001b28 <HAL_DMA_Start_IT+0x214>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d022      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a5a      	ldr	r2, [pc, #360]	@ (8001b2c <HAL_DMA_Start_IT+0x218>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01d      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a59      	ldr	r2, [pc, #356]	@ (8001b30 <HAL_DMA_Start_IT+0x21c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d018      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a57      	ldr	r2, [pc, #348]	@ (8001b34 <HAL_DMA_Start_IT+0x220>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a56      	ldr	r2, [pc, #344]	@ (8001b38 <HAL_DMA_Start_IT+0x224>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00e      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a54      	ldr	r2, [pc, #336]	@ (8001b3c <HAL_DMA_Start_IT+0x228>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d009      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a53      	ldr	r2, [pc, #332]	@ (8001b40 <HAL_DMA_Start_IT+0x22c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d004      	beq.n	8001a02 <HAL_DMA_Start_IT+0xee>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a51      	ldr	r2, [pc, #324]	@ (8001b44 <HAL_DMA_Start_IT+0x230>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d108      	bne.n	8001a14 <HAL_DMA_Start_IT+0x100>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0201 	bic.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	e007      	b.n	8001a24 <HAL_DMA_Start_IT+0x110>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f001 fc30 	bl	8003290 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a34      	ldr	r2, [pc, #208]	@ (8001b08 <HAL_DMA_Start_IT+0x1f4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d04a      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a33      	ldr	r2, [pc, #204]	@ (8001b0c <HAL_DMA_Start_IT+0x1f8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d045      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a31      	ldr	r2, [pc, #196]	@ (8001b10 <HAL_DMA_Start_IT+0x1fc>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d040      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a30      	ldr	r2, [pc, #192]	@ (8001b14 <HAL_DMA_Start_IT+0x200>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d03b      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a2e      	ldr	r2, [pc, #184]	@ (8001b18 <HAL_DMA_Start_IT+0x204>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d036      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a2d      	ldr	r2, [pc, #180]	@ (8001b1c <HAL_DMA_Start_IT+0x208>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d031      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a2b      	ldr	r2, [pc, #172]	@ (8001b20 <HAL_DMA_Start_IT+0x20c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d02c      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8001b24 <HAL_DMA_Start_IT+0x210>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d027      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a28      	ldr	r2, [pc, #160]	@ (8001b28 <HAL_DMA_Start_IT+0x214>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d022      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a27      	ldr	r2, [pc, #156]	@ (8001b2c <HAL_DMA_Start_IT+0x218>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d01d      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a25      	ldr	r2, [pc, #148]	@ (8001b30 <HAL_DMA_Start_IT+0x21c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d018      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a24      	ldr	r2, [pc, #144]	@ (8001b34 <HAL_DMA_Start_IT+0x220>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d013      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a22      	ldr	r2, [pc, #136]	@ (8001b38 <HAL_DMA_Start_IT+0x224>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00e      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a21      	ldr	r2, [pc, #132]	@ (8001b3c <HAL_DMA_Start_IT+0x228>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d009      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b40 <HAL_DMA_Start_IT+0x22c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d004      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x1bc>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1e      	ldr	r2, [pc, #120]	@ (8001b44 <HAL_DMA_Start_IT+0x230>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_DMA_Start_IT+0x1c0>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_DMA_Start_IT+0x1c2>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d036      	beq.n	8001b48 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 021e 	bic.w	r2, r3, #30
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0216 	orr.w	r2, r2, #22
 8001aec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d03e      	beq.n	8001b74 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0208 	orr.w	r2, r2, #8
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	e035      	b.n	8001b74 <HAL_DMA_Start_IT+0x260>
 8001b08:	40020010 	.word	0x40020010
 8001b0c:	40020028 	.word	0x40020028
 8001b10:	40020040 	.word	0x40020040
 8001b14:	40020058 	.word	0x40020058
 8001b18:	40020070 	.word	0x40020070
 8001b1c:	40020088 	.word	0x40020088
 8001b20:	400200a0 	.word	0x400200a0
 8001b24:	400200b8 	.word	0x400200b8
 8001b28:	40020410 	.word	0x40020410
 8001b2c:	40020428 	.word	0x40020428
 8001b30:	40020440 	.word	0x40020440
 8001b34:	40020458 	.word	0x40020458
 8001b38:	40020470 	.word	0x40020470
 8001b3c:	40020488 	.word	0x40020488
 8001b40:	400204a0 	.word	0x400204a0
 8001b44:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 020e 	bic.w	r2, r3, #14
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 020a 	orr.w	r2, r2, #10
 8001b5a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0204 	orr.w	r2, r2, #4
 8001b72:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a83      	ldr	r2, [pc, #524]	@ (8001d88 <HAL_DMA_Start_IT+0x474>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d072      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a82      	ldr	r2, [pc, #520]	@ (8001d8c <HAL_DMA_Start_IT+0x478>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d06d      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a80      	ldr	r2, [pc, #512]	@ (8001d90 <HAL_DMA_Start_IT+0x47c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d068      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a7f      	ldr	r2, [pc, #508]	@ (8001d94 <HAL_DMA_Start_IT+0x480>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d063      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a7d      	ldr	r2, [pc, #500]	@ (8001d98 <HAL_DMA_Start_IT+0x484>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d05e      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a7c      	ldr	r2, [pc, #496]	@ (8001d9c <HAL_DMA_Start_IT+0x488>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d059      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a7a      	ldr	r2, [pc, #488]	@ (8001da0 <HAL_DMA_Start_IT+0x48c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d054      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a79      	ldr	r2, [pc, #484]	@ (8001da4 <HAL_DMA_Start_IT+0x490>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d04f      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a77      	ldr	r2, [pc, #476]	@ (8001da8 <HAL_DMA_Start_IT+0x494>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d04a      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a76      	ldr	r2, [pc, #472]	@ (8001dac <HAL_DMA_Start_IT+0x498>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d045      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a74      	ldr	r2, [pc, #464]	@ (8001db0 <HAL_DMA_Start_IT+0x49c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d040      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a73      	ldr	r2, [pc, #460]	@ (8001db4 <HAL_DMA_Start_IT+0x4a0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d03b      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a71      	ldr	r2, [pc, #452]	@ (8001db8 <HAL_DMA_Start_IT+0x4a4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d036      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a70      	ldr	r2, [pc, #448]	@ (8001dbc <HAL_DMA_Start_IT+0x4a8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d031      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc0 <HAL_DMA_Start_IT+0x4ac>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d02c      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6d      	ldr	r2, [pc, #436]	@ (8001dc4 <HAL_DMA_Start_IT+0x4b0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d027      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a6b      	ldr	r2, [pc, #428]	@ (8001dc8 <HAL_DMA_Start_IT+0x4b4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d022      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a6a      	ldr	r2, [pc, #424]	@ (8001dcc <HAL_DMA_Start_IT+0x4b8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d01d      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a68      	ldr	r2, [pc, #416]	@ (8001dd0 <HAL_DMA_Start_IT+0x4bc>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d018      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a67      	ldr	r2, [pc, #412]	@ (8001dd4 <HAL_DMA_Start_IT+0x4c0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d013      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a65      	ldr	r2, [pc, #404]	@ (8001dd8 <HAL_DMA_Start_IT+0x4c4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00e      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a64      	ldr	r2, [pc, #400]	@ (8001ddc <HAL_DMA_Start_IT+0x4c8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d009      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a62      	ldr	r2, [pc, #392]	@ (8001de0 <HAL_DMA_Start_IT+0x4cc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d004      	beq.n	8001c64 <HAL_DMA_Start_IT+0x350>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a61      	ldr	r2, [pc, #388]	@ (8001de4 <HAL_DMA_Start_IT+0x4d0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d101      	bne.n	8001c68 <HAL_DMA_Start_IT+0x354>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_DMA_Start_IT+0x356>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d01a      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d007      	beq.n	8001c8c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c8a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ca2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a37      	ldr	r2, [pc, #220]	@ (8001d88 <HAL_DMA_Start_IT+0x474>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d04a      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a36      	ldr	r2, [pc, #216]	@ (8001d8c <HAL_DMA_Start_IT+0x478>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d045      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a34      	ldr	r2, [pc, #208]	@ (8001d90 <HAL_DMA_Start_IT+0x47c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d040      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a33      	ldr	r2, [pc, #204]	@ (8001d94 <HAL_DMA_Start_IT+0x480>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d03b      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a31      	ldr	r2, [pc, #196]	@ (8001d98 <HAL_DMA_Start_IT+0x484>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d036      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a30      	ldr	r2, [pc, #192]	@ (8001d9c <HAL_DMA_Start_IT+0x488>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d031      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a2e      	ldr	r2, [pc, #184]	@ (8001da0 <HAL_DMA_Start_IT+0x48c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d02c      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a2d      	ldr	r2, [pc, #180]	@ (8001da4 <HAL_DMA_Start_IT+0x490>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d027      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8001da8 <HAL_DMA_Start_IT+0x494>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d022      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a2a      	ldr	r2, [pc, #168]	@ (8001dac <HAL_DMA_Start_IT+0x498>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d01d      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a28      	ldr	r2, [pc, #160]	@ (8001db0 <HAL_DMA_Start_IT+0x49c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d018      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a27      	ldr	r2, [pc, #156]	@ (8001db4 <HAL_DMA_Start_IT+0x4a0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a25      	ldr	r2, [pc, #148]	@ (8001db8 <HAL_DMA_Start_IT+0x4a4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00e      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a24      	ldr	r2, [pc, #144]	@ (8001dbc <HAL_DMA_Start_IT+0x4a8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a22      	ldr	r2, [pc, #136]	@ (8001dc0 <HAL_DMA_Start_IT+0x4ac>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d004      	beq.n	8001d44 <HAL_DMA_Start_IT+0x430>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a21      	ldr	r2, [pc, #132]	@ (8001dc4 <HAL_DMA_Start_IT+0x4b0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d108      	bne.n	8001d56 <HAL_DMA_Start_IT+0x442>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e012      	b.n	8001d7c <HAL_DMA_Start_IT+0x468>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e009      	b.n	8001d7c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40020010 	.word	0x40020010
 8001d8c:	40020028 	.word	0x40020028
 8001d90:	40020040 	.word	0x40020040
 8001d94:	40020058 	.word	0x40020058
 8001d98:	40020070 	.word	0x40020070
 8001d9c:	40020088 	.word	0x40020088
 8001da0:	400200a0 	.word	0x400200a0
 8001da4:	400200b8 	.word	0x400200b8
 8001da8:	40020410 	.word	0x40020410
 8001dac:	40020428 	.word	0x40020428
 8001db0:	40020440 	.word	0x40020440
 8001db4:	40020458 	.word	0x40020458
 8001db8:	40020470 	.word	0x40020470
 8001dbc:	40020488 	.word	0x40020488
 8001dc0:	400204a0 	.word	0x400204a0
 8001dc4:	400204b8 	.word	0x400204b8
 8001dc8:	58025408 	.word	0x58025408
 8001dcc:	5802541c 	.word	0x5802541c
 8001dd0:	58025430 	.word	0x58025430
 8001dd4:	58025444 	.word	0x58025444
 8001dd8:	58025458 	.word	0x58025458
 8001ddc:	5802546c 	.word	0x5802546c
 8001de0:	58025480 	.word	0x58025480
 8001de4:	58025494 	.word	0x58025494

08001de8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff f8c4 	bl	8000f7c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e2dc      	b.n	80023ba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d008      	beq.n	8001e1e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2280      	movs	r2, #128	@ 0x80
 8001e10:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e2cd      	b.n	80023ba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a76      	ldr	r2, [pc, #472]	@ (8001ffc <HAL_DMA_Abort+0x214>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d04a      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a74      	ldr	r2, [pc, #464]	@ (8002000 <HAL_DMA_Abort+0x218>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d045      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a73      	ldr	r2, [pc, #460]	@ (8002004 <HAL_DMA_Abort+0x21c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d040      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a71      	ldr	r2, [pc, #452]	@ (8002008 <HAL_DMA_Abort+0x220>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d03b      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a70      	ldr	r2, [pc, #448]	@ (800200c <HAL_DMA_Abort+0x224>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d036      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a6e      	ldr	r2, [pc, #440]	@ (8002010 <HAL_DMA_Abort+0x228>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d031      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a6d      	ldr	r2, [pc, #436]	@ (8002014 <HAL_DMA_Abort+0x22c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d02c      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a6b      	ldr	r2, [pc, #428]	@ (8002018 <HAL_DMA_Abort+0x230>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d027      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6a      	ldr	r2, [pc, #424]	@ (800201c <HAL_DMA_Abort+0x234>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d022      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a68      	ldr	r2, [pc, #416]	@ (8002020 <HAL_DMA_Abort+0x238>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01d      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a67      	ldr	r2, [pc, #412]	@ (8002024 <HAL_DMA_Abort+0x23c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d018      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a65      	ldr	r2, [pc, #404]	@ (8002028 <HAL_DMA_Abort+0x240>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d013      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a64      	ldr	r2, [pc, #400]	@ (800202c <HAL_DMA_Abort+0x244>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d00e      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a62      	ldr	r2, [pc, #392]	@ (8002030 <HAL_DMA_Abort+0x248>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d009      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a61      	ldr	r2, [pc, #388]	@ (8002034 <HAL_DMA_Abort+0x24c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d004      	beq.n	8001ebe <HAL_DMA_Abort+0xd6>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a5f      	ldr	r2, [pc, #380]	@ (8002038 <HAL_DMA_Abort+0x250>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_DMA_Abort+0xda>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_DMA_Abort+0xdc>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 021e 	bic.w	r2, r2, #30
 8001ed6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ee6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	e00a      	b.n	8001f06 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 020e 	bic.w	r2, r2, #14
 8001efe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a3c      	ldr	r2, [pc, #240]	@ (8001ffc <HAL_DMA_Abort+0x214>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d072      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a3a      	ldr	r2, [pc, #232]	@ (8002000 <HAL_DMA_Abort+0x218>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d06d      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a39      	ldr	r2, [pc, #228]	@ (8002004 <HAL_DMA_Abort+0x21c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d068      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a37      	ldr	r2, [pc, #220]	@ (8002008 <HAL_DMA_Abort+0x220>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d063      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a36      	ldr	r2, [pc, #216]	@ (800200c <HAL_DMA_Abort+0x224>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d05e      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a34      	ldr	r2, [pc, #208]	@ (8002010 <HAL_DMA_Abort+0x228>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d059      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a33      	ldr	r2, [pc, #204]	@ (8002014 <HAL_DMA_Abort+0x22c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d054      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a31      	ldr	r2, [pc, #196]	@ (8002018 <HAL_DMA_Abort+0x230>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d04f      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a30      	ldr	r2, [pc, #192]	@ (800201c <HAL_DMA_Abort+0x234>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d04a      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a2e      	ldr	r2, [pc, #184]	@ (8002020 <HAL_DMA_Abort+0x238>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d045      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002024 <HAL_DMA_Abort+0x23c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d040      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2b      	ldr	r2, [pc, #172]	@ (8002028 <HAL_DMA_Abort+0x240>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d03b      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2a      	ldr	r2, [pc, #168]	@ (800202c <HAL_DMA_Abort+0x244>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d036      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a28      	ldr	r2, [pc, #160]	@ (8002030 <HAL_DMA_Abort+0x248>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d031      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a27      	ldr	r2, [pc, #156]	@ (8002034 <HAL_DMA_Abort+0x24c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d02c      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a25      	ldr	r2, [pc, #148]	@ (8002038 <HAL_DMA_Abort+0x250>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d027      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a24      	ldr	r2, [pc, #144]	@ (800203c <HAL_DMA_Abort+0x254>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d022      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a22      	ldr	r2, [pc, #136]	@ (8002040 <HAL_DMA_Abort+0x258>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01d      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a21      	ldr	r2, [pc, #132]	@ (8002044 <HAL_DMA_Abort+0x25c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d018      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002048 <HAL_DMA_Abort+0x260>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800204c <HAL_DMA_Abort+0x264>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00e      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8002050 <HAL_DMA_Abort+0x268>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8002054 <HAL_DMA_Abort+0x26c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d004      	beq.n	8001ff6 <HAL_DMA_Abort+0x20e>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a19      	ldr	r2, [pc, #100]	@ (8002058 <HAL_DMA_Abort+0x270>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d132      	bne.n	800205c <HAL_DMA_Abort+0x274>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e031      	b.n	800205e <HAL_DMA_Abort+0x276>
 8001ffa:	bf00      	nop
 8001ffc:	40020010 	.word	0x40020010
 8002000:	40020028 	.word	0x40020028
 8002004:	40020040 	.word	0x40020040
 8002008:	40020058 	.word	0x40020058
 800200c:	40020070 	.word	0x40020070
 8002010:	40020088 	.word	0x40020088
 8002014:	400200a0 	.word	0x400200a0
 8002018:	400200b8 	.word	0x400200b8
 800201c:	40020410 	.word	0x40020410
 8002020:	40020428 	.word	0x40020428
 8002024:	40020440 	.word	0x40020440
 8002028:	40020458 	.word	0x40020458
 800202c:	40020470 	.word	0x40020470
 8002030:	40020488 	.word	0x40020488
 8002034:	400204a0 	.word	0x400204a0
 8002038:	400204b8 	.word	0x400204b8
 800203c:	58025408 	.word	0x58025408
 8002040:	5802541c 	.word	0x5802541c
 8002044:	58025430 	.word	0x58025430
 8002048:	58025444 	.word	0x58025444
 800204c:	58025458 	.word	0x58025458
 8002050:	5802546c 	.word	0x5802546c
 8002054:	58025480 	.word	0x58025480
 8002058:	58025494 	.word	0x58025494
 800205c:	2300      	movs	r3, #0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800206c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002070:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6d      	ldr	r2, [pc, #436]	@ (800222c <HAL_DMA_Abort+0x444>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d04a      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a6b      	ldr	r2, [pc, #428]	@ (8002230 <HAL_DMA_Abort+0x448>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d045      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a6a      	ldr	r2, [pc, #424]	@ (8002234 <HAL_DMA_Abort+0x44c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d040      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a68      	ldr	r2, [pc, #416]	@ (8002238 <HAL_DMA_Abort+0x450>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d03b      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a67      	ldr	r2, [pc, #412]	@ (800223c <HAL_DMA_Abort+0x454>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d036      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a65      	ldr	r2, [pc, #404]	@ (8002240 <HAL_DMA_Abort+0x458>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d031      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a64      	ldr	r2, [pc, #400]	@ (8002244 <HAL_DMA_Abort+0x45c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d02c      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a62      	ldr	r2, [pc, #392]	@ (8002248 <HAL_DMA_Abort+0x460>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d027      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a61      	ldr	r2, [pc, #388]	@ (800224c <HAL_DMA_Abort+0x464>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d022      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a5f      	ldr	r2, [pc, #380]	@ (8002250 <HAL_DMA_Abort+0x468>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01d      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a5e      	ldr	r2, [pc, #376]	@ (8002254 <HAL_DMA_Abort+0x46c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d018      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a5c      	ldr	r2, [pc, #368]	@ (8002258 <HAL_DMA_Abort+0x470>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d013      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a5b      	ldr	r2, [pc, #364]	@ (800225c <HAL_DMA_Abort+0x474>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d00e      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a59      	ldr	r2, [pc, #356]	@ (8002260 <HAL_DMA_Abort+0x478>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d009      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a58      	ldr	r2, [pc, #352]	@ (8002264 <HAL_DMA_Abort+0x47c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d004      	beq.n	8002112 <HAL_DMA_Abort+0x32a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a56      	ldr	r2, [pc, #344]	@ (8002268 <HAL_DMA_Abort+0x480>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d108      	bne.n	8002124 <HAL_DMA_Abort+0x33c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e007      	b.n	8002134 <HAL_DMA_Abort+0x34c>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002134:	e013      	b.n	800215e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002136:	f7fe ff21 	bl	8000f7c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b05      	cmp	r3, #5
 8002142:	d90c      	bls.n	800215e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e12d      	b.n	80023ba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1e5      	bne.n	8002136 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2f      	ldr	r2, [pc, #188]	@ (800222c <HAL_DMA_Abort+0x444>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d04a      	beq.n	800220a <HAL_DMA_Abort+0x422>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2d      	ldr	r2, [pc, #180]	@ (8002230 <HAL_DMA_Abort+0x448>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d045      	beq.n	800220a <HAL_DMA_Abort+0x422>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a2c      	ldr	r2, [pc, #176]	@ (8002234 <HAL_DMA_Abort+0x44c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d040      	beq.n	800220a <HAL_DMA_Abort+0x422>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a2a      	ldr	r2, [pc, #168]	@ (8002238 <HAL_DMA_Abort+0x450>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d03b      	beq.n	800220a <HAL_DMA_Abort+0x422>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a29      	ldr	r2, [pc, #164]	@ (800223c <HAL_DMA_Abort+0x454>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d036      	beq.n	800220a <HAL_DMA_Abort+0x422>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a27      	ldr	r2, [pc, #156]	@ (8002240 <HAL_DMA_Abort+0x458>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d031      	beq.n	800220a <HAL_DMA_Abort+0x422>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a26      	ldr	r2, [pc, #152]	@ (8002244 <HAL_DMA_Abort+0x45c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d02c      	beq.n	800220a <HAL_DMA_Abort+0x422>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a24      	ldr	r2, [pc, #144]	@ (8002248 <HAL_DMA_Abort+0x460>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d027      	beq.n	800220a <HAL_DMA_Abort+0x422>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a23      	ldr	r2, [pc, #140]	@ (800224c <HAL_DMA_Abort+0x464>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d022      	beq.n	800220a <HAL_DMA_Abort+0x422>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a21      	ldr	r2, [pc, #132]	@ (8002250 <HAL_DMA_Abort+0x468>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01d      	beq.n	800220a <HAL_DMA_Abort+0x422>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a20      	ldr	r2, [pc, #128]	@ (8002254 <HAL_DMA_Abort+0x46c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d018      	beq.n	800220a <HAL_DMA_Abort+0x422>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002258 <HAL_DMA_Abort+0x470>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_DMA_Abort+0x422>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1d      	ldr	r2, [pc, #116]	@ (800225c <HAL_DMA_Abort+0x474>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00e      	beq.n	800220a <HAL_DMA_Abort+0x422>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002260 <HAL_DMA_Abort+0x478>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d009      	beq.n	800220a <HAL_DMA_Abort+0x422>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002264 <HAL_DMA_Abort+0x47c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d004      	beq.n	800220a <HAL_DMA_Abort+0x422>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a18      	ldr	r2, [pc, #96]	@ (8002268 <HAL_DMA_Abort+0x480>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <HAL_DMA_Abort+0x426>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_DMA_Abort+0x428>
 800220e:	2300      	movs	r3, #0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d02b      	beq.n	800226c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002218:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	223f      	movs	r2, #63	@ 0x3f
 8002224:	409a      	lsls	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	e02a      	b.n	8002282 <HAL_DMA_Abort+0x49a>
 800222c:	40020010 	.word	0x40020010
 8002230:	40020028 	.word	0x40020028
 8002234:	40020040 	.word	0x40020040
 8002238:	40020058 	.word	0x40020058
 800223c:	40020070 	.word	0x40020070
 8002240:	40020088 	.word	0x40020088
 8002244:	400200a0 	.word	0x400200a0
 8002248:	400200b8 	.word	0x400200b8
 800224c:	40020410 	.word	0x40020410
 8002250:	40020428 	.word	0x40020428
 8002254:	40020440 	.word	0x40020440
 8002258:	40020458 	.word	0x40020458
 800225c:	40020470 	.word	0x40020470
 8002260:	40020488 	.word	0x40020488
 8002264:	400204a0 	.word	0x400204a0
 8002268:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002270:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	2201      	movs	r2, #1
 800227c:	409a      	lsls	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a4f      	ldr	r2, [pc, #316]	@ (80023c4 <HAL_DMA_Abort+0x5dc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d072      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a4d      	ldr	r2, [pc, #308]	@ (80023c8 <HAL_DMA_Abort+0x5e0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d06d      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a4c      	ldr	r2, [pc, #304]	@ (80023cc <HAL_DMA_Abort+0x5e4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d068      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a4a      	ldr	r2, [pc, #296]	@ (80023d0 <HAL_DMA_Abort+0x5e8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d063      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a49      	ldr	r2, [pc, #292]	@ (80023d4 <HAL_DMA_Abort+0x5ec>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d05e      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a47      	ldr	r2, [pc, #284]	@ (80023d8 <HAL_DMA_Abort+0x5f0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d059      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a46      	ldr	r2, [pc, #280]	@ (80023dc <HAL_DMA_Abort+0x5f4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d054      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a44      	ldr	r2, [pc, #272]	@ (80023e0 <HAL_DMA_Abort+0x5f8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d04f      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a43      	ldr	r2, [pc, #268]	@ (80023e4 <HAL_DMA_Abort+0x5fc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d04a      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a41      	ldr	r2, [pc, #260]	@ (80023e8 <HAL_DMA_Abort+0x600>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d045      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a40      	ldr	r2, [pc, #256]	@ (80023ec <HAL_DMA_Abort+0x604>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d040      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a3e      	ldr	r2, [pc, #248]	@ (80023f0 <HAL_DMA_Abort+0x608>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d03b      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a3d      	ldr	r2, [pc, #244]	@ (80023f4 <HAL_DMA_Abort+0x60c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d036      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a3b      	ldr	r2, [pc, #236]	@ (80023f8 <HAL_DMA_Abort+0x610>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d031      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a3a      	ldr	r2, [pc, #232]	@ (80023fc <HAL_DMA_Abort+0x614>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d02c      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a38      	ldr	r2, [pc, #224]	@ (8002400 <HAL_DMA_Abort+0x618>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d027      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a37      	ldr	r2, [pc, #220]	@ (8002404 <HAL_DMA_Abort+0x61c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d022      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a35      	ldr	r2, [pc, #212]	@ (8002408 <HAL_DMA_Abort+0x620>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01d      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a34      	ldr	r2, [pc, #208]	@ (800240c <HAL_DMA_Abort+0x624>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d018      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a32      	ldr	r2, [pc, #200]	@ (8002410 <HAL_DMA_Abort+0x628>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a31      	ldr	r2, [pc, #196]	@ (8002414 <HAL_DMA_Abort+0x62c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00e      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a2f      	ldr	r2, [pc, #188]	@ (8002418 <HAL_DMA_Abort+0x630>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a2e      	ldr	r2, [pc, #184]	@ (800241c <HAL_DMA_Abort+0x634>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d004      	beq.n	8002372 <HAL_DMA_Abort+0x58a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a2c      	ldr	r2, [pc, #176]	@ (8002420 <HAL_DMA_Abort+0x638>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_DMA_Abort+0x58e>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_DMA_Abort+0x590>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d015      	beq.n	80023a8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002384:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00c      	beq.n	80023a8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002398:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800239c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80023a6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40020010 	.word	0x40020010
 80023c8:	40020028 	.word	0x40020028
 80023cc:	40020040 	.word	0x40020040
 80023d0:	40020058 	.word	0x40020058
 80023d4:	40020070 	.word	0x40020070
 80023d8:	40020088 	.word	0x40020088
 80023dc:	400200a0 	.word	0x400200a0
 80023e0:	400200b8 	.word	0x400200b8
 80023e4:	40020410 	.word	0x40020410
 80023e8:	40020428 	.word	0x40020428
 80023ec:	40020440 	.word	0x40020440
 80023f0:	40020458 	.word	0x40020458
 80023f4:	40020470 	.word	0x40020470
 80023f8:	40020488 	.word	0x40020488
 80023fc:	400204a0 	.word	0x400204a0
 8002400:	400204b8 	.word	0x400204b8
 8002404:	58025408 	.word	0x58025408
 8002408:	5802541c 	.word	0x5802541c
 800240c:	58025430 	.word	0x58025430
 8002410:	58025444 	.word	0x58025444
 8002414:	58025458 	.word	0x58025458
 8002418:	5802546c 	.word	0x5802546c
 800241c:	58025480 	.word	0x58025480
 8002420:	58025494 	.word	0x58025494

08002424 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	@ 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002430:	4b67      	ldr	r3, [pc, #412]	@ (80025d0 <HAL_DMA_IRQHandler+0x1ac>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a67      	ldr	r2, [pc, #412]	@ (80025d4 <HAL_DMA_IRQHandler+0x1b0>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0a9b      	lsrs	r3, r3, #10
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002442:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002448:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a5f      	ldr	r2, [pc, #380]	@ (80025d8 <HAL_DMA_IRQHandler+0x1b4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d04a      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a5d      	ldr	r2, [pc, #372]	@ (80025dc <HAL_DMA_IRQHandler+0x1b8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d045      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a5c      	ldr	r2, [pc, #368]	@ (80025e0 <HAL_DMA_IRQHandler+0x1bc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d040      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a5a      	ldr	r2, [pc, #360]	@ (80025e4 <HAL_DMA_IRQHandler+0x1c0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d03b      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a59      	ldr	r2, [pc, #356]	@ (80025e8 <HAL_DMA_IRQHandler+0x1c4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d036      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a57      	ldr	r2, [pc, #348]	@ (80025ec <HAL_DMA_IRQHandler+0x1c8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d031      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a56      	ldr	r2, [pc, #344]	@ (80025f0 <HAL_DMA_IRQHandler+0x1cc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d02c      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a54      	ldr	r2, [pc, #336]	@ (80025f4 <HAL_DMA_IRQHandler+0x1d0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d027      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a53      	ldr	r2, [pc, #332]	@ (80025f8 <HAL_DMA_IRQHandler+0x1d4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d022      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a51      	ldr	r2, [pc, #324]	@ (80025fc <HAL_DMA_IRQHandler+0x1d8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d01d      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a50      	ldr	r2, [pc, #320]	@ (8002600 <HAL_DMA_IRQHandler+0x1dc>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d018      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002604 <HAL_DMA_IRQHandler+0x1e0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a4d      	ldr	r2, [pc, #308]	@ (8002608 <HAL_DMA_IRQHandler+0x1e4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00e      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a4b      	ldr	r2, [pc, #300]	@ (800260c <HAL_DMA_IRQHandler+0x1e8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d009      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002610 <HAL_DMA_IRQHandler+0x1ec>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d004      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xd2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a48      	ldr	r2, [pc, #288]	@ (8002614 <HAL_DMA_IRQHandler+0x1f0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d101      	bne.n	80024fa <HAL_DMA_IRQHandler+0xd6>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_DMA_IRQHandler+0xd8>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 842b 	beq.w	8002d58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2208      	movs	r2, #8
 800250c:	409a      	lsls	r2, r3
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80a2 	beq.w	800265c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a2e      	ldr	r2, [pc, #184]	@ (80025d8 <HAL_DMA_IRQHandler+0x1b4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d04a      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a2d      	ldr	r2, [pc, #180]	@ (80025dc <HAL_DMA_IRQHandler+0x1b8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d045      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a2b      	ldr	r2, [pc, #172]	@ (80025e0 <HAL_DMA_IRQHandler+0x1bc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d040      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a2a      	ldr	r2, [pc, #168]	@ (80025e4 <HAL_DMA_IRQHandler+0x1c0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d03b      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a28      	ldr	r2, [pc, #160]	@ (80025e8 <HAL_DMA_IRQHandler+0x1c4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d036      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a27      	ldr	r2, [pc, #156]	@ (80025ec <HAL_DMA_IRQHandler+0x1c8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d031      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a25      	ldr	r2, [pc, #148]	@ (80025f0 <HAL_DMA_IRQHandler+0x1cc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d02c      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a24      	ldr	r2, [pc, #144]	@ (80025f4 <HAL_DMA_IRQHandler+0x1d0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d027      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a22      	ldr	r2, [pc, #136]	@ (80025f8 <HAL_DMA_IRQHandler+0x1d4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d022      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a21      	ldr	r2, [pc, #132]	@ (80025fc <HAL_DMA_IRQHandler+0x1d8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d01d      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1f      	ldr	r2, [pc, #124]	@ (8002600 <HAL_DMA_IRQHandler+0x1dc>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d018      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1e      	ldr	r2, [pc, #120]	@ (8002604 <HAL_DMA_IRQHandler+0x1e0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d013      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1c      	ldr	r2, [pc, #112]	@ (8002608 <HAL_DMA_IRQHandler+0x1e4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00e      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1b      	ldr	r2, [pc, #108]	@ (800260c <HAL_DMA_IRQHandler+0x1e8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d009      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a19      	ldr	r2, [pc, #100]	@ (8002610 <HAL_DMA_IRQHandler+0x1ec>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x194>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a18      	ldr	r2, [pc, #96]	@ (8002614 <HAL_DMA_IRQHandler+0x1f0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d12f      	bne.n	8002618 <HAL_DMA_IRQHandler+0x1f4>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	bf14      	ite	ne
 80025c6:	2301      	movne	r3, #1
 80025c8:	2300      	moveq	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	e02e      	b.n	800262c <HAL_DMA_IRQHandler+0x208>
 80025ce:	bf00      	nop
 80025d0:	24000000 	.word	0x24000000
 80025d4:	1b4e81b5 	.word	0x1b4e81b5
 80025d8:	40020010 	.word	0x40020010
 80025dc:	40020028 	.word	0x40020028
 80025e0:	40020040 	.word	0x40020040
 80025e4:	40020058 	.word	0x40020058
 80025e8:	40020070 	.word	0x40020070
 80025ec:	40020088 	.word	0x40020088
 80025f0:	400200a0 	.word	0x400200a0
 80025f4:	400200b8 	.word	0x400200b8
 80025f8:	40020410 	.word	0x40020410
 80025fc:	40020428 	.word	0x40020428
 8002600:	40020440 	.word	0x40020440
 8002604:	40020458 	.word	0x40020458
 8002608:	40020470 	.word	0x40020470
 800260c:	40020488 	.word	0x40020488
 8002610:	400204a0 	.word	0x400204a0
 8002614:	400204b8 	.word	0x400204b8
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	bf14      	ite	ne
 8002626:	2301      	movne	r3, #1
 8002628:	2300      	moveq	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d015      	beq.n	800265c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0204 	bic.w	r2, r2, #4
 800263e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	2208      	movs	r2, #8
 800264a:	409a      	lsls	r2, r3
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d06e      	beq.n	8002750 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a69      	ldr	r2, [pc, #420]	@ (800281c <HAL_DMA_IRQHandler+0x3f8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d04a      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a67      	ldr	r2, [pc, #412]	@ (8002820 <HAL_DMA_IRQHandler+0x3fc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d045      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a66      	ldr	r2, [pc, #408]	@ (8002824 <HAL_DMA_IRQHandler+0x400>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d040      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a64      	ldr	r2, [pc, #400]	@ (8002828 <HAL_DMA_IRQHandler+0x404>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d03b      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a63      	ldr	r2, [pc, #396]	@ (800282c <HAL_DMA_IRQHandler+0x408>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d036      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a61      	ldr	r2, [pc, #388]	@ (8002830 <HAL_DMA_IRQHandler+0x40c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d031      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a60      	ldr	r2, [pc, #384]	@ (8002834 <HAL_DMA_IRQHandler+0x410>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d02c      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002838 <HAL_DMA_IRQHandler+0x414>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d027      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a5d      	ldr	r2, [pc, #372]	@ (800283c <HAL_DMA_IRQHandler+0x418>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d022      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a5b      	ldr	r2, [pc, #364]	@ (8002840 <HAL_DMA_IRQHandler+0x41c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d01d      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a5a      	ldr	r2, [pc, #360]	@ (8002844 <HAL_DMA_IRQHandler+0x420>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d018      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a58      	ldr	r2, [pc, #352]	@ (8002848 <HAL_DMA_IRQHandler+0x424>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a57      	ldr	r2, [pc, #348]	@ (800284c <HAL_DMA_IRQHandler+0x428>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d00e      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a55      	ldr	r2, [pc, #340]	@ (8002850 <HAL_DMA_IRQHandler+0x42c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d009      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a54      	ldr	r2, [pc, #336]	@ (8002854 <HAL_DMA_IRQHandler+0x430>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d004      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2ee>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a52      	ldr	r2, [pc, #328]	@ (8002858 <HAL_DMA_IRQHandler+0x434>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10a      	bne.n	8002728 <HAL_DMA_IRQHandler+0x304>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf14      	ite	ne
 8002720:	2301      	movne	r3, #1
 8002722:	2300      	moveq	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	e003      	b.n	8002730 <HAL_DMA_IRQHandler+0x30c>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2300      	movs	r3, #0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00d      	beq.n	8002750 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	2201      	movs	r2, #1
 800273e:	409a      	lsls	r2, r3
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002748:	f043 0202 	orr.w	r2, r3, #2
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	2204      	movs	r2, #4
 800275a:	409a      	lsls	r2, r3
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 808f 	beq.w	8002884 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a2c      	ldr	r2, [pc, #176]	@ (800281c <HAL_DMA_IRQHandler+0x3f8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d04a      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a2a      	ldr	r2, [pc, #168]	@ (8002820 <HAL_DMA_IRQHandler+0x3fc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d045      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a29      	ldr	r2, [pc, #164]	@ (8002824 <HAL_DMA_IRQHandler+0x400>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d040      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a27      	ldr	r2, [pc, #156]	@ (8002828 <HAL_DMA_IRQHandler+0x404>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d03b      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a26      	ldr	r2, [pc, #152]	@ (800282c <HAL_DMA_IRQHandler+0x408>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d036      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a24      	ldr	r2, [pc, #144]	@ (8002830 <HAL_DMA_IRQHandler+0x40c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d031      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a23      	ldr	r2, [pc, #140]	@ (8002834 <HAL_DMA_IRQHandler+0x410>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d02c      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a21      	ldr	r2, [pc, #132]	@ (8002838 <HAL_DMA_IRQHandler+0x414>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d027      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a20      	ldr	r2, [pc, #128]	@ (800283c <HAL_DMA_IRQHandler+0x418>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d022      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <HAL_DMA_IRQHandler+0x41c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d01d      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002844 <HAL_DMA_IRQHandler+0x420>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d018      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002848 <HAL_DMA_IRQHandler+0x424>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1a      	ldr	r2, [pc, #104]	@ (800284c <HAL_DMA_IRQHandler+0x428>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00e      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a18      	ldr	r2, [pc, #96]	@ (8002850 <HAL_DMA_IRQHandler+0x42c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d009      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a17      	ldr	r2, [pc, #92]	@ (8002854 <HAL_DMA_IRQHandler+0x430>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d004      	beq.n	8002806 <HAL_DMA_IRQHandler+0x3e2>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a15      	ldr	r2, [pc, #84]	@ (8002858 <HAL_DMA_IRQHandler+0x434>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d12a      	bne.n	800285c <HAL_DMA_IRQHandler+0x438>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e023      	b.n	8002864 <HAL_DMA_IRQHandler+0x440>
 800281c:	40020010 	.word	0x40020010
 8002820:	40020028 	.word	0x40020028
 8002824:	40020040 	.word	0x40020040
 8002828:	40020058 	.word	0x40020058
 800282c:	40020070 	.word	0x40020070
 8002830:	40020088 	.word	0x40020088
 8002834:	400200a0 	.word	0x400200a0
 8002838:	400200b8 	.word	0x400200b8
 800283c:	40020410 	.word	0x40020410
 8002840:	40020428 	.word	0x40020428
 8002844:	40020440 	.word	0x40020440
 8002848:	40020458 	.word	0x40020458
 800284c:	40020470 	.word	0x40020470
 8002850:	40020488 	.word	0x40020488
 8002854:	400204a0 	.word	0x400204a0
 8002858:	400204b8 	.word	0x400204b8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00d      	beq.n	8002884 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2204      	movs	r2, #4
 8002872:	409a      	lsls	r2, r3
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287c:	f043 0204 	orr.w	r2, r3, #4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	2210      	movs	r2, #16
 800288e:	409a      	lsls	r2, r3
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80a6 	beq.w	80029e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a85      	ldr	r2, [pc, #532]	@ (8002ab4 <HAL_DMA_IRQHandler+0x690>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d04a      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a83      	ldr	r2, [pc, #524]	@ (8002ab8 <HAL_DMA_IRQHandler+0x694>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d045      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a82      	ldr	r2, [pc, #520]	@ (8002abc <HAL_DMA_IRQHandler+0x698>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d040      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a80      	ldr	r2, [pc, #512]	@ (8002ac0 <HAL_DMA_IRQHandler+0x69c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d03b      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a7f      	ldr	r2, [pc, #508]	@ (8002ac4 <HAL_DMA_IRQHandler+0x6a0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d036      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a7d      	ldr	r2, [pc, #500]	@ (8002ac8 <HAL_DMA_IRQHandler+0x6a4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d031      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a7c      	ldr	r2, [pc, #496]	@ (8002acc <HAL_DMA_IRQHandler+0x6a8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d02c      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a7a      	ldr	r2, [pc, #488]	@ (8002ad0 <HAL_DMA_IRQHandler+0x6ac>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d027      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a79      	ldr	r2, [pc, #484]	@ (8002ad4 <HAL_DMA_IRQHandler+0x6b0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d022      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a77      	ldr	r2, [pc, #476]	@ (8002ad8 <HAL_DMA_IRQHandler+0x6b4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01d      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a76      	ldr	r2, [pc, #472]	@ (8002adc <HAL_DMA_IRQHandler+0x6b8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d018      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a74      	ldr	r2, [pc, #464]	@ (8002ae0 <HAL_DMA_IRQHandler+0x6bc>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a73      	ldr	r2, [pc, #460]	@ (8002ae4 <HAL_DMA_IRQHandler+0x6c0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00e      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a71      	ldr	r2, [pc, #452]	@ (8002ae8 <HAL_DMA_IRQHandler+0x6c4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a70      	ldr	r2, [pc, #448]	@ (8002aec <HAL_DMA_IRQHandler+0x6c8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_DMA_IRQHandler+0x516>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a6e      	ldr	r2, [pc, #440]	@ (8002af0 <HAL_DMA_IRQHandler+0x6cc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10a      	bne.n	8002950 <HAL_DMA_IRQHandler+0x52c>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	e009      	b.n	8002964 <HAL_DMA_IRQHandler+0x540>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf14      	ite	ne
 800295e:	2301      	movne	r3, #1
 8002960:	2300      	moveq	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d03e      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	2210      	movs	r2, #16
 8002972:	409a      	lsls	r2, r3
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d018      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d108      	bne.n	80029a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d024      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
 80029a4:	e01f      	b.n	80029e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d01b      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
 80029b6:	e016      	b.n	80029e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d107      	bne.n	80029d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0208 	bic.w	r2, r2, #8
 80029d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	f003 031f 	and.w	r3, r3, #31
 80029ee:	2220      	movs	r2, #32
 80029f0:	409a      	lsls	r2, r3
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8110 	beq.w	8002c1c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2c      	ldr	r2, [pc, #176]	@ (8002ab4 <HAL_DMA_IRQHandler+0x690>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d04a      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ab8 <HAL_DMA_IRQHandler+0x694>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d045      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a29      	ldr	r2, [pc, #164]	@ (8002abc <HAL_DMA_IRQHandler+0x698>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d040      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a28      	ldr	r2, [pc, #160]	@ (8002ac0 <HAL_DMA_IRQHandler+0x69c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d03b      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a26      	ldr	r2, [pc, #152]	@ (8002ac4 <HAL_DMA_IRQHandler+0x6a0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d036      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a25      	ldr	r2, [pc, #148]	@ (8002ac8 <HAL_DMA_IRQHandler+0x6a4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d031      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a23      	ldr	r2, [pc, #140]	@ (8002acc <HAL_DMA_IRQHandler+0x6a8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d02c      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a22      	ldr	r2, [pc, #136]	@ (8002ad0 <HAL_DMA_IRQHandler+0x6ac>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d027      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a20      	ldr	r2, [pc, #128]	@ (8002ad4 <HAL_DMA_IRQHandler+0x6b0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d022      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad8 <HAL_DMA_IRQHandler+0x6b4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d01d      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1d      	ldr	r2, [pc, #116]	@ (8002adc <HAL_DMA_IRQHandler+0x6b8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d018      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae0 <HAL_DMA_IRQHandler+0x6bc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d013      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae4 <HAL_DMA_IRQHandler+0x6c0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00e      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a19      	ldr	r2, [pc, #100]	@ (8002ae8 <HAL_DMA_IRQHandler+0x6c4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d009      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a17      	ldr	r2, [pc, #92]	@ (8002aec <HAL_DMA_IRQHandler+0x6c8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d004      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x678>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a16      	ldr	r2, [pc, #88]	@ (8002af0 <HAL_DMA_IRQHandler+0x6cc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d12b      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x6d0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	e02a      	b.n	8002b08 <HAL_DMA_IRQHandler+0x6e4>
 8002ab2:	bf00      	nop
 8002ab4:	40020010 	.word	0x40020010
 8002ab8:	40020028 	.word	0x40020028
 8002abc:	40020040 	.word	0x40020040
 8002ac0:	40020058 	.word	0x40020058
 8002ac4:	40020070 	.word	0x40020070
 8002ac8:	40020088 	.word	0x40020088
 8002acc:	400200a0 	.word	0x400200a0
 8002ad0:	400200b8 	.word	0x400200b8
 8002ad4:	40020410 	.word	0x40020410
 8002ad8:	40020428 	.word	0x40020428
 8002adc:	40020440 	.word	0x40020440
 8002ae0:	40020458 	.word	0x40020458
 8002ae4:	40020470 	.word	0x40020470
 8002ae8:	40020488 	.word	0x40020488
 8002aec:	400204a0 	.word	0x400204a0
 8002af0:	400204b8 	.word	0x400204b8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	bf14      	ite	ne
 8002b02:	2301      	movne	r3, #1
 8002b04:	2300      	moveq	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8087 	beq.w	8002c1c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	2220      	movs	r2, #32
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d139      	bne.n	8002b9e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0216 	bic.w	r2, r2, #22
 8002b38:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b48:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <HAL_DMA_IRQHandler+0x736>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0208 	bic.w	r2, r2, #8
 8002b68:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	223f      	movs	r2, #63	@ 0x3f
 8002b74:	409a      	lsls	r2, r3
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 834a 	beq.w	8003228 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
          }
          return;
 8002b9c:	e344      	b.n	8003228 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d018      	beq.n	8002bde <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d108      	bne.n	8002bcc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d02c      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	4798      	blx	r3
 8002bca:	e027      	b.n	8002c1c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d023      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
 8002bdc:	e01e      	b.n	8002c1c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10f      	bne.n	8002c0c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0210 	bic.w	r2, r2, #16
 8002bfa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8306 	beq.w	8003232 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 8088 	beq.w	8002d44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2204      	movs	r2, #4
 8002c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a7a      	ldr	r2, [pc, #488]	@ (8002e2c <HAL_DMA_IRQHandler+0xa08>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d04a      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a79      	ldr	r2, [pc, #484]	@ (8002e30 <HAL_DMA_IRQHandler+0xa0c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d045      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a77      	ldr	r2, [pc, #476]	@ (8002e34 <HAL_DMA_IRQHandler+0xa10>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d040      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a76      	ldr	r2, [pc, #472]	@ (8002e38 <HAL_DMA_IRQHandler+0xa14>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d03b      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a74      	ldr	r2, [pc, #464]	@ (8002e3c <HAL_DMA_IRQHandler+0xa18>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d036      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a73      	ldr	r2, [pc, #460]	@ (8002e40 <HAL_DMA_IRQHandler+0xa1c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d031      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a71      	ldr	r2, [pc, #452]	@ (8002e44 <HAL_DMA_IRQHandler+0xa20>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d02c      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a70      	ldr	r2, [pc, #448]	@ (8002e48 <HAL_DMA_IRQHandler+0xa24>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d027      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a6e      	ldr	r2, [pc, #440]	@ (8002e4c <HAL_DMA_IRQHandler+0xa28>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d022      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6d      	ldr	r2, [pc, #436]	@ (8002e50 <HAL_DMA_IRQHandler+0xa2c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d01d      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a6b      	ldr	r2, [pc, #428]	@ (8002e54 <HAL_DMA_IRQHandler+0xa30>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d018      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a6a      	ldr	r2, [pc, #424]	@ (8002e58 <HAL_DMA_IRQHandler+0xa34>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d013      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a68      	ldr	r2, [pc, #416]	@ (8002e5c <HAL_DMA_IRQHandler+0xa38>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00e      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a67      	ldr	r2, [pc, #412]	@ (8002e60 <HAL_DMA_IRQHandler+0xa3c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d009      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a65      	ldr	r2, [pc, #404]	@ (8002e64 <HAL_DMA_IRQHandler+0xa40>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x8b8>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a64      	ldr	r2, [pc, #400]	@ (8002e68 <HAL_DMA_IRQHandler+0xa44>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d108      	bne.n	8002cee <HAL_DMA_IRQHandler+0x8ca>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	e007      	b.n	8002cfe <HAL_DMA_IRQHandler+0x8da>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0201 	bic.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3301      	adds	r3, #1
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d307      	bcc.n	8002d1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f2      	bne.n	8002cfe <HAL_DMA_IRQHandler+0x8da>
 8002d18:	e000      	b.n	8002d1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002d1a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d004      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002d32:	e003      	b.n	8002d3c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8272 	beq.w	8003232 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4798      	blx	r3
 8002d56:	e26c      	b.n	8003232 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a43      	ldr	r2, [pc, #268]	@ (8002e6c <HAL_DMA_IRQHandler+0xa48>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d022      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x984>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a42      	ldr	r2, [pc, #264]	@ (8002e70 <HAL_DMA_IRQHandler+0xa4c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d01d      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x984>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a40      	ldr	r2, [pc, #256]	@ (8002e74 <HAL_DMA_IRQHandler+0xa50>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d018      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x984>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e78 <HAL_DMA_IRQHandler+0xa54>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d013      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x984>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a3d      	ldr	r2, [pc, #244]	@ (8002e7c <HAL_DMA_IRQHandler+0xa58>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00e      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x984>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a3c      	ldr	r2, [pc, #240]	@ (8002e80 <HAL_DMA_IRQHandler+0xa5c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d009      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x984>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a3a      	ldr	r2, [pc, #232]	@ (8002e84 <HAL_DMA_IRQHandler+0xa60>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d004      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x984>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a39      	ldr	r2, [pc, #228]	@ (8002e88 <HAL_DMA_IRQHandler+0xa64>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d101      	bne.n	8002dac <HAL_DMA_IRQHandler+0x988>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_DMA_IRQHandler+0x98a>
 8002dac:	2300      	movs	r3, #0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 823f 	beq.w	8003232 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80cd 	beq.w	8002f6c <HAL_DMA_IRQHandler+0xb48>
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80c7 	beq.w	8002f6c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	2204      	movs	r2, #4
 8002de8:	409a      	lsls	r2, r3
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d049      	beq.n	8002e8c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8210 	beq.w	800322c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e14:	e20a      	b.n	800322c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8206 	beq.w	800322c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e28:	e200      	b.n	800322c <HAL_DMA_IRQHandler+0xe08>
 8002e2a:	bf00      	nop
 8002e2c:	40020010 	.word	0x40020010
 8002e30:	40020028 	.word	0x40020028
 8002e34:	40020040 	.word	0x40020040
 8002e38:	40020058 	.word	0x40020058
 8002e3c:	40020070 	.word	0x40020070
 8002e40:	40020088 	.word	0x40020088
 8002e44:	400200a0 	.word	0x400200a0
 8002e48:	400200b8 	.word	0x400200b8
 8002e4c:	40020410 	.word	0x40020410
 8002e50:	40020428 	.word	0x40020428
 8002e54:	40020440 	.word	0x40020440
 8002e58:	40020458 	.word	0x40020458
 8002e5c:	40020470 	.word	0x40020470
 8002e60:	40020488 	.word	0x40020488
 8002e64:	400204a0 	.word	0x400204a0
 8002e68:	400204b8 	.word	0x400204b8
 8002e6c:	58025408 	.word	0x58025408
 8002e70:	5802541c 	.word	0x5802541c
 8002e74:	58025430 	.word	0x58025430
 8002e78:	58025444 	.word	0x58025444
 8002e7c:	58025458 	.word	0x58025458
 8002e80:	5802546c 	.word	0x5802546c
 8002e84:	58025480 	.word	0x58025480
 8002e88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d160      	bne.n	8002f58 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a7f      	ldr	r2, [pc, #508]	@ (8003098 <HAL_DMA_IRQHandler+0xc74>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d04a      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a7d      	ldr	r2, [pc, #500]	@ (800309c <HAL_DMA_IRQHandler+0xc78>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d045      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7c      	ldr	r2, [pc, #496]	@ (80030a0 <HAL_DMA_IRQHandler+0xc7c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d040      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a7a      	ldr	r2, [pc, #488]	@ (80030a4 <HAL_DMA_IRQHandler+0xc80>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d03b      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a79      	ldr	r2, [pc, #484]	@ (80030a8 <HAL_DMA_IRQHandler+0xc84>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d036      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a77      	ldr	r2, [pc, #476]	@ (80030ac <HAL_DMA_IRQHandler+0xc88>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d031      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a76      	ldr	r2, [pc, #472]	@ (80030b0 <HAL_DMA_IRQHandler+0xc8c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d02c      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a74      	ldr	r2, [pc, #464]	@ (80030b4 <HAL_DMA_IRQHandler+0xc90>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d027      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a73      	ldr	r2, [pc, #460]	@ (80030b8 <HAL_DMA_IRQHandler+0xc94>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d022      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a71      	ldr	r2, [pc, #452]	@ (80030bc <HAL_DMA_IRQHandler+0xc98>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01d      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a70      	ldr	r2, [pc, #448]	@ (80030c0 <HAL_DMA_IRQHandler+0xc9c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d018      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a6e      	ldr	r2, [pc, #440]	@ (80030c4 <HAL_DMA_IRQHandler+0xca0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6d      	ldr	r2, [pc, #436]	@ (80030c8 <HAL_DMA_IRQHandler+0xca4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00e      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80030cc <HAL_DMA_IRQHandler+0xca8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d009      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6a      	ldr	r2, [pc, #424]	@ (80030d0 <HAL_DMA_IRQHandler+0xcac>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d004      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xb12>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a68      	ldr	r2, [pc, #416]	@ (80030d4 <HAL_DMA_IRQHandler+0xcb0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d108      	bne.n	8002f48 <HAL_DMA_IRQHandler+0xb24>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0208 	bic.w	r2, r2, #8
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	e007      	b.n	8002f58 <HAL_DMA_IRQHandler+0xb34>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0204 	bic.w	r2, r2, #4
 8002f56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8165 	beq.w	800322c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f6a:	e15f      	b.n	800322c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	2202      	movs	r2, #2
 8002f76:	409a      	lsls	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80c5 	beq.w	800310c <HAL_DMA_IRQHandler+0xce8>
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80bf 	beq.w	800310c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	2202      	movs	r2, #2
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d018      	beq.n	8002fda <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 813a 	beq.w	8003230 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fc4:	e134      	b.n	8003230 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8130 	beq.w	8003230 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fd8:	e12a      	b.n	8003230 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f040 8089 	bne.w	80030f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a2b      	ldr	r2, [pc, #172]	@ (8003098 <HAL_DMA_IRQHandler+0xc74>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d04a      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a29      	ldr	r2, [pc, #164]	@ (800309c <HAL_DMA_IRQHandler+0xc78>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d045      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a28      	ldr	r2, [pc, #160]	@ (80030a0 <HAL_DMA_IRQHandler+0xc7c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d040      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a26      	ldr	r2, [pc, #152]	@ (80030a4 <HAL_DMA_IRQHandler+0xc80>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d03b      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a25      	ldr	r2, [pc, #148]	@ (80030a8 <HAL_DMA_IRQHandler+0xc84>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d036      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a23      	ldr	r2, [pc, #140]	@ (80030ac <HAL_DMA_IRQHandler+0xc88>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d031      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a22      	ldr	r2, [pc, #136]	@ (80030b0 <HAL_DMA_IRQHandler+0xc8c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d02c      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a20      	ldr	r2, [pc, #128]	@ (80030b4 <HAL_DMA_IRQHandler+0xc90>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d027      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1f      	ldr	r2, [pc, #124]	@ (80030b8 <HAL_DMA_IRQHandler+0xc94>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d022      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1d      	ldr	r2, [pc, #116]	@ (80030bc <HAL_DMA_IRQHandler+0xc98>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01d      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1c      	ldr	r2, [pc, #112]	@ (80030c0 <HAL_DMA_IRQHandler+0xc9c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d018      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1a      	ldr	r2, [pc, #104]	@ (80030c4 <HAL_DMA_IRQHandler+0xca0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a19      	ldr	r2, [pc, #100]	@ (80030c8 <HAL_DMA_IRQHandler+0xca4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00e      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a17      	ldr	r2, [pc, #92]	@ (80030cc <HAL_DMA_IRQHandler+0xca8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d009      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a16      	ldr	r2, [pc, #88]	@ (80030d0 <HAL_DMA_IRQHandler+0xcac>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d004      	beq.n	8003086 <HAL_DMA_IRQHandler+0xc62>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a14      	ldr	r2, [pc, #80]	@ (80030d4 <HAL_DMA_IRQHandler+0xcb0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d128      	bne.n	80030d8 <HAL_DMA_IRQHandler+0xcb4>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0214 	bic.w	r2, r2, #20
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e027      	b.n	80030e8 <HAL_DMA_IRQHandler+0xcc4>
 8003098:	40020010 	.word	0x40020010
 800309c:	40020028 	.word	0x40020028
 80030a0:	40020040 	.word	0x40020040
 80030a4:	40020058 	.word	0x40020058
 80030a8:	40020070 	.word	0x40020070
 80030ac:	40020088 	.word	0x40020088
 80030b0:	400200a0 	.word	0x400200a0
 80030b4:	400200b8 	.word	0x400200b8
 80030b8:	40020410 	.word	0x40020410
 80030bc:	40020428 	.word	0x40020428
 80030c0:	40020440 	.word	0x40020440
 80030c4:	40020458 	.word	0x40020458
 80030c8:	40020470 	.word	0x40020470
 80030cc:	40020488 	.word	0x40020488
 80030d0:	400204a0 	.word	0x400204a0
 80030d4:	400204b8 	.word	0x400204b8
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 020a 	bic.w	r2, r2, #10
 80030e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8097 	beq.w	8003230 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800310a:	e091      	b.n	8003230 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2208      	movs	r2, #8
 8003116:	409a      	lsls	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8088 	beq.w	8003232 <HAL_DMA_IRQHandler+0xe0e>
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8082 	beq.w	8003232 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a41      	ldr	r2, [pc, #260]	@ (8003238 <HAL_DMA_IRQHandler+0xe14>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d04a      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a3f      	ldr	r2, [pc, #252]	@ (800323c <HAL_DMA_IRQHandler+0xe18>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d045      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a3e      	ldr	r2, [pc, #248]	@ (8003240 <HAL_DMA_IRQHandler+0xe1c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d040      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a3c      	ldr	r2, [pc, #240]	@ (8003244 <HAL_DMA_IRQHandler+0xe20>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d03b      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a3b      	ldr	r2, [pc, #236]	@ (8003248 <HAL_DMA_IRQHandler+0xe24>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d036      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a39      	ldr	r2, [pc, #228]	@ (800324c <HAL_DMA_IRQHandler+0xe28>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d031      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a38      	ldr	r2, [pc, #224]	@ (8003250 <HAL_DMA_IRQHandler+0xe2c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d02c      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a36      	ldr	r2, [pc, #216]	@ (8003254 <HAL_DMA_IRQHandler+0xe30>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d027      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a35      	ldr	r2, [pc, #212]	@ (8003258 <HAL_DMA_IRQHandler+0xe34>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d022      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a33      	ldr	r2, [pc, #204]	@ (800325c <HAL_DMA_IRQHandler+0xe38>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01d      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a32      	ldr	r2, [pc, #200]	@ (8003260 <HAL_DMA_IRQHandler+0xe3c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d018      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a30      	ldr	r2, [pc, #192]	@ (8003264 <HAL_DMA_IRQHandler+0xe40>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003268 <HAL_DMA_IRQHandler+0xe44>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00e      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a2d      	ldr	r2, [pc, #180]	@ (800326c <HAL_DMA_IRQHandler+0xe48>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d009      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2c      	ldr	r2, [pc, #176]	@ (8003270 <HAL_DMA_IRQHandler+0xe4c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d004      	beq.n	80031ce <HAL_DMA_IRQHandler+0xdaa>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003274 <HAL_DMA_IRQHandler+0xe50>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d108      	bne.n	80031e0 <HAL_DMA_IRQHandler+0xdbc>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 021c 	bic.w	r2, r2, #28
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	e007      	b.n	80031f0 <HAL_DMA_IRQHandler+0xdcc>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 020e 	bic.w	r2, r2, #14
 80031ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	2201      	movs	r2, #1
 80031fa:	409a      	lsls	r2, r3
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4798      	blx	r3
 8003226:	e004      	b.n	8003232 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003228:	bf00      	nop
 800322a:	e002      	b.n	8003232 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800322c:	bf00      	nop
 800322e:	e000      	b.n	8003232 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003230:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003232:	3728      	adds	r7, #40	@ 0x28
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40020010 	.word	0x40020010
 800323c:	40020028 	.word	0x40020028
 8003240:	40020040 	.word	0x40020040
 8003244:	40020058 	.word	0x40020058
 8003248:	40020070 	.word	0x40020070
 800324c:	40020088 	.word	0x40020088
 8003250:	400200a0 	.word	0x400200a0
 8003254:	400200b8 	.word	0x400200b8
 8003258:	40020410 	.word	0x40020410
 800325c:	40020428 	.word	0x40020428
 8003260:	40020440 	.word	0x40020440
 8003264:	40020458 	.word	0x40020458
 8003268:	40020470 	.word	0x40020470
 800326c:	40020488 	.word	0x40020488
 8003270:	400204a0 	.word	0x400204a0
 8003274:	400204b8 	.word	0x400204b8

08003278 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a7f      	ldr	r2, [pc, #508]	@ (80034ac <DMA_SetConfig+0x21c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d072      	beq.n	800339a <DMA_SetConfig+0x10a>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a7d      	ldr	r2, [pc, #500]	@ (80034b0 <DMA_SetConfig+0x220>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d06d      	beq.n	800339a <DMA_SetConfig+0x10a>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a7c      	ldr	r2, [pc, #496]	@ (80034b4 <DMA_SetConfig+0x224>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d068      	beq.n	800339a <DMA_SetConfig+0x10a>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a7a      	ldr	r2, [pc, #488]	@ (80034b8 <DMA_SetConfig+0x228>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d063      	beq.n	800339a <DMA_SetConfig+0x10a>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a79      	ldr	r2, [pc, #484]	@ (80034bc <DMA_SetConfig+0x22c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d05e      	beq.n	800339a <DMA_SetConfig+0x10a>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a77      	ldr	r2, [pc, #476]	@ (80034c0 <DMA_SetConfig+0x230>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d059      	beq.n	800339a <DMA_SetConfig+0x10a>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a76      	ldr	r2, [pc, #472]	@ (80034c4 <DMA_SetConfig+0x234>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d054      	beq.n	800339a <DMA_SetConfig+0x10a>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a74      	ldr	r2, [pc, #464]	@ (80034c8 <DMA_SetConfig+0x238>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d04f      	beq.n	800339a <DMA_SetConfig+0x10a>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a73      	ldr	r2, [pc, #460]	@ (80034cc <DMA_SetConfig+0x23c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d04a      	beq.n	800339a <DMA_SetConfig+0x10a>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a71      	ldr	r2, [pc, #452]	@ (80034d0 <DMA_SetConfig+0x240>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d045      	beq.n	800339a <DMA_SetConfig+0x10a>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a70      	ldr	r2, [pc, #448]	@ (80034d4 <DMA_SetConfig+0x244>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d040      	beq.n	800339a <DMA_SetConfig+0x10a>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6e      	ldr	r2, [pc, #440]	@ (80034d8 <DMA_SetConfig+0x248>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d03b      	beq.n	800339a <DMA_SetConfig+0x10a>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a6d      	ldr	r2, [pc, #436]	@ (80034dc <DMA_SetConfig+0x24c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d036      	beq.n	800339a <DMA_SetConfig+0x10a>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a6b      	ldr	r2, [pc, #428]	@ (80034e0 <DMA_SetConfig+0x250>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d031      	beq.n	800339a <DMA_SetConfig+0x10a>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a6a      	ldr	r2, [pc, #424]	@ (80034e4 <DMA_SetConfig+0x254>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d02c      	beq.n	800339a <DMA_SetConfig+0x10a>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a68      	ldr	r2, [pc, #416]	@ (80034e8 <DMA_SetConfig+0x258>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d027      	beq.n	800339a <DMA_SetConfig+0x10a>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a67      	ldr	r2, [pc, #412]	@ (80034ec <DMA_SetConfig+0x25c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d022      	beq.n	800339a <DMA_SetConfig+0x10a>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a65      	ldr	r2, [pc, #404]	@ (80034f0 <DMA_SetConfig+0x260>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01d      	beq.n	800339a <DMA_SetConfig+0x10a>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a64      	ldr	r2, [pc, #400]	@ (80034f4 <DMA_SetConfig+0x264>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d018      	beq.n	800339a <DMA_SetConfig+0x10a>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a62      	ldr	r2, [pc, #392]	@ (80034f8 <DMA_SetConfig+0x268>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <DMA_SetConfig+0x10a>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a61      	ldr	r2, [pc, #388]	@ (80034fc <DMA_SetConfig+0x26c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00e      	beq.n	800339a <DMA_SetConfig+0x10a>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a5f      	ldr	r2, [pc, #380]	@ (8003500 <DMA_SetConfig+0x270>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d009      	beq.n	800339a <DMA_SetConfig+0x10a>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a5e      	ldr	r2, [pc, #376]	@ (8003504 <DMA_SetConfig+0x274>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d004      	beq.n	800339a <DMA_SetConfig+0x10a>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a5c      	ldr	r2, [pc, #368]	@ (8003508 <DMA_SetConfig+0x278>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d101      	bne.n	800339e <DMA_SetConfig+0x10e>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <DMA_SetConfig+0x110>
 800339e:	2300      	movs	r3, #0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00d      	beq.n	80033c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80033ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d004      	beq.n	80033c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80033be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a39      	ldr	r2, [pc, #228]	@ (80034ac <DMA_SetConfig+0x21c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d04a      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a38      	ldr	r2, [pc, #224]	@ (80034b0 <DMA_SetConfig+0x220>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d045      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a36      	ldr	r2, [pc, #216]	@ (80034b4 <DMA_SetConfig+0x224>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d040      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a35      	ldr	r2, [pc, #212]	@ (80034b8 <DMA_SetConfig+0x228>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d03b      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a33      	ldr	r2, [pc, #204]	@ (80034bc <DMA_SetConfig+0x22c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d036      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a32      	ldr	r2, [pc, #200]	@ (80034c0 <DMA_SetConfig+0x230>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d031      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a30      	ldr	r2, [pc, #192]	@ (80034c4 <DMA_SetConfig+0x234>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d02c      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2f      	ldr	r2, [pc, #188]	@ (80034c8 <DMA_SetConfig+0x238>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d027      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2d      	ldr	r2, [pc, #180]	@ (80034cc <DMA_SetConfig+0x23c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d022      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2c      	ldr	r2, [pc, #176]	@ (80034d0 <DMA_SetConfig+0x240>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d01d      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2a      	ldr	r2, [pc, #168]	@ (80034d4 <DMA_SetConfig+0x244>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d018      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a29      	ldr	r2, [pc, #164]	@ (80034d8 <DMA_SetConfig+0x248>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a27      	ldr	r2, [pc, #156]	@ (80034dc <DMA_SetConfig+0x24c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00e      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a26      	ldr	r2, [pc, #152]	@ (80034e0 <DMA_SetConfig+0x250>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d009      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a24      	ldr	r2, [pc, #144]	@ (80034e4 <DMA_SetConfig+0x254>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d004      	beq.n	8003460 <DMA_SetConfig+0x1d0>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a23      	ldr	r2, [pc, #140]	@ (80034e8 <DMA_SetConfig+0x258>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d101      	bne.n	8003464 <DMA_SetConfig+0x1d4>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <DMA_SetConfig+0x1d6>
 8003464:	2300      	movs	r3, #0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d059      	beq.n	800351e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	223f      	movs	r2, #63	@ 0x3f
 8003474:	409a      	lsls	r2, r3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003488:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b40      	cmp	r3, #64	@ 0x40
 8003498:	d138      	bne.n	800350c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80034aa:	e086      	b.n	80035ba <DMA_SetConfig+0x32a>
 80034ac:	40020010 	.word	0x40020010
 80034b0:	40020028 	.word	0x40020028
 80034b4:	40020040 	.word	0x40020040
 80034b8:	40020058 	.word	0x40020058
 80034bc:	40020070 	.word	0x40020070
 80034c0:	40020088 	.word	0x40020088
 80034c4:	400200a0 	.word	0x400200a0
 80034c8:	400200b8 	.word	0x400200b8
 80034cc:	40020410 	.word	0x40020410
 80034d0:	40020428 	.word	0x40020428
 80034d4:	40020440 	.word	0x40020440
 80034d8:	40020458 	.word	0x40020458
 80034dc:	40020470 	.word	0x40020470
 80034e0:	40020488 	.word	0x40020488
 80034e4:	400204a0 	.word	0x400204a0
 80034e8:	400204b8 	.word	0x400204b8
 80034ec:	58025408 	.word	0x58025408
 80034f0:	5802541c 	.word	0x5802541c
 80034f4:	58025430 	.word	0x58025430
 80034f8:	58025444 	.word	0x58025444
 80034fc:	58025458 	.word	0x58025458
 8003500:	5802546c 	.word	0x5802546c
 8003504:	58025480 	.word	0x58025480
 8003508:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	60da      	str	r2, [r3, #12]
}
 800351c:	e04d      	b.n	80035ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a29      	ldr	r2, [pc, #164]	@ (80035c8 <DMA_SetConfig+0x338>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d022      	beq.n	800356e <DMA_SetConfig+0x2de>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a27      	ldr	r2, [pc, #156]	@ (80035cc <DMA_SetConfig+0x33c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01d      	beq.n	800356e <DMA_SetConfig+0x2de>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a26      	ldr	r2, [pc, #152]	@ (80035d0 <DMA_SetConfig+0x340>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d018      	beq.n	800356e <DMA_SetConfig+0x2de>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a24      	ldr	r2, [pc, #144]	@ (80035d4 <DMA_SetConfig+0x344>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <DMA_SetConfig+0x2de>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a23      	ldr	r2, [pc, #140]	@ (80035d8 <DMA_SetConfig+0x348>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00e      	beq.n	800356e <DMA_SetConfig+0x2de>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a21      	ldr	r2, [pc, #132]	@ (80035dc <DMA_SetConfig+0x34c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d009      	beq.n	800356e <DMA_SetConfig+0x2de>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a20      	ldr	r2, [pc, #128]	@ (80035e0 <DMA_SetConfig+0x350>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d004      	beq.n	800356e <DMA_SetConfig+0x2de>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1e      	ldr	r2, [pc, #120]	@ (80035e4 <DMA_SetConfig+0x354>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <DMA_SetConfig+0x2e2>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <DMA_SetConfig+0x2e4>
 8003572:	2300      	movs	r3, #0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d020      	beq.n	80035ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2201      	movs	r2, #1
 8003582:	409a      	lsls	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b40      	cmp	r3, #64	@ 0x40
 8003596:	d108      	bne.n	80035aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	60da      	str	r2, [r3, #12]
}
 80035a8:	e007      	b.n	80035ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	60da      	str	r2, [r3, #12]
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	58025408 	.word	0x58025408
 80035cc:	5802541c 	.word	0x5802541c
 80035d0:	58025430 	.word	0x58025430
 80035d4:	58025444 	.word	0x58025444
 80035d8:	58025458 	.word	0x58025458
 80035dc:	5802546c 	.word	0x5802546c
 80035e0:	58025480 	.word	0x58025480
 80035e4:	58025494 	.word	0x58025494

080035e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a42      	ldr	r2, [pc, #264]	@ (8003700 <DMA_CalcBaseAndBitshift+0x118>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d04a      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a41      	ldr	r2, [pc, #260]	@ (8003704 <DMA_CalcBaseAndBitshift+0x11c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d045      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a3f      	ldr	r2, [pc, #252]	@ (8003708 <DMA_CalcBaseAndBitshift+0x120>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d040      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a3e      	ldr	r2, [pc, #248]	@ (800370c <DMA_CalcBaseAndBitshift+0x124>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d03b      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a3c      	ldr	r2, [pc, #240]	@ (8003710 <DMA_CalcBaseAndBitshift+0x128>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d036      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a3b      	ldr	r2, [pc, #236]	@ (8003714 <DMA_CalcBaseAndBitshift+0x12c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d031      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a39      	ldr	r2, [pc, #228]	@ (8003718 <DMA_CalcBaseAndBitshift+0x130>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d02c      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a38      	ldr	r2, [pc, #224]	@ (800371c <DMA_CalcBaseAndBitshift+0x134>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d027      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a36      	ldr	r2, [pc, #216]	@ (8003720 <DMA_CalcBaseAndBitshift+0x138>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d022      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a35      	ldr	r2, [pc, #212]	@ (8003724 <DMA_CalcBaseAndBitshift+0x13c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d01d      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a33      	ldr	r2, [pc, #204]	@ (8003728 <DMA_CalcBaseAndBitshift+0x140>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d018      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a32      	ldr	r2, [pc, #200]	@ (800372c <DMA_CalcBaseAndBitshift+0x144>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d013      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a30      	ldr	r2, [pc, #192]	@ (8003730 <DMA_CalcBaseAndBitshift+0x148>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00e      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2f      	ldr	r2, [pc, #188]	@ (8003734 <DMA_CalcBaseAndBitshift+0x14c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d009      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a2d      	ldr	r2, [pc, #180]	@ (8003738 <DMA_CalcBaseAndBitshift+0x150>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d004      	beq.n	8003690 <DMA_CalcBaseAndBitshift+0xa8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a2c      	ldr	r2, [pc, #176]	@ (800373c <DMA_CalcBaseAndBitshift+0x154>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d101      	bne.n	8003694 <DMA_CalcBaseAndBitshift+0xac>
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <DMA_CalcBaseAndBitshift+0xae>
 8003694:	2300      	movs	r3, #0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d024      	beq.n	80036e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	3b10      	subs	r3, #16
 80036a2:	4a27      	ldr	r2, [pc, #156]	@ (8003740 <DMA_CalcBaseAndBitshift+0x158>)
 80036a4:	fba2 2303 	umull	r2, r3, r2, r3
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	4a24      	ldr	r2, [pc, #144]	@ (8003744 <DMA_CalcBaseAndBitshift+0x15c>)
 80036b4:	5cd3      	ldrb	r3, [r2, r3]
 80036b6:	461a      	mov	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d908      	bls.n	80036d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003748 <DMA_CalcBaseAndBitshift+0x160>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	1d1a      	adds	r2, r3, #4
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80036d2:	e00d      	b.n	80036f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b1b      	ldr	r3, [pc, #108]	@ (8003748 <DMA_CalcBaseAndBitshift+0x160>)
 80036dc:	4013      	ands	r3, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80036e2:	e005      	b.n	80036f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40020010 	.word	0x40020010
 8003704:	40020028 	.word	0x40020028
 8003708:	40020040 	.word	0x40020040
 800370c:	40020058 	.word	0x40020058
 8003710:	40020070 	.word	0x40020070
 8003714:	40020088 	.word	0x40020088
 8003718:	400200a0 	.word	0x400200a0
 800371c:	400200b8 	.word	0x400200b8
 8003720:	40020410 	.word	0x40020410
 8003724:	40020428 	.word	0x40020428
 8003728:	40020440 	.word	0x40020440
 800372c:	40020458 	.word	0x40020458
 8003730:	40020470 	.word	0x40020470
 8003734:	40020488 	.word	0x40020488
 8003738:	400204a0 	.word	0x400204a0
 800373c:	400204b8 	.word	0x400204b8
 8003740:	aaaaaaab 	.word	0xaaaaaaab
 8003744:	0800a0b8 	.word	0x0800a0b8
 8003748:	fffffc00 	.word	0xfffffc00

0800374c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d120      	bne.n	80037a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	2b03      	cmp	r3, #3
 8003766:	d858      	bhi.n	800381a <DMA_CheckFifoParam+0xce>
 8003768:	a201      	add	r2, pc, #4	@ (adr r2, 8003770 <DMA_CheckFifoParam+0x24>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003781 	.word	0x08003781
 8003774:	08003793 	.word	0x08003793
 8003778:	08003781 	.word	0x08003781
 800377c:	0800381b 	.word	0x0800381b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d048      	beq.n	800381e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003790:	e045      	b.n	800381e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003796:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800379a:	d142      	bne.n	8003822 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037a0:	e03f      	b.n	8003822 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037aa:	d123      	bne.n	80037f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d838      	bhi.n	8003826 <DMA_CheckFifoParam+0xda>
 80037b4:	a201      	add	r2, pc, #4	@ (adr r2, 80037bc <DMA_CheckFifoParam+0x70>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037d3 	.word	0x080037d3
 80037c4:	080037cd 	.word	0x080037cd
 80037c8:	080037e5 	.word	0x080037e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
        break;
 80037d0:	e030      	b.n	8003834 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d025      	beq.n	800382a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037e2:	e022      	b.n	800382a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037ec:	d11f      	bne.n	800382e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037f2:	e01c      	b.n	800382e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d902      	bls.n	8003802 <DMA_CheckFifoParam+0xb6>
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d003      	beq.n	8003808 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003800:	e018      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
        break;
 8003806:	e015      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00e      	beq.n	8003832 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
    break;
 8003818:	e00b      	b.n	8003832 <DMA_CheckFifoParam+0xe6>
        break;
 800381a:	bf00      	nop
 800381c:	e00a      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
        break;
 800381e:	bf00      	nop
 8003820:	e008      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
        break;
 8003822:	bf00      	nop
 8003824:	e006      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
        break;
 8003826:	bf00      	nop
 8003828:	e004      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
        break;
 800382a:	bf00      	nop
 800382c:	e002      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
        break;
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
    break;
 8003832:	bf00      	nop
    }
  }

  return status;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop

08003844 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a38      	ldr	r2, [pc, #224]	@ (8003938 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d022      	beq.n	80038a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a36      	ldr	r2, [pc, #216]	@ (800393c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d01d      	beq.n	80038a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a35      	ldr	r2, [pc, #212]	@ (8003940 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d018      	beq.n	80038a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a33      	ldr	r2, [pc, #204]	@ (8003944 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a32      	ldr	r2, [pc, #200]	@ (8003948 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00e      	beq.n	80038a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a30      	ldr	r2, [pc, #192]	@ (800394c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d009      	beq.n	80038a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2f      	ldr	r2, [pc, #188]	@ (8003950 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d004      	beq.n	80038a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2d      	ldr	r2, [pc, #180]	@ (8003954 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80038a6:	2300      	movs	r3, #0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01a      	beq.n	80038e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	3b08      	subs	r3, #8
 80038b4:	4a28      	ldr	r2, [pc, #160]	@ (8003958 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4b26      	ldr	r3, [pc, #152]	@ (800395c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	461a      	mov	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a24      	ldr	r2, [pc, #144]	@ (8003960 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80038d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	2201      	movs	r2, #1
 80038da:	409a      	lsls	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80038e0:	e024      	b.n	800392c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	3b10      	subs	r3, #16
 80038ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003964 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d806      	bhi.n	800390a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4a1b      	ldr	r2, [pc, #108]	@ (800396c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d902      	bls.n	800390a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3308      	adds	r3, #8
 8003908:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4b18      	ldr	r3, [pc, #96]	@ (8003970 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	461a      	mov	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a16      	ldr	r2, [pc, #88]	@ (8003974 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800391c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	2201      	movs	r2, #1
 8003926:	409a      	lsls	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	58025408 	.word	0x58025408
 800393c:	5802541c 	.word	0x5802541c
 8003940:	58025430 	.word	0x58025430
 8003944:	58025444 	.word	0x58025444
 8003948:	58025458 	.word	0x58025458
 800394c:	5802546c 	.word	0x5802546c
 8003950:	58025480 	.word	0x58025480
 8003954:	58025494 	.word	0x58025494
 8003958:	cccccccd 	.word	0xcccccccd
 800395c:	16009600 	.word	0x16009600
 8003960:	58025880 	.word	0x58025880
 8003964:	aaaaaaab 	.word	0xaaaaaaab
 8003968:	400204b8 	.word	0x400204b8
 800396c:	4002040f 	.word	0x4002040f
 8003970:	10008200 	.word	0x10008200
 8003974:	40020880 	.word	0x40020880

08003978 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d04a      	beq.n	8003a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b08      	cmp	r3, #8
 8003992:	d847      	bhi.n	8003a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a25      	ldr	r2, [pc, #148]	@ (8003a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d022      	beq.n	80039e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a24      	ldr	r2, [pc, #144]	@ (8003a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d01d      	beq.n	80039e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a22      	ldr	r2, [pc, #136]	@ (8003a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d018      	beq.n	80039e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a21      	ldr	r2, [pc, #132]	@ (8003a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00e      	beq.n	80039e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d009      	beq.n	80039e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1b      	ldr	r2, [pc, #108]	@ (8003a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80039e8:	2300      	movs	r3, #0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4b17      	ldr	r3, [pc, #92]	@ (8003a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	461a      	mov	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a15      	ldr	r2, [pc, #84]	@ (8003a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003a00:	671a      	str	r2, [r3, #112]	@ 0x70
 8003a02:	e009      	b.n	8003a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4b14      	ldr	r3, [pc, #80]	@ (8003a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a11      	ldr	r2, [pc, #68]	@ (8003a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003a16:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	58025408 	.word	0x58025408
 8003a34:	5802541c 	.word	0x5802541c
 8003a38:	58025430 	.word	0x58025430
 8003a3c:	58025444 	.word	0x58025444
 8003a40:	58025458 	.word	0x58025458
 8003a44:	5802546c 	.word	0x5802546c
 8003a48:	58025480 	.word	0x58025480
 8003a4c:	58025494 	.word	0x58025494
 8003a50:	1600963f 	.word	0x1600963f
 8003a54:	58025940 	.word	0x58025940
 8003a58:	1000823f 	.word	0x1000823f
 8003a5c:	40020940 	.word	0x40020940

08003a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b089      	sub	sp, #36	@ 0x24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a6e:	4b89      	ldr	r3, [pc, #548]	@ (8003c94 <HAL_GPIO_Init+0x234>)
 8003a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a72:	e194      	b.n	8003d9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	2101      	movs	r1, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8186 	beq.w	8003d98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d005      	beq.n	8003aa4 <HAL_GPIO_Init+0x44>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d130      	bne.n	8003b06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	2203      	movs	r2, #3
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ada:	2201      	movs	r2, #1
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	f003 0201 	and.w	r2, r3, #1
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d017      	beq.n	8003b42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4013      	ands	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d123      	bne.n	8003b96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	08da      	lsrs	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3208      	adds	r2, #8
 8003b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	220f      	movs	r2, #15
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	08da      	lsrs	r2, r3, #3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3208      	adds	r2, #8
 8003b90:	69b9      	ldr	r1, [r7, #24]
 8003b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 0203 	and.w	r2, r3, #3
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80e0 	beq.w	8003d98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8003c98 <HAL_GPIO_Init+0x238>)
 8003bda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bde:	4a2e      	ldr	r2, [pc, #184]	@ (8003c98 <HAL_GPIO_Init+0x238>)
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003be8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c98 <HAL_GPIO_Init+0x238>)
 8003bea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bf6:	4a29      	ldr	r2, [pc, #164]	@ (8003c9c <HAL_GPIO_Init+0x23c>)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	089b      	lsrs	r3, r3, #2
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	220f      	movs	r2, #15
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a20      	ldr	r2, [pc, #128]	@ (8003ca0 <HAL_GPIO_Init+0x240>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d052      	beq.n	8003cc8 <HAL_GPIO_Init+0x268>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca4 <HAL_GPIO_Init+0x244>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d031      	beq.n	8003c8e <HAL_GPIO_Init+0x22e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca8 <HAL_GPIO_Init+0x248>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d02b      	beq.n	8003c8a <HAL_GPIO_Init+0x22a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a1d      	ldr	r2, [pc, #116]	@ (8003cac <HAL_GPIO_Init+0x24c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d025      	beq.n	8003c86 <HAL_GPIO_Init+0x226>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb0 <HAL_GPIO_Init+0x250>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d01f      	beq.n	8003c82 <HAL_GPIO_Init+0x222>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb4 <HAL_GPIO_Init+0x254>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d019      	beq.n	8003c7e <HAL_GPIO_Init+0x21e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb8 <HAL_GPIO_Init+0x258>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_GPIO_Init+0x21a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a19      	ldr	r2, [pc, #100]	@ (8003cbc <HAL_GPIO_Init+0x25c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00d      	beq.n	8003c76 <HAL_GPIO_Init+0x216>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a18      	ldr	r2, [pc, #96]	@ (8003cc0 <HAL_GPIO_Init+0x260>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d007      	beq.n	8003c72 <HAL_GPIO_Init+0x212>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a17      	ldr	r2, [pc, #92]	@ (8003cc4 <HAL_GPIO_Init+0x264>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d101      	bne.n	8003c6e <HAL_GPIO_Init+0x20e>
 8003c6a:	2309      	movs	r3, #9
 8003c6c:	e02d      	b.n	8003cca <HAL_GPIO_Init+0x26a>
 8003c6e:	230a      	movs	r3, #10
 8003c70:	e02b      	b.n	8003cca <HAL_GPIO_Init+0x26a>
 8003c72:	2308      	movs	r3, #8
 8003c74:	e029      	b.n	8003cca <HAL_GPIO_Init+0x26a>
 8003c76:	2307      	movs	r3, #7
 8003c78:	e027      	b.n	8003cca <HAL_GPIO_Init+0x26a>
 8003c7a:	2306      	movs	r3, #6
 8003c7c:	e025      	b.n	8003cca <HAL_GPIO_Init+0x26a>
 8003c7e:	2305      	movs	r3, #5
 8003c80:	e023      	b.n	8003cca <HAL_GPIO_Init+0x26a>
 8003c82:	2304      	movs	r3, #4
 8003c84:	e021      	b.n	8003cca <HAL_GPIO_Init+0x26a>
 8003c86:	2303      	movs	r3, #3
 8003c88:	e01f      	b.n	8003cca <HAL_GPIO_Init+0x26a>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e01d      	b.n	8003cca <HAL_GPIO_Init+0x26a>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e01b      	b.n	8003cca <HAL_GPIO_Init+0x26a>
 8003c92:	bf00      	nop
 8003c94:	58000080 	.word	0x58000080
 8003c98:	58024400 	.word	0x58024400
 8003c9c:	58000400 	.word	0x58000400
 8003ca0:	58020000 	.word	0x58020000
 8003ca4:	58020400 	.word	0x58020400
 8003ca8:	58020800 	.word	0x58020800
 8003cac:	58020c00 	.word	0x58020c00
 8003cb0:	58021000 	.word	0x58021000
 8003cb4:	58021400 	.word	0x58021400
 8003cb8:	58021800 	.word	0x58021800
 8003cbc:	58021c00 	.word	0x58021c00
 8003cc0:	58022000 	.word	0x58022000
 8003cc4:	58022400 	.word	0x58022400
 8003cc8:	2300      	movs	r3, #0
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	f002 0203 	and.w	r2, r2, #3
 8003cd0:	0092      	lsls	r2, r2, #2
 8003cd2:	4093      	lsls	r3, r2
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cda:	4938      	ldr	r1, [pc, #224]	@ (8003dbc <HAL_GPIO_Init+0x35c>)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	089b      	lsrs	r3, r3, #2
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f47f ae63 	bne.w	8003a74 <HAL_GPIO_Init+0x14>
  }
}
 8003dae:	bf00      	nop
 8003db0:	bf00      	nop
 8003db2:	3724      	adds	r7, #36	@ 0x24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	58000400 	.word	0x58000400

08003dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	807b      	strh	r3, [r7, #2]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dd0:	787b      	ldrb	r3, [r7, #1]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dd6:	887a      	ldrh	r2, [r7, #2]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ddc:	e003      	b.n	8003de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003dde:	887b      	ldrh	r3, [r7, #2]
 8003de0:	041a      	lsls	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	619a      	str	r2, [r3, #24]
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e04:	887a      	ldrh	r2, [r7, #2]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	041a      	lsls	r2, r3, #16
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	43d9      	mvns	r1, r3
 8003e10:	887b      	ldrh	r3, [r7, #2]
 8003e12:	400b      	ands	r3, r1
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	619a      	str	r2, [r3, #24]
}
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003e30:	4b19      	ldr	r3, [pc, #100]	@ (8003e98 <HAL_PWREx_ConfigSupply+0x70>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d00a      	beq.n	8003e52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e3c:	4b16      	ldr	r3, [pc, #88]	@ (8003e98 <HAL_PWREx_ConfigSupply+0x70>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d001      	beq.n	8003e4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e01f      	b.n	8003e8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e01d      	b.n	8003e8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e52:	4b11      	ldr	r3, [pc, #68]	@ (8003e98 <HAL_PWREx_ConfigSupply+0x70>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f023 0207 	bic.w	r2, r3, #7
 8003e5a:	490f      	ldr	r1, [pc, #60]	@ (8003e98 <HAL_PWREx_ConfigSupply+0x70>)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e62:	f7fd f88b 	bl	8000f7c <HAL_GetTick>
 8003e66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e68:	e009      	b.n	8003e7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e6a:	f7fd f887 	bl	8000f7c <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e78:	d901      	bls.n	8003e7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e007      	b.n	8003e8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e7e:	4b06      	ldr	r3, [pc, #24]	@ (8003e98 <HAL_PWREx_ConfigSupply+0x70>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e8a:	d1ee      	bne.n	8003e6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	58024800 	.word	0x58024800

08003e9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08c      	sub	sp, #48	@ 0x30
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d102      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f000 bc48 	b.w	8004740 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8088 	beq.w	8003fce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ebe:	4b99      	ldr	r3, [pc, #612]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ec8:	4b96      	ldr	r3, [pc, #600]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d007      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x48>
 8003ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed6:	2b18      	cmp	r3, #24
 8003ed8:	d111      	bne.n	8003efe <HAL_RCC_OscConfig+0x62>
 8003eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d10c      	bne.n	8003efe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	4b8f      	ldr	r3, [pc, #572]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d06d      	beq.n	8003fcc <HAL_RCC_OscConfig+0x130>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d169      	bne.n	8003fcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f000 bc21 	b.w	8004740 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f06:	d106      	bne.n	8003f16 <HAL_RCC_OscConfig+0x7a>
 8003f08:	4b86      	ldr	r3, [pc, #536]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a85      	ldr	r2, [pc, #532]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	e02e      	b.n	8003f74 <HAL_RCC_OscConfig+0xd8>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x9c>
 8003f1e:	4b81      	ldr	r3, [pc, #516]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a80      	ldr	r2, [pc, #512]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b7e      	ldr	r3, [pc, #504]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7d      	ldr	r2, [pc, #500]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e01d      	b.n	8003f74 <HAL_RCC_OscConfig+0xd8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0xc0>
 8003f42:	4b78      	ldr	r3, [pc, #480]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a77      	ldr	r2, [pc, #476]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	4b75      	ldr	r3, [pc, #468]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a74      	ldr	r2, [pc, #464]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCC_OscConfig+0xd8>
 8003f5c:	4b71      	ldr	r3, [pc, #452]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a70      	ldr	r2, [pc, #448]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	4b6e      	ldr	r3, [pc, #440]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a6d      	ldr	r2, [pc, #436]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d013      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fc fffe 	bl	8000f7c <HAL_GetTick>
 8003f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f84:	f7fc fffa 	bl	8000f7c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	@ 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e3d4      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f96:	4b63      	ldr	r3, [pc, #396]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0xe8>
 8003fa2:	e014      	b.n	8003fce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fc ffea 	bl	8000f7c <HAL_GetTick>
 8003fa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fac:	f7fc ffe6 	bl	8000f7c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	@ 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e3c0      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fbe:	4b59      	ldr	r3, [pc, #356]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x110>
 8003fca:	e000      	b.n	8003fce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80ca 	beq.w	8004170 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fdc:	4b51      	ldr	r3, [pc, #324]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fe4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fe6:	4b4f      	ldr	r3, [pc, #316]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <HAL_RCC_OscConfig+0x166>
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	2b18      	cmp	r3, #24
 8003ff6:	d156      	bne.n	80040a6 <HAL_RCC_OscConfig+0x20a>
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d151      	bne.n	80040a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004002:	4b48      	ldr	r3, [pc, #288]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_RCC_OscConfig+0x17e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e392      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800401a:	4b42      	ldr	r3, [pc, #264]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 0219 	bic.w	r2, r3, #25
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	493f      	ldr	r1, [pc, #252]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8004028:	4313      	orrs	r3, r2
 800402a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fc ffa6 	bl	8000f7c <HAL_GetTick>
 8004030:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004034:	f7fc ffa2 	bl	8000f7c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e37c      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004046:	4b37      	ldr	r3, [pc, #220]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004052:	f7fc ff9f 	bl	8000f94 <HAL_GetREVID>
 8004056:	4603      	mov	r3, r0
 8004058:	f241 0203 	movw	r2, #4099	@ 0x1003
 800405c:	4293      	cmp	r3, r2
 800405e:	d817      	bhi.n	8004090 <HAL_RCC_OscConfig+0x1f4>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	2b40      	cmp	r3, #64	@ 0x40
 8004066:	d108      	bne.n	800407a <HAL_RCC_OscConfig+0x1de>
 8004068:	4b2e      	ldr	r3, [pc, #184]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004070:	4a2c      	ldr	r2, [pc, #176]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004076:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004078:	e07a      	b.n	8004170 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407a:	4b2a      	ldr	r3, [pc, #168]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	031b      	lsls	r3, r3, #12
 8004088:	4926      	ldr	r1, [pc, #152]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 800408a:	4313      	orrs	r3, r2
 800408c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800408e:	e06f      	b.n	8004170 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004090:	4b24      	ldr	r3, [pc, #144]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	4921      	ldr	r1, [pc, #132]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040a4:	e064      	b.n	8004170 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d047      	beq.n	800413e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 0219 	bic.w	r2, r3, #25
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	491a      	ldr	r1, [pc, #104]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fc ff5c 	bl	8000f7c <HAL_GetTick>
 80040c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c8:	f7fc ff58 	bl	8000f7c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e332      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040da:	4b12      	ldr	r3, [pc, #72]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e6:	f7fc ff55 	bl	8000f94 <HAL_GetREVID>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d819      	bhi.n	8004128 <HAL_RCC_OscConfig+0x28c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b40      	cmp	r3, #64	@ 0x40
 80040fa:	d108      	bne.n	800410e <HAL_RCC_OscConfig+0x272>
 80040fc:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004104:	4a07      	ldr	r2, [pc, #28]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8004106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800410a:	6053      	str	r3, [r2, #4]
 800410c:	e030      	b.n	8004170 <HAL_RCC_OscConfig+0x2d4>
 800410e:	4b05      	ldr	r3, [pc, #20]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	031b      	lsls	r3, r3, #12
 800411c:	4901      	ldr	r1, [pc, #4]	@ (8004124 <HAL_RCC_OscConfig+0x288>)
 800411e:	4313      	orrs	r3, r2
 8004120:	604b      	str	r3, [r1, #4]
 8004122:	e025      	b.n	8004170 <HAL_RCC_OscConfig+0x2d4>
 8004124:	58024400 	.word	0x58024400
 8004128:	4b9a      	ldr	r3, [pc, #616]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	061b      	lsls	r3, r3, #24
 8004136:	4997      	ldr	r1, [pc, #604]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 8004138:	4313      	orrs	r3, r2
 800413a:	604b      	str	r3, [r1, #4]
 800413c:	e018      	b.n	8004170 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800413e:	4b95      	ldr	r3, [pc, #596]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a94      	ldr	r2, [pc, #592]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fc ff17 	bl	8000f7c <HAL_GetTick>
 800414e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004152:	f7fc ff13 	bl	8000f7c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e2ed      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004164:	4b8b      	ldr	r3, [pc, #556]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f0      	bne.n	8004152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80a9 	beq.w	80042d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800417e:	4b85      	ldr	r3, [pc, #532]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004186:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004188:	4b82      	ldr	r3, [pc, #520]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d007      	beq.n	80041a4 <HAL_RCC_OscConfig+0x308>
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b18      	cmp	r3, #24
 8004198:	d13a      	bne.n	8004210 <HAL_RCC_OscConfig+0x374>
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d135      	bne.n	8004210 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041a4:	4b7b      	ldr	r3, [pc, #492]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_OscConfig+0x320>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	2b80      	cmp	r3, #128	@ 0x80
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e2c1      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041bc:	f7fc feea 	bl	8000f94 <HAL_GetREVID>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d817      	bhi.n	80041fa <HAL_RCC_OscConfig+0x35e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d108      	bne.n	80041e4 <HAL_RCC_OscConfig+0x348>
 80041d2:	4b70      	ldr	r3, [pc, #448]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80041da:	4a6e      	ldr	r2, [pc, #440]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 80041dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041e2:	e075      	b.n	80042d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	069b      	lsls	r3, r3, #26
 80041f2:	4968      	ldr	r1, [pc, #416]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041f8:	e06a      	b.n	80042d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041fa:	4b66      	ldr	r3, [pc, #408]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	061b      	lsls	r3, r3, #24
 8004208:	4962      	ldr	r1, [pc, #392]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 800420a:	4313      	orrs	r3, r2
 800420c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800420e:	e05f      	b.n	80042d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d042      	beq.n	800429e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004218:	4b5e      	ldr	r3, [pc, #376]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a5d      	ldr	r2, [pc, #372]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 800421e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fc feaa 	bl	8000f7c <HAL_GetTick>
 8004228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800422c:	f7fc fea6 	bl	8000f7c <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e280      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800423e:	4b55      	ldr	r3, [pc, #340]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800424a:	f7fc fea3 	bl	8000f94 <HAL_GetREVID>
 800424e:	4603      	mov	r3, r0
 8004250:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004254:	4293      	cmp	r3, r2
 8004256:	d817      	bhi.n	8004288 <HAL_RCC_OscConfig+0x3ec>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	2b20      	cmp	r3, #32
 800425e:	d108      	bne.n	8004272 <HAL_RCC_OscConfig+0x3d6>
 8004260:	4b4c      	ldr	r3, [pc, #304]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004268:	4a4a      	ldr	r2, [pc, #296]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 800426a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800426e:	6053      	str	r3, [r2, #4]
 8004270:	e02e      	b.n	80042d0 <HAL_RCC_OscConfig+0x434>
 8004272:	4b48      	ldr	r3, [pc, #288]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	069b      	lsls	r3, r3, #26
 8004280:	4944      	ldr	r1, [pc, #272]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
 8004286:	e023      	b.n	80042d0 <HAL_RCC_OscConfig+0x434>
 8004288:	4b42      	ldr	r3, [pc, #264]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	061b      	lsls	r3, r3, #24
 8004296:	493f      	ldr	r1, [pc, #252]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 8004298:	4313      	orrs	r3, r2
 800429a:	60cb      	str	r3, [r1, #12]
 800429c:	e018      	b.n	80042d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800429e:	4b3d      	ldr	r3, [pc, #244]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a3c      	ldr	r2, [pc, #240]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 80042a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fc fe67 	bl	8000f7c <HAL_GetTick>
 80042ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80042b2:	f7fc fe63 	bl	8000f7c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e23d      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042c4:	4b33      	ldr	r3, [pc, #204]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f0      	bne.n	80042b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d036      	beq.n	800434a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d019      	beq.n	8004318 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 80042e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7fc fe44 	bl	8000f7c <HAL_GetTick>
 80042f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f8:	f7fc fe40 	bl	8000f7c <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e21a      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800430a:	4b22      	ldr	r3, [pc, #136]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 800430c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0x45c>
 8004316:	e018      	b.n	800434a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004318:	4b1e      	ldr	r3, [pc, #120]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 800431a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431c:	4a1d      	ldr	r2, [pc, #116]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7fc fe2a 	bl	8000f7c <HAL_GetTick>
 8004328:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800432c:	f7fc fe26 	bl	8000f7c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e200      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800433e:	4b15      	ldr	r3, [pc, #84]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 8004340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d039      	beq.n	80043ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01c      	beq.n	8004398 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800435e:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a0c      	ldr	r2, [pc, #48]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 8004364:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004368:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800436a:	f7fc fe07 	bl	8000f7c <HAL_GetTick>
 800436e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004372:	f7fc fe03 	bl	8000f7c <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e1dd      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004384:	4b03      	ldr	r3, [pc, #12]	@ (8004394 <HAL_RCC_OscConfig+0x4f8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0x4d6>
 8004390:	e01b      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
 8004392:	bf00      	nop
 8004394:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004398:	4b9b      	ldr	r3, [pc, #620]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a9a      	ldr	r2, [pc, #616]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 800439e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043a4:	f7fc fdea 	bl	8000f7c <HAL_GetTick>
 80043a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043ac:	f7fc fde6 	bl	8000f7c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e1c0      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043be:	4b92      	ldr	r3, [pc, #584]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 8081 	beq.w	80044da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043d8:	4b8c      	ldr	r3, [pc, #560]	@ (800460c <HAL_RCC_OscConfig+0x770>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a8b      	ldr	r2, [pc, #556]	@ (800460c <HAL_RCC_OscConfig+0x770>)
 80043de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043e4:	f7fc fdca 	bl	8000f7c <HAL_GetTick>
 80043e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ec:	f7fc fdc6 	bl	8000f7c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	@ 0x64
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e1a0      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043fe:	4b83      	ldr	r3, [pc, #524]	@ (800460c <HAL_RCC_OscConfig+0x770>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d106      	bne.n	8004420 <HAL_RCC_OscConfig+0x584>
 8004412:	4b7d      	ldr	r3, [pc, #500]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004416:	4a7c      	ldr	r2, [pc, #496]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	6713      	str	r3, [r2, #112]	@ 0x70
 800441e:	e02d      	b.n	800447c <HAL_RCC_OscConfig+0x5e0>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10c      	bne.n	8004442 <HAL_RCC_OscConfig+0x5a6>
 8004428:	4b77      	ldr	r3, [pc, #476]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442c:	4a76      	ldr	r2, [pc, #472]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 800442e:	f023 0301 	bic.w	r3, r3, #1
 8004432:	6713      	str	r3, [r2, #112]	@ 0x70
 8004434:	4b74      	ldr	r3, [pc, #464]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004438:	4a73      	ldr	r2, [pc, #460]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 800443a:	f023 0304 	bic.w	r3, r3, #4
 800443e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004440:	e01c      	b.n	800447c <HAL_RCC_OscConfig+0x5e0>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b05      	cmp	r3, #5
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0x5c8>
 800444a:	4b6f      	ldr	r3, [pc, #444]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444e:	4a6e      	ldr	r2, [pc, #440]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 8004450:	f043 0304 	orr.w	r3, r3, #4
 8004454:	6713      	str	r3, [r2, #112]	@ 0x70
 8004456:	4b6c      	ldr	r3, [pc, #432]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445a:	4a6b      	ldr	r2, [pc, #428]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	6713      	str	r3, [r2, #112]	@ 0x70
 8004462:	e00b      	b.n	800447c <HAL_RCC_OscConfig+0x5e0>
 8004464:	4b68      	ldr	r3, [pc, #416]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004468:	4a67      	ldr	r2, [pc, #412]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004470:	4b65      	ldr	r3, [pc, #404]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004474:	4a64      	ldr	r2, [pc, #400]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 8004476:	f023 0304 	bic.w	r3, r3, #4
 800447a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d015      	beq.n	80044b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fc fd7a 	bl	8000f7c <HAL_GetTick>
 8004488:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448c:	f7fc fd76 	bl	8000f7c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e14e      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044a2:	4b59      	ldr	r3, [pc, #356]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0ee      	beq.n	800448c <HAL_RCC_OscConfig+0x5f0>
 80044ae:	e014      	b.n	80044da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fc fd64 	bl	8000f7c <HAL_GetTick>
 80044b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fc fd60 	bl	8000f7c <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e138      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1ee      	bne.n	80044b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 812d 	beq.w	800473e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80044e4:	4b48      	ldr	r3, [pc, #288]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044ec:	2b18      	cmp	r3, #24
 80044ee:	f000 80bd 	beq.w	800466c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	f040 809e 	bne.w	8004638 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fc:	4b42      	ldr	r3, [pc, #264]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a41      	ldr	r2, [pc, #260]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 8004502:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fc fd38 	bl	8000f7c <HAL_GetTick>
 800450c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004510:	f7fc fd34 	bl	8000f7c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e10e      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004522:	4b39      	ldr	r3, [pc, #228]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800452e:	4b36      	ldr	r3, [pc, #216]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 8004530:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004532:	4b37      	ldr	r3, [pc, #220]	@ (8004610 <HAL_RCC_OscConfig+0x774>)
 8004534:	4013      	ands	r3, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800453e:	0112      	lsls	r2, r2, #4
 8004540:	430a      	orrs	r2, r1
 8004542:	4931      	ldr	r1, [pc, #196]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 8004544:	4313      	orrs	r3, r2
 8004546:	628b      	str	r3, [r1, #40]	@ 0x28
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	3b01      	subs	r3, #1
 800454e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004556:	3b01      	subs	r3, #1
 8004558:	025b      	lsls	r3, r3, #9
 800455a:	b29b      	uxth	r3, r3
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004562:	3b01      	subs	r3, #1
 8004564:	041b      	lsls	r3, r3, #16
 8004566:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004570:	3b01      	subs	r3, #1
 8004572:	061b      	lsls	r3, r3, #24
 8004574:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004578:	4923      	ldr	r1, [pc, #140]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800457e:	4b22      	ldr	r3, [pc, #136]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 8004580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004582:	4a21      	ldr	r2, [pc, #132]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800458a:	4b1f      	ldr	r3, [pc, #124]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 800458c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800458e:	4b21      	ldr	r3, [pc, #132]	@ (8004614 <HAL_RCC_OscConfig+0x778>)
 8004590:	4013      	ands	r3, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004596:	00d2      	lsls	r2, r2, #3
 8004598:	491b      	ldr	r1, [pc, #108]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 800459a:	4313      	orrs	r3, r2
 800459c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800459e:	4b1a      	ldr	r3, [pc, #104]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	f023 020c 	bic.w	r2, r3, #12
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	4917      	ldr	r1, [pc, #92]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045b0:	4b15      	ldr	r3, [pc, #84]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80045b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b4:	f023 0202 	bic.w	r2, r3, #2
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045bc:	4912      	ldr	r1, [pc, #72]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045c2:	4b11      	ldr	r3, [pc, #68]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c6:	4a10      	ldr	r2, [pc, #64]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80045c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80045d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80045da:	4b0b      	ldr	r3, [pc, #44]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	4a0a      	ldr	r2, [pc, #40]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80045e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80045e6:	4b08      	ldr	r3, [pc, #32]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80045e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ea:	4a07      	ldr	r2, [pc, #28]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f2:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a04      	ldr	r2, [pc, #16]	@ (8004608 <HAL_RCC_OscConfig+0x76c>)
 80045f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fe:	f7fc fcbd 	bl	8000f7c <HAL_GetTick>
 8004602:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004604:	e011      	b.n	800462a <HAL_RCC_OscConfig+0x78e>
 8004606:	bf00      	nop
 8004608:	58024400 	.word	0x58024400
 800460c:	58024800 	.word	0x58024800
 8004610:	fffffc0c 	.word	0xfffffc0c
 8004614:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004618:	f7fc fcb0 	bl	8000f7c <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e08a      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800462a:	4b47      	ldr	r3, [pc, #284]	@ (8004748 <HAL_RCC_OscConfig+0x8ac>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0x77c>
 8004636:	e082      	b.n	800473e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b43      	ldr	r3, [pc, #268]	@ (8004748 <HAL_RCC_OscConfig+0x8ac>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a42      	ldr	r2, [pc, #264]	@ (8004748 <HAL_RCC_OscConfig+0x8ac>)
 800463e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fc fc9a 	bl	8000f7c <HAL_GetTick>
 8004648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fc fc96 	bl	8000f7c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e070      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800465e:	4b3a      	ldr	r3, [pc, #232]	@ (8004748 <HAL_RCC_OscConfig+0x8ac>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x7b0>
 800466a:	e068      	b.n	800473e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800466c:	4b36      	ldr	r3, [pc, #216]	@ (8004748 <HAL_RCC_OscConfig+0x8ac>)
 800466e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004670:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004672:	4b35      	ldr	r3, [pc, #212]	@ (8004748 <HAL_RCC_OscConfig+0x8ac>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	2b01      	cmp	r3, #1
 800467e:	d031      	beq.n	80046e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f003 0203 	and.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d12a      	bne.n	80046e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d122      	bne.n	80046e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d11a      	bne.n	80046e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	0a5b      	lsrs	r3, r3, #9
 80046b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d111      	bne.n	80046e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	0c1b      	lsrs	r3, r3, #16
 80046c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d108      	bne.n	80046e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	0e1b      	lsrs	r3, r3, #24
 80046d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e02b      	b.n	8004740 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80046e8:	4b17      	ldr	r3, [pc, #92]	@ (8004748 <HAL_RCC_OscConfig+0x8ac>)
 80046ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ec:	08db      	lsrs	r3, r3, #3
 80046ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d01f      	beq.n	800473e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80046fe:	4b12      	ldr	r3, [pc, #72]	@ (8004748 <HAL_RCC_OscConfig+0x8ac>)
 8004700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004702:	4a11      	ldr	r2, [pc, #68]	@ (8004748 <HAL_RCC_OscConfig+0x8ac>)
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800470a:	f7fc fc37 	bl	8000f7c <HAL_GetTick>
 800470e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004710:	bf00      	nop
 8004712:	f7fc fc33 	bl	8000f7c <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471a:	4293      	cmp	r3, r2
 800471c:	d0f9      	beq.n	8004712 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800471e:	4b0a      	ldr	r3, [pc, #40]	@ (8004748 <HAL_RCC_OscConfig+0x8ac>)
 8004720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004722:	4b0a      	ldr	r3, [pc, #40]	@ (800474c <HAL_RCC_OscConfig+0x8b0>)
 8004724:	4013      	ands	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800472a:	00d2      	lsls	r2, r2, #3
 800472c:	4906      	ldr	r1, [pc, #24]	@ (8004748 <HAL_RCC_OscConfig+0x8ac>)
 800472e:	4313      	orrs	r3, r2
 8004730:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004732:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <HAL_RCC_OscConfig+0x8ac>)
 8004734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004736:	4a04      	ldr	r2, [pc, #16]	@ (8004748 <HAL_RCC_OscConfig+0x8ac>)
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3730      	adds	r7, #48	@ 0x30
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	58024400 	.word	0x58024400
 800474c:	ffff0007 	.word	0xffff0007

08004750 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e19c      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004764:	4b8a      	ldr	r3, [pc, #552]	@ (8004990 <HAL_RCC_ClockConfig+0x240>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d910      	bls.n	8004794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004772:	4b87      	ldr	r3, [pc, #540]	@ (8004990 <HAL_RCC_ClockConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 020f 	bic.w	r2, r3, #15
 800477a:	4985      	ldr	r1, [pc, #532]	@ (8004990 <HAL_RCC_ClockConfig+0x240>)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b83      	ldr	r3, [pc, #524]	@ (8004990 <HAL_RCC_ClockConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e184      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d010      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	4b7b      	ldr	r3, [pc, #492]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d908      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047b0:	4b78      	ldr	r3, [pc, #480]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	4975      	ldr	r1, [pc, #468]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d010      	beq.n	80047f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	4b70      	ldr	r3, [pc, #448]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047da:	429a      	cmp	r2, r3
 80047dc:	d908      	bls.n	80047f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047de:	4b6d      	ldr	r3, [pc, #436]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	496a      	ldr	r1, [pc, #424]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d010      	beq.n	800481e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	4b64      	ldr	r3, [pc, #400]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004808:	429a      	cmp	r2, r3
 800480a:	d908      	bls.n	800481e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800480c:	4b61      	ldr	r3, [pc, #388]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	495e      	ldr	r1, [pc, #376]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 800481a:	4313      	orrs	r3, r2
 800481c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b00      	cmp	r3, #0
 8004828:	d010      	beq.n	800484c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	4b59      	ldr	r3, [pc, #356]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004836:	429a      	cmp	r2, r3
 8004838:	d908      	bls.n	800484c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800483a:	4b56      	ldr	r3, [pc, #344]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	4953      	ldr	r1, [pc, #332]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004848:	4313      	orrs	r3, r2
 800484a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d010      	beq.n	800487a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	4b4d      	ldr	r3, [pc, #308]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	429a      	cmp	r2, r3
 8004866:	d908      	bls.n	800487a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004868:	4b4a      	ldr	r3, [pc, #296]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f023 020f 	bic.w	r2, r3, #15
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4947      	ldr	r1, [pc, #284]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004876:	4313      	orrs	r3, r2
 8004878:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d055      	beq.n	8004932 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004886:	4b43      	ldr	r3, [pc, #268]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	4940      	ldr	r1, [pc, #256]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004894:	4313      	orrs	r3, r2
 8004896:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d107      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d121      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0f6      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d107      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048b8:	4b36      	ldr	r3, [pc, #216]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d115      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0ea      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d107      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048d0:	4b30      	ldr	r3, [pc, #192]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0de      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048e0:	4b2c      	ldr	r3, [pc, #176]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0d6      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048f0:	4b28      	ldr	r3, [pc, #160]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f023 0207 	bic.w	r2, r3, #7
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4925      	ldr	r1, [pc, #148]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004902:	f7fc fb3b 	bl	8000f7c <HAL_GetTick>
 8004906:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004908:	e00a      	b.n	8004920 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490a:	f7fc fb37 	bl	8000f7c <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004918:	4293      	cmp	r3, r2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e0be      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004920:	4b1c      	ldr	r3, [pc, #112]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	429a      	cmp	r2, r3
 8004930:	d1eb      	bne.n	800490a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d010      	beq.n	8004960 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	4b14      	ldr	r3, [pc, #80]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	429a      	cmp	r2, r3
 800494c:	d208      	bcs.n	8004960 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494e:	4b11      	ldr	r3, [pc, #68]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f023 020f 	bic.w	r2, r3, #15
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	490e      	ldr	r1, [pc, #56]	@ (8004994 <HAL_RCC_ClockConfig+0x244>)
 800495c:	4313      	orrs	r3, r2
 800495e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004960:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <HAL_RCC_ClockConfig+0x240>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d214      	bcs.n	8004998 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496e:	4b08      	ldr	r3, [pc, #32]	@ (8004990 <HAL_RCC_ClockConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 020f 	bic.w	r2, r3, #15
 8004976:	4906      	ldr	r1, [pc, #24]	@ (8004990 <HAL_RCC_ClockConfig+0x240>)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	4313      	orrs	r3, r2
 800497c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b04      	ldr	r3, [pc, #16]	@ (8004990 <HAL_RCC_ClockConfig+0x240>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d005      	beq.n	8004998 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e086      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>
 8004990:	52002000 	.word	0x52002000
 8004994:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d010      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	4b3f      	ldr	r3, [pc, #252]	@ (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d208      	bcs.n	80049c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049b4:	4b3c      	ldr	r3, [pc, #240]	@ (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	4939      	ldr	r1, [pc, #228]	@ (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d010      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695a      	ldr	r2, [r3, #20]
 80049d6:	4b34      	ldr	r3, [pc, #208]	@ (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049de:	429a      	cmp	r2, r3
 80049e0:	d208      	bcs.n	80049f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049e2:	4b31      	ldr	r3, [pc, #196]	@ (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	492e      	ldr	r1, [pc, #184]	@ (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d010      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699a      	ldr	r2, [r3, #24]
 8004a04:	4b28      	ldr	r3, [pc, #160]	@ (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d208      	bcs.n	8004a22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a10:	4b25      	ldr	r3, [pc, #148]	@ (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	4922      	ldr	r1, [pc, #136]	@ (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d010      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69da      	ldr	r2, [r3, #28]
 8004a32:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d208      	bcs.n	8004a50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	4917      	ldr	r1, [pc, #92]	@ (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a50:	f000 f834 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004a54:	4602      	mov	r2, r0
 8004a56:	4b14      	ldr	r3, [pc, #80]	@ (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	0a1b      	lsrs	r3, r3, #8
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	4912      	ldr	r1, [pc, #72]	@ (8004aac <HAL_RCC_ClockConfig+0x35c>)
 8004a62:	5ccb      	ldrb	r3, [r1, r3]
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	4a0d      	ldr	r2, [pc, #52]	@ (8004aac <HAL_RCC_ClockConfig+0x35c>)
 8004a78:	5cd3      	ldrb	r3, [r2, r3]
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
 8004a84:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab0 <HAL_RCC_ClockConfig+0x360>)
 8004a86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a88:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab4 <HAL_RCC_ClockConfig+0x364>)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab8 <HAL_RCC_ClockConfig+0x368>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fb ffc4 	bl	8000a20 <HAL_InitTick>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	58024400 	.word	0x58024400
 8004aac:	0800a0a8 	.word	0x0800a0a8
 8004ab0:	24000004 	.word	0x24000004
 8004ab4:	24000000 	.word	0x24000000
 8004ab8:	24000008 	.word	0x24000008

08004abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	@ 0x24
 8004ac0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac2:	4bb3      	ldr	r3, [pc, #716]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aca:	2b18      	cmp	r3, #24
 8004acc:	f200 8155 	bhi.w	8004d7a <HAL_RCC_GetSysClockFreq+0x2be>
 8004ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004b3d 	.word	0x08004b3d
 8004adc:	08004d7b 	.word	0x08004d7b
 8004ae0:	08004d7b 	.word	0x08004d7b
 8004ae4:	08004d7b 	.word	0x08004d7b
 8004ae8:	08004d7b 	.word	0x08004d7b
 8004aec:	08004d7b 	.word	0x08004d7b
 8004af0:	08004d7b 	.word	0x08004d7b
 8004af4:	08004d7b 	.word	0x08004d7b
 8004af8:	08004b63 	.word	0x08004b63
 8004afc:	08004d7b 	.word	0x08004d7b
 8004b00:	08004d7b 	.word	0x08004d7b
 8004b04:	08004d7b 	.word	0x08004d7b
 8004b08:	08004d7b 	.word	0x08004d7b
 8004b0c:	08004d7b 	.word	0x08004d7b
 8004b10:	08004d7b 	.word	0x08004d7b
 8004b14:	08004d7b 	.word	0x08004d7b
 8004b18:	08004b69 	.word	0x08004b69
 8004b1c:	08004d7b 	.word	0x08004d7b
 8004b20:	08004d7b 	.word	0x08004d7b
 8004b24:	08004d7b 	.word	0x08004d7b
 8004b28:	08004d7b 	.word	0x08004d7b
 8004b2c:	08004d7b 	.word	0x08004d7b
 8004b30:	08004d7b 	.word	0x08004d7b
 8004b34:	08004d7b 	.word	0x08004d7b
 8004b38:	08004b6f 	.word	0x08004b6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b3c:	4b94      	ldr	r3, [pc, #592]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d009      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b48:	4b91      	ldr	r3, [pc, #580]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	08db      	lsrs	r3, r3, #3
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	4a90      	ldr	r2, [pc, #576]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
 8004b58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b5a:	e111      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b5c:	4b8d      	ldr	r3, [pc, #564]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b5e:	61bb      	str	r3, [r7, #24]
      break;
 8004b60:	e10e      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b62:	4b8d      	ldr	r3, [pc, #564]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b64:	61bb      	str	r3, [r7, #24]
      break;
 8004b66:	e10b      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004b68:	4b8c      	ldr	r3, [pc, #560]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b6a:	61bb      	str	r3, [r7, #24]
      break;
 8004b6c:	e108      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b6e:	4b88      	ldr	r3, [pc, #544]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b78:	4b85      	ldr	r3, [pc, #532]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b84:	4b82      	ldr	r3, [pc, #520]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004b8e:	4b80      	ldr	r3, [pc, #512]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b92:	08db      	lsrs	r3, r3, #3
 8004b94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	fb02 f303 	mul.w	r3, r2, r3
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 80e1 	beq.w	8004d74 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	f000 8083 	beq.w	8004cc0 <HAL_RCC_GetSysClockFreq+0x204>
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	f200 80a1 	bhi.w	8004d04 <HAL_RCC_GetSysClockFreq+0x248>
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x114>
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d056      	beq.n	8004c7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004bce:	e099      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bd0:	4b6f      	ldr	r3, [pc, #444]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d02d      	beq.n	8004c38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	08db      	lsrs	r3, r3, #3
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	4a6b      	ldr	r2, [pc, #428]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	ee07 3a90 	vmov	s15, r3
 8004bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c06:	4b62      	ldr	r3, [pc, #392]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c1a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004c36:	e087      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004da4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4a:	4b51      	ldr	r3, [pc, #324]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c5e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c7a:	e065      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004da8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8e:	4b40      	ldr	r3, [pc, #256]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ca2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cbe:	e043      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004dac <HAL_RCC_GetSysClockFreq+0x2f0>
 8004cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ce6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d02:	e021      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004da8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d16:	4b1e      	ldr	r3, [pc, #120]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d2a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d48:	4b11      	ldr	r3, [pc, #68]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4c:	0a5b      	lsrs	r3, r3, #9
 8004d4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d52:	3301      	adds	r3, #1
 8004d54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d60:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d6c:	ee17 3a90 	vmov	r3, s15
 8004d70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004d72:	e005      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61bb      	str	r3, [r7, #24]
      break;
 8004d78:	e002      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004d7a:	4b07      	ldr	r3, [pc, #28]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d7c:	61bb      	str	r3, [r7, #24]
      break;
 8004d7e:	bf00      	nop
  }

  return sysclockfreq;
 8004d80:	69bb      	ldr	r3, [r7, #24]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3724      	adds	r7, #36	@ 0x24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	58024400 	.word	0x58024400
 8004d94:	03d09000 	.word	0x03d09000
 8004d98:	003d0900 	.word	0x003d0900
 8004d9c:	007a1200 	.word	0x007a1200
 8004da0:	46000000 	.word	0x46000000
 8004da4:	4c742400 	.word	0x4c742400
 8004da8:	4a742400 	.word	0x4a742400
 8004dac:	4af42400 	.word	0x4af42400

08004db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004db6:	f7ff fe81 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	4b10      	ldr	r3, [pc, #64]	@ (8004e00 <HAL_RCC_GetHCLKFreq+0x50>)
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	490f      	ldr	r1, [pc, #60]	@ (8004e04 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dc8:	5ccb      	ldrb	r3, [r1, r3]
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004e00 <HAL_RCC_GetHCLKFreq+0x50>)
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	4a09      	ldr	r2, [pc, #36]	@ (8004e04 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dde:	5cd3      	ldrb	r3, [r2, r3]
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dea:	4a07      	ldr	r2, [pc, #28]	@ (8004e08 <HAL_RCC_GetHCLKFreq+0x58>)
 8004dec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004dee:	4a07      	ldr	r2, [pc, #28]	@ (8004e0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004df4:	4b04      	ldr	r3, [pc, #16]	@ (8004e08 <HAL_RCC_GetHCLKFreq+0x58>)
 8004df6:	681b      	ldr	r3, [r3, #0]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	58024400 	.word	0x58024400
 8004e04:	0800a0a8 	.word	0x0800a0a8
 8004e08:	24000004 	.word	0x24000004
 8004e0c:	24000000 	.word	0x24000000

08004e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e14:	f7ff ffcc 	bl	8004db0 <HAL_RCC_GetHCLKFreq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4b06      	ldr	r3, [pc, #24]	@ (8004e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4904      	ldr	r1, [pc, #16]	@ (8004e38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e26:	5ccb      	ldrb	r3, [r1, r3]
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	58024400 	.word	0x58024400
 8004e38:	0800a0a8 	.word	0x0800a0a8

08004e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004e40:	f7ff ffb6 	bl	8004db0 <HAL_RCC_GetHCLKFreq>
 8004e44:	4602      	mov	r2, r0
 8004e46:	4b06      	ldr	r3, [pc, #24]	@ (8004e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	0a1b      	lsrs	r3, r3, #8
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	4904      	ldr	r1, [pc, #16]	@ (8004e64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e52:	5ccb      	ldrb	r3, [r1, r3]
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	58024400 	.word	0x58024400
 8004e64:	0800a0a8 	.word	0x0800a0a8

08004e68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	223f      	movs	r2, #63	@ 0x3f
 8004e76:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e78:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee4 <HAL_RCC_GetClockConfig+0x7c>)
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f003 0207 	and.w	r2, r3, #7
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004e84:	4b17      	ldr	r3, [pc, #92]	@ (8004ee4 <HAL_RCC_GetClockConfig+0x7c>)
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004e90:	4b14      	ldr	r3, [pc, #80]	@ (8004ee4 <HAL_RCC_GetClockConfig+0x7c>)
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f003 020f 	and.w	r2, r3, #15
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004e9c:	4b11      	ldr	r3, [pc, #68]	@ (8004ee4 <HAL_RCC_GetClockConfig+0x7c>)
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee4 <HAL_RCC_GetClockConfig+0x7c>)
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee4 <HAL_RCC_GetClockConfig+0x7c>)
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004ec0:	4b08      	ldr	r3, [pc, #32]	@ (8004ee4 <HAL_RCC_GetClockConfig+0x7c>)
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ecc:	4b06      	ldr	r3, [pc, #24]	@ (8004ee8 <HAL_RCC_GetClockConfig+0x80>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 020f 	and.w	r2, r3, #15
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	601a      	str	r2, [r3, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	58024400 	.word	0x58024400
 8004ee8:	52002000 	.word	0x52002000

08004eec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef0:	b0ca      	sub	sp, #296	@ 0x128
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004efe:	2300      	movs	r3, #0
 8004f00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004f10:	2500      	movs	r5, #0
 8004f12:	ea54 0305 	orrs.w	r3, r4, r5
 8004f16:	d049      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f22:	d02f      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004f24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f28:	d828      	bhi.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004f2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f2e:	d01a      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f34:	d822      	bhi.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f3e:	d007      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f40:	e01c      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f42:	4bb8      	ldr	r3, [pc, #736]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f46:	4ab7      	ldr	r2, [pc, #732]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f4e:	e01a      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f54:	3308      	adds	r3, #8
 8004f56:	2102      	movs	r1, #2
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 fc8f 	bl	800687c <RCCEx_PLL2_Config>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f64:	e00f      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6a:	3328      	adds	r3, #40	@ 0x28
 8004f6c:	2102      	movs	r1, #2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f001 fd36 	bl	80069e0 <RCCEx_PLL3_Config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f7a:	e004      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f82:	e000      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f8e:	4ba5      	ldr	r3, [pc, #660]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f9c:	4aa1      	ldr	r2, [pc, #644]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004fa2:	e003      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004fb8:	f04f 0900 	mov.w	r9, #0
 8004fbc:	ea58 0309 	orrs.w	r3, r8, r9
 8004fc0:	d047      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d82a      	bhi.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd2:	bf00      	nop
 8004fd4:	08004fe9 	.word	0x08004fe9
 8004fd8:	08004ff7 	.word	0x08004ff7
 8004fdc:	0800500d 	.word	0x0800500d
 8004fe0:	0800502b 	.word	0x0800502b
 8004fe4:	0800502b 	.word	0x0800502b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe8:	4b8e      	ldr	r3, [pc, #568]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	4a8d      	ldr	r2, [pc, #564]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ff4:	e01a      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	4618      	mov	r0, r3
 8005000:	f001 fc3c 	bl	800687c <RCCEx_PLL2_Config>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800500a:	e00f      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800500c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005010:	3328      	adds	r3, #40	@ 0x28
 8005012:	2100      	movs	r1, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f001 fce3 	bl	80069e0 <RCCEx_PLL3_Config>
 800501a:	4603      	mov	r3, r0
 800501c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005020:	e004      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005028:	e000      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800502a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800502c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005034:	4b7b      	ldr	r3, [pc, #492]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005038:	f023 0107 	bic.w	r1, r3, #7
 800503c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005042:	4a78      	ldr	r2, [pc, #480]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005044:	430b      	orrs	r3, r1
 8005046:	6513      	str	r3, [r2, #80]	@ 0x50
 8005048:	e003      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800504e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800505e:	f04f 0b00 	mov.w	fp, #0
 8005062:	ea5a 030b 	orrs.w	r3, sl, fp
 8005066:	d04c      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005072:	d030      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005078:	d829      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800507a:	2bc0      	cmp	r3, #192	@ 0xc0
 800507c:	d02d      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800507e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005080:	d825      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005082:	2b80      	cmp	r3, #128	@ 0x80
 8005084:	d018      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005086:	2b80      	cmp	r3, #128	@ 0x80
 8005088:	d821      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800508e:	2b40      	cmp	r3, #64	@ 0x40
 8005090:	d007      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005092:	e01c      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005094:	4b63      	ldr	r3, [pc, #396]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	4a62      	ldr	r2, [pc, #392]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800509a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800509e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80050a0:	e01c      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a6:	3308      	adds	r3, #8
 80050a8:	2100      	movs	r1, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f001 fbe6 	bl	800687c <RCCEx_PLL2_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80050b6:	e011      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050bc:	3328      	adds	r3, #40	@ 0x28
 80050be:	2100      	movs	r1, #0
 80050c0:	4618      	mov	r0, r3
 80050c2:	f001 fc8d 	bl	80069e0 <RCCEx_PLL3_Config>
 80050c6:	4603      	mov	r3, r0
 80050c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80050cc:	e006      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050d4:	e002      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80050da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80050e4:	4b4f      	ldr	r3, [pc, #316]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050e8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80050ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f2:	4a4c      	ldr	r2, [pc, #304]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050f4:	430b      	orrs	r3, r1
 80050f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80050f8:	e003      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800510e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005112:	2300      	movs	r3, #0
 8005114:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005118:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800511c:	460b      	mov	r3, r1
 800511e:	4313      	orrs	r3, r2
 8005120:	d053      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005126:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800512a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800512e:	d035      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005130:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005134:	d82e      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005136:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800513a:	d031      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800513c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005140:	d828      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005146:	d01a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005148:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800514c:	d822      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005152:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005156:	d007      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005158:	e01c      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800515a:	4b32      	ldr	r3, [pc, #200]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800515c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515e:	4a31      	ldr	r2, [pc, #196]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005164:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005166:	e01c      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516c:	3308      	adds	r3, #8
 800516e:	2100      	movs	r1, #0
 8005170:	4618      	mov	r0, r3
 8005172:	f001 fb83 	bl	800687c <RCCEx_PLL2_Config>
 8005176:	4603      	mov	r3, r0
 8005178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800517c:	e011      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800517e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005182:	3328      	adds	r3, #40	@ 0x28
 8005184:	2100      	movs	r1, #0
 8005186:	4618      	mov	r0, r3
 8005188:	f001 fc2a 	bl	80069e0 <RCCEx_PLL3_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005192:	e006      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800519a:	e002      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800519c:	bf00      	nop
 800519e:	e000      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80051a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10b      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80051aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80051ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051bc:	430b      	orrs	r3, r1
 80051be:	6593      	str	r3, [r2, #88]	@ 0x58
 80051c0:	e003      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80051ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80051d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80051da:	2300      	movs	r3, #0
 80051dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80051e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80051e4:	460b      	mov	r3, r1
 80051e6:	4313      	orrs	r3, r2
 80051e8:	d056      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80051ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80051f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051f6:	d038      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80051f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051fc:	d831      	bhi.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005202:	d034      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005204:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005208:	d82b      	bhi.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800520a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800520e:	d01d      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005210:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005214:	d825      	bhi.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d006      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800521a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005220:	e01f      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005222:	bf00      	nop
 8005224:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005228:	4ba2      	ldr	r3, [pc, #648]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800522a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522c:	4aa1      	ldr	r2, [pc, #644]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800522e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005234:	e01c      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800523a:	3308      	adds	r3, #8
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f001 fb1c 	bl	800687c <RCCEx_PLL2_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800524a:	e011      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800524c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005250:	3328      	adds	r3, #40	@ 0x28
 8005252:	2100      	movs	r1, #0
 8005254:	4618      	mov	r0, r3
 8005256:	f001 fbc3 	bl	80069e0 <RCCEx_PLL3_Config>
 800525a:	4603      	mov	r3, r0
 800525c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005260:	e006      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005268:	e002      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800526a:	bf00      	nop
 800526c:	e000      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800526e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10b      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005278:	4b8e      	ldr	r3, [pc, #568]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800527a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005284:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005288:	4a8a      	ldr	r2, [pc, #552]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800528a:	430b      	orrs	r3, r1
 800528c:	6593      	str	r3, [r2, #88]	@ 0x58
 800528e:	e003      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80052a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80052a8:	2300      	movs	r3, #0
 80052aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80052b2:	460b      	mov	r3, r1
 80052b4:	4313      	orrs	r3, r2
 80052b6:	d03a      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80052b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052be:	2b30      	cmp	r3, #48	@ 0x30
 80052c0:	d01f      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80052c2:	2b30      	cmp	r3, #48	@ 0x30
 80052c4:	d819      	bhi.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d00c      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d815      	bhi.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d019      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d111      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d6:	4b77      	ldr	r3, [pc, #476]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052da:	4a76      	ldr	r2, [pc, #472]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80052e2:	e011      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e8:	3308      	adds	r3, #8
 80052ea:	2102      	movs	r1, #2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 fac5 	bl	800687c <RCCEx_PLL2_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80052f8:	e006      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005300:	e002      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005302:	bf00      	nop
 8005304:	e000      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10a      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005310:	4b68      	ldr	r3, [pc, #416]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005314:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800531e:	4a65      	ldr	r2, [pc, #404]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005320:	430b      	orrs	r3, r1
 8005322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005324:	e003      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800532a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800532e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800533a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800533e:	2300      	movs	r3, #0
 8005340:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005344:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005348:	460b      	mov	r3, r1
 800534a:	4313      	orrs	r3, r2
 800534c:	d051      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800534e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005354:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005358:	d035      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800535a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800535e:	d82e      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005360:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005364:	d031      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005366:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800536a:	d828      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800536c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005370:	d01a      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005376:	d822      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800537c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005380:	d007      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005382:	e01c      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005384:	4b4b      	ldr	r3, [pc, #300]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005388:	4a4a      	ldr	r2, [pc, #296]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800538a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800538e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005390:	e01c      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005396:	3308      	adds	r3, #8
 8005398:	2100      	movs	r1, #0
 800539a:	4618      	mov	r0, r3
 800539c:	f001 fa6e 	bl	800687c <RCCEx_PLL2_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053a6:	e011      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ac:	3328      	adds	r3, #40	@ 0x28
 80053ae:	2100      	movs	r1, #0
 80053b0:	4618      	mov	r0, r3
 80053b2:	f001 fb15 	bl	80069e0 <RCCEx_PLL3_Config>
 80053b6:	4603      	mov	r3, r0
 80053b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053bc:	e006      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053c4:	e002      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80053c6:	bf00      	nop
 80053c8:	e000      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80053ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80053d4:	4b37      	ldr	r3, [pc, #220]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80053dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e2:	4a34      	ldr	r2, [pc, #208]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80053e8:	e003      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80053f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80053fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005402:	2300      	movs	r3, #0
 8005404:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005408:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800540c:	460b      	mov	r3, r1
 800540e:	4313      	orrs	r3, r2
 8005410:	d056      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800541c:	d033      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800541e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005422:	d82c      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005424:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005428:	d02f      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800542a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800542e:	d826      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005430:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005434:	d02b      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005436:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800543a:	d820      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800543c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005440:	d012      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005446:	d81a      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d022      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800544c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005450:	d115      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005456:	3308      	adds	r3, #8
 8005458:	2101      	movs	r1, #1
 800545a:	4618      	mov	r0, r3
 800545c:	f001 fa0e 	bl	800687c <RCCEx_PLL2_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005466:	e015      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800546c:	3328      	adds	r3, #40	@ 0x28
 800546e:	2101      	movs	r1, #1
 8005470:	4618      	mov	r0, r3
 8005472:	f001 fab5 	bl	80069e0 <RCCEx_PLL3_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800547c:	e00a      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005484:	e006      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005486:	bf00      	nop
 8005488:	e004      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800548a:	bf00      	nop
 800548c:	e002      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800548e:	bf00      	nop
 8005490:	e000      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10d      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800549c:	4b05      	ldr	r3, [pc, #20]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800549e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80054a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054aa:	4a02      	ldr	r2, [pc, #8]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80054b0:	e006      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80054b2:	bf00      	nop
 80054b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80054c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80054cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80054d0:	2300      	movs	r3, #0
 80054d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80054d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80054da:	460b      	mov	r3, r1
 80054dc:	4313      	orrs	r3, r2
 80054de:	d055      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80054e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054ec:	d033      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80054ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054f2:	d82c      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80054f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f8:	d02f      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054fe:	d826      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005500:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005504:	d02b      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005506:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800550a:	d820      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800550c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005510:	d012      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005516:	d81a      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005518:	2b00      	cmp	r3, #0
 800551a:	d022      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800551c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005520:	d115      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005526:	3308      	adds	r3, #8
 8005528:	2101      	movs	r1, #1
 800552a:	4618      	mov	r0, r3
 800552c:	f001 f9a6 	bl	800687c <RCCEx_PLL2_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005536:	e015      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553c:	3328      	adds	r3, #40	@ 0x28
 800553e:	2101      	movs	r1, #1
 8005540:	4618      	mov	r0, r3
 8005542:	f001 fa4d 	bl	80069e0 <RCCEx_PLL3_Config>
 8005546:	4603      	mov	r3, r0
 8005548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800554c:	e00a      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005554:	e006      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005556:	bf00      	nop
 8005558:	e004      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800555a:	bf00      	nop
 800555c:	e002      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800555e:	bf00      	nop
 8005560:	e000      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10b      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800556c:	4ba3      	ldr	r3, [pc, #652]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800556e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005570:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800557c:	4a9f      	ldr	r2, [pc, #636]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800557e:	430b      	orrs	r3, r1
 8005580:	6593      	str	r3, [r2, #88]	@ 0x58
 8005582:	e003      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005588:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800558c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005598:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800559c:	2300      	movs	r3, #0
 800559e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80055a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055a6:	460b      	mov	r3, r1
 80055a8:	4313      	orrs	r3, r2
 80055aa:	d037      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80055ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055b6:	d00e      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80055b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055bc:	d816      	bhi.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x700>
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d018      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80055c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055c6:	d111      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c8:	4b8c      	ldr	r3, [pc, #560]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	4a8b      	ldr	r2, [pc, #556]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80055d4:	e00f      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055da:	3308      	adds	r3, #8
 80055dc:	2101      	movs	r1, #1
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 f94c 	bl	800687c <RCCEx_PLL2_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80055ea:	e004      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055f2:	e000      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80055f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055fe:	4b7f      	ldr	r3, [pc, #508]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005602:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800560c:	4a7b      	ldr	r2, [pc, #492]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800560e:	430b      	orrs	r3, r1
 8005610:	6513      	str	r3, [r2, #80]	@ 0x50
 8005612:	e003      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005614:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005618:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800562c:	2300      	movs	r3, #0
 800562e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005632:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005636:	460b      	mov	r3, r1
 8005638:	4313      	orrs	r3, r2
 800563a:	d039      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800563c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005642:	2b03      	cmp	r3, #3
 8005644:	d81c      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005646:	a201      	add	r2, pc, #4	@ (adr r2, 800564c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	08005689 	.word	0x08005689
 8005650:	0800565d 	.word	0x0800565d
 8005654:	0800566b 	.word	0x0800566b
 8005658:	08005689 	.word	0x08005689
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800565c:	4b67      	ldr	r3, [pc, #412]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800565e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005660:	4a66      	ldr	r2, [pc, #408]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005668:	e00f      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800566a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566e:	3308      	adds	r3, #8
 8005670:	2102      	movs	r1, #2
 8005672:	4618      	mov	r0, r3
 8005674:	f001 f902 	bl	800687c <RCCEx_PLL2_Config>
 8005678:	4603      	mov	r3, r0
 800567a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800567e:	e004      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005686:	e000      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800568a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10a      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005692:	4b5a      	ldr	r3, [pc, #360]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005696:	f023 0103 	bic.w	r1, r3, #3
 800569a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a0:	4a56      	ldr	r2, [pc, #344]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056a2:	430b      	orrs	r3, r1
 80056a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056a6:	e003      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80056bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056c0:	2300      	movs	r3, #0
 80056c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80056ca:	460b      	mov	r3, r1
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f000 809f 	beq.w	8005810 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056d2:	4b4b      	ldr	r3, [pc, #300]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a4a      	ldr	r2, [pc, #296]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80056d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056de:	f7fb fc4d 	bl	8000f7c <HAL_GetTick>
 80056e2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056e6:	e00b      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e8:	f7fb fc48 	bl	8000f7c <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b64      	cmp	r3, #100	@ 0x64
 80056f6:	d903      	bls.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056fe:	e005      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005700:	4b3f      	ldr	r3, [pc, #252]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0ed      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800570c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005710:	2b00      	cmp	r3, #0
 8005712:	d179      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005714:	4b39      	ldr	r3, [pc, #228]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005716:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005720:	4053      	eors	r3, r2
 8005722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005726:	2b00      	cmp	r3, #0
 8005728:	d015      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800572a:	4b34      	ldr	r3, [pc, #208]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005732:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005736:	4b31      	ldr	r3, [pc, #196]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573a:	4a30      	ldr	r2, [pc, #192]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800573c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005740:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005742:	4b2e      	ldr	r3, [pc, #184]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005746:	4a2d      	ldr	r2, [pc, #180]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800574c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800574e:	4a2b      	ldr	r2, [pc, #172]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005750:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005754:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800575e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005762:	d118      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fb fc0a 	bl	8000f7c <HAL_GetTick>
 8005768:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800576c:	e00d      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576e:	f7fb fc05 	bl	8000f7c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005778:	1ad2      	subs	r2, r2, r3
 800577a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800577e:	429a      	cmp	r2, r3
 8005780:	d903      	bls.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005788:	e005      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800578a:	4b1c      	ldr	r3, [pc, #112]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0eb      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800579a:	2b00      	cmp	r3, #0
 800579c:	d129      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800579e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057ae:	d10e      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80057b0:	4b12      	ldr	r3, [pc, #72]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80057b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057c0:	091a      	lsrs	r2, r3, #4
 80057c2:	4b10      	ldr	r3, [pc, #64]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	4a0d      	ldr	r2, [pc, #52]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6113      	str	r3, [r2, #16]
 80057cc:	e005      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80057ce:	4b0b      	ldr	r3, [pc, #44]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	4a0a      	ldr	r2, [pc, #40]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80057d8:	6113      	str	r3, [r2, #16]
 80057da:	4b08      	ldr	r3, [pc, #32]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80057de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ea:	4a04      	ldr	r2, [pc, #16]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057ec:	430b      	orrs	r3, r1
 80057ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80057f0:	e00e      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80057fa:	e009      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80057fc:	58024400 	.word	0x58024400
 8005800:	58024800 	.word	0x58024800
 8005804:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005808:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800580c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	f002 0301 	and.w	r3, r2, #1
 800581c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005820:	2300      	movs	r3, #0
 8005822:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005826:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800582a:	460b      	mov	r3, r1
 800582c:	4313      	orrs	r3, r2
 800582e:	f000 8089 	beq.w	8005944 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005836:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005838:	2b28      	cmp	r3, #40	@ 0x28
 800583a:	d86b      	bhi.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800583c:	a201      	add	r2, pc, #4	@ (adr r2, 8005844 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005842:	bf00      	nop
 8005844:	0800591d 	.word	0x0800591d
 8005848:	08005915 	.word	0x08005915
 800584c:	08005915 	.word	0x08005915
 8005850:	08005915 	.word	0x08005915
 8005854:	08005915 	.word	0x08005915
 8005858:	08005915 	.word	0x08005915
 800585c:	08005915 	.word	0x08005915
 8005860:	08005915 	.word	0x08005915
 8005864:	080058e9 	.word	0x080058e9
 8005868:	08005915 	.word	0x08005915
 800586c:	08005915 	.word	0x08005915
 8005870:	08005915 	.word	0x08005915
 8005874:	08005915 	.word	0x08005915
 8005878:	08005915 	.word	0x08005915
 800587c:	08005915 	.word	0x08005915
 8005880:	08005915 	.word	0x08005915
 8005884:	080058ff 	.word	0x080058ff
 8005888:	08005915 	.word	0x08005915
 800588c:	08005915 	.word	0x08005915
 8005890:	08005915 	.word	0x08005915
 8005894:	08005915 	.word	0x08005915
 8005898:	08005915 	.word	0x08005915
 800589c:	08005915 	.word	0x08005915
 80058a0:	08005915 	.word	0x08005915
 80058a4:	0800591d 	.word	0x0800591d
 80058a8:	08005915 	.word	0x08005915
 80058ac:	08005915 	.word	0x08005915
 80058b0:	08005915 	.word	0x08005915
 80058b4:	08005915 	.word	0x08005915
 80058b8:	08005915 	.word	0x08005915
 80058bc:	08005915 	.word	0x08005915
 80058c0:	08005915 	.word	0x08005915
 80058c4:	0800591d 	.word	0x0800591d
 80058c8:	08005915 	.word	0x08005915
 80058cc:	08005915 	.word	0x08005915
 80058d0:	08005915 	.word	0x08005915
 80058d4:	08005915 	.word	0x08005915
 80058d8:	08005915 	.word	0x08005915
 80058dc:	08005915 	.word	0x08005915
 80058e0:	08005915 	.word	0x08005915
 80058e4:	0800591d 	.word	0x0800591d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ec:	3308      	adds	r3, #8
 80058ee:	2101      	movs	r1, #1
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 ffc3 	bl	800687c <RCCEx_PLL2_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80058fc:	e00f      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005902:	3328      	adds	r3, #40	@ 0x28
 8005904:	2101      	movs	r1, #1
 8005906:	4618      	mov	r0, r3
 8005908:	f001 f86a 	bl	80069e0 <RCCEx_PLL3_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005912:	e004      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800591a:	e000      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800591c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800591e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005926:	4bbf      	ldr	r3, [pc, #764]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800592a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800592e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005932:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005934:	4abb      	ldr	r2, [pc, #748]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005936:	430b      	orrs	r3, r1
 8005938:	6553      	str	r3, [r2, #84]	@ 0x54
 800593a:	e003      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005940:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594c:	f002 0302 	and.w	r3, r2, #2
 8005950:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005954:	2300      	movs	r3, #0
 8005956:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800595a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800595e:	460b      	mov	r3, r1
 8005960:	4313      	orrs	r3, r2
 8005962:	d041      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800596a:	2b05      	cmp	r3, #5
 800596c:	d824      	bhi.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800596e:	a201      	add	r2, pc, #4	@ (adr r2, 8005974 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	080059c1 	.word	0x080059c1
 8005978:	0800598d 	.word	0x0800598d
 800597c:	080059a3 	.word	0x080059a3
 8005980:	080059c1 	.word	0x080059c1
 8005984:	080059c1 	.word	0x080059c1
 8005988:	080059c1 	.word	0x080059c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005990:	3308      	adds	r3, #8
 8005992:	2101      	movs	r1, #1
 8005994:	4618      	mov	r0, r3
 8005996:	f000 ff71 	bl	800687c <RCCEx_PLL2_Config>
 800599a:	4603      	mov	r3, r0
 800599c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80059a0:	e00f      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a6:	3328      	adds	r3, #40	@ 0x28
 80059a8:	2101      	movs	r1, #1
 80059aa:	4618      	mov	r0, r3
 80059ac:	f001 f818 	bl	80069e0 <RCCEx_PLL3_Config>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80059b6:	e004      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059be:	e000      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80059c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80059ca:	4b96      	ldr	r3, [pc, #600]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ce:	f023 0107 	bic.w	r1, r3, #7
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059d8:	4a92      	ldr	r2, [pc, #584]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059da:	430b      	orrs	r3, r1
 80059dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80059de:	e003      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f002 0304 	and.w	r3, r2, #4
 80059f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059f8:	2300      	movs	r3, #0
 80059fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005a02:	460b      	mov	r3, r1
 8005a04:	4313      	orrs	r3, r2
 8005a06:	d044      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a10:	2b05      	cmp	r3, #5
 8005a12:	d825      	bhi.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005a14:	a201      	add	r2, pc, #4	@ (adr r2, 8005a1c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1a:	bf00      	nop
 8005a1c:	08005a69 	.word	0x08005a69
 8005a20:	08005a35 	.word	0x08005a35
 8005a24:	08005a4b 	.word	0x08005a4b
 8005a28:	08005a69 	.word	0x08005a69
 8005a2c:	08005a69 	.word	0x08005a69
 8005a30:	08005a69 	.word	0x08005a69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a38:	3308      	adds	r3, #8
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 ff1d 	bl	800687c <RCCEx_PLL2_Config>
 8005a42:	4603      	mov	r3, r0
 8005a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005a48:	e00f      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4e:	3328      	adds	r3, #40	@ 0x28
 8005a50:	2101      	movs	r1, #1
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 ffc4 	bl	80069e0 <RCCEx_PLL3_Config>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005a5e:	e004      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a66:	e000      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10b      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a72:	4b6c      	ldr	r3, [pc, #432]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a76:	f023 0107 	bic.w	r1, r3, #7
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a82:	4a68      	ldr	r2, [pc, #416]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a84:	430b      	orrs	r3, r1
 8005a86:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a88:	e003      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	f002 0320 	and.w	r3, r2, #32
 8005a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005aac:	460b      	mov	r3, r1
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	d055      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005abe:	d033      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ac4:	d82c      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aca:	d02f      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad0:	d826      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ad2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ad6:	d02b      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005ad8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005adc:	d820      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ade:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ae2:	d012      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ae8:	d81a      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d022      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005aee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005af2:	d115      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af8:	3308      	adds	r3, #8
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 febd 	bl	800687c <RCCEx_PLL2_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b08:	e015      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0e:	3328      	adds	r3, #40	@ 0x28
 8005b10:	2102      	movs	r1, #2
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 ff64 	bl	80069e0 <RCCEx_PLL3_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b1e:	e00a      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b26:	e006      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b28:	bf00      	nop
 8005b2a:	e004      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b2c:	bf00      	nop
 8005b2e:	e002      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b30:	bf00      	nop
 8005b32:	e000      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10b      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b3e:	4b39      	ldr	r3, [pc, #228]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4e:	4a35      	ldr	r2, [pc, #212]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b50:	430b      	orrs	r3, r1
 8005b52:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b54:	e003      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005b74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	d058      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005b8a:	d033      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005b8c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005b90:	d82c      	bhi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b96:	d02f      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b9c:	d826      	bhi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005b9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ba2:	d02b      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005ba4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ba8:	d820      	bhi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005baa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bae:	d012      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bb4:	d81a      	bhi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d022      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bbe:	d115      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 fe57 	bl	800687c <RCCEx_PLL2_Config>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005bd4:	e015      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bda:	3328      	adds	r3, #40	@ 0x28
 8005bdc:	2102      	movs	r1, #2
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fefe 	bl	80069e0 <RCCEx_PLL3_Config>
 8005be4:	4603      	mov	r3, r0
 8005be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005bea:	e00a      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bf2:	e006      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005bf4:	bf00      	nop
 8005bf6:	e004      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005bf8:	bf00      	nop
 8005bfa:	e002      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005bfc:	bf00      	nop
 8005bfe:	e000      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10e      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c0a:	4b06      	ldr	r3, [pc, #24]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c0e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c1a:	4a02      	ldr	r2, [pc, #8]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c20:	e006      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005c22:	bf00      	nop
 8005c24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c40:	2300      	movs	r3, #0
 8005c42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	d055      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c58:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005c5c:	d033      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005c5e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005c62:	d82c      	bhi.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c68:	d02f      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c6e:	d826      	bhi.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005c70:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005c74:	d02b      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005c76:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005c7a:	d820      	bhi.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005c7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c80:	d012      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005c82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c86:	d81a      	bhi.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d022      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c90:	d115      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c96:	3308      	adds	r3, #8
 8005c98:	2100      	movs	r1, #0
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fdee 	bl	800687c <RCCEx_PLL2_Config>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005ca6:	e015      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cac:	3328      	adds	r3, #40	@ 0x28
 8005cae:	2102      	movs	r1, #2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fe95 	bl	80069e0 <RCCEx_PLL3_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005cbc:	e00a      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cc4:	e006      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005cc6:	bf00      	nop
 8005cc8:	e004      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005cca:	bf00      	nop
 8005ccc:	e002      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005cce:	bf00      	nop
 8005cd0:	e000      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10b      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005cdc:	4ba1      	ldr	r3, [pc, #644]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005cec:	4a9d      	ldr	r2, [pc, #628]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cf2:	e003      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f002 0308 	and.w	r3, r2, #8
 8005d08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005d16:	460b      	mov	r3, r1
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	d01e      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d28:	d10c      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2e:	3328      	adds	r3, #40	@ 0x28
 8005d30:	2102      	movs	r1, #2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fe54 	bl	80069e0 <RCCEx_PLL3_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005d44:	4b87      	ldr	r3, [pc, #540]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d48:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d54:	4a83      	ldr	r2, [pc, #524]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d56:	430b      	orrs	r3, r1
 8005d58:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	f002 0310 	and.w	r3, r2, #16
 8005d66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005d70:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005d74:	460b      	mov	r3, r1
 8005d76:	4313      	orrs	r3, r2
 8005d78:	d01e      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d86:	d10c      	bne.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8c:	3328      	adds	r3, #40	@ 0x28
 8005d8e:	2102      	movs	r1, #2
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fe25 	bl	80069e0 <RCCEx_PLL3_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005da2:	4b70      	ldr	r3, [pc, #448]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005db2:	4a6c      	ldr	r2, [pc, #432]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005db4:	430b      	orrs	r3, r1
 8005db6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005dc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005dce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	d03e      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ddc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005de0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005de4:	d022      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dea:	d81b      	bhi.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df4:	d00b      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005df6:	e015      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfc:	3308      	adds	r3, #8
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fd3b 	bl	800687c <RCCEx_PLL2_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e0c:	e00f      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e12:	3328      	adds	r3, #40	@ 0x28
 8005e14:	2102      	movs	r1, #2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fde2 	bl	80069e0 <RCCEx_PLL3_Config>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e22:	e004      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e2a:	e000      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10b      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e36:	4b4b      	ldr	r3, [pc, #300]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e3a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e46:	4a47      	ldr	r2, [pc, #284]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e4c:	e003      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005e62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e64:	2300      	movs	r3, #0
 8005e66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	d03b      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e7e:	d01f      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005e80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e84:	d818      	bhi.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e8a:	d003      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005e8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e90:	d007      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005e92:	e011      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e94:	4b33      	ldr	r3, [pc, #204]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e98:	4a32      	ldr	r2, [pc, #200]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ea0:	e00f      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea6:	3328      	adds	r3, #40	@ 0x28
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fd98 	bl	80069e0 <RCCEx_PLL3_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005eb6:	e004      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ebe:	e000      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10b      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005eca:	4b26      	ldr	r3, [pc, #152]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ece:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eda:	4a22      	ldr	r2, [pc, #136]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005edc:	430b      	orrs	r3, r1
 8005ede:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ee0:	e003      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005ef6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ef8:	2300      	movs	r3, #0
 8005efa:	677b      	str	r3, [r7, #116]	@ 0x74
 8005efc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005f00:	460b      	mov	r3, r1
 8005f02:	4313      	orrs	r3, r2
 8005f04:	d034      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f14:	d007      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005f16:	e011      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f18:	4b12      	ldr	r3, [pc, #72]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1c:	4a11      	ldr	r2, [pc, #68]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f24:	e00e      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	2102      	movs	r1, #2
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fca4 	bl	800687c <RCCEx_PLL2_Config>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f3a:	e003      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10d      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005f4c:	4b05      	ldr	r3, [pc, #20]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f5a:	4a02      	ldr	r2, [pc, #8]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f60:	e006      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005f62:	bf00      	nop
 8005f64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f7e:	2300      	movs	r3, #0
 8005f80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005f86:	460b      	mov	r3, r1
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	d00c      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f90:	3328      	adds	r3, #40	@ 0x28
 8005f92:	2102      	movs	r1, #2
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fd23 	bl	80069e0 <RCCEx_PLL3_Config>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005fb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fb8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	d038      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fce:	d018      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005fd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fd4:	d811      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fda:	d014      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fe0:	d80b      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d011      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fea:	d106      	bne.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fec:	4bc3      	ldr	r3, [pc, #780]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff0:	4ac2      	ldr	r2, [pc, #776]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005ff8:	e008      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006000:	e004      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006002:	bf00      	nop
 8006004:	e002      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006006:	bf00      	nop
 8006008:	e000      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800600a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800600c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006014:	4bb9      	ldr	r3, [pc, #740]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006018:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800601c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006024:	4ab5      	ldr	r2, [pc, #724]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006026:	430b      	orrs	r3, r1
 8006028:	6553      	str	r3, [r2, #84]	@ 0x54
 800602a:	e003      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006030:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006040:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006042:	2300      	movs	r3, #0
 8006044:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006046:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800604a:	460b      	mov	r3, r1
 800604c:	4313      	orrs	r3, r2
 800604e:	d009      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006050:	4baa      	ldr	r3, [pc, #680]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006054:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800605e:	4aa7      	ldr	r2, [pc, #668]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006060:	430b      	orrs	r3, r1
 8006062:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006070:	653b      	str	r3, [r7, #80]	@ 0x50
 8006072:	2300      	movs	r3, #0
 8006074:	657b      	str	r3, [r7, #84]	@ 0x54
 8006076:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800607a:	460b      	mov	r3, r1
 800607c:	4313      	orrs	r3, r2
 800607e:	d00a      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006080:	4b9e      	ldr	r3, [pc, #632]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006090:	4a9a      	ldr	r2, [pc, #616]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006092:	430b      	orrs	r3, r1
 8006094:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80060a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060a4:	2300      	movs	r3, #0
 80060a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80060ac:	460b      	mov	r3, r1
 80060ae:	4313      	orrs	r3, r2
 80060b0:	d009      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060b2:	4b92      	ldr	r3, [pc, #584]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80060ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060c0:	4a8e      	ldr	r2, [pc, #568]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060c2:	430b      	orrs	r3, r1
 80060c4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80060d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80060d4:	2300      	movs	r3, #0
 80060d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80060d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80060dc:	460b      	mov	r3, r1
 80060de:	4313      	orrs	r3, r2
 80060e0:	d00e      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060e2:	4b86      	ldr	r3, [pc, #536]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	4a85      	ldr	r2, [pc, #532]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060ec:	6113      	str	r3, [r2, #16]
 80060ee:	4b83      	ldr	r3, [pc, #524]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060f0:	6919      	ldr	r1, [r3, #16]
 80060f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80060fa:	4a80      	ldr	r2, [pc, #512]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060fc:	430b      	orrs	r3, r1
 80060fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800610c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800610e:	2300      	movs	r3, #0
 8006110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006112:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006116:	460b      	mov	r3, r1
 8006118:	4313      	orrs	r3, r2
 800611a:	d009      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800611c:	4b77      	ldr	r3, [pc, #476]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800611e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006120:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800612a:	4a74      	ldr	r2, [pc, #464]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800612c:	430b      	orrs	r3, r1
 800612e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800613c:	633b      	str	r3, [r7, #48]	@ 0x30
 800613e:	2300      	movs	r3, #0
 8006140:	637b      	str	r3, [r7, #52]	@ 0x34
 8006142:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006146:	460b      	mov	r3, r1
 8006148:	4313      	orrs	r3, r2
 800614a:	d00a      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800614c:	4b6b      	ldr	r3, [pc, #428]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800614e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006150:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800615c:	4a67      	ldr	r2, [pc, #412]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800615e:	430b      	orrs	r3, r1
 8006160:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616a:	2100      	movs	r1, #0
 800616c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006174:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006178:	460b      	mov	r3, r1
 800617a:	4313      	orrs	r3, r2
 800617c:	d011      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800617e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006182:	3308      	adds	r3, #8
 8006184:	2100      	movs	r1, #0
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fb78 	bl	800687c <RCCEx_PLL2_Config>
 800618c:	4603      	mov	r3, r0
 800618e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800619e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80061a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	2100      	movs	r1, #0
 80061ac:	6239      	str	r1, [r7, #32]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80061b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80061b8:	460b      	mov	r3, r1
 80061ba:	4313      	orrs	r3, r2
 80061bc:	d011      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c2:	3308      	adds	r3, #8
 80061c4:	2101      	movs	r1, #1
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fb58 	bl	800687c <RCCEx_PLL2_Config>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80061d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80061e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	2100      	movs	r1, #0
 80061ec:	61b9      	str	r1, [r7, #24]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80061f8:	460b      	mov	r3, r1
 80061fa:	4313      	orrs	r3, r2
 80061fc:	d011      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006202:	3308      	adds	r3, #8
 8006204:	2102      	movs	r1, #2
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fb38 	bl	800687c <RCCEx_PLL2_Config>
 800620c:	4603      	mov	r3, r0
 800620e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800621e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	2100      	movs	r1, #0
 800622c:	6139      	str	r1, [r7, #16]
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006238:	460b      	mov	r3, r1
 800623a:	4313      	orrs	r3, r2
 800623c:	d011      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006242:	3328      	adds	r3, #40	@ 0x28
 8006244:	2100      	movs	r1, #0
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fbca 	bl	80069e0 <RCCEx_PLL3_Config>
 800624c:	4603      	mov	r3, r0
 800624e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800625e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626a:	2100      	movs	r1, #0
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	f003 0310 	and.w	r3, r3, #16
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006278:	460b      	mov	r3, r1
 800627a:	4313      	orrs	r3, r2
 800627c:	d011      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800627e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006282:	3328      	adds	r3, #40	@ 0x28
 8006284:	2101      	movs	r1, #1
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fbaa 	bl	80069e0 <RCCEx_PLL3_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800629e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	2100      	movs	r1, #0
 80062ac:	6039      	str	r1, [r7, #0]
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	607b      	str	r3, [r7, #4]
 80062b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80062b8:	460b      	mov	r3, r1
 80062ba:	4313      	orrs	r3, r2
 80062bc:	d011      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c2:	3328      	adds	r3, #40	@ 0x28
 80062c4:	2102      	movs	r1, #2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fb8a 	bl	80069e0 <RCCEx_PLL3_Config>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80062d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80062e2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e000      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80062f6:	46bd      	mov	sp, r7
 80062f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062fc:	58024400 	.word	0x58024400

08006300 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006304:	f7fe fd54 	bl	8004db0 <HAL_RCC_GetHCLKFreq>
 8006308:	4602      	mov	r2, r0
 800630a:	4b06      	ldr	r3, [pc, #24]	@ (8006324 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	091b      	lsrs	r3, r3, #4
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	4904      	ldr	r1, [pc, #16]	@ (8006328 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006316:	5ccb      	ldrb	r3, [r1, r3]
 8006318:	f003 031f 	and.w	r3, r3, #31
 800631c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006320:	4618      	mov	r0, r3
 8006322:	bd80      	pop	{r7, pc}
 8006324:	58024400 	.word	0x58024400
 8006328:	0800a0a8 	.word	0x0800a0a8

0800632c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800632c:	b480      	push	{r7}
 800632e:	b089      	sub	sp, #36	@ 0x24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006334:	4ba1      	ldr	r3, [pc, #644]	@ (80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006338:	f003 0303 	and.w	r3, r3, #3
 800633c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800633e:	4b9f      	ldr	r3, [pc, #636]	@ (80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006342:	0b1b      	lsrs	r3, r3, #12
 8006344:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006348:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800634a:	4b9c      	ldr	r3, [pc, #624]	@ (80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	091b      	lsrs	r3, r3, #4
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006356:	4b99      	ldr	r3, [pc, #612]	@ (80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800635a:	08db      	lsrs	r3, r3, #3
 800635c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	fb02 f303 	mul.w	r3, r2, r3
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 8111 	beq.w	800659c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b02      	cmp	r3, #2
 800637e:	f000 8083 	beq.w	8006488 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b02      	cmp	r3, #2
 8006386:	f200 80a1 	bhi.w	80064cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d056      	beq.n	8006444 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006396:	e099      	b.n	80064cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006398:	4b88      	ldr	r3, [pc, #544]	@ (80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0320 	and.w	r3, r3, #32
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d02d      	beq.n	8006400 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063a4:	4b85      	ldr	r3, [pc, #532]	@ (80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	08db      	lsrs	r3, r3, #3
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	4a84      	ldr	r2, [pc, #528]	@ (80065c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80063b0:	fa22 f303 	lsr.w	r3, r2, r3
 80063b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	ee07 3a90 	vmov	s15, r3
 80063bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ce:	4b7b      	ldr	r3, [pc, #492]	@ (80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063de:	ed97 6a03 	vldr	s12, [r7, #12]
 80063e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80063fe:	e087      	b.n	8006510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	ee07 3a90 	vmov	s15, r3
 8006406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80065c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800640e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006412:	4b6a      	ldr	r3, [pc, #424]	@ (80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641a:	ee07 3a90 	vmov	s15, r3
 800641e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006422:	ed97 6a03 	vldr	s12, [r7, #12]
 8006426:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800642a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800642e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800643a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800643e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006442:	e065      	b.n	8006510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80065cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006456:	4b59      	ldr	r3, [pc, #356]	@ (80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006466:	ed97 6a03 	vldr	s12, [r7, #12]
 800646a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800646e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800647a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800647e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006486:	e043      	b.n	8006510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006492:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80065d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800649a:	4b48      	ldr	r3, [pc, #288]	@ (80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800649c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064ca:	e021      	b.n	8006510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	ee07 3a90 	vmov	s15, r3
 80064d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80065cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80064da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064de:	4b37      	ldr	r3, [pc, #220]	@ (80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e6:	ee07 3a90 	vmov	s15, r3
 80064ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80064f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800650e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006510:	4b2a      	ldr	r3, [pc, #168]	@ (80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	0a5b      	lsrs	r3, r3, #9
 8006516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006522:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800652a:	edd7 6a07 	vldr	s13, [r7, #28]
 800652e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006536:	ee17 2a90 	vmov	r2, s15
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800653e:	4b1f      	ldr	r3, [pc, #124]	@ (80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006542:	0c1b      	lsrs	r3, r3, #16
 8006544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006548:	ee07 3a90 	vmov	s15, r3
 800654c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006550:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006554:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006558:	edd7 6a07 	vldr	s13, [r7, #28]
 800655c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006564:	ee17 2a90 	vmov	r2, s15
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800656c:	4b13      	ldr	r3, [pc, #76]	@ (80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800656e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006570:	0e1b      	lsrs	r3, r3, #24
 8006572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800657e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006582:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006586:	edd7 6a07 	vldr	s13, [r7, #28]
 800658a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800658e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006592:	ee17 2a90 	vmov	r2, s15
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800659a:	e008      	b.n	80065ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	609a      	str	r2, [r3, #8]
}
 80065ae:	bf00      	nop
 80065b0:	3724      	adds	r7, #36	@ 0x24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	58024400 	.word	0x58024400
 80065c0:	03d09000 	.word	0x03d09000
 80065c4:	46000000 	.word	0x46000000
 80065c8:	4c742400 	.word	0x4c742400
 80065cc:	4a742400 	.word	0x4a742400
 80065d0:	4af42400 	.word	0x4af42400

080065d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b089      	sub	sp, #36	@ 0x24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065dc:	4ba1      	ldr	r3, [pc, #644]	@ (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e0:	f003 0303 	and.w	r3, r3, #3
 80065e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80065e6:	4b9f      	ldr	r3, [pc, #636]	@ (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ea:	0d1b      	lsrs	r3, r3, #20
 80065ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80065f2:	4b9c      	ldr	r3, [pc, #624]	@ (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f6:	0a1b      	lsrs	r3, r3, #8
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80065fe:	4b99      	ldr	r3, [pc, #612]	@ (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006602:	08db      	lsrs	r3, r3, #3
 8006604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	fb02 f303 	mul.w	r3, r2, r3
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006616:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8111 	beq.w	8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b02      	cmp	r3, #2
 8006626:	f000 8083 	beq.w	8006730 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	2b02      	cmp	r3, #2
 800662e:	f200 80a1 	bhi.w	8006774 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d056      	beq.n	80066ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800663e:	e099      	b.n	8006774 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006640:	4b88      	ldr	r3, [pc, #544]	@ (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0320 	and.w	r3, r3, #32
 8006648:	2b00      	cmp	r3, #0
 800664a:	d02d      	beq.n	80066a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800664c:	4b85      	ldr	r3, [pc, #532]	@ (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	08db      	lsrs	r3, r3, #3
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	4a84      	ldr	r2, [pc, #528]	@ (8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
 800665c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	ee07 3a90 	vmov	s15, r3
 8006664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006676:	4b7b      	ldr	r3, [pc, #492]	@ (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006686:	ed97 6a03 	vldr	s12, [r7, #12]
 800668a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800686c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800668e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800669a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800669e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80066a6:	e087      	b.n	80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006870 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80066b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ba:	4b6a      	ldr	r3, [pc, #424]	@ (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800686c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ea:	e065      	b.n	80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066fe:	4b59      	ldr	r3, [pc, #356]	@ (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006712:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800686c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800671a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800671e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800672e:	e043      	b.n	80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800673e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006742:	4b48      	ldr	r3, [pc, #288]	@ (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006752:	ed97 6a03 	vldr	s12, [r7, #12]
 8006756:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800686c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800675a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800675e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800676a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006772:	e021      	b.n	80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006786:	4b37      	ldr	r3, [pc, #220]	@ (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678e:	ee07 3a90 	vmov	s15, r3
 8006792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006796:	ed97 6a03 	vldr	s12, [r7, #12]
 800679a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800686c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800679e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80067b8:	4b2a      	ldr	r3, [pc, #168]	@ (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067bc:	0a5b      	lsrs	r3, r3, #9
 80067be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067de:	ee17 2a90 	vmov	r2, s15
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80067e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	0c1b      	lsrs	r3, r3, #16
 80067ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067f0:	ee07 3a90 	vmov	s15, r3
 80067f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006800:	edd7 6a07 	vldr	s13, [r7, #28]
 8006804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800680c:	ee17 2a90 	vmov	r2, s15
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006814:	4b13      	ldr	r3, [pc, #76]	@ (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006818:	0e1b      	lsrs	r3, r3, #24
 800681a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006826:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800682a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800682e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800683a:	ee17 2a90 	vmov	r2, s15
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006842:	e008      	b.n	8006856 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	609a      	str	r2, [r3, #8]
}
 8006856:	bf00      	nop
 8006858:	3724      	adds	r7, #36	@ 0x24
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	58024400 	.word	0x58024400
 8006868:	03d09000 	.word	0x03d09000
 800686c:	46000000 	.word	0x46000000
 8006870:	4c742400 	.word	0x4c742400
 8006874:	4a742400 	.word	0x4a742400
 8006878:	4af42400 	.word	0x4af42400

0800687c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800688a:	4b53      	ldr	r3, [pc, #332]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 800688c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688e:	f003 0303 	and.w	r3, r3, #3
 8006892:	2b03      	cmp	r3, #3
 8006894:	d101      	bne.n	800689a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e099      	b.n	80069ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800689a:	4b4f      	ldr	r3, [pc, #316]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a4e      	ldr	r2, [pc, #312]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 80068a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a6:	f7fa fb69 	bl	8000f7c <HAL_GetTick>
 80068aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068ac:	e008      	b.n	80068c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068ae:	f7fa fb65 	bl	8000f7c <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e086      	b.n	80069ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068c0:	4b45      	ldr	r3, [pc, #276]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f0      	bne.n	80068ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80068cc:	4b42      	ldr	r3, [pc, #264]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 80068ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	031b      	lsls	r3, r3, #12
 80068da:	493f      	ldr	r1, [pc, #252]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	628b      	str	r3, [r1, #40]	@ 0x28
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	025b      	lsls	r3, r3, #9
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	041b      	lsls	r3, r3, #16
 80068fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	3b01      	subs	r3, #1
 800690a:	061b      	lsls	r3, r3, #24
 800690c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006910:	4931      	ldr	r1, [pc, #196]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 8006912:	4313      	orrs	r3, r2
 8006914:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006916:	4b30      	ldr	r3, [pc, #192]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 8006918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	492d      	ldr	r1, [pc, #180]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 8006924:	4313      	orrs	r3, r2
 8006926:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006928:	4b2b      	ldr	r3, [pc, #172]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 800692a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692c:	f023 0220 	bic.w	r2, r3, #32
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	4928      	ldr	r1, [pc, #160]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 8006936:	4313      	orrs	r3, r2
 8006938:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800693a:	4b27      	ldr	r3, [pc, #156]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 800693c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693e:	4a26      	ldr	r2, [pc, #152]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 8006940:	f023 0310 	bic.w	r3, r3, #16
 8006944:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006946:	4b24      	ldr	r3, [pc, #144]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 8006948:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800694a:	4b24      	ldr	r3, [pc, #144]	@ (80069dc <RCCEx_PLL2_Config+0x160>)
 800694c:	4013      	ands	r3, r2
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	69d2      	ldr	r2, [r2, #28]
 8006952:	00d2      	lsls	r2, r2, #3
 8006954:	4920      	ldr	r1, [pc, #128]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 8006956:	4313      	orrs	r3, r2
 8006958:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800695a:	4b1f      	ldr	r3, [pc, #124]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 800695c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695e:	4a1e      	ldr	r2, [pc, #120]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 8006960:	f043 0310 	orr.w	r3, r3, #16
 8006964:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d106      	bne.n	800697a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800696c:	4b1a      	ldr	r3, [pc, #104]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 800696e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006970:	4a19      	ldr	r2, [pc, #100]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 8006972:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006976:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006978:	e00f      	b.n	800699a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d106      	bne.n	800698e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006980:	4b15      	ldr	r3, [pc, #84]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	4a14      	ldr	r2, [pc, #80]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 8006986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800698a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800698c:	e005      	b.n	800699a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800698e:	4b12      	ldr	r3, [pc, #72]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 8006990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006992:	4a11      	ldr	r2, [pc, #68]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 8006994:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006998:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800699a:	4b0f      	ldr	r3, [pc, #60]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a0e      	ldr	r2, [pc, #56]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 80069a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a6:	f7fa fae9 	bl	8000f7c <HAL_GetTick>
 80069aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069ac:	e008      	b.n	80069c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069ae:	f7fa fae5 	bl	8000f7c <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d901      	bls.n	80069c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e006      	b.n	80069ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069c0:	4b05      	ldr	r3, [pc, #20]	@ (80069d8 <RCCEx_PLL2_Config+0x15c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d0f0      	beq.n	80069ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	58024400 	.word	0x58024400
 80069dc:	ffff0007 	.word	0xffff0007

080069e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069ee:	4b53      	ldr	r3, [pc, #332]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 80069f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d101      	bne.n	80069fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e099      	b.n	8006b32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80069fe:	4b4f      	ldr	r3, [pc, #316]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a4e      	ldr	r2, [pc, #312]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a0a:	f7fa fab7 	bl	8000f7c <HAL_GetTick>
 8006a0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a10:	e008      	b.n	8006a24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a12:	f7fa fab3 	bl	8000f7c <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e086      	b.n	8006b32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a24:	4b45      	ldr	r3, [pc, #276]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1f0      	bne.n	8006a12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006a30:	4b42      	ldr	r3, [pc, #264]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a34:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	051b      	lsls	r3, r3, #20
 8006a3e:	493f      	ldr	r1, [pc, #252]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	025b      	lsls	r3, r3, #9
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	061b      	lsls	r3, r3, #24
 8006a70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a74:	4931      	ldr	r1, [pc, #196]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a7a:	4b30      	ldr	r3, [pc, #192]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	492d      	ldr	r1, [pc, #180]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	4928      	ldr	r1, [pc, #160]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a9e:	4b27      	ldr	r3, [pc, #156]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa2:	4a26      	ldr	r2, [pc, #152]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006aaa:	4b24      	ldr	r3, [pc, #144]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006aae:	4b24      	ldr	r3, [pc, #144]	@ (8006b40 <RCCEx_PLL3_Config+0x160>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	69d2      	ldr	r2, [r2, #28]
 8006ab6:	00d2      	lsls	r2, r2, #3
 8006ab8:	4920      	ldr	r1, [pc, #128]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006abe:	4b1f      	ldr	r3, [pc, #124]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d106      	bne.n	8006ade <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad4:	4a19      	ldr	r2, [pc, #100]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006ad6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006ada:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006adc:	e00f      	b.n	8006afe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d106      	bne.n	8006af2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ae4:	4b15      	ldr	r3, [pc, #84]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae8:	4a14      	ldr	r2, [pc, #80]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006aea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006aee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006af0:	e005      	b.n	8006afe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006af2:	4b12      	ldr	r3, [pc, #72]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af6:	4a11      	ldr	r2, [pc, #68]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006af8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006afc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006afe:	4b0f      	ldr	r3, [pc, #60]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a0e      	ldr	r2, [pc, #56]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b0a:	f7fa fa37 	bl	8000f7c <HAL_GetTick>
 8006b0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b10:	e008      	b.n	8006b24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b12:	f7fa fa33 	bl	8000f7c <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d901      	bls.n	8006b24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e006      	b.n	8006b32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b24:	4b05      	ldr	r3, [pc, #20]	@ (8006b3c <RCCEx_PLL3_Config+0x15c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d0f0      	beq.n	8006b12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	58024400 	.word	0x58024400
 8006b40:	ffff0007 	.word	0xffff0007

08006b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e049      	b.n	8006bea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f841 	bl	8006bf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f000 f9e8 	bl	8006f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d001      	beq.n	8006c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e054      	b.n	8006cca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0201 	orr.w	r2, r2, #1
 8006c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a26      	ldr	r2, [pc, #152]	@ (8006cd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d022      	beq.n	8006c88 <HAL_TIM_Base_Start_IT+0x80>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c4a:	d01d      	beq.n	8006c88 <HAL_TIM_Base_Start_IT+0x80>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a22      	ldr	r2, [pc, #136]	@ (8006cdc <HAL_TIM_Base_Start_IT+0xd4>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d018      	beq.n	8006c88 <HAL_TIM_Base_Start_IT+0x80>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a21      	ldr	r2, [pc, #132]	@ (8006ce0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d013      	beq.n	8006c88 <HAL_TIM_Base_Start_IT+0x80>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00e      	beq.n	8006c88 <HAL_TIM_Base_Start_IT+0x80>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ce8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d009      	beq.n	8006c88 <HAL_TIM_Base_Start_IT+0x80>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1c      	ldr	r2, [pc, #112]	@ (8006cec <HAL_TIM_Base_Start_IT+0xe4>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d004      	beq.n	8006c88 <HAL_TIM_Base_Start_IT+0x80>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d115      	bne.n	8006cb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	4b19      	ldr	r3, [pc, #100]	@ (8006cf4 <HAL_TIM_Base_Start_IT+0xec>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b06      	cmp	r3, #6
 8006c98:	d015      	beq.n	8006cc6 <HAL_TIM_Base_Start_IT+0xbe>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ca0:	d011      	beq.n	8006cc6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f042 0201 	orr.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cb2:	e008      	b.n	8006cc6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0201 	orr.w	r2, r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	e000      	b.n	8006cc8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40010000 	.word	0x40010000
 8006cdc:	40000400 	.word	0x40000400
 8006ce0:	40000800 	.word	0x40000800
 8006ce4:	40000c00 	.word	0x40000c00
 8006ce8:	40010400 	.word	0x40010400
 8006cec:	40001800 	.word	0x40001800
 8006cf0:	40014000 	.word	0x40014000
 8006cf4:	00010007 	.word	0x00010007

08006cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d020      	beq.n	8006d5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d01b      	beq.n	8006d5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f06f 0202 	mvn.w	r2, #2
 8006d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f8e9 	bl	8006f1a <HAL_TIM_IC_CaptureCallback>
 8006d48:	e005      	b.n	8006d56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f8db 	bl	8006f06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f8ec 	bl	8006f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d020      	beq.n	8006da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01b      	beq.n	8006da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f06f 0204 	mvn.w	r2, #4
 8006d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f8c3 	bl	8006f1a <HAL_TIM_IC_CaptureCallback>
 8006d94:	e005      	b.n	8006da2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f8b5 	bl	8006f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f8c6 	bl	8006f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d020      	beq.n	8006df4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01b      	beq.n	8006df4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0208 	mvn.w	r2, #8
 8006dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2204      	movs	r2, #4
 8006dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f89d 	bl	8006f1a <HAL_TIM_IC_CaptureCallback>
 8006de0:	e005      	b.n	8006dee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f88f 	bl	8006f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f8a0 	bl	8006f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d020      	beq.n	8006e40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d01b      	beq.n	8006e40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0210 	mvn.w	r2, #16
 8006e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2208      	movs	r2, #8
 8006e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f877 	bl	8006f1a <HAL_TIM_IC_CaptureCallback>
 8006e2c:	e005      	b.n	8006e3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f869 	bl	8006f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f87a 	bl	8006f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00c      	beq.n	8006e64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d007      	beq.n	8006e64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f06f 0201 	mvn.w	r2, #1
 8006e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7f9 fda8 	bl	80009b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d104      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00c      	beq.n	8006e92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d007      	beq.n	8006e92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f90d 	bl	80070ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00c      	beq.n	8006eb6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f905 	bl	80070c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00c      	beq.n	8006eda <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d007      	beq.n	8006eda <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f834 	bl	8006f42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00c      	beq.n	8006efe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f003 0320 	and.w	r3, r3, #32
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f06f 0220 	mvn.w	r2, #32
 8006ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f8cd 	bl	8007098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f0e:	bf00      	nop
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
	...

08006f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a43      	ldr	r2, [pc, #268]	@ (8007078 <TIM_Base_SetConfig+0x120>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d013      	beq.n	8006f98 <TIM_Base_SetConfig+0x40>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f76:	d00f      	beq.n	8006f98 <TIM_Base_SetConfig+0x40>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a40      	ldr	r2, [pc, #256]	@ (800707c <TIM_Base_SetConfig+0x124>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00b      	beq.n	8006f98 <TIM_Base_SetConfig+0x40>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a3f      	ldr	r2, [pc, #252]	@ (8007080 <TIM_Base_SetConfig+0x128>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d007      	beq.n	8006f98 <TIM_Base_SetConfig+0x40>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a3e      	ldr	r2, [pc, #248]	@ (8007084 <TIM_Base_SetConfig+0x12c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d003      	beq.n	8006f98 <TIM_Base_SetConfig+0x40>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a3d      	ldr	r2, [pc, #244]	@ (8007088 <TIM_Base_SetConfig+0x130>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d108      	bne.n	8006faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a32      	ldr	r2, [pc, #200]	@ (8007078 <TIM_Base_SetConfig+0x120>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d01f      	beq.n	8006ff2 <TIM_Base_SetConfig+0x9a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fb8:	d01b      	beq.n	8006ff2 <TIM_Base_SetConfig+0x9a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a2f      	ldr	r2, [pc, #188]	@ (800707c <TIM_Base_SetConfig+0x124>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d017      	beq.n	8006ff2 <TIM_Base_SetConfig+0x9a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a2e      	ldr	r2, [pc, #184]	@ (8007080 <TIM_Base_SetConfig+0x128>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d013      	beq.n	8006ff2 <TIM_Base_SetConfig+0x9a>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8007084 <TIM_Base_SetConfig+0x12c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00f      	beq.n	8006ff2 <TIM_Base_SetConfig+0x9a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a2c      	ldr	r2, [pc, #176]	@ (8007088 <TIM_Base_SetConfig+0x130>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00b      	beq.n	8006ff2 <TIM_Base_SetConfig+0x9a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800708c <TIM_Base_SetConfig+0x134>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d007      	beq.n	8006ff2 <TIM_Base_SetConfig+0x9a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8007090 <TIM_Base_SetConfig+0x138>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d003      	beq.n	8006ff2 <TIM_Base_SetConfig+0x9a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a29      	ldr	r2, [pc, #164]	@ (8007094 <TIM_Base_SetConfig+0x13c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d108      	bne.n	8007004 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a14      	ldr	r2, [pc, #80]	@ (8007078 <TIM_Base_SetConfig+0x120>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00f      	beq.n	800704a <TIM_Base_SetConfig+0xf2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a16      	ldr	r2, [pc, #88]	@ (8007088 <TIM_Base_SetConfig+0x130>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00b      	beq.n	800704a <TIM_Base_SetConfig+0xf2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a15      	ldr	r2, [pc, #84]	@ (800708c <TIM_Base_SetConfig+0x134>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d007      	beq.n	800704a <TIM_Base_SetConfig+0xf2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a14      	ldr	r2, [pc, #80]	@ (8007090 <TIM_Base_SetConfig+0x138>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d003      	beq.n	800704a <TIM_Base_SetConfig+0xf2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a13      	ldr	r2, [pc, #76]	@ (8007094 <TIM_Base_SetConfig+0x13c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d103      	bne.n	8007052 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	691a      	ldr	r2, [r3, #16]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f043 0204 	orr.w	r2, r3, #4
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	601a      	str	r2, [r3, #0]
}
 800706a:	bf00      	nop
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	40010000 	.word	0x40010000
 800707c:	40000400 	.word	0x40000400
 8007080:	40000800 	.word	0x40000800
 8007084:	40000c00 	.word	0x40000c00
 8007088:	40010400 	.word	0x40010400
 800708c:	40014000 	.word	0x40014000
 8007090:	40014400 	.word	0x40014400
 8007094:	40014800 	.word	0x40014800

08007098 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e042      	b.n	800716c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d106      	bne.n	80070fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7f9 fe27 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2224      	movs	r2, #36	@ 0x24
 8007102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0201 	bic.w	r2, r2, #1
 8007114:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 ff14 	bl	8007f4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f9a9 	bl	800747c <UART_SetConfig>
 800712a:	4603      	mov	r3, r0
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e01b      	b.n	800716c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0201 	orr.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 ff93 	bl	8008090 <UART_CheckIdleState>
 800716a:	4603      	mov	r3, r0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b08a      	sub	sp, #40	@ 0x28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	4613      	mov	r3, r2
 8007180:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007188:	2b20      	cmp	r3, #32
 800718a:	d137      	bne.n	80071fc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d002      	beq.n	8007198 <HAL_UART_Receive_DMA+0x24>
 8007192:	88fb      	ldrh	r3, [r7, #6]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e030      	b.n	80071fe <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a18      	ldr	r2, [pc, #96]	@ (8007208 <HAL_UART_Receive_DMA+0x94>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d01f      	beq.n	80071ec <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d018      	beq.n	80071ec <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	613b      	str	r3, [r7, #16]
   return(result);
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	623b      	str	r3, [r7, #32]
 80071da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	69f9      	ldr	r1, [r7, #28]
 80071de:	6a3a      	ldr	r2, [r7, #32]
 80071e0:	e841 2300 	strex	r3, r2, [r1]
 80071e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e6      	bne.n	80071ba <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80071ec:	88fb      	ldrh	r3, [r7, #6]
 80071ee:	461a      	mov	r2, r3
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f001 f864 	bl	80082c0 <UART_Start_Receive_DMA>
 80071f8:	4603      	mov	r3, r0
 80071fa:	e000      	b.n	80071fe <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071fc:	2302      	movs	r3, #2
  }
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3728      	adds	r7, #40	@ 0x28
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	58000c00 	.word	0x58000c00

0800720c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b0a0      	sub	sp, #128	@ 0x80
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800721c:	e853 3f00 	ldrex	r3, [r3]
 8007220:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007222:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007224:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8007228:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007232:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007234:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007238:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007240:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e6      	bne.n	8007214 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3308      	adds	r3, #8
 800724c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007250:	e853 3f00 	ldrex	r3, [r3]
 8007254:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007258:	4b72      	ldr	r3, [pc, #456]	@ (8007424 <HAL_UART_Abort+0x218>)
 800725a:	4013      	ands	r3, r2
 800725c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3308      	adds	r3, #8
 8007264:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007266:	657a      	str	r2, [r7, #84]	@ 0x54
 8007268:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800726c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800726e:	e841 2300 	strex	r3, r2, [r1]
 8007272:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e5      	bne.n	8007246 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800727e:	2b01      	cmp	r3, #1
 8007280:	d118      	bne.n	80072b4 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007292:	f023 0310 	bic.w	r3, r3, #16
 8007296:	677b      	str	r3, [r7, #116]	@ 0x74
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80072a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072a8:	e841 2300 	strex	r3, r2, [r1]
 80072ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e6      	bne.n	8007282 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072be:	2b80      	cmp	r3, #128	@ 0x80
 80072c0:	d137      	bne.n	8007332 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3308      	adds	r3, #8
 80072c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3308      	adds	r3, #8
 80072e0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80072e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e5      	bne.n	80072c2 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d019      	beq.n	8007332 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007302:	2200      	movs	r2, #0
 8007304:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800730a:	4618      	mov	r0, r3
 800730c:	f7fa fd6c 	bl	8001de8 <HAL_DMA_Abort>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00d      	beq.n	8007332 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800731a:	4618      	mov	r0, r3
 800731c:	f7fb ffac 	bl	8003278 <HAL_DMA_GetError>
 8007320:	4603      	mov	r3, r0
 8007322:	2b20      	cmp	r3, #32
 8007324:	d105      	bne.n	8007332 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2210      	movs	r2, #16
 800732a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e073      	b.n	800741a <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800733c:	2b40      	cmp	r3, #64	@ 0x40
 800733e:	d13b      	bne.n	80073b8 <HAL_UART_Abort+0x1ac>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3308      	adds	r3, #8
 8007346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007356:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3308      	adds	r3, #8
 800735e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007360:	61ba      	str	r2, [r7, #24]
 8007362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6979      	ldr	r1, [r7, #20]
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	613b      	str	r3, [r7, #16]
   return(result);
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e5      	bne.n	8007340 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800737a:	2b00      	cmp	r3, #0
 800737c:	d01c      	beq.n	80073b8 <HAL_UART_Abort+0x1ac>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007384:	2200      	movs	r2, #0
 8007386:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800738e:	4618      	mov	r0, r3
 8007390:	f7fa fd2a 	bl	8001de8 <HAL_DMA_Abort>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00e      	beq.n	80073b8 <HAL_UART_Abort+0x1ac>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fb ff69 	bl	8003278 <HAL_DMA_GetError>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d105      	bne.n	80073b8 <HAL_UART_Abort+0x1ac>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2210      	movs	r2, #16
 80073b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e030      	b.n	800741a <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	220f      	movs	r2, #15
 80073ce:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073d8:	d107      	bne.n	80073ea <HAL_UART_Abort+0x1de>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699a      	ldr	r2, [r3, #24]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f042 0210 	orr.w	r2, r2, #16
 80073e8:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	699a      	ldr	r2, [r3, #24]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0208 	orr.w	r2, r2, #8
 80073f8:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2220      	movs	r2, #32
 8007406:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3780      	adds	r7, #128	@ 0x80
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	ef7ffffe 	.word	0xef7ffffe

08007428 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800747c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007480:	b092      	sub	sp, #72	@ 0x48
 8007482:	af00      	add	r7, sp, #0
 8007484:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	431a      	orrs	r2, r3
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	431a      	orrs	r2, r3
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	4bbe      	ldr	r3, [pc, #760]	@ (80077a4 <UART_SetConfig+0x328>)
 80074ac:	4013      	ands	r3, r2
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80074b4:	430b      	orrs	r3, r1
 80074b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	68da      	ldr	r2, [r3, #12]
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4ab3      	ldr	r2, [pc, #716]	@ (80077a8 <UART_SetConfig+0x32c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d004      	beq.n	80074e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074e4:	4313      	orrs	r3, r2
 80074e6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689a      	ldr	r2, [r3, #8]
 80074ee:	4baf      	ldr	r3, [pc, #700]	@ (80077ac <UART_SetConfig+0x330>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	6812      	ldr	r2, [r2, #0]
 80074f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80074f8:	430b      	orrs	r3, r1
 80074fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007502:	f023 010f 	bic.w	r1, r3, #15
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4aa6      	ldr	r2, [pc, #664]	@ (80077b0 <UART_SetConfig+0x334>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d177      	bne.n	800760c <UART_SetConfig+0x190>
 800751c:	4ba5      	ldr	r3, [pc, #660]	@ (80077b4 <UART_SetConfig+0x338>)
 800751e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007520:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007524:	2b28      	cmp	r3, #40	@ 0x28
 8007526:	d86d      	bhi.n	8007604 <UART_SetConfig+0x188>
 8007528:	a201      	add	r2, pc, #4	@ (adr r2, 8007530 <UART_SetConfig+0xb4>)
 800752a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752e:	bf00      	nop
 8007530:	080075d5 	.word	0x080075d5
 8007534:	08007605 	.word	0x08007605
 8007538:	08007605 	.word	0x08007605
 800753c:	08007605 	.word	0x08007605
 8007540:	08007605 	.word	0x08007605
 8007544:	08007605 	.word	0x08007605
 8007548:	08007605 	.word	0x08007605
 800754c:	08007605 	.word	0x08007605
 8007550:	080075dd 	.word	0x080075dd
 8007554:	08007605 	.word	0x08007605
 8007558:	08007605 	.word	0x08007605
 800755c:	08007605 	.word	0x08007605
 8007560:	08007605 	.word	0x08007605
 8007564:	08007605 	.word	0x08007605
 8007568:	08007605 	.word	0x08007605
 800756c:	08007605 	.word	0x08007605
 8007570:	080075e5 	.word	0x080075e5
 8007574:	08007605 	.word	0x08007605
 8007578:	08007605 	.word	0x08007605
 800757c:	08007605 	.word	0x08007605
 8007580:	08007605 	.word	0x08007605
 8007584:	08007605 	.word	0x08007605
 8007588:	08007605 	.word	0x08007605
 800758c:	08007605 	.word	0x08007605
 8007590:	080075ed 	.word	0x080075ed
 8007594:	08007605 	.word	0x08007605
 8007598:	08007605 	.word	0x08007605
 800759c:	08007605 	.word	0x08007605
 80075a0:	08007605 	.word	0x08007605
 80075a4:	08007605 	.word	0x08007605
 80075a8:	08007605 	.word	0x08007605
 80075ac:	08007605 	.word	0x08007605
 80075b0:	080075f5 	.word	0x080075f5
 80075b4:	08007605 	.word	0x08007605
 80075b8:	08007605 	.word	0x08007605
 80075bc:	08007605 	.word	0x08007605
 80075c0:	08007605 	.word	0x08007605
 80075c4:	08007605 	.word	0x08007605
 80075c8:	08007605 	.word	0x08007605
 80075cc:	08007605 	.word	0x08007605
 80075d0:	080075fd 	.word	0x080075fd
 80075d4:	2301      	movs	r3, #1
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075da:	e222      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80075dc:	2304      	movs	r3, #4
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e2:	e21e      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80075e4:	2308      	movs	r3, #8
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ea:	e21a      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80075ec:	2310      	movs	r3, #16
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f2:	e216      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80075f4:	2320      	movs	r3, #32
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fa:	e212      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80075fc:	2340      	movs	r3, #64	@ 0x40
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e20e      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007604:	2380      	movs	r3, #128	@ 0x80
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e20a      	b.n	8007a22 <UART_SetConfig+0x5a6>
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a69      	ldr	r2, [pc, #420]	@ (80077b8 <UART_SetConfig+0x33c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d130      	bne.n	8007678 <UART_SetConfig+0x1fc>
 8007616:	4b67      	ldr	r3, [pc, #412]	@ (80077b4 <UART_SetConfig+0x338>)
 8007618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800761a:	f003 0307 	and.w	r3, r3, #7
 800761e:	2b05      	cmp	r3, #5
 8007620:	d826      	bhi.n	8007670 <UART_SetConfig+0x1f4>
 8007622:	a201      	add	r2, pc, #4	@ (adr r2, 8007628 <UART_SetConfig+0x1ac>)
 8007624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007628:	08007641 	.word	0x08007641
 800762c:	08007649 	.word	0x08007649
 8007630:	08007651 	.word	0x08007651
 8007634:	08007659 	.word	0x08007659
 8007638:	08007661 	.word	0x08007661
 800763c:	08007669 	.word	0x08007669
 8007640:	2300      	movs	r3, #0
 8007642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007646:	e1ec      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007648:	2304      	movs	r3, #4
 800764a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764e:	e1e8      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007650:	2308      	movs	r3, #8
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007656:	e1e4      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007658:	2310      	movs	r3, #16
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765e:	e1e0      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007660:	2320      	movs	r3, #32
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007666:	e1dc      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007668:	2340      	movs	r3, #64	@ 0x40
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766e:	e1d8      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007670:	2380      	movs	r3, #128	@ 0x80
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007676:	e1d4      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a4f      	ldr	r2, [pc, #316]	@ (80077bc <UART_SetConfig+0x340>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d130      	bne.n	80076e4 <UART_SetConfig+0x268>
 8007682:	4b4c      	ldr	r3, [pc, #304]	@ (80077b4 <UART_SetConfig+0x338>)
 8007684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	2b05      	cmp	r3, #5
 800768c:	d826      	bhi.n	80076dc <UART_SetConfig+0x260>
 800768e:	a201      	add	r2, pc, #4	@ (adr r2, 8007694 <UART_SetConfig+0x218>)
 8007690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007694:	080076ad 	.word	0x080076ad
 8007698:	080076b5 	.word	0x080076b5
 800769c:	080076bd 	.word	0x080076bd
 80076a0:	080076c5 	.word	0x080076c5
 80076a4:	080076cd 	.word	0x080076cd
 80076a8:	080076d5 	.word	0x080076d5
 80076ac:	2300      	movs	r3, #0
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b2:	e1b6      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80076b4:	2304      	movs	r3, #4
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ba:	e1b2      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80076bc:	2308      	movs	r3, #8
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c2:	e1ae      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80076c4:	2310      	movs	r3, #16
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ca:	e1aa      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80076cc:	2320      	movs	r3, #32
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d2:	e1a6      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80076d4:	2340      	movs	r3, #64	@ 0x40
 80076d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076da:	e1a2      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80076dc:	2380      	movs	r3, #128	@ 0x80
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e2:	e19e      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a35      	ldr	r2, [pc, #212]	@ (80077c0 <UART_SetConfig+0x344>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d130      	bne.n	8007750 <UART_SetConfig+0x2d4>
 80076ee:	4b31      	ldr	r3, [pc, #196]	@ (80077b4 <UART_SetConfig+0x338>)
 80076f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f2:	f003 0307 	and.w	r3, r3, #7
 80076f6:	2b05      	cmp	r3, #5
 80076f8:	d826      	bhi.n	8007748 <UART_SetConfig+0x2cc>
 80076fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <UART_SetConfig+0x284>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007719 	.word	0x08007719
 8007704:	08007721 	.word	0x08007721
 8007708:	08007729 	.word	0x08007729
 800770c:	08007731 	.word	0x08007731
 8007710:	08007739 	.word	0x08007739
 8007714:	08007741 	.word	0x08007741
 8007718:	2300      	movs	r3, #0
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771e:	e180      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007720:	2304      	movs	r3, #4
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007726:	e17c      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007728:	2308      	movs	r3, #8
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772e:	e178      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007730:	2310      	movs	r3, #16
 8007732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007736:	e174      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007738:	2320      	movs	r3, #32
 800773a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800773e:	e170      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007740:	2340      	movs	r3, #64	@ 0x40
 8007742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007746:	e16c      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007748:	2380      	movs	r3, #128	@ 0x80
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774e:	e168      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a1b      	ldr	r2, [pc, #108]	@ (80077c4 <UART_SetConfig+0x348>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d142      	bne.n	80077e0 <UART_SetConfig+0x364>
 800775a:	4b16      	ldr	r3, [pc, #88]	@ (80077b4 <UART_SetConfig+0x338>)
 800775c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800775e:	f003 0307 	and.w	r3, r3, #7
 8007762:	2b05      	cmp	r3, #5
 8007764:	d838      	bhi.n	80077d8 <UART_SetConfig+0x35c>
 8007766:	a201      	add	r2, pc, #4	@ (adr r2, 800776c <UART_SetConfig+0x2f0>)
 8007768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776c:	08007785 	.word	0x08007785
 8007770:	0800778d 	.word	0x0800778d
 8007774:	08007795 	.word	0x08007795
 8007778:	0800779d 	.word	0x0800779d
 800777c:	080077c9 	.word	0x080077c9
 8007780:	080077d1 	.word	0x080077d1
 8007784:	2300      	movs	r3, #0
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778a:	e14a      	b.n	8007a22 <UART_SetConfig+0x5a6>
 800778c:	2304      	movs	r3, #4
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007792:	e146      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007794:	2308      	movs	r3, #8
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779a:	e142      	b.n	8007a22 <UART_SetConfig+0x5a6>
 800779c:	2310      	movs	r3, #16
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a2:	e13e      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80077a4:	cfff69f3 	.word	0xcfff69f3
 80077a8:	58000c00 	.word	0x58000c00
 80077ac:	11fff4ff 	.word	0x11fff4ff
 80077b0:	40011000 	.word	0x40011000
 80077b4:	58024400 	.word	0x58024400
 80077b8:	40004400 	.word	0x40004400
 80077bc:	40004800 	.word	0x40004800
 80077c0:	40004c00 	.word	0x40004c00
 80077c4:	40005000 	.word	0x40005000
 80077c8:	2320      	movs	r3, #32
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ce:	e128      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80077d0:	2340      	movs	r3, #64	@ 0x40
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d6:	e124      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80077d8:	2380      	movs	r3, #128	@ 0x80
 80077da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077de:	e120      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4acb      	ldr	r2, [pc, #812]	@ (8007b14 <UART_SetConfig+0x698>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d176      	bne.n	80078d8 <UART_SetConfig+0x45c>
 80077ea:	4bcb      	ldr	r3, [pc, #812]	@ (8007b18 <UART_SetConfig+0x69c>)
 80077ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077f2:	2b28      	cmp	r3, #40	@ 0x28
 80077f4:	d86c      	bhi.n	80078d0 <UART_SetConfig+0x454>
 80077f6:	a201      	add	r2, pc, #4	@ (adr r2, 80077fc <UART_SetConfig+0x380>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	080078a1 	.word	0x080078a1
 8007800:	080078d1 	.word	0x080078d1
 8007804:	080078d1 	.word	0x080078d1
 8007808:	080078d1 	.word	0x080078d1
 800780c:	080078d1 	.word	0x080078d1
 8007810:	080078d1 	.word	0x080078d1
 8007814:	080078d1 	.word	0x080078d1
 8007818:	080078d1 	.word	0x080078d1
 800781c:	080078a9 	.word	0x080078a9
 8007820:	080078d1 	.word	0x080078d1
 8007824:	080078d1 	.word	0x080078d1
 8007828:	080078d1 	.word	0x080078d1
 800782c:	080078d1 	.word	0x080078d1
 8007830:	080078d1 	.word	0x080078d1
 8007834:	080078d1 	.word	0x080078d1
 8007838:	080078d1 	.word	0x080078d1
 800783c:	080078b1 	.word	0x080078b1
 8007840:	080078d1 	.word	0x080078d1
 8007844:	080078d1 	.word	0x080078d1
 8007848:	080078d1 	.word	0x080078d1
 800784c:	080078d1 	.word	0x080078d1
 8007850:	080078d1 	.word	0x080078d1
 8007854:	080078d1 	.word	0x080078d1
 8007858:	080078d1 	.word	0x080078d1
 800785c:	080078b9 	.word	0x080078b9
 8007860:	080078d1 	.word	0x080078d1
 8007864:	080078d1 	.word	0x080078d1
 8007868:	080078d1 	.word	0x080078d1
 800786c:	080078d1 	.word	0x080078d1
 8007870:	080078d1 	.word	0x080078d1
 8007874:	080078d1 	.word	0x080078d1
 8007878:	080078d1 	.word	0x080078d1
 800787c:	080078c1 	.word	0x080078c1
 8007880:	080078d1 	.word	0x080078d1
 8007884:	080078d1 	.word	0x080078d1
 8007888:	080078d1 	.word	0x080078d1
 800788c:	080078d1 	.word	0x080078d1
 8007890:	080078d1 	.word	0x080078d1
 8007894:	080078d1 	.word	0x080078d1
 8007898:	080078d1 	.word	0x080078d1
 800789c:	080078c9 	.word	0x080078c9
 80078a0:	2301      	movs	r3, #1
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a6:	e0bc      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80078a8:	2304      	movs	r3, #4
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ae:	e0b8      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80078b0:	2308      	movs	r3, #8
 80078b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b6:	e0b4      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80078b8:	2310      	movs	r3, #16
 80078ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078be:	e0b0      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80078c0:	2320      	movs	r3, #32
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c6:	e0ac      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80078c8:	2340      	movs	r3, #64	@ 0x40
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ce:	e0a8      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80078d0:	2380      	movs	r3, #128	@ 0x80
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d6:	e0a4      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a8f      	ldr	r2, [pc, #572]	@ (8007b1c <UART_SetConfig+0x6a0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d130      	bne.n	8007944 <UART_SetConfig+0x4c8>
 80078e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007b18 <UART_SetConfig+0x69c>)
 80078e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	2b05      	cmp	r3, #5
 80078ec:	d826      	bhi.n	800793c <UART_SetConfig+0x4c0>
 80078ee:	a201      	add	r2, pc, #4	@ (adr r2, 80078f4 <UART_SetConfig+0x478>)
 80078f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f4:	0800790d 	.word	0x0800790d
 80078f8:	08007915 	.word	0x08007915
 80078fc:	0800791d 	.word	0x0800791d
 8007900:	08007925 	.word	0x08007925
 8007904:	0800792d 	.word	0x0800792d
 8007908:	08007935 	.word	0x08007935
 800790c:	2300      	movs	r3, #0
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007912:	e086      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007914:	2304      	movs	r3, #4
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791a:	e082      	b.n	8007a22 <UART_SetConfig+0x5a6>
 800791c:	2308      	movs	r3, #8
 800791e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007922:	e07e      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007924:	2310      	movs	r3, #16
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792a:	e07a      	b.n	8007a22 <UART_SetConfig+0x5a6>
 800792c:	2320      	movs	r3, #32
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007932:	e076      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007934:	2340      	movs	r3, #64	@ 0x40
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793a:	e072      	b.n	8007a22 <UART_SetConfig+0x5a6>
 800793c:	2380      	movs	r3, #128	@ 0x80
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007942:	e06e      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a75      	ldr	r2, [pc, #468]	@ (8007b20 <UART_SetConfig+0x6a4>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d130      	bne.n	80079b0 <UART_SetConfig+0x534>
 800794e:	4b72      	ldr	r3, [pc, #456]	@ (8007b18 <UART_SetConfig+0x69c>)
 8007950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	2b05      	cmp	r3, #5
 8007958:	d826      	bhi.n	80079a8 <UART_SetConfig+0x52c>
 800795a:	a201      	add	r2, pc, #4	@ (adr r2, 8007960 <UART_SetConfig+0x4e4>)
 800795c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007960:	08007979 	.word	0x08007979
 8007964:	08007981 	.word	0x08007981
 8007968:	08007989 	.word	0x08007989
 800796c:	08007991 	.word	0x08007991
 8007970:	08007999 	.word	0x08007999
 8007974:	080079a1 	.word	0x080079a1
 8007978:	2300      	movs	r3, #0
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797e:	e050      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007980:	2304      	movs	r3, #4
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007986:	e04c      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007988:	2308      	movs	r3, #8
 800798a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798e:	e048      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007990:	2310      	movs	r3, #16
 8007992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007996:	e044      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007998:	2320      	movs	r3, #32
 800799a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799e:	e040      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80079a0:	2340      	movs	r3, #64	@ 0x40
 80079a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a6:	e03c      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80079a8:	2380      	movs	r3, #128	@ 0x80
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ae:	e038      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a5b      	ldr	r2, [pc, #364]	@ (8007b24 <UART_SetConfig+0x6a8>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d130      	bne.n	8007a1c <UART_SetConfig+0x5a0>
 80079ba:	4b57      	ldr	r3, [pc, #348]	@ (8007b18 <UART_SetConfig+0x69c>)
 80079bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	2b05      	cmp	r3, #5
 80079c4:	d826      	bhi.n	8007a14 <UART_SetConfig+0x598>
 80079c6:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <UART_SetConfig+0x550>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	080079e5 	.word	0x080079e5
 80079d0:	080079ed 	.word	0x080079ed
 80079d4:	080079f5 	.word	0x080079f5
 80079d8:	080079fd 	.word	0x080079fd
 80079dc:	08007a05 	.word	0x08007a05
 80079e0:	08007a0d 	.word	0x08007a0d
 80079e4:	2302      	movs	r3, #2
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ea:	e01a      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80079ec:	2304      	movs	r3, #4
 80079ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f2:	e016      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80079f4:	2308      	movs	r3, #8
 80079f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fa:	e012      	b.n	8007a22 <UART_SetConfig+0x5a6>
 80079fc:	2310      	movs	r3, #16
 80079fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a02:	e00e      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007a04:	2320      	movs	r3, #32
 8007a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0a:	e00a      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007a0c:	2340      	movs	r3, #64	@ 0x40
 8007a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a12:	e006      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007a14:	2380      	movs	r3, #128	@ 0x80
 8007a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a1a:	e002      	b.n	8007a22 <UART_SetConfig+0x5a6>
 8007a1c:	2380      	movs	r3, #128	@ 0x80
 8007a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a3f      	ldr	r2, [pc, #252]	@ (8007b24 <UART_SetConfig+0x6a8>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	f040 80f8 	bne.w	8007c1e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	dc46      	bgt.n	8007ac4 <UART_SetConfig+0x648>
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	f2c0 8082 	blt.w	8007b40 <UART_SetConfig+0x6c4>
 8007a3c:	3b02      	subs	r3, #2
 8007a3e:	2b1e      	cmp	r3, #30
 8007a40:	d87e      	bhi.n	8007b40 <UART_SetConfig+0x6c4>
 8007a42:	a201      	add	r2, pc, #4	@ (adr r2, 8007a48 <UART_SetConfig+0x5cc>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007acb 	.word	0x08007acb
 8007a4c:	08007b41 	.word	0x08007b41
 8007a50:	08007ad3 	.word	0x08007ad3
 8007a54:	08007b41 	.word	0x08007b41
 8007a58:	08007b41 	.word	0x08007b41
 8007a5c:	08007b41 	.word	0x08007b41
 8007a60:	08007ae3 	.word	0x08007ae3
 8007a64:	08007b41 	.word	0x08007b41
 8007a68:	08007b41 	.word	0x08007b41
 8007a6c:	08007b41 	.word	0x08007b41
 8007a70:	08007b41 	.word	0x08007b41
 8007a74:	08007b41 	.word	0x08007b41
 8007a78:	08007b41 	.word	0x08007b41
 8007a7c:	08007b41 	.word	0x08007b41
 8007a80:	08007af3 	.word	0x08007af3
 8007a84:	08007b41 	.word	0x08007b41
 8007a88:	08007b41 	.word	0x08007b41
 8007a8c:	08007b41 	.word	0x08007b41
 8007a90:	08007b41 	.word	0x08007b41
 8007a94:	08007b41 	.word	0x08007b41
 8007a98:	08007b41 	.word	0x08007b41
 8007a9c:	08007b41 	.word	0x08007b41
 8007aa0:	08007b41 	.word	0x08007b41
 8007aa4:	08007b41 	.word	0x08007b41
 8007aa8:	08007b41 	.word	0x08007b41
 8007aac:	08007b41 	.word	0x08007b41
 8007ab0:	08007b41 	.word	0x08007b41
 8007ab4:	08007b41 	.word	0x08007b41
 8007ab8:	08007b41 	.word	0x08007b41
 8007abc:	08007b41 	.word	0x08007b41
 8007ac0:	08007b33 	.word	0x08007b33
 8007ac4:	2b40      	cmp	r3, #64	@ 0x40
 8007ac6:	d037      	beq.n	8007b38 <UART_SetConfig+0x6bc>
 8007ac8:	e03a      	b.n	8007b40 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007aca:	f7fe fc19 	bl	8006300 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ace:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ad0:	e03c      	b.n	8007b4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe fc28 	bl	800632c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ae0:	e034      	b.n	8007b4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ae2:	f107 0318 	add.w	r3, r7, #24
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fe fd74 	bl	80065d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007af0:	e02c      	b.n	8007b4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007af2:	4b09      	ldr	r3, [pc, #36]	@ (8007b18 <UART_SetConfig+0x69c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d016      	beq.n	8007b2c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007afe:	4b06      	ldr	r3, [pc, #24]	@ (8007b18 <UART_SetConfig+0x69c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	08db      	lsrs	r3, r3, #3
 8007b04:	f003 0303 	and.w	r3, r3, #3
 8007b08:	4a07      	ldr	r2, [pc, #28]	@ (8007b28 <UART_SetConfig+0x6ac>)
 8007b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b10:	e01c      	b.n	8007b4c <UART_SetConfig+0x6d0>
 8007b12:	bf00      	nop
 8007b14:	40011400 	.word	0x40011400
 8007b18:	58024400 	.word	0x58024400
 8007b1c:	40007800 	.word	0x40007800
 8007b20:	40007c00 	.word	0x40007c00
 8007b24:	58000c00 	.word	0x58000c00
 8007b28:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007b2c:	4b9d      	ldr	r3, [pc, #628]	@ (8007da4 <UART_SetConfig+0x928>)
 8007b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b30:	e00c      	b.n	8007b4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b32:	4b9d      	ldr	r3, [pc, #628]	@ (8007da8 <UART_SetConfig+0x92c>)
 8007b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b36:	e009      	b.n	8007b4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b3e:	e005      	b.n	8007b4c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b4a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 81de 	beq.w	8007f10 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	4a94      	ldr	r2, [pc, #592]	@ (8007dac <UART_SetConfig+0x930>)
 8007b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b62:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b66:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	4413      	add	r3, r2
 8007b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d305      	bcc.n	8007b84 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d903      	bls.n	8007b8c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b8a:	e1c1      	b.n	8007f10 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b8e:	2200      	movs	r2, #0
 8007b90:	60bb      	str	r3, [r7, #8]
 8007b92:	60fa      	str	r2, [r7, #12]
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b98:	4a84      	ldr	r2, [pc, #528]	@ (8007dac <UART_SetConfig+0x930>)
 8007b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	607a      	str	r2, [r7, #4]
 8007ba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007baa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bae:	f7f8 fb97 	bl	80002e0 <__aeabi_uldivmod>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	4619      	mov	r1, r3
 8007bba:	f04f 0200 	mov.w	r2, #0
 8007bbe:	f04f 0300 	mov.w	r3, #0
 8007bc2:	020b      	lsls	r3, r1, #8
 8007bc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bc8:	0202      	lsls	r2, r0, #8
 8007bca:	6979      	ldr	r1, [r7, #20]
 8007bcc:	6849      	ldr	r1, [r1, #4]
 8007bce:	0849      	lsrs	r1, r1, #1
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	eb12 0804 	adds.w	r8, r2, r4
 8007bda:	eb43 0905 	adc.w	r9, r3, r5
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	469a      	mov	sl, r3
 8007be6:	4693      	mov	fp, r2
 8007be8:	4652      	mov	r2, sl
 8007bea:	465b      	mov	r3, fp
 8007bec:	4640      	mov	r0, r8
 8007bee:	4649      	mov	r1, r9
 8007bf0:	f7f8 fb76 	bl	80002e0 <__aeabi_uldivmod>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c02:	d308      	bcc.n	8007c16 <UART_SetConfig+0x79a>
 8007c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c0a:	d204      	bcs.n	8007c16 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c12:	60da      	str	r2, [r3, #12]
 8007c14:	e17c      	b.n	8007f10 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007c1c:	e178      	b.n	8007f10 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c26:	f040 80c5 	bne.w	8007db4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007c2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007c2e:	2b20      	cmp	r3, #32
 8007c30:	dc48      	bgt.n	8007cc4 <UART_SetConfig+0x848>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	db7b      	blt.n	8007d2e <UART_SetConfig+0x8b2>
 8007c36:	2b20      	cmp	r3, #32
 8007c38:	d879      	bhi.n	8007d2e <UART_SetConfig+0x8b2>
 8007c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c40 <UART_SetConfig+0x7c4>)
 8007c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c40:	08007ccb 	.word	0x08007ccb
 8007c44:	08007cd3 	.word	0x08007cd3
 8007c48:	08007d2f 	.word	0x08007d2f
 8007c4c:	08007d2f 	.word	0x08007d2f
 8007c50:	08007cdb 	.word	0x08007cdb
 8007c54:	08007d2f 	.word	0x08007d2f
 8007c58:	08007d2f 	.word	0x08007d2f
 8007c5c:	08007d2f 	.word	0x08007d2f
 8007c60:	08007ceb 	.word	0x08007ceb
 8007c64:	08007d2f 	.word	0x08007d2f
 8007c68:	08007d2f 	.word	0x08007d2f
 8007c6c:	08007d2f 	.word	0x08007d2f
 8007c70:	08007d2f 	.word	0x08007d2f
 8007c74:	08007d2f 	.word	0x08007d2f
 8007c78:	08007d2f 	.word	0x08007d2f
 8007c7c:	08007d2f 	.word	0x08007d2f
 8007c80:	08007cfb 	.word	0x08007cfb
 8007c84:	08007d2f 	.word	0x08007d2f
 8007c88:	08007d2f 	.word	0x08007d2f
 8007c8c:	08007d2f 	.word	0x08007d2f
 8007c90:	08007d2f 	.word	0x08007d2f
 8007c94:	08007d2f 	.word	0x08007d2f
 8007c98:	08007d2f 	.word	0x08007d2f
 8007c9c:	08007d2f 	.word	0x08007d2f
 8007ca0:	08007d2f 	.word	0x08007d2f
 8007ca4:	08007d2f 	.word	0x08007d2f
 8007ca8:	08007d2f 	.word	0x08007d2f
 8007cac:	08007d2f 	.word	0x08007d2f
 8007cb0:	08007d2f 	.word	0x08007d2f
 8007cb4:	08007d2f 	.word	0x08007d2f
 8007cb8:	08007d2f 	.word	0x08007d2f
 8007cbc:	08007d2f 	.word	0x08007d2f
 8007cc0:	08007d21 	.word	0x08007d21
 8007cc4:	2b40      	cmp	r3, #64	@ 0x40
 8007cc6:	d02e      	beq.n	8007d26 <UART_SetConfig+0x8aa>
 8007cc8:	e031      	b.n	8007d2e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cca:	f7fd f8a1 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
 8007cce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007cd0:	e033      	b.n	8007d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cd2:	f7fd f8b3 	bl	8004e3c <HAL_RCC_GetPCLK2Freq>
 8007cd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007cd8:	e02f      	b.n	8007d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fe fb24 	bl	800632c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ce8:	e027      	b.n	8007d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cea:	f107 0318 	add.w	r3, r7, #24
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fe fc70 	bl	80065d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf8:	e01f      	b.n	8007d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8007db0 <UART_SetConfig+0x934>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d009      	beq.n	8007d1a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d06:	4b2a      	ldr	r3, [pc, #168]	@ (8007db0 <UART_SetConfig+0x934>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	08db      	lsrs	r3, r3, #3
 8007d0c:	f003 0303 	and.w	r3, r3, #3
 8007d10:	4a24      	ldr	r2, [pc, #144]	@ (8007da4 <UART_SetConfig+0x928>)
 8007d12:	fa22 f303 	lsr.w	r3, r2, r3
 8007d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d18:	e00f      	b.n	8007d3a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007d1a:	4b22      	ldr	r3, [pc, #136]	@ (8007da4 <UART_SetConfig+0x928>)
 8007d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d1e:	e00c      	b.n	8007d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d20:	4b21      	ldr	r3, [pc, #132]	@ (8007da8 <UART_SetConfig+0x92c>)
 8007d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d24:	e009      	b.n	8007d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d2c:	e005      	b.n	8007d3a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 80e7 	beq.w	8007f10 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d46:	4a19      	ldr	r2, [pc, #100]	@ (8007dac <UART_SetConfig+0x930>)
 8007d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d54:	005a      	lsls	r2, r3, #1
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	085b      	lsrs	r3, r3, #1
 8007d5c:	441a      	add	r2, r3
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6a:	2b0f      	cmp	r3, #15
 8007d6c:	d916      	bls.n	8007d9c <UART_SetConfig+0x920>
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d74:	d212      	bcs.n	8007d9c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	f023 030f 	bic.w	r3, r3, #15
 8007d7e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d82:	085b      	lsrs	r3, r3, #1
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	e0b9      	b.n	8007f10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007da2:	e0b5      	b.n	8007f10 <UART_SetConfig+0xa94>
 8007da4:	03d09000 	.word	0x03d09000
 8007da8:	003d0900 	.word	0x003d0900
 8007dac:	0800a0c0 	.word	0x0800a0c0
 8007db0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007db4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007db8:	2b20      	cmp	r3, #32
 8007dba:	dc49      	bgt.n	8007e50 <UART_SetConfig+0x9d4>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	db7c      	blt.n	8007eba <UART_SetConfig+0xa3e>
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d87a      	bhi.n	8007eba <UART_SetConfig+0xa3e>
 8007dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dcc <UART_SetConfig+0x950>)
 8007dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dca:	bf00      	nop
 8007dcc:	08007e57 	.word	0x08007e57
 8007dd0:	08007e5f 	.word	0x08007e5f
 8007dd4:	08007ebb 	.word	0x08007ebb
 8007dd8:	08007ebb 	.word	0x08007ebb
 8007ddc:	08007e67 	.word	0x08007e67
 8007de0:	08007ebb 	.word	0x08007ebb
 8007de4:	08007ebb 	.word	0x08007ebb
 8007de8:	08007ebb 	.word	0x08007ebb
 8007dec:	08007e77 	.word	0x08007e77
 8007df0:	08007ebb 	.word	0x08007ebb
 8007df4:	08007ebb 	.word	0x08007ebb
 8007df8:	08007ebb 	.word	0x08007ebb
 8007dfc:	08007ebb 	.word	0x08007ebb
 8007e00:	08007ebb 	.word	0x08007ebb
 8007e04:	08007ebb 	.word	0x08007ebb
 8007e08:	08007ebb 	.word	0x08007ebb
 8007e0c:	08007e87 	.word	0x08007e87
 8007e10:	08007ebb 	.word	0x08007ebb
 8007e14:	08007ebb 	.word	0x08007ebb
 8007e18:	08007ebb 	.word	0x08007ebb
 8007e1c:	08007ebb 	.word	0x08007ebb
 8007e20:	08007ebb 	.word	0x08007ebb
 8007e24:	08007ebb 	.word	0x08007ebb
 8007e28:	08007ebb 	.word	0x08007ebb
 8007e2c:	08007ebb 	.word	0x08007ebb
 8007e30:	08007ebb 	.word	0x08007ebb
 8007e34:	08007ebb 	.word	0x08007ebb
 8007e38:	08007ebb 	.word	0x08007ebb
 8007e3c:	08007ebb 	.word	0x08007ebb
 8007e40:	08007ebb 	.word	0x08007ebb
 8007e44:	08007ebb 	.word	0x08007ebb
 8007e48:	08007ebb 	.word	0x08007ebb
 8007e4c:	08007ead 	.word	0x08007ead
 8007e50:	2b40      	cmp	r3, #64	@ 0x40
 8007e52:	d02e      	beq.n	8007eb2 <UART_SetConfig+0xa36>
 8007e54:	e031      	b.n	8007eba <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e56:	f7fc ffdb 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
 8007e5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e5c:	e033      	b.n	8007ec6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e5e:	f7fc ffed 	bl	8004e3c <HAL_RCC_GetPCLK2Freq>
 8007e62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e64:	e02f      	b.n	8007ec6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe fa5e 	bl	800632c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e74:	e027      	b.n	8007ec6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e76:	f107 0318 	add.w	r3, r7, #24
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe fbaa 	bl	80065d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e84:	e01f      	b.n	8007ec6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e86:	4b2d      	ldr	r3, [pc, #180]	@ (8007f3c <UART_SetConfig+0xac0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d009      	beq.n	8007ea6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e92:	4b2a      	ldr	r3, [pc, #168]	@ (8007f3c <UART_SetConfig+0xac0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	08db      	lsrs	r3, r3, #3
 8007e98:	f003 0303 	and.w	r3, r3, #3
 8007e9c:	4a28      	ldr	r2, [pc, #160]	@ (8007f40 <UART_SetConfig+0xac4>)
 8007e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ea4:	e00f      	b.n	8007ec6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007ea6:	4b26      	ldr	r3, [pc, #152]	@ (8007f40 <UART_SetConfig+0xac4>)
 8007ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eaa:	e00c      	b.n	8007ec6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007eac:	4b25      	ldr	r3, [pc, #148]	@ (8007f44 <UART_SetConfig+0xac8>)
 8007eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb0:	e009      	b.n	8007ec6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb8:	e005      	b.n	8007ec6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ec4:	bf00      	nop
    }

    if (pclk != 0U)
 8007ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d021      	beq.n	8007f10 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f48 <UART_SetConfig+0xacc>)
 8007ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eda:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	085b      	lsrs	r3, r3, #1
 8007ee4:	441a      	add	r2, r3
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef2:	2b0f      	cmp	r3, #15
 8007ef4:	d909      	bls.n	8007f0a <UART_SetConfig+0xa8e>
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007efc:	d205      	bcs.n	8007f0a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	60da      	str	r2, [r3, #12]
 8007f08:	e002      	b.n	8007f10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2200      	movs	r2, #0
 8007f24:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f2c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3748      	adds	r7, #72	@ 0x48
 8007f34:	46bd      	mov	sp, r7
 8007f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f3a:	bf00      	nop
 8007f3c:	58024400 	.word	0x58024400
 8007f40:	03d09000 	.word	0x03d09000
 8007f44:	003d0900 	.word	0x003d0900
 8007f48:	0800a0c0 	.word	0x0800a0c0

08007f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00a      	beq.n	8007f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00a      	beq.n	8007f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00a      	beq.n	8007fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe0:	f003 0310 	and.w	r3, r3, #16
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00a      	beq.n	8007ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008002:	f003 0320 	and.w	r3, r3, #32
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d01a      	beq.n	8008062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008046:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800804a:	d10a      	bne.n	8008062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	605a      	str	r2, [r3, #4]
  }
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b098      	sub	sp, #96	@ 0x60
 8008094:	af02      	add	r7, sp, #8
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080a0:	f7f8 ff6c 	bl	8000f7c <HAL_GetTick>
 80080a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0308 	and.w	r3, r3, #8
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d12f      	bne.n	8008114 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080bc:	2200      	movs	r2, #0
 80080be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f88e 	bl	80081e4 <UART_WaitOnFlagUntilTimeout>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d022      	beq.n	8008114 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d6:	e853 3f00 	ldrex	r3, [r3]
 80080da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	461a      	mov	r2, r3
 80080ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080f4:	e841 2300 	strex	r3, r2, [r1]
 80080f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e6      	bne.n	80080ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2220      	movs	r2, #32
 8008104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e063      	b.n	80081dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0304 	and.w	r3, r3, #4
 800811e:	2b04      	cmp	r3, #4
 8008120:	d149      	bne.n	80081b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008122:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800812a:	2200      	movs	r2, #0
 800812c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f857 	bl	80081e4 <UART_WaitOnFlagUntilTimeout>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d03c      	beq.n	80081b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	623b      	str	r3, [r7, #32]
   return(result);
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008150:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800815a:	633b      	str	r3, [r7, #48]	@ 0x30
 800815c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e6      	bne.n	800813c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3308      	adds	r3, #8
 8008174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	60fb      	str	r3, [r7, #12]
   return(result);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3308      	adds	r3, #8
 800818c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800818e:	61fa      	str	r2, [r7, #28]
 8008190:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008192:	69b9      	ldr	r1, [r7, #24]
 8008194:	69fa      	ldr	r2, [r7, #28]
 8008196:	e841 2300 	strex	r3, r2, [r1]
 800819a:	617b      	str	r3, [r7, #20]
   return(result);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1e5      	bne.n	800816e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2220      	movs	r2, #32
 80081a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e012      	b.n	80081dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3758      	adds	r7, #88	@ 0x58
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	603b      	str	r3, [r7, #0]
 80081f0:	4613      	mov	r3, r2
 80081f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f4:	e04f      	b.n	8008296 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fc:	d04b      	beq.n	8008296 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081fe:	f7f8 febd 	bl	8000f7c <HAL_GetTick>
 8008202:	4602      	mov	r2, r0
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	69ba      	ldr	r2, [r7, #24]
 800820a:	429a      	cmp	r2, r3
 800820c:	d302      	bcc.n	8008214 <UART_WaitOnFlagUntilTimeout+0x30>
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e04e      	b.n	80082b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0304 	and.w	r3, r3, #4
 8008222:	2b00      	cmp	r3, #0
 8008224:	d037      	beq.n	8008296 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2b80      	cmp	r3, #128	@ 0x80
 800822a:	d034      	beq.n	8008296 <UART_WaitOnFlagUntilTimeout+0xb2>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b40      	cmp	r3, #64	@ 0x40
 8008230:	d031      	beq.n	8008296 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69db      	ldr	r3, [r3, #28]
 8008238:	f003 0308 	and.w	r3, r3, #8
 800823c:	2b08      	cmp	r3, #8
 800823e:	d110      	bne.n	8008262 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2208      	movs	r2, #8
 8008246:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 f921 	bl	8008490 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2208      	movs	r2, #8
 8008252:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e029      	b.n	80082b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800826c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008270:	d111      	bne.n	8008296 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800827a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f000 f907 	bl	8008490 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2220      	movs	r2, #32
 8008286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e00f      	b.n	80082b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69da      	ldr	r2, [r3, #28]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4013      	ands	r3, r2
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	bf0c      	ite	eq
 80082a6:	2301      	moveq	r3, #1
 80082a8:	2300      	movne	r3, #0
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	461a      	mov	r2, r3
 80082ae:	79fb      	ldrb	r3, [r7, #7]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d0a0      	beq.n	80081f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
	...

080082c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b096      	sub	sp, #88	@ 0x58
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	88fa      	ldrh	r2, [r7, #6]
 80082d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2222      	movs	r2, #34	@ 0x22
 80082e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d02d      	beq.n	8008352 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082fc:	4a40      	ldr	r2, [pc, #256]	@ (8008400 <UART_Start_Receive_DMA+0x140>)
 80082fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008306:	4a3f      	ldr	r2, [pc, #252]	@ (8008404 <UART_Start_Receive_DMA+0x144>)
 8008308:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008310:	4a3d      	ldr	r2, [pc, #244]	@ (8008408 <UART_Start_Receive_DMA+0x148>)
 8008312:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800831a:	2200      	movs	r2, #0
 800831c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3324      	adds	r3, #36	@ 0x24
 800832a:	4619      	mov	r1, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008330:	461a      	mov	r2, r3
 8008332:	88fb      	ldrh	r3, [r7, #6]
 8008334:	f7f9 faee 	bl	8001914 <HAL_DMA_Start_IT>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d009      	beq.n	8008352 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2210      	movs	r2, #16
 8008342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2220      	movs	r2, #32
 800834a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e051      	b.n	80083f6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d018      	beq.n	800838c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008362:	e853 3f00 	ldrex	r3, [r3]
 8008366:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800836e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	461a      	mov	r2, r3
 8008376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800837a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800837e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008380:	e841 2300 	strex	r3, r2, [r1]
 8008384:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1e6      	bne.n	800835a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3308      	adds	r3, #8
 8008392:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008396:	e853 3f00 	ldrex	r3, [r3]
 800839a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800839c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839e:	f043 0301 	orr.w	r3, r3, #1
 80083a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3308      	adds	r3, #8
 80083aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80083ac:	637a      	str	r2, [r7, #52]	@ 0x34
 80083ae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083b4:	e841 2300 	strex	r3, r2, [r1]
 80083b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80083ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1e5      	bne.n	800838c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3308      	adds	r3, #8
 80083c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	e853 3f00 	ldrex	r3, [r3]
 80083ce:	613b      	str	r3, [r7, #16]
   return(result);
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3308      	adds	r3, #8
 80083de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083e0:	623a      	str	r2, [r7, #32]
 80083e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e4:	69f9      	ldr	r1, [r7, #28]
 80083e6:	6a3a      	ldr	r2, [r7, #32]
 80083e8:	e841 2300 	strex	r3, r2, [r1]
 80083ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e5      	bne.n	80083c0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3758      	adds	r7, #88	@ 0x58
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	0800855d 	.word	0x0800855d
 8008404:	08008685 	.word	0x08008685
 8008408:	080086c3 	.word	0x080086c3

0800840c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800840c:	b480      	push	{r7}
 800840e:	b08f      	sub	sp, #60	@ 0x3c
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	61fb      	str	r3, [r7, #28]
   return(result);
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008428:	637b      	str	r3, [r7, #52]	@ 0x34
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008434:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008438:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e6      	bne.n	8008414 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3308      	adds	r3, #8
 800844c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	60bb      	str	r3, [r7, #8]
   return(result);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800845c:	633b      	str	r3, [r7, #48]	@ 0x30
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3308      	adds	r3, #8
 8008464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008466:	61ba      	str	r2, [r7, #24]
 8008468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	6979      	ldr	r1, [r7, #20]
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	613b      	str	r3, [r7, #16]
   return(result);
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e5      	bne.n	8008446 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008482:	bf00      	nop
 8008484:	373c      	adds	r7, #60	@ 0x3c
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
	...

08008490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008490:	b480      	push	{r7}
 8008492:	b095      	sub	sp, #84	@ 0x54
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80084b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e6      	bne.n	8008498 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3308      	adds	r3, #8
 80084d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	4b1e      	ldr	r3, [pc, #120]	@ (8008558 <UART_EndRxTransfer+0xc8>)
 80084de:	4013      	ands	r3, r2
 80084e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3308      	adds	r3, #8
 80084e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e5      	bne.n	80084ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008502:	2b01      	cmp	r3, #1
 8008504:	d118      	bne.n	8008538 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	e853 3f00 	ldrex	r3, [r3]
 8008512:	60bb      	str	r3, [r7, #8]
   return(result);
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	f023 0310 	bic.w	r3, r3, #16
 800851a:	647b      	str	r3, [r7, #68]	@ 0x44
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	461a      	mov	r2, r3
 8008522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008524:	61bb      	str	r3, [r7, #24]
 8008526:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008528:	6979      	ldr	r1, [r7, #20]
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	e841 2300 	strex	r3, r2, [r1]
 8008530:	613b      	str	r3, [r7, #16]
   return(result);
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1e6      	bne.n	8008506 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2220      	movs	r2, #32
 800853c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800854c:	bf00      	nop
 800854e:	3754      	adds	r7, #84	@ 0x54
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	effffffe 	.word	0xeffffffe

0800855c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b09c      	sub	sp, #112	@ 0x70
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008568:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008572:	d071      	beq.n	8008658 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008574:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008576:	2200      	movs	r2, #0
 8008578:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800857c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008584:	e853 3f00 	ldrex	r3, [r3]
 8008588:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800858a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800858c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008590:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800859a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800859c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085a2:	e841 2300 	strex	r3, r2, [r1]
 80085a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1e6      	bne.n	800857c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3308      	adds	r3, #8
 80085b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c0:	f023 0301 	bic.w	r3, r3, #1
 80085c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80085c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3308      	adds	r3, #8
 80085cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80085ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80085d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e5      	bne.n	80085ae <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3308      	adds	r3, #8
 80085e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	623b      	str	r3, [r7, #32]
   return(result);
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80085fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3308      	adds	r3, #8
 8008600:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008602:	633a      	str	r2, [r7, #48]	@ 0x30
 8008604:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e5      	bne.n	80085e2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008618:	2220      	movs	r2, #32
 800861a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800861e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008622:	2b01      	cmp	r3, #1
 8008624:	d118      	bne.n	8008658 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	e853 3f00 	ldrex	r3, [r3]
 8008632:	60fb      	str	r3, [r7, #12]
   return(result);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 0310 	bic.w	r3, r3, #16
 800863a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800863c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	461a      	mov	r2, r3
 8008642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008644:	61fb      	str	r3, [r7, #28]
 8008646:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	69b9      	ldr	r1, [r7, #24]
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	617b      	str	r3, [r7, #20]
   return(result);
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e6      	bne.n	8008626 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800865a:	2200      	movs	r2, #0
 800865c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800865e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008662:	2b01      	cmp	r3, #1
 8008664:	d107      	bne.n	8008676 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800866c:	4619      	mov	r1, r3
 800866e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008670:	f7fe fef8 	bl	8007464 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008674:	e002      	b.n	800867c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008676:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008678:	f7fe fed6 	bl	8007428 <HAL_UART_RxCpltCallback>
}
 800867c:	bf00      	nop
 800867e:	3770      	adds	r7, #112	@ 0x70
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008690:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2201      	movs	r2, #1
 8008696:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800869c:	2b01      	cmp	r3, #1
 800869e:	d109      	bne.n	80086b4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086a6:	085b      	lsrs	r3, r3, #1
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	4619      	mov	r1, r3
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7fe fed9 	bl	8007464 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086b2:	e002      	b.n	80086ba <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f7fe fec1 	bl	800743c <HAL_UART_RxHalfCpltCallback>
}
 80086ba:	bf00      	nop
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b086      	sub	sp, #24
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ea:	2b80      	cmp	r3, #128	@ 0x80
 80086ec:	d109      	bne.n	8008702 <UART_DMAError+0x40>
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2b21      	cmp	r3, #33	@ 0x21
 80086f2:	d106      	bne.n	8008702 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80086fc:	6978      	ldr	r0, [r7, #20]
 80086fe:	f7ff fe85 	bl	800840c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800870c:	2b40      	cmp	r3, #64	@ 0x40
 800870e:	d109      	bne.n	8008724 <UART_DMAError+0x62>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b22      	cmp	r3, #34	@ 0x22
 8008714:	d106      	bne.n	8008724 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2200      	movs	r2, #0
 800871a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800871e:	6978      	ldr	r0, [r7, #20]
 8008720:	f7ff feb6 	bl	8008490 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800872a:	f043 0210 	orr.w	r2, r3, #16
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008734:	6978      	ldr	r0, [r7, #20]
 8008736:	f7fe fe8b 	bl	8007450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800873a:	bf00      	nop
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008742:	b480      	push	{r7}
 8008744:	b085      	sub	sp, #20
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008750:	2b01      	cmp	r3, #1
 8008752:	d101      	bne.n	8008758 <HAL_UARTEx_DisableFifoMode+0x16>
 8008754:	2302      	movs	r3, #2
 8008756:	e027      	b.n	80087a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2224      	movs	r2, #36	@ 0x24
 8008764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f022 0201 	bic.w	r2, r2, #1
 800877e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008786:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2220      	movs	r2, #32
 800879a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d101      	bne.n	80087cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087c8:	2302      	movs	r3, #2
 80087ca:	e02d      	b.n	8008828 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2224      	movs	r2, #36	@ 0x24
 80087d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f022 0201 	bic.w	r2, r2, #1
 80087f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f84f 	bl	80088ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2220      	movs	r2, #32
 800881a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008844:	2302      	movs	r3, #2
 8008846:	e02d      	b.n	80088a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2224      	movs	r2, #36	@ 0x24
 8008854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f022 0201 	bic.w	r2, r2, #1
 800886e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	430a      	orrs	r2, r1
 8008882:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f811 	bl	80088ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2220      	movs	r2, #32
 8008896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d108      	bne.n	80088ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088cc:	e031      	b.n	8008932 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088ce:	2310      	movs	r3, #16
 80088d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088d2:	2310      	movs	r3, #16
 80088d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	0e5b      	lsrs	r3, r3, #25
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	f003 0307 	and.w	r3, r3, #7
 80088e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	0f5b      	lsrs	r3, r3, #29
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	f003 0307 	and.w	r3, r3, #7
 80088f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	7b3a      	ldrb	r2, [r7, #12]
 80088fa:	4911      	ldr	r1, [pc, #68]	@ (8008940 <UARTEx_SetNbDataToProcess+0x94>)
 80088fc:	5c8a      	ldrb	r2, [r1, r2]
 80088fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008902:	7b3a      	ldrb	r2, [r7, #12]
 8008904:	490f      	ldr	r1, [pc, #60]	@ (8008944 <UARTEx_SetNbDataToProcess+0x98>)
 8008906:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008908:	fb93 f3f2 	sdiv	r3, r3, r2
 800890c:	b29a      	uxth	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	7b7a      	ldrb	r2, [r7, #13]
 8008918:	4909      	ldr	r1, [pc, #36]	@ (8008940 <UARTEx_SetNbDataToProcess+0x94>)
 800891a:	5c8a      	ldrb	r2, [r1, r2]
 800891c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008920:	7b7a      	ldrb	r2, [r7, #13]
 8008922:	4908      	ldr	r1, [pc, #32]	@ (8008944 <UARTEx_SetNbDataToProcess+0x98>)
 8008924:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008926:	fb93 f3f2 	sdiv	r3, r3, r2
 800892a:	b29a      	uxth	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008932:	bf00      	nop
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	0800a0d8 	.word	0x0800a0d8
 8008944:	0800a0e0 	.word	0x0800a0e0

08008948 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	4603      	mov	r3, r0
 8008950:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008952:	2300      	movs	r3, #0
 8008954:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800895a:	2b84      	cmp	r3, #132	@ 0x84
 800895c:	d005      	beq.n	800896a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800895e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	4413      	add	r3, r2
 8008966:	3303      	adds	r3, #3
 8008968:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800896a:	68fb      	ldr	r3, [r7, #12]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800897c:	f000 fb04 	bl	8008f88 <vTaskStartScheduler>
  
  return osOK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	bd80      	pop	{r7, pc}

08008986 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008986:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008988:	b089      	sub	sp, #36	@ 0x24
 800898a:	af04      	add	r7, sp, #16
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d020      	beq.n	80089da <osThreadCreate+0x54>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01c      	beq.n	80089da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685c      	ldr	r4, [r3, #4]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	691e      	ldr	r6, [r3, #16]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff ffc8 	bl	8008948 <makeFreeRtosPriority>
 80089b8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80089c2:	9202      	str	r2, [sp, #8]
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	9100      	str	r1, [sp, #0]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	4632      	mov	r2, r6
 80089cc:	4629      	mov	r1, r5
 80089ce:	4620      	mov	r0, r4
 80089d0:	f000 f8ed 	bl	8008bae <xTaskCreateStatic>
 80089d4:	4603      	mov	r3, r0
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	e01c      	b.n	8008a14 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685c      	ldr	r4, [r3, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80089e6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff ffaa 	bl	8008948 <makeFreeRtosPriority>
 80089f4:	4602      	mov	r2, r0
 80089f6:	f107 030c 	add.w	r3, r7, #12
 80089fa:	9301      	str	r3, [sp, #4]
 80089fc:	9200      	str	r2, [sp, #0]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	4632      	mov	r2, r6
 8008a02:	4629      	mov	r1, r5
 8008a04:	4620      	mov	r0, r4
 8008a06:	f000 f932 	bl	8008c6e <xTaskCreate>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d001      	beq.n	8008a14 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	e000      	b.n	8008a16 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008a14:	68fb      	ldr	r3, [r7, #12]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a1e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <osDelay+0x16>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	e000      	b.n	8008a36 <osDelay+0x18>
 8008a34:	2301      	movs	r3, #1
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 fa70 	bl	8008f1c <vTaskDelay>
  
  return osOK;
 8008a3c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f103 0208 	add.w	r2, r3, #8
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f103 0208 	add.w	r2, r3, #8
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f103 0208 	add.w	r2, r3, #8
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a7a:	bf00      	nop
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	689a      	ldr	r2, [r3, #8]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	601a      	str	r2, [r3, #0]
}
 8008adc:	bf00      	nop
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afe:	d103      	bne.n	8008b08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	e00c      	b.n	8008b22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	60fb      	str	r3, [r7, #12]
 8008b0e:	e002      	b.n	8008b16 <vListInsert+0x2e>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	60fb      	str	r3, [r7, #12]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d2f6      	bcs.n	8008b10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	601a      	str	r2, [r3, #0]
}
 8008b4e:	bf00      	nop
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b085      	sub	sp, #20
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	6892      	ldr	r2, [r2, #8]
 8008b70:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	6852      	ldr	r2, [r2, #4]
 8008b7a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d103      	bne.n	8008b8e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	689a      	ldr	r2, [r3, #8]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	1e5a      	subs	r2, r3, #1
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b08e      	sub	sp, #56	@ 0x38
 8008bb2:	af04      	add	r7, sp, #16
 8008bb4:	60f8      	str	r0, [r7, #12]
 8008bb6:	60b9      	str	r1, [r7, #8]
 8008bb8:	607a      	str	r2, [r7, #4]
 8008bba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10b      	bne.n	8008bda <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008bd4:	bf00      	nop
 8008bd6:	bf00      	nop
 8008bd8:	e7fd      	b.n	8008bd6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10b      	bne.n	8008bf8 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	61fb      	str	r3, [r7, #28]
}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	e7fd      	b.n	8008bf4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008bf8:	23a0      	movs	r3, #160	@ 0xa0
 8008bfa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	2ba0      	cmp	r3, #160	@ 0xa0
 8008c00:	d00b      	beq.n	8008c1a <xTaskCreateStatic+0x6c>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	61bb      	str	r3, [r7, #24]
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	e7fd      	b.n	8008c16 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d01e      	beq.n	8008c60 <xTaskCreateStatic+0xb2>
 8008c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d01b      	beq.n	8008c60 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c30:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c34:	2202      	movs	r2, #2
 8008c36:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	9303      	str	r3, [sp, #12]
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c40:	9302      	str	r3, [sp, #8]
 8008c42:	f107 0314 	add.w	r3, r7, #20
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	68b9      	ldr	r1, [r7, #8]
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 f850 	bl	8008cf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c5a:	f000 f8f5 	bl	8008e48 <prvAddNewTaskToReadyList>
 8008c5e:	e001      	b.n	8008c64 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008c60:	2300      	movs	r3, #0
 8008c62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c64:	697b      	ldr	r3, [r7, #20]
	}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3728      	adds	r7, #40	@ 0x28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b08c      	sub	sp, #48	@ 0x30
 8008c72:	af04      	add	r7, sp, #16
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	603b      	str	r3, [r7, #0]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c7e:	88fb      	ldrh	r3, [r7, #6]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 ff08 	bl	8009a98 <pvPortMalloc>
 8008c88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00e      	beq.n	8008cae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c90:	20a0      	movs	r0, #160	@ 0xa0
 8008c92:	f000 ff01 	bl	8009a98 <pvPortMalloc>
 8008c96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	631a      	str	r2, [r3, #48]	@ 0x30
 8008ca4:	e005      	b.n	8008cb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ca6:	6978      	ldr	r0, [r7, #20]
 8008ca8:	f000 ffc4 	bl	8009c34 <vPortFree>
 8008cac:	e001      	b.n	8008cb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d017      	beq.n	8008ce8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cc0:	88fa      	ldrh	r2, [r7, #6]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9303      	str	r3, [sp, #12]
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	9302      	str	r3, [sp, #8]
 8008cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ccc:	9301      	str	r3, [sp, #4]
 8008cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	68b9      	ldr	r1, [r7, #8]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 f80e 	bl	8008cf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cdc:	69f8      	ldr	r0, [r7, #28]
 8008cde:	f000 f8b3 	bl	8008e48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	61bb      	str	r3, [r7, #24]
 8008ce6:	e002      	b.n	8008cee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008cee:	69bb      	ldr	r3, [r7, #24]
	}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3720      	adds	r7, #32
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d08:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	461a      	mov	r2, r3
 8008d10:	21a5      	movs	r1, #165	@ 0xa5
 8008d12:	f001 f8af 	bl	8009e74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008d20:	440b      	add	r3, r1
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	f023 0307 	bic.w	r3, r3, #7
 8008d2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	f003 0307 	and.w	r3, r3, #7
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00b      	beq.n	8008d52 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	617b      	str	r3, [r7, #20]
}
 8008d4c:	bf00      	nop
 8008d4e:	bf00      	nop
 8008d50:	e7fd      	b.n	8008d4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d01f      	beq.n	8008d98 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d58:	2300      	movs	r3, #0
 8008d5a:	61fb      	str	r3, [r7, #28]
 8008d5c:	e012      	b.n	8008d84 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	4413      	add	r3, r2
 8008d64:	7819      	ldrb	r1, [r3, #0]
 8008d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	3334      	adds	r3, #52	@ 0x34
 8008d6e:	460a      	mov	r2, r1
 8008d70:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	4413      	add	r3, r2
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d006      	beq.n	8008d8c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	3301      	adds	r3, #1
 8008d82:	61fb      	str	r3, [r7, #28]
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	2b0f      	cmp	r3, #15
 8008d88:	d9e9      	bls.n	8008d5e <prvInitialiseNewTask+0x66>
 8008d8a:	e000      	b.n	8008d8e <prvInitialiseNewTask+0x96>
			{
				break;
 8008d8c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d96:	e003      	b.n	8008da0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da2:	2b06      	cmp	r3, #6
 8008da4:	d901      	bls.n	8008daa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008da6:	2306      	movs	r3, #6
 8008da8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008db4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db8:	2200      	movs	r2, #0
 8008dba:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7ff fe60 	bl	8008a86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc8:	3318      	adds	r3, #24
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff fe5b 	bl	8008a86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd8:	f1c3 0207 	rsb	r2, r3, #7
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008de4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de8:	2200      	movs	r2, #0
 8008dea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df8:	334c      	adds	r3, #76	@ 0x4c
 8008dfa:	224c      	movs	r2, #76	@ 0x4c
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f001 f838 	bl	8009e74 <memset>
 8008e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e06:	4a0d      	ldr	r2, [pc, #52]	@ (8008e3c <prvInitialiseNewTask+0x144>)
 8008e08:	651a      	str	r2, [r3, #80]	@ 0x50
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8008e40 <prvInitialiseNewTask+0x148>)
 8008e0e:	655a      	str	r2, [r3, #84]	@ 0x54
 8008e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e12:	4a0c      	ldr	r2, [pc, #48]	@ (8008e44 <prvInitialiseNewTask+0x14c>)
 8008e14:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	68f9      	ldr	r1, [r7, #12]
 8008e1a:	69b8      	ldr	r0, [r7, #24]
 8008e1c:	f000 fc2a 	bl	8009674 <pxPortInitialiseStack>
 8008e20:	4602      	mov	r2, r0
 8008e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d002      	beq.n	8008e32 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e32:	bf00      	nop
 8008e34:	3720      	adds	r7, #32
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	240043d8 	.word	0x240043d8
 8008e40:	24004440 	.word	0x24004440
 8008e44:	240044a8 	.word	0x240044a8

08008e48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e50:	f000 fd42 	bl	80098d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e54:	4b2a      	ldr	r3, [pc, #168]	@ (8008f00 <prvAddNewTaskToReadyList+0xb8>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	4a29      	ldr	r2, [pc, #164]	@ (8008f00 <prvAddNewTaskToReadyList+0xb8>)
 8008e5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e5e:	4b29      	ldr	r3, [pc, #164]	@ (8008f04 <prvAddNewTaskToReadyList+0xbc>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d109      	bne.n	8008e7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e66:	4a27      	ldr	r2, [pc, #156]	@ (8008f04 <prvAddNewTaskToReadyList+0xbc>)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e6c:	4b24      	ldr	r3, [pc, #144]	@ (8008f00 <prvAddNewTaskToReadyList+0xb8>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d110      	bne.n	8008e96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e74:	f000 fad4 	bl	8009420 <prvInitialiseTaskLists>
 8008e78:	e00d      	b.n	8008e96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e7a:	4b23      	ldr	r3, [pc, #140]	@ (8008f08 <prvAddNewTaskToReadyList+0xc0>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d109      	bne.n	8008e96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e82:	4b20      	ldr	r3, [pc, #128]	@ (8008f04 <prvAddNewTaskToReadyList+0xbc>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d802      	bhi.n	8008e96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e90:	4a1c      	ldr	r2, [pc, #112]	@ (8008f04 <prvAddNewTaskToReadyList+0xbc>)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e96:	4b1d      	ldr	r3, [pc, #116]	@ (8008f0c <prvAddNewTaskToReadyList+0xc4>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8008f0c <prvAddNewTaskToReadyList+0xc4>)
 8008e9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	409a      	lsls	r2, r3
 8008ea8:	4b19      	ldr	r3, [pc, #100]	@ (8008f10 <prvAddNewTaskToReadyList+0xc8>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	4a18      	ldr	r2, [pc, #96]	@ (8008f10 <prvAddNewTaskToReadyList+0xc8>)
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4a15      	ldr	r2, [pc, #84]	@ (8008f14 <prvAddNewTaskToReadyList+0xcc>)
 8008ec0:	441a      	add	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4610      	mov	r0, r2
 8008eca:	f7ff fde9 	bl	8008aa0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ece:	f000 fd35 	bl	800993c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f08 <prvAddNewTaskToReadyList+0xc0>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00e      	beq.n	8008ef8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008eda:	4b0a      	ldr	r3, [pc, #40]	@ (8008f04 <prvAddNewTaskToReadyList+0xbc>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d207      	bcs.n	8008ef8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8008f18 <prvAddNewTaskToReadyList+0xd0>)
 8008eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ef8:	bf00      	nop
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	24000784 	.word	0x24000784
 8008f04:	24000684 	.word	0x24000684
 8008f08:	24000790 	.word	0x24000790
 8008f0c:	240007a0 	.word	0x240007a0
 8008f10:	2400078c 	.word	0x2400078c
 8008f14:	24000688 	.word	0x24000688
 8008f18:	e000ed04 	.word	0xe000ed04

08008f1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f24:	2300      	movs	r3, #0
 8008f26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d018      	beq.n	8008f60 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f2e:	4b14      	ldr	r3, [pc, #80]	@ (8008f80 <vTaskDelay+0x64>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00b      	beq.n	8008f4e <vTaskDelay+0x32>
	__asm volatile
 8008f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3a:	f383 8811 	msr	BASEPRI, r3
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	f3bf 8f4f 	dsb	sy
 8008f46:	60bb      	str	r3, [r7, #8]
}
 8008f48:	bf00      	nop
 8008f4a:	bf00      	nop
 8008f4c:	e7fd      	b.n	8008f4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f4e:	f000 f885 	bl	800905c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f52:	2100      	movs	r1, #0
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fb27 	bl	80095a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f5a:	f000 f88d 	bl	8009078 <xTaskResumeAll>
 8008f5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d107      	bne.n	8008f76 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008f66:	4b07      	ldr	r3, [pc, #28]	@ (8008f84 <vTaskDelay+0x68>)
 8008f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f76:	bf00      	nop
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	240007ac 	.word	0x240007ac
 8008f84:	e000ed04 	.word	0xe000ed04

08008f88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08a      	sub	sp, #40	@ 0x28
 8008f8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f96:	463a      	mov	r2, r7
 8008f98:	1d39      	adds	r1, r7, #4
 8008f9a:	f107 0308 	add.w	r3, r7, #8
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7f7 fb54 	bl	800064c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008fa4:	6839      	ldr	r1, [r7, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	9202      	str	r2, [sp, #8]
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	460a      	mov	r2, r1
 8008fb6:	4921      	ldr	r1, [pc, #132]	@ (800903c <vTaskStartScheduler+0xb4>)
 8008fb8:	4821      	ldr	r0, [pc, #132]	@ (8009040 <vTaskStartScheduler+0xb8>)
 8008fba:	f7ff fdf8 	bl	8008bae <xTaskCreateStatic>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	4a20      	ldr	r2, [pc, #128]	@ (8009044 <vTaskStartScheduler+0xbc>)
 8008fc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8009044 <vTaskStartScheduler+0xbc>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d002      	beq.n	8008fd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	e001      	b.n	8008fd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d11b      	bne.n	8009014 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	613b      	str	r3, [r7, #16]
}
 8008fee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ff0:	4b15      	ldr	r3, [pc, #84]	@ (8009048 <vTaskStartScheduler+0xc0>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	334c      	adds	r3, #76	@ 0x4c
 8008ff6:	4a15      	ldr	r2, [pc, #84]	@ (800904c <vTaskStartScheduler+0xc4>)
 8008ff8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ffa:	4b15      	ldr	r3, [pc, #84]	@ (8009050 <vTaskStartScheduler+0xc8>)
 8008ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8009000:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009002:	4b14      	ldr	r3, [pc, #80]	@ (8009054 <vTaskStartScheduler+0xcc>)
 8009004:	2201      	movs	r2, #1
 8009006:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009008:	4b13      	ldr	r3, [pc, #76]	@ (8009058 <vTaskStartScheduler+0xd0>)
 800900a:	2200      	movs	r2, #0
 800900c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800900e:	f000 fbbf 	bl	8009790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009012:	e00f      	b.n	8009034 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901a:	d10b      	bne.n	8009034 <vTaskStartScheduler+0xac>
	__asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	60fb      	str	r3, [r7, #12]
}
 800902e:	bf00      	nop
 8009030:	bf00      	nop
 8009032:	e7fd      	b.n	8009030 <vTaskStartScheduler+0xa8>
}
 8009034:	bf00      	nop
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	0800a0a0 	.word	0x0800a0a0
 8009040:	080093f1 	.word	0x080093f1
 8009044:	240007a8 	.word	0x240007a8
 8009048:	24000684 	.word	0x24000684
 800904c:	24000014 	.word	0x24000014
 8009050:	240007a4 	.word	0x240007a4
 8009054:	24000790 	.word	0x24000790
 8009058:	24000788 	.word	0x24000788

0800905c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800905c:	b480      	push	{r7}
 800905e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009060:	4b04      	ldr	r3, [pc, #16]	@ (8009074 <vTaskSuspendAll+0x18>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	4a03      	ldr	r2, [pc, #12]	@ (8009074 <vTaskSuspendAll+0x18>)
 8009068:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800906a:	bf00      	nop
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	240007ac 	.word	0x240007ac

08009078 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009082:	2300      	movs	r3, #0
 8009084:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009086:	4b42      	ldr	r3, [pc, #264]	@ (8009190 <xTaskResumeAll+0x118>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10b      	bne.n	80090a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800908e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	603b      	str	r3, [r7, #0]
}
 80090a0:	bf00      	nop
 80090a2:	bf00      	nop
 80090a4:	e7fd      	b.n	80090a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80090a6:	f000 fc17 	bl	80098d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090aa:	4b39      	ldr	r3, [pc, #228]	@ (8009190 <xTaskResumeAll+0x118>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	4a37      	ldr	r2, [pc, #220]	@ (8009190 <xTaskResumeAll+0x118>)
 80090b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090b4:	4b36      	ldr	r3, [pc, #216]	@ (8009190 <xTaskResumeAll+0x118>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d161      	bne.n	8009180 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090bc:	4b35      	ldr	r3, [pc, #212]	@ (8009194 <xTaskResumeAll+0x11c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d05d      	beq.n	8009180 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090c4:	e02e      	b.n	8009124 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090c6:	4b34      	ldr	r3, [pc, #208]	@ (8009198 <xTaskResumeAll+0x120>)
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3318      	adds	r3, #24
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7ff fd41 	bl	8008b5a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	3304      	adds	r3, #4
 80090dc:	4618      	mov	r0, r3
 80090de:	f7ff fd3c 	bl	8008b5a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e6:	2201      	movs	r2, #1
 80090e8:	409a      	lsls	r2, r3
 80090ea:	4b2c      	ldr	r3, [pc, #176]	@ (800919c <xTaskResumeAll+0x124>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	4a2a      	ldr	r2, [pc, #168]	@ (800919c <xTaskResumeAll+0x124>)
 80090f2:	6013      	str	r3, [r2, #0]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090f8:	4613      	mov	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4a27      	ldr	r2, [pc, #156]	@ (80091a0 <xTaskResumeAll+0x128>)
 8009102:	441a      	add	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3304      	adds	r3, #4
 8009108:	4619      	mov	r1, r3
 800910a:	4610      	mov	r0, r2
 800910c:	f7ff fcc8 	bl	8008aa0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009114:	4b23      	ldr	r3, [pc, #140]	@ (80091a4 <xTaskResumeAll+0x12c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911a:	429a      	cmp	r2, r3
 800911c:	d302      	bcc.n	8009124 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800911e:	4b22      	ldr	r3, [pc, #136]	@ (80091a8 <xTaskResumeAll+0x130>)
 8009120:	2201      	movs	r2, #1
 8009122:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009124:	4b1c      	ldr	r3, [pc, #112]	@ (8009198 <xTaskResumeAll+0x120>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1cc      	bne.n	80090c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009132:	f000 fa19 	bl	8009568 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009136:	4b1d      	ldr	r3, [pc, #116]	@ (80091ac <xTaskResumeAll+0x134>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d010      	beq.n	8009164 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009142:	f000 f837 	bl	80091b4 <xTaskIncrementTick>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800914c:	4b16      	ldr	r3, [pc, #88]	@ (80091a8 <xTaskResumeAll+0x130>)
 800914e:	2201      	movs	r2, #1
 8009150:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3b01      	subs	r3, #1
 8009156:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1f1      	bne.n	8009142 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800915e:	4b13      	ldr	r3, [pc, #76]	@ (80091ac <xTaskResumeAll+0x134>)
 8009160:	2200      	movs	r2, #0
 8009162:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009164:	4b10      	ldr	r3, [pc, #64]	@ (80091a8 <xTaskResumeAll+0x130>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d009      	beq.n	8009180 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800916c:	2301      	movs	r3, #1
 800916e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009170:	4b0f      	ldr	r3, [pc, #60]	@ (80091b0 <xTaskResumeAll+0x138>)
 8009172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009180:	f000 fbdc 	bl	800993c <vPortExitCritical>

	return xAlreadyYielded;
 8009184:	68bb      	ldr	r3, [r7, #8]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	240007ac 	.word	0x240007ac
 8009194:	24000784 	.word	0x24000784
 8009198:	24000744 	.word	0x24000744
 800919c:	2400078c 	.word	0x2400078c
 80091a0:	24000688 	.word	0x24000688
 80091a4:	24000684 	.word	0x24000684
 80091a8:	24000798 	.word	0x24000798
 80091ac:	24000794 	.word	0x24000794
 80091b0:	e000ed04 	.word	0xe000ed04

080091b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091ba:	2300      	movs	r3, #0
 80091bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091be:	4b4f      	ldr	r3, [pc, #316]	@ (80092fc <xTaskIncrementTick+0x148>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f040 808f 	bne.w	80092e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091c8:	4b4d      	ldr	r3, [pc, #308]	@ (8009300 <xTaskIncrementTick+0x14c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3301      	adds	r3, #1
 80091ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091d0:	4a4b      	ldr	r2, [pc, #300]	@ (8009300 <xTaskIncrementTick+0x14c>)
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d121      	bne.n	8009220 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80091dc:	4b49      	ldr	r3, [pc, #292]	@ (8009304 <xTaskIncrementTick+0x150>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00b      	beq.n	80091fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	603b      	str	r3, [r7, #0]
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	e7fd      	b.n	80091fa <xTaskIncrementTick+0x46>
 80091fe:	4b41      	ldr	r3, [pc, #260]	@ (8009304 <xTaskIncrementTick+0x150>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	4b40      	ldr	r3, [pc, #256]	@ (8009308 <xTaskIncrementTick+0x154>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a3e      	ldr	r2, [pc, #248]	@ (8009304 <xTaskIncrementTick+0x150>)
 800920a:	6013      	str	r3, [r2, #0]
 800920c:	4a3e      	ldr	r2, [pc, #248]	@ (8009308 <xTaskIncrementTick+0x154>)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6013      	str	r3, [r2, #0]
 8009212:	4b3e      	ldr	r3, [pc, #248]	@ (800930c <xTaskIncrementTick+0x158>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3301      	adds	r3, #1
 8009218:	4a3c      	ldr	r2, [pc, #240]	@ (800930c <xTaskIncrementTick+0x158>)
 800921a:	6013      	str	r3, [r2, #0]
 800921c:	f000 f9a4 	bl	8009568 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009220:	4b3b      	ldr	r3, [pc, #236]	@ (8009310 <xTaskIncrementTick+0x15c>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	429a      	cmp	r2, r3
 8009228:	d348      	bcc.n	80092bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800922a:	4b36      	ldr	r3, [pc, #216]	@ (8009304 <xTaskIncrementTick+0x150>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d104      	bne.n	800923e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009234:	4b36      	ldr	r3, [pc, #216]	@ (8009310 <xTaskIncrementTick+0x15c>)
 8009236:	f04f 32ff 	mov.w	r2, #4294967295
 800923a:	601a      	str	r2, [r3, #0]
					break;
 800923c:	e03e      	b.n	80092bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800923e:	4b31      	ldr	r3, [pc, #196]	@ (8009304 <xTaskIncrementTick+0x150>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	429a      	cmp	r2, r3
 8009254:	d203      	bcs.n	800925e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009256:	4a2e      	ldr	r2, [pc, #184]	@ (8009310 <xTaskIncrementTick+0x15c>)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800925c:	e02e      	b.n	80092bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	3304      	adds	r3, #4
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff fc79 	bl	8008b5a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926c:	2b00      	cmp	r3, #0
 800926e:	d004      	beq.n	800927a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	3318      	adds	r3, #24
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff fc70 	bl	8008b5a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800927e:	2201      	movs	r2, #1
 8009280:	409a      	lsls	r2, r3
 8009282:	4b24      	ldr	r3, [pc, #144]	@ (8009314 <xTaskIncrementTick+0x160>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4313      	orrs	r3, r2
 8009288:	4a22      	ldr	r2, [pc, #136]	@ (8009314 <xTaskIncrementTick+0x160>)
 800928a:	6013      	str	r3, [r2, #0]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009290:	4613      	mov	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4413      	add	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4a1f      	ldr	r2, [pc, #124]	@ (8009318 <xTaskIncrementTick+0x164>)
 800929a:	441a      	add	r2, r3
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	3304      	adds	r3, #4
 80092a0:	4619      	mov	r1, r3
 80092a2:	4610      	mov	r0, r2
 80092a4:	f7ff fbfc 	bl	8008aa0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ac:	4b1b      	ldr	r3, [pc, #108]	@ (800931c <xTaskIncrementTick+0x168>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d3b9      	bcc.n	800922a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80092b6:	2301      	movs	r3, #1
 80092b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092ba:	e7b6      	b.n	800922a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092bc:	4b17      	ldr	r3, [pc, #92]	@ (800931c <xTaskIncrementTick+0x168>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c2:	4915      	ldr	r1, [pc, #84]	@ (8009318 <xTaskIncrementTick+0x164>)
 80092c4:	4613      	mov	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	440b      	add	r3, r1
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d901      	bls.n	80092d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80092d4:	2301      	movs	r3, #1
 80092d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80092d8:	4b11      	ldr	r3, [pc, #68]	@ (8009320 <xTaskIncrementTick+0x16c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d007      	beq.n	80092f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80092e0:	2301      	movs	r3, #1
 80092e2:	617b      	str	r3, [r7, #20]
 80092e4:	e004      	b.n	80092f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80092e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009324 <xTaskIncrementTick+0x170>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3301      	adds	r3, #1
 80092ec:	4a0d      	ldr	r2, [pc, #52]	@ (8009324 <xTaskIncrementTick+0x170>)
 80092ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80092f0:	697b      	ldr	r3, [r7, #20]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	240007ac 	.word	0x240007ac
 8009300:	24000788 	.word	0x24000788
 8009304:	2400073c 	.word	0x2400073c
 8009308:	24000740 	.word	0x24000740
 800930c:	2400079c 	.word	0x2400079c
 8009310:	240007a4 	.word	0x240007a4
 8009314:	2400078c 	.word	0x2400078c
 8009318:	24000688 	.word	0x24000688
 800931c:	24000684 	.word	0x24000684
 8009320:	24000798 	.word	0x24000798
 8009324:	24000794 	.word	0x24000794

08009328 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800932e:	4b2a      	ldr	r3, [pc, #168]	@ (80093d8 <vTaskSwitchContext+0xb0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009336:	4b29      	ldr	r3, [pc, #164]	@ (80093dc <vTaskSwitchContext+0xb4>)
 8009338:	2201      	movs	r2, #1
 800933a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800933c:	e045      	b.n	80093ca <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800933e:	4b27      	ldr	r3, [pc, #156]	@ (80093dc <vTaskSwitchContext+0xb4>)
 8009340:	2200      	movs	r2, #0
 8009342:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009344:	4b26      	ldr	r3, [pc, #152]	@ (80093e0 <vTaskSwitchContext+0xb8>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	fab3 f383 	clz	r3, r3
 8009350:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009352:	7afb      	ldrb	r3, [r7, #11]
 8009354:	f1c3 031f 	rsb	r3, r3, #31
 8009358:	617b      	str	r3, [r7, #20]
 800935a:	4922      	ldr	r1, [pc, #136]	@ (80093e4 <vTaskSwitchContext+0xbc>)
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	440b      	add	r3, r1
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10b      	bne.n	8009386 <vTaskSwitchContext+0x5e>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	607b      	str	r3, [r7, #4]
}
 8009380:	bf00      	nop
 8009382:	bf00      	nop
 8009384:	e7fd      	b.n	8009382 <vTaskSwitchContext+0x5a>
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	4613      	mov	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4a14      	ldr	r2, [pc, #80]	@ (80093e4 <vTaskSwitchContext+0xbc>)
 8009392:	4413      	add	r3, r2
 8009394:	613b      	str	r3, [r7, #16]
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	605a      	str	r2, [r3, #4]
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	685a      	ldr	r2, [r3, #4]
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	3308      	adds	r3, #8
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d104      	bne.n	80093b6 <vTaskSwitchContext+0x8e>
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	605a      	str	r2, [r3, #4]
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	4a0a      	ldr	r2, [pc, #40]	@ (80093e8 <vTaskSwitchContext+0xc0>)
 80093be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093c0:	4b09      	ldr	r3, [pc, #36]	@ (80093e8 <vTaskSwitchContext+0xc0>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	334c      	adds	r3, #76	@ 0x4c
 80093c6:	4a09      	ldr	r2, [pc, #36]	@ (80093ec <vTaskSwitchContext+0xc4>)
 80093c8:	6013      	str	r3, [r2, #0]
}
 80093ca:	bf00      	nop
 80093cc:	371c      	adds	r7, #28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	240007ac 	.word	0x240007ac
 80093dc:	24000798 	.word	0x24000798
 80093e0:	2400078c 	.word	0x2400078c
 80093e4:	24000688 	.word	0x24000688
 80093e8:	24000684 	.word	0x24000684
 80093ec:	24000014 	.word	0x24000014

080093f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093f8:	f000 f852 	bl	80094a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093fc:	4b06      	ldr	r3, [pc, #24]	@ (8009418 <prvIdleTask+0x28>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d9f9      	bls.n	80093f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009404:	4b05      	ldr	r3, [pc, #20]	@ (800941c <prvIdleTask+0x2c>)
 8009406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009414:	e7f0      	b.n	80093f8 <prvIdleTask+0x8>
 8009416:	bf00      	nop
 8009418:	24000688 	.word	0x24000688
 800941c:	e000ed04 	.word	0xe000ed04

08009420 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009426:	2300      	movs	r3, #0
 8009428:	607b      	str	r3, [r7, #4]
 800942a:	e00c      	b.n	8009446 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	4613      	mov	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4a12      	ldr	r2, [pc, #72]	@ (8009480 <prvInitialiseTaskLists+0x60>)
 8009438:	4413      	add	r3, r2
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff fb03 	bl	8008a46 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3301      	adds	r3, #1
 8009444:	607b      	str	r3, [r7, #4]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b06      	cmp	r3, #6
 800944a:	d9ef      	bls.n	800942c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800944c:	480d      	ldr	r0, [pc, #52]	@ (8009484 <prvInitialiseTaskLists+0x64>)
 800944e:	f7ff fafa 	bl	8008a46 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009452:	480d      	ldr	r0, [pc, #52]	@ (8009488 <prvInitialiseTaskLists+0x68>)
 8009454:	f7ff faf7 	bl	8008a46 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009458:	480c      	ldr	r0, [pc, #48]	@ (800948c <prvInitialiseTaskLists+0x6c>)
 800945a:	f7ff faf4 	bl	8008a46 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800945e:	480c      	ldr	r0, [pc, #48]	@ (8009490 <prvInitialiseTaskLists+0x70>)
 8009460:	f7ff faf1 	bl	8008a46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009464:	480b      	ldr	r0, [pc, #44]	@ (8009494 <prvInitialiseTaskLists+0x74>)
 8009466:	f7ff faee 	bl	8008a46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800946a:	4b0b      	ldr	r3, [pc, #44]	@ (8009498 <prvInitialiseTaskLists+0x78>)
 800946c:	4a05      	ldr	r2, [pc, #20]	@ (8009484 <prvInitialiseTaskLists+0x64>)
 800946e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009470:	4b0a      	ldr	r3, [pc, #40]	@ (800949c <prvInitialiseTaskLists+0x7c>)
 8009472:	4a05      	ldr	r2, [pc, #20]	@ (8009488 <prvInitialiseTaskLists+0x68>)
 8009474:	601a      	str	r2, [r3, #0]
}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	24000688 	.word	0x24000688
 8009484:	24000714 	.word	0x24000714
 8009488:	24000728 	.word	0x24000728
 800948c:	24000744 	.word	0x24000744
 8009490:	24000758 	.word	0x24000758
 8009494:	24000770 	.word	0x24000770
 8009498:	2400073c 	.word	0x2400073c
 800949c:	24000740 	.word	0x24000740

080094a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094a6:	e019      	b.n	80094dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094a8:	f000 fa16 	bl	80098d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ac:	4b10      	ldr	r3, [pc, #64]	@ (80094f0 <prvCheckTasksWaitingTermination+0x50>)
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3304      	adds	r3, #4
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7ff fb4e 	bl	8008b5a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094be:	4b0d      	ldr	r3, [pc, #52]	@ (80094f4 <prvCheckTasksWaitingTermination+0x54>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3b01      	subs	r3, #1
 80094c4:	4a0b      	ldr	r2, [pc, #44]	@ (80094f4 <prvCheckTasksWaitingTermination+0x54>)
 80094c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094c8:	4b0b      	ldr	r3, [pc, #44]	@ (80094f8 <prvCheckTasksWaitingTermination+0x58>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3b01      	subs	r3, #1
 80094ce:	4a0a      	ldr	r2, [pc, #40]	@ (80094f8 <prvCheckTasksWaitingTermination+0x58>)
 80094d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094d2:	f000 fa33 	bl	800993c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f810 	bl	80094fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094dc:	4b06      	ldr	r3, [pc, #24]	@ (80094f8 <prvCheckTasksWaitingTermination+0x58>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e1      	bne.n	80094a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094e4:	bf00      	nop
 80094e6:	bf00      	nop
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	24000758 	.word	0x24000758
 80094f4:	24000784 	.word	0x24000784
 80094f8:	2400076c 	.word	0x2400076c

080094fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	334c      	adds	r3, #76	@ 0x4c
 8009508:	4618      	mov	r0, r3
 800950a:	f000 fcbb 	bl	8009e84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009514:	2b00      	cmp	r3, #0
 8009516:	d108      	bne.n	800952a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800951c:	4618      	mov	r0, r3
 800951e:	f000 fb89 	bl	8009c34 <vPortFree>
				vPortFree( pxTCB );
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fb86 	bl	8009c34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009528:	e019      	b.n	800955e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009530:	2b01      	cmp	r3, #1
 8009532:	d103      	bne.n	800953c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fb7d 	bl	8009c34 <vPortFree>
	}
 800953a:	e010      	b.n	800955e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009542:	2b02      	cmp	r3, #2
 8009544:	d00b      	beq.n	800955e <prvDeleteTCB+0x62>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	60fb      	str	r3, [r7, #12]
}
 8009558:	bf00      	nop
 800955a:	bf00      	nop
 800955c:	e7fd      	b.n	800955a <prvDeleteTCB+0x5e>
	}
 800955e:	bf00      	nop
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
	...

08009568 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800956e:	4b0c      	ldr	r3, [pc, #48]	@ (80095a0 <prvResetNextTaskUnblockTime+0x38>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d104      	bne.n	8009582 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009578:	4b0a      	ldr	r3, [pc, #40]	@ (80095a4 <prvResetNextTaskUnblockTime+0x3c>)
 800957a:	f04f 32ff 	mov.w	r2, #4294967295
 800957e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009580:	e008      	b.n	8009594 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009582:	4b07      	ldr	r3, [pc, #28]	@ (80095a0 <prvResetNextTaskUnblockTime+0x38>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	4a04      	ldr	r2, [pc, #16]	@ (80095a4 <prvResetNextTaskUnblockTime+0x3c>)
 8009592:	6013      	str	r3, [r2, #0]
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	2400073c 	.word	0x2400073c
 80095a4:	240007a4 	.word	0x240007a4

080095a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095b2:	4b29      	ldr	r3, [pc, #164]	@ (8009658 <prvAddCurrentTaskToDelayedList+0xb0>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095b8:	4b28      	ldr	r3, [pc, #160]	@ (800965c <prvAddCurrentTaskToDelayedList+0xb4>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3304      	adds	r3, #4
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff facb 	bl	8008b5a <uxListRemove>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10b      	bne.n	80095e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80095ca:	4b24      	ldr	r3, [pc, #144]	@ (800965c <prvAddCurrentTaskToDelayedList+0xb4>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d0:	2201      	movs	r2, #1
 80095d2:	fa02 f303 	lsl.w	r3, r2, r3
 80095d6:	43da      	mvns	r2, r3
 80095d8:	4b21      	ldr	r3, [pc, #132]	@ (8009660 <prvAddCurrentTaskToDelayedList+0xb8>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4013      	ands	r3, r2
 80095de:	4a20      	ldr	r2, [pc, #128]	@ (8009660 <prvAddCurrentTaskToDelayedList+0xb8>)
 80095e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e8:	d10a      	bne.n	8009600 <prvAddCurrentTaskToDelayedList+0x58>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d007      	beq.n	8009600 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095f0:	4b1a      	ldr	r3, [pc, #104]	@ (800965c <prvAddCurrentTaskToDelayedList+0xb4>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3304      	adds	r3, #4
 80095f6:	4619      	mov	r1, r3
 80095f8:	481a      	ldr	r0, [pc, #104]	@ (8009664 <prvAddCurrentTaskToDelayedList+0xbc>)
 80095fa:	f7ff fa51 	bl	8008aa0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095fe:	e026      	b.n	800964e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4413      	add	r3, r2
 8009606:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009608:	4b14      	ldr	r3, [pc, #80]	@ (800965c <prvAddCurrentTaskToDelayedList+0xb4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	429a      	cmp	r2, r3
 8009616:	d209      	bcs.n	800962c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009618:	4b13      	ldr	r3, [pc, #76]	@ (8009668 <prvAddCurrentTaskToDelayedList+0xc0>)
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	4b0f      	ldr	r3, [pc, #60]	@ (800965c <prvAddCurrentTaskToDelayedList+0xb4>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3304      	adds	r3, #4
 8009622:	4619      	mov	r1, r3
 8009624:	4610      	mov	r0, r2
 8009626:	f7ff fa5f 	bl	8008ae8 <vListInsert>
}
 800962a:	e010      	b.n	800964e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800962c:	4b0f      	ldr	r3, [pc, #60]	@ (800966c <prvAddCurrentTaskToDelayedList+0xc4>)
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	4b0a      	ldr	r3, [pc, #40]	@ (800965c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3304      	adds	r3, #4
 8009636:	4619      	mov	r1, r3
 8009638:	4610      	mov	r0, r2
 800963a:	f7ff fa55 	bl	8008ae8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800963e:	4b0c      	ldr	r3, [pc, #48]	@ (8009670 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	429a      	cmp	r2, r3
 8009646:	d202      	bcs.n	800964e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009648:	4a09      	ldr	r2, [pc, #36]	@ (8009670 <prvAddCurrentTaskToDelayedList+0xc8>)
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	6013      	str	r3, [r2, #0]
}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	24000788 	.word	0x24000788
 800965c:	24000684 	.word	0x24000684
 8009660:	2400078c 	.word	0x2400078c
 8009664:	24000770 	.word	0x24000770
 8009668:	24000740 	.word	0x24000740
 800966c:	2400073c 	.word	0x2400073c
 8009670:	240007a4 	.word	0x240007a4

08009674 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3b04      	subs	r3, #4
 8009684:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800968c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3b04      	subs	r3, #4
 8009692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	f023 0201 	bic.w	r2, r3, #1
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3b04      	subs	r3, #4
 80096a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096a4:	4a0c      	ldr	r2, [pc, #48]	@ (80096d8 <pxPortInitialiseStack+0x64>)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3b14      	subs	r3, #20
 80096ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3b04      	subs	r3, #4
 80096ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f06f 0202 	mvn.w	r2, #2
 80096c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	3b20      	subs	r3, #32
 80096c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096ca:	68fb      	ldr	r3, [r7, #12]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	080096dd 	.word	0x080096dd

080096dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096e6:	4b13      	ldr	r3, [pc, #76]	@ (8009734 <prvTaskExitError+0x58>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ee:	d00b      	beq.n	8009708 <prvTaskExitError+0x2c>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	60fb      	str	r3, [r7, #12]
}
 8009702:	bf00      	nop
 8009704:	bf00      	nop
 8009706:	e7fd      	b.n	8009704 <prvTaskExitError+0x28>
	__asm volatile
 8009708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	60bb      	str	r3, [r7, #8]
}
 800971a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800971c:	bf00      	nop
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d0fc      	beq.n	800971e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	24000010 	.word	0x24000010
	...

08009740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009740:	4b07      	ldr	r3, [pc, #28]	@ (8009760 <pxCurrentTCBConst2>)
 8009742:	6819      	ldr	r1, [r3, #0]
 8009744:	6808      	ldr	r0, [r1, #0]
 8009746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974a:	f380 8809 	msr	PSP, r0
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f04f 0000 	mov.w	r0, #0
 8009756:	f380 8811 	msr	BASEPRI, r0
 800975a:	4770      	bx	lr
 800975c:	f3af 8000 	nop.w

08009760 <pxCurrentTCBConst2>:
 8009760:	24000684 	.word	0x24000684
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop

08009768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009768:	4808      	ldr	r0, [pc, #32]	@ (800978c <prvPortStartFirstTask+0x24>)
 800976a:	6800      	ldr	r0, [r0, #0]
 800976c:	6800      	ldr	r0, [r0, #0]
 800976e:	f380 8808 	msr	MSP, r0
 8009772:	f04f 0000 	mov.w	r0, #0
 8009776:	f380 8814 	msr	CONTROL, r0
 800977a:	b662      	cpsie	i
 800977c:	b661      	cpsie	f
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	df00      	svc	0
 8009788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800978a:	bf00      	nop
 800978c:	e000ed08 	.word	0xe000ed08

08009790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009796:	4b47      	ldr	r3, [pc, #284]	@ (80098b4 <xPortStartScheduler+0x124>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a47      	ldr	r2, [pc, #284]	@ (80098b8 <xPortStartScheduler+0x128>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d10b      	bne.n	80097b8 <xPortStartScheduler+0x28>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	60fb      	str	r3, [r7, #12]
}
 80097b2:	bf00      	nop
 80097b4:	bf00      	nop
 80097b6:	e7fd      	b.n	80097b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80097b8:	4b3e      	ldr	r3, [pc, #248]	@ (80098b4 <xPortStartScheduler+0x124>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a3f      	ldr	r2, [pc, #252]	@ (80098bc <xPortStartScheduler+0x12c>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d10b      	bne.n	80097da <xPortStartScheduler+0x4a>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	613b      	str	r3, [r7, #16]
}
 80097d4:	bf00      	nop
 80097d6:	bf00      	nop
 80097d8:	e7fd      	b.n	80097d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097da:	4b39      	ldr	r3, [pc, #228]	@ (80098c0 <xPortStartScheduler+0x130>)
 80097dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	22ff      	movs	r2, #255	@ 0xff
 80097ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097f4:	78fb      	ldrb	r3, [r7, #3]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	4b31      	ldr	r3, [pc, #196]	@ (80098c4 <xPortStartScheduler+0x134>)
 8009800:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009802:	4b31      	ldr	r3, [pc, #196]	@ (80098c8 <xPortStartScheduler+0x138>)
 8009804:	2207      	movs	r2, #7
 8009806:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009808:	e009      	b.n	800981e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800980a:	4b2f      	ldr	r3, [pc, #188]	@ (80098c8 <xPortStartScheduler+0x138>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	3b01      	subs	r3, #1
 8009810:	4a2d      	ldr	r2, [pc, #180]	@ (80098c8 <xPortStartScheduler+0x138>)
 8009812:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	b2db      	uxtb	r3, r3
 8009818:	005b      	lsls	r3, r3, #1
 800981a:	b2db      	uxtb	r3, r3
 800981c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800981e:	78fb      	ldrb	r3, [r7, #3]
 8009820:	b2db      	uxtb	r3, r3
 8009822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009826:	2b80      	cmp	r3, #128	@ 0x80
 8009828:	d0ef      	beq.n	800980a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800982a:	4b27      	ldr	r3, [pc, #156]	@ (80098c8 <xPortStartScheduler+0x138>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f1c3 0307 	rsb	r3, r3, #7
 8009832:	2b04      	cmp	r3, #4
 8009834:	d00b      	beq.n	800984e <xPortStartScheduler+0xbe>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	60bb      	str	r3, [r7, #8]
}
 8009848:	bf00      	nop
 800984a:	bf00      	nop
 800984c:	e7fd      	b.n	800984a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800984e:	4b1e      	ldr	r3, [pc, #120]	@ (80098c8 <xPortStartScheduler+0x138>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	021b      	lsls	r3, r3, #8
 8009854:	4a1c      	ldr	r2, [pc, #112]	@ (80098c8 <xPortStartScheduler+0x138>)
 8009856:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009858:	4b1b      	ldr	r3, [pc, #108]	@ (80098c8 <xPortStartScheduler+0x138>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009860:	4a19      	ldr	r2, [pc, #100]	@ (80098c8 <xPortStartScheduler+0x138>)
 8009862:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	b2da      	uxtb	r2, r3
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800986c:	4b17      	ldr	r3, [pc, #92]	@ (80098cc <xPortStartScheduler+0x13c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a16      	ldr	r2, [pc, #88]	@ (80098cc <xPortStartScheduler+0x13c>)
 8009872:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009878:	4b14      	ldr	r3, [pc, #80]	@ (80098cc <xPortStartScheduler+0x13c>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a13      	ldr	r2, [pc, #76]	@ (80098cc <xPortStartScheduler+0x13c>)
 800987e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009884:	f000 f8da 	bl	8009a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009888:	4b11      	ldr	r3, [pc, #68]	@ (80098d0 <xPortStartScheduler+0x140>)
 800988a:	2200      	movs	r2, #0
 800988c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800988e:	f000 f8f9 	bl	8009a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009892:	4b10      	ldr	r3, [pc, #64]	@ (80098d4 <xPortStartScheduler+0x144>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a0f      	ldr	r2, [pc, #60]	@ (80098d4 <xPortStartScheduler+0x144>)
 8009898:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800989c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800989e:	f7ff ff63 	bl	8009768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098a2:	f7ff fd41 	bl	8009328 <vTaskSwitchContext>
	prvTaskExitError();
 80098a6:	f7ff ff19 	bl	80096dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3718      	adds	r7, #24
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	e000ed00 	.word	0xe000ed00
 80098b8:	410fc271 	.word	0x410fc271
 80098bc:	410fc270 	.word	0x410fc270
 80098c0:	e000e400 	.word	0xe000e400
 80098c4:	240007b0 	.word	0x240007b0
 80098c8:	240007b4 	.word	0x240007b4
 80098cc:	e000ed20 	.word	0xe000ed20
 80098d0:	24000010 	.word	0x24000010
 80098d4:	e000ef34 	.word	0xe000ef34

080098d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	607b      	str	r3, [r7, #4]
}
 80098f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098f2:	4b10      	ldr	r3, [pc, #64]	@ (8009934 <vPortEnterCritical+0x5c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3301      	adds	r3, #1
 80098f8:	4a0e      	ldr	r2, [pc, #56]	@ (8009934 <vPortEnterCritical+0x5c>)
 80098fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009934 <vPortEnterCritical+0x5c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d110      	bne.n	8009926 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009904:	4b0c      	ldr	r3, [pc, #48]	@ (8009938 <vPortEnterCritical+0x60>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00b      	beq.n	8009926 <vPortEnterCritical+0x4e>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	603b      	str	r3, [r7, #0]
}
 8009920:	bf00      	nop
 8009922:	bf00      	nop
 8009924:	e7fd      	b.n	8009922 <vPortEnterCritical+0x4a>
	}
}
 8009926:	bf00      	nop
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	24000010 	.word	0x24000010
 8009938:	e000ed04 	.word	0xe000ed04

0800993c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009942:	4b12      	ldr	r3, [pc, #72]	@ (800998c <vPortExitCritical+0x50>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10b      	bne.n	8009962 <vPortExitCritical+0x26>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	607b      	str	r3, [r7, #4]
}
 800995c:	bf00      	nop
 800995e:	bf00      	nop
 8009960:	e7fd      	b.n	800995e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009962:	4b0a      	ldr	r3, [pc, #40]	@ (800998c <vPortExitCritical+0x50>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	3b01      	subs	r3, #1
 8009968:	4a08      	ldr	r2, [pc, #32]	@ (800998c <vPortExitCritical+0x50>)
 800996a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800996c:	4b07      	ldr	r3, [pc, #28]	@ (800998c <vPortExitCritical+0x50>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d105      	bne.n	8009980 <vPortExitCritical+0x44>
 8009974:	2300      	movs	r3, #0
 8009976:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800997e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	24000010 	.word	0x24000010

08009990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009990:	f3ef 8009 	mrs	r0, PSP
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	4b15      	ldr	r3, [pc, #84]	@ (80099f0 <pxCurrentTCBConst>)
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	f01e 0f10 	tst.w	lr, #16
 80099a0:	bf08      	it	eq
 80099a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099aa:	6010      	str	r0, [r2, #0]
 80099ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80099b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80099b4:	f380 8811 	msr	BASEPRI, r0
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f7ff fcb2 	bl	8009328 <vTaskSwitchContext>
 80099c4:	f04f 0000 	mov.w	r0, #0
 80099c8:	f380 8811 	msr	BASEPRI, r0
 80099cc:	bc09      	pop	{r0, r3}
 80099ce:	6819      	ldr	r1, [r3, #0]
 80099d0:	6808      	ldr	r0, [r1, #0]
 80099d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d6:	f01e 0f10 	tst.w	lr, #16
 80099da:	bf08      	it	eq
 80099dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099e0:	f380 8809 	msr	PSP, r0
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	f3af 8000 	nop.w

080099f0 <pxCurrentTCBConst>:
 80099f0:	24000684 	.word	0x24000684
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099f4:	bf00      	nop
 80099f6:	bf00      	nop

080099f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	607b      	str	r3, [r7, #4]
}
 8009a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a12:	f7ff fbcf 	bl	80091b4 <xTaskIncrementTick>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d003      	beq.n	8009a24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a1c:	4b06      	ldr	r3, [pc, #24]	@ (8009a38 <SysTick_Handler+0x40>)
 8009a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	2300      	movs	r3, #0
 8009a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	f383 8811 	msr	BASEPRI, r3
}
 8009a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a30:	bf00      	nop
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	e000ed04 	.word	0xe000ed04

08009a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a40:	4b0b      	ldr	r3, [pc, #44]	@ (8009a70 <vPortSetupTimerInterrupt+0x34>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a46:	4b0b      	ldr	r3, [pc, #44]	@ (8009a74 <vPortSetupTimerInterrupt+0x38>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a78 <vPortSetupTimerInterrupt+0x3c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a0a      	ldr	r2, [pc, #40]	@ (8009a7c <vPortSetupTimerInterrupt+0x40>)
 8009a52:	fba2 2303 	umull	r2, r3, r2, r3
 8009a56:	099b      	lsrs	r3, r3, #6
 8009a58:	4a09      	ldr	r2, [pc, #36]	@ (8009a80 <vPortSetupTimerInterrupt+0x44>)
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a5e:	4b04      	ldr	r3, [pc, #16]	@ (8009a70 <vPortSetupTimerInterrupt+0x34>)
 8009a60:	2207      	movs	r2, #7
 8009a62:	601a      	str	r2, [r3, #0]
}
 8009a64:	bf00      	nop
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	e000e010 	.word	0xe000e010
 8009a74:	e000e018 	.word	0xe000e018
 8009a78:	24000000 	.word	0x24000000
 8009a7c:	10624dd3 	.word	0x10624dd3
 8009a80:	e000e014 	.word	0xe000e014

08009a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009a94 <vPortEnableVFP+0x10>
 8009a88:	6801      	ldr	r1, [r0, #0]
 8009a8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009a8e:	6001      	str	r1, [r0, #0]
 8009a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a92:	bf00      	nop
 8009a94:	e000ed88 	.word	0xe000ed88

08009a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08a      	sub	sp, #40	@ 0x28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009aa4:	f7ff fada 	bl	800905c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009aa8:	4b5c      	ldr	r3, [pc, #368]	@ (8009c1c <pvPortMalloc+0x184>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d101      	bne.n	8009ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ab0:	f000 f924 	bl	8009cfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8009c20 <pvPortMalloc+0x188>)
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4013      	ands	r3, r2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f040 8095 	bne.w	8009bec <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d01e      	beq.n	8009b06 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009ac8:	2208      	movs	r2, #8
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4413      	add	r3, r2
 8009ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f003 0307 	and.w	r3, r3, #7
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d015      	beq.n	8009b06 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f023 0307 	bic.w	r3, r3, #7
 8009ae0:	3308      	adds	r3, #8
 8009ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f003 0307 	and.w	r3, r3, #7
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00b      	beq.n	8009b06 <pvPortMalloc+0x6e>
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	617b      	str	r3, [r7, #20]
}
 8009b00:	bf00      	nop
 8009b02:	bf00      	nop
 8009b04:	e7fd      	b.n	8009b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d06f      	beq.n	8009bec <pvPortMalloc+0x154>
 8009b0c:	4b45      	ldr	r3, [pc, #276]	@ (8009c24 <pvPortMalloc+0x18c>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d86a      	bhi.n	8009bec <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b16:	4b44      	ldr	r3, [pc, #272]	@ (8009c28 <pvPortMalloc+0x190>)
 8009b18:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b1a:	4b43      	ldr	r3, [pc, #268]	@ (8009c28 <pvPortMalloc+0x190>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b20:	e004      	b.n	8009b2c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b24:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d903      	bls.n	8009b3e <pvPortMalloc+0xa6>
 8009b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1f1      	bne.n	8009b22 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b3e:	4b37      	ldr	r3, [pc, #220]	@ (8009c1c <pvPortMalloc+0x184>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d051      	beq.n	8009bec <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2208      	movs	r2, #8
 8009b4e:	4413      	add	r3, r2
 8009b50:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	1ad2      	subs	r2, r2, r3
 8009b62:	2308      	movs	r3, #8
 8009b64:	005b      	lsls	r3, r3, #1
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d920      	bls.n	8009bac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4413      	add	r3, r2
 8009b70:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	f003 0307 	and.w	r3, r3, #7
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00b      	beq.n	8009b94 <pvPortMalloc+0xfc>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	613b      	str	r3, [r7, #16]
}
 8009b8e:	bf00      	nop
 8009b90:	bf00      	nop
 8009b92:	e7fd      	b.n	8009b90 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	1ad2      	subs	r2, r2, r3
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ba6:	69b8      	ldr	r0, [r7, #24]
 8009ba8:	f000 f90a 	bl	8009dc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bac:	4b1d      	ldr	r3, [pc, #116]	@ (8009c24 <pvPortMalloc+0x18c>)
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8009c24 <pvPortMalloc+0x18c>)
 8009bb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bba:	4b1a      	ldr	r3, [pc, #104]	@ (8009c24 <pvPortMalloc+0x18c>)
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8009c2c <pvPortMalloc+0x194>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d203      	bcs.n	8009bce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bc6:	4b17      	ldr	r3, [pc, #92]	@ (8009c24 <pvPortMalloc+0x18c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a18      	ldr	r2, [pc, #96]	@ (8009c2c <pvPortMalloc+0x194>)
 8009bcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	4b13      	ldr	r3, [pc, #76]	@ (8009c20 <pvPortMalloc+0x188>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	431a      	orrs	r2, r3
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bde:	2200      	movs	r2, #0
 8009be0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009be2:	4b13      	ldr	r3, [pc, #76]	@ (8009c30 <pvPortMalloc+0x198>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	3301      	adds	r3, #1
 8009be8:	4a11      	ldr	r2, [pc, #68]	@ (8009c30 <pvPortMalloc+0x198>)
 8009bea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bec:	f7ff fa44 	bl	8009078 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00b      	beq.n	8009c12 <pvPortMalloc+0x17a>
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	60fb      	str	r3, [r7, #12]
}
 8009c0c:	bf00      	nop
 8009c0e:	bf00      	nop
 8009c10:	e7fd      	b.n	8009c0e <pvPortMalloc+0x176>
	return pvReturn;
 8009c12:	69fb      	ldr	r3, [r7, #28]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3728      	adds	r7, #40	@ 0x28
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	240043c0 	.word	0x240043c0
 8009c20:	240043d4 	.word	0x240043d4
 8009c24:	240043c4 	.word	0x240043c4
 8009c28:	240043b8 	.word	0x240043b8
 8009c2c:	240043c8 	.word	0x240043c8
 8009c30:	240043cc 	.word	0x240043cc

08009c34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d04f      	beq.n	8009ce6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c46:	2308      	movs	r3, #8
 8009c48:	425b      	negs	r3, r3
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	4b25      	ldr	r3, [pc, #148]	@ (8009cf0 <vPortFree+0xbc>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10b      	bne.n	8009c7a <vPortFree+0x46>
	__asm volatile
 8009c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	60fb      	str	r3, [r7, #12]
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop
 8009c78:	e7fd      	b.n	8009c76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00b      	beq.n	8009c9a <vPortFree+0x66>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	60bb      	str	r3, [r7, #8]
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop
 8009c98:	e7fd      	b.n	8009c96 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	4b14      	ldr	r3, [pc, #80]	@ (8009cf0 <vPortFree+0xbc>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4013      	ands	r3, r2
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d01e      	beq.n	8009ce6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d11a      	bne.n	8009ce6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8009cf0 <vPortFree+0xbc>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	43db      	mvns	r3, r3
 8009cba:	401a      	ands	r2, r3
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cc0:	f7ff f9cc 	bl	800905c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf4 <vPortFree+0xc0>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4413      	add	r3, r2
 8009cce:	4a09      	ldr	r2, [pc, #36]	@ (8009cf4 <vPortFree+0xc0>)
 8009cd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cd2:	6938      	ldr	r0, [r7, #16]
 8009cd4:	f000 f874 	bl	8009dc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cd8:	4b07      	ldr	r3, [pc, #28]	@ (8009cf8 <vPortFree+0xc4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	4a06      	ldr	r2, [pc, #24]	@ (8009cf8 <vPortFree+0xc4>)
 8009ce0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ce2:	f7ff f9c9 	bl	8009078 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ce6:	bf00      	nop
 8009ce8:	3718      	adds	r7, #24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	240043d4 	.word	0x240043d4
 8009cf4:	240043c4 	.word	0x240043c4
 8009cf8:	240043d0 	.word	0x240043d0

08009cfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d02:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009d06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d08:	4b27      	ldr	r3, [pc, #156]	@ (8009da8 <prvHeapInit+0xac>)
 8009d0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f003 0307 	and.w	r3, r3, #7
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00c      	beq.n	8009d30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	3307      	adds	r3, #7
 8009d1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f023 0307 	bic.w	r3, r3, #7
 8009d22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8009da8 <prvHeapInit+0xac>)
 8009d2c:	4413      	add	r3, r2
 8009d2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d34:	4a1d      	ldr	r2, [pc, #116]	@ (8009dac <prvHeapInit+0xb0>)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8009dac <prvHeapInit+0xb0>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	4413      	add	r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d48:	2208      	movs	r2, #8
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	1a9b      	subs	r3, r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f023 0307 	bic.w	r3, r3, #7
 8009d56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4a15      	ldr	r2, [pc, #84]	@ (8009db0 <prvHeapInit+0xb4>)
 8009d5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d5e:	4b14      	ldr	r3, [pc, #80]	@ (8009db0 <prvHeapInit+0xb4>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d66:	4b12      	ldr	r3, [pc, #72]	@ (8009db0 <prvHeapInit+0xb4>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	1ad2      	subs	r2, r2, r3
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8009db0 <prvHeapInit+0xb4>)
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	4a0a      	ldr	r2, [pc, #40]	@ (8009db4 <prvHeapInit+0xb8>)
 8009d8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	4a09      	ldr	r2, [pc, #36]	@ (8009db8 <prvHeapInit+0xbc>)
 8009d92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d94:	4b09      	ldr	r3, [pc, #36]	@ (8009dbc <prvHeapInit+0xc0>)
 8009d96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009d9a:	601a      	str	r2, [r3, #0]
}
 8009d9c:	bf00      	nop
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr
 8009da8:	240007b8 	.word	0x240007b8
 8009dac:	240043b8 	.word	0x240043b8
 8009db0:	240043c0 	.word	0x240043c0
 8009db4:	240043c8 	.word	0x240043c8
 8009db8:	240043c4 	.word	0x240043c4
 8009dbc:	240043d4 	.word	0x240043d4

08009dc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dc8:	4b28      	ldr	r3, [pc, #160]	@ (8009e6c <prvInsertBlockIntoFreeList+0xac>)
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	e002      	b.n	8009dd4 <prvInsertBlockIntoFreeList+0x14>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d8f7      	bhi.n	8009dce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	4413      	add	r3, r2
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d108      	bne.n	8009e02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	441a      	add	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	441a      	add	r2, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d118      	bne.n	8009e48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	4b15      	ldr	r3, [pc, #84]	@ (8009e70 <prvInsertBlockIntoFreeList+0xb0>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d00d      	beq.n	8009e3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685a      	ldr	r2, [r3, #4]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	441a      	add	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	e008      	b.n	8009e50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8009e70 <prvInsertBlockIntoFreeList+0xb0>)
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	e003      	b.n	8009e50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d002      	beq.n	8009e5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e5e:	bf00      	nop
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	240043b8 	.word	0x240043b8
 8009e70:	240043c0 	.word	0x240043c0

08009e74 <memset>:
 8009e74:	4402      	add	r2, r0
 8009e76:	4603      	mov	r3, r0
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d100      	bne.n	8009e7e <memset+0xa>
 8009e7c:	4770      	bx	lr
 8009e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e82:	e7f9      	b.n	8009e78 <memset+0x4>

08009e84 <_reclaim_reent>:
 8009e84:	4b2d      	ldr	r3, [pc, #180]	@ (8009f3c <_reclaim_reent+0xb8>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4283      	cmp	r3, r0
 8009e8a:	b570      	push	{r4, r5, r6, lr}
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	d053      	beq.n	8009f38 <_reclaim_reent+0xb4>
 8009e90:	69c3      	ldr	r3, [r0, #28]
 8009e92:	b31b      	cbz	r3, 8009edc <_reclaim_reent+0x58>
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	b163      	cbz	r3, 8009eb2 <_reclaim_reent+0x2e>
 8009e98:	2500      	movs	r5, #0
 8009e9a:	69e3      	ldr	r3, [r4, #28]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	5959      	ldr	r1, [r3, r5]
 8009ea0:	b9b1      	cbnz	r1, 8009ed0 <_reclaim_reent+0x4c>
 8009ea2:	3504      	adds	r5, #4
 8009ea4:	2d80      	cmp	r5, #128	@ 0x80
 8009ea6:	d1f8      	bne.n	8009e9a <_reclaim_reent+0x16>
 8009ea8:	69e3      	ldr	r3, [r4, #28]
 8009eaa:	4620      	mov	r0, r4
 8009eac:	68d9      	ldr	r1, [r3, #12]
 8009eae:	f000 f86d 	bl	8009f8c <_free_r>
 8009eb2:	69e3      	ldr	r3, [r4, #28]
 8009eb4:	6819      	ldr	r1, [r3, #0]
 8009eb6:	b111      	cbz	r1, 8009ebe <_reclaim_reent+0x3a>
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f000 f867 	bl	8009f8c <_free_r>
 8009ebe:	69e3      	ldr	r3, [r4, #28]
 8009ec0:	689d      	ldr	r5, [r3, #8]
 8009ec2:	b15d      	cbz	r5, 8009edc <_reclaim_reent+0x58>
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	682d      	ldr	r5, [r5, #0]
 8009eca:	f000 f85f 	bl	8009f8c <_free_r>
 8009ece:	e7f8      	b.n	8009ec2 <_reclaim_reent+0x3e>
 8009ed0:	680e      	ldr	r6, [r1, #0]
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f000 f85a 	bl	8009f8c <_free_r>
 8009ed8:	4631      	mov	r1, r6
 8009eda:	e7e1      	b.n	8009ea0 <_reclaim_reent+0x1c>
 8009edc:	6961      	ldr	r1, [r4, #20]
 8009ede:	b111      	cbz	r1, 8009ee6 <_reclaim_reent+0x62>
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f000 f853 	bl	8009f8c <_free_r>
 8009ee6:	69e1      	ldr	r1, [r4, #28]
 8009ee8:	b111      	cbz	r1, 8009ef0 <_reclaim_reent+0x6c>
 8009eea:	4620      	mov	r0, r4
 8009eec:	f000 f84e 	bl	8009f8c <_free_r>
 8009ef0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009ef2:	b111      	cbz	r1, 8009efa <_reclaim_reent+0x76>
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 f849 	bl	8009f8c <_free_r>
 8009efa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009efc:	b111      	cbz	r1, 8009f04 <_reclaim_reent+0x80>
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 f844 	bl	8009f8c <_free_r>
 8009f04:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009f06:	b111      	cbz	r1, 8009f0e <_reclaim_reent+0x8a>
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f000 f83f 	bl	8009f8c <_free_r>
 8009f0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009f10:	b111      	cbz	r1, 8009f18 <_reclaim_reent+0x94>
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 f83a 	bl	8009f8c <_free_r>
 8009f18:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009f1a:	b111      	cbz	r1, 8009f22 <_reclaim_reent+0x9e>
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f000 f835 	bl	8009f8c <_free_r>
 8009f22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009f24:	b111      	cbz	r1, 8009f2c <_reclaim_reent+0xa8>
 8009f26:	4620      	mov	r0, r4
 8009f28:	f000 f830 	bl	8009f8c <_free_r>
 8009f2c:	6a23      	ldr	r3, [r4, #32]
 8009f2e:	b11b      	cbz	r3, 8009f38 <_reclaim_reent+0xb4>
 8009f30:	4620      	mov	r0, r4
 8009f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f36:	4718      	bx	r3
 8009f38:	bd70      	pop	{r4, r5, r6, pc}
 8009f3a:	bf00      	nop
 8009f3c:	24000014 	.word	0x24000014

08009f40 <__libc_init_array>:
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	4d0d      	ldr	r5, [pc, #52]	@ (8009f78 <__libc_init_array+0x38>)
 8009f44:	4c0d      	ldr	r4, [pc, #52]	@ (8009f7c <__libc_init_array+0x3c>)
 8009f46:	1b64      	subs	r4, r4, r5
 8009f48:	10a4      	asrs	r4, r4, #2
 8009f4a:	2600      	movs	r6, #0
 8009f4c:	42a6      	cmp	r6, r4
 8009f4e:	d109      	bne.n	8009f64 <__libc_init_array+0x24>
 8009f50:	4d0b      	ldr	r5, [pc, #44]	@ (8009f80 <__libc_init_array+0x40>)
 8009f52:	4c0c      	ldr	r4, [pc, #48]	@ (8009f84 <__libc_init_array+0x44>)
 8009f54:	f000 f870 	bl	800a038 <_init>
 8009f58:	1b64      	subs	r4, r4, r5
 8009f5a:	10a4      	asrs	r4, r4, #2
 8009f5c:	2600      	movs	r6, #0
 8009f5e:	42a6      	cmp	r6, r4
 8009f60:	d105      	bne.n	8009f6e <__libc_init_array+0x2e>
 8009f62:	bd70      	pop	{r4, r5, r6, pc}
 8009f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f68:	4798      	blx	r3
 8009f6a:	3601      	adds	r6, #1
 8009f6c:	e7ee      	b.n	8009f4c <__libc_init_array+0xc>
 8009f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f72:	4798      	blx	r3
 8009f74:	3601      	adds	r6, #1
 8009f76:	e7f2      	b.n	8009f5e <__libc_init_array+0x1e>
 8009f78:	0800a0f0 	.word	0x0800a0f0
 8009f7c:	0800a0f0 	.word	0x0800a0f0
 8009f80:	0800a0f0 	.word	0x0800a0f0
 8009f84:	0800a0f4 	.word	0x0800a0f4

08009f88 <__retarget_lock_acquire_recursive>:
 8009f88:	4770      	bx	lr

08009f8a <__retarget_lock_release_recursive>:
 8009f8a:	4770      	bx	lr

08009f8c <_free_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4605      	mov	r5, r0
 8009f90:	2900      	cmp	r1, #0
 8009f92:	d041      	beq.n	800a018 <_free_r+0x8c>
 8009f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f98:	1f0c      	subs	r4, r1, #4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	bfb8      	it	lt
 8009f9e:	18e4      	addlt	r4, r4, r3
 8009fa0:	f000 f83e 	bl	800a020 <__malloc_lock>
 8009fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800a01c <_free_r+0x90>)
 8009fa6:	6813      	ldr	r3, [r2, #0]
 8009fa8:	b933      	cbnz	r3, 8009fb8 <_free_r+0x2c>
 8009faa:	6063      	str	r3, [r4, #4]
 8009fac:	6014      	str	r4, [r2, #0]
 8009fae:	4628      	mov	r0, r5
 8009fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fb4:	f000 b83a 	b.w	800a02c <__malloc_unlock>
 8009fb8:	42a3      	cmp	r3, r4
 8009fba:	d908      	bls.n	8009fce <_free_r+0x42>
 8009fbc:	6820      	ldr	r0, [r4, #0]
 8009fbe:	1821      	adds	r1, r4, r0
 8009fc0:	428b      	cmp	r3, r1
 8009fc2:	bf01      	itttt	eq
 8009fc4:	6819      	ldreq	r1, [r3, #0]
 8009fc6:	685b      	ldreq	r3, [r3, #4]
 8009fc8:	1809      	addeq	r1, r1, r0
 8009fca:	6021      	streq	r1, [r4, #0]
 8009fcc:	e7ed      	b.n	8009faa <_free_r+0x1e>
 8009fce:	461a      	mov	r2, r3
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	b10b      	cbz	r3, 8009fd8 <_free_r+0x4c>
 8009fd4:	42a3      	cmp	r3, r4
 8009fd6:	d9fa      	bls.n	8009fce <_free_r+0x42>
 8009fd8:	6811      	ldr	r1, [r2, #0]
 8009fda:	1850      	adds	r0, r2, r1
 8009fdc:	42a0      	cmp	r0, r4
 8009fde:	d10b      	bne.n	8009ff8 <_free_r+0x6c>
 8009fe0:	6820      	ldr	r0, [r4, #0]
 8009fe2:	4401      	add	r1, r0
 8009fe4:	1850      	adds	r0, r2, r1
 8009fe6:	4283      	cmp	r3, r0
 8009fe8:	6011      	str	r1, [r2, #0]
 8009fea:	d1e0      	bne.n	8009fae <_free_r+0x22>
 8009fec:	6818      	ldr	r0, [r3, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	6053      	str	r3, [r2, #4]
 8009ff2:	4408      	add	r0, r1
 8009ff4:	6010      	str	r0, [r2, #0]
 8009ff6:	e7da      	b.n	8009fae <_free_r+0x22>
 8009ff8:	d902      	bls.n	800a000 <_free_r+0x74>
 8009ffa:	230c      	movs	r3, #12
 8009ffc:	602b      	str	r3, [r5, #0]
 8009ffe:	e7d6      	b.n	8009fae <_free_r+0x22>
 800a000:	6820      	ldr	r0, [r4, #0]
 800a002:	1821      	adds	r1, r4, r0
 800a004:	428b      	cmp	r3, r1
 800a006:	bf04      	itt	eq
 800a008:	6819      	ldreq	r1, [r3, #0]
 800a00a:	685b      	ldreq	r3, [r3, #4]
 800a00c:	6063      	str	r3, [r4, #4]
 800a00e:	bf04      	itt	eq
 800a010:	1809      	addeq	r1, r1, r0
 800a012:	6021      	streq	r1, [r4, #0]
 800a014:	6054      	str	r4, [r2, #4]
 800a016:	e7ca      	b.n	8009fae <_free_r+0x22>
 800a018:	bd38      	pop	{r3, r4, r5, pc}
 800a01a:	bf00      	nop
 800a01c:	24004514 	.word	0x24004514

0800a020 <__malloc_lock>:
 800a020:	4801      	ldr	r0, [pc, #4]	@ (800a028 <__malloc_lock+0x8>)
 800a022:	f7ff bfb1 	b.w	8009f88 <__retarget_lock_acquire_recursive>
 800a026:	bf00      	nop
 800a028:	24004510 	.word	0x24004510

0800a02c <__malloc_unlock>:
 800a02c:	4801      	ldr	r0, [pc, #4]	@ (800a034 <__malloc_unlock+0x8>)
 800a02e:	f7ff bfac 	b.w	8009f8a <__retarget_lock_release_recursive>
 800a032:	bf00      	nop
 800a034:	24004510 	.word	0x24004510

0800a038 <_init>:
 800a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03a:	bf00      	nop
 800a03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03e:	bc08      	pop	{r3}
 800a040:	469e      	mov	lr, r3
 800a042:	4770      	bx	lr

0800a044 <_fini>:
 800a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a046:	bf00      	nop
 800a048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04a:	bc08      	pop	{r3}
 800a04c:	469e      	mov	lr, r3
 800a04e:	4770      	bx	lr
